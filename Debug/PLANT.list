
PLANT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c00  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08006cc0  08006cc0  00016cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f68  08006f68  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006f68  08006f68  00016f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f70  08006f70  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f70  08006f70  00016f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f74  08006f74  00016f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000068  08006fe0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08006fe0  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e949  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002108  00000000  00000000  0002e9d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  00030ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  000318c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016503  00000000  00000000  00032590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a86d  00000000  00000000  00048a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008884f  00000000  00000000  00053300  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbb4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a88  00000000  00000000  000dbbcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006ca8 	.word	0x08006ca8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006ca8 	.word	0x08006ca8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 fb31 	bl	8000898 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fa89 	bl	8000758 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fb23 	bl	8000898 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fb19 	bl	8000898 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 faab 	bl	80007d0 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 faa1 	bl	80007d0 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_uldivmod>:
 800029c:	2b00      	cmp	r3, #0
 800029e:	d111      	bne.n	80002c4 <__aeabi_uldivmod+0x28>
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	d10f      	bne.n	80002c4 <__aeabi_uldivmod+0x28>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	d100      	bne.n	80002aa <__aeabi_uldivmod+0xe>
 80002a8:	2800      	cmp	r0, #0
 80002aa:	d002      	beq.n	80002b2 <__aeabi_uldivmod+0x16>
 80002ac:	2100      	movs	r1, #0
 80002ae:	43c9      	mvns	r1, r1
 80002b0:	1c08      	adds	r0, r1, #0
 80002b2:	b407      	push	{r0, r1, r2}
 80002b4:	4802      	ldr	r0, [pc, #8]	; (80002c0 <__aeabi_uldivmod+0x24>)
 80002b6:	a102      	add	r1, pc, #8	; (adr r1, 80002c0 <__aeabi_uldivmod+0x24>)
 80002b8:	1840      	adds	r0, r0, r1
 80002ba:	9002      	str	r0, [sp, #8]
 80002bc:	bd03      	pop	{r0, r1, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	ffffff5d 	.word	0xffffff5d
 80002c4:	b403      	push	{r0, r1}
 80002c6:	4668      	mov	r0, sp
 80002c8:	b501      	push	{r0, lr}
 80002ca:	9802      	ldr	r0, [sp, #8]
 80002cc:	f000 f806 	bl	80002dc <__udivmoddi4>
 80002d0:	9b01      	ldr	r3, [sp, #4]
 80002d2:	469e      	mov	lr, r3
 80002d4:	b002      	add	sp, #8
 80002d6:	bc0c      	pop	{r2, r3}
 80002d8:	4770      	bx	lr
 80002da:	46c0      	nop			; (mov r8, r8)

080002dc <__udivmoddi4>:
 80002dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002de:	464f      	mov	r7, r9
 80002e0:	4646      	mov	r6, r8
 80002e2:	46d6      	mov	lr, sl
 80002e4:	b5c0      	push	{r6, r7, lr}
 80002e6:	0004      	movs	r4, r0
 80002e8:	b082      	sub	sp, #8
 80002ea:	000d      	movs	r5, r1
 80002ec:	4691      	mov	r9, r2
 80002ee:	4698      	mov	r8, r3
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d82f      	bhi.n	8000354 <__udivmoddi4+0x78>
 80002f4:	d02c      	beq.n	8000350 <__udivmoddi4+0x74>
 80002f6:	4641      	mov	r1, r8
 80002f8:	4648      	mov	r0, r9
 80002fa:	f000 fc15 	bl	8000b28 <__clzdi2>
 80002fe:	0029      	movs	r1, r5
 8000300:	0006      	movs	r6, r0
 8000302:	0020      	movs	r0, r4
 8000304:	f000 fc10 	bl	8000b28 <__clzdi2>
 8000308:	1a33      	subs	r3, r6, r0
 800030a:	469c      	mov	ip, r3
 800030c:	3b20      	subs	r3, #32
 800030e:	469a      	mov	sl, r3
 8000310:	d500      	bpl.n	8000314 <__udivmoddi4+0x38>
 8000312:	e076      	b.n	8000402 <__udivmoddi4+0x126>
 8000314:	464b      	mov	r3, r9
 8000316:	4652      	mov	r2, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001f      	movs	r7, r3
 800031c:	464b      	mov	r3, r9
 800031e:	4662      	mov	r2, ip
 8000320:	4093      	lsls	r3, r2
 8000322:	001e      	movs	r6, r3
 8000324:	42af      	cmp	r7, r5
 8000326:	d828      	bhi.n	800037a <__udivmoddi4+0x9e>
 8000328:	d025      	beq.n	8000376 <__udivmoddi4+0x9a>
 800032a:	4653      	mov	r3, sl
 800032c:	1ba4      	subs	r4, r4, r6
 800032e:	41bd      	sbcs	r5, r7
 8000330:	2b00      	cmp	r3, #0
 8000332:	da00      	bge.n	8000336 <__udivmoddi4+0x5a>
 8000334:	e07b      	b.n	800042e <__udivmoddi4+0x152>
 8000336:	2200      	movs	r2, #0
 8000338:	2300      	movs	r3, #0
 800033a:	9200      	str	r2, [sp, #0]
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4652      	mov	r2, sl
 8000342:	4093      	lsls	r3, r2
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	4662      	mov	r2, ip
 800034a:	4093      	lsls	r3, r2
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	e018      	b.n	8000382 <__udivmoddi4+0xa6>
 8000350:	4282      	cmp	r2, r0
 8000352:	d9d0      	bls.n	80002f6 <__udivmoddi4+0x1a>
 8000354:	2200      	movs	r2, #0
 8000356:	2300      	movs	r3, #0
 8000358:	9200      	str	r2, [sp, #0]
 800035a:	9301      	str	r3, [sp, #4]
 800035c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <__udivmoddi4+0x8a>
 8000362:	601c      	str	r4, [r3, #0]
 8000364:	605d      	str	r5, [r3, #4]
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	b002      	add	sp, #8
 800036c:	bc1c      	pop	{r2, r3, r4}
 800036e:	4690      	mov	r8, r2
 8000370:	4699      	mov	r9, r3
 8000372:	46a2      	mov	sl, r4
 8000374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000376:	42a3      	cmp	r3, r4
 8000378:	d9d7      	bls.n	800032a <__udivmoddi4+0x4e>
 800037a:	2200      	movs	r2, #0
 800037c:	2300      	movs	r3, #0
 800037e:	9200      	str	r2, [sp, #0]
 8000380:	9301      	str	r3, [sp, #4]
 8000382:	4663      	mov	r3, ip
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0e9      	beq.n	800035c <__udivmoddi4+0x80>
 8000388:	07fb      	lsls	r3, r7, #31
 800038a:	4698      	mov	r8, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	430a      	orrs	r2, r1
 8000392:	087b      	lsrs	r3, r7, #1
 8000394:	4666      	mov	r6, ip
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xda>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xc4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xde>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0xe8>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xbc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xda>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	4653      	mov	r3, sl
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db23      	blt.n	800041a <__udivmoddi4+0x13e>
 80003d2:	002b      	movs	r3, r5
 80003d4:	4652      	mov	r2, sl
 80003d6:	40d3      	lsrs	r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4664      	mov	r4, ip
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	4653      	mov	r3, sl
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2d      	blt.n	8000444 <__udivmoddi4+0x168>
 80003e8:	0026      	movs	r6, r4
 80003ea:	4657      	mov	r7, sl
 80003ec:	40be      	lsls	r6, r7
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4667      	mov	r7, ip
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e7ac      	b.n	800035c <__udivmoddi4+0x80>
 8000402:	4662      	mov	r2, ip
 8000404:	2320      	movs	r3, #32
 8000406:	1a9b      	subs	r3, r3, r2
 8000408:	464a      	mov	r2, r9
 800040a:	40da      	lsrs	r2, r3
 800040c:	4661      	mov	r1, ip
 800040e:	0013      	movs	r3, r2
 8000410:	4642      	mov	r2, r8
 8000412:	408a      	lsls	r2, r1
 8000414:	0017      	movs	r7, r2
 8000416:	431f      	orrs	r7, r3
 8000418:	e780      	b.n	800031c <__udivmoddi4+0x40>
 800041a:	4662      	mov	r2, ip
 800041c:	2320      	movs	r3, #32
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	002a      	movs	r2, r5
 8000422:	4666      	mov	r6, ip
 8000424:	409a      	lsls	r2, r3
 8000426:	0023      	movs	r3, r4
 8000428:	40f3      	lsrs	r3, r6
 800042a:	4313      	orrs	r3, r2
 800042c:	e7d4      	b.n	80003d8 <__udivmoddi4+0xfc>
 800042e:	4662      	mov	r2, ip
 8000430:	2320      	movs	r3, #32
 8000432:	2100      	movs	r1, #0
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	2200      	movs	r2, #0
 8000438:	9100      	str	r1, [sp, #0]
 800043a:	9201      	str	r2, [sp, #4]
 800043c:	2201      	movs	r2, #1
 800043e:	40da      	lsrs	r2, r3
 8000440:	9201      	str	r2, [sp, #4]
 8000442:	e780      	b.n	8000346 <__udivmoddi4+0x6a>
 8000444:	2320      	movs	r3, #32
 8000446:	4662      	mov	r2, ip
 8000448:	0026      	movs	r6, r4
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	002f      	movs	r7, r5
 8000450:	46b0      	mov	r8, r6
 8000452:	4666      	mov	r6, ip
 8000454:	40b7      	lsls	r7, r6
 8000456:	4646      	mov	r6, r8
 8000458:	003b      	movs	r3, r7
 800045a:	4333      	orrs	r3, r6
 800045c:	e7c8      	b.n	80003f0 <__udivmoddi4+0x114>
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_fdiv>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	4657      	mov	r7, sl
 8000464:	464e      	mov	r6, r9
 8000466:	4645      	mov	r5, r8
 8000468:	46de      	mov	lr, fp
 800046a:	0244      	lsls	r4, r0, #9
 800046c:	b5e0      	push	{r5, r6, r7, lr}
 800046e:	0046      	lsls	r6, r0, #1
 8000470:	4688      	mov	r8, r1
 8000472:	0a64      	lsrs	r4, r4, #9
 8000474:	0e36      	lsrs	r6, r6, #24
 8000476:	0fc7      	lsrs	r7, r0, #31
 8000478:	2e00      	cmp	r6, #0
 800047a:	d063      	beq.n	8000544 <__aeabi_fdiv+0xe4>
 800047c:	2eff      	cmp	r6, #255	; 0xff
 800047e:	d024      	beq.n	80004ca <__aeabi_fdiv+0x6a>
 8000480:	2380      	movs	r3, #128	; 0x80
 8000482:	00e4      	lsls	r4, r4, #3
 8000484:	04db      	lsls	r3, r3, #19
 8000486:	431c      	orrs	r4, r3
 8000488:	2300      	movs	r3, #0
 800048a:	4699      	mov	r9, r3
 800048c:	469b      	mov	fp, r3
 800048e:	3e7f      	subs	r6, #127	; 0x7f
 8000490:	4643      	mov	r3, r8
 8000492:	4642      	mov	r2, r8
 8000494:	025d      	lsls	r5, r3, #9
 8000496:	0fd2      	lsrs	r2, r2, #31
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	0a6d      	lsrs	r5, r5, #9
 800049c:	0e1b      	lsrs	r3, r3, #24
 800049e:	4690      	mov	r8, r2
 80004a0:	4692      	mov	sl, r2
 80004a2:	d065      	beq.n	8000570 <__aeabi_fdiv+0x110>
 80004a4:	2bff      	cmp	r3, #255	; 0xff
 80004a6:	d055      	beq.n	8000554 <__aeabi_fdiv+0xf4>
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	2100      	movs	r1, #0
 80004ac:	00ed      	lsls	r5, r5, #3
 80004ae:	04d2      	lsls	r2, r2, #19
 80004b0:	3b7f      	subs	r3, #127	; 0x7f
 80004b2:	4315      	orrs	r5, r2
 80004b4:	1af6      	subs	r6, r6, r3
 80004b6:	4643      	mov	r3, r8
 80004b8:	464a      	mov	r2, r9
 80004ba:	407b      	eors	r3, r7
 80004bc:	2a0f      	cmp	r2, #15
 80004be:	d900      	bls.n	80004c2 <__aeabi_fdiv+0x62>
 80004c0:	e08d      	b.n	80005de <__aeabi_fdiv+0x17e>
 80004c2:	486d      	ldr	r0, [pc, #436]	; (8000678 <__aeabi_fdiv+0x218>)
 80004c4:	0092      	lsls	r2, r2, #2
 80004c6:	5882      	ldr	r2, [r0, r2]
 80004c8:	4697      	mov	pc, r2
 80004ca:	2c00      	cmp	r4, #0
 80004cc:	d154      	bne.n	8000578 <__aeabi_fdiv+0x118>
 80004ce:	2308      	movs	r3, #8
 80004d0:	4699      	mov	r9, r3
 80004d2:	3b06      	subs	r3, #6
 80004d4:	26ff      	movs	r6, #255	; 0xff
 80004d6:	469b      	mov	fp, r3
 80004d8:	e7da      	b.n	8000490 <__aeabi_fdiv+0x30>
 80004da:	2500      	movs	r5, #0
 80004dc:	4653      	mov	r3, sl
 80004de:	2902      	cmp	r1, #2
 80004e0:	d01b      	beq.n	800051a <__aeabi_fdiv+0xba>
 80004e2:	2903      	cmp	r1, #3
 80004e4:	d100      	bne.n	80004e8 <__aeabi_fdiv+0x88>
 80004e6:	e0bf      	b.n	8000668 <__aeabi_fdiv+0x208>
 80004e8:	2901      	cmp	r1, #1
 80004ea:	d028      	beq.n	800053e <__aeabi_fdiv+0xde>
 80004ec:	0030      	movs	r0, r6
 80004ee:	307f      	adds	r0, #127	; 0x7f
 80004f0:	2800      	cmp	r0, #0
 80004f2:	dd20      	ble.n	8000536 <__aeabi_fdiv+0xd6>
 80004f4:	076a      	lsls	r2, r5, #29
 80004f6:	d004      	beq.n	8000502 <__aeabi_fdiv+0xa2>
 80004f8:	220f      	movs	r2, #15
 80004fa:	402a      	ands	r2, r5
 80004fc:	2a04      	cmp	r2, #4
 80004fe:	d000      	beq.n	8000502 <__aeabi_fdiv+0xa2>
 8000500:	3504      	adds	r5, #4
 8000502:	012a      	lsls	r2, r5, #4
 8000504:	d503      	bpl.n	800050e <__aeabi_fdiv+0xae>
 8000506:	0030      	movs	r0, r6
 8000508:	4a5c      	ldr	r2, [pc, #368]	; (800067c <__aeabi_fdiv+0x21c>)
 800050a:	3080      	adds	r0, #128	; 0x80
 800050c:	4015      	ands	r5, r2
 800050e:	28fe      	cmp	r0, #254	; 0xfe
 8000510:	dc03      	bgt.n	800051a <__aeabi_fdiv+0xba>
 8000512:	01ac      	lsls	r4, r5, #6
 8000514:	0a64      	lsrs	r4, r4, #9
 8000516:	b2c2      	uxtb	r2, r0
 8000518:	e001      	b.n	800051e <__aeabi_fdiv+0xbe>
 800051a:	22ff      	movs	r2, #255	; 0xff
 800051c:	2400      	movs	r4, #0
 800051e:	0264      	lsls	r4, r4, #9
 8000520:	05d2      	lsls	r2, r2, #23
 8000522:	0a60      	lsrs	r0, r4, #9
 8000524:	07db      	lsls	r3, r3, #31
 8000526:	4310      	orrs	r0, r2
 8000528:	4318      	orrs	r0, r3
 800052a:	bc3c      	pop	{r2, r3, r4, r5}
 800052c:	4690      	mov	r8, r2
 800052e:	4699      	mov	r9, r3
 8000530:	46a2      	mov	sl, r4
 8000532:	46ab      	mov	fp, r5
 8000534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000536:	2201      	movs	r2, #1
 8000538:	1a10      	subs	r0, r2, r0
 800053a:	281b      	cmp	r0, #27
 800053c:	dd7c      	ble.n	8000638 <__aeabi_fdiv+0x1d8>
 800053e:	2200      	movs	r2, #0
 8000540:	2400      	movs	r4, #0
 8000542:	e7ec      	b.n	800051e <__aeabi_fdiv+0xbe>
 8000544:	2c00      	cmp	r4, #0
 8000546:	d11d      	bne.n	8000584 <__aeabi_fdiv+0x124>
 8000548:	2304      	movs	r3, #4
 800054a:	4699      	mov	r9, r3
 800054c:	3b03      	subs	r3, #3
 800054e:	2600      	movs	r6, #0
 8000550:	469b      	mov	fp, r3
 8000552:	e79d      	b.n	8000490 <__aeabi_fdiv+0x30>
 8000554:	3eff      	subs	r6, #255	; 0xff
 8000556:	2d00      	cmp	r5, #0
 8000558:	d120      	bne.n	800059c <__aeabi_fdiv+0x13c>
 800055a:	2102      	movs	r1, #2
 800055c:	4643      	mov	r3, r8
 800055e:	464a      	mov	r2, r9
 8000560:	407b      	eors	r3, r7
 8000562:	430a      	orrs	r2, r1
 8000564:	2a0f      	cmp	r2, #15
 8000566:	d8d8      	bhi.n	800051a <__aeabi_fdiv+0xba>
 8000568:	4845      	ldr	r0, [pc, #276]	; (8000680 <__aeabi_fdiv+0x220>)
 800056a:	0092      	lsls	r2, r2, #2
 800056c:	5882      	ldr	r2, [r0, r2]
 800056e:	4697      	mov	pc, r2
 8000570:	2d00      	cmp	r5, #0
 8000572:	d119      	bne.n	80005a8 <__aeabi_fdiv+0x148>
 8000574:	2101      	movs	r1, #1
 8000576:	e7f1      	b.n	800055c <__aeabi_fdiv+0xfc>
 8000578:	230c      	movs	r3, #12
 800057a:	4699      	mov	r9, r3
 800057c:	3b09      	subs	r3, #9
 800057e:	26ff      	movs	r6, #255	; 0xff
 8000580:	469b      	mov	fp, r3
 8000582:	e785      	b.n	8000490 <__aeabi_fdiv+0x30>
 8000584:	0020      	movs	r0, r4
 8000586:	f000 fab1 	bl	8000aec <__clzsi2>
 800058a:	2676      	movs	r6, #118	; 0x76
 800058c:	1f43      	subs	r3, r0, #5
 800058e:	409c      	lsls	r4, r3
 8000590:	2300      	movs	r3, #0
 8000592:	4276      	negs	r6, r6
 8000594:	1a36      	subs	r6, r6, r0
 8000596:	4699      	mov	r9, r3
 8000598:	469b      	mov	fp, r3
 800059a:	e779      	b.n	8000490 <__aeabi_fdiv+0x30>
 800059c:	464a      	mov	r2, r9
 800059e:	2303      	movs	r3, #3
 80005a0:	431a      	orrs	r2, r3
 80005a2:	4691      	mov	r9, r2
 80005a4:	2103      	movs	r1, #3
 80005a6:	e786      	b.n	80004b6 <__aeabi_fdiv+0x56>
 80005a8:	0028      	movs	r0, r5
 80005aa:	f000 fa9f 	bl	8000aec <__clzsi2>
 80005ae:	1f43      	subs	r3, r0, #5
 80005b0:	1836      	adds	r6, r6, r0
 80005b2:	409d      	lsls	r5, r3
 80005b4:	3676      	adds	r6, #118	; 0x76
 80005b6:	2100      	movs	r1, #0
 80005b8:	e77d      	b.n	80004b6 <__aeabi_fdiv+0x56>
 80005ba:	2480      	movs	r4, #128	; 0x80
 80005bc:	2300      	movs	r3, #0
 80005be:	03e4      	lsls	r4, r4, #15
 80005c0:	22ff      	movs	r2, #255	; 0xff
 80005c2:	e7ac      	b.n	800051e <__aeabi_fdiv+0xbe>
 80005c4:	2500      	movs	r5, #0
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	03db      	lsls	r3, r3, #15
 80005ca:	421c      	tst	r4, r3
 80005cc:	d028      	beq.n	8000620 <__aeabi_fdiv+0x1c0>
 80005ce:	421d      	tst	r5, r3
 80005d0:	d126      	bne.n	8000620 <__aeabi_fdiv+0x1c0>
 80005d2:	432b      	orrs	r3, r5
 80005d4:	025c      	lsls	r4, r3, #9
 80005d6:	0a64      	lsrs	r4, r4, #9
 80005d8:	4643      	mov	r3, r8
 80005da:	22ff      	movs	r2, #255	; 0xff
 80005dc:	e79f      	b.n	800051e <__aeabi_fdiv+0xbe>
 80005de:	0162      	lsls	r2, r4, #5
 80005e0:	016c      	lsls	r4, r5, #5
 80005e2:	42a2      	cmp	r2, r4
 80005e4:	d224      	bcs.n	8000630 <__aeabi_fdiv+0x1d0>
 80005e6:	211b      	movs	r1, #27
 80005e8:	2500      	movs	r5, #0
 80005ea:	3e01      	subs	r6, #1
 80005ec:	2701      	movs	r7, #1
 80005ee:	0010      	movs	r0, r2
 80005f0:	006d      	lsls	r5, r5, #1
 80005f2:	0052      	lsls	r2, r2, #1
 80005f4:	2800      	cmp	r0, #0
 80005f6:	db01      	blt.n	80005fc <__aeabi_fdiv+0x19c>
 80005f8:	4294      	cmp	r4, r2
 80005fa:	d801      	bhi.n	8000600 <__aeabi_fdiv+0x1a0>
 80005fc:	1b12      	subs	r2, r2, r4
 80005fe:	433d      	orrs	r5, r7
 8000600:	3901      	subs	r1, #1
 8000602:	2900      	cmp	r1, #0
 8000604:	d1f3      	bne.n	80005ee <__aeabi_fdiv+0x18e>
 8000606:	0014      	movs	r4, r2
 8000608:	1e62      	subs	r2, r4, #1
 800060a:	4194      	sbcs	r4, r2
 800060c:	4325      	orrs	r5, r4
 800060e:	e76d      	b.n	80004ec <__aeabi_fdiv+0x8c>
 8000610:	46ba      	mov	sl, r7
 8000612:	4659      	mov	r1, fp
 8000614:	0025      	movs	r5, r4
 8000616:	4653      	mov	r3, sl
 8000618:	2902      	cmp	r1, #2
 800061a:	d000      	beq.n	800061e <__aeabi_fdiv+0x1be>
 800061c:	e761      	b.n	80004e2 <__aeabi_fdiv+0x82>
 800061e:	e77c      	b.n	800051a <__aeabi_fdiv+0xba>
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	03db      	lsls	r3, r3, #15
 8000624:	431c      	orrs	r4, r3
 8000626:	0264      	lsls	r4, r4, #9
 8000628:	0a64      	lsrs	r4, r4, #9
 800062a:	003b      	movs	r3, r7
 800062c:	22ff      	movs	r2, #255	; 0xff
 800062e:	e776      	b.n	800051e <__aeabi_fdiv+0xbe>
 8000630:	1b12      	subs	r2, r2, r4
 8000632:	211a      	movs	r1, #26
 8000634:	2501      	movs	r5, #1
 8000636:	e7d9      	b.n	80005ec <__aeabi_fdiv+0x18c>
 8000638:	369e      	adds	r6, #158	; 0x9e
 800063a:	002a      	movs	r2, r5
 800063c:	40b5      	lsls	r5, r6
 800063e:	002c      	movs	r4, r5
 8000640:	40c2      	lsrs	r2, r0
 8000642:	1e65      	subs	r5, r4, #1
 8000644:	41ac      	sbcs	r4, r5
 8000646:	4314      	orrs	r4, r2
 8000648:	0762      	lsls	r2, r4, #29
 800064a:	d004      	beq.n	8000656 <__aeabi_fdiv+0x1f6>
 800064c:	220f      	movs	r2, #15
 800064e:	4022      	ands	r2, r4
 8000650:	2a04      	cmp	r2, #4
 8000652:	d000      	beq.n	8000656 <__aeabi_fdiv+0x1f6>
 8000654:	3404      	adds	r4, #4
 8000656:	0162      	lsls	r2, r4, #5
 8000658:	d403      	bmi.n	8000662 <__aeabi_fdiv+0x202>
 800065a:	01a4      	lsls	r4, r4, #6
 800065c:	0a64      	lsrs	r4, r4, #9
 800065e:	2200      	movs	r2, #0
 8000660:	e75d      	b.n	800051e <__aeabi_fdiv+0xbe>
 8000662:	2201      	movs	r2, #1
 8000664:	2400      	movs	r4, #0
 8000666:	e75a      	b.n	800051e <__aeabi_fdiv+0xbe>
 8000668:	2480      	movs	r4, #128	; 0x80
 800066a:	03e4      	lsls	r4, r4, #15
 800066c:	432c      	orrs	r4, r5
 800066e:	0264      	lsls	r4, r4, #9
 8000670:	0a64      	lsrs	r4, r4, #9
 8000672:	22ff      	movs	r2, #255	; 0xff
 8000674:	e753      	b.n	800051e <__aeabi_fdiv+0xbe>
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	08006de4 	.word	0x08006de4
 800067c:	f7ffffff 	.word	0xf7ffffff
 8000680:	08006e24 	.word	0x08006e24

08000684 <__aeabi_f2iz>:
 8000684:	0241      	lsls	r1, r0, #9
 8000686:	0042      	lsls	r2, r0, #1
 8000688:	0fc3      	lsrs	r3, r0, #31
 800068a:	0a49      	lsrs	r1, r1, #9
 800068c:	0e12      	lsrs	r2, r2, #24
 800068e:	2000      	movs	r0, #0
 8000690:	2a7e      	cmp	r2, #126	; 0x7e
 8000692:	d90d      	bls.n	80006b0 <__aeabi_f2iz+0x2c>
 8000694:	2a9d      	cmp	r2, #157	; 0x9d
 8000696:	d80c      	bhi.n	80006b2 <__aeabi_f2iz+0x2e>
 8000698:	2080      	movs	r0, #128	; 0x80
 800069a:	0400      	lsls	r0, r0, #16
 800069c:	4301      	orrs	r1, r0
 800069e:	2a95      	cmp	r2, #149	; 0x95
 80006a0:	dc0a      	bgt.n	80006b8 <__aeabi_f2iz+0x34>
 80006a2:	2096      	movs	r0, #150	; 0x96
 80006a4:	1a82      	subs	r2, r0, r2
 80006a6:	40d1      	lsrs	r1, r2
 80006a8:	4248      	negs	r0, r1
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d100      	bne.n	80006b0 <__aeabi_f2iz+0x2c>
 80006ae:	0008      	movs	r0, r1
 80006b0:	4770      	bx	lr
 80006b2:	4a03      	ldr	r2, [pc, #12]	; (80006c0 <__aeabi_f2iz+0x3c>)
 80006b4:	1898      	adds	r0, r3, r2
 80006b6:	e7fb      	b.n	80006b0 <__aeabi_f2iz+0x2c>
 80006b8:	3a96      	subs	r2, #150	; 0x96
 80006ba:	4091      	lsls	r1, r2
 80006bc:	e7f4      	b.n	80006a8 <__aeabi_f2iz+0x24>
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	7fffffff 	.word	0x7fffffff

080006c4 <__aeabi_i2f>:
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d03d      	beq.n	8000746 <__aeabi_i2f+0x82>
 80006ca:	17c3      	asrs	r3, r0, #31
 80006cc:	18c5      	adds	r5, r0, r3
 80006ce:	405d      	eors	r5, r3
 80006d0:	0fc4      	lsrs	r4, r0, #31
 80006d2:	0028      	movs	r0, r5
 80006d4:	f000 fa0a 	bl	8000aec <__clzsi2>
 80006d8:	229e      	movs	r2, #158	; 0x9e
 80006da:	1a12      	subs	r2, r2, r0
 80006dc:	2a96      	cmp	r2, #150	; 0x96
 80006de:	dc07      	bgt.n	80006f0 <__aeabi_i2f+0x2c>
 80006e0:	b2d2      	uxtb	r2, r2
 80006e2:	2808      	cmp	r0, #8
 80006e4:	dd33      	ble.n	800074e <__aeabi_i2f+0x8a>
 80006e6:	3808      	subs	r0, #8
 80006e8:	4085      	lsls	r5, r0
 80006ea:	0268      	lsls	r0, r5, #9
 80006ec:	0a40      	lsrs	r0, r0, #9
 80006ee:	e023      	b.n	8000738 <__aeabi_i2f+0x74>
 80006f0:	2a99      	cmp	r2, #153	; 0x99
 80006f2:	dd0b      	ble.n	800070c <__aeabi_i2f+0x48>
 80006f4:	2305      	movs	r3, #5
 80006f6:	0029      	movs	r1, r5
 80006f8:	1a1b      	subs	r3, r3, r0
 80006fa:	40d9      	lsrs	r1, r3
 80006fc:	0003      	movs	r3, r0
 80006fe:	331b      	adds	r3, #27
 8000700:	409d      	lsls	r5, r3
 8000702:	002b      	movs	r3, r5
 8000704:	1e5d      	subs	r5, r3, #1
 8000706:	41ab      	sbcs	r3, r5
 8000708:	4319      	orrs	r1, r3
 800070a:	000d      	movs	r5, r1
 800070c:	2805      	cmp	r0, #5
 800070e:	dd01      	ble.n	8000714 <__aeabi_i2f+0x50>
 8000710:	1f43      	subs	r3, r0, #5
 8000712:	409d      	lsls	r5, r3
 8000714:	002b      	movs	r3, r5
 8000716:	490f      	ldr	r1, [pc, #60]	; (8000754 <__aeabi_i2f+0x90>)
 8000718:	400b      	ands	r3, r1
 800071a:	076e      	lsls	r6, r5, #29
 800071c:	d009      	beq.n	8000732 <__aeabi_i2f+0x6e>
 800071e:	260f      	movs	r6, #15
 8000720:	4035      	ands	r5, r6
 8000722:	2d04      	cmp	r5, #4
 8000724:	d005      	beq.n	8000732 <__aeabi_i2f+0x6e>
 8000726:	3304      	adds	r3, #4
 8000728:	015d      	lsls	r5, r3, #5
 800072a:	d502      	bpl.n	8000732 <__aeabi_i2f+0x6e>
 800072c:	229f      	movs	r2, #159	; 0x9f
 800072e:	400b      	ands	r3, r1
 8000730:	1a12      	subs	r2, r2, r0
 8000732:	019b      	lsls	r3, r3, #6
 8000734:	0a58      	lsrs	r0, r3, #9
 8000736:	b2d2      	uxtb	r2, r2
 8000738:	0240      	lsls	r0, r0, #9
 800073a:	05d2      	lsls	r2, r2, #23
 800073c:	0a40      	lsrs	r0, r0, #9
 800073e:	07e4      	lsls	r4, r4, #31
 8000740:	4310      	orrs	r0, r2
 8000742:	4320      	orrs	r0, r4
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	2400      	movs	r4, #0
 8000748:	2200      	movs	r2, #0
 800074a:	2000      	movs	r0, #0
 800074c:	e7f4      	b.n	8000738 <__aeabi_i2f+0x74>
 800074e:	0268      	lsls	r0, r5, #9
 8000750:	0a40      	lsrs	r0, r0, #9
 8000752:	e7f1      	b.n	8000738 <__aeabi_i2f+0x74>
 8000754:	fbffffff 	.word	0xfbffffff

08000758 <__eqdf2>:
 8000758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075a:	464f      	mov	r7, r9
 800075c:	4646      	mov	r6, r8
 800075e:	46d6      	mov	lr, sl
 8000760:	4684      	mov	ip, r0
 8000762:	b5c0      	push	{r6, r7, lr}
 8000764:	4680      	mov	r8, r0
 8000766:	4e19      	ldr	r6, [pc, #100]	; (80007cc <__eqdf2+0x74>)
 8000768:	0318      	lsls	r0, r3, #12
 800076a:	030f      	lsls	r7, r1, #12
 800076c:	004d      	lsls	r5, r1, #1
 800076e:	0b00      	lsrs	r0, r0, #12
 8000770:	005c      	lsls	r4, r3, #1
 8000772:	4682      	mov	sl, r0
 8000774:	0b3f      	lsrs	r7, r7, #12
 8000776:	0d6d      	lsrs	r5, r5, #21
 8000778:	0fc9      	lsrs	r1, r1, #31
 800077a:	4691      	mov	r9, r2
 800077c:	0d64      	lsrs	r4, r4, #21
 800077e:	0fdb      	lsrs	r3, r3, #31
 8000780:	2001      	movs	r0, #1
 8000782:	42b5      	cmp	r5, r6
 8000784:	d00a      	beq.n	800079c <__eqdf2+0x44>
 8000786:	42b4      	cmp	r4, r6
 8000788:	d003      	beq.n	8000792 <__eqdf2+0x3a>
 800078a:	42a5      	cmp	r5, r4
 800078c:	d101      	bne.n	8000792 <__eqdf2+0x3a>
 800078e:	4557      	cmp	r7, sl
 8000790:	d00c      	beq.n	80007ac <__eqdf2+0x54>
 8000792:	bc1c      	pop	{r2, r3, r4}
 8000794:	4690      	mov	r8, r2
 8000796:	4699      	mov	r9, r3
 8000798:	46a2      	mov	sl, r4
 800079a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800079c:	4666      	mov	r6, ip
 800079e:	433e      	orrs	r6, r7
 80007a0:	d1f7      	bne.n	8000792 <__eqdf2+0x3a>
 80007a2:	42ac      	cmp	r4, r5
 80007a4:	d1f5      	bne.n	8000792 <__eqdf2+0x3a>
 80007a6:	4654      	mov	r4, sl
 80007a8:	4314      	orrs	r4, r2
 80007aa:	d1f2      	bne.n	8000792 <__eqdf2+0x3a>
 80007ac:	2001      	movs	r0, #1
 80007ae:	45c8      	cmp	r8, r9
 80007b0:	d1ef      	bne.n	8000792 <__eqdf2+0x3a>
 80007b2:	4299      	cmp	r1, r3
 80007b4:	d007      	beq.n	80007c6 <__eqdf2+0x6e>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d1eb      	bne.n	8000792 <__eqdf2+0x3a>
 80007ba:	4663      	mov	r3, ip
 80007bc:	431f      	orrs	r7, r3
 80007be:	0038      	movs	r0, r7
 80007c0:	1e47      	subs	r7, r0, #1
 80007c2:	41b8      	sbcs	r0, r7
 80007c4:	e7e5      	b.n	8000792 <__eqdf2+0x3a>
 80007c6:	2000      	movs	r0, #0
 80007c8:	e7e3      	b.n	8000792 <__eqdf2+0x3a>
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	000007ff 	.word	0x000007ff

080007d0 <__gedf2>:
 80007d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d2:	464f      	mov	r7, r9
 80007d4:	4646      	mov	r6, r8
 80007d6:	46d6      	mov	lr, sl
 80007d8:	004d      	lsls	r5, r1, #1
 80007da:	b5c0      	push	{r6, r7, lr}
 80007dc:	030e      	lsls	r6, r1, #12
 80007de:	0fc9      	lsrs	r1, r1, #31
 80007e0:	468a      	mov	sl, r1
 80007e2:	492c      	ldr	r1, [pc, #176]	; (8000894 <__gedf2+0xc4>)
 80007e4:	031f      	lsls	r7, r3, #12
 80007e6:	005c      	lsls	r4, r3, #1
 80007e8:	4680      	mov	r8, r0
 80007ea:	0b36      	lsrs	r6, r6, #12
 80007ec:	0d6d      	lsrs	r5, r5, #21
 80007ee:	4691      	mov	r9, r2
 80007f0:	0b3f      	lsrs	r7, r7, #12
 80007f2:	0d64      	lsrs	r4, r4, #21
 80007f4:	0fdb      	lsrs	r3, r3, #31
 80007f6:	428d      	cmp	r5, r1
 80007f8:	d01e      	beq.n	8000838 <__gedf2+0x68>
 80007fa:	428c      	cmp	r4, r1
 80007fc:	d016      	beq.n	800082c <__gedf2+0x5c>
 80007fe:	2d00      	cmp	r5, #0
 8000800:	d11e      	bne.n	8000840 <__gedf2+0x70>
 8000802:	4330      	orrs	r0, r6
 8000804:	4684      	mov	ip, r0
 8000806:	2c00      	cmp	r4, #0
 8000808:	d101      	bne.n	800080e <__gedf2+0x3e>
 800080a:	433a      	orrs	r2, r7
 800080c:	d023      	beq.n	8000856 <__gedf2+0x86>
 800080e:	4662      	mov	r2, ip
 8000810:	2a00      	cmp	r2, #0
 8000812:	d01a      	beq.n	800084a <__gedf2+0x7a>
 8000814:	459a      	cmp	sl, r3
 8000816:	d029      	beq.n	800086c <__gedf2+0x9c>
 8000818:	4651      	mov	r1, sl
 800081a:	2002      	movs	r0, #2
 800081c:	3901      	subs	r1, #1
 800081e:	4008      	ands	r0, r1
 8000820:	3801      	subs	r0, #1
 8000822:	bc1c      	pop	{r2, r3, r4}
 8000824:	4690      	mov	r8, r2
 8000826:	4699      	mov	r9, r3
 8000828:	46a2      	mov	sl, r4
 800082a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082c:	0039      	movs	r1, r7
 800082e:	4311      	orrs	r1, r2
 8000830:	d0e5      	beq.n	80007fe <__gedf2+0x2e>
 8000832:	2002      	movs	r0, #2
 8000834:	4240      	negs	r0, r0
 8000836:	e7f4      	b.n	8000822 <__gedf2+0x52>
 8000838:	4330      	orrs	r0, r6
 800083a:	d1fa      	bne.n	8000832 <__gedf2+0x62>
 800083c:	42ac      	cmp	r4, r5
 800083e:	d00f      	beq.n	8000860 <__gedf2+0x90>
 8000840:	2c00      	cmp	r4, #0
 8000842:	d10f      	bne.n	8000864 <__gedf2+0x94>
 8000844:	433a      	orrs	r2, r7
 8000846:	d0e7      	beq.n	8000818 <__gedf2+0x48>
 8000848:	e00c      	b.n	8000864 <__gedf2+0x94>
 800084a:	2201      	movs	r2, #1
 800084c:	3b01      	subs	r3, #1
 800084e:	4393      	bics	r3, r2
 8000850:	0018      	movs	r0, r3
 8000852:	3001      	adds	r0, #1
 8000854:	e7e5      	b.n	8000822 <__gedf2+0x52>
 8000856:	4663      	mov	r3, ip
 8000858:	2000      	movs	r0, #0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0e1      	beq.n	8000822 <__gedf2+0x52>
 800085e:	e7db      	b.n	8000818 <__gedf2+0x48>
 8000860:	433a      	orrs	r2, r7
 8000862:	d1e6      	bne.n	8000832 <__gedf2+0x62>
 8000864:	459a      	cmp	sl, r3
 8000866:	d1d7      	bne.n	8000818 <__gedf2+0x48>
 8000868:	42a5      	cmp	r5, r4
 800086a:	dcd5      	bgt.n	8000818 <__gedf2+0x48>
 800086c:	42a5      	cmp	r5, r4
 800086e:	db05      	blt.n	800087c <__gedf2+0xac>
 8000870:	42be      	cmp	r6, r7
 8000872:	d8d1      	bhi.n	8000818 <__gedf2+0x48>
 8000874:	d008      	beq.n	8000888 <__gedf2+0xb8>
 8000876:	2000      	movs	r0, #0
 8000878:	42be      	cmp	r6, r7
 800087a:	d2d2      	bcs.n	8000822 <__gedf2+0x52>
 800087c:	4650      	mov	r0, sl
 800087e:	2301      	movs	r3, #1
 8000880:	3801      	subs	r0, #1
 8000882:	4398      	bics	r0, r3
 8000884:	3001      	adds	r0, #1
 8000886:	e7cc      	b.n	8000822 <__gedf2+0x52>
 8000888:	45c8      	cmp	r8, r9
 800088a:	d8c5      	bhi.n	8000818 <__gedf2+0x48>
 800088c:	2000      	movs	r0, #0
 800088e:	45c8      	cmp	r8, r9
 8000890:	d3f4      	bcc.n	800087c <__gedf2+0xac>
 8000892:	e7c6      	b.n	8000822 <__gedf2+0x52>
 8000894:	000007ff 	.word	0x000007ff

08000898 <__ledf2>:
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	464f      	mov	r7, r9
 800089c:	4646      	mov	r6, r8
 800089e:	46d6      	mov	lr, sl
 80008a0:	004d      	lsls	r5, r1, #1
 80008a2:	b5c0      	push	{r6, r7, lr}
 80008a4:	030e      	lsls	r6, r1, #12
 80008a6:	0fc9      	lsrs	r1, r1, #31
 80008a8:	468a      	mov	sl, r1
 80008aa:	492e      	ldr	r1, [pc, #184]	; (8000964 <__ledf2+0xcc>)
 80008ac:	031f      	lsls	r7, r3, #12
 80008ae:	005c      	lsls	r4, r3, #1
 80008b0:	4680      	mov	r8, r0
 80008b2:	0b36      	lsrs	r6, r6, #12
 80008b4:	0d6d      	lsrs	r5, r5, #21
 80008b6:	4691      	mov	r9, r2
 80008b8:	0b3f      	lsrs	r7, r7, #12
 80008ba:	0d64      	lsrs	r4, r4, #21
 80008bc:	0fdb      	lsrs	r3, r3, #31
 80008be:	428d      	cmp	r5, r1
 80008c0:	d018      	beq.n	80008f4 <__ledf2+0x5c>
 80008c2:	428c      	cmp	r4, r1
 80008c4:	d011      	beq.n	80008ea <__ledf2+0x52>
 80008c6:	2d00      	cmp	r5, #0
 80008c8:	d118      	bne.n	80008fc <__ledf2+0x64>
 80008ca:	4330      	orrs	r0, r6
 80008cc:	4684      	mov	ip, r0
 80008ce:	2c00      	cmp	r4, #0
 80008d0:	d11e      	bne.n	8000910 <__ledf2+0x78>
 80008d2:	433a      	orrs	r2, r7
 80008d4:	d11c      	bne.n	8000910 <__ledf2+0x78>
 80008d6:	4663      	mov	r3, ip
 80008d8:	2000      	movs	r0, #0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d030      	beq.n	8000940 <__ledf2+0xa8>
 80008de:	4651      	mov	r1, sl
 80008e0:	2002      	movs	r0, #2
 80008e2:	3901      	subs	r1, #1
 80008e4:	4008      	ands	r0, r1
 80008e6:	3801      	subs	r0, #1
 80008e8:	e02a      	b.n	8000940 <__ledf2+0xa8>
 80008ea:	0039      	movs	r1, r7
 80008ec:	4311      	orrs	r1, r2
 80008ee:	d0ea      	beq.n	80008c6 <__ledf2+0x2e>
 80008f0:	2002      	movs	r0, #2
 80008f2:	e025      	b.n	8000940 <__ledf2+0xa8>
 80008f4:	4330      	orrs	r0, r6
 80008f6:	d1fb      	bne.n	80008f0 <__ledf2+0x58>
 80008f8:	42ac      	cmp	r4, r5
 80008fa:	d026      	beq.n	800094a <__ledf2+0xb2>
 80008fc:	2c00      	cmp	r4, #0
 80008fe:	d126      	bne.n	800094e <__ledf2+0xb6>
 8000900:	433a      	orrs	r2, r7
 8000902:	d124      	bne.n	800094e <__ledf2+0xb6>
 8000904:	4651      	mov	r1, sl
 8000906:	2002      	movs	r0, #2
 8000908:	3901      	subs	r1, #1
 800090a:	4008      	ands	r0, r1
 800090c:	3801      	subs	r0, #1
 800090e:	e017      	b.n	8000940 <__ledf2+0xa8>
 8000910:	4662      	mov	r2, ip
 8000912:	2a00      	cmp	r2, #0
 8000914:	d00f      	beq.n	8000936 <__ledf2+0x9e>
 8000916:	459a      	cmp	sl, r3
 8000918:	d1e1      	bne.n	80008de <__ledf2+0x46>
 800091a:	42a5      	cmp	r5, r4
 800091c:	db05      	blt.n	800092a <__ledf2+0x92>
 800091e:	42be      	cmp	r6, r7
 8000920:	d8dd      	bhi.n	80008de <__ledf2+0x46>
 8000922:	d019      	beq.n	8000958 <__ledf2+0xc0>
 8000924:	2000      	movs	r0, #0
 8000926:	42be      	cmp	r6, r7
 8000928:	d20a      	bcs.n	8000940 <__ledf2+0xa8>
 800092a:	4650      	mov	r0, sl
 800092c:	2301      	movs	r3, #1
 800092e:	3801      	subs	r0, #1
 8000930:	4398      	bics	r0, r3
 8000932:	3001      	adds	r0, #1
 8000934:	e004      	b.n	8000940 <__ledf2+0xa8>
 8000936:	2201      	movs	r2, #1
 8000938:	3b01      	subs	r3, #1
 800093a:	4393      	bics	r3, r2
 800093c:	0018      	movs	r0, r3
 800093e:	3001      	adds	r0, #1
 8000940:	bc1c      	pop	{r2, r3, r4}
 8000942:	4690      	mov	r8, r2
 8000944:	4699      	mov	r9, r3
 8000946:	46a2      	mov	sl, r4
 8000948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094a:	433a      	orrs	r2, r7
 800094c:	d1d0      	bne.n	80008f0 <__ledf2+0x58>
 800094e:	459a      	cmp	sl, r3
 8000950:	d1c5      	bne.n	80008de <__ledf2+0x46>
 8000952:	42a5      	cmp	r5, r4
 8000954:	dcc3      	bgt.n	80008de <__ledf2+0x46>
 8000956:	e7e0      	b.n	800091a <__ledf2+0x82>
 8000958:	45c8      	cmp	r8, r9
 800095a:	d8c0      	bhi.n	80008de <__ledf2+0x46>
 800095c:	2000      	movs	r0, #0
 800095e:	45c8      	cmp	r8, r9
 8000960:	d3e3      	bcc.n	800092a <__ledf2+0x92>
 8000962:	e7ed      	b.n	8000940 <__ledf2+0xa8>
 8000964:	000007ff 	.word	0x000007ff

08000968 <__aeabi_d2iz>:
 8000968:	b530      	push	{r4, r5, lr}
 800096a:	4d14      	ldr	r5, [pc, #80]	; (80009bc <__aeabi_d2iz+0x54>)
 800096c:	030a      	lsls	r2, r1, #12
 800096e:	004b      	lsls	r3, r1, #1
 8000970:	0b12      	lsrs	r2, r2, #12
 8000972:	0d5b      	lsrs	r3, r3, #21
 8000974:	0fc9      	lsrs	r1, r1, #31
 8000976:	2400      	movs	r4, #0
 8000978:	42ab      	cmp	r3, r5
 800097a:	dd11      	ble.n	80009a0 <__aeabi_d2iz+0x38>
 800097c:	4c10      	ldr	r4, [pc, #64]	; (80009c0 <__aeabi_d2iz+0x58>)
 800097e:	42a3      	cmp	r3, r4
 8000980:	dc10      	bgt.n	80009a4 <__aeabi_d2iz+0x3c>
 8000982:	2480      	movs	r4, #128	; 0x80
 8000984:	0364      	lsls	r4, r4, #13
 8000986:	4322      	orrs	r2, r4
 8000988:	4c0e      	ldr	r4, [pc, #56]	; (80009c4 <__aeabi_d2iz+0x5c>)
 800098a:	1ae4      	subs	r4, r4, r3
 800098c:	2c1f      	cmp	r4, #31
 800098e:	dd0c      	ble.n	80009aa <__aeabi_d2iz+0x42>
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <__aeabi_d2iz+0x60>)
 8000992:	1ac3      	subs	r3, r0, r3
 8000994:	40da      	lsrs	r2, r3
 8000996:	0013      	movs	r3, r2
 8000998:	425c      	negs	r4, r3
 800099a:	2900      	cmp	r1, #0
 800099c:	d100      	bne.n	80009a0 <__aeabi_d2iz+0x38>
 800099e:	001c      	movs	r4, r3
 80009a0:	0020      	movs	r0, r4
 80009a2:	bd30      	pop	{r4, r5, pc}
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <__aeabi_d2iz+0x64>)
 80009a6:	18cc      	adds	r4, r1, r3
 80009a8:	e7fa      	b.n	80009a0 <__aeabi_d2iz+0x38>
 80009aa:	4d09      	ldr	r5, [pc, #36]	; (80009d0 <__aeabi_d2iz+0x68>)
 80009ac:	40e0      	lsrs	r0, r4
 80009ae:	46ac      	mov	ip, r5
 80009b0:	4463      	add	r3, ip
 80009b2:	409a      	lsls	r2, r3
 80009b4:	0013      	movs	r3, r2
 80009b6:	4303      	orrs	r3, r0
 80009b8:	e7ee      	b.n	8000998 <__aeabi_d2iz+0x30>
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	000003fe 	.word	0x000003fe
 80009c0:	0000041d 	.word	0x0000041d
 80009c4:	00000433 	.word	0x00000433
 80009c8:	00000413 	.word	0x00000413
 80009cc:	7fffffff 	.word	0x7fffffff
 80009d0:	fffffbed 	.word	0xfffffbed

080009d4 <__aeabi_i2d>:
 80009d4:	b570      	push	{r4, r5, r6, lr}
 80009d6:	2800      	cmp	r0, #0
 80009d8:	d02d      	beq.n	8000a36 <__aeabi_i2d+0x62>
 80009da:	17c3      	asrs	r3, r0, #31
 80009dc:	18c5      	adds	r5, r0, r3
 80009de:	405d      	eors	r5, r3
 80009e0:	0fc4      	lsrs	r4, r0, #31
 80009e2:	0028      	movs	r0, r5
 80009e4:	f000 f882 	bl	8000aec <__clzsi2>
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <__aeabi_i2d+0x6c>)
 80009ea:	1a1b      	subs	r3, r3, r0
 80009ec:	055b      	lsls	r3, r3, #21
 80009ee:	0d5b      	lsrs	r3, r3, #21
 80009f0:	280a      	cmp	r0, #10
 80009f2:	dd15      	ble.n	8000a20 <__aeabi_i2d+0x4c>
 80009f4:	380b      	subs	r0, #11
 80009f6:	4085      	lsls	r5, r0
 80009f8:	2200      	movs	r2, #0
 80009fa:	032d      	lsls	r5, r5, #12
 80009fc:	0b2d      	lsrs	r5, r5, #12
 80009fe:	2100      	movs	r1, #0
 8000a00:	0010      	movs	r0, r2
 8000a02:	032d      	lsls	r5, r5, #12
 8000a04:	0d0a      	lsrs	r2, r1, #20
 8000a06:	0b2d      	lsrs	r5, r5, #12
 8000a08:	0512      	lsls	r2, r2, #20
 8000a0a:	432a      	orrs	r2, r5
 8000a0c:	4d0d      	ldr	r5, [pc, #52]	; (8000a44 <__aeabi_i2d+0x70>)
 8000a0e:	051b      	lsls	r3, r3, #20
 8000a10:	402a      	ands	r2, r5
 8000a12:	4313      	orrs	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	07e4      	lsls	r4, r4, #31
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	4323      	orrs	r3, r4
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	0002      	movs	r2, r0
 8000a22:	0029      	movs	r1, r5
 8000a24:	3215      	adds	r2, #21
 8000a26:	4091      	lsls	r1, r2
 8000a28:	000a      	movs	r2, r1
 8000a2a:	210b      	movs	r1, #11
 8000a2c:	1a08      	subs	r0, r1, r0
 8000a2e:	40c5      	lsrs	r5, r0
 8000a30:	032d      	lsls	r5, r5, #12
 8000a32:	0b2d      	lsrs	r5, r5, #12
 8000a34:	e7e3      	b.n	80009fe <__aeabi_i2d+0x2a>
 8000a36:	2400      	movs	r4, #0
 8000a38:	2300      	movs	r3, #0
 8000a3a:	2500      	movs	r5, #0
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	e7de      	b.n	80009fe <__aeabi_i2d+0x2a>
 8000a40:	0000041e 	.word	0x0000041e
 8000a44:	800fffff 	.word	0x800fffff

08000a48 <__aeabi_f2d>:
 8000a48:	0041      	lsls	r1, r0, #1
 8000a4a:	0e09      	lsrs	r1, r1, #24
 8000a4c:	1c4b      	adds	r3, r1, #1
 8000a4e:	b570      	push	{r4, r5, r6, lr}
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	0246      	lsls	r6, r0, #9
 8000a54:	0a75      	lsrs	r5, r6, #9
 8000a56:	0fc4      	lsrs	r4, r0, #31
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	dd14      	ble.n	8000a86 <__aeabi_f2d+0x3e>
 8000a5c:	23e0      	movs	r3, #224	; 0xe0
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	076d      	lsls	r5, r5, #29
 8000a62:	0b36      	lsrs	r6, r6, #12
 8000a64:	18cb      	adds	r3, r1, r3
 8000a66:	2100      	movs	r1, #0
 8000a68:	0d0a      	lsrs	r2, r1, #20
 8000a6a:	0028      	movs	r0, r5
 8000a6c:	0512      	lsls	r2, r2, #20
 8000a6e:	4d1c      	ldr	r5, [pc, #112]	; (8000ae0 <__aeabi_f2d+0x98>)
 8000a70:	4332      	orrs	r2, r6
 8000a72:	055b      	lsls	r3, r3, #21
 8000a74:	402a      	ands	r2, r5
 8000a76:	085b      	lsrs	r3, r3, #1
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	07e4      	lsls	r4, r4, #31
 8000a7e:	085b      	lsrs	r3, r3, #1
 8000a80:	4323      	orrs	r3, r4
 8000a82:	0019      	movs	r1, r3
 8000a84:	bd70      	pop	{r4, r5, r6, pc}
 8000a86:	2900      	cmp	r1, #0
 8000a88:	d114      	bne.n	8000ab4 <__aeabi_f2d+0x6c>
 8000a8a:	2d00      	cmp	r5, #0
 8000a8c:	d01e      	beq.n	8000acc <__aeabi_f2d+0x84>
 8000a8e:	0028      	movs	r0, r5
 8000a90:	f000 f82c 	bl	8000aec <__clzsi2>
 8000a94:	280a      	cmp	r0, #10
 8000a96:	dc1c      	bgt.n	8000ad2 <__aeabi_f2d+0x8a>
 8000a98:	230b      	movs	r3, #11
 8000a9a:	002a      	movs	r2, r5
 8000a9c:	1a1b      	subs	r3, r3, r0
 8000a9e:	40da      	lsrs	r2, r3
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	3315      	adds	r3, #21
 8000aa4:	409d      	lsls	r5, r3
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <__aeabi_f2d+0x9c>)
 8000aa8:	0312      	lsls	r2, r2, #12
 8000aaa:	1a1b      	subs	r3, r3, r0
 8000aac:	055b      	lsls	r3, r3, #21
 8000aae:	0b16      	lsrs	r6, r2, #12
 8000ab0:	0d5b      	lsrs	r3, r3, #21
 8000ab2:	e7d8      	b.n	8000a66 <__aeabi_f2d+0x1e>
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d006      	beq.n	8000ac6 <__aeabi_f2d+0x7e>
 8000ab8:	0b32      	lsrs	r2, r6, #12
 8000aba:	2680      	movs	r6, #128	; 0x80
 8000abc:	0336      	lsls	r6, r6, #12
 8000abe:	076d      	lsls	r5, r5, #29
 8000ac0:	4316      	orrs	r6, r2
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <__aeabi_f2d+0xa0>)
 8000ac4:	e7cf      	b.n	8000a66 <__aeabi_f2d+0x1e>
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <__aeabi_f2d+0xa0>)
 8000ac8:	2600      	movs	r6, #0
 8000aca:	e7cc      	b.n	8000a66 <__aeabi_f2d+0x1e>
 8000acc:	2300      	movs	r3, #0
 8000ace:	2600      	movs	r6, #0
 8000ad0:	e7c9      	b.n	8000a66 <__aeabi_f2d+0x1e>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	002a      	movs	r2, r5
 8000ad6:	3b0b      	subs	r3, #11
 8000ad8:	409a      	lsls	r2, r3
 8000ada:	2500      	movs	r5, #0
 8000adc:	e7e3      	b.n	8000aa6 <__aeabi_f2d+0x5e>
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	800fffff 	.word	0x800fffff
 8000ae4:	00000389 	.word	0x00000389
 8000ae8:	000007ff 	.word	0x000007ff

08000aec <__clzsi2>:
 8000aec:	211c      	movs	r1, #28
 8000aee:	2301      	movs	r3, #1
 8000af0:	041b      	lsls	r3, r3, #16
 8000af2:	4298      	cmp	r0, r3
 8000af4:	d301      	bcc.n	8000afa <__clzsi2+0xe>
 8000af6:	0c00      	lsrs	r0, r0, #16
 8000af8:	3910      	subs	r1, #16
 8000afa:	0a1b      	lsrs	r3, r3, #8
 8000afc:	4298      	cmp	r0, r3
 8000afe:	d301      	bcc.n	8000b04 <__clzsi2+0x18>
 8000b00:	0a00      	lsrs	r0, r0, #8
 8000b02:	3908      	subs	r1, #8
 8000b04:	091b      	lsrs	r3, r3, #4
 8000b06:	4298      	cmp	r0, r3
 8000b08:	d301      	bcc.n	8000b0e <__clzsi2+0x22>
 8000b0a:	0900      	lsrs	r0, r0, #4
 8000b0c:	3904      	subs	r1, #4
 8000b0e:	a202      	add	r2, pc, #8	; (adr r2, 8000b18 <__clzsi2+0x2c>)
 8000b10:	5c10      	ldrb	r0, [r2, r0]
 8000b12:	1840      	adds	r0, r0, r1
 8000b14:	4770      	bx	lr
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	02020304 	.word	0x02020304
 8000b1c:	01010101 	.word	0x01010101
	...

08000b28 <__clzdi2>:
 8000b28:	b510      	push	{r4, lr}
 8000b2a:	2900      	cmp	r1, #0
 8000b2c:	d103      	bne.n	8000b36 <__clzdi2+0xe>
 8000b2e:	f7ff ffdd 	bl	8000aec <__clzsi2>
 8000b32:	3020      	adds	r0, #32
 8000b34:	e002      	b.n	8000b3c <__clzdi2+0x14>
 8000b36:	1c08      	adds	r0, r1, #0
 8000b38:	f7ff ffd8 	bl	8000aec <__clzsi2>
 8000b3c:	bd10      	pop	{r4, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)

08000b40 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_Init+0x3c>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_Init+0x3c>)
 8000b52:	2140      	movs	r1, #64	; 0x40
 8000b54:	430a      	orrs	r2, r1
 8000b56:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f000 f811 	bl	8000b80 <HAL_InitTick>
 8000b5e:	1e03      	subs	r3, r0, #0
 8000b60:	d003      	beq.n	8000b6a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	e001      	b.n	8000b6e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b6a:	f004 fb81 	bl	8005270 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
}
 8000b72:	0018      	movs	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	40022000 	.word	0x40022000

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b88:	230f      	movs	r3, #15
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_InitTick+0x50>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	23fa      	movs	r3, #250	; 0xfa
 8000b96:	0099      	lsls	r1, r3, #2
 8000b98:	0010      	movs	r0, r2
 8000b9a:	f7ff fab5 	bl	8000108 <__udivsi3>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f000 fcac 	bl	80014fe <HAL_SYSTICK_Config>
 8000ba6:	1e03      	subs	r3, r0, #0
 8000ba8:	d004      	beq.n	8000bb4 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000baa:	230f      	movs	r3, #15
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	e006      	b.n	8000bc2 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	425b      	negs	r3, r3
 8000bba:	2200      	movs	r2, #0
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 fc79 	bl	80014b4 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	781b      	ldrb	r3, [r3, #0]
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b004      	add	sp, #16
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick++;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_IncTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1c5a      	adds	r2, r3, #1
 8000bde:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <HAL_IncTick+0x14>)
 8000be0:	601a      	str	r2, [r3, #0]
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000b8 	.word	0x200000b8

08000bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <HAL_GetTick+0x10>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	200000b8 	.word	0x200000b8

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff fff0 	bl	8000bec <HAL_GetTick>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3301      	adds	r3, #1
 8000c18:	d002      	beq.n	8000c20 <HAL_Delay+0x20>
  {
    wait++;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	f7ff ffe3 	bl	8000bec <HAL_GetTick>
 8000c26:	0002      	movs	r2, r0
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d8f7      	bhi.n	8000c22 <HAL_Delay+0x22>
  {
  }
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b004      	add	sp, #16
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e159      	b.n	8000f02 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10a      	bne.n	8000c6c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2250      	movs	r2, #80	; 0x50
 8000c60:	2100      	movs	r1, #0
 8000c62:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	0018      	movs	r0, r3
 8000c68:	f004 fb16 	bl	8005298 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c70:	2210      	movs	r2, #16
 8000c72:	4013      	ands	r3, r2
 8000c74:	2b10      	cmp	r3, #16
 8000c76:	d005      	beq.n	8000c84 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	2204      	movs	r2, #4
 8000c80:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000c82:	d00b      	beq.n	8000c9c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c88:	2210      	movs	r2, #16
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2250      	movs	r2, #80	; 0x50
 8000c94:	2100      	movs	r1, #0
 8000c96:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e132      	b.n	8000f02 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca0:	4a9a      	ldr	r2, [pc, #616]	; (8000f0c <HAL_ADC_Init+0x2d0>)
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d108      	bne.n	8000ccc <HAL_ADC_Init+0x90>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d101      	bne.n	8000ccc <HAL_ADC_Init+0x90>
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e000      	b.n	8000cce <HAL_ADC_Init+0x92>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d149      	bne.n	8000d66 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	23c0      	movs	r3, #192	; 0xc0
 8000cd8:	061b      	lsls	r3, r3, #24
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d00b      	beq.n	8000cf6 <HAL_ADC_Init+0xba>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	05db      	lsls	r3, r3, #23
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d005      	beq.n	8000cf6 <HAL_ADC_Init+0xba>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	061b      	lsls	r3, r3, #24
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d111      	bne.n	8000d1a <HAL_ADC_Init+0xde>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	691a      	ldr	r2, [r3, #16]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	0092      	lsls	r2, r2, #2
 8000d02:	0892      	lsrs	r2, r2, #2
 8000d04:	611a      	str	r2, [r3, #16]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6919      	ldr	r1, [r3, #16]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	430a      	orrs	r2, r1
 8000d16:	611a      	str	r2, [r3, #16]
 8000d18:	e014      	b.n	8000d44 <HAL_ADC_Init+0x108>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	691a      	ldr	r2, [r3, #16]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	0092      	lsls	r2, r2, #2
 8000d26:	0892      	lsrs	r2, r2, #2
 8000d28:	611a      	str	r2, [r3, #16]
 8000d2a:	4b79      	ldr	r3, [pc, #484]	; (8000f10 <HAL_ADC_Init+0x2d4>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4b78      	ldr	r3, [pc, #480]	; (8000f10 <HAL_ADC_Init+0x2d4>)
 8000d30:	4978      	ldr	r1, [pc, #480]	; (8000f14 <HAL_ADC_Init+0x2d8>)
 8000d32:	400a      	ands	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	4b76      	ldr	r3, [pc, #472]	; (8000f10 <HAL_ADC_Init+0x2d4>)
 8000d38:	6819      	ldr	r1, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	4b74      	ldr	r3, [pc, #464]	; (8000f10 <HAL_ADC_Init+0x2d4>)
 8000d40:	430a      	orrs	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2118      	movs	r1, #24
 8000d50:	438a      	bics	r2, r1
 8000d52:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	68d9      	ldr	r1, [r3, #12]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	430a      	orrs	r2, r1
 8000d64:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000d66:	4b6a      	ldr	r3, [pc, #424]	; (8000f10 <HAL_ADC_Init+0x2d4>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4b69      	ldr	r3, [pc, #420]	; (8000f10 <HAL_ADC_Init+0x2d4>)
 8000d6c:	496a      	ldr	r1, [pc, #424]	; (8000f18 <HAL_ADC_Init+0x2dc>)
 8000d6e:	400a      	ands	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000d72:	4b67      	ldr	r3, [pc, #412]	; (8000f10 <HAL_ADC_Init+0x2d4>)
 8000d74:	6819      	ldr	r1, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7a:	065a      	lsls	r2, r3, #25
 8000d7c:	4b64      	ldr	r3, [pc, #400]	; (8000f10 <HAL_ADC_Init+0x2d4>)
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	055b      	lsls	r3, r3, #21
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	d108      	bne.n	8000da2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2180      	movs	r1, #128	; 0x80
 8000d9c:	0549      	lsls	r1, r1, #21
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	495b      	ldr	r1, [pc, #364]	; (8000f1c <HAL_ADC_Init+0x2e0>)
 8000dae:	400a      	ands	r2, r1
 8000db0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68d9      	ldr	r1, [r3, #12]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d101      	bne.n	8000dc8 <HAL_ADC_Init+0x18c>
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	e000      	b.n	8000dca <HAL_ADC_Init+0x18e>
 8000dc8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000dca:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2020      	movs	r0, #32
 8000dd0:	5c1b      	ldrb	r3, [r3, r0]
 8000dd2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000dd4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	202c      	movs	r0, #44	; 0x2c
 8000dda:	5c1b      	ldrb	r3, [r3, r0]
 8000ddc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000dde:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000de4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000dec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000df4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e02:	23c2      	movs	r3, #194	; 0xc2
 8000e04:	33ff      	adds	r3, #255	; 0xff
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d00b      	beq.n	8000e22 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68d9      	ldr	r1, [r3, #12]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2221      	movs	r2, #33	; 0x21
 8000e26:	5c9b      	ldrb	r3, [r3, r2]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d11a      	bne.n	8000e62 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2220      	movs	r2, #32
 8000e30:	5c9b      	ldrb	r3, [r3, r2]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d109      	bne.n	8000e4a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2180      	movs	r1, #128	; 0x80
 8000e42:	0249      	lsls	r1, r1, #9
 8000e44:	430a      	orrs	r2, r1
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	e00b      	b.n	8000e62 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e4e:	2220      	movs	r2, #32
 8000e50:	431a      	orrs	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d11f      	bne.n	8000eaa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	691a      	ldr	r2, [r3, #16]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	492a      	ldr	r1, [pc, #168]	; (8000f20 <HAL_ADC_Init+0x2e4>)
 8000e76:	400a      	ands	r2, r1
 8000e78:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	6919      	ldr	r1, [r3, #16]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000e88:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000e8e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	611a      	str	r2, [r3, #16]
 8000ea8:	e00e      	b.n	8000ec8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d107      	bne.n	8000ec8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	691a      	ldr	r2, [r3, #16]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	438a      	bics	r2, r1
 8000ec6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	695a      	ldr	r2, [r3, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2107      	movs	r1, #7
 8000ed4:	438a      	bics	r2, r1
 8000ed6:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6959      	ldr	r1, [r3, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	4393      	bics	r3, r2
 8000ef8:	2201      	movs	r2, #1
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	fffffefd 	.word	0xfffffefd
 8000f10:	40012708 	.word	0x40012708
 8000f14:	ffc3ffff 	.word	0xffc3ffff
 8000f18:	fdffffff 	.word	0xfdffffff
 8000f1c:	fffe0219 	.word	0xfffe0219
 8000f20:	fffffc03 	.word	0xfffffc03

08000f24 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2204      	movs	r2, #4
 8000f34:	4013      	ands	r3, r2
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	d106      	bne.n	8000f48 <HAL_ADC_IRQHandler+0x24>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2204      	movs	r2, #4
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d00d      	beq.n	8000f64 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2208      	movs	r2, #8
 8000f50:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000f52:	2b08      	cmp	r3, #8
 8000f54:	d154      	bne.n	8001000 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d14d      	bne.n	8001000 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f68:	2210      	movs	r2, #16
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d106      	bne.n	8000f7c <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	0092      	lsls	r2, r2, #2
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	23c0      	movs	r3, #192	; 0xc0
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	4013      	ands	r3, r2
 8000f88:	d12e      	bne.n	8000fe8 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d129      	bne.n	8000fe8 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d122      	bne.n	8000fe8 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	2204      	movs	r2, #4
 8000faa:	4013      	ands	r3, r2
 8000fac:	d110      	bne.n	8000fd0 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	210c      	movs	r1, #12
 8000fba:	438a      	bics	r2, r1
 8000fbc:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc2:	4a35      	ldr	r2, [pc, #212]	; (8001098 <HAL_ADC_IRQHandler+0x174>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	655a      	str	r2, [r3, #84]	; 0x54
 8000fce:	e00b      	b.n	8000fe8 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 f856 	bl	800109c <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d003      	beq.n	8001000 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	220c      	movs	r2, #12
 8000ffe:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	4013      	ands	r3, r2
 800100a:	2b80      	cmp	r3, #128	; 0x80
 800100c:	d115      	bne.n	800103a <HAL_ADC_IRQHandler+0x116>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	4013      	ands	r3, r2
 8001018:	2b80      	cmp	r3, #128	; 0x80
 800101a:	d10e      	bne.n	800103a <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	0252      	lsls	r2, r2, #9
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	0018      	movs	r0, r3
 800102e:	f000 f83d 	bl	80010ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2280      	movs	r2, #128	; 0x80
 8001038:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2210      	movs	r2, #16
 8001042:	4013      	ands	r3, r2
 8001044:	2b10      	cmp	r3, #16
 8001046:	d123      	bne.n	8001090 <HAL_ADC_IRQHandler+0x16c>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2210      	movs	r2, #16
 8001050:	4013      	ands	r3, r2
 8001052:	2b10      	cmp	r3, #16
 8001054:	d11c      	bne.n	8001090 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	2b00      	cmp	r3, #0
 800105c:	d006      	beq.n	800106c <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	2201      	movs	r2, #1
 8001066:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001068:	2b01      	cmp	r3, #1
 800106a:	d10d      	bne.n	8001088 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001070:	2202      	movs	r2, #2
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2210      	movs	r2, #16
 800107e:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	0018      	movs	r0, r3
 8001084:	f003 fffe 	bl	8005084 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2210      	movs	r2, #16
 800108e:	601a      	str	r2, [r3, #0]
  }
  
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b002      	add	sp, #8
 8001096:	bd80      	pop	{r7, pc}
 8001098:	fffffefe 	.word	0xfffffefe

0800109c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b002      	add	sp, #8
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2250      	movs	r2, #80	; 0x50
 80010ca:	5c9b      	ldrb	r3, [r3, r2]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d101      	bne.n	80010d4 <HAL_ADC_ConfigChannel+0x18>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e085      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x124>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2250      	movs	r2, #80	; 0x50
 80010d8:	2101      	movs	r1, #1
 80010da:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2204      	movs	r2, #4
 80010e4:	4013      	ands	r3, r2
 80010e6:	d00b      	beq.n	8001100 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ec:	2220      	movs	r2, #32
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2250      	movs	r2, #80	; 0x50
 80010f8:	2100      	movs	r1, #0
 80010fa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e06f      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4a38      	ldr	r2, [pc, #224]	; (80011e8 <HAL_ADC_ConfigChannel+0x12c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d035      	beq.n	8001176 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	035b      	lsls	r3, r3, #13
 8001116:	0b5a      	lsrs	r2, r3, #13
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	02db      	lsls	r3, r3, #11
 8001128:	4013      	ands	r3, r2
 800112a:	d009      	beq.n	8001140 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 800112c:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <HAL_ADC_ConfigChannel+0x130>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <HAL_ADC_ConfigChannel+0x130>)
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	0409      	lsls	r1, r1, #16
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800113a:	200a      	movs	r0, #10
 800113c:	f000 f85e 	bl	80011fc <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	029b      	lsls	r3, r3, #10
 8001148:	4013      	ands	r3, r2
 800114a:	d006      	beq.n	800115a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <HAL_ADC_ConfigChannel+0x130>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b26      	ldr	r3, [pc, #152]	; (80011ec <HAL_ADC_ConfigChannel+0x130>)
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	03c9      	lsls	r1, r1, #15
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	025b      	lsls	r3, r3, #9
 8001162:	4013      	ands	r3, r2
 8001164:	d037      	beq.n	80011d6 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <HAL_ADC_ConfigChannel+0x130>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <HAL_ADC_ConfigChannel+0x130>)
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	0449      	lsls	r1, r1, #17
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e02f      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	035b      	lsls	r3, r3, #13
 8001182:	0b5b      	lsrs	r3, r3, #13
 8001184:	43d9      	mvns	r1, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	400a      	ands	r2, r1
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	02db      	lsls	r3, r3, #11
 8001196:	4013      	ands	r3, r2
 8001198:	d005      	beq.n	80011a6 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_ADC_ConfigChannel+0x130>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HAL_ADC_ConfigChannel+0x130>)
 80011a0:	4913      	ldr	r1, [pc, #76]	; (80011f0 <HAL_ADC_ConfigChannel+0x134>)
 80011a2:	400a      	ands	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	029b      	lsls	r3, r3, #10
 80011ae:	4013      	ands	r3, r2
 80011b0:	d005      	beq.n	80011be <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_ADC_ConfigChannel+0x130>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_ADC_ConfigChannel+0x130>)
 80011b8:	490e      	ldr	r1, [pc, #56]	; (80011f4 <HAL_ADC_ConfigChannel+0x138>)
 80011ba:	400a      	ands	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	025b      	lsls	r3, r3, #9
 80011c6:	4013      	ands	r3, r2
 80011c8:	d005      	beq.n	80011d6 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_ADC_ConfigChannel+0x130>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <HAL_ADC_ConfigChannel+0x130>)
 80011d0:	4909      	ldr	r1, [pc, #36]	; (80011f8 <HAL_ADC_ConfigChannel+0x13c>)
 80011d2:	400a      	ands	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2250      	movs	r2, #80	; 0x50
 80011da:	2100      	movs	r1, #0
 80011dc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	00001001 	.word	0x00001001
 80011ec:	40012708 	.word	0x40012708
 80011f0:	ff7fffff 	.word	0xff7fffff
 80011f4:	ffbfffff 	.word	0xffbfffff
 80011f8:	feffffff 	.word	0xfeffffff

080011fc <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <ADC_DelayMicroSecond+0x34>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	490a      	ldr	r1, [pc, #40]	; (8001234 <ADC_DelayMicroSecond+0x38>)
 800120a:	0018      	movs	r0, r3
 800120c:	f7fe ff7c 	bl	8000108 <__udivsi3>
 8001210:	0003      	movs	r3, r0
 8001212:	001a      	movs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4353      	muls	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800121a:	e002      	b.n	8001222 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3b01      	subs	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f9      	bne.n	800121c <ADC_DelayMicroSecond+0x20>
  } 
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b004      	add	sp, #16
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000000 	.word	0x20000000
 8001234:	000f4240 	.word	0x000f4240

08001238 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001242:	2317      	movs	r3, #23
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2250      	movs	r2, #80	; 0x50
 8001256:	5c9b      	ldrb	r3, [r3, r2]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_ADCEx_Calibration_Start+0x28>
 800125c:	2302      	movs	r3, #2
 800125e:	e07a      	b.n	8001356 <HAL_ADCEx_Calibration_Start+0x11e>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2250      	movs	r2, #80	; 0x50
 8001264:	2101      	movs	r1, #1
 8001266:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2203      	movs	r2, #3
 8001270:	4013      	ands	r3, r2
 8001272:	2b01      	cmp	r3, #1
 8001274:	d108      	bne.n	8001288 <HAL_ADCEx_Calibration_Start+0x50>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2201      	movs	r2, #1
 800127e:	4013      	ands	r3, r2
 8001280:	2b01      	cmp	r3, #1
 8001282:	d101      	bne.n	8001288 <HAL_ADCEx_Calibration_Start+0x50>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <HAL_ADCEx_Calibration_Start+0x52>
 8001288:	2300      	movs	r3, #0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d152      	bne.n	8001334 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001292:	4a33      	ldr	r2, [pc, #204]	; (8001360 <HAL_ADCEx_Calibration_Start+0x128>)
 8001294:	4013      	ands	r3, r2
 8001296:	2202      	movs	r2, #2
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2203      	movs	r2, #3
 80012a6:	4013      	ands	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2103      	movs	r1, #3
 80012b6:	438a      	bics	r2, r1
 80012b8:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2180      	movs	r1, #128	; 0x80
 80012c6:	0609      	lsls	r1, r1, #24
 80012c8:	430a      	orrs	r2, r1
 80012ca:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80012cc:	f7ff fc8e 	bl	8000bec <HAL_GetTick>
 80012d0:	0003      	movs	r3, r0
 80012d2:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80012d4:	e014      	b.n	8001300 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80012d6:	f7ff fc89 	bl	8000bec <HAL_GetTick>
 80012da:	0002      	movs	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b0a      	cmp	r3, #10
 80012e2:	d90d      	bls.n	8001300 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e8:	2212      	movs	r2, #18
 80012ea:	4393      	bics	r3, r2
 80012ec:	2210      	movs	r2, #16
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2250      	movs	r2, #80	; 0x50
 80012f8:	2100      	movs	r1, #0
 80012fa:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e02a      	b.n	8001356 <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	0fdb      	lsrs	r3, r3, #31
 8001308:	07da      	lsls	r2, r3, #31
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	061b      	lsls	r3, r3, #24
 800130e:	429a      	cmp	r2, r3
 8001310:	d0e1      	beq.n	80012d6 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68d9      	ldr	r1, [r3, #12]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	430a      	orrs	r2, r1
 8001320:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001326:	2203      	movs	r2, #3
 8001328:	4393      	bics	r3, r2
 800132a:	2201      	movs	r2, #1
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	655a      	str	r2, [r3, #84]	; 0x54
 8001332:	e009      	b.n	8001348 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001338:	2220      	movs	r2, #32
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8001340:	2317      	movs	r3, #23
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2250      	movs	r2, #80	; 0x50
 800134c:	2100      	movs	r1, #0
 800134e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001350:	2317      	movs	r3, #23
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	781b      	ldrb	r3, [r3, #0]
}
 8001356:	0018      	movs	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	b006      	add	sp, #24
 800135c:	bd80      	pop	{r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	fffffefd 	.word	0xfffffefd

08001364 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	0002      	movs	r2, r0
 800136c:	1dfb      	adds	r3, r7, #7
 800136e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001370:	1dfb      	adds	r3, r7, #7
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	001a      	movs	r2, r3
 8001376:	231f      	movs	r3, #31
 8001378:	401a      	ands	r2, r3
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <NVIC_EnableIRQ+0x28>)
 800137c:	2101      	movs	r1, #1
 800137e:	4091      	lsls	r1, r2
 8001380:	000a      	movs	r2, r1
 8001382:	601a      	str	r2, [r3, #0]
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b002      	add	sp, #8
 800138a:	bd80      	pop	{r7, pc}
 800138c:	e000e100 	.word	0xe000e100

08001390 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	0002      	movs	r2, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b7f      	cmp	r3, #127	; 0x7f
 80013a4:	d932      	bls.n	800140c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a6:	4a2f      	ldr	r2, [pc, #188]	; (8001464 <NVIC_SetPriority+0xd4>)
 80013a8:	1dfb      	adds	r3, r7, #7
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	0019      	movs	r1, r3
 80013ae:	230f      	movs	r3, #15
 80013b0:	400b      	ands	r3, r1
 80013b2:	3b08      	subs	r3, #8
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3306      	adds	r3, #6
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	18d3      	adds	r3, r2, r3
 80013bc:	3304      	adds	r3, #4
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	1dfa      	adds	r2, r7, #7
 80013c2:	7812      	ldrb	r2, [r2, #0]
 80013c4:	0011      	movs	r1, r2
 80013c6:	2203      	movs	r2, #3
 80013c8:	400a      	ands	r2, r1
 80013ca:	00d2      	lsls	r2, r2, #3
 80013cc:	21ff      	movs	r1, #255	; 0xff
 80013ce:	4091      	lsls	r1, r2
 80013d0:	000a      	movs	r2, r1
 80013d2:	43d2      	mvns	r2, r2
 80013d4:	401a      	ands	r2, r3
 80013d6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	019b      	lsls	r3, r3, #6
 80013dc:	22ff      	movs	r2, #255	; 0xff
 80013de:	401a      	ands	r2, r3
 80013e0:	1dfb      	adds	r3, r7, #7
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	0018      	movs	r0, r3
 80013e6:	2303      	movs	r3, #3
 80013e8:	4003      	ands	r3, r0
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ee:	481d      	ldr	r0, [pc, #116]	; (8001464 <NVIC_SetPriority+0xd4>)
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	001c      	movs	r4, r3
 80013f6:	230f      	movs	r3, #15
 80013f8:	4023      	ands	r3, r4
 80013fa:	3b08      	subs	r3, #8
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	430a      	orrs	r2, r1
 8001400:	3306      	adds	r3, #6
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	18c3      	adds	r3, r0, r3
 8001406:	3304      	adds	r3, #4
 8001408:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800140a:	e027      	b.n	800145c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800140c:	4a16      	ldr	r2, [pc, #88]	; (8001468 <NVIC_SetPriority+0xd8>)
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b25b      	sxtb	r3, r3
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	33c0      	adds	r3, #192	; 0xc0
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	589b      	ldr	r3, [r3, r2]
 800141c:	1dfa      	adds	r2, r7, #7
 800141e:	7812      	ldrb	r2, [r2, #0]
 8001420:	0011      	movs	r1, r2
 8001422:	2203      	movs	r2, #3
 8001424:	400a      	ands	r2, r1
 8001426:	00d2      	lsls	r2, r2, #3
 8001428:	21ff      	movs	r1, #255	; 0xff
 800142a:	4091      	lsls	r1, r2
 800142c:	000a      	movs	r2, r1
 800142e:	43d2      	mvns	r2, r2
 8001430:	401a      	ands	r2, r3
 8001432:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	019b      	lsls	r3, r3, #6
 8001438:	22ff      	movs	r2, #255	; 0xff
 800143a:	401a      	ands	r2, r3
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	0018      	movs	r0, r3
 8001442:	2303      	movs	r3, #3
 8001444:	4003      	ands	r3, r0
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800144a:	4807      	ldr	r0, [pc, #28]	; (8001468 <NVIC_SetPriority+0xd8>)
 800144c:	1dfb      	adds	r3, r7, #7
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b25b      	sxtb	r3, r3
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	430a      	orrs	r2, r1
 8001456:	33c0      	adds	r3, #192	; 0xc0
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	501a      	str	r2, [r3, r0]
}
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b003      	add	sp, #12
 8001462:	bd90      	pop	{r4, r7, pc}
 8001464:	e000ed00 	.word	0xe000ed00
 8001468:	e000e100 	.word	0xe000e100

0800146c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <SysTick_Config+0x40>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147e:	2301      	movs	r3, #1
 8001480:	e010      	b.n	80014a4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <SysTick_Config+0x44>)
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	3a01      	subs	r2, #1
 8001488:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148a:	2301      	movs	r3, #1
 800148c:	425b      	negs	r3, r3
 800148e:	2103      	movs	r1, #3
 8001490:	0018      	movs	r0, r3
 8001492:	f7ff ff7d 	bl	8001390 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <SysTick_Config+0x44>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SysTick_Config+0x44>)
 800149e:	2207      	movs	r2, #7
 80014a0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b002      	add	sp, #8
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	00ffffff 	.word	0x00ffffff
 80014b0:	e000e010 	.word	0xe000e010

080014b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	210f      	movs	r1, #15
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	1c02      	adds	r2, r0, #0
 80014c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	0011      	movs	r1, r2
 80014d0:	0018      	movs	r0, r3
 80014d2:	f7ff ff5d 	bl	8001390 <NVIC_SetPriority>
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b004      	add	sp, #16
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	0002      	movs	r2, r0
 80014e6:	1dfb      	adds	r3, r7, #7
 80014e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ea:	1dfb      	adds	r3, r7, #7
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff ff37 	bl	8001364 <NVIC_EnableIRQ>
}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b002      	add	sp, #8
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff ffaf 	bl	800146c <SysTick_Config>
 800150e:	0003      	movs	r3, r0
}
 8001510:	0018      	movs	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	b002      	add	sp, #8
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800152e:	e155      	b.n	80017dc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2101      	movs	r1, #1
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4091      	lsls	r1, r2
 800153a:	000a      	movs	r2, r1
 800153c:	4013      	ands	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d100      	bne.n	8001548 <HAL_GPIO_Init+0x30>
 8001546:	e146      	b.n	80017d6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x40>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d123      	bne.n	80015a0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	58d3      	ldr	r3, [r2, r3]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2207      	movs	r2, #7
 800156a:	4013      	ands	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	220f      	movs	r2, #15
 8001570:	409a      	lsls	r2, r3
 8001572:	0013      	movs	r3, r2
 8001574:	43da      	mvns	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2107      	movs	r1, #7
 8001584:	400b      	ands	r3, r1
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	409a      	lsls	r2, r3
 800158a:	0013      	movs	r3, r2
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	08da      	lsrs	r2, r3, #3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3208      	adds	r2, #8
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	6939      	ldr	r1, [r7, #16]
 800159e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d00b      	beq.n	80015c0 <HAL_GPIO_Init+0xa8>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d007      	beq.n	80015c0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b4:	2b11      	cmp	r3, #17
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b12      	cmp	r3, #18
 80015be:	d130      	bne.n	8001622 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	409a      	lsls	r2, r3
 80015ce:	0013      	movs	r3, r2
 80015d0:	43da      	mvns	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	409a      	lsls	r2, r3
 80015e2:	0013      	movs	r3, r2
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f6:	2201      	movs	r2, #1
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
 80015fc:	0013      	movs	r3, r2
 80015fe:	43da      	mvns	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	2201      	movs	r2, #1
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
 8001614:	0013      	movs	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	2203      	movs	r2, #3
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	43da      	mvns	r2, r3
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2203      	movs	r2, #3
 8001640:	401a      	ands	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	409a      	lsls	r2, r3
 8001648:	0013      	movs	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2203      	movs	r2, #3
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	43da      	mvns	r2, r3
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	409a      	lsls	r2, r3
 8001678:	0013      	movs	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	055b      	lsls	r3, r3, #21
 800168e:	4013      	ands	r3, r2
 8001690:	d100      	bne.n	8001694 <HAL_GPIO_Init+0x17c>
 8001692:	e0a0      	b.n	80017d6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001694:	4b57      	ldr	r3, [pc, #348]	; (80017f4 <HAL_GPIO_Init+0x2dc>)
 8001696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001698:	4b56      	ldr	r3, [pc, #344]	; (80017f4 <HAL_GPIO_Init+0x2dc>)
 800169a:	2101      	movs	r1, #1
 800169c:	430a      	orrs	r2, r1
 800169e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80016a0:	4a55      	ldr	r2, [pc, #340]	; (80017f8 <HAL_GPIO_Init+0x2e0>)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	3302      	adds	r3, #2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	589b      	ldr	r3, [r3, r2]
 80016ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2203      	movs	r2, #3
 80016b2:	4013      	ands	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	220f      	movs	r2, #15
 80016b8:	409a      	lsls	r2, r3
 80016ba:	0013      	movs	r3, r2
 80016bc:	43da      	mvns	r2, r3
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	23a0      	movs	r3, #160	; 0xa0
 80016c8:	05db      	lsls	r3, r3, #23
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d01f      	beq.n	800170e <HAL_GPIO_Init+0x1f6>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4a      	ldr	r2, [pc, #296]	; (80017fc <HAL_GPIO_Init+0x2e4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <HAL_GPIO_Init+0x1f2>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a49      	ldr	r2, [pc, #292]	; (8001800 <HAL_GPIO_Init+0x2e8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d013      	beq.n	8001706 <HAL_GPIO_Init+0x1ee>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a48      	ldr	r2, [pc, #288]	; (8001804 <HAL_GPIO_Init+0x2ec>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00d      	beq.n	8001702 <HAL_GPIO_Init+0x1ea>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a47      	ldr	r2, [pc, #284]	; (8001808 <HAL_GPIO_Init+0x2f0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d007      	beq.n	80016fe <HAL_GPIO_Init+0x1e6>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a46      	ldr	r2, [pc, #280]	; (800180c <HAL_GPIO_Init+0x2f4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d101      	bne.n	80016fa <HAL_GPIO_Init+0x1e2>
 80016f6:	2305      	movs	r3, #5
 80016f8:	e00a      	b.n	8001710 <HAL_GPIO_Init+0x1f8>
 80016fa:	2306      	movs	r3, #6
 80016fc:	e008      	b.n	8001710 <HAL_GPIO_Init+0x1f8>
 80016fe:	2304      	movs	r3, #4
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x1f8>
 8001702:	2303      	movs	r3, #3
 8001704:	e004      	b.n	8001710 <HAL_GPIO_Init+0x1f8>
 8001706:	2302      	movs	r3, #2
 8001708:	e002      	b.n	8001710 <HAL_GPIO_Init+0x1f8>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_GPIO_Init+0x1f8>
 800170e:	2300      	movs	r3, #0
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	2103      	movs	r1, #3
 8001714:	400a      	ands	r2, r1
 8001716:	0092      	lsls	r2, r2, #2
 8001718:	4093      	lsls	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001720:	4935      	ldr	r1, [pc, #212]	; (80017f8 <HAL_GPIO_Init+0x2e0>)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	3302      	adds	r3, #2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800172e:	4b38      	ldr	r3, [pc, #224]	; (8001810 <HAL_GPIO_Init+0x2f8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43da      	mvns	r2, r3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	025b      	lsls	r3, r3, #9
 8001746:	4013      	ands	r3, r2
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001752:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <HAL_GPIO_Init+0x2f8>)
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001758:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <HAL_GPIO_Init+0x2f8>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	43da      	mvns	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	029b      	lsls	r3, r3, #10
 8001770:	4013      	ands	r3, r2
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800177c:	4b24      	ldr	r3, [pc, #144]	; (8001810 <HAL_GPIO_Init+0x2f8>)
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001782:	4b23      	ldr	r3, [pc, #140]	; (8001810 <HAL_GPIO_Init+0x2f8>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	43da      	mvns	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	035b      	lsls	r3, r3, #13
 800179a:	4013      	ands	r3, r2
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <HAL_GPIO_Init+0x2f8>)
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_GPIO_Init+0x2f8>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	43da      	mvns	r2, r3
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	039b      	lsls	r3, r3, #14
 80017c4:	4013      	ands	r3, r2
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_GPIO_Init+0x2f8>)
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	40da      	lsrs	r2, r3
 80017e4:	1e13      	subs	r3, r2, #0
 80017e6:	d000      	beq.n	80017ea <HAL_GPIO_Init+0x2d2>
 80017e8:	e6a2      	b.n	8001530 <HAL_GPIO_Init+0x18>
  }
}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b006      	add	sp, #24
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010000 	.word	0x40010000
 80017fc:	50000400 	.word	0x50000400
 8001800:	50000800 	.word	0x50000800
 8001804:	50000c00 	.word	0x50000c00
 8001808:	50001000 	.word	0x50001000
 800180c:	50001c00 	.word	0x50001c00
 8001810:	40010400 	.word	0x40010400

08001814 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	0008      	movs	r0, r1
 800181e:	0011      	movs	r1, r2
 8001820:	1cbb      	adds	r3, r7, #2
 8001822:	1c02      	adds	r2, r0, #0
 8001824:	801a      	strh	r2, [r3, #0]
 8001826:	1c7b      	adds	r3, r7, #1
 8001828:	1c0a      	adds	r2, r1, #0
 800182a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800182c:	1c7b      	adds	r3, r7, #1
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001834:	1cbb      	adds	r3, r7, #2
 8001836:	881a      	ldrh	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800183c:	e003      	b.n	8001846 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800183e:	1cbb      	adds	r3, r7, #2
 8001840:	881a      	ldrh	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	b002      	add	sp, #8
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	0002      	movs	r2, r0
 8001858:	1dbb      	adds	r3, r7, #6
 800185a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	1dba      	adds	r2, r7, #6
 8001862:	8812      	ldrh	r2, [r2, #0]
 8001864:	4013      	ands	r3, r2
 8001866:	d008      	beq.n	800187a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800186a:	1dba      	adds	r2, r7, #6
 800186c:	8812      	ldrh	r2, [r2, #0]
 800186e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001870:	1dbb      	adds	r3, r7, #6
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	0018      	movs	r0, r3
 8001876:	f000 f807 	bl	8001888 <HAL_GPIO_EXTI_Callback>
  }
}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	46bd      	mov	sp, r7
 800187e:	b002      	add	sp, #8
 8001880:	bd80      	pop	{r7, pc}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	40010400 	.word	0x40010400

08001888 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	0002      	movs	r2, r0
 8001890:	1dbb      	adds	r3, r7, #6
 8001892:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	b002      	add	sp, #8
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800189c:	b5b0      	push	{r4, r5, r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	f000 fbbc 	bl	8002028 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018b0:	4bc8      	ldr	r3, [pc, #800]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	220c      	movs	r2, #12
 80018b6:	4013      	ands	r3, r2
 80018b8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ba:	4bc6      	ldr	r3, [pc, #792]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	025b      	lsls	r3, r3, #9
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2201      	movs	r2, #1
 80018cc:	4013      	ands	r3, r2
 80018ce:	d100      	bne.n	80018d2 <HAL_RCC_OscConfig+0x36>
 80018d0:	e07e      	b.n	80019d0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d007      	beq.n	80018e8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	d112      	bne.n	8001904 <HAL_RCC_OscConfig+0x68>
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	025b      	lsls	r3, r3, #9
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d10d      	bne.n	8001904 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	4bba      	ldr	r3, [pc, #744]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	029b      	lsls	r3, r3, #10
 80018f0:	4013      	ands	r3, r2
 80018f2:	d100      	bne.n	80018f6 <HAL_RCC_OscConfig+0x5a>
 80018f4:	e06b      	b.n	80019ce <HAL_RCC_OscConfig+0x132>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d167      	bne.n	80019ce <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	f000 fb92 	bl	8002028 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	025b      	lsls	r3, r3, #9
 800190c:	429a      	cmp	r2, r3
 800190e:	d107      	bne.n	8001920 <HAL_RCC_OscConfig+0x84>
 8001910:	4bb0      	ldr	r3, [pc, #704]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4baf      	ldr	r3, [pc, #700]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	0249      	lsls	r1, r1, #9
 800191a:	430a      	orrs	r2, r1
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e027      	b.n	8001970 <HAL_RCC_OscConfig+0xd4>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	23a0      	movs	r3, #160	; 0xa0
 8001926:	02db      	lsls	r3, r3, #11
 8001928:	429a      	cmp	r2, r3
 800192a:	d10e      	bne.n	800194a <HAL_RCC_OscConfig+0xae>
 800192c:	4ba9      	ldr	r3, [pc, #676]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4ba8      	ldr	r3, [pc, #672]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	02c9      	lsls	r1, r1, #11
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	4ba6      	ldr	r3, [pc, #664]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4ba5      	ldr	r3, [pc, #660]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	0249      	lsls	r1, r1, #9
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e012      	b.n	8001970 <HAL_RCC_OscConfig+0xd4>
 800194a:	4ba2      	ldr	r3, [pc, #648]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4ba1      	ldr	r3, [pc, #644]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001950:	49a1      	ldr	r1, [pc, #644]	; (8001bd8 <HAL_RCC_OscConfig+0x33c>)
 8001952:	400a      	ands	r2, r1
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	4b9f      	ldr	r3, [pc, #636]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	025b      	lsls	r3, r3, #9
 800195e:	4013      	ands	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4b9b      	ldr	r3, [pc, #620]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b9a      	ldr	r3, [pc, #616]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 800196a:	499c      	ldr	r1, [pc, #624]	; (8001bdc <HAL_RCC_OscConfig+0x340>)
 800196c:	400a      	ands	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d015      	beq.n	80019a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff f938 	bl	8000bec <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001980:	e009      	b.n	8001996 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001982:	f7ff f933 	bl	8000bec <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b64      	cmp	r3, #100	; 0x64
 800198e:	d902      	bls.n	8001996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	f000 fb49 	bl	8002028 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001996:	4b8f      	ldr	r3, [pc, #572]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	029b      	lsls	r3, r3, #10
 800199e:	4013      	ands	r3, r2
 80019a0:	d0ef      	beq.n	8001982 <HAL_RCC_OscConfig+0xe6>
 80019a2:	e015      	b.n	80019d0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff f922 	bl	8000bec <HAL_GetTick>
 80019a8:	0003      	movs	r3, r0
 80019aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ae:	f7ff f91d 	bl	8000bec <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b64      	cmp	r3, #100	; 0x64
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e333      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019c0:	4b84      	ldr	r3, [pc, #528]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	029b      	lsls	r3, r3, #10
 80019c8:	4013      	ands	r3, r2
 80019ca:	d1f0      	bne.n	80019ae <HAL_RCC_OscConfig+0x112>
 80019cc:	e000      	b.n	80019d0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2202      	movs	r2, #2
 80019d6:	4013      	ands	r3, r2
 80019d8:	d100      	bne.n	80019dc <HAL_RCC_OscConfig+0x140>
 80019da:	e098      	b.n	8001b0e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	2220      	movs	r2, #32
 80019e6:	4013      	ands	r3, r2
 80019e8:	d009      	beq.n	80019fe <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80019ea:	4b7a      	ldr	r3, [pc, #488]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4b79      	ldr	r3, [pc, #484]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 80019f0:	2120      	movs	r1, #32
 80019f2:	430a      	orrs	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	2220      	movs	r2, #32
 80019fa:	4393      	bics	r3, r2
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	2b0c      	cmp	r3, #12
 8001a08:	d13d      	bne.n	8001a86 <HAL_RCC_OscConfig+0x1ea>
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d13a      	bne.n	8001a86 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a10:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2204      	movs	r2, #4
 8001a16:	4013      	ands	r3, r2
 8001a18:	d004      	beq.n	8001a24 <HAL_RCC_OscConfig+0x188>
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e301      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a24:	4b6b      	ldr	r3, [pc, #428]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a6d      	ldr	r2, [pc, #436]	; (8001be0 <HAL_RCC_OscConfig+0x344>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	021a      	lsls	r2, r3, #8
 8001a34:	4b67      	ldr	r3, [pc, #412]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001a36:	430a      	orrs	r2, r1
 8001a38:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a3a:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2209      	movs	r2, #9
 8001a40:	4393      	bics	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	4b63      	ldr	r3, [pc, #396]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a4c:	f000 fc20 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8001a50:	0001      	movs	r1, r0
 8001a52:	4b60      	ldr	r3, [pc, #384]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	220f      	movs	r2, #15
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	4a61      	ldr	r2, [pc, #388]	; (8001be4 <HAL_RCC_OscConfig+0x348>)
 8001a5e:	5cd3      	ldrb	r3, [r2, r3]
 8001a60:	000a      	movs	r2, r1
 8001a62:	40da      	lsrs	r2, r3
 8001a64:	4b60      	ldr	r3, [pc, #384]	; (8001be8 <HAL_RCC_OscConfig+0x34c>)
 8001a66:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001a68:	2513      	movs	r5, #19
 8001a6a:	197c      	adds	r4, r7, r5
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7ff f887 	bl	8000b80 <HAL_InitTick>
 8001a72:	0003      	movs	r3, r0
 8001a74:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001a76:	197b      	adds	r3, r7, r5
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d047      	beq.n	8001b0e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001a7e:	2313      	movs	r3, #19
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	e2d0      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d027      	beq.n	8001adc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a8c:	4b51      	ldr	r3, [pc, #324]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2209      	movs	r2, #9
 8001a92:	4393      	bics	r3, r2
 8001a94:	0019      	movs	r1, r3
 8001a96:	4b4f      	ldr	r3, [pc, #316]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff f8a5 	bl	8000bec <HAL_GetTick>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa8:	f7ff f8a0 	bl	8000bec <HAL_GetTick>
 8001aac:	0002      	movs	r2, r0
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e2b6      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aba:	4b46      	ldr	r3, [pc, #280]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2204      	movs	r2, #4
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d0f1      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	4a45      	ldr	r2, [pc, #276]	; (8001be0 <HAL_RCC_OscConfig+0x344>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	021a      	lsls	r2, r3, #8
 8001ad4:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	e018      	b.n	8001b0e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001adc:	4b3d      	ldr	r3, [pc, #244]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	438a      	bics	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f880 	bl	8000bec <HAL_GetTick>
 8001aec:	0003      	movs	r3, r0
 8001aee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff f87b 	bl	8000bec <HAL_GetTick>
 8001af6:	0002      	movs	r2, r0
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e291      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b04:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2204      	movs	r2, #4
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d1f1      	bne.n	8001af2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2210      	movs	r2, #16
 8001b14:	4013      	ands	r3, r2
 8001b16:	d100      	bne.n	8001b1a <HAL_RCC_OscConfig+0x27e>
 8001b18:	e09f      	b.n	8001c5a <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d13f      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_OscConfig+0x29c>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e277      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b38:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a2b      	ldr	r2, [pc, #172]	; (8001bec <HAL_RCC_OscConfig+0x350>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	0019      	movs	r1, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b46:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	0a19      	lsrs	r1, r3, #8
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	061a      	lsls	r2, r3, #24
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	0b5b      	lsrs	r3, r3, #13
 8001b66:	3301      	adds	r3, #1
 8001b68:	2280      	movs	r2, #128	; 0x80
 8001b6a:	0212      	lsls	r2, r2, #8
 8001b6c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	091b      	lsrs	r3, r3, #4
 8001b74:	210f      	movs	r1, #15
 8001b76:	400b      	ands	r3, r1
 8001b78:	491a      	ldr	r1, [pc, #104]	; (8001be4 <HAL_RCC_OscConfig+0x348>)
 8001b7a:	5ccb      	ldrb	r3, [r1, r3]
 8001b7c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <HAL_RCC_OscConfig+0x34c>)
 8001b80:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001b82:	2513      	movs	r5, #19
 8001b84:	197c      	adds	r4, r7, r5
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7fe fffa 	bl	8000b80 <HAL_InitTick>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001b90:	197b      	adds	r3, r7, r5
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d060      	beq.n	8001c5a <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001b98:	2313      	movs	r3, #19
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	e243      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d03e      	beq.n	8001c26 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_RCC_OscConfig+0x338>)
 8001bae:	2180      	movs	r1, #128	; 0x80
 8001bb0:	0049      	lsls	r1, r1, #1
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7ff f819 	bl	8000bec <HAL_GetTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bbe:	e017      	b.n	8001bf0 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bc0:	f7ff f814 	bl	8000bec <HAL_GetTick>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d910      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e22a      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	fffeffff 	.word	0xfffeffff
 8001bdc:	fffbffff 	.word	0xfffbffff
 8001be0:	ffffe0ff 	.word	0xffffe0ff
 8001be4:	08006eac 	.word	0x08006eac
 8001be8:	20000000 	.word	0x20000000
 8001bec:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bf0:	4bc6      	ldr	r3, [pc, #792]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d0e1      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bfc:	4bc3      	ldr	r3, [pc, #780]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4ac3      	ldr	r2, [pc, #780]	; (8001f10 <HAL_RCC_OscConfig+0x674>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c0a:	4bc0      	ldr	r3, [pc, #768]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c10:	4bbe      	ldr	r3, [pc, #760]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	0a19      	lsrs	r1, r3, #8
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	061a      	lsls	r2, r3, #24
 8001c1e:	4bbb      	ldr	r3, [pc, #748]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	e019      	b.n	8001c5a <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c26:	4bb9      	ldr	r3, [pc, #740]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4bb8      	ldr	r3, [pc, #736]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001c2c:	49b9      	ldr	r1, [pc, #740]	; (8001f14 <HAL_RCC_OscConfig+0x678>)
 8001c2e:	400a      	ands	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7fe ffdb 	bl	8000bec <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c3c:	f7fe ffd6 	bl	8000bec <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e1ec      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c4e:	4baf      	ldr	r3, [pc, #700]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4013      	ands	r3, r2
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2208      	movs	r2, #8
 8001c60:	4013      	ands	r3, r2
 8001c62:	d036      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d019      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6c:	4ba7      	ldr	r3, [pc, #668]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001c6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c70:	4ba6      	ldr	r3, [pc, #664]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001c72:	2101      	movs	r1, #1
 8001c74:	430a      	orrs	r2, r1
 8001c76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c78:	f7fe ffb8 	bl	8000bec <HAL_GetTick>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c82:	f7fe ffb3 	bl	8000bec <HAL_GetTick>
 8001c86:	0002      	movs	r2, r0
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e1c9      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c94:	4b9d      	ldr	r3, [pc, #628]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c98:	2202      	movs	r2, #2
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d0f1      	beq.n	8001c82 <HAL_RCC_OscConfig+0x3e6>
 8001c9e:	e018      	b.n	8001cd2 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca0:	4b9a      	ldr	r3, [pc, #616]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001ca2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ca4:	4b99      	ldr	r3, [pc, #612]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	438a      	bics	r2, r1
 8001caa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cac:	f7fe ff9e 	bl	8000bec <HAL_GetTick>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb6:	f7fe ff99 	bl	8000bec <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e1af      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cc8:	4b90      	ldr	r3, [pc, #576]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ccc:	2202      	movs	r2, #2
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d1f1      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d100      	bne.n	8001cde <HAL_RCC_OscConfig+0x442>
 8001cdc:	e0af      	b.n	8001e3e <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cde:	2323      	movs	r3, #35	; 0x23
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce6:	4b89      	ldr	r3, [pc, #548]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	055b      	lsls	r3, r3, #21
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d10a      	bne.n	8001d08 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	4b86      	ldr	r3, [pc, #536]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cf6:	4b85      	ldr	r3, [pc, #532]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	0549      	lsls	r1, r1, #21
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d00:	2323      	movs	r3, #35	; 0x23
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d08:	4b83      	ldr	r3, [pc, #524]	; (8001f18 <HAL_RCC_OscConfig+0x67c>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4013      	ands	r3, r2
 8001d12:	d11a      	bne.n	8001d4a <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d14:	4b80      	ldr	r3, [pc, #512]	; (8001f18 <HAL_RCC_OscConfig+0x67c>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b7f      	ldr	r3, [pc, #508]	; (8001f18 <HAL_RCC_OscConfig+0x67c>)
 8001d1a:	2180      	movs	r1, #128	; 0x80
 8001d1c:	0049      	lsls	r1, r1, #1
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d22:	f7fe ff63 	bl	8000bec <HAL_GetTick>
 8001d26:	0003      	movs	r3, r0
 8001d28:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2c:	f7fe ff5e 	bl	8000bec <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	; 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e174      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	4b76      	ldr	r3, [pc, #472]	; (8001f18 <HAL_RCC_OscConfig+0x67c>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4013      	ands	r3, r2
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_OscConfig+0x4ca>
 8001d56:	4b6d      	ldr	r3, [pc, #436]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001d58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d5a:	4b6c      	ldr	r3, [pc, #432]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001d5c:	2180      	movs	r1, #128	; 0x80
 8001d5e:	0049      	lsls	r1, r1, #1
 8001d60:	430a      	orrs	r2, r1
 8001d62:	651a      	str	r2, [r3, #80]	; 0x50
 8001d64:	e031      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4ec>
 8001d6e:	4b67      	ldr	r3, [pc, #412]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001d70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d72:	4b66      	ldr	r3, [pc, #408]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001d74:	4967      	ldr	r1, [pc, #412]	; (8001f14 <HAL_RCC_OscConfig+0x678>)
 8001d76:	400a      	ands	r2, r1
 8001d78:	651a      	str	r2, [r3, #80]	; 0x50
 8001d7a:	4b64      	ldr	r3, [pc, #400]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001d7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d7e:	4b63      	ldr	r3, [pc, #396]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001d80:	4966      	ldr	r1, [pc, #408]	; (8001f1c <HAL_RCC_OscConfig+0x680>)
 8001d82:	400a      	ands	r2, r1
 8001d84:	651a      	str	r2, [r3, #80]	; 0x50
 8001d86:	e020      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	23a0      	movs	r3, #160	; 0xa0
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d10e      	bne.n	8001db2 <HAL_RCC_OscConfig+0x516>
 8001d94:	4b5d      	ldr	r3, [pc, #372]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001d96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d98:	4b5c      	ldr	r3, [pc, #368]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001d9a:	2180      	movs	r1, #128	; 0x80
 8001d9c:	00c9      	lsls	r1, r1, #3
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	651a      	str	r2, [r3, #80]	; 0x50
 8001da2:	4b5a      	ldr	r3, [pc, #360]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001da4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001da6:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001da8:	2180      	movs	r1, #128	; 0x80
 8001daa:	0049      	lsls	r1, r1, #1
 8001dac:	430a      	orrs	r2, r1
 8001dae:	651a      	str	r2, [r3, #80]	; 0x50
 8001db0:	e00b      	b.n	8001dca <HAL_RCC_OscConfig+0x52e>
 8001db2:	4b56      	ldr	r3, [pc, #344]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001db4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001db6:	4b55      	ldr	r3, [pc, #340]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001db8:	4956      	ldr	r1, [pc, #344]	; (8001f14 <HAL_RCC_OscConfig+0x678>)
 8001dba:	400a      	ands	r2, r1
 8001dbc:	651a      	str	r2, [r3, #80]	; 0x50
 8001dbe:	4b53      	ldr	r3, [pc, #332]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001dc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dc2:	4b52      	ldr	r3, [pc, #328]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001dc4:	4955      	ldr	r1, [pc, #340]	; (8001f1c <HAL_RCC_OscConfig+0x680>)
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d015      	beq.n	8001dfe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd2:	f7fe ff0b 	bl	8000bec <HAL_GetTick>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dda:	e009      	b.n	8001df0 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7fe ff06 	bl	8000bec <HAL_GetTick>
 8001de0:	0002      	movs	r2, r0
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	4a4e      	ldr	r2, [pc, #312]	; (8001f20 <HAL_RCC_OscConfig+0x684>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e11b      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001df0:	4b46      	ldr	r3, [pc, #280]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001df2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d0ef      	beq.n	8001ddc <HAL_RCC_OscConfig+0x540>
 8001dfc:	e014      	b.n	8001e28 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7fe fef5 	bl	8000bec <HAL_GetTick>
 8001e02:	0003      	movs	r3, r0
 8001e04:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e06:	e009      	b.n	8001e1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7fe fef0 	bl	8000bec <HAL_GetTick>
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	4a43      	ldr	r2, [pc, #268]	; (8001f20 <HAL_RCC_OscConfig+0x684>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e105      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e1c:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001e1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4013      	ands	r3, r2
 8001e26:	d1ef      	bne.n	8001e08 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e28:	2323      	movs	r3, #35	; 0x23
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d105      	bne.n	8001e3e <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e32:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e36:	4b35      	ldr	r3, [pc, #212]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001e38:	493a      	ldr	r1, [pc, #232]	; (8001f24 <HAL_RCC_OscConfig+0x688>)
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2220      	movs	r2, #32
 8001e44:	4013      	ands	r3, r2
 8001e46:	d049      	beq.n	8001edc <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d026      	beq.n	8001e9e <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001e50:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e60:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001e62:	2101      	movs	r1, #1
 8001e64:	430a      	orrs	r2, r1
 8001e66:	635a      	str	r2, [r3, #52]	; 0x34
 8001e68:	4b2f      	ldr	r3, [pc, #188]	; (8001f28 <HAL_RCC_OscConfig+0x68c>)
 8001e6a:	6a1a      	ldr	r2, [r3, #32]
 8001e6c:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <HAL_RCC_OscConfig+0x68c>)
 8001e6e:	2180      	movs	r1, #128	; 0x80
 8001e70:	0189      	lsls	r1, r1, #6
 8001e72:	430a      	orrs	r2, r1
 8001e74:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7fe feb9 	bl	8000bec <HAL_GetTick>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e80:	f7fe feb4 	bl	8000bec <HAL_GetTick>
 8001e84:	0002      	movs	r2, r0
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e0ca      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e92:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2202      	movs	r2, #2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d0f1      	beq.n	8001e80 <HAL_RCC_OscConfig+0x5e4>
 8001e9c:	e01e      	b.n	8001edc <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	438a      	bics	r2, r1
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <HAL_RCC_OscConfig+0x68c>)
 8001eac:	6a1a      	ldr	r2, [r3, #32]
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_RCC_OscConfig+0x68c>)
 8001eb0:	491e      	ldr	r1, [pc, #120]	; (8001f2c <HAL_RCC_OscConfig+0x690>)
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb6:	f7fe fe99 	bl	8000bec <HAL_GetTick>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ec0:	f7fe fe94 	bl	8000bec <HAL_GetTick>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e0aa      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d1f1      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d100      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x64a>
 8001ee4:	e09f      	b.n	8002026 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	2b0c      	cmp	r3, #12
 8001eea:	d100      	bne.n	8001eee <HAL_RCC_OscConfig+0x652>
 8001eec:	e078      	b.n	8001fe0 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d159      	bne.n	8001faa <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <HAL_RCC_OscConfig+0x670>)
 8001efc:	490c      	ldr	r1, [pc, #48]	; (8001f30 <HAL_RCC_OscConfig+0x694>)
 8001efe:	400a      	ands	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7fe fe73 	bl	8000bec <HAL_GetTick>
 8001f06:	0003      	movs	r3, r0
 8001f08:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f0a:	e01c      	b.n	8001f46 <HAL_RCC_OscConfig+0x6aa>
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	ffff1fff 	.word	0xffff1fff
 8001f14:	fffffeff 	.word	0xfffffeff
 8001f18:	40007000 	.word	0x40007000
 8001f1c:	fffffbff 	.word	0xfffffbff
 8001f20:	00001388 	.word	0x00001388
 8001f24:	efffffff 	.word	0xefffffff
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	ffffdfff 	.word	0xffffdfff
 8001f30:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f34:	f7fe fe5a 	bl	8000bec <HAL_GetTick>
 8001f38:	0002      	movs	r2, r0
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e070      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f46:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <HAL_RCC_OscConfig+0x794>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	049b      	lsls	r3, r3, #18
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f52:	4b37      	ldr	r3, [pc, #220]	; (8002030 <HAL_RCC_OscConfig+0x794>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	4a37      	ldr	r2, [pc, #220]	; (8002034 <HAL_RCC_OscConfig+0x798>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_RCC_OscConfig+0x794>)
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f72:	4b2f      	ldr	r3, [pc, #188]	; (8002030 <HAL_RCC_OscConfig+0x794>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <HAL_RCC_OscConfig+0x794>)
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	0449      	lsls	r1, r1, #17
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7fe fe34 	bl	8000bec <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7fe fe2f 	bl	8000bec <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e045      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f9c:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_RCC_OscConfig+0x794>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	049b      	lsls	r3, r3, #18
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x6ee>
 8001fa8:	e03d      	b.n	8002026 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_RCC_OscConfig+0x794>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_RCC_OscConfig+0x794>)
 8001fb0:	4921      	ldr	r1, [pc, #132]	; (8002038 <HAL_RCC_OscConfig+0x79c>)
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7fe fe19 	bl	8000bec <HAL_GetTick>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7fe fe14 	bl	8000bec <HAL_GetTick>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e02a      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <HAL_RCC_OscConfig+0x794>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	049b      	lsls	r3, r3, #18
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x724>
 8001fde:	e022      	b.n	8002026 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e01d      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_RCC_OscConfig+0x794>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	025b      	lsls	r3, r3, #9
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d10f      	bne.n	8002022 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	23f0      	movs	r3, #240	; 0xf0
 8002006:	039b      	lsls	r3, r3, #14
 8002008:	401a      	ands	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	429a      	cmp	r2, r3
 8002010:	d107      	bne.n	8002022 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	23c0      	movs	r3, #192	; 0xc0
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	401a      	ands	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800201e:	429a      	cmp	r2, r3
 8002020:	d001      	beq.n	8002026 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b00a      	add	sp, #40	; 0x28
 800202e:	bdb0      	pop	{r4, r5, r7, pc}
 8002030:	40021000 	.word	0x40021000
 8002034:	ff02ffff 	.word	0xff02ffff
 8002038:	feffffff 	.word	0xfeffffff

0800203c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800203c:	b5b0      	push	{r4, r5, r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e10d      	b.n	800226c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b88      	ldr	r3, [pc, #544]	; (8002274 <HAL_RCC_ClockConfig+0x238>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2201      	movs	r2, #1
 8002056:	4013      	ands	r3, r2
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d911      	bls.n	8002082 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b85      	ldr	r3, [pc, #532]	; (8002274 <HAL_RCC_ClockConfig+0x238>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2201      	movs	r2, #1
 8002064:	4393      	bics	r3, r2
 8002066:	0019      	movs	r1, r3
 8002068:	4b82      	ldr	r3, [pc, #520]	; (8002274 <HAL_RCC_ClockConfig+0x238>)
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002070:	4b80      	ldr	r3, [pc, #512]	; (8002274 <HAL_RCC_ClockConfig+0x238>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2201      	movs	r2, #1
 8002076:	4013      	ands	r3, r2
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d001      	beq.n	8002082 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e0f4      	b.n	800226c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2202      	movs	r2, #2
 8002088:	4013      	ands	r3, r2
 800208a:	d009      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208c:	4b7a      	ldr	r3, [pc, #488]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	22f0      	movs	r2, #240	; 0xf0
 8002092:	4393      	bics	r3, r2
 8002094:	0019      	movs	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	4b77      	ldr	r3, [pc, #476]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 800209c:	430a      	orrs	r2, r1
 800209e:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2201      	movs	r2, #1
 80020a6:	4013      	ands	r3, r2
 80020a8:	d100      	bne.n	80020ac <HAL_RCC_ClockConfig+0x70>
 80020aa:	e089      	b.n	80021c0 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020b4:	4b70      	ldr	r3, [pc, #448]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	029b      	lsls	r3, r3, #10
 80020bc:	4013      	ands	r3, r2
 80020be:	d120      	bne.n	8002102 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0d3      	b.n	800226c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020cc:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	049b      	lsls	r3, r3, #18
 80020d4:	4013      	ands	r3, r2
 80020d6:	d114      	bne.n	8002102 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0c7      	b.n	800226c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020e4:	4b64      	ldr	r3, [pc, #400]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2204      	movs	r2, #4
 80020ea:	4013      	ands	r3, r2
 80020ec:	d109      	bne.n	8002102 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0bc      	b.n	800226c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020f2:	4b61      	ldr	r3, [pc, #388]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4013      	ands	r3, r2
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0b4      	b.n	800226c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002102:	4b5d      	ldr	r3, [pc, #372]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2203      	movs	r2, #3
 8002108:	4393      	bics	r3, r2
 800210a:	0019      	movs	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 8002112:	430a      	orrs	r2, r1
 8002114:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002116:	f7fe fd69 	bl	8000bec <HAL_GetTick>
 800211a:	0003      	movs	r3, r0
 800211c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d111      	bne.n	800214a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002126:	e009      	b.n	800213c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002128:	f7fe fd60 	bl	8000bec <HAL_GetTick>
 800212c:	0002      	movs	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	4a52      	ldr	r2, [pc, #328]	; (800227c <HAL_RCC_ClockConfig+0x240>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e097      	b.n	800226c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800213c:	4b4e      	ldr	r3, [pc, #312]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	220c      	movs	r2, #12
 8002142:	4013      	ands	r3, r2
 8002144:	2b08      	cmp	r3, #8
 8002146:	d1ef      	bne.n	8002128 <HAL_RCC_ClockConfig+0xec>
 8002148:	e03a      	b.n	80021c0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d111      	bne.n	8002176 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002152:	e009      	b.n	8002168 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7fe fd4a 	bl	8000bec <HAL_GetTick>
 8002158:	0002      	movs	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	4a47      	ldr	r2, [pc, #284]	; (800227c <HAL_RCC_ClockConfig+0x240>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e081      	b.n	800226c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002168:	4b43      	ldr	r3, [pc, #268]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	220c      	movs	r2, #12
 800216e:	4013      	ands	r3, r2
 8002170:	2b0c      	cmp	r3, #12
 8002172:	d1ef      	bne.n	8002154 <HAL_RCC_ClockConfig+0x118>
 8002174:	e024      	b.n	80021c0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d11b      	bne.n	80021b6 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800217e:	e009      	b.n	8002194 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7fe fd34 	bl	8000bec <HAL_GetTick>
 8002184:	0002      	movs	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	4a3c      	ldr	r2, [pc, #240]	; (800227c <HAL_RCC_ClockConfig+0x240>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e06b      	b.n	800226c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002194:	4b38      	ldr	r3, [pc, #224]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	220c      	movs	r2, #12
 800219a:	4013      	ands	r3, r2
 800219c:	2b04      	cmp	r3, #4
 800219e:	d1ef      	bne.n	8002180 <HAL_RCC_ClockConfig+0x144>
 80021a0:	e00e      	b.n	80021c0 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a2:	f7fe fd23 	bl	8000bec <HAL_GetTick>
 80021a6:	0002      	movs	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	4a33      	ldr	r2, [pc, #204]	; (800227c <HAL_RCC_ClockConfig+0x240>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e05a      	b.n	800226c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021b6:	4b30      	ldr	r3, [pc, #192]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	220c      	movs	r2, #12
 80021bc:	4013      	ands	r3, r2
 80021be:	d1f0      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c0:	4b2c      	ldr	r3, [pc, #176]	; (8002274 <HAL_RCC_ClockConfig+0x238>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2201      	movs	r2, #1
 80021c6:	4013      	ands	r3, r2
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d211      	bcs.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b29      	ldr	r3, [pc, #164]	; (8002274 <HAL_RCC_ClockConfig+0x238>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2201      	movs	r2, #1
 80021d4:	4393      	bics	r3, r2
 80021d6:	0019      	movs	r1, r3
 80021d8:	4b26      	ldr	r3, [pc, #152]	; (8002274 <HAL_RCC_ClockConfig+0x238>)
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e0:	4b24      	ldr	r3, [pc, #144]	; (8002274 <HAL_RCC_ClockConfig+0x238>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4013      	ands	r3, r2
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e03c      	b.n	800226c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2204      	movs	r2, #4
 80021f8:	4013      	ands	r3, r2
 80021fa:	d009      	beq.n	8002210 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <HAL_RCC_ClockConfig+0x244>)
 8002202:	4013      	ands	r3, r2
 8002204:	0019      	movs	r1, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 800220c:	430a      	orrs	r2, r1
 800220e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2208      	movs	r2, #8
 8002216:	4013      	ands	r3, r2
 8002218:	d00a      	beq.n	8002230 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800221a:	4b17      	ldr	r3, [pc, #92]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	4a19      	ldr	r2, [pc, #100]	; (8002284 <HAL_RCC_ClockConfig+0x248>)
 8002220:	4013      	ands	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	00da      	lsls	r2, r3, #3
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 800222c:	430a      	orrs	r2, r1
 800222e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002230:	f000 f82e 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8002234:	0001      	movs	r1, r0
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_RCC_ClockConfig+0x23c>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	220f      	movs	r2, #15
 800223e:	4013      	ands	r3, r2
 8002240:	4a11      	ldr	r2, [pc, #68]	; (8002288 <HAL_RCC_ClockConfig+0x24c>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	000a      	movs	r2, r1
 8002246:	40da      	lsrs	r2, r3
 8002248:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_RCC_ClockConfig+0x250>)
 800224a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800224c:	250b      	movs	r5, #11
 800224e:	197c      	adds	r4, r7, r5
 8002250:	2000      	movs	r0, #0
 8002252:	f7fe fc95 	bl	8000b80 <HAL_InitTick>
 8002256:	0003      	movs	r3, r0
 8002258:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800225a:	197b      	adds	r3, r7, r5
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002262:	230b      	movs	r3, #11
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	e000      	b.n	800226c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b004      	add	sp, #16
 8002272:	bdb0      	pop	{r4, r5, r7, pc}
 8002274:	40022000 	.word	0x40022000
 8002278:	40021000 	.word	0x40021000
 800227c:	00001388 	.word	0x00001388
 8002280:	fffff8ff 	.word	0xfffff8ff
 8002284:	ffffc7ff 	.word	0xffffc7ff
 8002288:	08006eac 	.word	0x08006eac
 800228c:	20000000 	.word	0x20000000

08002290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002296:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	220c      	movs	r2, #12
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d00e      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x34>
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d00f      	beq.n	80022ca <HAL_RCC_GetSysClockFreq+0x3a>
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d157      	bne.n	800235e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022ae:	4b35      	ldr	r3, [pc, #212]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2210      	movs	r2, #16
 80022b4:	4013      	ands	r3, r2
 80022b6:	d002      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80022b8:	4b33      	ldr	r3, [pc, #204]	; (8002388 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ba:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80022bc:	e05d      	b.n	800237a <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80022be:	4b33      	ldr	r3, [pc, #204]	; (800238c <HAL_RCC_GetSysClockFreq+0xfc>)
 80022c0:	613b      	str	r3, [r7, #16]
      break;
 80022c2:	e05a      	b.n	800237a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c4:	4b32      	ldr	r3, [pc, #200]	; (8002390 <HAL_RCC_GetSysClockFreq+0x100>)
 80022c6:	613b      	str	r3, [r7, #16]
      break;
 80022c8:	e057      	b.n	800237a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	0c9b      	lsrs	r3, r3, #18
 80022ce:	220f      	movs	r2, #15
 80022d0:	4013      	ands	r3, r2
 80022d2:	4a30      	ldr	r2, [pc, #192]	; (8002394 <HAL_RCC_GetSysClockFreq+0x104>)
 80022d4:	5cd3      	ldrb	r3, [r2, r3]
 80022d6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	0d9b      	lsrs	r3, r3, #22
 80022dc:	2203      	movs	r2, #3
 80022de:	4013      	ands	r3, r2
 80022e0:	3301      	adds	r3, #1
 80022e2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022e4:	4b27      	ldr	r3, [pc, #156]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	025b      	lsls	r3, r3, #9
 80022ec:	4013      	ands	r3, r2
 80022ee:	d00f      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	000a      	movs	r2, r1
 80022f4:	0152      	lsls	r2, r2, #5
 80022f6:	1a52      	subs	r2, r2, r1
 80022f8:	0193      	lsls	r3, r2, #6
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	185b      	adds	r3, r3, r1
 8002300:	025b      	lsls	r3, r3, #9
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	0018      	movs	r0, r3
 8002306:	f7fd feff 	bl	8000108 <__udivsi3>
 800230a:	0003      	movs	r3, r0
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	e023      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002310:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2210      	movs	r2, #16
 8002316:	4013      	ands	r3, r2
 8002318:	d00f      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	000a      	movs	r2, r1
 800231e:	0152      	lsls	r2, r2, #5
 8002320:	1a52      	subs	r2, r2, r1
 8002322:	0193      	lsls	r3, r2, #6
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	185b      	adds	r3, r3, r1
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	0018      	movs	r0, r3
 8002330:	f7fd feea 	bl	8000108 <__udivsi3>
 8002334:	0003      	movs	r3, r0
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	e00e      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	000a      	movs	r2, r1
 800233e:	0152      	lsls	r2, r2, #5
 8002340:	1a52      	subs	r2, r2, r1
 8002342:	0193      	lsls	r3, r2, #6
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	185b      	adds	r3, r3, r1
 800234a:	029b      	lsls	r3, r3, #10
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	0018      	movs	r0, r3
 8002350:	f7fd feda 	bl	8000108 <__udivsi3>
 8002354:	0003      	movs	r3, r0
 8002356:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	613b      	str	r3, [r7, #16]
      break;
 800235c:	e00d      	b.n	800237a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	0b5b      	lsrs	r3, r3, #13
 8002364:	2207      	movs	r2, #7
 8002366:	4013      	ands	r3, r2
 8002368:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	0212      	lsls	r2, r2, #8
 8002372:	409a      	lsls	r2, r3
 8002374:	0013      	movs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
      break;
 8002378:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800237a:	693b      	ldr	r3, [r7, #16]
}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	b006      	add	sp, #24
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	003d0900 	.word	0x003d0900
 800238c:	00f42400 	.word	0x00f42400
 8002390:	007a1200 	.word	0x007a1200
 8002394:	08006ec4 	.word	0x08006ec4

08002398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800239c:	4b02      	ldr	r3, [pc, #8]	; (80023a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	20000000 	.word	0x20000000

080023ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023b0:	f7ff fff2 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023b4:	0001      	movs	r1, r0
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	2207      	movs	r2, #7
 80023be:	4013      	ands	r3, r2
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023c2:	5cd3      	ldrb	r3, [r2, r3]
 80023c4:	40d9      	lsrs	r1, r3
 80023c6:	000b      	movs	r3, r1
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	40021000 	.word	0x40021000
 80023d4:	08006ebc 	.word	0x08006ebc

080023d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023dc:	f7ff ffdc 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023e0:	0001      	movs	r1, r0
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	0adb      	lsrs	r3, r3, #11
 80023e8:	2207      	movs	r2, #7
 80023ea:	4013      	ands	r3, r2
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	40d9      	lsrs	r1, r3
 80023f2:	000b      	movs	r3, r1
}
 80023f4:	0018      	movs	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	40021000 	.word	0x40021000
 8002400:	08006ebc 	.word	0x08006ebc

08002404 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2220      	movs	r2, #32
 8002412:	4013      	ands	r3, r2
 8002414:	d106      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	4013      	ands	r3, r2
 8002420:	d100      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8002422:	e0dd      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002424:	2317      	movs	r3, #23
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242c:	4ba4      	ldr	r3, [pc, #656]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800242e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	055b      	lsls	r3, r3, #21
 8002434:	4013      	ands	r3, r2
 8002436:	d10a      	bne.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002438:	4ba1      	ldr	r3, [pc, #644]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800243a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800243c:	4ba0      	ldr	r3, [pc, #640]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	0549      	lsls	r1, r1, #21
 8002442:	430a      	orrs	r2, r1
 8002444:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002446:	2317      	movs	r3, #23
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244e:	4b9d      	ldr	r3, [pc, #628]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4013      	ands	r3, r2
 8002458:	d11a      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245a:	4b9a      	ldr	r3, [pc, #616]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4b99      	ldr	r3, [pc, #612]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002460:	2180      	movs	r1, #128	; 0x80
 8002462:	0049      	lsls	r1, r1, #1
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002468:	f7fe fbc0 	bl	8000bec <HAL_GetTick>
 800246c:	0003      	movs	r3, r0
 800246e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	e008      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002472:	f7fe fbbb 	bl	8000bec <HAL_GetTick>
 8002476:	0002      	movs	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b64      	cmp	r3, #100	; 0x64
 800247e:	d901      	bls.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e118      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	4b8f      	ldr	r3, [pc, #572]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4013      	ands	r3, r2
 800248e:	d0f0      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002490:	4b8b      	ldr	r3, [pc, #556]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	23c0      	movs	r3, #192	; 0xc0
 8002496:	039b      	lsls	r3, r3, #14
 8002498:	4013      	ands	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	23c0      	movs	r3, #192	; 0xc0
 80024a2:	039b      	lsls	r3, r3, #14
 80024a4:	4013      	ands	r3, r2
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d107      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	23c0      	movs	r3, #192	; 0xc0
 80024b2:	039b      	lsls	r3, r3, #14
 80024b4:	4013      	ands	r3, r2
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d013      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	23c0      	movs	r3, #192	; 0xc0
 80024c2:	029b      	lsls	r3, r3, #10
 80024c4:	401a      	ands	r2, r3
 80024c6:	23c0      	movs	r3, #192	; 0xc0
 80024c8:	029b      	lsls	r3, r3, #10
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d10a      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80024ce:	4b7c      	ldr	r3, [pc, #496]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	029b      	lsls	r3, r3, #10
 80024d6:	401a      	ands	r2, r3
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	029b      	lsls	r3, r3, #10
 80024dc:	429a      	cmp	r2, r3
 80024de:	d101      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0e8      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80024e4:	4b76      	ldr	r3, [pc, #472]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80024e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024e8:	23c0      	movs	r3, #192	; 0xc0
 80024ea:	029b      	lsls	r3, r3, #10
 80024ec:	4013      	ands	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d049      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	23c0      	movs	r3, #192	; 0xc0
 80024fc:	029b      	lsls	r3, r3, #10
 80024fe:	4013      	ands	r3, r2
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	429a      	cmp	r2, r3
 8002504:	d004      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2220      	movs	r2, #32
 800250c:	4013      	ands	r3, r2
 800250e:	d10d      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	23c0      	movs	r3, #192	; 0xc0
 8002516:	029b      	lsls	r3, r3, #10
 8002518:	4013      	ands	r3, r2
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	429a      	cmp	r2, r3
 800251e:	d034      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	4013      	ands	r3, r2
 800252a:	d02e      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800252c:	4b64      	ldr	r3, [pc, #400]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800252e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002530:	4a65      	ldr	r2, [pc, #404]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002532:	4013      	ands	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002536:	4b62      	ldr	r3, [pc, #392]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002538:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800253a:	4b61      	ldr	r3, [pc, #388]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	0309      	lsls	r1, r1, #12
 8002540:	430a      	orrs	r2, r1
 8002542:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002544:	4b5e      	ldr	r3, [pc, #376]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002548:	4b5d      	ldr	r3, [pc, #372]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800254a:	4960      	ldr	r1, [pc, #384]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800254c:	400a      	ands	r2, r1
 800254e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002550:	4b5b      	ldr	r3, [pc, #364]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4013      	ands	r3, r2
 800255e:	d014      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fb44 	bl	8000bec <HAL_GetTick>
 8002564:	0003      	movs	r3, r0
 8002566:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002568:	e009      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f7fe fb3f 	bl	8000bec <HAL_GetTick>
 800256e:	0002      	movs	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	4a56      	ldr	r2, [pc, #344]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e09b      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800257e:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002580:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4013      	ands	r3, r2
 8002588:	d0ef      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	23c0      	movs	r3, #192	; 0xc0
 8002590:	029b      	lsls	r3, r3, #10
 8002592:	401a      	ands	r2, r3
 8002594:	23c0      	movs	r3, #192	; 0xc0
 8002596:	029b      	lsls	r3, r3, #10
 8002598:	429a      	cmp	r2, r3
 800259a:	d10c      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800259c:	4b48      	ldr	r3, [pc, #288]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a4c      	ldr	r2, [pc, #304]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	0019      	movs	r1, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	23c0      	movs	r3, #192	; 0xc0
 80025ac:	039b      	lsls	r3, r3, #14
 80025ae:	401a      	ands	r2, r3
 80025b0:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025b2:	430a      	orrs	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	4b42      	ldr	r3, [pc, #264]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	23c0      	movs	r3, #192	; 0xc0
 80025c0:	029b      	lsls	r3, r3, #10
 80025c2:	401a      	ands	r2, r3
 80025c4:	4b3e      	ldr	r3, [pc, #248]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025c6:	430a      	orrs	r2, r1
 80025c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025ca:	2317      	movs	r3, #23
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d105      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d4:	4b3a      	ldr	r3, [pc, #232]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d8:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025da:	493f      	ldr	r1, [pc, #252]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025dc:	400a      	ands	r2, r1
 80025de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2201      	movs	r2, #1
 80025e6:	4013      	ands	r3, r2
 80025e8:	d009      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ea:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ee:	2203      	movs	r2, #3
 80025f0:	4393      	bics	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025fa:	430a      	orrs	r2, r1
 80025fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2202      	movs	r2, #2
 8002604:	4013      	ands	r3, r2
 8002606:	d009      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002608:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800260a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260c:	220c      	movs	r2, #12
 800260e:	4393      	bics	r3, r2
 8002610:	0019      	movs	r1, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002618:	430a      	orrs	r2, r1
 800261a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2204      	movs	r2, #4
 8002622:	4013      	ands	r3, r2
 8002624:	d009      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002626:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262a:	4a2c      	ldr	r2, [pc, #176]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800262c:	4013      	ands	r3, r2
 800262e:	0019      	movs	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002636:	430a      	orrs	r2, r1
 8002638:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2208      	movs	r2, #8
 8002640:	4013      	ands	r3, r2
 8002642:	d009      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002644:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002648:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800264a:	4013      	ands	r3, r2
 800264c:	0019      	movs	r1, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002654:	430a      	orrs	r2, r1
 8002656:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4013      	ands	r3, r2
 8002662:	d009      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002664:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002668:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800266a:	4013      	ands	r3, r2
 800266c:	0019      	movs	r1, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002674:	430a      	orrs	r2, r1
 8002676:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2240      	movs	r2, #64	; 0x40
 800267e:	4013      	ands	r3, r2
 8002680:	d009      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002686:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002688:	4013      	ands	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002692:	430a      	orrs	r2, r1
 8002694:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2280      	movs	r2, #128	; 0x80
 800269c:	4013      	ands	r3, r2
 800269e:	d009      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a4:	4a10      	ldr	r2, [pc, #64]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	0019      	movs	r1, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1a      	ldr	r2, [r3, #32]
 80026ae:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026b0:	430a      	orrs	r2, r1
 80026b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	0018      	movs	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b006      	add	sp, #24
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40007000 	.word	0x40007000
 80026c8:	fffcffff 	.word	0xfffcffff
 80026cc:	fff7ffff 	.word	0xfff7ffff
 80026d0:	00001388 	.word	0x00001388
 80026d4:	ffcfffff 	.word	0xffcfffff
 80026d8:	efffffff 	.word	0xefffffff
 80026dc:	fffff3ff 	.word	0xfffff3ff
 80026e0:	ffffcfff 	.word	0xffffcfff
 80026e4:	fbffffff 	.word	0xfbffffff
 80026e8:	fff3ffff 	.word	0xfff3ffff

080026ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e01e      	b.n	800273c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2239      	movs	r2, #57	; 0x39
 8002702:	5c9b      	ldrb	r3, [r3, r2]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d107      	bne.n	800271a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2238      	movs	r2, #56	; 0x38
 800270e:	2100      	movs	r1, #0
 8002710:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	0018      	movs	r0, r3
 8002716:	f002 fe05 	bl	8005324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2239      	movs	r2, #57	; 0x39
 800271e:	2102      	movs	r1, #2
 8002720:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3304      	adds	r3, #4
 800272a:	0019      	movs	r1, r3
 800272c:	0010      	movs	r0, r2
 800272e:	f000 fc8b 	bl	8003048 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2239      	movs	r2, #57	; 0x39
 8002736:	2101      	movs	r1, #1
 8002738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2101      	movs	r1, #1
 8002758:	430a      	orrs	r2, r1
 800275a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2207      	movs	r2, #7
 8002764:	4013      	ands	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b06      	cmp	r3, #6
 800276c:	d007      	beq.n	800277e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	430a      	orrs	r2, r1
 800277c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	b004      	add	sp, #16
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e01e      	b.n	80027d8 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2239      	movs	r2, #57	; 0x39
 800279e:	5c9b      	ldrb	r3, [r3, r2]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d107      	bne.n	80027b6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2238      	movs	r2, #56	; 0x38
 80027aa:	2100      	movs	r1, #0
 80027ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f002 fdfb 	bl	80053ac <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2239      	movs	r2, #57	; 0x39
 80027ba:	2102      	movs	r1, #2
 80027bc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	0019      	movs	r1, r3
 80027c8:	0010      	movs	r0, r2
 80027ca:	f000 fc3d 	bl	8003048 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2239      	movs	r2, #57	; 0x39
 80027d2:	2101      	movs	r1, #1
 80027d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b002      	add	sp, #8
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e01e      	b.n	8002830 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2239      	movs	r2, #57	; 0x39
 80027f6:	5c9b      	ldrb	r3, [r3, r2]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d107      	bne.n	800280e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2238      	movs	r2, #56	; 0x38
 8002802:	2100      	movs	r1, #0
 8002804:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	0018      	movs	r0, r3
 800280a:	f002 fdb7 	bl	800537c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2239      	movs	r2, #57	; 0x39
 8002812:	2102      	movs	r1, #2
 8002814:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3304      	adds	r3, #4
 800281e:	0019      	movs	r1, r3
 8002820:	0010      	movs	r0, r2
 8002822:	f000 fc11 	bl	8003048 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2239      	movs	r2, #57	; 0x39
 800282a:	2101      	movs	r1, #1
 800282c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	0018      	movs	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	b002      	add	sp, #8
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6839      	ldr	r1, [r7, #0]
 8002848:	2201      	movs	r2, #1
 800284a:	0018      	movs	r0, r3
 800284c:	f000 fe7c 	bl	8003548 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2207      	movs	r2, #7
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b06      	cmp	r3, #6
 8002860:	d007      	beq.n	8002872 <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2101      	movs	r1, #1
 800286e:	430a      	orrs	r2, r1
 8002870:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b004      	add	sp, #16
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e07c      	b.n	800298a <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2239      	movs	r2, #57	; 0x39
 8002894:	5c9b      	ldrb	r3, [r3, r2]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2238      	movs	r2, #56	; 0x38
 80028a0:	2100      	movs	r1, #0
 80028a2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	0018      	movs	r0, r3
 80028a8:	f002 fda0 	bl	80053ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2239      	movs	r2, #57	; 0x39
 80028b0:	2102      	movs	r1, #2
 80028b2:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4935      	ldr	r1, [pc, #212]	; (8002994 <HAL_TIM_Encoder_Init+0x118>)
 80028c0:	400a      	ands	r2, r1
 80028c2:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	0019      	movs	r1, r3
 80028ce:	0010      	movs	r0, r2
 80028d0:	f000 fbba 	bl	8003048 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4a27      	ldr	r2, [pc, #156]	; (8002998 <HAL_TIM_Encoder_Init+0x11c>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	4313      	orrs	r3, r2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4a22      	ldr	r2, [pc, #136]	; (800299c <HAL_TIM_Encoder_Init+0x120>)
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4a21      	ldr	r2, [pc, #132]	; (80029a0 <HAL_TIM_Encoder_Init+0x124>)
 800291c:	4013      	ands	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	4313      	orrs	r3, r2
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	011a      	lsls	r2, r3, #4
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	031b      	lsls	r3, r3, #12
 800293e:	4313      	orrs	r3, r2
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2222      	movs	r2, #34	; 0x22
 800294a:	4393      	bics	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2288      	movs	r2, #136	; 0x88
 8002952:	4393      	bics	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	4313      	orrs	r3, r2
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2239      	movs	r2, #57	; 0x39
 8002984:	2101      	movs	r1, #1
 8002986:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b006      	add	sp, #24
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	ffffbff8 	.word	0xffffbff8
 8002998:	fffffcfc 	.word	0xfffffcfc
 800299c:	fffff3f3 	.word	0xfffff3f3
 80029a0:	ffff0f0f 	.word	0xffff0f0f

080029a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <HAL_TIM_Encoder_Start+0x16>
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d008      	beq.n	80029ca <HAL_TIM_Encoder_Start+0x26>
 80029b8:	e00f      	b.n	80029da <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2201      	movs	r2, #1
 80029c0:	2100      	movs	r1, #0
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 fdc0 	bl	8003548 <TIM_CCxChannelCmd>
      break;
 80029c8:	e016      	b.n	80029f8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2201      	movs	r2, #1
 80029d0:	2104      	movs	r1, #4
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 fdb8 	bl	8003548 <TIM_CCxChannelCmd>
      break;
 80029d8:	e00e      	b.n	80029f8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2201      	movs	r2, #1
 80029e0:	2100      	movs	r1, #0
 80029e2:	0018      	movs	r0, r3
 80029e4:	f000 fdb0 	bl	8003548 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2201      	movs	r2, #1
 80029ee:	2104      	movs	r1, #4
 80029f0:	0018      	movs	r0, r3
 80029f2:	f000 fda9 	bl	8003548 <TIM_CCxChannelCmd>
      break;
 80029f6:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2101      	movs	r1, #1
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b002      	add	sp, #8
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2202      	movs	r2, #2
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d124      	bne.n	8002a72 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d11d      	bne.n	8002a72 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	4252      	negs	r2, r2
 8002a3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d004      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f000 fadf 	bl	8003018 <HAL_TIM_IC_CaptureCallback>
 8002a5a:	e007      	b.n	8002a6c <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f000 fad2 	bl	8003008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 fade 	bl	8003028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2204      	movs	r2, #4
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d125      	bne.n	8002acc <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2204      	movs	r2, #4
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d11e      	bne.n	8002acc <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2205      	movs	r2, #5
 8002a94:	4252      	negs	r2, r2
 8002a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699a      	ldr	r2, [r3, #24]
 8002aa4:	23c0      	movs	r3, #192	; 0xc0
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d004      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f000 fab2 	bl	8003018 <HAL_TIM_IC_CaptureCallback>
 8002ab4:	e007      	b.n	8002ac6 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f000 faa5 	bl	8003008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f000 fab1 	bl	8003028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d124      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d11d      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2209      	movs	r2, #9
 8002aee:	4252      	negs	r2, r2
 8002af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2204      	movs	r2, #4
 8002af6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	2203      	movs	r2, #3
 8002b00:	4013      	ands	r3, r2
 8002b02:	d004      	beq.n	8002b0e <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	0018      	movs	r0, r3
 8002b08:	f000 fa86 	bl	8003018 <HAL_TIM_IC_CaptureCallback>
 8002b0c:	e007      	b.n	8002b1e <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f000 fa79 	bl	8003008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f000 fa85 	bl	8003028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2210      	movs	r2, #16
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d125      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2210      	movs	r2, #16
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b10      	cmp	r3, #16
 8002b3e:	d11e      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2211      	movs	r2, #17
 8002b46:	4252      	negs	r2, r2
 8002b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2208      	movs	r2, #8
 8002b4e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	23c0      	movs	r3, #192	; 0xc0
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d004      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f000 fa59 	bl	8003018 <HAL_TIM_IC_CaptureCallback>
 8002b66:	e007      	b.n	8002b78 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 fa4c 	bl	8003008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	0018      	movs	r0, r3
 8002b74:	f000 fa58 	bl	8003028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2201      	movs	r2, #1
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d10f      	bne.n	8002bac <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d108      	bne.n	8002bac <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	4252      	negs	r2, r2
 8002ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 fa26 	bl	8002ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2240      	movs	r2, #64	; 0x40
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b40      	cmp	r3, #64	; 0x40
 8002bb8:	d10f      	bne.n	8002bda <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2240      	movs	r2, #64	; 0x40
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d108      	bne.n	8002bda <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2241      	movs	r2, #65	; 0x41
 8002bce:	4252      	negs	r2, r2
 8002bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f000 fa2f 	bl	8003038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b002      	add	sp, #8
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2238      	movs	r2, #56	; 0x38
 8002bf2:	5c9b      	ldrb	r3, [r3, r2]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_TIM_OC_ConfigChannel+0x1a>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e03c      	b.n	8002c76 <HAL_TIM_OC_ConfigChannel+0x94>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2238      	movs	r2, #56	; 0x38
 8002c00:	2101      	movs	r1, #1
 8002c02:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2239      	movs	r2, #57	; 0x39
 8002c08:	2102      	movs	r1, #2
 8002c0a:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d010      	beq.n	8002c34 <HAL_TIM_OC_ConfigChannel+0x52>
 8002c12:	d802      	bhi.n	8002c1a <HAL_TIM_OC_ConfigChannel+0x38>
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8002c18:	e024      	b.n	8002c64 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d012      	beq.n	8002c44 <HAL_TIM_OC_ConfigChannel+0x62>
 8002c1e:	2b0c      	cmp	r3, #12
 8002c20:	d018      	beq.n	8002c54 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8002c22:	e01f      	b.n	8002c64 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	0011      	movs	r1, r2
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f000 fa69 	bl	8003104 <TIM_OC1_SetConfig>
      break;
 8002c32:	e017      	b.n	8002c64 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	0011      	movs	r1, r2
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f000 fa9d 	bl	800317c <TIM_OC2_SetConfig>
      break;
 8002c42:	e00f      	b.n	8002c64 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f000 fad7 	bl	8003200 <TIM_OC3_SetConfig>
      break;
 8002c52:	e007      	b.n	8002c64 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	0011      	movs	r1, r2
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f000 fb0f 	bl	8003280 <TIM_OC4_SetConfig>
      break;
 8002c62:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2239      	movs	r2, #57	; 0x39
 8002c68:	2101      	movs	r1, #1
 8002c6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2238      	movs	r2, #56	; 0x38
 8002c70:	2100      	movs	r1, #0
 8002c72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	0018      	movs	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b004      	add	sp, #16
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2238      	movs	r2, #56	; 0x38
 8002c90:	5c9b      	ldrb	r3, [r3, r2]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e0a4      	b.n	8002de4 <HAL_TIM_PWM_ConfigChannel+0x164>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2238      	movs	r2, #56	; 0x38
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2239      	movs	r2, #57	; 0x39
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d029      	beq.n	8002d04 <HAL_TIM_PWM_ConfigChannel+0x84>
 8002cb0:	d802      	bhi.n	8002cb8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002cb6:	e08c      	b.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d046      	beq.n	8002d4a <HAL_TIM_PWM_ConfigChannel+0xca>
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	d065      	beq.n	8002d8c <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002cc0:	e087      	b.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	0011      	movs	r1, r2
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f000 fa1a 	bl	8003104 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2108      	movs	r1, #8
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2104      	movs	r1, #4
 8002cec:	438a      	bics	r2, r1
 8002cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6999      	ldr	r1, [r3, #24]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	619a      	str	r2, [r3, #24]
      break;
 8002d02:	e066      	b.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	0011      	movs	r1, r2
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f000 fa35 	bl	800317c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2180      	movs	r1, #128	; 0x80
 8002d1e:	0109      	lsls	r1, r1, #4
 8002d20:	430a      	orrs	r2, r1
 8002d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	492f      	ldr	r1, [pc, #188]	; (8002dec <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002d30:	400a      	ands	r2, r1
 8002d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6999      	ldr	r1, [r3, #24]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	021a      	lsls	r2, r3, #8
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	619a      	str	r2, [r3, #24]
      break;
 8002d48:	e043      	b.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	0011      	movs	r1, r2
 8002d52:	0018      	movs	r0, r3
 8002d54:	f000 fa54 	bl	8003200 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	69da      	ldr	r2, [r3, #28]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2108      	movs	r1, #8
 8002d64:	430a      	orrs	r2, r1
 8002d66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	69da      	ldr	r2, [r3, #28]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2104      	movs	r1, #4
 8002d74:	438a      	bics	r2, r1
 8002d76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69d9      	ldr	r1, [r3, #28]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	61da      	str	r2, [r3, #28]
      break;
 8002d8a:	e022      	b.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	0011      	movs	r1, r2
 8002d94:	0018      	movs	r0, r3
 8002d96:	f000 fa73 	bl	8003280 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69da      	ldr	r2, [r3, #28]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	0109      	lsls	r1, r1, #4
 8002da8:	430a      	orrs	r2, r1
 8002daa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69da      	ldr	r2, [r3, #28]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	490d      	ldr	r1, [pc, #52]	; (8002dec <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002db8:	400a      	ands	r2, r1
 8002dba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	69d9      	ldr	r1, [r3, #28]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	021a      	lsls	r2, r3, #8
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	61da      	str	r2, [r3, #28]
      break;
 8002dd0:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2239      	movs	r2, #57	; 0x39
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2238      	movs	r2, #56	; 0x38
 8002dde:	2100      	movs	r1, #0
 8002de0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	0018      	movs	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b004      	add	sp, #16
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	fffffbff 	.word	0xfffffbff

08002df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2238      	movs	r2, #56	; 0x38
 8002dfe:	5c9b      	ldrb	r3, [r3, r2]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_TIM_ConfigClockSource+0x18>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e0ab      	b.n	8002f60 <HAL_TIM_ConfigClockSource+0x170>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2238      	movs	r2, #56	; 0x38
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2239      	movs	r2, #57	; 0x39
 8002e14:	2102      	movs	r1, #2
 8002e16:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2277      	movs	r2, #119	; 0x77
 8002e24:	4393      	bics	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a4f      	ldr	r2, [pc, #316]	; (8002f68 <HAL_TIM_ConfigClockSource+0x178>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b40      	cmp	r3, #64	; 0x40
 8002e3e:	d100      	bne.n	8002e42 <HAL_TIM_ConfigClockSource+0x52>
 8002e40:	e06b      	b.n	8002f1a <HAL_TIM_ConfigClockSource+0x12a>
 8002e42:	d80e      	bhi.n	8002e62 <HAL_TIM_ConfigClockSource+0x72>
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d100      	bne.n	8002e4a <HAL_TIM_ConfigClockSource+0x5a>
 8002e48:	e077      	b.n	8002f3a <HAL_TIM_ConfigClockSource+0x14a>
 8002e4a:	d803      	bhi.n	8002e54 <HAL_TIM_ConfigClockSource+0x64>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d100      	bne.n	8002e52 <HAL_TIM_ConfigClockSource+0x62>
 8002e50:	e073      	b.n	8002f3a <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002e52:	e07c      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d100      	bne.n	8002e5a <HAL_TIM_ConfigClockSource+0x6a>
 8002e58:	e06f      	b.n	8002f3a <HAL_TIM_ConfigClockSource+0x14a>
 8002e5a:	2b30      	cmp	r3, #48	; 0x30
 8002e5c:	d100      	bne.n	8002e60 <HAL_TIM_ConfigClockSource+0x70>
 8002e5e:	e06c      	b.n	8002f3a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002e60:	e075      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002e62:	2b70      	cmp	r3, #112	; 0x70
 8002e64:	d00e      	beq.n	8002e84 <HAL_TIM_ConfigClockSource+0x94>
 8002e66:	d804      	bhi.n	8002e72 <HAL_TIM_ConfigClockSource+0x82>
 8002e68:	2b50      	cmp	r3, #80	; 0x50
 8002e6a:	d036      	beq.n	8002eda <HAL_TIM_ConfigClockSource+0xea>
 8002e6c:	2b60      	cmp	r3, #96	; 0x60
 8002e6e:	d044      	beq.n	8002efa <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002e70:	e06d      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	0152      	lsls	r2, r2, #5
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d068      	beq.n	8002f4c <HAL_TIM_ConfigClockSource+0x15c>
 8002e7a:	2280      	movs	r2, #128	; 0x80
 8002e7c:	0192      	lsls	r2, r2, #6
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d017      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002e82:	e064      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	6899      	ldr	r1, [r3, #8]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f000 fb38 	bl	8003508 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2277      	movs	r2, #119	; 0x77
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	609a      	str	r2, [r3, #8]
      break;
 8002eb0:	e04d      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6899      	ldr	r1, [r3, #8]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f000 fb21 	bl	8003508 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	01c9      	lsls	r1, r1, #7
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	609a      	str	r2, [r3, #8]
      break;
 8002ed8:	e039      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6859      	ldr	r1, [r3, #4]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	001a      	movs	r2, r3
 8002ee8:	f000 fa94 	bl	8003414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2150      	movs	r1, #80	; 0x50
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f000 faee 	bl	80034d4 <TIM_ITRx_SetConfig>
      break;
 8002ef8:	e029      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6859      	ldr	r1, [r3, #4]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	001a      	movs	r2, r3
 8002f08:	f000 fab2 	bl	8003470 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2160      	movs	r1, #96	; 0x60
 8002f12:	0018      	movs	r0, r3
 8002f14:	f000 fade 	bl	80034d4 <TIM_ITRx_SetConfig>
      break;
 8002f18:	e019      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	6859      	ldr	r1, [r3, #4]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	001a      	movs	r2, r3
 8002f28:	f000 fa74 	bl	8003414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2140      	movs	r1, #64	; 0x40
 8002f32:	0018      	movs	r0, r3
 8002f34:	f000 face 	bl	80034d4 <TIM_ITRx_SetConfig>
      break;
 8002f38:	e009      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	0019      	movs	r1, r3
 8002f44:	0010      	movs	r0, r2
 8002f46:	f000 fac5 	bl	80034d4 <TIM_ITRx_SetConfig>
      break;
 8002f4a:	e000      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002f4c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2239      	movs	r2, #57	; 0x39
 8002f52:	2101      	movs	r1, #1
 8002f54:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2238      	movs	r2, #56	; 0x38
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b004      	add	sp, #16
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	ffff00ff 	.word	0xffff00ff

08002f6c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2238      	movs	r2, #56	; 0x38
 8002f7a:	5c9b      	ldrb	r3, [r3, r2]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e032      	b.n	8002fea <HAL_TIM_SlaveConfigSynchro+0x7e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2238      	movs	r2, #56	; 0x38
 8002f88:	2101      	movs	r1, #1
 8002f8a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2239      	movs	r2, #57	; 0x39
 8002f90:	2102      	movs	r1, #2
 8002f92:	5499      	strb	r1, [r3, r2]

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	0011      	movs	r1, r2
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 f9b6 	bl	800330c <TIM_SlaveTimer_SetConfig>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d009      	beq.n	8002fb8 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
      htim->State = HAL_TIM_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2239      	movs	r2, #57	; 0x39
 8002fa8:	2101      	movs	r1, #1
 8002faa:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2238      	movs	r2, #56	; 0x38
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e018      	b.n	8002fea <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2140      	movs	r1, #64	; 0x40
 8002fc4:	438a      	bics	r2, r1
 8002fc6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4908      	ldr	r1, [pc, #32]	; (8002ff4 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2239      	movs	r2, #57	; 0x39
 8002fdc:	2101      	movs	r1, #1
 8002fde:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2238      	movs	r2, #56	; 0x38
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b002      	add	sp, #8
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	ffffbfff 	.word	0xffffbfff

08002ff8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	b002      	add	sp, #8
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b002      	add	sp, #8
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b002      	add	sp, #8
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003040:	46c0      	nop			; (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	b002      	add	sp, #8
 8003046:	bd80      	pop	{r7, pc}

08003048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	05db      	lsls	r3, r3, #23
 800305e:	429a      	cmp	r2, r3
 8003060:	d00b      	beq.n	800307a <TIM_Base_SetConfig+0x32>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a23      	ldr	r2, [pc, #140]	; (80030f4 <TIM_Base_SetConfig+0xac>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <TIM_Base_SetConfig+0x32>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a22      	ldr	r2, [pc, #136]	; (80030f8 <TIM_Base_SetConfig+0xb0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d003      	beq.n	800307a <TIM_Base_SetConfig+0x32>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a21      	ldr	r2, [pc, #132]	; (80030fc <TIM_Base_SetConfig+0xb4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d108      	bne.n	800308c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2270      	movs	r2, #112	; 0x70
 800307e:	4393      	bics	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4313      	orrs	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	2380      	movs	r3, #128	; 0x80
 8003090:	05db      	lsls	r3, r3, #23
 8003092:	429a      	cmp	r2, r3
 8003094:	d00b      	beq.n	80030ae <TIM_Base_SetConfig+0x66>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <TIM_Base_SetConfig+0xac>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d007      	beq.n	80030ae <TIM_Base_SetConfig+0x66>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <TIM_Base_SetConfig+0xb0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d003      	beq.n	80030ae <TIM_Base_SetConfig+0x66>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a14      	ldr	r2, [pc, #80]	; (80030fc <TIM_Base_SetConfig+0xb4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d108      	bne.n	80030c0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4a13      	ldr	r2, [pc, #76]	; (8003100 <TIM_Base_SetConfig+0xb8>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	4393      	bics	r3, r2
 80030c6:	001a      	movs	r2, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	615a      	str	r2, [r3, #20]
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b004      	add	sp, #16
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40010800 	.word	0x40010800
 80030fc:	40011400 	.word	0x40011400
 8003100:	fffffcff 	.word	0xfffffcff

08003104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	2201      	movs	r2, #1
 8003114:	4393      	bics	r3, r2
 8003116:	001a      	movs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2270      	movs	r2, #112	; 0x70
 8003132:	4393      	bics	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2203      	movs	r2, #3
 800313a:	4393      	bics	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2202      	movs	r2, #2
 800314c:	4393      	bics	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	621a      	str	r2, [r3, #32]
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	b006      	add	sp, #24
 800317a:	bd80      	pop	{r7, pc}

0800317c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	2210      	movs	r2, #16
 800318c:	4393      	bics	r3, r2
 800318e:	001a      	movs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <TIM_OC2_SetConfig+0x7c>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4a12      	ldr	r2, [pc, #72]	; (80031fc <TIM_OC2_SetConfig+0x80>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2220      	movs	r2, #32
 80031c6:	4393      	bics	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	621a      	str	r2, [r3, #32]
}
 80031f0:	46c0      	nop			; (mov r8, r8)
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b006      	add	sp, #24
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	ffff8fff 	.word	0xffff8fff
 80031fc:	fffffcff 	.word	0xfffffcff

08003200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4a1a      	ldr	r2, [pc, #104]	; (8003278 <TIM_OC3_SetConfig+0x78>)
 8003210:	401a      	ands	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2270      	movs	r2, #112	; 0x70
 800322c:	4393      	bics	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2203      	movs	r2, #3
 8003234:	4393      	bics	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	4a0d      	ldr	r2, [pc, #52]	; (800327c <TIM_OC3_SetConfig+0x7c>)
 8003246:	4013      	ands	r3, r2
 8003248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	621a      	str	r2, [r3, #32]
}
 8003270:	46c0      	nop			; (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	b006      	add	sp, #24
 8003276:	bd80      	pop	{r7, pc}
 8003278:	fffffeff 	.word	0xfffffeff
 800327c:	fffffdff 	.word	0xfffffdff

08003280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <TIM_OC4_SetConfig+0x7c>)
 8003290:	401a      	ands	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4a15      	ldr	r2, [pc, #84]	; (8003300 <TIM_OC4_SetConfig+0x80>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a14      	ldr	r2, [pc, #80]	; (8003304 <TIM_OC4_SetConfig+0x84>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	4a10      	ldr	r2, [pc, #64]	; (8003308 <TIM_OC4_SetConfig+0x88>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	031b      	lsls	r3, r3, #12
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	621a      	str	r2, [r3, #32]
}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b006      	add	sp, #24
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	ffffefff 	.word	0xffffefff
 8003300:	ffff8fff 	.word	0xffff8fff
 8003304:	fffffcff 	.word	0xfffffcff
 8003308:	ffffdfff 	.word	0xffffdfff

0800330c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2270      	movs	r2, #112	; 0x70
 8003322:	4393      	bics	r3, r2
 8003324:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2207      	movs	r2, #7
 8003334:	4393      	bics	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b30      	cmp	r3, #48	; 0x30
 8003350:	d05a      	beq.n	8003408 <TIM_SlaveTimer_SetConfig+0xfc>
 8003352:	d806      	bhi.n	8003362 <TIM_SlaveTimer_SetConfig+0x56>
 8003354:	2b10      	cmp	r3, #16
 8003356:	d057      	beq.n	8003408 <TIM_SlaveTimer_SetConfig+0xfc>
 8003358:	2b20      	cmp	r3, #32
 800335a:	d055      	beq.n	8003408 <TIM_SlaveTimer_SetConfig+0xfc>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d053      	beq.n	8003408 <TIM_SlaveTimer_SetConfig+0xfc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8003360:	e053      	b.n	800340a <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8003362:	2b50      	cmp	r3, #80	; 0x50
 8003364:	d03c      	beq.n	80033e0 <TIM_SlaveTimer_SetConfig+0xd4>
 8003366:	d802      	bhi.n	800336e <TIM_SlaveTimer_SetConfig+0x62>
 8003368:	2b40      	cmp	r3, #64	; 0x40
 800336a:	d010      	beq.n	800338e <TIM_SlaveTimer_SetConfig+0x82>
      break;
 800336c:	e04d      	b.n	800340a <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 800336e:	2b60      	cmp	r3, #96	; 0x60
 8003370:	d040      	beq.n	80033f4 <TIM_SlaveTimer_SetConfig+0xe8>
 8003372:	2b70      	cmp	r3, #112	; 0x70
 8003374:	d000      	beq.n	8003378 <TIM_SlaveTimer_SetConfig+0x6c>
      break;
 8003376:	e048      	b.n	800340a <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	68d9      	ldr	r1, [r3, #12]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f000 f8be 	bl	8003508 <TIM_ETR_SetConfig>
      break;
 800338c:	e03d      	b.n	800340a <TIM_SlaveTimer_SetConfig+0xfe>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b05      	cmp	r3, #5
 8003394:	d101      	bne.n	800339a <TIM_SlaveTimer_SetConfig+0x8e>
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e038      	b.n	800340c <TIM_SlaveTimer_SetConfig+0x100>
      tmpccer = htim->Instance->CCER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6a1a      	ldr	r2, [r3, #32]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2101      	movs	r1, #1
 80033ae:	438a      	bics	r2, r1
 80033b0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	22f0      	movs	r2, #240	; 0xf0
 80033be:	4393      	bics	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	621a      	str	r2, [r3, #32]
      break;
 80033de:	e014      	b.n	800340a <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	6899      	ldr	r1, [r3, #8]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	001a      	movs	r2, r3
 80033ee:	f000 f811 	bl	8003414 <TIM_TI1_ConfigInputStage>
      break;
 80033f2:	e00a      	b.n	800340a <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	6899      	ldr	r1, [r3, #8]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	001a      	movs	r2, r3
 8003402:	f000 f835 	bl	8003470 <TIM_TI2_ConfigInputStage>
      break;
 8003406:	e000      	b.n	800340a <TIM_SlaveTimer_SetConfig+0xfe>
      break;
 8003408:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b006      	add	sp, #24
 8003412:	bd80      	pop	{r7, pc}

08003414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	2201      	movs	r2, #1
 800342c:	4393      	bics	r3, r2
 800342e:	001a      	movs	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	22f0      	movs	r2, #240	; 0xf0
 800343e:	4393      	bics	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	220a      	movs	r2, #10
 8003450:	4393      	bics	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	621a      	str	r2, [r3, #32]
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b006      	add	sp, #24
 800346e:	bd80      	pop	{r7, pc}

08003470 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	2210      	movs	r2, #16
 8003482:	4393      	bics	r3, r2
 8003484:	001a      	movs	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	4a0d      	ldr	r2, [pc, #52]	; (80034d0 <TIM_TI2_ConfigInputStage+0x60>)
 800349a:	4013      	ands	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	031b      	lsls	r3, r3, #12
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	22a0      	movs	r2, #160	; 0xa0
 80034ac:	4393      	bics	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	621a      	str	r2, [r3, #32]
}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b006      	add	sp, #24
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	ffff0fff 	.word	0xffff0fff

080034d4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2270      	movs	r2, #112	; 0x70
 80034e8:	4393      	bics	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	2207      	movs	r2, #7
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	609a      	str	r2, [r3, #8]
}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b004      	add	sp, #16
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	4a09      	ldr	r2, [pc, #36]	; (8003544 <TIM_ETR_SetConfig+0x3c>)
 8003520:	4013      	ands	r3, r2
 8003522:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	021a      	lsls	r2, r3, #8
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	431a      	orrs	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4313      	orrs	r3, r2
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	609a      	str	r2, [r3, #8]
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b006      	add	sp, #24
 8003542:	bd80      	pop	{r7, pc}
 8003544:	ffff00ff 	.word	0xffff00ff

08003548 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	221f      	movs	r2, #31
 8003558:	4013      	ands	r3, r2
 800355a:	2201      	movs	r2, #1
 800355c:	409a      	lsls	r2, r3
 800355e:	0013      	movs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	43d2      	mvns	r2, r2
 800356a:	401a      	ands	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	211f      	movs	r1, #31
 8003578:	400b      	ands	r3, r1
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4099      	lsls	r1, r3
 800357e:	000b      	movs	r3, r1
 8003580:	431a      	orrs	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	621a      	str	r2, [r3, #32]
}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	46bd      	mov	sp, r7
 800358a:	b006      	add	sp, #24
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2238      	movs	r2, #56	; 0x38
 800359c:	5c9b      	ldrb	r3, [r3, r2]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e032      	b.n	800360c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2238      	movs	r2, #56	; 0x38
 80035aa:	2101      	movs	r1, #1
 80035ac:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2239      	movs	r2, #57	; 0x39
 80035b2:	2102      	movs	r1, #2
 80035b4:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2270      	movs	r2, #112	; 0x70
 80035ca:	4393      	bics	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2280      	movs	r2, #128	; 0x80
 80035dc:	4393      	bics	r3, r2
 80035de:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2239      	movs	r2, #57	; 0x39
 80035fe:	2101      	movs	r1, #1
 8003600:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2238      	movs	r2, #56	; 0x38
 8003606:	2100      	movs	r1, #0
 8003608:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b004      	add	sp, #16
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2238      	movs	r2, #56	; 0x38
 8003622:	5c9b      	ldrb	r3, [r3, r2]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_TIMEx_RemapConfig+0x18>
 8003628:	2302      	movs	r3, #2
 800362a:	e00c      	b.n	8003646 <HAL_TIMEx_RemapConfig+0x32>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2238      	movs	r2, #56	; 0x38
 8003630:	2101      	movs	r1, #1
 8003632:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2238      	movs	r2, #56	; 0x38
 8003640:	2100      	movs	r1, #0
 8003642:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b002      	add	sp, #8
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e044      	b.n	80036ec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2270      	movs	r2, #112	; 0x70
 800366e:	2100      	movs	r1, #0
 8003670:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0018      	movs	r0, r3
 8003676:	f001 ff8f 	bl	8005598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2224      	movs	r2, #36	; 0x24
 800367e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2101      	movs	r1, #1
 800368c:	438a      	bics	r2, r1
 800368e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	0018      	movs	r0, r3
 8003694:	f000 f8d8 	bl	8003848 <UART_SetConfig>
 8003698:	0003      	movs	r3, r0
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e024      	b.n	80036ec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 fbff 	bl	8003eb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	490d      	ldr	r1, [pc, #52]	; (80036f4 <HAL_UART_Init+0xa4>)
 80036be:	400a      	ands	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	212a      	movs	r1, #42	; 0x2a
 80036ce:	438a      	bics	r2, r1
 80036d0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2101      	movs	r1, #1
 80036de:	430a      	orrs	r2, r1
 80036e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f000 fc97 	bl	8004018 <UART_CheckIdleState>
 80036ea:	0003      	movs	r3, r0
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	ffffb7ff 	.word	0xffffb7ff

080036f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	; 0x28
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	1dbb      	adds	r3, r7, #6
 8003706:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370c:	2b20      	cmp	r3, #32
 800370e:	d000      	beq.n	8003712 <HAL_UART_Transmit+0x1a>
 8003710:	e094      	b.n	800383c <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_UART_Transmit+0x28>
 8003718:	1dbb      	adds	r3, r7, #6
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e08c      	b.n	800383e <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	015b      	lsls	r3, r3, #5
 800372c:	429a      	cmp	r2, r3
 800372e:	d109      	bne.n	8003744 <HAL_UART_Transmit+0x4c>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d105      	bne.n	8003744 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2201      	movs	r2, #1
 800373c:	4013      	ands	r3, r2
 800373e:	d001      	beq.n	8003744 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e07c      	b.n	800383e <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2270      	movs	r2, #112	; 0x70
 8003748:	5c9b      	ldrb	r3, [r3, r2]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_UART_Transmit+0x5a>
 800374e:	2302      	movs	r3, #2
 8003750:	e075      	b.n	800383e <HAL_UART_Transmit+0x146>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2270      	movs	r2, #112	; 0x70
 8003756:	2101      	movs	r1, #1
 8003758:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2221      	movs	r2, #33	; 0x21
 8003764:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003766:	f7fd fa41 	bl	8000bec <HAL_GetTick>
 800376a:	0003      	movs	r3, r0
 800376c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1dba      	adds	r2, r7, #6
 8003772:	2150      	movs	r1, #80	; 0x50
 8003774:	8812      	ldrh	r2, [r2, #0]
 8003776:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1dba      	adds	r2, r7, #6
 800377c:	2152      	movs	r1, #82	; 0x52
 800377e:	8812      	ldrh	r2, [r2, #0]
 8003780:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	015b      	lsls	r3, r3, #5
 800378a:	429a      	cmp	r2, r3
 800378c:	d108      	bne.n	80037a0 <HAL_UART_Transmit+0xa8>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	e003      	b.n	80037a8 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037a8:	e02c      	b.n	8003804 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	0013      	movs	r3, r2
 80037b4:	2200      	movs	r2, #0
 80037b6:	2180      	movs	r1, #128	; 0x80
 80037b8:	f000 fc74 	bl	80040a4 <UART_WaitOnFlagUntilTimeout>
 80037bc:	1e03      	subs	r3, r0, #0
 80037be:	d001      	beq.n	80037c4 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e03c      	b.n	800383e <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10b      	bne.n	80037e2 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	001a      	movs	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	05d2      	lsls	r2, r2, #23
 80037d6:	0dd2      	lsrs	r2, r2, #23
 80037d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	3302      	adds	r3, #2
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	e007      	b.n	80037f2 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	3301      	adds	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2252      	movs	r2, #82	; 0x52
 80037f6:	5a9b      	ldrh	r3, [r3, r2]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b299      	uxth	r1, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2252      	movs	r2, #82	; 0x52
 8003802:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2252      	movs	r2, #82	; 0x52
 8003808:	5a9b      	ldrh	r3, [r3, r2]
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1cc      	bne.n	80037aa <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	0013      	movs	r3, r2
 800381a:	2200      	movs	r2, #0
 800381c:	2140      	movs	r1, #64	; 0x40
 800381e:	f000 fc41 	bl	80040a4 <UART_WaitOnFlagUntilTimeout>
 8003822:	1e03      	subs	r3, r0, #0
 8003824:	d001      	beq.n	800382a <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e009      	b.n	800383e <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2270      	movs	r2, #112	; 0x70
 8003834:	2100      	movs	r1, #0
 8003836:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	e000      	b.n	800383e <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 800383c:	2302      	movs	r3, #2
  }
}
 800383e:	0018      	movs	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	b008      	add	sp, #32
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003848:	b5b0      	push	{r4, r5, r7, lr}
 800384a:	b08e      	sub	sp, #56	; 0x38
 800384c:	af00      	add	r7, sp, #0
 800384e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003850:	231b      	movs	r3, #27
 8003852:	2218      	movs	r2, #24
 8003854:	4694      	mov	ip, r2
 8003856:	44bc      	add	ip, r7
 8003858:	4463      	add	r3, ip
 800385a:	2210      	movs	r2, #16
 800385c:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800385e:	2300      	movs	r3, #0
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8003862:	2313      	movs	r3, #19
 8003864:	2218      	movs	r2, #24
 8003866:	4694      	mov	ip, r2
 8003868:	44bc      	add	ip, r7
 800386a:	4463      	add	r3, ip
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003870:	2300      	movs	r3, #0
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	431a      	orrs	r2, r3
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	431a      	orrs	r2, r3
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	4313      	orrs	r3, r2
 800388a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4aca      	ldr	r2, [pc, #808]	; (8003bbc <UART_SetConfig+0x374>)
 8003894:	4013      	ands	r3, r2
 8003896:	0019      	movs	r1, r3
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800389e:	430a      	orrs	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	4ac5      	ldr	r2, [pc, #788]	; (8003bc0 <UART_SetConfig+0x378>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	0019      	movs	r1, r3
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4abf      	ldr	r2, [pc, #764]	; (8003bc4 <UART_SetConfig+0x37c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038d0:	4313      	orrs	r3, r2
 80038d2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	4abb      	ldr	r2, [pc, #748]	; (8003bc8 <UART_SetConfig+0x380>)
 80038dc:	4013      	ands	r3, r2
 80038de:	0019      	movs	r1, r3
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038e6:	430a      	orrs	r2, r1
 80038e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4ab7      	ldr	r2, [pc, #732]	; (8003bcc <UART_SetConfig+0x384>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d134      	bne.n	800395e <UART_SetConfig+0x116>
 80038f4:	4bb6      	ldr	r3, [pc, #728]	; (8003bd0 <UART_SetConfig+0x388>)
 80038f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f8:	2203      	movs	r2, #3
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d015      	beq.n	800392c <UART_SetConfig+0xe4>
 8003900:	d304      	bcc.n	800390c <UART_SetConfig+0xc4>
 8003902:	2b02      	cmp	r3, #2
 8003904:	d00a      	beq.n	800391c <UART_SetConfig+0xd4>
 8003906:	2b03      	cmp	r3, #3
 8003908:	d018      	beq.n	800393c <UART_SetConfig+0xf4>
 800390a:	e01f      	b.n	800394c <UART_SetConfig+0x104>
 800390c:	231b      	movs	r3, #27
 800390e:	2218      	movs	r2, #24
 8003910:	4694      	mov	ip, r2
 8003912:	44bc      	add	ip, r7
 8003914:	4463      	add	r3, ip
 8003916:	2201      	movs	r2, #1
 8003918:	701a      	strb	r2, [r3, #0]
 800391a:	e0c5      	b.n	8003aa8 <UART_SetConfig+0x260>
 800391c:	231b      	movs	r3, #27
 800391e:	2218      	movs	r2, #24
 8003920:	4694      	mov	ip, r2
 8003922:	44bc      	add	ip, r7
 8003924:	4463      	add	r3, ip
 8003926:	2202      	movs	r2, #2
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e0bd      	b.n	8003aa8 <UART_SetConfig+0x260>
 800392c:	231b      	movs	r3, #27
 800392e:	2218      	movs	r2, #24
 8003930:	4694      	mov	ip, r2
 8003932:	44bc      	add	ip, r7
 8003934:	4463      	add	r3, ip
 8003936:	2204      	movs	r2, #4
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	e0b5      	b.n	8003aa8 <UART_SetConfig+0x260>
 800393c:	231b      	movs	r3, #27
 800393e:	2218      	movs	r2, #24
 8003940:	4694      	mov	ip, r2
 8003942:	44bc      	add	ip, r7
 8003944:	4463      	add	r3, ip
 8003946:	2208      	movs	r2, #8
 8003948:	701a      	strb	r2, [r3, #0]
 800394a:	e0ad      	b.n	8003aa8 <UART_SetConfig+0x260>
 800394c:	231b      	movs	r3, #27
 800394e:	2218      	movs	r2, #24
 8003950:	4694      	mov	ip, r2
 8003952:	44bc      	add	ip, r7
 8003954:	4463      	add	r3, ip
 8003956:	2210      	movs	r2, #16
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	e0a4      	b.n	8003aa8 <UART_SetConfig+0x260>
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a9c      	ldr	r2, [pc, #624]	; (8003bd4 <UART_SetConfig+0x38c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d137      	bne.n	80039d8 <UART_SetConfig+0x190>
 8003968:	4b99      	ldr	r3, [pc, #612]	; (8003bd0 <UART_SetConfig+0x388>)
 800396a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396c:	220c      	movs	r2, #12
 800396e:	4013      	ands	r3, r2
 8003970:	2b04      	cmp	r3, #4
 8003972:	d018      	beq.n	80039a6 <UART_SetConfig+0x15e>
 8003974:	d802      	bhi.n	800397c <UART_SetConfig+0x134>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <UART_SetConfig+0x13e>
 800397a:	e024      	b.n	80039c6 <UART_SetConfig+0x17e>
 800397c:	2b08      	cmp	r3, #8
 800397e:	d00a      	beq.n	8003996 <UART_SetConfig+0x14e>
 8003980:	2b0c      	cmp	r3, #12
 8003982:	d018      	beq.n	80039b6 <UART_SetConfig+0x16e>
 8003984:	e01f      	b.n	80039c6 <UART_SetConfig+0x17e>
 8003986:	231b      	movs	r3, #27
 8003988:	2218      	movs	r2, #24
 800398a:	4694      	mov	ip, r2
 800398c:	44bc      	add	ip, r7
 800398e:	4463      	add	r3, ip
 8003990:	2200      	movs	r2, #0
 8003992:	701a      	strb	r2, [r3, #0]
 8003994:	e088      	b.n	8003aa8 <UART_SetConfig+0x260>
 8003996:	231b      	movs	r3, #27
 8003998:	2218      	movs	r2, #24
 800399a:	4694      	mov	ip, r2
 800399c:	44bc      	add	ip, r7
 800399e:	4463      	add	r3, ip
 80039a0:	2202      	movs	r2, #2
 80039a2:	701a      	strb	r2, [r3, #0]
 80039a4:	e080      	b.n	8003aa8 <UART_SetConfig+0x260>
 80039a6:	231b      	movs	r3, #27
 80039a8:	2218      	movs	r2, #24
 80039aa:	4694      	mov	ip, r2
 80039ac:	44bc      	add	ip, r7
 80039ae:	4463      	add	r3, ip
 80039b0:	2204      	movs	r2, #4
 80039b2:	701a      	strb	r2, [r3, #0]
 80039b4:	e078      	b.n	8003aa8 <UART_SetConfig+0x260>
 80039b6:	231b      	movs	r3, #27
 80039b8:	2218      	movs	r2, #24
 80039ba:	4694      	mov	ip, r2
 80039bc:	44bc      	add	ip, r7
 80039be:	4463      	add	r3, ip
 80039c0:	2208      	movs	r2, #8
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	e070      	b.n	8003aa8 <UART_SetConfig+0x260>
 80039c6:	231b      	movs	r3, #27
 80039c8:	2218      	movs	r2, #24
 80039ca:	4694      	mov	ip, r2
 80039cc:	44bc      	add	ip, r7
 80039ce:	4463      	add	r3, ip
 80039d0:	2210      	movs	r2, #16
 80039d2:	701a      	strb	r2, [r3, #0]
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	e067      	b.n	8003aa8 <UART_SetConfig+0x260>
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a7e      	ldr	r2, [pc, #504]	; (8003bd8 <UART_SetConfig+0x390>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d107      	bne.n	80039f2 <UART_SetConfig+0x1aa>
 80039e2:	231b      	movs	r3, #27
 80039e4:	2218      	movs	r2, #24
 80039e6:	4694      	mov	ip, r2
 80039e8:	44bc      	add	ip, r7
 80039ea:	4463      	add	r3, ip
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	e05a      	b.n	8003aa8 <UART_SetConfig+0x260>
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a79      	ldr	r2, [pc, #484]	; (8003bdc <UART_SetConfig+0x394>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d107      	bne.n	8003a0c <UART_SetConfig+0x1c4>
 80039fc:	231b      	movs	r3, #27
 80039fe:	2218      	movs	r2, #24
 8003a00:	4694      	mov	ip, r2
 8003a02:	44bc      	add	ip, r7
 8003a04:	4463      	add	r3, ip
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
 8003a0a:	e04d      	b.n	8003aa8 <UART_SetConfig+0x260>
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a6c      	ldr	r2, [pc, #432]	; (8003bc4 <UART_SetConfig+0x37c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d141      	bne.n	8003a9a <UART_SetConfig+0x252>
 8003a16:	4b6e      	ldr	r3, [pc, #440]	; (8003bd0 <UART_SetConfig+0x388>)
 8003a18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a1a:	23c0      	movs	r3, #192	; 0xc0
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2280      	movs	r2, #128	; 0x80
 8003a22:	00d2      	lsls	r2, r2, #3
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d01f      	beq.n	8003a68 <UART_SetConfig+0x220>
 8003a28:	2280      	movs	r2, #128	; 0x80
 8003a2a:	00d2      	lsls	r2, r2, #3
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d802      	bhi.n	8003a36 <UART_SetConfig+0x1ee>
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d009      	beq.n	8003a48 <UART_SetConfig+0x200>
 8003a34:	e028      	b.n	8003a88 <UART_SetConfig+0x240>
 8003a36:	2280      	movs	r2, #128	; 0x80
 8003a38:	0112      	lsls	r2, r2, #4
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00c      	beq.n	8003a58 <UART_SetConfig+0x210>
 8003a3e:	22c0      	movs	r2, #192	; 0xc0
 8003a40:	0112      	lsls	r2, r2, #4
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d018      	beq.n	8003a78 <UART_SetConfig+0x230>
 8003a46:	e01f      	b.n	8003a88 <UART_SetConfig+0x240>
 8003a48:	231b      	movs	r3, #27
 8003a4a:	2218      	movs	r2, #24
 8003a4c:	4694      	mov	ip, r2
 8003a4e:	44bc      	add	ip, r7
 8003a50:	4463      	add	r3, ip
 8003a52:	2200      	movs	r2, #0
 8003a54:	701a      	strb	r2, [r3, #0]
 8003a56:	e027      	b.n	8003aa8 <UART_SetConfig+0x260>
 8003a58:	231b      	movs	r3, #27
 8003a5a:	2218      	movs	r2, #24
 8003a5c:	4694      	mov	ip, r2
 8003a5e:	44bc      	add	ip, r7
 8003a60:	4463      	add	r3, ip
 8003a62:	2202      	movs	r2, #2
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	e01f      	b.n	8003aa8 <UART_SetConfig+0x260>
 8003a68:	231b      	movs	r3, #27
 8003a6a:	2218      	movs	r2, #24
 8003a6c:	4694      	mov	ip, r2
 8003a6e:	44bc      	add	ip, r7
 8003a70:	4463      	add	r3, ip
 8003a72:	2204      	movs	r2, #4
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	e017      	b.n	8003aa8 <UART_SetConfig+0x260>
 8003a78:	231b      	movs	r3, #27
 8003a7a:	2218      	movs	r2, #24
 8003a7c:	4694      	mov	ip, r2
 8003a7e:	44bc      	add	ip, r7
 8003a80:	4463      	add	r3, ip
 8003a82:	2208      	movs	r2, #8
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	e00f      	b.n	8003aa8 <UART_SetConfig+0x260>
 8003a88:	231b      	movs	r3, #27
 8003a8a:	2218      	movs	r2, #24
 8003a8c:	4694      	mov	ip, r2
 8003a8e:	44bc      	add	ip, r7
 8003a90:	4463      	add	r3, ip
 8003a92:	2210      	movs	r2, #16
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	e006      	b.n	8003aa8 <UART_SetConfig+0x260>
 8003a9a:	231b      	movs	r3, #27
 8003a9c:	2218      	movs	r2, #24
 8003a9e:	4694      	mov	ip, r2
 8003aa0:	44bc      	add	ip, r7
 8003aa2:	4463      	add	r3, ip
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a45      	ldr	r2, [pc, #276]	; (8003bc4 <UART_SetConfig+0x37c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d000      	beq.n	8003ab4 <UART_SetConfig+0x26c>
 8003ab2:	e09d      	b.n	8003bf0 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ab4:	231b      	movs	r3, #27
 8003ab6:	2218      	movs	r2, #24
 8003ab8:	4694      	mov	ip, r2
 8003aba:	44bc      	add	ip, r7
 8003abc:	4463      	add	r3, ip
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d00d      	beq.n	8003ae0 <UART_SetConfig+0x298>
 8003ac4:	dc02      	bgt.n	8003acc <UART_SetConfig+0x284>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <UART_SetConfig+0x28e>
 8003aca:	e01d      	b.n	8003b08 <UART_SetConfig+0x2c0>
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d012      	beq.n	8003af6 <UART_SetConfig+0x2ae>
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d015      	beq.n	8003b00 <UART_SetConfig+0x2b8>
 8003ad4:	e018      	b.n	8003b08 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003ad6:	f7fe fc69 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8003ada:	0003      	movs	r3, r0
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ade:	e01b      	b.n	8003b18 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ae0:	4b3b      	ldr	r3, [pc, #236]	; (8003bd0 <UART_SetConfig+0x388>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d002      	beq.n	8003af0 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8003aea:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <UART_SetConfig+0x398>)
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8003aee:	e013      	b.n	8003b18 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003af0:	4b3c      	ldr	r3, [pc, #240]	; (8003be4 <UART_SetConfig+0x39c>)
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003af4:	e010      	b.n	8003b18 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003af6:	f7fe fbcb 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8003afa:	0003      	movs	r3, r0
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003afe:	e00b      	b.n	8003b18 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003b00:	2380      	movs	r3, #128	; 0x80
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b06:	e007      	b.n	8003b18 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003b08:	2313      	movs	r3, #19
 8003b0a:	2218      	movs	r2, #24
 8003b0c:	4694      	mov	ip, r2
 8003b0e:	44bc      	add	ip, r7
 8003b10:	4463      	add	r3, ip
 8003b12:	2201      	movs	r2, #1
 8003b14:	701a      	strb	r2, [r3, #0]
        break;
 8003b16:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d100      	bne.n	8003b20 <UART_SetConfig+0x2d8>
 8003b1e:	e1a6      	b.n	8003e6e <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	0013      	movs	r3, r2
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	189b      	adds	r3, r3, r2
 8003b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d305      	bcc.n	8003b3c <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d907      	bls.n	8003b4c <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8003b3c:	2313      	movs	r3, #19
 8003b3e:	2218      	movs	r2, #24
 8003b40:	4694      	mov	ip, r2
 8003b42:	44bc      	add	ip, r7
 8003b44:	4463      	add	r3, ip
 8003b46:	2201      	movs	r2, #1
 8003b48:	701a      	strb	r2, [r3, #0]
 8003b4a:	e190      	b.n	8003e6e <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	6939      	ldr	r1, [r7, #16]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	000b      	movs	r3, r1
 8003b5a:	0e1b      	lsrs	r3, r3, #24
 8003b5c:	0010      	movs	r0, r2
 8003b5e:	0205      	lsls	r5, r0, #8
 8003b60:	431d      	orrs	r5, r3
 8003b62:	000b      	movs	r3, r1
 8003b64:	021c      	lsls	r4, r3, #8
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	085b      	lsrs	r3, r3, #1
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	68b8      	ldr	r0, [r7, #8]
 8003b74:	68f9      	ldr	r1, [r7, #12]
 8003b76:	1900      	adds	r0, r0, r4
 8003b78:	4169      	adcs	r1, r5
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	2300      	movs	r3, #0
 8003b82:	607b      	str	r3, [r7, #4]
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f7fc fb88 	bl	800029c <__aeabi_uldivmod>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	000c      	movs	r4, r1
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b94:	4a14      	ldr	r2, [pc, #80]	; (8003be8 <UART_SetConfig+0x3a0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d908      	bls.n	8003bac <UART_SetConfig+0x364>
 8003b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9c:	4a13      	ldr	r2, [pc, #76]	; (8003bec <UART_SetConfig+0x3a4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d804      	bhi.n	8003bac <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	e160      	b.n	8003e6e <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8003bac:	2313      	movs	r3, #19
 8003bae:	2218      	movs	r2, #24
 8003bb0:	4694      	mov	ip, r2
 8003bb2:	44bc      	add	ip, r7
 8003bb4:	4463      	add	r3, ip
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	e158      	b.n	8003e6e <UART_SetConfig+0x626>
 8003bbc:	efff69f3 	.word	0xefff69f3
 8003bc0:	ffffcfff 	.word	0xffffcfff
 8003bc4:	40004800 	.word	0x40004800
 8003bc8:	fffff4ff 	.word	0xfffff4ff
 8003bcc:	40013800 	.word	0x40013800
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	40004400 	.word	0x40004400
 8003bd8:	40004c00 	.word	0x40004c00
 8003bdc:	40005000 	.word	0x40005000
 8003be0:	003d0900 	.word	0x003d0900
 8003be4:	00f42400 	.word	0x00f42400
 8003be8:	000002ff 	.word	0x000002ff
 8003bec:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d000      	beq.n	8003bfe <UART_SetConfig+0x3b6>
 8003bfc:	e0a9      	b.n	8003d52 <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8003bfe:	231b      	movs	r3, #27
 8003c00:	2218      	movs	r2, #24
 8003c02:	4694      	mov	ip, r2
 8003c04:	44bc      	add	ip, r7
 8003c06:	4463      	add	r3, ip
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d86d      	bhi.n	8003cea <UART_SetConfig+0x4a2>
 8003c0e:	009a      	lsls	r2, r3, #2
 8003c10:	4b9f      	ldr	r3, [pc, #636]	; (8003e90 <UART_SetConfig+0x648>)
 8003c12:	18d3      	adds	r3, r2, r3
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003c18:	f7fe fbc8 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	005a      	lsls	r2, r3, #1
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	085b      	lsrs	r3, r3, #1
 8003c26:	18d2      	adds	r2, r2, r3
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	0010      	movs	r0, r2
 8003c30:	f7fc fa6a 	bl	8000108 <__udivsi3>
 8003c34:	0003      	movs	r3, r0
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c3a:	e05e      	b.n	8003cfa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003c3c:	f7fe fbcc 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8003c40:	0003      	movs	r3, r0
 8003c42:	005a      	lsls	r2, r3, #1
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	18d2      	adds	r2, r2, r3
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	0019      	movs	r1, r3
 8003c52:	0010      	movs	r0, r2
 8003c54:	f7fc fa58 	bl	8000108 <__udivsi3>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c5e:	e04c      	b.n	8003cfa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c60:	4b8c      	ldr	r3, [pc, #560]	; (8003e94 <UART_SetConfig+0x64c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2210      	movs	r2, #16
 8003c66:	4013      	ands	r3, r2
 8003c68:	d00e      	beq.n	8003c88 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	4a89      	ldr	r2, [pc, #548]	; (8003e98 <UART_SetConfig+0x650>)
 8003c72:	189a      	adds	r2, r3, r2
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	0019      	movs	r1, r3
 8003c7a:	0010      	movs	r0, r2
 8003c7c:	f7fc fa44 	bl	8000108 <__udivsi3>
 8003c80:	0003      	movs	r3, r0
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003c86:	e038      	b.n	8003cfa <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	4a83      	ldr	r2, [pc, #524]	; (8003e9c <UART_SetConfig+0x654>)
 8003c90:	189a      	adds	r2, r3, r2
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	0019      	movs	r1, r3
 8003c98:	0010      	movs	r0, r2
 8003c9a:	f7fc fa35 	bl	8000108 <__udivsi3>
 8003c9e:	0003      	movs	r3, r0
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ca4:	e029      	b.n	8003cfa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003ca6:	f7fe faf3 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8003caa:	0003      	movs	r3, r0
 8003cac:	005a      	lsls	r2, r3, #1
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	18d2      	adds	r2, r2, r3
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	0019      	movs	r1, r3
 8003cbc:	0010      	movs	r0, r2
 8003cbe:	f7fc fa23 	bl	8000108 <__udivsi3>
 8003cc2:	0003      	movs	r3, r0
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003cc8:	e017      	b.n	8003cfa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	2280      	movs	r2, #128	; 0x80
 8003cd2:	0252      	lsls	r2, r2, #9
 8003cd4:	189a      	adds	r2, r3, r2
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	0019      	movs	r1, r3
 8003cdc:	0010      	movs	r0, r2
 8003cde:	f7fc fa13 	bl	8000108 <__udivsi3>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ce8:	e007      	b.n	8003cfa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003cea:	2313      	movs	r3, #19
 8003cec:	2218      	movs	r2, #24
 8003cee:	4694      	mov	ip, r2
 8003cf0:	44bc      	add	ip, r7
 8003cf2:	4463      	add	r3, ip
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
        break;
 8003cf8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfc:	2b0f      	cmp	r3, #15
 8003cfe:	d920      	bls.n	8003d42 <UART_SetConfig+0x4fa>
 8003d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d02:	4a67      	ldr	r2, [pc, #412]	; (8003ea0 <UART_SetConfig+0x658>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d81c      	bhi.n	8003d42 <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	200a      	movs	r0, #10
 8003d0e:	2418      	movs	r4, #24
 8003d10:	193b      	adds	r3, r7, r4
 8003d12:	181b      	adds	r3, r3, r0
 8003d14:	210f      	movs	r1, #15
 8003d16:	438a      	bics	r2, r1
 8003d18:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	085b      	lsrs	r3, r3, #1
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2207      	movs	r2, #7
 8003d22:	4013      	ands	r3, r2
 8003d24:	b299      	uxth	r1, r3
 8003d26:	193b      	adds	r3, r7, r4
 8003d28:	181b      	adds	r3, r3, r0
 8003d2a:	193a      	adds	r2, r7, r4
 8003d2c:	1812      	adds	r2, r2, r0
 8003d2e:	8812      	ldrh	r2, [r2, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	193a      	adds	r2, r7, r4
 8003d3a:	1812      	adds	r2, r2, r0
 8003d3c:	8812      	ldrh	r2, [r2, #0]
 8003d3e:	60da      	str	r2, [r3, #12]
 8003d40:	e095      	b.n	8003e6e <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8003d42:	2313      	movs	r3, #19
 8003d44:	2218      	movs	r2, #24
 8003d46:	4694      	mov	ip, r2
 8003d48:	44bc      	add	ip, r7
 8003d4a:	4463      	add	r3, ip
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	e08d      	b.n	8003e6e <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8003d52:	231b      	movs	r3, #27
 8003d54:	2218      	movs	r2, #24
 8003d56:	4694      	mov	ip, r2
 8003d58:	44bc      	add	ip, r7
 8003d5a:	4463      	add	r3, ip
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d86a      	bhi.n	8003e38 <UART_SetConfig+0x5f0>
 8003d62:	009a      	lsls	r2, r3, #2
 8003d64:	4b4f      	ldr	r3, [pc, #316]	; (8003ea4 <UART_SetConfig+0x65c>)
 8003d66:	18d3      	adds	r3, r2, r3
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003d6c:	f7fe fb1e 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8003d70:	0002      	movs	r2, r0
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	18d2      	adds	r2, r2, r3
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	0019      	movs	r1, r3
 8003d80:	0010      	movs	r0, r2
 8003d82:	f7fc f9c1 	bl	8000108 <__udivsi3>
 8003d86:	0003      	movs	r3, r0
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d8c:	e05c      	b.n	8003e48 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003d8e:	f7fe fb23 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8003d92:	0002      	movs	r2, r0
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	18d2      	adds	r2, r2, r3
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	0019      	movs	r1, r3
 8003da2:	0010      	movs	r0, r2
 8003da4:	f7fc f9b0 	bl	8000108 <__udivsi3>
 8003da8:	0003      	movs	r3, r0
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dae:	e04b      	b.n	8003e48 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003db0:	4b38      	ldr	r3, [pc, #224]	; (8003e94 <UART_SetConfig+0x64c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2210      	movs	r2, #16
 8003db6:	4013      	ands	r3, r2
 8003db8:	d00e      	beq.n	8003dd8 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	085b      	lsrs	r3, r3, #1
 8003dc0:	4a39      	ldr	r2, [pc, #228]	; (8003ea8 <UART_SetConfig+0x660>)
 8003dc2:	189a      	adds	r2, r3, r2
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	0019      	movs	r1, r3
 8003dca:	0010      	movs	r0, r2
 8003dcc:	f7fc f99c 	bl	8000108 <__udivsi3>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003dd6:	e037      	b.n	8003e48 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	4a33      	ldr	r2, [pc, #204]	; (8003eac <UART_SetConfig+0x664>)
 8003de0:	189a      	adds	r2, r3, r2
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	0019      	movs	r1, r3
 8003de8:	0010      	movs	r0, r2
 8003dea:	f7fc f98d 	bl	8000108 <__udivsi3>
 8003dee:	0003      	movs	r3, r0
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003df4:	e028      	b.n	8003e48 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003df6:	f7fe fa4b 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	18d2      	adds	r2, r2, r3
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	0019      	movs	r1, r3
 8003e0a:	0010      	movs	r0, r2
 8003e0c:	f7fc f97c 	bl	8000108 <__udivsi3>
 8003e10:	0003      	movs	r3, r0
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e16:	e017      	b.n	8003e48 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	2280      	movs	r2, #128	; 0x80
 8003e20:	0212      	lsls	r2, r2, #8
 8003e22:	189a      	adds	r2, r3, r2
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	0019      	movs	r1, r3
 8003e2a:	0010      	movs	r0, r2
 8003e2c:	f7fc f96c 	bl	8000108 <__udivsi3>
 8003e30:	0003      	movs	r3, r0
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e36:	e007      	b.n	8003e48 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003e38:	2313      	movs	r3, #19
 8003e3a:	2218      	movs	r2, #24
 8003e3c:	4694      	mov	ip, r2
 8003e3e:	44bc      	add	ip, r7
 8003e40:	4463      	add	r3, ip
 8003e42:	2201      	movs	r2, #1
 8003e44:	701a      	strb	r2, [r3, #0]
        break;
 8003e46:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	2b0f      	cmp	r3, #15
 8003e4c:	d908      	bls.n	8003e60 <UART_SetConfig+0x618>
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	4a13      	ldr	r2, [pc, #76]	; (8003ea0 <UART_SetConfig+0x658>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d804      	bhi.n	8003e60 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e5c:	60da      	str	r2, [r3, #12]
 8003e5e:	e006      	b.n	8003e6e <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8003e60:	2313      	movs	r3, #19
 8003e62:	2218      	movs	r2, #24
 8003e64:	4694      	mov	ip, r2
 8003e66:	44bc      	add	ip, r7
 8003e68:	4463      	add	r3, ip
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	2200      	movs	r2, #0
 8003e72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	2200      	movs	r2, #0
 8003e78:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003e7a:	2313      	movs	r3, #19
 8003e7c:	2218      	movs	r2, #24
 8003e7e:	4694      	mov	ip, r2
 8003e80:	44bc      	add	ip, r7
 8003e82:	4463      	add	r3, ip
 8003e84:	781b      	ldrb	r3, [r3, #0]
}
 8003e86:	0018      	movs	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b00e      	add	sp, #56	; 0x38
 8003e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	08006e64 	.word	0x08006e64
 8003e94:	40021000 	.word	0x40021000
 8003e98:	007a1200 	.word	0x007a1200
 8003e9c:	01e84800 	.word	0x01e84800
 8003ea0:	0000ffff 	.word	0x0000ffff
 8003ea4:	08006e88 	.word	0x08006e88
 8003ea8:	003d0900 	.word	0x003d0900
 8003eac:	00f42400 	.word	0x00f42400

08003eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d00b      	beq.n	8003eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4a4a      	ldr	r2, [pc, #296]	; (8003ff4 <UART_AdvFeatureConfig+0x144>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	0019      	movs	r1, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	2202      	movs	r2, #2
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d00b      	beq.n	8003efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4a43      	ldr	r2, [pc, #268]	; (8003ff8 <UART_AdvFeatureConfig+0x148>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	0019      	movs	r1, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	2204      	movs	r2, #4
 8003f02:	4013      	ands	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4a3b      	ldr	r2, [pc, #236]	; (8003ffc <UART_AdvFeatureConfig+0x14c>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	0019      	movs	r1, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	2208      	movs	r2, #8
 8003f24:	4013      	ands	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4a34      	ldr	r2, [pc, #208]	; (8004000 <UART_AdvFeatureConfig+0x150>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	0019      	movs	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	2210      	movs	r2, #16
 8003f46:	4013      	ands	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4a2c      	ldr	r2, [pc, #176]	; (8004004 <UART_AdvFeatureConfig+0x154>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	0019      	movs	r1, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	2220      	movs	r2, #32
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d00b      	beq.n	8003f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	4a25      	ldr	r2, [pc, #148]	; (8004008 <UART_AdvFeatureConfig+0x158>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	0019      	movs	r1, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	2240      	movs	r2, #64	; 0x40
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d01d      	beq.n	8003fca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a1d      	ldr	r2, [pc, #116]	; (800400c <UART_AdvFeatureConfig+0x15c>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	0019      	movs	r1, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	035b      	lsls	r3, r3, #13
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d10b      	bne.n	8003fca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a15      	ldr	r2, [pc, #84]	; (8004010 <UART_AdvFeatureConfig+0x160>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	0019      	movs	r1, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	2280      	movs	r2, #128	; 0x80
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d00b      	beq.n	8003fec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4a0e      	ldr	r2, [pc, #56]	; (8004014 <UART_AdvFeatureConfig+0x164>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	0019      	movs	r1, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	605a      	str	r2, [r3, #4]
  }
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b002      	add	sp, #8
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	fffdffff 	.word	0xfffdffff
 8003ff8:	fffeffff 	.word	0xfffeffff
 8003ffc:	fffbffff 	.word	0xfffbffff
 8004000:	ffff7fff 	.word	0xffff7fff
 8004004:	ffffefff 	.word	0xffffefff
 8004008:	ffffdfff 	.word	0xffffdfff
 800400c:	ffefffff 	.word	0xffefffff
 8004010:	ff9fffff 	.word	0xff9fffff
 8004014:	fff7ffff 	.word	0xfff7ffff

08004018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af02      	add	r7, sp, #8
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004026:	f7fc fde1 	bl	8000bec <HAL_GetTick>
 800402a:	0003      	movs	r3, r0
 800402c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2208      	movs	r2, #8
 8004036:	4013      	ands	r3, r2
 8004038:	2b08      	cmp	r3, #8
 800403a:	d10d      	bne.n	8004058 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	0399      	lsls	r1, r3, #14
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	4b16      	ldr	r3, [pc, #88]	; (80040a0 <UART_CheckIdleState+0x88>)
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	0013      	movs	r3, r2
 800404a:	2200      	movs	r2, #0
 800404c:	f000 f82a 	bl	80040a4 <UART_WaitOnFlagUntilTimeout>
 8004050:	1e03      	subs	r3, r0, #0
 8004052:	d001      	beq.n	8004058 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e01f      	b.n	8004098 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2204      	movs	r2, #4
 8004060:	4013      	ands	r3, r2
 8004062:	2b04      	cmp	r3, #4
 8004064:	d10d      	bne.n	8004082 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	03d9      	lsls	r1, r3, #15
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <UART_CheckIdleState+0x88>)
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	0013      	movs	r3, r2
 8004074:	2200      	movs	r2, #0
 8004076:	f000 f815 	bl	80040a4 <UART_WaitOnFlagUntilTimeout>
 800407a:	1e03      	subs	r3, r0, #0
 800407c:	d001      	beq.n	8004082 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e00a      	b.n	8004098 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2270      	movs	r2, #112	; 0x70
 8004092:	2100      	movs	r1, #0
 8004094:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	0018      	movs	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	b004      	add	sp, #16
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	01ffffff 	.word	0x01ffffff

080040a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	1dfb      	adds	r3, r7, #7
 80040b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b4:	e029      	b.n	800410a <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	3301      	adds	r3, #1
 80040ba:	d026      	beq.n	800410a <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040bc:	f7fc fd96 	bl	8000bec <HAL_GetTick>
 80040c0:	0002      	movs	r2, r0
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d302      	bcc.n	80040d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d11b      	bne.n	800410a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4915      	ldr	r1, [pc, #84]	; (8004134 <UART_WaitOnFlagUntilTimeout+0x90>)
 80040de:	400a      	ands	r2, r1
 80040e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2101      	movs	r1, #1
 80040ee:	438a      	bics	r2, r1
 80040f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2270      	movs	r2, #112	; 0x70
 8004102:	2100      	movs	r1, #0
 8004104:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e00f      	b.n	800412a <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	4013      	ands	r3, r2
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	425a      	negs	r2, r3
 800411a:	4153      	adcs	r3, r2
 800411c:	b2db      	uxtb	r3, r3
 800411e:	001a      	movs	r2, r3
 8004120:	1dfb      	adds	r3, r7, #7
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d0c6      	beq.n	80040b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	0018      	movs	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	b004      	add	sp, #16
 8004130:	bd80      	pop	{r7, pc}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	fffffe5f 	.word	0xfffffe5f

08004138 <init_Left>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

// Enable Left sensor
void init_Left(){
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
	GPIOA->ODR |= GPIO_PIN_4;
 800413c:	23a0      	movs	r3, #160	; 0xa0
 800413e:	05db      	lsls	r3, r3, #23
 8004140:	695a      	ldr	r2, [r3, #20]
 8004142:	23a0      	movs	r3, #160	; 0xa0
 8004144:	05db      	lsls	r3, r3, #23
 8004146:	2110      	movs	r1, #16
 8004148:	430a      	orrs	r2, r1
 800414a:	615a      	str	r2, [r3, #20]
}
 800414c:	46c0      	nop			; (mov r8, r8)
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <init_Right>:
void init_Right(){
 8004152:	b580      	push	{r7, lr}
 8004154:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~GPIO_PIN_4;
 8004156:	23a0      	movs	r3, #160	; 0xa0
 8004158:	05db      	lsls	r3, r3, #23
 800415a:	695a      	ldr	r2, [r3, #20]
 800415c:	23a0      	movs	r3, #160	; 0xa0
 800415e:	05db      	lsls	r3, r3, #23
 8004160:	2110      	movs	r1, #16
 8004162:	438a      	bics	r2, r1
 8004164:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= GPIO_PIN_8;
 8004166:	23a0      	movs	r3, #160	; 0xa0
 8004168:	05db      	lsls	r3, r3, #23
 800416a:	695a      	ldr	r2, [r3, #20]
 800416c:	23a0      	movs	r3, #160	; 0xa0
 800416e:	05db      	lsls	r3, r3, #23
 8004170:	2180      	movs	r1, #128	; 0x80
 8004172:	0049      	lsls	r1, r1, #1
 8004174:	430a      	orrs	r2, r1
 8004176:	615a      	str	r2, [r3, #20]
}
 8004178:	46c0      	nop			; (mov r8, r8)
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <init_Straight>:
void init_Straight(){
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~GPIO_PIN_8;
 8004184:	23a0      	movs	r3, #160	; 0xa0
 8004186:	05db      	lsls	r3, r3, #23
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	23a0      	movs	r3, #160	; 0xa0
 800418c:	05db      	lsls	r3, r3, #23
 800418e:	4903      	ldr	r1, [pc, #12]	; (800419c <init_Straight+0x1c>)
 8004190:	400a      	ands	r2, r1
 8004192:	615a      	str	r2, [r3, #20]
}
 8004194:	46c0      	nop			; (mov r8, r8)
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	fffffeff 	.word	0xfffffeff

080041a0 <myTim2Init>:
void myTim2Init(void){
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_IOPAEN;
 80041a4:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <myTim2Init+0xb4>)
 80041a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a8:	4b2a      	ldr	r3, [pc, #168]	; (8004254 <myTim2Init+0xb4>)
 80041aa:	2101      	movs	r1, #1
 80041ac:	430a      	orrs	r2, r1
 80041ae:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80041b0:	4b28      	ldr	r3, [pc, #160]	; (8004254 <myTim2Init+0xb4>)
 80041b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b4:	4b27      	ldr	r3, [pc, #156]	; (8004254 <myTim2Init+0xb4>)
 80041b6:	2101      	movs	r1, #1
 80041b8:	430a      	orrs	r2, r1
 80041ba:	639a      	str	r2, [r3, #56]	; 0x38
	GPIOA->MODER |= 2;
 80041bc:	23a0      	movs	r3, #160	; 0xa0
 80041be:	05db      	lsls	r3, r3, #23
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	23a0      	movs	r3, #160	; 0xa0
 80041c4:	05db      	lsls	r3, r3, #23
 80041c6:	2102      	movs	r1, #2
 80041c8:	430a      	orrs	r2, r1
 80041ca:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= 2;
 80041cc:	23a0      	movs	r3, #160	; 0xa0
 80041ce:	05db      	lsls	r3, r3, #23
 80041d0:	6a1a      	ldr	r2, [r3, #32]
 80041d2:	23a0      	movs	r3, #160	; 0xa0
 80041d4:	05db      	lsls	r3, r3, #23
 80041d6:	2102      	movs	r1, #2
 80041d8:	430a      	orrs	r2, r1
 80041da:	621a      	str	r2, [r3, #32]
	GPIOA->OSPEEDR |= 2;
 80041dc:	23a0      	movs	r3, #160	; 0xa0
 80041de:	05db      	lsls	r3, r3, #23
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	23a0      	movs	r3, #160	; 0xa0
 80041e4:	05db      	lsls	r3, r3, #23
 80041e6:	2102      	movs	r1, #2
 80041e8:	430a      	orrs	r2, r1
 80041ea:	609a      	str	r2, [r3, #8]
	TIM2->PSC = 20;
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	05db      	lsls	r3, r3, #23
 80041f0:	2214      	movs	r2, #20
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 9;
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	05db      	lsls	r3, r3, #23
 80041f8:	2209      	movs	r2, #9
 80041fa:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	05db      	lsls	r3, r3, #23
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	2380      	movs	r3, #128	; 0x80
 8004204:	05db      	lsls	r3, r3, #23
 8004206:	2160      	movs	r1, #96	; 0x60
 8004208:	430a      	orrs	r2, r1
 800420a:	619a      	str	r2, [r3, #24]
	TIM2->CCR1 = 9;
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	05db      	lsls	r3, r3, #23
 8004210:	2209      	movs	r2, #9
 8004212:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCER |= 1;
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	05db      	lsls	r3, r3, #23
 8004218:	6a1a      	ldr	r2, [r3, #32]
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	05db      	lsls	r3, r3, #23
 800421e:	2101      	movs	r1, #1
 8004220:	430a      	orrs	r2, r1
 8004222:	621a      	str	r2, [r3, #32]
	TIM2->CR1 |= 1;
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	05db      	lsls	r3, r3, #23
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	2380      	movs	r3, #128	; 0x80
 800422c:	05db      	lsls	r3, r3, #23
 800422e:	2101      	movs	r1, #1
 8004230:	430a      	orrs	r2, r1
 8004232:	601a      	str	r2, [r3, #0]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004234:	4b07      	ldr	r3, [pc, #28]	; (8004254 <myTim2Init+0xb4>)
 8004236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <myTim2Init+0xb4>)
 800423a:	2101      	movs	r1, #1
 800423c:	430a      	orrs	r2, r1
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8004240:	4b04      	ldr	r3, [pc, #16]	; (8004254 <myTim2Init+0xb4>)
 8004242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <myTim2Init+0xb4>)
 8004246:	2110      	movs	r1, #16
 8004248:	430a      	orrs	r2, r1
 800424a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800424c:	46c0      	nop			; (mov r8, r8)
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	40021000 	.word	0x40021000

08004258 <myDMAInit>:
void myDMAInit(uint32_t* buffer, uint32_t length){
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8004262:	4b35      	ldr	r3, [pc, #212]	; (8004338 <myDMAInit+0xe0>)
 8004264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004266:	4b34      	ldr	r3, [pc, #208]	; (8004338 <myDMAInit+0xe0>)
 8004268:	2101      	movs	r1, #1
 800426a:	430a      	orrs	r2, r1
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
	DMA1_Channel1->CCR &= ~DMA_CCR_MEM2MEM;
 800426e:	4b33      	ldr	r3, [pc, #204]	; (800433c <myDMAInit+0xe4>)
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4b32      	ldr	r3, [pc, #200]	; (800433c <myDMAInit+0xe4>)
 8004274:	4932      	ldr	r1, [pc, #200]	; (8004340 <myDMAInit+0xe8>)
 8004276:	400a      	ands	r2, r1
 8004278:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PL;
 800427a:	4b30      	ldr	r3, [pc, #192]	; (800433c <myDMAInit+0xe4>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4b2f      	ldr	r3, [pc, #188]	; (800433c <myDMAInit+0xe4>)
 8004280:	4930      	ldr	r1, [pc, #192]	; (8004344 <myDMAInit+0xec>)
 8004282:	400a      	ands	r2, r1
 8004284:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_PL_1;
 8004286:	4b2d      	ldr	r3, [pc, #180]	; (800433c <myDMAInit+0xe4>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b2c      	ldr	r3, [pc, #176]	; (800433c <myDMAInit+0xe4>)
 800428c:	2180      	movs	r1, #128	; 0x80
 800428e:	0189      	lsls	r1, r1, #6
 8004290:	430a      	orrs	r2, r1
 8004292:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PSIZE;
 8004294:	4b29      	ldr	r3, [pc, #164]	; (800433c <myDMAInit+0xe4>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4b28      	ldr	r3, [pc, #160]	; (800433c <myDMAInit+0xe4>)
 800429a:	492b      	ldr	r1, [pc, #172]	; (8004348 <myDMAInit+0xf0>)
 800429c:	400a      	ands	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0; // 16bits
 80042a0:	4b26      	ldr	r3, [pc, #152]	; (800433c <myDMAInit+0xe4>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	4b25      	ldr	r3, [pc, #148]	; (800433c <myDMAInit+0xe4>)
 80042a6:	2180      	movs	r1, #128	; 0x80
 80042a8:	0049      	lsls	r1, r1, #1
 80042aa:	430a      	orrs	r2, r1
 80042ac:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_MSIZE;
 80042ae:	4b23      	ldr	r3, [pc, #140]	; (800433c <myDMAInit+0xe4>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b22      	ldr	r3, [pc, #136]	; (800433c <myDMAInit+0xe4>)
 80042b4:	4925      	ldr	r1, [pc, #148]	; (800434c <myDMAInit+0xf4>)
 80042b6:	400a      	ands	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MSIZE_0; // 16bits
 80042ba:	4b20      	ldr	r3, [pc, #128]	; (800433c <myDMAInit+0xe4>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b1f      	ldr	r3, [pc, #124]	; (800433c <myDMAInit+0xe4>)
 80042c0:	2180      	movs	r1, #128	; 0x80
 80042c2:	00c9      	lsls	r1, r1, #3
 80042c4:	430a      	orrs	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PINC;
 80042c8:	4b1c      	ldr	r3, [pc, #112]	; (800433c <myDMAInit+0xe4>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	4b1b      	ldr	r3, [pc, #108]	; (800433c <myDMAInit+0xe4>)
 80042ce:	2140      	movs	r1, #64	; 0x40
 80042d0:	438a      	bics	r2, r1
 80042d2:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 80042d4:	4b19      	ldr	r3, [pc, #100]	; (800433c <myDMAInit+0xe4>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4b18      	ldr	r3, [pc, #96]	; (800433c <myDMAInit+0xe4>)
 80042da:	2180      	movs	r1, #128	; 0x80
 80042dc:	430a      	orrs	r2, r1
 80042de:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_CIRC;
 80042e0:	4b16      	ldr	r3, [pc, #88]	; (800433c <myDMAInit+0xe4>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b15      	ldr	r3, [pc, #84]	; (800433c <myDMAInit+0xe4>)
 80042e6:	2120      	movs	r1, #32
 80042e8:	438a      	bics	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 80042ec:	4b13      	ldr	r3, [pc, #76]	; (800433c <myDMAInit+0xe4>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	4b12      	ldr	r3, [pc, #72]	; (800433c <myDMAInit+0xe4>)
 80042f2:	2120      	movs	r1, #32
 80042f4:	430a      	orrs	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_DIR;
 80042f8:	4b10      	ldr	r3, [pc, #64]	; (800433c <myDMAInit+0xe4>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <myDMAInit+0xe4>)
 80042fe:	2110      	movs	r1, #16
 8004300:	438a      	bics	r2, r1
 8004302:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CNDTR = length;
 8004304:	4b0d      	ldr	r3, [pc, #52]	; (800433c <myDMAInit+0xe4>)
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	605a      	str	r2, [r3, #4]

	DMA1_Channel1->CPAR = (uint32_t) &(ADC1->DR);
 800430a:	4b0c      	ldr	r3, [pc, #48]	; (800433c <myDMAInit+0xe4>)
 800430c:	4a10      	ldr	r2, [pc, #64]	; (8004350 <myDMAInit+0xf8>)
 800430e:	609a      	str	r2, [r3, #8]

	DMA1_Channel1->CMAR = (uint32_t) buffer;
 8004310:	4b0a      	ldr	r3, [pc, #40]	; (800433c <myDMAInit+0xe4>)
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	60da      	str	r2, [r3, #12]

	DMA1_CSELR->CSELR &= ~DMA_CSELR_C1S;
 8004316:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <myDMAInit+0xfc>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <myDMAInit+0xfc>)
 800431c:	210f      	movs	r1, #15
 800431e:	438a      	bics	r2, r1
 8004320:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_EN;
 8004322:	4b06      	ldr	r3, [pc, #24]	; (800433c <myDMAInit+0xe4>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <myDMAInit+0xe4>)
 8004328:	2101      	movs	r1, #1
 800432a:	430a      	orrs	r2, r1
 800432c:	601a      	str	r2, [r3, #0]
}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	46bd      	mov	sp, r7
 8004332:	b002      	add	sp, #8
 8004334:	bd80      	pop	{r7, pc}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	40021000 	.word	0x40021000
 800433c:	40020008 	.word	0x40020008
 8004340:	ffffbfff 	.word	0xffffbfff
 8004344:	ffffcfff 	.word	0xffffcfff
 8004348:	fffffcff 	.word	0xfffffcff
 800434c:	fffff3ff 	.word	0xfffff3ff
 8004350:	40012440 	.word	0x40012440
 8004354:	400200a8 	.word	0x400200a8

08004358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800435e:	f7fc fbef 	bl	8000b40 <HAL_Init>
//  L_PID.Ki = 0;
//  arm_pid_init_f32(&L_PID, 1);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004362:	f000 f8d9 	bl	8004518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004366:	f000 fc4b 	bl	8004c00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800436a:	f000 fc19 	bl	8004ba0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800436e:	f000 f9e1 	bl	8004734 <MX_TIM2_Init>
  MX_TIM6_Init();
 8004372:	f000 fb07 	bl	8004984 <MX_TIM6_Init>
  MX_TIM21_Init();
 8004376:	f000 fb41 	bl	80049fc <MX_TIM21_Init>
  MX_TIM22_Init();
 800437a:	f000 fb9b 	bl	8004ab4 <MX_TIM22_Init>
  MX_TIM3_Init();
 800437e:	f000 fa79 	bl	8004874 <MX_TIM3_Init>
  MX_ADC_Init();
 8004382:	f000 f935 	bl	80045f0 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  r_enc_setpoint = 0;
 8004386:	4b55      	ldr	r3, [pc, #340]	; (80044dc <main+0x184>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]
  l_enc_setpoint = 0;
 800438c:	4b54      	ldr	r3, [pc, #336]	; (80044e0 <main+0x188>)
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]

  printf("Hello...\r\n");
 8004392:	4b54      	ldr	r3, [pc, #336]	; (80044e4 <main+0x18c>)
 8004394:	0018      	movs	r0, r3
 8004396:	f001 ff6f 	bl	8006278 <puts>
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 800439a:	4b53      	ldr	r3, [pc, #332]	; (80044e8 <main+0x190>)
 800439c:	2100      	movs	r1, #0
 800439e:	0018      	movs	r0, r3
 80043a0:	f7fc ff4a 	bl	8001238 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80043a4:	4b51      	ldr	r3, [pc, #324]	; (80044ec <main+0x194>)
 80043a6:	2100      	movs	r1, #0
 80043a8:	0018      	movs	r0, r3
 80043aa:	f7fe fa45 	bl	8002838 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80043ae:	4b4f      	ldr	r3, [pc, #316]	; (80044ec <main+0x194>)
 80043b0:	2104      	movs	r1, #4
 80043b2:	0018      	movs	r0, r3
 80043b4:	f7fe fa40 	bl	8002838 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80043b8:	4b4c      	ldr	r3, [pc, #304]	; (80044ec <main+0x194>)
 80043ba:	2108      	movs	r1, #8
 80043bc:	0018      	movs	r0, r3
 80043be:	f7fe fa3b 	bl	8002838 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80043c2:	4b4a      	ldr	r3, [pc, #296]	; (80044ec <main+0x194>)
 80043c4:	210c      	movs	r1, #12
 80043c6:	0018      	movs	r0, r3
 80043c8:	f7fe fa36 	bl	8002838 <HAL_TIM_PWM_Start>
//  HAL_ADC_Start_DMA(&hadc, (uint32_t*)buffer, 20);
  myTim2Init();
 80043cc:	f7ff fee8 	bl	80041a0 <myTim2Init>
  TIM6->CR1 |= 1;
 80043d0:	4b47      	ldr	r3, [pc, #284]	; (80044f0 <main+0x198>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4b46      	ldr	r3, [pc, #280]	; (80044f0 <main+0x198>)
 80043d6:	2101      	movs	r1, #1
 80043d8:	430a      	orrs	r2, r1
 80043da:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 80043dc:	4b45      	ldr	r3, [pc, #276]	; (80044f4 <main+0x19c>)
 80043de:	0018      	movs	r0, r3
 80043e0:	f7fe f9b0 	bl	8002744 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim21);
 80043e4:	4b44      	ldr	r3, [pc, #272]	; (80044f8 <main+0x1a0>)
 80043e6:	0018      	movs	r0, r3
 80043e8:	f7fe f9ac 	bl	8002744 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim22,TIM_CHANNEL_ALL);
 80043ec:	4b43      	ldr	r3, [pc, #268]	; (80044fc <main+0x1a4>)
 80043ee:	213c      	movs	r1, #60	; 0x3c
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7fe fad7 	bl	80029a4 <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COMPARE(&htim21, TIM_CHANNEL_1, 0);
 80043f6:	4b40      	ldr	r3, [pc, #256]	; (80044f8 <main+0x1a0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2200      	movs	r2, #0
 80043fc:	635a      	str	r2, [r3, #52]	; 0x34
  IR_LOCATE();
 80043fe:	f001 f90f 	bl	8005620 <IR_LOCATE>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	60bb      	str	r3, [r7, #8]
  int hold = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
  int dir = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	607b      	str	r3, [r7, #4]
  // ADC DMA Config
  myDMAInit((uint32_t*) buffer, 5);
 800440e:	4b3c      	ldr	r3, [pc, #240]	; (8004500 <main+0x1a8>)
 8004410:	2105      	movs	r1, #5
 8004412:	0018      	movs	r0, r3
 8004414:	f7ff ff20 	bl	8004258 <myDMAInit>
  ADC1->CFGR1 |= ADC_CFGR1_DMACFG;
 8004418:	4b3a      	ldr	r3, [pc, #232]	; (8004504 <main+0x1ac>)
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	4b39      	ldr	r3, [pc, #228]	; (8004504 <main+0x1ac>)
 800441e:	2102      	movs	r1, #2
 8004420:	430a      	orrs	r2, r1
 8004422:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 |= ADC_CFGR1_DMAEN;
 8004424:	4b37      	ldr	r3, [pc, #220]	; (8004504 <main+0x1ac>)
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	4b36      	ldr	r3, [pc, #216]	; (8004504 <main+0x1ac>)
 800442a:	2101      	movs	r1, #1
 800442c:	430a      	orrs	r2, r1
 800442e:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 |= ADC_CFGR1_CONT;
 8004430:	4b34      	ldr	r3, [pc, #208]	; (8004504 <main+0x1ac>)
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	4b33      	ldr	r3, [pc, #204]	; (8004504 <main+0x1ac>)
 8004436:	2180      	movs	r1, #128	; 0x80
 8004438:	0189      	lsls	r1, r1, #6
 800443a:	430a      	orrs	r2, r1
 800443c:	60da      	str	r2, [r3, #12]
  ADC1->IER |= ADC_IER_EOSIE;
 800443e:	4b31      	ldr	r3, [pc, #196]	; (8004504 <main+0x1ac>)
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	4b30      	ldr	r3, [pc, #192]	; (8004504 <main+0x1ac>)
 8004444:	2108      	movs	r1, #8
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]
  ADC1->CR |= ADC_CR_ADEN;
 800444a:	4b2e      	ldr	r3, [pc, #184]	; (8004504 <main+0x1ac>)
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	4b2d      	ldr	r3, [pc, #180]	; (8004504 <main+0x1ac>)
 8004450:	2101      	movs	r1, #1
 8004452:	430a      	orrs	r2, r1
 8004454:	609a      	str	r2, [r3, #8]
  ADC1->CR |= ADC_CR_ADSTART;
 8004456:	4b2b      	ldr	r3, [pc, #172]	; (8004504 <main+0x1ac>)
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <main+0x1ac>)
 800445c:	2104      	movs	r1, #4
 800445e:	430a      	orrs	r2, r1
 8004460:	609a      	str	r2, [r3, #8]
  light_seeking = 1;
 8004462:	4b29      	ldr	r3, [pc, #164]	; (8004508 <main+0x1b0>)
 8004464:	2201      	movs	r2, #1
 8004466:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	printf("Test\r\n");
	if(light_seeking){
 8004468:	4b27      	ldr	r3, [pc, #156]	; (8004508 <main+0x1b0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d018      	beq.n	80044a2 <main+0x14a>
		dir = check_light();
 8004470:	f000 fe16 	bl	80050a0 <check_light>
 8004474:	0003      	movs	r3, r0
 8004476:	607b      	str	r3, [r7, #4]
//		printf("dir = %d\r\n", dir);
		if(dir != -1 && dir != ROBOT_FRONT){
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3301      	adds	r3, #1
 800447c:	d00c      	beq.n	8004498 <main+0x140>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d009      	beq.n	8004498 <main+0x140>
//			printf("Turning to face light\r\n");
//			void (*light_direction)(void) = &light_direction;
			turn_until_light(dir==ROBOT_LEFT?TURN_LEFT:TURN_RIGHT, 0);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3b01      	subs	r3, #1
 8004488:	1e5a      	subs	r2, r3, #1
 800448a:	4193      	sbcs	r3, r2
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2100      	movs	r1, #0
 8004490:	0018      	movs	r0, r3
 8004492:	f000 fe81 	bl	8005198 <turn_until_light>
 8004496:	e004      	b.n	80044a2 <main+0x14a>
		} else {
//			printf("Moving to Light\r\n");
			forward_until_light(-1);
 8004498:	2301      	movs	r3, #1
 800449a:	425b      	negs	r3, r3
 800449c:	0018      	movs	r0, r3
 800449e:	f000 fe95 	bl	80051cc <forward_until_light>
		}
	}
	i = TIM22->CNT;
 80044a2:	4b1a      	ldr	r3, [pc, #104]	; (800450c <main+0x1b4>)
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	60bb      	str	r3, [r7, #8]
	HAL_Delay(200);
 80044a8:	20c8      	movs	r0, #200	; 0xc8
 80044aa:	f7fc fba9 	bl	8000c00 <HAL_Delay>
//	printf("i = %d\r\n", i);
	if (hold > i){
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	dd06      	ble.n	80044c4 <main+0x16c>
		printf("turn left\r\n");
 80044b6:	4b16      	ldr	r3, [pc, #88]	; (8004510 <main+0x1b8>)
 80044b8:	0018      	movs	r0, r3
 80044ba:	f001 fedd 	bl	8006278 <puts>
	  hold = i;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	e7d1      	b.n	8004468 <main+0x110>
	}
	else if (hold < i) {
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	dacd      	bge.n	8004468 <main+0x110>
	  printf("turn right\r\n");
 80044cc:	4b11      	ldr	r3, [pc, #68]	; (8004514 <main+0x1bc>)
 80044ce:	0018      	movs	r0, r3
 80044d0:	f001 fed2 	bl	8006278 <puts>
	  hold = i;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	60fb      	str	r3, [r7, #12]
	if(light_seeking){
 80044d8:	e7c6      	b.n	8004468 <main+0x110>
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	20000084 	.word	0x20000084
 80044e0:	2000008c 	.word	0x2000008c
 80044e4:	08006cc0 	.word	0x08006cc0
 80044e8:	2000023c 	.word	0x2000023c
 80044ec:	200000c0 	.word	0x200000c0
 80044f0:	40001000 	.word	0x40001000
 80044f4:	20000144 	.word	0x20000144
 80044f8:	200002a8 	.word	0x200002a8
 80044fc:	200000fc 	.word	0x200000fc
 8004500:	20000138 	.word	0x20000138
 8004504:	40012400 	.word	0x40012400
 8004508:	200002e4 	.word	0x200002e4
 800450c:	40011400 	.word	0x40011400
 8004510:	08006ccc 	.word	0x08006ccc
 8004514:	08006cd8 	.word	0x08006cd8

08004518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004518:	b590      	push	{r4, r7, lr}
 800451a:	b09f      	sub	sp, #124	; 0x7c
 800451c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800451e:	2440      	movs	r4, #64	; 0x40
 8004520:	193b      	adds	r3, r7, r4
 8004522:	0018      	movs	r0, r3
 8004524:	2338      	movs	r3, #56	; 0x38
 8004526:	001a      	movs	r2, r3
 8004528:	2100      	movs	r1, #0
 800452a:	f001 fd7b 	bl	8006024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800452e:	232c      	movs	r3, #44	; 0x2c
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	0018      	movs	r0, r3
 8004534:	2314      	movs	r3, #20
 8004536:	001a      	movs	r2, r3
 8004538:	2100      	movs	r1, #0
 800453a:	f001 fd73 	bl	8006024 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800453e:	1d3b      	adds	r3, r7, #4
 8004540:	0018      	movs	r0, r3
 8004542:	2328      	movs	r3, #40	; 0x28
 8004544:	001a      	movs	r2, r3
 8004546:	2100      	movs	r1, #0
 8004548:	f001 fd6c 	bl	8006024 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800454c:	4b26      	ldr	r3, [pc, #152]	; (80045e8 <SystemClock_Config+0xd0>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a26      	ldr	r2, [pc, #152]	; (80045ec <SystemClock_Config+0xd4>)
 8004552:	401a      	ands	r2, r3
 8004554:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <SystemClock_Config+0xd0>)
 8004556:	2180      	movs	r1, #128	; 0x80
 8004558:	0109      	lsls	r1, r1, #4
 800455a:	430a      	orrs	r2, r1
 800455c:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800455e:	0021      	movs	r1, r4
 8004560:	187b      	adds	r3, r7, r1
 8004562:	2210      	movs	r2, #16
 8004564:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004566:	187b      	adds	r3, r7, r1
 8004568:	2201      	movs	r2, #1
 800456a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800456c:	187b      	adds	r3, r7, r1
 800456e:	2200      	movs	r2, #0
 8004570:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8004572:	187b      	adds	r3, r7, r1
 8004574:	22a0      	movs	r2, #160	; 0xa0
 8004576:	0212      	lsls	r2, r2, #8
 8004578:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800457a:	187b      	adds	r3, r7, r1
 800457c:	2200      	movs	r2, #0
 800457e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004580:	187b      	adds	r3, r7, r1
 8004582:	0018      	movs	r0, r3
 8004584:	f7fd f98a 	bl	800189c <HAL_RCC_OscConfig>
 8004588:	1e03      	subs	r3, r0, #0
 800458a:	d001      	beq.n	8004590 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800458c:	f000 fe64 	bl	8005258 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004590:	212c      	movs	r1, #44	; 0x2c
 8004592:	187b      	adds	r3, r7, r1
 8004594:	220f      	movs	r2, #15
 8004596:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8004598:	187b      	adds	r3, r7, r1
 800459a:	2200      	movs	r2, #0
 800459c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800459e:	187b      	adds	r3, r7, r1
 80045a0:	2200      	movs	r2, #0
 80045a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80045a4:	187b      	adds	r3, r7, r1
 80045a6:	2200      	movs	r2, #0
 80045a8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045aa:	187b      	adds	r3, r7, r1
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80045b0:	187b      	adds	r3, r7, r1
 80045b2:	2100      	movs	r1, #0
 80045b4:	0018      	movs	r0, r3
 80045b6:	f7fd fd41 	bl	800203c <HAL_RCC_ClockConfig>
 80045ba:	1e03      	subs	r3, r0, #0
 80045bc:	d001      	beq.n	80045c2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80045be:	f000 fe4b 	bl	8005258 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80045c2:	1d3b      	adds	r3, r7, #4
 80045c4:	2202      	movs	r2, #2
 80045c6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80045c8:	1d3b      	adds	r3, r7, #4
 80045ca:	2200      	movs	r2, #0
 80045cc:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045ce:	1d3b      	adds	r3, r7, #4
 80045d0:	0018      	movs	r0, r3
 80045d2:	f7fd ff17 	bl	8002404 <HAL_RCCEx_PeriphCLKConfig>
 80045d6:	1e03      	subs	r3, r0, #0
 80045d8:	d001      	beq.n	80045de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80045da:	f000 fe3d 	bl	8005258 <Error_Handler>
  }
}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b01f      	add	sp, #124	; 0x7c
 80045e4:	bd90      	pop	{r4, r7, pc}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	40007000 	.word	0x40007000
 80045ec:	ffffe7ff 	.word	0xffffe7ff

080045f0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80045f6:	003b      	movs	r3, r7
 80045f8:	0018      	movs	r0, r3
 80045fa:	2308      	movs	r3, #8
 80045fc:	001a      	movs	r2, r3
 80045fe:	2100      	movs	r1, #0
 8004600:	f001 fd10 	bl	8006024 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8004604:	4b44      	ldr	r3, [pc, #272]	; (8004718 <MX_ADC_Init+0x128>)
 8004606:	4a45      	ldr	r2, [pc, #276]	; (800471c <MX_ADC_Init+0x12c>)
 8004608:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800460a:	4b43      	ldr	r3, [pc, #268]	; (8004718 <MX_ADC_Init+0x128>)
 800460c:	2200      	movs	r2, #0
 800460e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004610:	4b41      	ldr	r3, [pc, #260]	; (8004718 <MX_ADC_Init+0x128>)
 8004612:	22c0      	movs	r2, #192	; 0xc0
 8004614:	0612      	lsls	r2, r2, #24
 8004616:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004618:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <MX_ADC_Init+0x128>)
 800461a:	2200      	movs	r2, #0
 800461c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800461e:	4b3e      	ldr	r3, [pc, #248]	; (8004718 <MX_ADC_Init+0x128>)
 8004620:	2200      	movs	r2, #0
 8004622:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004624:	4b3c      	ldr	r3, [pc, #240]	; (8004718 <MX_ADC_Init+0x128>)
 8004626:	2201      	movs	r2, #1
 8004628:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800462a:	4b3b      	ldr	r3, [pc, #236]	; (8004718 <MX_ADC_Init+0x128>)
 800462c:	2200      	movs	r2, #0
 800462e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8004630:	4b39      	ldr	r3, [pc, #228]	; (8004718 <MX_ADC_Init+0x128>)
 8004632:	2220      	movs	r2, #32
 8004634:	2101      	movs	r1, #1
 8004636:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004638:	4b37      	ldr	r3, [pc, #220]	; (8004718 <MX_ADC_Init+0x128>)
 800463a:	2221      	movs	r2, #33	; 0x21
 800463c:	2100      	movs	r1, #0
 800463e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004640:	4b35      	ldr	r3, [pc, #212]	; (8004718 <MX_ADC_Init+0x128>)
 8004642:	2200      	movs	r2, #0
 8004644:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004646:	4b34      	ldr	r3, [pc, #208]	; (8004718 <MX_ADC_Init+0x128>)
 8004648:	22c2      	movs	r2, #194	; 0xc2
 800464a:	32ff      	adds	r2, #255	; 0xff
 800464c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800464e:	4b32      	ldr	r3, [pc, #200]	; (8004718 <MX_ADC_Init+0x128>)
 8004650:	222c      	movs	r2, #44	; 0x2c
 8004652:	2100      	movs	r1, #0
 8004654:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004656:	4b30      	ldr	r3, [pc, #192]	; (8004718 <MX_ADC_Init+0x128>)
 8004658:	2204      	movs	r2, #4
 800465a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800465c:	4b2e      	ldr	r3, [pc, #184]	; (8004718 <MX_ADC_Init+0x128>)
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004662:	4b2d      	ldr	r3, [pc, #180]	; (8004718 <MX_ADC_Init+0x128>)
 8004664:	2200      	movs	r2, #0
 8004666:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004668:	4b2b      	ldr	r3, [pc, #172]	; (8004718 <MX_ADC_Init+0x128>)
 800466a:	2200      	movs	r2, #0
 800466c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800466e:	4b2a      	ldr	r3, [pc, #168]	; (8004718 <MX_ADC_Init+0x128>)
 8004670:	2200      	movs	r2, #0
 8004672:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004674:	4b28      	ldr	r3, [pc, #160]	; (8004718 <MX_ADC_Init+0x128>)
 8004676:	0018      	movs	r0, r3
 8004678:	f7fc fae0 	bl	8000c3c <HAL_ADC_Init>
 800467c:	1e03      	subs	r3, r0, #0
 800467e:	d001      	beq.n	8004684 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004680:	f000 fdea 	bl	8005258 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004684:	003b      	movs	r3, r7
 8004686:	4a26      	ldr	r2, [pc, #152]	; (8004720 <MX_ADC_Init+0x130>)
 8004688:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800468a:	003b      	movs	r3, r7
 800468c:	2280      	movs	r2, #128	; 0x80
 800468e:	0152      	lsls	r2, r2, #5
 8004690:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004692:	003a      	movs	r2, r7
 8004694:	4b20      	ldr	r3, [pc, #128]	; (8004718 <MX_ADC_Init+0x128>)
 8004696:	0011      	movs	r1, r2
 8004698:	0018      	movs	r0, r3
 800469a:	f7fc fd0f 	bl	80010bc <HAL_ADC_ConfigChannel>
 800469e:	1e03      	subs	r3, r0, #0
 80046a0:	d001      	beq.n	80046a6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80046a2:	f000 fdd9 	bl	8005258 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80046a6:	003b      	movs	r3, r7
 80046a8:	4a1e      	ldr	r2, [pc, #120]	; (8004724 <MX_ADC_Init+0x134>)
 80046aa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80046ac:	003a      	movs	r2, r7
 80046ae:	4b1a      	ldr	r3, [pc, #104]	; (8004718 <MX_ADC_Init+0x128>)
 80046b0:	0011      	movs	r1, r2
 80046b2:	0018      	movs	r0, r3
 80046b4:	f7fc fd02 	bl	80010bc <HAL_ADC_ConfigChannel>
 80046b8:	1e03      	subs	r3, r0, #0
 80046ba:	d001      	beq.n	80046c0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80046bc:	f000 fdcc 	bl	8005258 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80046c0:	003b      	movs	r3, r7
 80046c2:	4a19      	ldr	r2, [pc, #100]	; (8004728 <MX_ADC_Init+0x138>)
 80046c4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80046c6:	003a      	movs	r2, r7
 80046c8:	4b13      	ldr	r3, [pc, #76]	; (8004718 <MX_ADC_Init+0x128>)
 80046ca:	0011      	movs	r1, r2
 80046cc:	0018      	movs	r0, r3
 80046ce:	f7fc fcf5 	bl	80010bc <HAL_ADC_ConfigChannel>
 80046d2:	1e03      	subs	r3, r0, #0
 80046d4:	d001      	beq.n	80046da <MX_ADC_Init+0xea>
  {
    Error_Handler();
 80046d6:	f000 fdbf 	bl	8005258 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80046da:	003b      	movs	r3, r7
 80046dc:	4a13      	ldr	r2, [pc, #76]	; (800472c <MX_ADC_Init+0x13c>)
 80046de:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80046e0:	003a      	movs	r2, r7
 80046e2:	4b0d      	ldr	r3, [pc, #52]	; (8004718 <MX_ADC_Init+0x128>)
 80046e4:	0011      	movs	r1, r2
 80046e6:	0018      	movs	r0, r3
 80046e8:	f7fc fce8 	bl	80010bc <HAL_ADC_ConfigChannel>
 80046ec:	1e03      	subs	r3, r0, #0
 80046ee:	d001      	beq.n	80046f4 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 80046f0:	f000 fdb2 	bl	8005258 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80046f4:	003b      	movs	r3, r7
 80046f6:	4a0e      	ldr	r2, [pc, #56]	; (8004730 <MX_ADC_Init+0x140>)
 80046f8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80046fa:	003a      	movs	r2, r7
 80046fc:	4b06      	ldr	r3, [pc, #24]	; (8004718 <MX_ADC_Init+0x128>)
 80046fe:	0011      	movs	r1, r2
 8004700:	0018      	movs	r0, r3
 8004702:	f7fc fcdb 	bl	80010bc <HAL_ADC_ConfigChannel>
 8004706:	1e03      	subs	r3, r0, #0
 8004708:	d001      	beq.n	800470e <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 800470a:	f000 fda5 	bl	8005258 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	46bd      	mov	sp, r7
 8004712:	b002      	add	sp, #8
 8004714:	bd80      	pop	{r7, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	2000023c 	.word	0x2000023c
 800471c:	40012400 	.word	0x40012400
 8004720:	28000400 	.word	0x28000400
 8004724:	2c000800 	.word	0x2c000800
 8004728:	30001000 	.word	0x30001000
 800472c:	34002000 	.word	0x34002000
 8004730:	38004000 	.word	0x38004000

08004734 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b090      	sub	sp, #64	; 0x40
 8004738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800473a:	2330      	movs	r3, #48	; 0x30
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	0018      	movs	r0, r3
 8004740:	2310      	movs	r3, #16
 8004742:	001a      	movs	r2, r3
 8004744:	2100      	movs	r1, #0
 8004746:	f001 fc6d 	bl	8006024 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800474a:	231c      	movs	r3, #28
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	0018      	movs	r0, r3
 8004750:	2314      	movs	r3, #20
 8004752:	001a      	movs	r2, r3
 8004754:	2100      	movs	r1, #0
 8004756:	f001 fc65 	bl	8006024 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800475a:	2314      	movs	r3, #20
 800475c:	18fb      	adds	r3, r7, r3
 800475e:	0018      	movs	r0, r3
 8004760:	2308      	movs	r3, #8
 8004762:	001a      	movs	r2, r3
 8004764:	2100      	movs	r1, #0
 8004766:	f001 fc5d 	bl	8006024 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800476a:	1d3b      	adds	r3, r7, #4
 800476c:	0018      	movs	r0, r3
 800476e:	2310      	movs	r3, #16
 8004770:	001a      	movs	r2, r3
 8004772:	2100      	movs	r1, #0
 8004774:	f001 fc56 	bl	8006024 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004778:	4b3d      	ldr	r3, [pc, #244]	; (8004870 <MX_TIM2_Init+0x13c>)
 800477a:	2280      	movs	r2, #128	; 0x80
 800477c:	05d2      	lsls	r2, r2, #23
 800477e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8004780:	4b3b      	ldr	r3, [pc, #236]	; (8004870 <MX_TIM2_Init+0x13c>)
 8004782:	2214      	movs	r2, #20
 8004784:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004786:	4b3a      	ldr	r3, [pc, #232]	; (8004870 <MX_TIM2_Init+0x13c>)
 8004788:	2200      	movs	r2, #0
 800478a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800478c:	4b38      	ldr	r3, [pc, #224]	; (8004870 <MX_TIM2_Init+0x13c>)
 800478e:	2209      	movs	r2, #9
 8004790:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004792:	4b37      	ldr	r3, [pc, #220]	; (8004870 <MX_TIM2_Init+0x13c>)
 8004794:	2200      	movs	r2, #0
 8004796:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004798:	4b35      	ldr	r3, [pc, #212]	; (8004870 <MX_TIM2_Init+0x13c>)
 800479a:	2200      	movs	r2, #0
 800479c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800479e:	4b34      	ldr	r3, [pc, #208]	; (8004870 <MX_TIM2_Init+0x13c>)
 80047a0:	0018      	movs	r0, r3
 80047a2:	f7fd ffa3 	bl	80026ec <HAL_TIM_Base_Init>
 80047a6:	1e03      	subs	r3, r0, #0
 80047a8:	d001      	beq.n	80047ae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80047aa:	f000 fd55 	bl	8005258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047ae:	2130      	movs	r1, #48	; 0x30
 80047b0:	187b      	adds	r3, r7, r1
 80047b2:	2280      	movs	r2, #128	; 0x80
 80047b4:	0152      	lsls	r2, r2, #5
 80047b6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80047b8:	187a      	adds	r2, r7, r1
 80047ba:	4b2d      	ldr	r3, [pc, #180]	; (8004870 <MX_TIM2_Init+0x13c>)
 80047bc:	0011      	movs	r1, r2
 80047be:	0018      	movs	r0, r3
 80047c0:	f7fe fb16 	bl	8002df0 <HAL_TIM_ConfigClockSource>
 80047c4:	1e03      	subs	r3, r0, #0
 80047c6:	d001      	beq.n	80047cc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80047c8:	f000 fd46 	bl	8005258 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80047cc:	4b28      	ldr	r3, [pc, #160]	; (8004870 <MX_TIM2_Init+0x13c>)
 80047ce:	0018      	movs	r0, r3
 80047d0:	f7fe f806 	bl	80027e0 <HAL_TIM_PWM_Init>
 80047d4:	1e03      	subs	r3, r0, #0
 80047d6:	d001      	beq.n	80047dc <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80047d8:	f000 fd3e 	bl	8005258 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80047dc:	211c      	movs	r1, #28
 80047de:	187b      	adds	r3, r7, r1
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80047e4:	187b      	adds	r3, r7, r1
 80047e6:	2200      	movs	r2, #0
 80047e8:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80047ea:	187a      	adds	r2, r7, r1
 80047ec:	4b20      	ldr	r3, [pc, #128]	; (8004870 <MX_TIM2_Init+0x13c>)
 80047ee:	0011      	movs	r1, r2
 80047f0:	0018      	movs	r0, r3
 80047f2:	f7fe fbbb 	bl	8002f6c <HAL_TIM_SlaveConfigSynchro>
 80047f6:	1e03      	subs	r3, r0, #0
 80047f8:	d001      	beq.n	80047fe <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80047fa:	f000 fd2d 	bl	8005258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047fe:	2114      	movs	r1, #20
 8004800:	187b      	adds	r3, r7, r1
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004806:	187b      	adds	r3, r7, r1
 8004808:	2200      	movs	r2, #0
 800480a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800480c:	187a      	adds	r2, r7, r1
 800480e:	4b18      	ldr	r3, [pc, #96]	; (8004870 <MX_TIM2_Init+0x13c>)
 8004810:	0011      	movs	r1, r2
 8004812:	0018      	movs	r0, r3
 8004814:	f7fe febb 	bl	800358e <HAL_TIMEx_MasterConfigSynchronization>
 8004818:	1e03      	subs	r3, r0, #0
 800481a:	d001      	beq.n	8004820 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 800481c:	f000 fd1c 	bl	8005258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004820:	1d3b      	adds	r3, r7, #4
 8004822:	2260      	movs	r2, #96	; 0x60
 8004824:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 9;
 8004826:	1d3b      	adds	r3, r7, #4
 8004828:	2209      	movs	r2, #9
 800482a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800482c:	1d3b      	adds	r3, r7, #4
 800482e:	2200      	movs	r2, #0
 8004830:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004832:	1d3b      	adds	r3, r7, #4
 8004834:	2200      	movs	r2, #0
 8004836:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004838:	1d39      	adds	r1, r7, #4
 800483a:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <MX_TIM2_Init+0x13c>)
 800483c:	2200      	movs	r2, #0
 800483e:	0018      	movs	r0, r3
 8004840:	f7fe fa1e 	bl	8002c80 <HAL_TIM_PWM_ConfigChannel>
 8004844:	1e03      	subs	r3, r0, #0
 8004846:	d001      	beq.n	800484c <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8004848:	f000 fd06 	bl	8005258 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM3_TI1_GPIO) != HAL_OK)
 800484c:	4b08      	ldr	r3, [pc, #32]	; (8004870 <MX_TIM2_Init+0x13c>)
 800484e:	2104      	movs	r1, #4
 8004850:	0018      	movs	r0, r3
 8004852:	f7fe fedf 	bl	8003614 <HAL_TIMEx_RemapConfig>
 8004856:	1e03      	subs	r3, r0, #0
 8004858:	d001      	beq.n	800485e <MX_TIM2_Init+0x12a>
  {
    Error_Handler();
 800485a:	f000 fcfd 	bl	8005258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800485e:	4b04      	ldr	r3, [pc, #16]	; (8004870 <MX_TIM2_Init+0x13c>)
 8004860:	0018      	movs	r0, r3
 8004862:	f000 fe0f 	bl	8005484 <HAL_TIM_MspPostInit>

}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	46bd      	mov	sp, r7
 800486a:	b010      	add	sp, #64	; 0x40
 800486c:	bd80      	pop	{r7, pc}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	20000180 	.word	0x20000180

08004874 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800487a:	2310      	movs	r3, #16
 800487c:	18fb      	adds	r3, r7, r3
 800487e:	0018      	movs	r0, r3
 8004880:	2308      	movs	r3, #8
 8004882:	001a      	movs	r2, r3
 8004884:	2100      	movs	r1, #0
 8004886:	f001 fbcd 	bl	8006024 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800488a:	003b      	movs	r3, r7
 800488c:	0018      	movs	r0, r3
 800488e:	2310      	movs	r3, #16
 8004890:	001a      	movs	r2, r3
 8004892:	2100      	movs	r1, #0
 8004894:	f001 fbc6 	bl	8006024 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004898:	4b37      	ldr	r3, [pc, #220]	; (8004978 <MX_TIM3_Init+0x104>)
 800489a:	4a38      	ldr	r2, [pc, #224]	; (800497c <MX_TIM3_Init+0x108>)
 800489c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800489e:	4b36      	ldr	r3, [pc, #216]	; (8004978 <MX_TIM3_Init+0x104>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048a4:	4b34      	ldr	r3, [pc, #208]	; (8004978 <MX_TIM3_Init+0x104>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80048aa:	4b33      	ldr	r3, [pc, #204]	; (8004978 <MX_TIM3_Init+0x104>)
 80048ac:	4a34      	ldr	r2, [pc, #208]	; (8004980 <MX_TIM3_Init+0x10c>)
 80048ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048b0:	4b31      	ldr	r3, [pc, #196]	; (8004978 <MX_TIM3_Init+0x104>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048b6:	4b30      	ldr	r3, [pc, #192]	; (8004978 <MX_TIM3_Init+0x104>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80048bc:	4b2e      	ldr	r3, [pc, #184]	; (8004978 <MX_TIM3_Init+0x104>)
 80048be:	0018      	movs	r0, r3
 80048c0:	f7fd ff8e 	bl	80027e0 <HAL_TIM_PWM_Init>
 80048c4:	1e03      	subs	r3, r0, #0
 80048c6:	d001      	beq.n	80048cc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80048c8:	f000 fcc6 	bl	8005258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048cc:	2110      	movs	r1, #16
 80048ce:	187b      	adds	r3, r7, r1
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048d4:	187b      	adds	r3, r7, r1
 80048d6:	2200      	movs	r2, #0
 80048d8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80048da:	187a      	adds	r2, r7, r1
 80048dc:	4b26      	ldr	r3, [pc, #152]	; (8004978 <MX_TIM3_Init+0x104>)
 80048de:	0011      	movs	r1, r2
 80048e0:	0018      	movs	r0, r3
 80048e2:	f7fe fe54 	bl	800358e <HAL_TIMEx_MasterConfigSynchronization>
 80048e6:	1e03      	subs	r3, r0, #0
 80048e8:	d001      	beq.n	80048ee <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80048ea:	f000 fcb5 	bl	8005258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048ee:	003b      	movs	r3, r7
 80048f0:	2260      	movs	r2, #96	; 0x60
 80048f2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80048f4:	003b      	movs	r3, r7
 80048f6:	2200      	movs	r2, #0
 80048f8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048fa:	003b      	movs	r3, r7
 80048fc:	2200      	movs	r2, #0
 80048fe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004900:	003b      	movs	r3, r7
 8004902:	2200      	movs	r2, #0
 8004904:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004906:	0039      	movs	r1, r7
 8004908:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <MX_TIM3_Init+0x104>)
 800490a:	2200      	movs	r2, #0
 800490c:	0018      	movs	r0, r3
 800490e:	f7fe f9b7 	bl	8002c80 <HAL_TIM_PWM_ConfigChannel>
 8004912:	1e03      	subs	r3, r0, #0
 8004914:	d001      	beq.n	800491a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8004916:	f000 fc9f 	bl	8005258 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800491a:	4b17      	ldr	r3, [pc, #92]	; (8004978 <MX_TIM3_Init+0x104>)
 800491c:	2104      	movs	r1, #4
 800491e:	0018      	movs	r0, r3
 8004920:	f7fe fe78 	bl	8003614 <HAL_TIMEx_RemapConfig>
 8004924:	1e03      	subs	r3, r0, #0
 8004926:	d001      	beq.n	800492c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8004928:	f000 fc96 	bl	8005258 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800492c:	0039      	movs	r1, r7
 800492e:	4b12      	ldr	r3, [pc, #72]	; (8004978 <MX_TIM3_Init+0x104>)
 8004930:	2204      	movs	r2, #4
 8004932:	0018      	movs	r0, r3
 8004934:	f7fe f9a4 	bl	8002c80 <HAL_TIM_PWM_ConfigChannel>
 8004938:	1e03      	subs	r3, r0, #0
 800493a:	d001      	beq.n	8004940 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800493c:	f000 fc8c 	bl	8005258 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004940:	0039      	movs	r1, r7
 8004942:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <MX_TIM3_Init+0x104>)
 8004944:	2208      	movs	r2, #8
 8004946:	0018      	movs	r0, r3
 8004948:	f7fe f99a 	bl	8002c80 <HAL_TIM_PWM_ConfigChannel>
 800494c:	1e03      	subs	r3, r0, #0
 800494e:	d001      	beq.n	8004954 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8004950:	f000 fc82 	bl	8005258 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004954:	0039      	movs	r1, r7
 8004956:	4b08      	ldr	r3, [pc, #32]	; (8004978 <MX_TIM3_Init+0x104>)
 8004958:	220c      	movs	r2, #12
 800495a:	0018      	movs	r0, r3
 800495c:	f7fe f990 	bl	8002c80 <HAL_TIM_PWM_ConfigChannel>
 8004960:	1e03      	subs	r3, r0, #0
 8004962:	d001      	beq.n	8004968 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8004964:	f000 fc78 	bl	8005258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004968:	4b03      	ldr	r3, [pc, #12]	; (8004978 <MX_TIM3_Init+0x104>)
 800496a:	0018      	movs	r0, r3
 800496c:	f000 fd8a 	bl	8005484 <HAL_TIM_MspPostInit>

}
 8004970:	46c0      	nop			; (mov r8, r8)
 8004972:	46bd      	mov	sp, r7
 8004974:	b006      	add	sp, #24
 8004976:	bd80      	pop	{r7, pc}
 8004978:	200000c0 	.word	0x200000c0
 800497c:	40000400 	.word	0x40000400
 8004980:	0000ffff 	.word	0x0000ffff

08004984 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800498a:	003b      	movs	r3, r7
 800498c:	0018      	movs	r0, r3
 800498e:	2308      	movs	r3, #8
 8004990:	001a      	movs	r2, r3
 8004992:	2100      	movs	r1, #0
 8004994:	f001 fb46 	bl	8006024 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004998:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <MX_TIM6_Init+0x6c>)
 800499a:	4a16      	ldr	r2, [pc, #88]	; (80049f4 <MX_TIM6_Init+0x70>)
 800499c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2099;
 800499e:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <MX_TIM6_Init+0x6c>)
 80049a0:	4a15      	ldr	r2, [pc, #84]	; (80049f8 <MX_TIM6_Init+0x74>)
 80049a2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049a4:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <MX_TIM6_Init+0x6c>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 80049aa:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <MX_TIM6_Init+0x6c>)
 80049ac:	22f4      	movs	r2, #244	; 0xf4
 80049ae:	32ff      	adds	r2, #255	; 0xff
 80049b0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049b2:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <MX_TIM6_Init+0x6c>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80049b8:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <MX_TIM6_Init+0x6c>)
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7fd fe96 	bl	80026ec <HAL_TIM_Base_Init>
 80049c0:	1e03      	subs	r3, r0, #0
 80049c2:	d001      	beq.n	80049c8 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 80049c4:	f000 fc48 	bl	8005258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049c8:	003b      	movs	r3, r7
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049ce:	003b      	movs	r3, r7
 80049d0:	2200      	movs	r2, #0
 80049d2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80049d4:	003a      	movs	r2, r7
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <MX_TIM6_Init+0x6c>)
 80049d8:	0011      	movs	r1, r2
 80049da:	0018      	movs	r0, r3
 80049dc:	f7fe fdd7 	bl	800358e <HAL_TIMEx_MasterConfigSynchronization>
 80049e0:	1e03      	subs	r3, r0, #0
 80049e2:	d001      	beq.n	80049e8 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 80049e4:	f000 fc38 	bl	8005258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80049e8:	46c0      	nop			; (mov r8, r8)
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b002      	add	sp, #8
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20000144 	.word	0x20000144
 80049f4:	40001000 	.word	0x40001000
 80049f8:	00000833 	.word	0x00000833

080049fc <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a02:	2310      	movs	r3, #16
 8004a04:	18fb      	adds	r3, r7, r3
 8004a06:	0018      	movs	r0, r3
 8004a08:	2308      	movs	r3, #8
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	f001 fb09 	bl	8006024 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a12:	003b      	movs	r3, r7
 8004a14:	0018      	movs	r0, r3
 8004a16:	2310      	movs	r3, #16
 8004a18:	001a      	movs	r2, r3
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	f001 fb02 	bl	8006024 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8004a20:	4b22      	ldr	r3, [pc, #136]	; (8004aac <MX_TIM21_Init+0xb0>)
 8004a22:	4a23      	ldr	r2, [pc, #140]	; (8004ab0 <MX_TIM21_Init+0xb4>)
 8004a24:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8004a26:	4b21      	ldr	r3, [pc, #132]	; (8004aac <MX_TIM21_Init+0xb0>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a2c:	4b1f      	ldr	r3, [pc, #124]	; (8004aac <MX_TIM21_Init+0xb0>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 209;
 8004a32:	4b1e      	ldr	r3, [pc, #120]	; (8004aac <MX_TIM21_Init+0xb0>)
 8004a34:	22d1      	movs	r2, #209	; 0xd1
 8004a36:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a38:	4b1c      	ldr	r3, [pc, #112]	; (8004aac <MX_TIM21_Init+0xb0>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a3e:	4b1b      	ldr	r3, [pc, #108]	; (8004aac <MX_TIM21_Init+0xb0>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8004a44:	4b19      	ldr	r3, [pc, #100]	; (8004aac <MX_TIM21_Init+0xb0>)
 8004a46:	0018      	movs	r0, r3
 8004a48:	f7fd fe9e 	bl	8002788 <HAL_TIM_OC_Init>
 8004a4c:	1e03      	subs	r3, r0, #0
 8004a4e:	d001      	beq.n	8004a54 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8004a50:	f000 fc02 	bl	8005258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a54:	2110      	movs	r1, #16
 8004a56:	187b      	adds	r3, r7, r1
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a5c:	187b      	adds	r3, r7, r1
 8004a5e:	2200      	movs	r2, #0
 8004a60:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8004a62:	187a      	adds	r2, r7, r1
 8004a64:	4b11      	ldr	r3, [pc, #68]	; (8004aac <MX_TIM21_Init+0xb0>)
 8004a66:	0011      	movs	r1, r2
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f7fe fd90 	bl	800358e <HAL_TIMEx_MasterConfigSynchronization>
 8004a6e:	1e03      	subs	r3, r0, #0
 8004a70:	d001      	beq.n	8004a76 <MX_TIM21_Init+0x7a>
  {
    Error_Handler();
 8004a72:	f000 fbf1 	bl	8005258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8004a76:	003b      	movs	r3, r7
 8004a78:	2210      	movs	r2, #16
 8004a7a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004a7c:	003b      	movs	r3, r7
 8004a7e:	2200      	movs	r2, #0
 8004a80:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a82:	003b      	movs	r3, r7
 8004a84:	2200      	movs	r2, #0
 8004a86:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a88:	003b      	movs	r3, r7
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a8e:	0039      	movs	r1, r7
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <MX_TIM21_Init+0xb0>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	0018      	movs	r0, r3
 8004a96:	f7fe f8a4 	bl	8002be2 <HAL_TIM_OC_ConfigChannel>
 8004a9a:	1e03      	subs	r3, r0, #0
 8004a9c:	d001      	beq.n	8004aa2 <MX_TIM21_Init+0xa6>
  {
    Error_Handler();
 8004a9e:	f000 fbdb 	bl	8005258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b006      	add	sp, #24
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	200002a8 	.word	0x200002a8
 8004ab0:	40010800 	.word	0x40010800

08004ab4 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8004ab4:	b590      	push	{r4, r7, lr}
 8004ab6:	b08d      	sub	sp, #52	; 0x34
 8004ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004aba:	240c      	movs	r4, #12
 8004abc:	193b      	adds	r3, r7, r4
 8004abe:	0018      	movs	r0, r3
 8004ac0:	2324      	movs	r3, #36	; 0x24
 8004ac2:	001a      	movs	r2, r3
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	f001 faad 	bl	8006024 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004aca:	1d3b      	adds	r3, r7, #4
 8004acc:	0018      	movs	r0, r3
 8004ace:	2308      	movs	r3, #8
 8004ad0:	001a      	movs	r2, r3
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	f001 faa6 	bl	8006024 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8004ad8:	4b2e      	ldr	r3, [pc, #184]	; (8004b94 <MX_TIM22_Init+0xe0>)
 8004ada:	4a2f      	ldr	r2, [pc, #188]	; (8004b98 <MX_TIM22_Init+0xe4>)
 8004adc:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 8004ade:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <MX_TIM22_Init+0xe0>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ae4:	4b2b      	ldr	r3, [pc, #172]	; (8004b94 <MX_TIM22_Init+0xe0>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 65000;
 8004aea:	4b2a      	ldr	r3, [pc, #168]	; (8004b94 <MX_TIM22_Init+0xe0>)
 8004aec:	4a2b      	ldr	r2, [pc, #172]	; (8004b9c <MX_TIM22_Init+0xe8>)
 8004aee:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004af0:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <MX_TIM22_Init+0xe0>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004af6:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <MX_TIM22_Init+0xe0>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004afc:	0021      	movs	r1, r4
 8004afe:	187b      	adds	r3, r7, r1
 8004b00:	2201      	movs	r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004b04:	187b      	adds	r3, r7, r1
 8004b06:	2202      	movs	r2, #2
 8004b08:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004b0a:	187b      	adds	r3, r7, r1
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004b10:	187b      	adds	r3, r7, r1
 8004b12:	2200      	movs	r2, #0
 8004b14:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 5;
 8004b16:	187b      	adds	r3, r7, r1
 8004b18:	2205      	movs	r2, #5
 8004b1a:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004b1c:	187b      	adds	r3, r7, r1
 8004b1e:	2202      	movs	r2, #2
 8004b20:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004b22:	187b      	adds	r3, r7, r1
 8004b24:	2201      	movs	r2, #1
 8004b26:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004b28:	187b      	adds	r3, r7, r1
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 5;
 8004b2e:	187b      	adds	r3, r7, r1
 8004b30:	2205      	movs	r2, #5
 8004b32:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim22, &sConfig) != HAL_OK)
 8004b34:	187a      	adds	r2, r7, r1
 8004b36:	4b17      	ldr	r3, [pc, #92]	; (8004b94 <MX_TIM22_Init+0xe0>)
 8004b38:	0011      	movs	r1, r2
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f7fd fe9e 	bl	800287c <HAL_TIM_Encoder_Init>
 8004b40:	1e03      	subs	r3, r0, #0
 8004b42:	d001      	beq.n	8004b48 <MX_TIM22_Init+0x94>
  {
    Error_Handler();
 8004b44:	f000 fb88 	bl	8005258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b48:	1d3b      	adds	r3, r7, #4
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b4e:	1d3b      	adds	r3, r7, #4
 8004b50:	2200      	movs	r2, #0
 8004b52:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8004b54:	1d3a      	adds	r2, r7, #4
 8004b56:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <MX_TIM22_Init+0xe0>)
 8004b58:	0011      	movs	r1, r2
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f7fe fd17 	bl	800358e <HAL_TIMEx_MasterConfigSynchronization>
 8004b60:	1e03      	subs	r3, r0, #0
 8004b62:	d001      	beq.n	8004b68 <MX_TIM22_Init+0xb4>
  {
    Error_Handler();
 8004b64:	f000 fb78 	bl	8005258 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM3_TI1_GPIO) != HAL_OK)
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <MX_TIM22_Init+0xe0>)
 8004b6a:	2104      	movs	r1, #4
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f7fe fd51 	bl	8003614 <HAL_TIMEx_RemapConfig>
 8004b72:	1e03      	subs	r3, r0, #0
 8004b74:	d001      	beq.n	8004b7a <MX_TIM22_Init+0xc6>
  {
    Error_Handler();
 8004b76:	f000 fb6f 	bl	8005258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_TI1_GPIO) != HAL_OK)
 8004b7a:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <MX_TIM22_Init+0xe0>)
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f7fe fd48 	bl	8003614 <HAL_TIMEx_RemapConfig>
 8004b84:	1e03      	subs	r3, r0, #0
 8004b86:	d001      	beq.n	8004b8c <MX_TIM22_Init+0xd8>
    {
      Error_Handler();
 8004b88:	f000 fb66 	bl	8005258 <Error_Handler>
    }
  /* USER CODE END TIM22_Init 2 */

}
 8004b8c:	46c0      	nop			; (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b00d      	add	sp, #52	; 0x34
 8004b92:	bd90      	pop	{r4, r7, pc}
 8004b94:	200000fc 	.word	0x200000fc
 8004b98:	40011400 	.word	0x40011400
 8004b9c:	0000fde8 	.word	0x0000fde8

08004ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ba4:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004ba6:	4a15      	ldr	r2, [pc, #84]	; (8004bfc <MX_USART2_UART_Init+0x5c>)
 8004ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004baa:	4b13      	ldr	r3, [pc, #76]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bac:	22e1      	movs	r2, #225	; 0xe1
 8004bae:	0252      	lsls	r2, r2, #9
 8004bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004bb2:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004bb8:	4b0f      	ldr	r3, [pc, #60]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004bbe:	4b0e      	ldr	r3, [pc, #56]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bc6:	220c      	movs	r2, #12
 8004bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bd0:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <MX_USART2_UART_Init+0x58>)
 8004be4:	0018      	movs	r0, r3
 8004be6:	f7fe fd33 	bl	8003650 <HAL_UART_Init>
 8004bea:	1e03      	subs	r3, r0, #0
 8004bec:	d001      	beq.n	8004bf2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004bee:	f000 fb33 	bl	8005258 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	200001bc 	.word	0x200001bc
 8004bfc:	40004400 	.word	0x40004400

08004c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b08b      	sub	sp, #44	; 0x2c
 8004c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c06:	2414      	movs	r4, #20
 8004c08:	193b      	adds	r3, r7, r4
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	2314      	movs	r3, #20
 8004c0e:	001a      	movs	r2, r3
 8004c10:	2100      	movs	r1, #0
 8004c12:	f001 fa07 	bl	8006024 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c16:	4b66      	ldr	r3, [pc, #408]	; (8004db0 <MX_GPIO_Init+0x1b0>)
 8004c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1a:	4b65      	ldr	r3, [pc, #404]	; (8004db0 <MX_GPIO_Init+0x1b0>)
 8004c1c:	2104      	movs	r1, #4
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c22:	4b63      	ldr	r3, [pc, #396]	; (8004db0 <MX_GPIO_Init+0x1b0>)
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	2204      	movs	r2, #4
 8004c28:	4013      	ands	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c2e:	4b60      	ldr	r3, [pc, #384]	; (8004db0 <MX_GPIO_Init+0x1b0>)
 8004c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c32:	4b5f      	ldr	r3, [pc, #380]	; (8004db0 <MX_GPIO_Init+0x1b0>)
 8004c34:	2180      	movs	r1, #128	; 0x80
 8004c36:	430a      	orrs	r2, r1
 8004c38:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c3a:	4b5d      	ldr	r3, [pc, #372]	; (8004db0 <MX_GPIO_Init+0x1b0>)
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3e:	2280      	movs	r2, #128	; 0x80
 8004c40:	4013      	ands	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c46:	4b5a      	ldr	r3, [pc, #360]	; (8004db0 <MX_GPIO_Init+0x1b0>)
 8004c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4a:	4b59      	ldr	r3, [pc, #356]	; (8004db0 <MX_GPIO_Init+0x1b0>)
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c52:	4b57      	ldr	r3, [pc, #348]	; (8004db0 <MX_GPIO_Init+0x1b0>)
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	2201      	movs	r2, #1
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c5e:	4b54      	ldr	r3, [pc, #336]	; (8004db0 <MX_GPIO_Init+0x1b0>)
 8004c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c62:	4b53      	ldr	r3, [pc, #332]	; (8004db0 <MX_GPIO_Init+0x1b0>)
 8004c64:	2102      	movs	r1, #2
 8004c66:	430a      	orrs	r2, r1
 8004c68:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c6a:	4b51      	ldr	r3, [pc, #324]	; (8004db0 <MX_GPIO_Init+0x1b0>)
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	2202      	movs	r2, #2
 8004c70:	4013      	ands	r3, r2
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8004c76:	2398      	movs	r3, #152	; 0x98
 8004c78:	0059      	lsls	r1, r3, #1
 8004c7a:	23a0      	movs	r3, #160	; 0xa0
 8004c7c:	05db      	lsls	r3, r3, #23
 8004c7e:	2200      	movs	r2, #0
 8004c80:	0018      	movs	r0, r3
 8004c82:	f7fc fdc7 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(soil_meter_power_GPIO_Port, soil_meter_power_Pin, GPIO_PIN_SET);
 8004c86:	4b4b      	ldr	r3, [pc, #300]	; (8004db4 <MX_GPIO_Init+0x1b4>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	2120      	movs	r1, #32
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7fc fdc1 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 8004c92:	193b      	adds	r3, r7, r4
 8004c94:	22e0      	movs	r2, #224	; 0xe0
 8004c96:	0192      	lsls	r2, r2, #6
 8004c98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c9a:	193b      	adds	r3, r7, r4
 8004c9c:	4a46      	ldr	r2, [pc, #280]	; (8004db8 <MX_GPIO_Init+0x1b8>)
 8004c9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca0:	193b      	adds	r3, r7, r4
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ca6:	193b      	adds	r3, r7, r4
 8004ca8:	4a42      	ldr	r2, [pc, #264]	; (8004db4 <MX_GPIO_Init+0x1b4>)
 8004caa:	0019      	movs	r1, r3
 8004cac:	0010      	movs	r0, r2
 8004cae:	f7fc fc33 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004cb2:	0021      	movs	r1, r4
 8004cb4:	187b      	adds	r3, r7, r1
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004cba:	187b      	adds	r3, r7, r1
 8004cbc:	4a3e      	ldr	r2, [pc, #248]	; (8004db8 <MX_GPIO_Init+0x1b8>)
 8004cbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc0:	187b      	adds	r3, r7, r1
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cc6:	000c      	movs	r4, r1
 8004cc8:	187a      	adds	r2, r7, r1
 8004cca:	23a0      	movs	r3, #160	; 0xa0
 8004ccc:	05db      	lsls	r3, r3, #23
 8004cce:	0011      	movs	r1, r2
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f7fc fc21 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 8004cd6:	0021      	movs	r1, r4
 8004cd8:	187b      	adds	r3, r7, r1
 8004cda:	2298      	movs	r2, #152	; 0x98
 8004cdc:	0052      	lsls	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ce0:	187b      	adds	r3, r7, r1
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce6:	187b      	adds	r3, r7, r1
 8004ce8:	2200      	movs	r2, #0
 8004cea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cec:	187b      	adds	r3, r7, r1
 8004cee:	2200      	movs	r2, #0
 8004cf0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf2:	000c      	movs	r4, r1
 8004cf4:	187a      	adds	r2, r7, r1
 8004cf6:	23a0      	movs	r3, #160	; 0xa0
 8004cf8:	05db      	lsls	r3, r3, #23
 8004cfa:	0011      	movs	r1, r2
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f7fc fc0b 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pin : soil_meter_power_Pin */
  GPIO_InitStruct.Pin = soil_meter_power_Pin;
 8004d02:	193b      	adds	r3, r7, r4
 8004d04:	2220      	movs	r2, #32
 8004d06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d08:	193b      	adds	r3, r7, r4
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0e:	193b      	adds	r3, r7, r4
 8004d10:	2200      	movs	r2, #0
 8004d12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d14:	193b      	adds	r3, r7, r4
 8004d16:	2200      	movs	r2, #0
 8004d18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(soil_meter_power_GPIO_Port, &GPIO_InitStruct);
 8004d1a:	193b      	adds	r3, r7, r4
 8004d1c:	4a25      	ldr	r2, [pc, #148]	; (8004db4 <MX_GPIO_Init+0x1b4>)
 8004d1e:	0019      	movs	r1, r3
 8004d20:	0010      	movs	r0, r2
 8004d22:	f7fc fbf9 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_CLIFF_SENSOR_Pin */
  GPIO_InitStruct.Pin = IR_CLIFF_SENSOR_Pin;
 8004d26:	193b      	adds	r3, r7, r4
 8004d28:	2280      	movs	r2, #128	; 0x80
 8004d2a:	0092      	lsls	r2, r2, #2
 8004d2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004d2e:	193b      	adds	r3, r7, r4
 8004d30:	4a22      	ldr	r2, [pc, #136]	; (8004dbc <MX_GPIO_Init+0x1bc>)
 8004d32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d34:	193b      	adds	r3, r7, r4
 8004d36:	2200      	movs	r2, #0
 8004d38:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IR_CLIFF_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8004d3a:	193a      	adds	r2, r7, r4
 8004d3c:	23a0      	movs	r3, #160	; 0xa0
 8004d3e:	05db      	lsls	r3, r3, #23
 8004d40:	0011      	movs	r1, r2
 8004d42:	0018      	movs	r0, r3
 8004d44:	f7fc fbe8 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_FORWARD_Pin IR_LEFT_Pin IR_RIGHT_Pin */
  GPIO_InitStruct.Pin = IR_FORWARD_Pin|IR_LEFT_Pin|IR_RIGHT_Pin;
 8004d48:	193b      	adds	r3, r7, r4
 8004d4a:	22e0      	movs	r2, #224	; 0xe0
 8004d4c:	0152      	lsls	r2, r2, #5
 8004d4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d50:	193b      	adds	r3, r7, r4
 8004d52:	2200      	movs	r2, #0
 8004d54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d56:	193b      	adds	r3, r7, r4
 8004d58:	2200      	movs	r2, #0
 8004d5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d5c:	193a      	adds	r2, r7, r4
 8004d5e:	23a0      	movs	r3, #160	; 0xa0
 8004d60:	05db      	lsls	r3, r3, #23
 8004d62:	0011      	movs	r1, r2
 8004d64:	0018      	movs	r0, r3
 8004d66:	f7fc fbd7 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary_Encoder_PushButton_Pin */
  GPIO_InitStruct.Pin = Rotary_Encoder_PushButton_Pin;
 8004d6a:	193b      	adds	r3, r7, r4
 8004d6c:	2240      	movs	r2, #64	; 0x40
 8004d6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d70:	193b      	adds	r3, r7, r4
 8004d72:	4a11      	ldr	r2, [pc, #68]	; (8004db8 <MX_GPIO_Init+0x1b8>)
 8004d74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d76:	193b      	adds	r3, r7, r4
 8004d78:	2200      	movs	r2, #0
 8004d7a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Rotary_Encoder_PushButton_GPIO_Port, &GPIO_InitStruct);
 8004d7c:	193b      	adds	r3, r7, r4
 8004d7e:	4a10      	ldr	r2, [pc, #64]	; (8004dc0 <MX_GPIO_Init+0x1c0>)
 8004d80:	0019      	movs	r1, r3
 8004d82:	0010      	movs	r0, r2
 8004d84:	f7fc fbc8 	bl	8001518 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	2005      	movs	r0, #5
 8004d8e:	f7fc fb91 	bl	80014b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8004d92:	2005      	movs	r0, #5
 8004d94:	f7fc fba3 	bl	80014de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	2007      	movs	r0, #7
 8004d9e:	f7fc fb89 	bl	80014b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004da2:	2007      	movs	r0, #7
 8004da4:	f7fc fb9b 	bl	80014de <HAL_NVIC_EnableIRQ>

}
 8004da8:	46c0      	nop			; (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b00b      	add	sp, #44	; 0x2c
 8004dae:	bd90      	pop	{r4, r7, pc}
 8004db0:	40021000 	.word	0x40021000
 8004db4:	50000800 	.word	0x50000800
 8004db8:	10110000 	.word	0x10110000
 8004dbc:	10210000 	.word	0x10210000
 8004dc0:	50000400 	.word	0x50000400

08004dc4 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <__io_putchar+0x20>)
 8004dce:	1d39      	adds	r1, r7, #4
 8004dd0:	4805      	ldr	r0, [pc, #20]	; (8004de8 <__io_putchar+0x24>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f7fe fc90 	bl	80036f8 <HAL_UART_Transmit>

return ch;
 8004dd8:	687b      	ldr	r3, [r7, #4]
}
 8004dda:	0018      	movs	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b002      	add	sp, #8
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	0000ffff 	.word	0x0000ffff
 8004de8:	200001bc 	.word	0x200001bc

08004dec <Right_Encoder_Interrupt_Handler>:

void Right_Encoder_Interrupt_Handler(void){
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
//	r_enc_cnt++;
	if(r_dir==1)
 8004df0:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <Right_Encoder_Interrupt_Handler+0x28>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d105      	bne.n	8004e04 <Right_Encoder_Interrupt_Handler+0x18>
		r_enc_currentPos++;
 8004df8:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <Right_Encoder_Interrupt_Handler+0x2c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <Right_Encoder_Interrupt_Handler+0x2c>)
 8004e00:	601a      	str	r2, [r3, #0]
	else
		r_enc_currentPos--;
}
 8004e02:	e004      	b.n	8004e0e <Right_Encoder_Interrupt_Handler+0x22>
		r_enc_currentPos--;
 8004e04:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <Right_Encoder_Interrupt_Handler+0x2c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	1e5a      	subs	r2, r3, #1
 8004e0a:	4b03      	ldr	r3, [pc, #12]	; (8004e18 <Right_Encoder_Interrupt_Handler+0x2c>)
 8004e0c:	601a      	str	r2, [r3, #0]
}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	200000bc 	.word	0x200000bc
 8004e18:	20000088 	.word	0x20000088

08004e1c <Left_Encoder_Interrupt_Handler>:

void Left_Encoder_Interrupt_Handler(void){
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
	if(l_dir==1)
 8004e20:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <Left_Encoder_Interrupt_Handler+0x28>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d105      	bne.n	8004e34 <Left_Encoder_Interrupt_Handler+0x18>
		l_enc_currentPos++;
 8004e28:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <Left_Encoder_Interrupt_Handler+0x2c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <Left_Encoder_Interrupt_Handler+0x2c>)
 8004e30:	601a      	str	r2, [r3, #0]
	else
		l_enc_currentPos--;
}
 8004e32:	e004      	b.n	8004e3e <Left_Encoder_Interrupt_Handler+0x22>
		l_enc_currentPos--;
 8004e34:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <Left_Encoder_Interrupt_Handler+0x2c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	1e5a      	subs	r2, r3, #1
 8004e3a:	4b03      	ldr	r3, [pc, #12]	; (8004e48 <Left_Encoder_Interrupt_Handler+0x2c>)
 8004e3c:	601a      	str	r2, [r3, #0]
}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	200002a4 	.word	0x200002a4
 8004e48:	20000090 	.word	0x20000090

08004e4c <Right_Motor_PWM_Gen>:



void Right_Motor_PWM_Gen(int speed, int brake){
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
	// if brake is true, brake and ignore speed setting
	if (brake){
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <Right_Motor_PWM_Gen+0x22>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, MOTOR_MAX_SPEED);
 8004e5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <Right_Motor_PWM_Gen+0x7c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1a      	ldr	r2, [pc, #104]	; (8004ecc <Right_Motor_PWM_Gen+0x80>)
 8004e62:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MOTOR_MAX_SPEED);
 8004e64:	4b18      	ldr	r3, [pc, #96]	; (8004ec8 <Right_Motor_PWM_Gen+0x7c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a18      	ldr	r2, [pc, #96]	; (8004ecc <Right_Motor_PWM_Gen+0x80>)
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38
		} else {
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
		}
	}
}
 8004e6c:	e027      	b.n	8004ebe <Right_Motor_PWM_Gen+0x72>
		if(speed < 0){
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	da06      	bge.n	8004e82 <Right_Motor_PWM_Gen+0x36>
			r_dir = 0;
 8004e74:	4b16      	ldr	r3, [pc, #88]	; (8004ed0 <Right_Motor_PWM_Gen+0x84>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
			speed = -speed;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	425b      	negs	r3, r3
 8004e7e:	607b      	str	r3, [r7, #4]
 8004e80:	e002      	b.n	8004e88 <Right_Motor_PWM_Gen+0x3c>
			r_dir = 1;
 8004e82:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <Right_Motor_PWM_Gen+0x84>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
		if(speed > MOTOR_MAX_SPEED)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a10      	ldr	r2, [pc, #64]	; (8004ecc <Right_Motor_PWM_Gen+0x80>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	dd01      	ble.n	8004e94 <Right_Motor_PWM_Gen+0x48>
			speed = MOTOR_MAX_SPEED;
 8004e90:	4b0e      	ldr	r3, [pc, #56]	; (8004ecc <Right_Motor_PWM_Gen+0x80>)
 8004e92:	607b      	str	r3, [r7, #4]
		if(r_dir==1){
 8004e94:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <Right_Motor_PWM_Gen+0x84>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d108      	bne.n	8004eae <Right_Motor_PWM_Gen+0x62>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <Right_Motor_PWM_Gen+0x7c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8004ea4:	4b08      	ldr	r3, [pc, #32]	; (8004ec8 <Right_Motor_PWM_Gen+0x7c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004eac:	e007      	b.n	8004ebe <Right_Motor_PWM_Gen+0x72>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <Right_Motor_PWM_Gen+0x7c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8004eb6:	4b04      	ldr	r3, [pc, #16]	; (8004ec8 <Right_Motor_PWM_Gen+0x7c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b002      	add	sp, #8
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	200000c0 	.word	0x200000c0
 8004ecc:	0000ffff 	.word	0x0000ffff
 8004ed0:	200000bc 	.word	0x200000bc

08004ed4 <Left_Motor_PWM_Gen>:

void Left_Motor_PWM_Gen(int speed, int brake){
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
	// if brake is true, brake and ignore speed setting
	if (brake){
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <Left_Motor_PWM_Gen+0x22>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, MOTOR_MAX_SPEED);
 8004ee4:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <Left_Motor_PWM_Gen+0x7c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1a      	ldr	r2, [pc, #104]	; (8004f54 <Left_Motor_PWM_Gen+0x80>)
 8004eea:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, MOTOR_MAX_SPEED);
 8004eec:	4b18      	ldr	r3, [pc, #96]	; (8004f50 <Left_Motor_PWM_Gen+0x7c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <Left_Motor_PWM_Gen+0x80>)
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40
		} else {
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, speed);
		}
	}
}
 8004ef4:	e027      	b.n	8004f46 <Left_Motor_PWM_Gen+0x72>
		if(speed < 0){
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	da06      	bge.n	8004f0a <Left_Motor_PWM_Gen+0x36>
			l_dir = 0;
 8004efc:	4b16      	ldr	r3, [pc, #88]	; (8004f58 <Left_Motor_PWM_Gen+0x84>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
			speed = -speed;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	425b      	negs	r3, r3
 8004f06:	607b      	str	r3, [r7, #4]
 8004f08:	e002      	b.n	8004f10 <Left_Motor_PWM_Gen+0x3c>
			l_dir = 1;
 8004f0a:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <Left_Motor_PWM_Gen+0x84>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
		if(speed > MOTOR_MAX_SPEED)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a10      	ldr	r2, [pc, #64]	; (8004f54 <Left_Motor_PWM_Gen+0x80>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	dd01      	ble.n	8004f1c <Left_Motor_PWM_Gen+0x48>
			speed = MOTOR_MAX_SPEED;
 8004f18:	4b0e      	ldr	r3, [pc, #56]	; (8004f54 <Left_Motor_PWM_Gen+0x80>)
 8004f1a:	607b      	str	r3, [r7, #4]
		if(l_dir==1){
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <Left_Motor_PWM_Gen+0x84>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d108      	bne.n	8004f36 <Left_Motor_PWM_Gen+0x62>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, speed);
 8004f24:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <Left_Motor_PWM_Gen+0x7c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8004f2c:	4b08      	ldr	r3, [pc, #32]	; (8004f50 <Left_Motor_PWM_Gen+0x7c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2200      	movs	r2, #0
 8004f32:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004f34:	e007      	b.n	8004f46 <Left_Motor_PWM_Gen+0x72>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8004f36:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <Left_Motor_PWM_Gen+0x7c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, speed);
 8004f3e:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <Left_Motor_PWM_Gen+0x7c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b002      	add	sp, #8
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	200000c0 	.word	0x200000c0
 8004f54:	0000ffff 	.word	0x0000ffff
 8004f58:	200002a4 	.word	0x200002a4

08004f5c <move_robot>:
  		Left_Motor_PWM_Gen(duty, 0);
  	}

}

void move_robot(short dir, int speed){
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	0002      	movs	r2, r0
 8004f64:	6039      	str	r1, [r7, #0]
 8004f66:	1dbb      	adds	r3, r7, #6
 8004f68:	801a      	strh	r2, [r3, #0]
	if(speed <= 0){
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	dc08      	bgt.n	8004f82 <move_robot+0x26>
		Right_Motor_PWM_Gen(0,1);
 8004f70:	2101      	movs	r1, #1
 8004f72:	2000      	movs	r0, #0
 8004f74:	f7ff ff6a 	bl	8004e4c <Right_Motor_PWM_Gen>
		Left_Motor_PWM_Gen(0,1);
 8004f78:	2101      	movs	r1, #1
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	f7ff ffaa 	bl	8004ed4 <Left_Motor_PWM_Gen>
	} else if(dir == REVERSE){
		Right_Motor_PWM_Gen(-speed,0);
		Left_Motor_PWM_Gen(-speed,0);
	}
	}
}
 8004f80:	e042      	b.n	8005008 <move_robot+0xac>
		if(dir == TURN_LEFT){
 8004f82:	1dbb      	adds	r3, r7, #6
 8004f84:	2200      	movs	r2, #0
 8004f86:	5e9b      	ldrsh	r3, [r3, r2]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10b      	bne.n	8004fa4 <move_robot+0x48>
			Right_Motor_PWM_Gen(speed,0);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2100      	movs	r1, #0
 8004f90:	0018      	movs	r0, r3
 8004f92:	f7ff ff5b 	bl	8004e4c <Right_Motor_PWM_Gen>
			Left_Motor_PWM_Gen(-speed,0);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	425b      	negs	r3, r3
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f7ff ff99 	bl	8004ed4 <Left_Motor_PWM_Gen>
}
 8004fa2:	e031      	b.n	8005008 <move_robot+0xac>
	} else if(dir == TURN_RIGHT){
 8004fa4:	1dbb      	adds	r3, r7, #6
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	5e9b      	ldrsh	r3, [r3, r2]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d10b      	bne.n	8004fc6 <move_robot+0x6a>
			Right_Motor_PWM_Gen(-speed,0);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	425b      	negs	r3, r3
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f7ff ff49 	bl	8004e4c <Right_Motor_PWM_Gen>
			Left_Motor_PWM_Gen(speed,0);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f7ff ff88 	bl	8004ed4 <Left_Motor_PWM_Gen>
}
 8004fc4:	e020      	b.n	8005008 <move_robot+0xac>
	} else if(dir == FORWARD){
 8004fc6:	1dbb      	adds	r3, r7, #6
 8004fc8:	2200      	movs	r2, #0
 8004fca:	5e9b      	ldrsh	r3, [r3, r2]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d10a      	bne.n	8004fe6 <move_robot+0x8a>
		Right_Motor_PWM_Gen(speed,0);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7ff ff39 	bl	8004e4c <Right_Motor_PWM_Gen>
		Left_Motor_PWM_Gen(speed,0);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2100      	movs	r1, #0
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f7ff ff78 	bl	8004ed4 <Left_Motor_PWM_Gen>
}
 8004fe4:	e010      	b.n	8005008 <move_robot+0xac>
	} else if(dir == REVERSE){
 8004fe6:	1dbb      	adds	r3, r7, #6
 8004fe8:	2200      	movs	r2, #0
 8004fea:	5e9b      	ldrsh	r3, [r3, r2]
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d10b      	bne.n	8005008 <move_robot+0xac>
		Right_Motor_PWM_Gen(-speed,0);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	425b      	negs	r3, r3
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f7ff ff28 	bl	8004e4c <Right_Motor_PWM_Gen>
		Left_Motor_PWM_Gen(-speed,0);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	425b      	negs	r3, r3
 8005000:	2100      	movs	r1, #0
 8005002:	0018      	movs	r0, r3
 8005004:	f7ff ff66 	bl	8004ed4 <Left_Motor_PWM_Gen>
}
 8005008:	46c0      	nop			; (mov r8, r8)
 800500a:	46bd      	mov	sp, r7
 800500c:	b002      	add	sp, #8
 800500e:	bd80      	pop	{r7, pc}

08005010 <TEN_KHZ_TIM_Interrupt_Handler>:

void TEN_KHZ_TIM_Interrupt_Handler(void){
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
////		Right_Motor_Position_Controller();
////		Left_Motor_Position_Controller();
////		Read_Light_Sensors();
//		ten_hz_counter = 0;
//	}
}
 8005014:	46c0      	nop			; (mov r8, r8)
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <Print_Encoder_Reading>:
//	HAL_Delay(200);

}
// Debugging function - prints the right motor encoder reading when the blue button is pushed
void Print_Encoder_Reading(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
	printf("Rotations: %d          \r", r_enc_currentPos);
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <Print_Encoder_Reading+0x24>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	4b07      	ldr	r3, [pc, #28]	; (8005044 <Print_Encoder_Reading+0x28>)
 8005026:	0011      	movs	r1, r2
 8005028:	0018      	movs	r0, r3
 800502a:	f001 f8ab 	bl	8006184 <iprintf>
	fflush(stdout);
 800502e:	4b06      	ldr	r3, [pc, #24]	; (8005048 <Print_Encoder_Reading+0x2c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	0018      	movs	r0, r3
 8005036:	f000 fee7 	bl	8005e08 <fflush>
//	r_enc_currentPos = 0;
}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20000088 	.word	0x20000088
 8005044:	08006ce4 	.word	0x08006ce4
 8005048:	20000004 	.word	0x20000004

0800504c <ADC_ConvCpltCallback>:

void ADC_ConvCpltCallback(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
	for(int i = 0; i < 5; i++){
 8005052:	2300      	movs	r3, #0
 8005054:	607b      	str	r3, [r7, #4]
 8005056:	e00a      	b.n	800506e <ADC_ConvCpltCallback+0x22>
		ADC_Values[i] = buffer[i];
 8005058:	4b08      	ldr	r3, [pc, #32]	; (800507c <ADC_ConvCpltCallback+0x30>)
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	0052      	lsls	r2, r2, #1
 800505e:	5ad1      	ldrh	r1, [r2, r3]
 8005060:	4b07      	ldr	r3, [pc, #28]	; (8005080 <ADC_ConvCpltCallback+0x34>)
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	0052      	lsls	r2, r2, #1
 8005066:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < 5; i++){
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3301      	adds	r3, #1
 800506c:	607b      	str	r3, [r7, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b04      	cmp	r3, #4
 8005072:	ddf1      	ble.n	8005058 <ADC_ConvCpltCallback+0xc>
	}
//	printf("%u, %u, %u, %u\r\n", ADC_Values[0], ADC_Values[1],ADC_Values[2], ADC_Values[3]);
}
 8005074:	46c0      	nop			; (mov r8, r8)
 8005076:	46bd      	mov	sp, r7
 8005078:	b002      	add	sp, #8
 800507a:	bd80      	pop	{r7, pc}
 800507c:	20000138 	.word	0x20000138
 8005080:	20000298 	.word	0x20000298

08005084 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
	printf("ERROR\r\n");
 800508c:	4b03      	ldr	r3, [pc, #12]	; (800509c <HAL_ADC_ErrorCallback+0x18>)
 800508e:	0018      	movs	r0, r3
 8005090:	f001 f8f2 	bl	8006278 <puts>
}
 8005094:	46c0      	nop			; (mov r8, r8)
 8005096:	46bd      	mov	sp, r7
 8005098:	b002      	add	sp, #8
 800509a:	bd80      	pop	{r7, pc}
 800509c:	08006d00 	.word	0x08006d00

080050a0 <check_light>:

/**
 *  @brief This function computes the optimal light direction if 1 direction is 5% brighter than the other 3, otherwise returns -1
 */
int check_light(void){
 80050a0:	b5b0      	push	{r4, r5, r7, lr}
 80050a2:	b08a      	sub	sp, #40	; 0x28
 80050a4:	af00      	add	r7, sp, #0
//	return 0;
	int front = (int)ADC_Values[0];
 80050a6:	4b39      	ldr	r3, [pc, #228]	; (800518c <check_light+0xec>)
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
	int left = (int)ADC_Values[1];
 80050ac:	4b37      	ldr	r3, [pc, #220]	; (800518c <check_light+0xec>)
 80050ae:	885b      	ldrh	r3, [r3, #2]
 80050b0:	623b      	str	r3, [r7, #32]
	int rear = (int)ADC_Values[2];
 80050b2:	4b36      	ldr	r3, [pc, #216]	; (800518c <check_light+0xec>)
 80050b4:	889b      	ldrh	r3, [r3, #4]
 80050b6:	61fb      	str	r3, [r7, #28]
	int right = (int)ADC_Values[3];
 80050b8:	4b34      	ldr	r3, [pc, #208]	; (800518c <check_light+0xec>)
 80050ba:	88db      	ldrh	r3, [r3, #6]
 80050bc:	61bb      	str	r3, [r7, #24]

	int sum = front+left+rear+right;
 80050be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	18d2      	adds	r2, r2, r3
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	18d3      	adds	r3, r2, r3
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	18d3      	adds	r3, r2, r3
 80050cc:	617b      	str	r3, [r7, #20]
	int avg =  (float)sum / 4;
 80050ce:	6978      	ldr	r0, [r7, #20]
 80050d0:	f7fb faf8 	bl	80006c4 <__aeabi_i2f>
 80050d4:	1c03      	adds	r3, r0, #0
 80050d6:	2181      	movs	r1, #129	; 0x81
 80050d8:	05c9      	lsls	r1, r1, #23
 80050da:	1c18      	adds	r0, r3, #0
 80050dc:	f7fb f9c0 	bl	8000460 <__aeabi_fdiv>
 80050e0:	1c03      	adds	r3, r0, #0
 80050e2:	1c18      	adds	r0, r3, #0
 80050e4:	f7fb face 	bl	8000684 <__aeabi_f2iz>
 80050e8:	0003      	movs	r3, r0
 80050ea:	613b      	str	r3, [r7, #16]

	int max = fmax(fmax(front, left), fmax(rear, right));
 80050ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050ee:	f7fb fc71 	bl	80009d4 <__aeabi_i2d>
 80050f2:	0004      	movs	r4, r0
 80050f4:	000d      	movs	r5, r1
 80050f6:	6a38      	ldr	r0, [r7, #32]
 80050f8:	f7fb fc6c 	bl	80009d4 <__aeabi_i2d>
 80050fc:	0002      	movs	r2, r0
 80050fe:	000b      	movs	r3, r1
 8005100:	0020      	movs	r0, r4
 8005102:	0029      	movs	r1, r5
 8005104:	f001 fd8b 	bl	8006c1e <fmax>
 8005108:	0004      	movs	r4, r0
 800510a:	000d      	movs	r5, r1
 800510c:	69f8      	ldr	r0, [r7, #28]
 800510e:	f7fb fc61 	bl	80009d4 <__aeabi_i2d>
 8005112:	6038      	str	r0, [r7, #0]
 8005114:	6079      	str	r1, [r7, #4]
 8005116:	69b8      	ldr	r0, [r7, #24]
 8005118:	f7fb fc5c 	bl	80009d4 <__aeabi_i2d>
 800511c:	0002      	movs	r2, r0
 800511e:	000b      	movs	r3, r1
 8005120:	6838      	ldr	r0, [r7, #0]
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	f001 fd7b 	bl	8006c1e <fmax>
 8005128:	0002      	movs	r2, r0
 800512a:	000b      	movs	r3, r1
 800512c:	0020      	movs	r0, r4
 800512e:	0029      	movs	r1, r5
 8005130:	f001 fd75 	bl	8006c1e <fmax>
 8005134:	0003      	movs	r3, r0
 8005136:	000c      	movs	r4, r1
 8005138:	0018      	movs	r0, r3
 800513a:	0021      	movs	r1, r4
 800513c:	f7fb fc14 	bl	8000968 <__aeabi_d2iz>
 8005140:	0003      	movs	r3, r0
 8005142:	60fb      	str	r3, [r7, #12]

	float deviation = (float) (max-avg) / avg;
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	0018      	movs	r0, r3
 800514c:	f7fb faba 	bl	80006c4 <__aeabi_i2f>
 8005150:	1c04      	adds	r4, r0, #0
 8005152:	6938      	ldr	r0, [r7, #16]
 8005154:	f7fb fab6 	bl	80006c4 <__aeabi_i2f>
 8005158:	1c03      	adds	r3, r0, #0
 800515a:	1c19      	adds	r1, r3, #0
 800515c:	1c20      	adds	r0, r4, #0
 800515e:	f7fb f97f 	bl	8000460 <__aeabi_fdiv>
 8005162:	1c03      	adds	r3, r0, #0
 8005164:	60bb      	str	r3, [r7, #8]
	if(deviation < 0.2)
 8005166:	68b8      	ldr	r0, [r7, #8]
 8005168:	f7fb fc6e 	bl	8000a48 <__aeabi_f2d>
 800516c:	4a08      	ldr	r2, [pc, #32]	; (8005190 <check_light+0xf0>)
 800516e:	4b09      	ldr	r3, [pc, #36]	; (8005194 <check_light+0xf4>)
 8005170:	f7fb f86c 	bl	800024c <__aeabi_dcmplt>
 8005174:	1e03      	subs	r3, r0, #0
 8005176:	d002      	beq.n	800517e <check_light+0xde>
		return -1;
 8005178:	2301      	movs	r3, #1
 800517a:	425b      	negs	r3, r3
 800517c:	e002      	b.n	8005184 <check_light+0xe4>
	return light_direction();
 800517e:	f000 f83f 	bl	8005200 <light_direction>
 8005182:	0003      	movs	r3, r0
}
 8005184:	0018      	movs	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	b00a      	add	sp, #40	; 0x28
 800518a:	bdb0      	pop	{r4, r5, r7, pc}
 800518c:	20000298 	.word	0x20000298
 8005190:	9999999a 	.word	0x9999999a
 8005194:	3fc99999 	.word	0x3fc99999

08005198 <turn_until_light>:

/**
 * @brief Turn the robot until eval_fun returns a value equal to compare_value
 * @param dir: direction to turn, 0 = LEFT, 1 = RIGHT
 */
void turn_until_light(int dir, int compare_value){
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
//	move_robot(0,0);
//	int setpoint = 800;
	if(dir){
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <turn_until_light+0x1c>
		move_robot(TURN_LEFT, 30000);
 80051a8:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <turn_until_light+0x30>)
 80051aa:	0019      	movs	r1, r3
 80051ac:	2000      	movs	r0, #0
 80051ae:	f7ff fed5 	bl	8004f5c <move_robot>
	} else {
		move_robot(TURN_RIGHT, 30000);
	}
}
 80051b2:	e004      	b.n	80051be <turn_until_light+0x26>
		move_robot(TURN_RIGHT, 30000);
 80051b4:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <turn_until_light+0x30>)
 80051b6:	0019      	movs	r1, r3
 80051b8:	2001      	movs	r0, #1
 80051ba:	f7ff fecf 	bl	8004f5c <move_robot>
}
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	46bd      	mov	sp, r7
 80051c2:	b002      	add	sp, #8
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	46c0      	nop			; (mov r8, r8)
 80051c8:	00007530 	.word	0x00007530

080051cc <forward_until_light>:

/**
 * @brief This function moves the robot forward until eval_fun returns a value equal to compare_value
 */
void forward_until_light(int compare_value){
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
//	r_enc_currentPos = 0;
//	l_enc_currentPos = 0;
//	int setpoint = 800;
	if(check_light() == compare_value){
 80051d4:	f7ff ff64 	bl	80050a0 <check_light>
 80051d8:	0002      	movs	r2, r0
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4293      	cmp	r3, r2
 80051de:	d104      	bne.n	80051ea <forward_until_light+0x1e>
		move_robot(0, 0);
 80051e0:	2100      	movs	r1, #0
 80051e2:	2000      	movs	r0, #0
 80051e4:	f7ff feba 	bl	8004f5c <move_robot>
	} else {
		move_robot(FORWARD, 30000);
	}
}
 80051e8:	e004      	b.n	80051f4 <forward_until_light+0x28>
		move_robot(FORWARD, 30000);
 80051ea:	4b04      	ldr	r3, [pc, #16]	; (80051fc <forward_until_light+0x30>)
 80051ec:	0019      	movs	r1, r3
 80051ee:	2002      	movs	r0, #2
 80051f0:	f7ff feb4 	bl	8004f5c <move_robot>
}
 80051f4:	46c0      	nop			; (mov r8, r8)
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b002      	add	sp, #8
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	00007530 	.word	0x00007530

08005200 <light_direction>:

int light_direction(void){
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
	uint16_t max = 0;
 8005206:	230e      	movs	r3, #14
 8005208:	18fb      	adds	r3, r7, r3
 800520a:	2200      	movs	r2, #0
 800520c:	801a      	strh	r2, [r3, #0]
	int maxIndex = 0;
 800520e:	2300      	movs	r3, #0
 8005210:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i <= 3; i++){
 8005212:	2300      	movs	r3, #0
 8005214:	607b      	str	r3, [r7, #4]
 8005216:	e014      	b.n	8005242 <light_direction+0x42>
		if(ADC_Values[i] > max){
 8005218:	4b0e      	ldr	r3, [pc, #56]	; (8005254 <light_direction+0x54>)
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	0052      	lsls	r2, r2, #1
 800521e:	5ad3      	ldrh	r3, [r2, r3]
 8005220:	220e      	movs	r2, #14
 8005222:	18ba      	adds	r2, r7, r2
 8005224:	8812      	ldrh	r2, [r2, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d208      	bcs.n	800523c <light_direction+0x3c>
			max = ADC_Values[i];
 800522a:	230e      	movs	r3, #14
 800522c:	18fb      	adds	r3, r7, r3
 800522e:	4a09      	ldr	r2, [pc, #36]	; (8005254 <light_direction+0x54>)
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	0049      	lsls	r1, r1, #1
 8005234:	5a8a      	ldrh	r2, [r1, r2]
 8005236:	801a      	strh	r2, [r3, #0]
			maxIndex = i;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i <= 3; i++){
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3301      	adds	r3, #1
 8005240:	607b      	str	r3, [r7, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b03      	cmp	r3, #3
 8005246:	dde7      	ble.n	8005218 <light_direction+0x18>
		}
	}
	return maxIndex;
 8005248:	68bb      	ldr	r3, [r7, #8]
}
 800524a:	0018      	movs	r0, r3
 800524c:	46bd      	mov	sp, r7
 800524e:	b004      	add	sp, #16
 8005250:	bd80      	pop	{r7, pc}
 8005252:	46c0      	nop			; (mov r8, r8)
 8005254:	20000298 	.word	0x20000298

08005258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("ERRORRRRRR\r\n");
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <Error_Handler+0x14>)
 800525e:	0018      	movs	r0, r3
 8005260:	f001 f80a 	bl	8006278 <puts>
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005264:	46c0      	nop			; (mov r8, r8)
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	08006d08 	.word	0x08006d08

08005270 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005274:	4b07      	ldr	r3, [pc, #28]	; (8005294 <HAL_MspInit+0x24>)
 8005276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005278:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_MspInit+0x24>)
 800527a:	2101      	movs	r1, #1
 800527c:	430a      	orrs	r2, r1
 800527e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8005280:	4b04      	ldr	r3, [pc, #16]	; (8005294 <HAL_MspInit+0x24>)
 8005282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005284:	4b03      	ldr	r3, [pc, #12]	; (8005294 <HAL_MspInit+0x24>)
 8005286:	2180      	movs	r1, #128	; 0x80
 8005288:	0549      	lsls	r1, r1, #21
 800528a:	430a      	orrs	r2, r1
 800528c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40021000 	.word	0x40021000

08005298 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a0:	230c      	movs	r3, #12
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	0018      	movs	r0, r3
 80052a6:	2314      	movs	r3, #20
 80052a8:	001a      	movs	r2, r3
 80052aa:	2100      	movs	r1, #0
 80052ac:	f000 feba 	bl	8006024 <memset>
  if(hadc->Instance==ADC1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a18      	ldr	r2, [pc, #96]	; (8005318 <HAL_ADC_MspInit+0x80>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d12a      	bne.n	8005310 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80052ba:	4b18      	ldr	r3, [pc, #96]	; (800531c <HAL_ADC_MspInit+0x84>)
 80052bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052be:	4b17      	ldr	r3, [pc, #92]	; (800531c <HAL_ADC_MspInit+0x84>)
 80052c0:	2180      	movs	r1, #128	; 0x80
 80052c2:	0089      	lsls	r1, r1, #2
 80052c4:	430a      	orrs	r2, r1
 80052c6:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052c8:	4b14      	ldr	r3, [pc, #80]	; (800531c <HAL_ADC_MspInit+0x84>)
 80052ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052cc:	4b13      	ldr	r3, [pc, #76]	; (800531c <HAL_ADC_MspInit+0x84>)
 80052ce:	2104      	movs	r1, #4
 80052d0:	430a      	orrs	r2, r1
 80052d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80052d4:	4b11      	ldr	r3, [pc, #68]	; (800531c <HAL_ADC_MspInit+0x84>)
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	2204      	movs	r2, #4
 80052da:	4013      	ands	r3, r2
 80052dc:	60bb      	str	r3, [r7, #8]
 80052de:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC_IN11
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14 
    */
    GPIO_InitStruct.Pin = Front_Light_Sensor_Pin|Right_Light_Sensor_Pin|Rear_Light_Sensor_Pin|Left_Light_Sensor_Pin 
 80052e0:	210c      	movs	r1, #12
 80052e2:	187b      	adds	r3, r7, r1
 80052e4:	221f      	movs	r2, #31
 80052e6:	601a      	str	r2, [r3, #0]
                          |Soil_Moisture_Sensor_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052e8:	187b      	adds	r3, r7, r1
 80052ea:	2203      	movs	r2, #3
 80052ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ee:	187b      	adds	r3, r7, r1
 80052f0:	2200      	movs	r2, #0
 80052f2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052f4:	187b      	adds	r3, r7, r1
 80052f6:	4a0a      	ldr	r2, [pc, #40]	; (8005320 <HAL_ADC_MspInit+0x88>)
 80052f8:	0019      	movs	r1, r3
 80052fa:	0010      	movs	r0, r2
 80052fc:	f7fc f90c 	bl	8001518 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8005300:	2200      	movs	r2, #0
 8005302:	2100      	movs	r1, #0
 8005304:	200c      	movs	r0, #12
 8005306:	f7fc f8d5 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800530a:	200c      	movs	r0, #12
 800530c:	f7fc f8e7 	bl	80014de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005310:	46c0      	nop			; (mov r8, r8)
 8005312:	46bd      	mov	sp, r7
 8005314:	b008      	add	sp, #32
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40012400 	.word	0x40012400
 800531c:	40021000 	.word	0x40021000
 8005320:	50000800 	.word	0x50000800

08005324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	05db      	lsls	r3, r3, #23
 8005334:	429a      	cmp	r2, r3
 8005336:	d106      	bne.n	8005346 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005338:	4b0e      	ldr	r3, [pc, #56]	; (8005374 <HAL_TIM_Base_MspInit+0x50>)
 800533a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800533c:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <HAL_TIM_Base_MspInit+0x50>)
 800533e:	2101      	movs	r1, #1
 8005340:	430a      	orrs	r2, r1
 8005342:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8005344:	e012      	b.n	800536c <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM6)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a0b      	ldr	r2, [pc, #44]	; (8005378 <HAL_TIM_Base_MspInit+0x54>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d10d      	bne.n	800536c <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005350:	4b08      	ldr	r3, [pc, #32]	; (8005374 <HAL_TIM_Base_MspInit+0x50>)
 8005352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005354:	4b07      	ldr	r3, [pc, #28]	; (8005374 <HAL_TIM_Base_MspInit+0x50>)
 8005356:	2110      	movs	r1, #16
 8005358:	430a      	orrs	r2, r1
 800535a:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800535c:	2200      	movs	r2, #0
 800535e:	2100      	movs	r1, #0
 8005360:	2011      	movs	r0, #17
 8005362:	f7fc f8a7 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005366:	2011      	movs	r0, #17
 8005368:	f7fc f8b9 	bl	80014de <HAL_NVIC_EnableIRQ>
}
 800536c:	46c0      	nop			; (mov r8, r8)
 800536e:	46bd      	mov	sp, r7
 8005370:	b002      	add	sp, #8
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40021000 	.word	0x40021000
 8005378:	40001000 	.word	0x40001000

0800537c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a06      	ldr	r2, [pc, #24]	; (80053a4 <HAL_TIM_PWM_MspInit+0x28>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d105      	bne.n	800539a <HAL_TIM_PWM_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800538e:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <HAL_TIM_PWM_MspInit+0x2c>)
 8005390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <HAL_TIM_PWM_MspInit+0x2c>)
 8005394:	2102      	movs	r1, #2
 8005396:	430a      	orrs	r2, r1
 8005398:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	46bd      	mov	sp, r7
 800539e:	b002      	add	sp, #8
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40021000 	.word	0x40021000

080053ac <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM21)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a0a      	ldr	r2, [pc, #40]	; (80053e4 <HAL_TIM_OC_MspInit+0x38>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d10d      	bne.n	80053da <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 80053be:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <HAL_TIM_OC_MspInit+0x3c>)
 80053c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c2:	4b09      	ldr	r3, [pc, #36]	; (80053e8 <HAL_TIM_OC_MspInit+0x3c>)
 80053c4:	2104      	movs	r1, #4
 80053c6:	430a      	orrs	r2, r1
 80053c8:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80053ca:	2200      	movs	r2, #0
 80053cc:	2100      	movs	r1, #0
 80053ce:	2014      	movs	r0, #20
 80053d0:	f7fc f870 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80053d4:	2014      	movs	r0, #20
 80053d6:	f7fc f882 	bl	80014de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	46bd      	mov	sp, r7
 80053de:	b002      	add	sp, #8
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	40010800 	.word	0x40010800
 80053e8:	40021000 	.word	0x40021000

080053ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f4:	230c      	movs	r3, #12
 80053f6:	18fb      	adds	r3, r7, r3
 80053f8:	0018      	movs	r0, r3
 80053fa:	2314      	movs	r3, #20
 80053fc:	001a      	movs	r2, r3
 80053fe:	2100      	movs	r1, #0
 8005400:	f000 fe10 	bl	8006024 <memset>
  if(htim_encoder->Instance==TIM22)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1b      	ldr	r2, [pc, #108]	; (8005478 <HAL_TIM_Encoder_MspInit+0x8c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d12f      	bne.n	800546e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM22_MspInit 0 */

  /* USER CODE END TIM22_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM22_CLK_ENABLE();
 800540e:	4b1b      	ldr	r3, [pc, #108]	; (800547c <HAL_TIM_Encoder_MspInit+0x90>)
 8005410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005412:	4b1a      	ldr	r3, [pc, #104]	; (800547c <HAL_TIM_Encoder_MspInit+0x90>)
 8005414:	2120      	movs	r1, #32
 8005416:	430a      	orrs	r2, r1
 8005418:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800541a:	4b18      	ldr	r3, [pc, #96]	; (800547c <HAL_TIM_Encoder_MspInit+0x90>)
 800541c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541e:	4b17      	ldr	r3, [pc, #92]	; (800547c <HAL_TIM_Encoder_MspInit+0x90>)
 8005420:	2104      	movs	r1, #4
 8005422:	430a      	orrs	r2, r1
 8005424:	62da      	str	r2, [r3, #44]	; 0x2c
 8005426:	4b15      	ldr	r3, [pc, #84]	; (800547c <HAL_TIM_Encoder_MspInit+0x90>)
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	2204      	movs	r2, #4
 800542c:	4013      	ands	r3, r2
 800542e:	60bb      	str	r3, [r7, #8]
 8005430:	68bb      	ldr	r3, [r7, #8]
    /**TIM22 GPIO Configuration    
    PC6     ------> TIM22_CH1
    PC7     ------> TIM22_CH2 
    */
    GPIO_InitStruct.Pin = Rotary_Encoder_Pin_1_Pin|Rotary_Encoder_Pin_2_Pin;
 8005432:	210c      	movs	r1, #12
 8005434:	187b      	adds	r3, r7, r1
 8005436:	22c0      	movs	r2, #192	; 0xc0
 8005438:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800543a:	187b      	adds	r3, r7, r1
 800543c:	2202      	movs	r2, #2
 800543e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005440:	187b      	adds	r3, r7, r1
 8005442:	2200      	movs	r2, #0
 8005444:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005446:	187b      	adds	r3, r7, r1
 8005448:	2200      	movs	r2, #0
 800544a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM22;
 800544c:	187b      	adds	r3, r7, r1
 800544e:	2200      	movs	r2, #0
 8005450:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005452:	187b      	adds	r3, r7, r1
 8005454:	4a0a      	ldr	r2, [pc, #40]	; (8005480 <HAL_TIM_Encoder_MspInit+0x94>)
 8005456:	0019      	movs	r1, r3
 8005458:	0010      	movs	r0, r2
 800545a:	f7fc f85d 	bl	8001518 <HAL_GPIO_Init>

    /* TIM22 interrupt Init */
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 800545e:	2200      	movs	r2, #0
 8005460:	2100      	movs	r1, #0
 8005462:	2016      	movs	r0, #22
 8005464:	f7fc f826 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8005468:	2016      	movs	r0, #22
 800546a:	f7fc f838 	bl	80014de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	46bd      	mov	sp, r7
 8005472:	b008      	add	sp, #32
 8005474:	bd80      	pop	{r7, pc}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	40011400 	.word	0x40011400
 800547c:	40021000 	.word	0x40021000
 8005480:	50000800 	.word	0x50000800

08005484 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005484:	b590      	push	{r4, r7, lr}
 8005486:	b08b      	sub	sp, #44	; 0x2c
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800548c:	2314      	movs	r3, #20
 800548e:	18fb      	adds	r3, r7, r3
 8005490:	0018      	movs	r0, r3
 8005492:	2314      	movs	r3, #20
 8005494:	001a      	movs	r2, r3
 8005496:	2100      	movs	r1, #0
 8005498:	f000 fdc4 	bl	8006024 <memset>
  if(htim->Instance==TIM2)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	2380      	movs	r3, #128	; 0x80
 80054a2:	05db      	lsls	r3, r3, #23
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d123      	bne.n	80054f0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054a8:	4b38      	ldr	r3, [pc, #224]	; (800558c <HAL_TIM_MspPostInit+0x108>)
 80054aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ac:	4b37      	ldr	r3, [pc, #220]	; (800558c <HAL_TIM_MspPostInit+0x108>)
 80054ae:	2101      	movs	r1, #1
 80054b0:	430a      	orrs	r2, r1
 80054b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80054b4:	4b35      	ldr	r3, [pc, #212]	; (800558c <HAL_TIM_MspPostInit+0x108>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	2201      	movs	r2, #1
 80054ba:	4013      	ands	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80054c0:	2114      	movs	r1, #20
 80054c2:	187b      	adds	r3, r7, r1
 80054c4:	2201      	movs	r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c8:	187b      	adds	r3, r7, r1
 80054ca:	2202      	movs	r2, #2
 80054cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ce:	187b      	adds	r3, r7, r1
 80054d0:	2200      	movs	r2, #0
 80054d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d4:	187b      	adds	r3, r7, r1
 80054d6:	2200      	movs	r2, #0
 80054d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80054da:	187b      	adds	r3, r7, r1
 80054dc:	2202      	movs	r2, #2
 80054de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e0:	187a      	adds	r2, r7, r1
 80054e2:	23a0      	movs	r3, #160	; 0xa0
 80054e4:	05db      	lsls	r3, r3, #23
 80054e6:	0011      	movs	r1, r2
 80054e8:	0018      	movs	r0, r3
 80054ea:	f7fc f815 	bl	8001518 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80054ee:	e049      	b.n	8005584 <HAL_TIM_MspPostInit+0x100>
  else if(htim->Instance==TIM3)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a26      	ldr	r2, [pc, #152]	; (8005590 <HAL_TIM_MspPostInit+0x10c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d144      	bne.n	8005584 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054fa:	4b24      	ldr	r3, [pc, #144]	; (800558c <HAL_TIM_MspPostInit+0x108>)
 80054fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fe:	4b23      	ldr	r3, [pc, #140]	; (800558c <HAL_TIM_MspPostInit+0x108>)
 8005500:	2101      	movs	r1, #1
 8005502:	430a      	orrs	r2, r1
 8005504:	62da      	str	r2, [r3, #44]	; 0x2c
 8005506:	4b21      	ldr	r3, [pc, #132]	; (800558c <HAL_TIM_MspPostInit+0x108>)
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	2201      	movs	r2, #1
 800550c:	4013      	ands	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005512:	4b1e      	ldr	r3, [pc, #120]	; (800558c <HAL_TIM_MspPostInit+0x108>)
 8005514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005516:	4b1d      	ldr	r3, [pc, #116]	; (800558c <HAL_TIM_MspPostInit+0x108>)
 8005518:	2102      	movs	r1, #2
 800551a:	430a      	orrs	r2, r1
 800551c:	62da      	str	r2, [r3, #44]	; 0x2c
 800551e:	4b1b      	ldr	r3, [pc, #108]	; (800558c <HAL_TIM_MspPostInit+0x108>)
 8005520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005522:	2202      	movs	r2, #2
 8005524:	4013      	ands	r3, r2
 8005526:	60bb      	str	r3, [r7, #8]
 8005528:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Right_Motor_PWM_1_Pin|Right_Motor_PWM_2_Pin;
 800552a:	2414      	movs	r4, #20
 800552c:	193b      	adds	r3, r7, r4
 800552e:	22c0      	movs	r2, #192	; 0xc0
 8005530:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005532:	193b      	adds	r3, r7, r4
 8005534:	2202      	movs	r2, #2
 8005536:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005538:	193b      	adds	r3, r7, r4
 800553a:	2200      	movs	r2, #0
 800553c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800553e:	193b      	adds	r3, r7, r4
 8005540:	2200      	movs	r2, #0
 8005542:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005544:	193b      	adds	r3, r7, r4
 8005546:	2202      	movs	r2, #2
 8005548:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800554a:	193a      	adds	r2, r7, r4
 800554c:	23a0      	movs	r3, #160	; 0xa0
 800554e:	05db      	lsls	r3, r3, #23
 8005550:	0011      	movs	r1, r2
 8005552:	0018      	movs	r0, r3
 8005554:	f7fb ffe0 	bl	8001518 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Left_Motor_PWM_1_Pin|Left_Motor_PWM_2_Pin;
 8005558:	0021      	movs	r1, r4
 800555a:	187b      	adds	r3, r7, r1
 800555c:	2203      	movs	r2, #3
 800555e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005560:	187b      	adds	r3, r7, r1
 8005562:	2202      	movs	r2, #2
 8005564:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005566:	187b      	adds	r3, r7, r1
 8005568:	2200      	movs	r2, #0
 800556a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800556c:	187b      	adds	r3, r7, r1
 800556e:	2200      	movs	r2, #0
 8005570:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005572:	187b      	adds	r3, r7, r1
 8005574:	2202      	movs	r2, #2
 8005576:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005578:	187b      	adds	r3, r7, r1
 800557a:	4a06      	ldr	r2, [pc, #24]	; (8005594 <HAL_TIM_MspPostInit+0x110>)
 800557c:	0019      	movs	r1, r3
 800557e:	0010      	movs	r0, r2
 8005580:	f7fb ffca 	bl	8001518 <HAL_GPIO_Init>
}
 8005584:	46c0      	nop			; (mov r8, r8)
 8005586:	46bd      	mov	sp, r7
 8005588:	b00b      	add	sp, #44	; 0x2c
 800558a:	bd90      	pop	{r4, r7, pc}
 800558c:	40021000 	.word	0x40021000
 8005590:	40000400 	.word	0x40000400
 8005594:	50000400 	.word	0x50000400

08005598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055a0:	230c      	movs	r3, #12
 80055a2:	18fb      	adds	r3, r7, r3
 80055a4:	0018      	movs	r0, r3
 80055a6:	2314      	movs	r3, #20
 80055a8:	001a      	movs	r2, r3
 80055aa:	2100      	movs	r1, #0
 80055ac:	f000 fd3a 	bl	8006024 <memset>
  if(huart->Instance==USART2)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a18      	ldr	r2, [pc, #96]	; (8005618 <HAL_UART_MspInit+0x80>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d129      	bne.n	800560e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80055ba:	4b18      	ldr	r3, [pc, #96]	; (800561c <HAL_UART_MspInit+0x84>)
 80055bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055be:	4b17      	ldr	r3, [pc, #92]	; (800561c <HAL_UART_MspInit+0x84>)
 80055c0:	2180      	movs	r1, #128	; 0x80
 80055c2:	0289      	lsls	r1, r1, #10
 80055c4:	430a      	orrs	r2, r1
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055c8:	4b14      	ldr	r3, [pc, #80]	; (800561c <HAL_UART_MspInit+0x84>)
 80055ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055cc:	4b13      	ldr	r3, [pc, #76]	; (800561c <HAL_UART_MspInit+0x84>)
 80055ce:	2101      	movs	r1, #1
 80055d0:	430a      	orrs	r2, r1
 80055d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80055d4:	4b11      	ldr	r3, [pc, #68]	; (800561c <HAL_UART_MspInit+0x84>)
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	2201      	movs	r2, #1
 80055da:	4013      	ands	r3, r2
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80055e0:	210c      	movs	r1, #12
 80055e2:	187b      	adds	r3, r7, r1
 80055e4:	220c      	movs	r2, #12
 80055e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e8:	187b      	adds	r3, r7, r1
 80055ea:	2202      	movs	r2, #2
 80055ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ee:	187b      	adds	r3, r7, r1
 80055f0:	2200      	movs	r2, #0
 80055f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f4:	187b      	adds	r3, r7, r1
 80055f6:	2203      	movs	r2, #3
 80055f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80055fa:	187b      	adds	r3, r7, r1
 80055fc:	2204      	movs	r2, #4
 80055fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005600:	187a      	adds	r2, r7, r1
 8005602:	23a0      	movs	r3, #160	; 0xa0
 8005604:	05db      	lsls	r3, r3, #23
 8005606:	0011      	movs	r1, r2
 8005608:	0018      	movs	r0, r3
 800560a:	f7fb ff85 	bl	8001518 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	46bd      	mov	sp, r7
 8005612:	b008      	add	sp, #32
 8005614:	bd80      	pop	{r7, pc}
 8005616:	46c0      	nop			; (mov r8, r8)
 8005618:	40004400 	.word	0x40004400
 800561c:	40021000 	.word	0x40021000

08005620 <IR_LOCATE>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void IR_LOCATE(void){
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
	while(1){
	int pins = ((GPIOA->IDR>>10) & 7);
 8005626:	23a0      	movs	r3, #160	; 0xa0
 8005628:	05db      	lsls	r3, r3, #23
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	0a9b      	lsrs	r3, r3, #10
 800562e:	001a      	movs	r2, r3
 8005630:	2307      	movs	r3, #7
 8005632:	4013      	ands	r3, r2
 8005634:	607b      	str	r3, [r7, #4]

	if(pins == 0){
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d103      	bne.n	8005644 <IR_LOCATE+0x24>
		printf("0\r\n");
 800563c:	4b1e      	ldr	r3, [pc, #120]	; (80056b8 <IR_LOCATE+0x98>)
 800563e:	0018      	movs	r0, r3
 8005640:	f000 fe1a 	bl	8006278 <puts>
	}
	if(pins == 1){
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d103      	bne.n	8005652 <IR_LOCATE+0x32>
		printf("1\r\n");
 800564a:	4b1c      	ldr	r3, [pc, #112]	; (80056bc <IR_LOCATE+0x9c>)
 800564c:	0018      	movs	r0, r3
 800564e:	f000 fe13 	bl	8006278 <puts>
	}
	if(pins == 2){
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d103      	bne.n	8005660 <IR_LOCATE+0x40>
		printf("2\r\n");
 8005658:	4b19      	ldr	r3, [pc, #100]	; (80056c0 <IR_LOCATE+0xa0>)
 800565a:	0018      	movs	r0, r3
 800565c:	f000 fe0c 	bl	8006278 <puts>
	}
	if(pins == 3){
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b03      	cmp	r3, #3
 8005664:	d103      	bne.n	800566e <IR_LOCATE+0x4e>
		printf("3\r\n");
 8005666:	4b17      	ldr	r3, [pc, #92]	; (80056c4 <IR_LOCATE+0xa4>)
 8005668:	0018      	movs	r0, r3
 800566a:	f000 fe05 	bl	8006278 <puts>
	}
	if(pins == 3){
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b03      	cmp	r3, #3
 8005672:	d103      	bne.n	800567c <IR_LOCATE+0x5c>
		printf("3\r\n");
 8005674:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <IR_LOCATE+0xa4>)
 8005676:	0018      	movs	r0, r3
 8005678:	f000 fdfe 	bl	8006278 <puts>
	}
	if(pins == 4){
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b04      	cmp	r3, #4
 8005680:	d103      	bne.n	800568a <IR_LOCATE+0x6a>
		printf("4\r\n");
 8005682:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <IR_LOCATE+0xa8>)
 8005684:	0018      	movs	r0, r3
 8005686:	f000 fdf7 	bl	8006278 <puts>
	}
	if(pins == 5){
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b05      	cmp	r3, #5
 800568e:	d103      	bne.n	8005698 <IR_LOCATE+0x78>
		printf("5\r\n");
 8005690:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <IR_LOCATE+0xac>)
 8005692:	0018      	movs	r0, r3
 8005694:	f000 fdf0 	bl	8006278 <puts>
	}
	if(pins == 6){
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b06      	cmp	r3, #6
 800569c:	d103      	bne.n	80056a6 <IR_LOCATE+0x86>
		printf("6\r\n");
 800569e:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <IR_LOCATE+0xb0>)
 80056a0:	0018      	movs	r0, r3
 80056a2:	f000 fde9 	bl	8006278 <puts>
	}
	if(pins == 7){
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b07      	cmp	r3, #7
 80056aa:	d1bc      	bne.n	8005626 <IR_LOCATE+0x6>
		printf("7\r\n");
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <IR_LOCATE+0xb4>)
 80056ae:	0018      	movs	r0, r3
 80056b0:	f000 fde2 	bl	8006278 <puts>
	while(1){
 80056b4:	e7b7      	b.n	8005626 <IR_LOCATE+0x6>
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	08006d14 	.word	0x08006d14
 80056bc:	08006d18 	.word	0x08006d18
 80056c0:	08006d1c 	.word	0x08006d1c
 80056c4:	08006d20 	.word	0x08006d20
 80056c8:	08006d24 	.word	0x08006d24
 80056cc:	08006d28 	.word	0x08006d28
 80056d0:	08006d2c 	.word	0x08006d2c
 80056d4:	08006d30 	.word	0x08006d30

080056d8 <checkTurn>:
	}
	}
}


void checkTurn(void){
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
	if ((move == 1) && (count > 600)){
 80056dc:	4b13      	ldr	r3, [pc, #76]	; (800572c <checkTurn+0x54>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d10a      	bne.n	80056fa <checkTurn+0x22>
 80056e4:	4b12      	ldr	r3, [pc, #72]	; (8005730 <checkTurn+0x58>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	2396      	movs	r3, #150	; 0x96
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	429a      	cmp	r2, r3
 80056ee:	dd04      	ble.n	80056fa <checkTurn+0x22>
		printf("Keep turning left\r\n");
 80056f0:	4b10      	ldr	r3, [pc, #64]	; (8005734 <checkTurn+0x5c>)
 80056f2:	0018      	movs	r0, r3
 80056f4:	f000 fdc0 	bl	8006278 <puts>
 80056f8:	e015      	b.n	8005726 <checkTurn+0x4e>
	}
	else if ((move == 2) && (count > 600)){
 80056fa:	4b0c      	ldr	r3, [pc, #48]	; (800572c <checkTurn+0x54>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d10a      	bne.n	8005718 <checkTurn+0x40>
 8005702:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <checkTurn+0x58>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	2396      	movs	r3, #150	; 0x96
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	429a      	cmp	r2, r3
 800570c:	dd04      	ble.n	8005718 <checkTurn+0x40>
		printf("Keep turning right\r\n");
 800570e:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <checkTurn+0x60>)
 8005710:	0018      	movs	r0, r3
 8005712:	f000 fdb1 	bl	8006278 <puts>
 8005716:	e006      	b.n	8005726 <checkTurn+0x4e>
	}
	else {
		printf("Good to go Forward\r\n");
 8005718:	4b08      	ldr	r3, [pc, #32]	; (800573c <checkTurn+0x64>)
 800571a:	0018      	movs	r0, r3
 800571c:	f000 fdac 	bl	8006278 <puts>
		move = 0;
 8005720:	4b02      	ldr	r3, [pc, #8]	; (800572c <checkTurn+0x54>)
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
	}
}
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	200000a8 	.word	0x200000a8
 8005730:	20000094 	.word	0x20000094
 8005734:	08006d34 	.word	0x08006d34
 8005738:	08006d48 	.word	0x08006d48
 800573c:	08006d5c 	.word	0x08006d5c

08005740 <checkStraight>:
void checkStraight(void){
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
	if (count > 600){
 8005744:	4b08      	ldr	r3, [pc, #32]	; (8005768 <checkStraight+0x28>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	2396      	movs	r3, #150	; 0x96
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	429a      	cmp	r2, r3
 800574e:	dd08      	ble.n	8005762 <checkStraight+0x22>
		printf("checkDirection\r\n");
 8005750:	4b06      	ldr	r3, [pc, #24]	; (800576c <checkStraight+0x2c>)
 8005752:	0018      	movs	r0, r3
 8005754:	f000 fd90 	bl	8006278 <puts>
		left = 1;
 8005758:	4b05      	ldr	r3, [pc, #20]	; (8005770 <checkStraight+0x30>)
 800575a:	2201      	movs	r2, #1
 800575c:	601a      	str	r2, [r3, #0]
		init_Left();
 800575e:	f7fe fceb 	bl	8004138 <init_Left>
	}

}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20000094 	.word	0x20000094
 800576c:	08006d70 	.word	0x08006d70
 8005770:	20000098 	.word	0x20000098

08005774 <checkLeft>:
void checkLeft(void){
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
	left++;
 8005778:	4b12      	ldr	r3, [pc, #72]	; (80057c4 <checkLeft+0x50>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	4b11      	ldr	r3, [pc, #68]	; (80057c4 <checkLeft+0x50>)
 8005780:	601a      	str	r2, [r3, #0]
	if (count > 600){
 8005782:	4b11      	ldr	r3, [pc, #68]	; (80057c8 <checkLeft+0x54>)
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	2396      	movs	r3, #150	; 0x96
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	429a      	cmp	r2, r3
 800578c:	dd03      	ble.n	8005796 <checkLeft+0x22>
		printf("Left Not good\r\n");
 800578e:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <checkLeft+0x58>)
 8005790:	0018      	movs	r0, r3
 8005792:	f000 fd71 	bl	8006278 <puts>
	}
	if (left > 3){
 8005796:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <checkLeft+0x50>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b03      	cmp	r3, #3
 800579c:	dd07      	ble.n	80057ae <checkLeft+0x3a>
		left = 0;
 800579e:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <checkLeft+0x50>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
		right = 1;
 80057a4:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <checkLeft+0x5c>)
 80057a6:	2201      	movs	r2, #1
 80057a8:	601a      	str	r2, [r3, #0]
		init_Right();
 80057aa:	f7fe fcd2 	bl	8004152 <init_Right>
	}
	LCheck += count;
 80057ae:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <checkLeft+0x60>)
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <checkLeft+0x54>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	18d2      	adds	r2, r2, r3
 80057b8:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <checkLeft+0x60>)
 80057ba:	601a      	str	r2, [r3, #0]
}
 80057bc:	46c0      	nop			; (mov r8, r8)
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	46c0      	nop			; (mov r8, r8)
 80057c4:	20000098 	.word	0x20000098
 80057c8:	20000094 	.word	0x20000094
 80057cc:	08006d80 	.word	0x08006d80
 80057d0:	2000009c 	.word	0x2000009c
 80057d4:	200000a0 	.word	0x200000a0

080057d8 <checkRight>:
void checkRight(void){
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
	right++;
 80057dc:	4b11      	ldr	r3, [pc, #68]	; (8005824 <checkRight+0x4c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	4b10      	ldr	r3, [pc, #64]	; (8005824 <checkRight+0x4c>)
 80057e4:	601a      	str	r2, [r3, #0]
	if (count > 600){
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <checkRight+0x50>)
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	2396      	movs	r3, #150	; 0x96
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	429a      	cmp	r2, r3
 80057f0:	dd03      	ble.n	80057fa <checkRight+0x22>
		printf("Right Not Good\r\n");
 80057f2:	4b0e      	ldr	r3, [pc, #56]	; (800582c <checkRight+0x54>)
 80057f4:	0018      	movs	r0, r3
 80057f6:	f000 fd3f 	bl	8006278 <puts>

	}
	if (right > 3){
 80057fa:	4b0a      	ldr	r3, [pc, #40]	; (8005824 <checkRight+0x4c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b03      	cmp	r3, #3
 8005800:	dd05      	ble.n	800580e <checkRight+0x36>
		left = 0;
 8005802:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <checkRight+0x58>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
		right = 0;
 8005808:	4b06      	ldr	r3, [pc, #24]	; (8005824 <checkRight+0x4c>)
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
	}
	RCheck += count;
 800580e:	4b09      	ldr	r3, [pc, #36]	; (8005834 <checkRight+0x5c>)
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4b05      	ldr	r3, [pc, #20]	; (8005828 <checkRight+0x50>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	18d2      	adds	r2, r2, r3
 8005818:	4b06      	ldr	r3, [pc, #24]	; (8005834 <checkRight+0x5c>)
 800581a:	601a      	str	r2, [r3, #0]
}
 800581c:	46c0      	nop			; (mov r8, r8)
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	2000009c 	.word	0x2000009c
 8005828:	20000094 	.word	0x20000094
 800582c:	08006d90 	.word	0x08006d90
 8005830:	20000098 	.word	0x20000098
 8005834:	200000a4 	.word	0x200000a4

08005838 <determineDir>:
void determineDir(void){
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
	if (LCheck < RCheck){
 800583c:	4b0f      	ldr	r3, [pc, #60]	; (800587c <determineDir+0x44>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	4b0f      	ldr	r3, [pc, #60]	; (8005880 <determineDir+0x48>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	da07      	bge.n	8005858 <determineDir+0x20>
		printf("Turn Left\r\n");
 8005848:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <determineDir+0x4c>)
 800584a:	0018      	movs	r0, r3
 800584c:	f000 fd14 	bl	8006278 <puts>
		move = 1;
 8005850:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <determineDir+0x50>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	e006      	b.n	8005866 <determineDir+0x2e>
	}
	else {
		printf("Turn Right\r\n");
 8005858:	4b0c      	ldr	r3, [pc, #48]	; (800588c <determineDir+0x54>)
 800585a:	0018      	movs	r0, r3
 800585c:	f000 fd0c 	bl	8006278 <puts>
		move = 2;
 8005860:	4b09      	ldr	r3, [pc, #36]	; (8005888 <determineDir+0x50>)
 8005862:	2202      	movs	r2, #2
 8005864:	601a      	str	r2, [r3, #0]
	}
	init_Straight();
 8005866:	f7fe fc8b 	bl	8004180 <init_Straight>
	LCheck = 0;
 800586a:	4b04      	ldr	r3, [pc, #16]	; (800587c <determineDir+0x44>)
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
	RCheck = 0;
 8005870:	4b03      	ldr	r3, [pc, #12]	; (8005880 <determineDir+0x48>)
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	200000a0 	.word	0x200000a0
 8005880:	200000a4 	.word	0x200000a4
 8005884:	08006da0 	.word	0x08006da0
 8005888:	200000a8 	.word	0x200000a8
 800588c:	08006dac 	.word	0x08006dac

08005890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005894:	46c0      	nop			; (mov r8, r8)
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HARD FAULT\r\n");
 80058a0:	4b02      	ldr	r3, [pc, #8]	; (80058ac <HardFault_Handler+0x10>)
 80058a2:	0018      	movs	r0, r3
 80058a4:	f000 fce8 	bl	8006278 <puts>
 80058a8:	e7fa      	b.n	80058a0 <HardFault_Handler+0x4>
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	08006db8 	.word	0x08006db8

080058b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80058b4:	46c0      	nop			; (mov r8, r8)
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058c8:	f7fb f984 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058cc:	46c0      	nop			; (mov r8, r8)
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_1)){
 80058d8:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <EXTI0_1_IRQHandler+0x30>)
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	2202      	movs	r2, #2
 80058de:	4013      	ands	r3, r2
 80058e0:	d009      	beq.n	80058f6 <EXTI0_1_IRQHandler+0x22>
		if (((GPIOA->IDR) > 1) & 1){
 80058e2:	23a0      	movs	r3, #160	; 0xa0
 80058e4:	05db      	lsls	r3, r3, #23
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d904      	bls.n	80058f6 <EXTI0_1_IRQHandler+0x22>
			count++;
 80058ec:	4b06      	ldr	r3, [pc, #24]	; (8005908 <EXTI0_1_IRQHandler+0x34>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <EXTI0_1_IRQHandler+0x34>)
 80058f4:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80058f6:	2002      	movs	r0, #2
 80058f8:	f7fb ffaa 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80058fc:	46c0      	nop			; (mov r8, r8)
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	46c0      	nop			; (mov r8, r8)
 8005904:	40010400 	.word	0x40010400
 8005908:	20000094 	.word	0x20000094

0800590c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	// PIN 7
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6)){
 8005910:	4b24      	ldr	r3, [pc, #144]	; (80059a4 <EXTI4_15_IRQHandler+0x98>)
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	2240      	movs	r2, #64	; 0x40
 8005916:	4013      	ands	r3, r2
 8005918:	d003      	beq.n	8005922 <EXTI4_15_IRQHandler+0x16>
		printf("Push Button\r\n");
 800591a:	4b23      	ldr	r3, [pc, #140]	; (80059a8 <EXTI4_15_IRQHandler+0x9c>)
 800591c:	0018      	movs	r0, r3
 800591e:	f000 fcab 	bl	8006278 <puts>
	}

	//PIN 9
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_9)){
 8005922:	4b20      	ldr	r3, [pc, #128]	; (80059a4 <EXTI4_15_IRQHandler+0x98>)
 8005924:	695a      	ldr	r2, [r3, #20]
 8005926:	2380      	movs	r3, #128	; 0x80
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4013      	ands	r3, r2
 800592c:	d007      	beq.n	800593e <EXTI4_15_IRQHandler+0x32>
		printf("FUCKING STOP\r\n");
 800592e:	4b1f      	ldr	r3, [pc, #124]	; (80059ac <EXTI4_15_IRQHandler+0xa0>)
 8005930:	0018      	movs	r0, r3
 8005932:	f000 fca1 	bl	8006278 <puts>
		move_robot(0,0);
 8005936:	2100      	movs	r1, #0
 8005938:	2000      	movs	r0, #0
 800593a:	f7ff fb0f 	bl	8004f5c <move_robot>
		//do something here to stop motors
	}

	// PIN 11
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11)){
 800593e:	4b19      	ldr	r3, [pc, #100]	; (80059a4 <EXTI4_15_IRQHandler+0x98>)
 8005940:	695a      	ldr	r2, [r3, #20]
 8005942:	2380      	movs	r3, #128	; 0x80
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	4013      	ands	r3, r2
 8005948:	d001      	beq.n	800594e <EXTI4_15_IRQHandler+0x42>
		Left_Encoder_Interrupt_Handler();
 800594a:	f7ff fa67 	bl	8004e1c <Left_Encoder_Interrupt_Handler>
	}
	// PIN 12
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_12))
 800594e:	4b15      	ldr	r3, [pc, #84]	; (80059a4 <EXTI4_15_IRQHandler+0x98>)
 8005950:	695a      	ldr	r2, [r3, #20]
 8005952:	2380      	movs	r3, #128	; 0x80
 8005954:	015b      	lsls	r3, r3, #5
 8005956:	4013      	ands	r3, r2
 8005958:	d001      	beq.n	800595e <EXTI4_15_IRQHandler+0x52>
	{
		Right_Encoder_Interrupt_Handler();
 800595a:	f7ff fa47 	bl	8004dec <Right_Encoder_Interrupt_Handler>
	}

	// PIN 13

	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 800595e:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <EXTI4_15_IRQHandler+0x98>)
 8005960:	695a      	ldr	r2, [r3, #20]
 8005962:	2380      	movs	r3, #128	; 0x80
 8005964:	019b      	lsls	r3, r3, #6
 8005966:	4013      	ands	r3, r2
 8005968:	d001      	beq.n	800596e <EXTI4_15_IRQHandler+0x62>
		Print_Encoder_Reading();
 800596a:	f7ff fb57 	bl	800501c <Print_Encoder_Reading>
	}
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800596e:	2040      	movs	r0, #64	; 0x40
 8005970:	f7fb ff6e 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	0018      	movs	r0, r3
 800597a:	f7fb ff69 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800597e:	2380      	movs	r3, #128	; 0x80
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	0018      	movs	r0, r3
 8005984:	f7fb ff64 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005988:	2380      	movs	r3, #128	; 0x80
 800598a:	015b      	lsls	r3, r3, #5
 800598c:	0018      	movs	r0, r3
 800598e:	f7fb ff5f 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005992:	2380      	movs	r3, #128	; 0x80
 8005994:	019b      	lsls	r3, r3, #6
 8005996:	0018      	movs	r0, r3
 8005998:	f7fb ff5a 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800599c:	46c0      	nop			; (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	40010400 	.word	0x40010400
 80059a8:	08006dc4 	.word	0x08006dc4
 80059ac:	08006dd4 	.word	0x08006dd4

080059b0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */
	if(ADC1->ISR & ADC_ISR_EOS){
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <ADC1_COMP_IRQHandler+0x20>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2208      	movs	r2, #8
 80059ba:	4013      	ands	r3, r2
 80059bc:	d001      	beq.n	80059c2 <ADC1_COMP_IRQHandler+0x12>
		ADC_ConvCpltCallback();
 80059be:	f7ff fb45 	bl	800504c <ADC_ConvCpltCallback>
	}
  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80059c2:	4b04      	ldr	r3, [pc, #16]	; (80059d4 <ADC1_COMP_IRQHandler+0x24>)
 80059c4:	0018      	movs	r0, r3
 80059c6:	f7fb faad 	bl	8000f24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40012400 	.word	0x40012400
 80059d4:	2000023c 	.word	0x2000023c

080059d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (move > 0){
 80059dc:	4b1b      	ldr	r3, [pc, #108]	; (8005a4c <TIM6_DAC_IRQHandler+0x74>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	dd02      	ble.n	80059ea <TIM6_DAC_IRQHandler+0x12>
		checkTurn();
 80059e4:	f7ff fe78 	bl	80056d8 <checkTurn>
 80059e8:	e026      	b.n	8005a38 <TIM6_DAC_IRQHandler+0x60>
	}
	else if ((left == right) && (LCheck == RCheck)){
 80059ea:	4b19      	ldr	r3, [pc, #100]	; (8005a50 <TIM6_DAC_IRQHandler+0x78>)
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <TIM6_DAC_IRQHandler+0x7c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d108      	bne.n	8005a08 <TIM6_DAC_IRQHandler+0x30>
 80059f6:	4b18      	ldr	r3, [pc, #96]	; (8005a58 <TIM6_DAC_IRQHandler+0x80>)
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	4b18      	ldr	r3, [pc, #96]	; (8005a5c <TIM6_DAC_IRQHandler+0x84>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d102      	bne.n	8005a08 <TIM6_DAC_IRQHandler+0x30>
		checkStraight();
 8005a02:	f7ff fe9d 	bl	8005740 <checkStraight>
 8005a06:	e017      	b.n	8005a38 <TIM6_DAC_IRQHandler+0x60>
	}
	else if(left > 0){
 8005a08:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <TIM6_DAC_IRQHandler+0x78>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	dd02      	ble.n	8005a16 <TIM6_DAC_IRQHandler+0x3e>
		checkLeft();
 8005a10:	f7ff feb0 	bl	8005774 <checkLeft>
 8005a14:	e010      	b.n	8005a38 <TIM6_DAC_IRQHandler+0x60>
	}
	else if(right > 0){
 8005a16:	4b0f      	ldr	r3, [pc, #60]	; (8005a54 <TIM6_DAC_IRQHandler+0x7c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	dd02      	ble.n	8005a24 <TIM6_DAC_IRQHandler+0x4c>
		checkRight();
 8005a1e:	f7ff fedb 	bl	80057d8 <checkRight>
 8005a22:	e009      	b.n	8005a38 <TIM6_DAC_IRQHandler+0x60>
	}
	else if ((RCheck > 0) && (LCheck > 0)){
 8005a24:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <TIM6_DAC_IRQHandler+0x84>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	dd05      	ble.n	8005a38 <TIM6_DAC_IRQHandler+0x60>
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <TIM6_DAC_IRQHandler+0x80>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	dd01      	ble.n	8005a38 <TIM6_DAC_IRQHandler+0x60>
		determineDir();
 8005a34:	f7ff ff00 	bl	8005838 <determineDir>
	}
	count = 0;
 8005a38:	4b09      	ldr	r3, [pc, #36]	; (8005a60 <TIM6_DAC_IRQHandler+0x88>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005a3e:	4b09      	ldr	r3, [pc, #36]	; (8005a64 <TIM6_DAC_IRQHandler+0x8c>)
 8005a40:	0018      	movs	r0, r3
 8005a42:	f7fc ffe6 	bl	8002a12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	200000a8 	.word	0x200000a8
 8005a50:	20000098 	.word	0x20000098
 8005a54:	2000009c 	.word	0x2000009c
 8005a58:	200000a0 	.word	0x200000a0
 8005a5c:	200000a4 	.word	0x200000a4
 8005a60:	20000094 	.word	0x20000094
 8005a64:	20000144 	.word	0x20000144

08005a68 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */
	TEN_KHZ_TIM_Interrupt_Handler();
 8005a6c:	f7ff fad0 	bl	8005010 <TEN_KHZ_TIM_Interrupt_Handler>
  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8005a70:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <TIM21_IRQHandler+0x18>)
 8005a72:	0018      	movs	r0, r3
 8005a74:	f7fc ffcd 	bl	8002a12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8005a78:	46c0      	nop			; (mov r8, r8)
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	46c0      	nop			; (mov r8, r8)
 8005a80:	200002a8 	.word	0x200002a8

08005a84 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */
//  TIM22_Interrupt_Handler();
  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8005a88:	4b03      	ldr	r3, [pc, #12]	; (8005a98 <TIM22_IRQHandler+0x14>)
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f7fc ffc1 	bl	8002a12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8005a90:	46c0      	nop			; (mov r8, r8)
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	200000fc 	.word	0x200000fc

08005a9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	e00a      	b.n	8005ac4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005aae:	e000      	b.n	8005ab2 <_read+0x16>
 8005ab0:	bf00      	nop
 8005ab2:	0001      	movs	r1, r0
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	60ba      	str	r2, [r7, #8]
 8005aba:	b2ca      	uxtb	r2, r1
 8005abc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	dbf0      	blt.n	8005aae <_read+0x12>
	}

return len;
 8005acc:	687b      	ldr	r3, [r7, #4]
}
 8005ace:	0018      	movs	r0, r3
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	b006      	add	sp, #24
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b086      	sub	sp, #24
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	e009      	b.n	8005afc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	60ba      	str	r2, [r7, #8]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	0018      	movs	r0, r3
 8005af2:	f7ff f967 	bl	8004dc4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	3301      	adds	r3, #1
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	dbf1      	blt.n	8005ae8 <_write+0x12>
	}
	return len;
 8005b04:	687b      	ldr	r3, [r7, #4]
}
 8005b06:	0018      	movs	r0, r3
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	b006      	add	sp, #24
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <_close>:

int _close(int file)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b082      	sub	sp, #8
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
	return -1;
 8005b16:	2301      	movs	r3, #1
 8005b18:	425b      	negs	r3, r3
}
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	b002      	add	sp, #8
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2280      	movs	r2, #128	; 0x80
 8005b30:	0192      	lsls	r2, r2, #6
 8005b32:	605a      	str	r2, [r3, #4]
	return 0;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	0018      	movs	r0, r3
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	b002      	add	sp, #8
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <_isatty>:

int _isatty(int file)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
	return 1;
 8005b46:	2301      	movs	r3, #1
}
 8005b48:	0018      	movs	r0, r3
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	b002      	add	sp, #8
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
	return 0;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	0018      	movs	r0, r3
 8005b60:	46bd      	mov	sp, r7
 8005b62:	b004      	add	sp, #16
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005b70:	4b11      	ldr	r3, [pc, #68]	; (8005bb8 <_sbrk+0x50>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d102      	bne.n	8005b7e <_sbrk+0x16>
		heap_end = &end;
 8005b78:	4b0f      	ldr	r3, [pc, #60]	; (8005bb8 <_sbrk+0x50>)
 8005b7a:	4a10      	ldr	r2, [pc, #64]	; (8005bbc <_sbrk+0x54>)
 8005b7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005b7e:	4b0e      	ldr	r3, [pc, #56]	; (8005bb8 <_sbrk+0x50>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005b84:	4b0c      	ldr	r3, [pc, #48]	; (8005bb8 <_sbrk+0x50>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	18d3      	adds	r3, r2, r3
 8005b8c:	466a      	mov	r2, sp
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d907      	bls.n	8005ba2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005b92:	f000 f87d 	bl	8005c90 <__errno>
 8005b96:	0003      	movs	r3, r0
 8005b98:	220c      	movs	r2, #12
 8005b9a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	425b      	negs	r3, r3
 8005ba0:	e006      	b.n	8005bb0 <_sbrk+0x48>
	}

	heap_end += incr;
 8005ba2:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <_sbrk+0x50>)
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	18d2      	adds	r2, r2, r3
 8005baa:	4b03      	ldr	r3, [pc, #12]	; (8005bb8 <_sbrk+0x50>)
 8005bac:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8005bae:	68fb      	ldr	r3, [r7, #12]
}
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	b004      	add	sp, #16
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	200000ac 	.word	0x200000ac
 8005bbc:	200002f0 	.word	0x200002f0

08005bc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8005bc4:	4b17      	ldr	r3, [pc, #92]	; (8005c24 <SystemInit+0x64>)
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	4b16      	ldr	r3, [pc, #88]	; (8005c24 <SystemInit+0x64>)
 8005bca:	2180      	movs	r1, #128	; 0x80
 8005bcc:	0049      	lsls	r1, r1, #1
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8005bd2:	4b14      	ldr	r3, [pc, #80]	; (8005c24 <SystemInit+0x64>)
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	4b13      	ldr	r3, [pc, #76]	; (8005c24 <SystemInit+0x64>)
 8005bd8:	4913      	ldr	r1, [pc, #76]	; (8005c28 <SystemInit+0x68>)
 8005bda:	400a      	ands	r2, r1
 8005bdc:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8005bde:	4b11      	ldr	r3, [pc, #68]	; (8005c24 <SystemInit+0x64>)
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4b10      	ldr	r3, [pc, #64]	; (8005c24 <SystemInit+0x64>)
 8005be4:	4911      	ldr	r1, [pc, #68]	; (8005c2c <SystemInit+0x6c>)
 8005be6:	400a      	ands	r2, r1
 8005be8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005bea:	4b0e      	ldr	r3, [pc, #56]	; (8005c24 <SystemInit+0x64>)
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	4b0d      	ldr	r3, [pc, #52]	; (8005c24 <SystemInit+0x64>)
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	438a      	bics	r2, r1
 8005bf4:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005bf6:	4b0b      	ldr	r3, [pc, #44]	; (8005c24 <SystemInit+0x64>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <SystemInit+0x64>)
 8005bfc:	490c      	ldr	r1, [pc, #48]	; (8005c30 <SystemInit+0x70>)
 8005bfe:	400a      	ands	r2, r1
 8005c00:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8005c02:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <SystemInit+0x64>)
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	4b07      	ldr	r3, [pc, #28]	; (8005c24 <SystemInit+0x64>)
 8005c08:	490a      	ldr	r1, [pc, #40]	; (8005c34 <SystemInit+0x74>)
 8005c0a:	400a      	ands	r2, r1
 8005c0c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005c0e:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <SystemInit+0x64>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c14:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <SystemInit+0x78>)
 8005c16:	2280      	movs	r2, #128	; 0x80
 8005c18:	0512      	lsls	r2, r2, #20
 8005c1a:	609a      	str	r2, [r3, #8]
#endif
}
 8005c1c:	46c0      	nop			; (mov r8, r8)
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	40021000 	.word	0x40021000
 8005c28:	88ff400c 	.word	0x88ff400c
 8005c2c:	fef6fff6 	.word	0xfef6fff6
 8005c30:	fffbffff 	.word	0xfffbffff
 8005c34:	ff02ffff 	.word	0xff02ffff
 8005c38:	e000ed00 	.word	0xe000ed00

08005c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005c3c:	480d      	ldr	r0, [pc, #52]	; (8005c74 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005c3e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8005c40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005c42:	e003      	b.n	8005c4c <LoopCopyDataInit>

08005c44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005c44:	4b0c      	ldr	r3, [pc, #48]	; (8005c78 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8005c46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005c48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005c4a:	3104      	adds	r1, #4

08005c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8005c4c:	480b      	ldr	r0, [pc, #44]	; (8005c7c <LoopForever+0xa>)
  ldr  r3, =_edata
 8005c4e:	4b0c      	ldr	r3, [pc, #48]	; (8005c80 <LoopForever+0xe>)
  adds  r2, r0, r1
 8005c50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005c52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005c54:	d3f6      	bcc.n	8005c44 <CopyDataInit>
  ldr  r2, =_sbss
 8005c56:	4a0b      	ldr	r2, [pc, #44]	; (8005c84 <LoopForever+0x12>)
  b  LoopFillZerobss
 8005c58:	e002      	b.n	8005c60 <LoopFillZerobss>

08005c5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005c5a:	2300      	movs	r3, #0
  str  r3, [r2]
 8005c5c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c5e:	3204      	adds	r2, #4

08005c60 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8005c60:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <LoopForever+0x16>)
  cmp  r2, r3
 8005c62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005c64:	d3f9      	bcc.n	8005c5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005c66:	f7ff ffab 	bl	8005bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c6a:	f000 f9b7 	bl	8005fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c6e:	f7fe fb73 	bl	8004358 <main>

08005c72 <LoopForever>:

LoopForever:
    b LoopForever
 8005c72:	e7fe      	b.n	8005c72 <LoopForever>
   ldr   r0, =_estack
 8005c74:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8005c78:	08006f78 	.word	0x08006f78
  ldr  r0, =_sdata
 8005c7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005c80:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8005c84:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8005c88:	200002ec 	.word	0x200002ec

08005c8c <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c8c:	e7fe      	b.n	8005c8c <DMA1_Channel1_IRQHandler>
	...

08005c90 <__errno>:
 8005c90:	4b01      	ldr	r3, [pc, #4]	; (8005c98 <__errno+0x8>)
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	4770      	bx	lr
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	20000004 	.word	0x20000004

08005c9c <__sflush_r>:
 8005c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c9e:	898a      	ldrh	r2, [r1, #12]
 8005ca0:	0005      	movs	r5, r0
 8005ca2:	000c      	movs	r4, r1
 8005ca4:	0713      	lsls	r3, r2, #28
 8005ca6:	d460      	bmi.n	8005d6a <__sflush_r+0xce>
 8005ca8:	684b      	ldr	r3, [r1, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	dc04      	bgt.n	8005cb8 <__sflush_r+0x1c>
 8005cae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	dc01      	bgt.n	8005cb8 <__sflush_r+0x1c>
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cb8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005cba:	2f00      	cmp	r7, #0
 8005cbc:	d0fa      	beq.n	8005cb4 <__sflush_r+0x18>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	682e      	ldr	r6, [r5, #0]
 8005cc2:	602b      	str	r3, [r5, #0]
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	015b      	lsls	r3, r3, #5
 8005cc8:	6a21      	ldr	r1, [r4, #32]
 8005cca:	401a      	ands	r2, r3
 8005ccc:	d034      	beq.n	8005d38 <__sflush_r+0x9c>
 8005cce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	075b      	lsls	r3, r3, #29
 8005cd4:	d506      	bpl.n	8005ce4 <__sflush_r+0x48>
 8005cd6:	6863      	ldr	r3, [r4, #4]
 8005cd8:	1ac0      	subs	r0, r0, r3
 8005cda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <__sflush_r+0x48>
 8005ce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ce2:	1ac0      	subs	r0, r0, r3
 8005ce4:	0002      	movs	r2, r0
 8005ce6:	6a21      	ldr	r1, [r4, #32]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	0028      	movs	r0, r5
 8005cec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005cee:	47b8      	blx	r7
 8005cf0:	89a1      	ldrh	r1, [r4, #12]
 8005cf2:	1c43      	adds	r3, r0, #1
 8005cf4:	d106      	bne.n	8005d04 <__sflush_r+0x68>
 8005cf6:	682b      	ldr	r3, [r5, #0]
 8005cf8:	2b1d      	cmp	r3, #29
 8005cfa:	d830      	bhi.n	8005d5e <__sflush_r+0xc2>
 8005cfc:	4a2b      	ldr	r2, [pc, #172]	; (8005dac <__sflush_r+0x110>)
 8005cfe:	40da      	lsrs	r2, r3
 8005d00:	07d3      	lsls	r3, r2, #31
 8005d02:	d52c      	bpl.n	8005d5e <__sflush_r+0xc2>
 8005d04:	2300      	movs	r3, #0
 8005d06:	6063      	str	r3, [r4, #4]
 8005d08:	6923      	ldr	r3, [r4, #16]
 8005d0a:	6023      	str	r3, [r4, #0]
 8005d0c:	04cb      	lsls	r3, r1, #19
 8005d0e:	d505      	bpl.n	8005d1c <__sflush_r+0x80>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d102      	bne.n	8005d1a <__sflush_r+0x7e>
 8005d14:	682b      	ldr	r3, [r5, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d100      	bne.n	8005d1c <__sflush_r+0x80>
 8005d1a:	6560      	str	r0, [r4, #84]	; 0x54
 8005d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d1e:	602e      	str	r6, [r5, #0]
 8005d20:	2900      	cmp	r1, #0
 8005d22:	d0c7      	beq.n	8005cb4 <__sflush_r+0x18>
 8005d24:	0023      	movs	r3, r4
 8005d26:	3344      	adds	r3, #68	; 0x44
 8005d28:	4299      	cmp	r1, r3
 8005d2a:	d002      	beq.n	8005d32 <__sflush_r+0x96>
 8005d2c:	0028      	movs	r0, r5
 8005d2e:	f000 f981 	bl	8006034 <_free_r>
 8005d32:	2000      	movs	r0, #0
 8005d34:	6360      	str	r0, [r4, #52]	; 0x34
 8005d36:	e7be      	b.n	8005cb6 <__sflush_r+0x1a>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	0028      	movs	r0, r5
 8005d3c:	47b8      	blx	r7
 8005d3e:	1c43      	adds	r3, r0, #1
 8005d40:	d1c6      	bne.n	8005cd0 <__sflush_r+0x34>
 8005d42:	682b      	ldr	r3, [r5, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0c3      	beq.n	8005cd0 <__sflush_r+0x34>
 8005d48:	2b1d      	cmp	r3, #29
 8005d4a:	d001      	beq.n	8005d50 <__sflush_r+0xb4>
 8005d4c:	2b16      	cmp	r3, #22
 8005d4e:	d101      	bne.n	8005d54 <__sflush_r+0xb8>
 8005d50:	602e      	str	r6, [r5, #0]
 8005d52:	e7af      	b.n	8005cb4 <__sflush_r+0x18>
 8005d54:	2340      	movs	r3, #64	; 0x40
 8005d56:	89a2      	ldrh	r2, [r4, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	81a3      	strh	r3, [r4, #12]
 8005d5c:	e7ab      	b.n	8005cb6 <__sflush_r+0x1a>
 8005d5e:	2340      	movs	r3, #64	; 0x40
 8005d60:	430b      	orrs	r3, r1
 8005d62:	2001      	movs	r0, #1
 8005d64:	81a3      	strh	r3, [r4, #12]
 8005d66:	4240      	negs	r0, r0
 8005d68:	e7a5      	b.n	8005cb6 <__sflush_r+0x1a>
 8005d6a:	690f      	ldr	r7, [r1, #16]
 8005d6c:	2f00      	cmp	r7, #0
 8005d6e:	d0a1      	beq.n	8005cb4 <__sflush_r+0x18>
 8005d70:	680b      	ldr	r3, [r1, #0]
 8005d72:	600f      	str	r7, [r1, #0]
 8005d74:	1bdb      	subs	r3, r3, r7
 8005d76:	9301      	str	r3, [sp, #4]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	0792      	lsls	r2, r2, #30
 8005d7c:	d100      	bne.n	8005d80 <__sflush_r+0xe4>
 8005d7e:	694b      	ldr	r3, [r1, #20]
 8005d80:	60a3      	str	r3, [r4, #8]
 8005d82:	9b01      	ldr	r3, [sp, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	dc00      	bgt.n	8005d8a <__sflush_r+0xee>
 8005d88:	e794      	b.n	8005cb4 <__sflush_r+0x18>
 8005d8a:	9b01      	ldr	r3, [sp, #4]
 8005d8c:	003a      	movs	r2, r7
 8005d8e:	6a21      	ldr	r1, [r4, #32]
 8005d90:	0028      	movs	r0, r5
 8005d92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d94:	47b0      	blx	r6
 8005d96:	2800      	cmp	r0, #0
 8005d98:	dc03      	bgt.n	8005da2 <__sflush_r+0x106>
 8005d9a:	2340      	movs	r3, #64	; 0x40
 8005d9c:	89a2      	ldrh	r2, [r4, #12]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	e7df      	b.n	8005d62 <__sflush_r+0xc6>
 8005da2:	9b01      	ldr	r3, [sp, #4]
 8005da4:	183f      	adds	r7, r7, r0
 8005da6:	1a1b      	subs	r3, r3, r0
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	e7ea      	b.n	8005d82 <__sflush_r+0xe6>
 8005dac:	20400001 	.word	0x20400001

08005db0 <_fflush_r>:
 8005db0:	690b      	ldr	r3, [r1, #16]
 8005db2:	b570      	push	{r4, r5, r6, lr}
 8005db4:	0005      	movs	r5, r0
 8005db6:	000c      	movs	r4, r1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <_fflush_r+0x10>
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	bd70      	pop	{r4, r5, r6, pc}
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	d004      	beq.n	8005dce <_fflush_r+0x1e>
 8005dc4:	6983      	ldr	r3, [r0, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <_fflush_r+0x1e>
 8005dca:	f000 f873 	bl	8005eb4 <__sinit>
 8005dce:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <_fflush_r+0x4c>)
 8005dd0:	429c      	cmp	r4, r3
 8005dd2:	d109      	bne.n	8005de8 <_fflush_r+0x38>
 8005dd4:	686c      	ldr	r4, [r5, #4]
 8005dd6:	220c      	movs	r2, #12
 8005dd8:	5ea3      	ldrsh	r3, [r4, r2]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0ee      	beq.n	8005dbc <_fflush_r+0xc>
 8005dde:	0021      	movs	r1, r4
 8005de0:	0028      	movs	r0, r5
 8005de2:	f7ff ff5b 	bl	8005c9c <__sflush_r>
 8005de6:	e7ea      	b.n	8005dbe <_fflush_r+0xe>
 8005de8:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <_fflush_r+0x50>)
 8005dea:	429c      	cmp	r4, r3
 8005dec:	d101      	bne.n	8005df2 <_fflush_r+0x42>
 8005dee:	68ac      	ldr	r4, [r5, #8]
 8005df0:	e7f1      	b.n	8005dd6 <_fflush_r+0x26>
 8005df2:	4b04      	ldr	r3, [pc, #16]	; (8005e04 <_fflush_r+0x54>)
 8005df4:	429c      	cmp	r4, r3
 8005df6:	d1ee      	bne.n	8005dd6 <_fflush_r+0x26>
 8005df8:	68ec      	ldr	r4, [r5, #12]
 8005dfa:	e7ec      	b.n	8005dd6 <_fflush_r+0x26>
 8005dfc:	08006ef0 	.word	0x08006ef0
 8005e00:	08006f10 	.word	0x08006f10
 8005e04:	08006ed0 	.word	0x08006ed0

08005e08 <fflush>:
 8005e08:	b510      	push	{r4, lr}
 8005e0a:	1e01      	subs	r1, r0, #0
 8005e0c:	d105      	bne.n	8005e1a <fflush+0x12>
 8005e0e:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <fflush+0x1c>)
 8005e10:	4905      	ldr	r1, [pc, #20]	; (8005e28 <fflush+0x20>)
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	f000 f8c0 	bl	8005f98 <_fwalk_reent>
 8005e18:	bd10      	pop	{r4, pc}
 8005e1a:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <fflush+0x24>)
 8005e1c:	6818      	ldr	r0, [r3, #0]
 8005e1e:	f7ff ffc7 	bl	8005db0 <_fflush_r>
 8005e22:	e7f9      	b.n	8005e18 <fflush+0x10>
 8005e24:	08006f30 	.word	0x08006f30
 8005e28:	08005db1 	.word	0x08005db1
 8005e2c:	20000004 	.word	0x20000004

08005e30 <std>:
 8005e30:	2300      	movs	r3, #0
 8005e32:	b510      	push	{r4, lr}
 8005e34:	0004      	movs	r4, r0
 8005e36:	6003      	str	r3, [r0, #0]
 8005e38:	6043      	str	r3, [r0, #4]
 8005e3a:	6083      	str	r3, [r0, #8]
 8005e3c:	8181      	strh	r1, [r0, #12]
 8005e3e:	6643      	str	r3, [r0, #100]	; 0x64
 8005e40:	81c2      	strh	r2, [r0, #14]
 8005e42:	6103      	str	r3, [r0, #16]
 8005e44:	6143      	str	r3, [r0, #20]
 8005e46:	6183      	str	r3, [r0, #24]
 8005e48:	0019      	movs	r1, r3
 8005e4a:	2208      	movs	r2, #8
 8005e4c:	305c      	adds	r0, #92	; 0x5c
 8005e4e:	f000 f8e9 	bl	8006024 <memset>
 8005e52:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <std+0x38>)
 8005e54:	6224      	str	r4, [r4, #32]
 8005e56:	6263      	str	r3, [r4, #36]	; 0x24
 8005e58:	4b04      	ldr	r3, [pc, #16]	; (8005e6c <std+0x3c>)
 8005e5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e5c:	4b04      	ldr	r3, [pc, #16]	; (8005e70 <std+0x40>)
 8005e5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e60:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <std+0x44>)
 8005e62:	6323      	str	r3, [r4, #48]	; 0x30
 8005e64:	bd10      	pop	{r4, pc}
 8005e66:	46c0      	nop			; (mov r8, r8)
 8005e68:	080062b1 	.word	0x080062b1
 8005e6c:	080062d9 	.word	0x080062d9
 8005e70:	08006311 	.word	0x08006311
 8005e74:	0800633d 	.word	0x0800633d

08005e78 <_cleanup_r>:
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	4902      	ldr	r1, [pc, #8]	; (8005e84 <_cleanup_r+0xc>)
 8005e7c:	f000 f88c 	bl	8005f98 <_fwalk_reent>
 8005e80:	bd10      	pop	{r4, pc}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	08005db1 	.word	0x08005db1

08005e88 <__sfmoreglue>:
 8005e88:	b570      	push	{r4, r5, r6, lr}
 8005e8a:	2568      	movs	r5, #104	; 0x68
 8005e8c:	1e4a      	subs	r2, r1, #1
 8005e8e:	4355      	muls	r5, r2
 8005e90:	000e      	movs	r6, r1
 8005e92:	0029      	movs	r1, r5
 8005e94:	3174      	adds	r1, #116	; 0x74
 8005e96:	f000 f917 	bl	80060c8 <_malloc_r>
 8005e9a:	1e04      	subs	r4, r0, #0
 8005e9c:	d008      	beq.n	8005eb0 <__sfmoreglue+0x28>
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	002a      	movs	r2, r5
 8005ea2:	6001      	str	r1, [r0, #0]
 8005ea4:	6046      	str	r6, [r0, #4]
 8005ea6:	300c      	adds	r0, #12
 8005ea8:	60a0      	str	r0, [r4, #8]
 8005eaa:	3268      	adds	r2, #104	; 0x68
 8005eac:	f000 f8ba 	bl	8006024 <memset>
 8005eb0:	0020      	movs	r0, r4
 8005eb2:	bd70      	pop	{r4, r5, r6, pc}

08005eb4 <__sinit>:
 8005eb4:	6983      	ldr	r3, [r0, #24]
 8005eb6:	b513      	push	{r0, r1, r4, lr}
 8005eb8:	0004      	movs	r4, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d128      	bne.n	8005f10 <__sinit+0x5c>
 8005ebe:	6483      	str	r3, [r0, #72]	; 0x48
 8005ec0:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005ec2:	6503      	str	r3, [r0, #80]	; 0x50
 8005ec4:	4b13      	ldr	r3, [pc, #76]	; (8005f14 <__sinit+0x60>)
 8005ec6:	4a14      	ldr	r2, [pc, #80]	; (8005f18 <__sinit+0x64>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6282      	str	r2, [r0, #40]	; 0x28
 8005ecc:	9301      	str	r3, [sp, #4]
 8005ece:	4298      	cmp	r0, r3
 8005ed0:	d101      	bne.n	8005ed6 <__sinit+0x22>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	6183      	str	r3, [r0, #24]
 8005ed6:	0020      	movs	r0, r4
 8005ed8:	f000 f820 	bl	8005f1c <__sfp>
 8005edc:	6060      	str	r0, [r4, #4]
 8005ede:	0020      	movs	r0, r4
 8005ee0:	f000 f81c 	bl	8005f1c <__sfp>
 8005ee4:	60a0      	str	r0, [r4, #8]
 8005ee6:	0020      	movs	r0, r4
 8005ee8:	f000 f818 	bl	8005f1c <__sfp>
 8005eec:	2200      	movs	r2, #0
 8005eee:	60e0      	str	r0, [r4, #12]
 8005ef0:	2104      	movs	r1, #4
 8005ef2:	6860      	ldr	r0, [r4, #4]
 8005ef4:	f7ff ff9c 	bl	8005e30 <std>
 8005ef8:	2201      	movs	r2, #1
 8005efa:	2109      	movs	r1, #9
 8005efc:	68a0      	ldr	r0, [r4, #8]
 8005efe:	f7ff ff97 	bl	8005e30 <std>
 8005f02:	2202      	movs	r2, #2
 8005f04:	2112      	movs	r1, #18
 8005f06:	68e0      	ldr	r0, [r4, #12]
 8005f08:	f7ff ff92 	bl	8005e30 <std>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	61a3      	str	r3, [r4, #24]
 8005f10:	bd13      	pop	{r0, r1, r4, pc}
 8005f12:	46c0      	nop			; (mov r8, r8)
 8005f14:	08006f30 	.word	0x08006f30
 8005f18:	08005e79 	.word	0x08005e79

08005f1c <__sfp>:
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1e:	4b1c      	ldr	r3, [pc, #112]	; (8005f90 <__sfp+0x74>)
 8005f20:	0007      	movs	r7, r0
 8005f22:	681e      	ldr	r6, [r3, #0]
 8005f24:	69b3      	ldr	r3, [r6, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d102      	bne.n	8005f30 <__sfp+0x14>
 8005f2a:	0030      	movs	r0, r6
 8005f2c:	f7ff ffc2 	bl	8005eb4 <__sinit>
 8005f30:	3648      	adds	r6, #72	; 0x48
 8005f32:	68b4      	ldr	r4, [r6, #8]
 8005f34:	6873      	ldr	r3, [r6, #4]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	d504      	bpl.n	8005f44 <__sfp+0x28>
 8005f3a:	6833      	ldr	r3, [r6, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d007      	beq.n	8005f50 <__sfp+0x34>
 8005f40:	6836      	ldr	r6, [r6, #0]
 8005f42:	e7f6      	b.n	8005f32 <__sfp+0x16>
 8005f44:	220c      	movs	r2, #12
 8005f46:	5ea5      	ldrsh	r5, [r4, r2]
 8005f48:	2d00      	cmp	r5, #0
 8005f4a:	d00d      	beq.n	8005f68 <__sfp+0x4c>
 8005f4c:	3468      	adds	r4, #104	; 0x68
 8005f4e:	e7f2      	b.n	8005f36 <__sfp+0x1a>
 8005f50:	2104      	movs	r1, #4
 8005f52:	0038      	movs	r0, r7
 8005f54:	f7ff ff98 	bl	8005e88 <__sfmoreglue>
 8005f58:	6030      	str	r0, [r6, #0]
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d1f0      	bne.n	8005f40 <__sfp+0x24>
 8005f5e:	230c      	movs	r3, #12
 8005f60:	0004      	movs	r4, r0
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	0020      	movs	r0, r4
 8005f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f68:	0020      	movs	r0, r4
 8005f6a:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <__sfp+0x78>)
 8005f6c:	6665      	str	r5, [r4, #100]	; 0x64
 8005f6e:	6025      	str	r5, [r4, #0]
 8005f70:	6065      	str	r5, [r4, #4]
 8005f72:	60a5      	str	r5, [r4, #8]
 8005f74:	60e3      	str	r3, [r4, #12]
 8005f76:	6125      	str	r5, [r4, #16]
 8005f78:	6165      	str	r5, [r4, #20]
 8005f7a:	61a5      	str	r5, [r4, #24]
 8005f7c:	2208      	movs	r2, #8
 8005f7e:	0029      	movs	r1, r5
 8005f80:	305c      	adds	r0, #92	; 0x5c
 8005f82:	f000 f84f 	bl	8006024 <memset>
 8005f86:	6365      	str	r5, [r4, #52]	; 0x34
 8005f88:	63a5      	str	r5, [r4, #56]	; 0x38
 8005f8a:	64a5      	str	r5, [r4, #72]	; 0x48
 8005f8c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005f8e:	e7e9      	b.n	8005f64 <__sfp+0x48>
 8005f90:	08006f30 	.word	0x08006f30
 8005f94:	ffff0001 	.word	0xffff0001

08005f98 <_fwalk_reent>:
 8005f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f9a:	0004      	movs	r4, r0
 8005f9c:	0007      	movs	r7, r0
 8005f9e:	2600      	movs	r6, #0
 8005fa0:	9101      	str	r1, [sp, #4]
 8005fa2:	3448      	adds	r4, #72	; 0x48
 8005fa4:	2c00      	cmp	r4, #0
 8005fa6:	d101      	bne.n	8005fac <_fwalk_reent+0x14>
 8005fa8:	0030      	movs	r0, r6
 8005faa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005fac:	6863      	ldr	r3, [r4, #4]
 8005fae:	68a5      	ldr	r5, [r4, #8]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	9b00      	ldr	r3, [sp, #0]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	d501      	bpl.n	8005fbe <_fwalk_reent+0x26>
 8005fba:	6824      	ldr	r4, [r4, #0]
 8005fbc:	e7f2      	b.n	8005fa4 <_fwalk_reent+0xc>
 8005fbe:	89ab      	ldrh	r3, [r5, #12]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d908      	bls.n	8005fd6 <_fwalk_reent+0x3e>
 8005fc4:	220e      	movs	r2, #14
 8005fc6:	5eab      	ldrsh	r3, [r5, r2]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	d004      	beq.n	8005fd6 <_fwalk_reent+0x3e>
 8005fcc:	0029      	movs	r1, r5
 8005fce:	0038      	movs	r0, r7
 8005fd0:	9b01      	ldr	r3, [sp, #4]
 8005fd2:	4798      	blx	r3
 8005fd4:	4306      	orrs	r6, r0
 8005fd6:	3568      	adds	r5, #104	; 0x68
 8005fd8:	e7eb      	b.n	8005fb2 <_fwalk_reent+0x1a>
	...

08005fdc <__libc_init_array>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	2600      	movs	r6, #0
 8005fe0:	4d0c      	ldr	r5, [pc, #48]	; (8006014 <__libc_init_array+0x38>)
 8005fe2:	4c0d      	ldr	r4, [pc, #52]	; (8006018 <__libc_init_array+0x3c>)
 8005fe4:	1b64      	subs	r4, r4, r5
 8005fe6:	10a4      	asrs	r4, r4, #2
 8005fe8:	42a6      	cmp	r6, r4
 8005fea:	d109      	bne.n	8006000 <__libc_init_array+0x24>
 8005fec:	2600      	movs	r6, #0
 8005fee:	f000 fe5b 	bl	8006ca8 <_init>
 8005ff2:	4d0a      	ldr	r5, [pc, #40]	; (800601c <__libc_init_array+0x40>)
 8005ff4:	4c0a      	ldr	r4, [pc, #40]	; (8006020 <__libc_init_array+0x44>)
 8005ff6:	1b64      	subs	r4, r4, r5
 8005ff8:	10a4      	asrs	r4, r4, #2
 8005ffa:	42a6      	cmp	r6, r4
 8005ffc:	d105      	bne.n	800600a <__libc_init_array+0x2e>
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	00b3      	lsls	r3, r6, #2
 8006002:	58eb      	ldr	r3, [r5, r3]
 8006004:	4798      	blx	r3
 8006006:	3601      	adds	r6, #1
 8006008:	e7ee      	b.n	8005fe8 <__libc_init_array+0xc>
 800600a:	00b3      	lsls	r3, r6, #2
 800600c:	58eb      	ldr	r3, [r5, r3]
 800600e:	4798      	blx	r3
 8006010:	3601      	adds	r6, #1
 8006012:	e7f2      	b.n	8005ffa <__libc_init_array+0x1e>
 8006014:	08006f70 	.word	0x08006f70
 8006018:	08006f70 	.word	0x08006f70
 800601c:	08006f70 	.word	0x08006f70
 8006020:	08006f74 	.word	0x08006f74

08006024 <memset>:
 8006024:	0003      	movs	r3, r0
 8006026:	1812      	adds	r2, r2, r0
 8006028:	4293      	cmp	r3, r2
 800602a:	d100      	bne.n	800602e <memset+0xa>
 800602c:	4770      	bx	lr
 800602e:	7019      	strb	r1, [r3, #0]
 8006030:	3301      	adds	r3, #1
 8006032:	e7f9      	b.n	8006028 <memset+0x4>

08006034 <_free_r>:
 8006034:	b570      	push	{r4, r5, r6, lr}
 8006036:	0005      	movs	r5, r0
 8006038:	2900      	cmp	r1, #0
 800603a:	d010      	beq.n	800605e <_free_r+0x2a>
 800603c:	1f0c      	subs	r4, r1, #4
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	da00      	bge.n	8006046 <_free_r+0x12>
 8006044:	18e4      	adds	r4, r4, r3
 8006046:	0028      	movs	r0, r5
 8006048:	f000 faf0 	bl	800662c <__malloc_lock>
 800604c:	4a1d      	ldr	r2, [pc, #116]	; (80060c4 <_free_r+0x90>)
 800604e:	6813      	ldr	r3, [r2, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d105      	bne.n	8006060 <_free_r+0x2c>
 8006054:	6063      	str	r3, [r4, #4]
 8006056:	6014      	str	r4, [r2, #0]
 8006058:	0028      	movs	r0, r5
 800605a:	f000 fae8 	bl	800662e <__malloc_unlock>
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	42a3      	cmp	r3, r4
 8006062:	d909      	bls.n	8006078 <_free_r+0x44>
 8006064:	6821      	ldr	r1, [r4, #0]
 8006066:	1860      	adds	r0, r4, r1
 8006068:	4283      	cmp	r3, r0
 800606a:	d1f3      	bne.n	8006054 <_free_r+0x20>
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	1841      	adds	r1, r0, r1
 8006072:	6021      	str	r1, [r4, #0]
 8006074:	e7ee      	b.n	8006054 <_free_r+0x20>
 8006076:	0013      	movs	r3, r2
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	2a00      	cmp	r2, #0
 800607c:	d001      	beq.n	8006082 <_free_r+0x4e>
 800607e:	42a2      	cmp	r2, r4
 8006080:	d9f9      	bls.n	8006076 <_free_r+0x42>
 8006082:	6819      	ldr	r1, [r3, #0]
 8006084:	1858      	adds	r0, r3, r1
 8006086:	42a0      	cmp	r0, r4
 8006088:	d10b      	bne.n	80060a2 <_free_r+0x6e>
 800608a:	6820      	ldr	r0, [r4, #0]
 800608c:	1809      	adds	r1, r1, r0
 800608e:	1858      	adds	r0, r3, r1
 8006090:	6019      	str	r1, [r3, #0]
 8006092:	4282      	cmp	r2, r0
 8006094:	d1e0      	bne.n	8006058 <_free_r+0x24>
 8006096:	6810      	ldr	r0, [r2, #0]
 8006098:	6852      	ldr	r2, [r2, #4]
 800609a:	1841      	adds	r1, r0, r1
 800609c:	6019      	str	r1, [r3, #0]
 800609e:	605a      	str	r2, [r3, #4]
 80060a0:	e7da      	b.n	8006058 <_free_r+0x24>
 80060a2:	42a0      	cmp	r0, r4
 80060a4:	d902      	bls.n	80060ac <_free_r+0x78>
 80060a6:	230c      	movs	r3, #12
 80060a8:	602b      	str	r3, [r5, #0]
 80060aa:	e7d5      	b.n	8006058 <_free_r+0x24>
 80060ac:	6821      	ldr	r1, [r4, #0]
 80060ae:	1860      	adds	r0, r4, r1
 80060b0:	4282      	cmp	r2, r0
 80060b2:	d103      	bne.n	80060bc <_free_r+0x88>
 80060b4:	6810      	ldr	r0, [r2, #0]
 80060b6:	6852      	ldr	r2, [r2, #4]
 80060b8:	1841      	adds	r1, r0, r1
 80060ba:	6021      	str	r1, [r4, #0]
 80060bc:	6062      	str	r2, [r4, #4]
 80060be:	605c      	str	r4, [r3, #4]
 80060c0:	e7ca      	b.n	8006058 <_free_r+0x24>
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	200000b0 	.word	0x200000b0

080060c8 <_malloc_r>:
 80060c8:	2303      	movs	r3, #3
 80060ca:	b570      	push	{r4, r5, r6, lr}
 80060cc:	1ccd      	adds	r5, r1, #3
 80060ce:	439d      	bics	r5, r3
 80060d0:	3508      	adds	r5, #8
 80060d2:	0006      	movs	r6, r0
 80060d4:	2d0c      	cmp	r5, #12
 80060d6:	d21e      	bcs.n	8006116 <_malloc_r+0x4e>
 80060d8:	250c      	movs	r5, #12
 80060da:	42a9      	cmp	r1, r5
 80060dc:	d81d      	bhi.n	800611a <_malloc_r+0x52>
 80060de:	0030      	movs	r0, r6
 80060e0:	f000 faa4 	bl	800662c <__malloc_lock>
 80060e4:	4a25      	ldr	r2, [pc, #148]	; (800617c <_malloc_r+0xb4>)
 80060e6:	6814      	ldr	r4, [r2, #0]
 80060e8:	0021      	movs	r1, r4
 80060ea:	2900      	cmp	r1, #0
 80060ec:	d119      	bne.n	8006122 <_malloc_r+0x5a>
 80060ee:	4c24      	ldr	r4, [pc, #144]	; (8006180 <_malloc_r+0xb8>)
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d103      	bne.n	80060fe <_malloc_r+0x36>
 80060f6:	0030      	movs	r0, r6
 80060f8:	f000 f8c8 	bl	800628c <_sbrk_r>
 80060fc:	6020      	str	r0, [r4, #0]
 80060fe:	0029      	movs	r1, r5
 8006100:	0030      	movs	r0, r6
 8006102:	f000 f8c3 	bl	800628c <_sbrk_r>
 8006106:	1c43      	adds	r3, r0, #1
 8006108:	d12b      	bne.n	8006162 <_malloc_r+0x9a>
 800610a:	230c      	movs	r3, #12
 800610c:	0030      	movs	r0, r6
 800610e:	6033      	str	r3, [r6, #0]
 8006110:	f000 fa8d 	bl	800662e <__malloc_unlock>
 8006114:	e003      	b.n	800611e <_malloc_r+0x56>
 8006116:	2d00      	cmp	r5, #0
 8006118:	dadf      	bge.n	80060da <_malloc_r+0x12>
 800611a:	230c      	movs	r3, #12
 800611c:	6033      	str	r3, [r6, #0]
 800611e:	2000      	movs	r0, #0
 8006120:	bd70      	pop	{r4, r5, r6, pc}
 8006122:	680b      	ldr	r3, [r1, #0]
 8006124:	1b5b      	subs	r3, r3, r5
 8006126:	d419      	bmi.n	800615c <_malloc_r+0x94>
 8006128:	2b0b      	cmp	r3, #11
 800612a:	d903      	bls.n	8006134 <_malloc_r+0x6c>
 800612c:	600b      	str	r3, [r1, #0]
 800612e:	18cc      	adds	r4, r1, r3
 8006130:	6025      	str	r5, [r4, #0]
 8006132:	e003      	b.n	800613c <_malloc_r+0x74>
 8006134:	684b      	ldr	r3, [r1, #4]
 8006136:	428c      	cmp	r4, r1
 8006138:	d10d      	bne.n	8006156 <_malloc_r+0x8e>
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	0030      	movs	r0, r6
 800613e:	f000 fa76 	bl	800662e <__malloc_unlock>
 8006142:	0020      	movs	r0, r4
 8006144:	2207      	movs	r2, #7
 8006146:	300b      	adds	r0, #11
 8006148:	1d23      	adds	r3, r4, #4
 800614a:	4390      	bics	r0, r2
 800614c:	1ac3      	subs	r3, r0, r3
 800614e:	d0e7      	beq.n	8006120 <_malloc_r+0x58>
 8006150:	425a      	negs	r2, r3
 8006152:	50e2      	str	r2, [r4, r3]
 8006154:	e7e4      	b.n	8006120 <_malloc_r+0x58>
 8006156:	6063      	str	r3, [r4, #4]
 8006158:	000c      	movs	r4, r1
 800615a:	e7ef      	b.n	800613c <_malloc_r+0x74>
 800615c:	000c      	movs	r4, r1
 800615e:	6849      	ldr	r1, [r1, #4]
 8006160:	e7c3      	b.n	80060ea <_malloc_r+0x22>
 8006162:	2303      	movs	r3, #3
 8006164:	1cc4      	adds	r4, r0, #3
 8006166:	439c      	bics	r4, r3
 8006168:	42a0      	cmp	r0, r4
 800616a:	d0e1      	beq.n	8006130 <_malloc_r+0x68>
 800616c:	1a21      	subs	r1, r4, r0
 800616e:	0030      	movs	r0, r6
 8006170:	f000 f88c 	bl	800628c <_sbrk_r>
 8006174:	1c43      	adds	r3, r0, #1
 8006176:	d1db      	bne.n	8006130 <_malloc_r+0x68>
 8006178:	e7c7      	b.n	800610a <_malloc_r+0x42>
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	200000b0 	.word	0x200000b0
 8006180:	200000b4 	.word	0x200000b4

08006184 <iprintf>:
 8006184:	b40f      	push	{r0, r1, r2, r3}
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <iprintf+0x30>)
 8006188:	b513      	push	{r0, r1, r4, lr}
 800618a:	681c      	ldr	r4, [r3, #0]
 800618c:	2c00      	cmp	r4, #0
 800618e:	d005      	beq.n	800619c <iprintf+0x18>
 8006190:	69a3      	ldr	r3, [r4, #24]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d102      	bne.n	800619c <iprintf+0x18>
 8006196:	0020      	movs	r0, r4
 8006198:	f7ff fe8c 	bl	8005eb4 <__sinit>
 800619c:	ab05      	add	r3, sp, #20
 800619e:	9a04      	ldr	r2, [sp, #16]
 80061a0:	68a1      	ldr	r1, [r4, #8]
 80061a2:	0020      	movs	r0, r4
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	f000 fa6b 	bl	8006680 <_vfiprintf_r>
 80061aa:	bc16      	pop	{r1, r2, r4}
 80061ac:	bc08      	pop	{r3}
 80061ae:	b004      	add	sp, #16
 80061b0:	4718      	bx	r3
 80061b2:	46c0      	nop			; (mov r8, r8)
 80061b4:	20000004 	.word	0x20000004

080061b8 <_puts_r>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	0005      	movs	r5, r0
 80061bc:	000e      	movs	r6, r1
 80061be:	2800      	cmp	r0, #0
 80061c0:	d004      	beq.n	80061cc <_puts_r+0x14>
 80061c2:	6983      	ldr	r3, [r0, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <_puts_r+0x14>
 80061c8:	f7ff fe74 	bl	8005eb4 <__sinit>
 80061cc:	69ab      	ldr	r3, [r5, #24]
 80061ce:	68ac      	ldr	r4, [r5, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d102      	bne.n	80061da <_puts_r+0x22>
 80061d4:	0028      	movs	r0, r5
 80061d6:	f7ff fe6d 	bl	8005eb4 <__sinit>
 80061da:	4b24      	ldr	r3, [pc, #144]	; (800626c <_puts_r+0xb4>)
 80061dc:	429c      	cmp	r4, r3
 80061de:	d10f      	bne.n	8006200 <_puts_r+0x48>
 80061e0:	686c      	ldr	r4, [r5, #4]
 80061e2:	89a3      	ldrh	r3, [r4, #12]
 80061e4:	071b      	lsls	r3, r3, #28
 80061e6:	d502      	bpl.n	80061ee <_puts_r+0x36>
 80061e8:	6923      	ldr	r3, [r4, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d11f      	bne.n	800622e <_puts_r+0x76>
 80061ee:	0021      	movs	r1, r4
 80061f0:	0028      	movs	r0, r5
 80061f2:	f000 f913 	bl	800641c <__swsetup_r>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d019      	beq.n	800622e <_puts_r+0x76>
 80061fa:	2001      	movs	r0, #1
 80061fc:	4240      	negs	r0, r0
 80061fe:	bd70      	pop	{r4, r5, r6, pc}
 8006200:	4b1b      	ldr	r3, [pc, #108]	; (8006270 <_puts_r+0xb8>)
 8006202:	429c      	cmp	r4, r3
 8006204:	d101      	bne.n	800620a <_puts_r+0x52>
 8006206:	68ac      	ldr	r4, [r5, #8]
 8006208:	e7eb      	b.n	80061e2 <_puts_r+0x2a>
 800620a:	4b1a      	ldr	r3, [pc, #104]	; (8006274 <_puts_r+0xbc>)
 800620c:	429c      	cmp	r4, r3
 800620e:	d1e8      	bne.n	80061e2 <_puts_r+0x2a>
 8006210:	68ec      	ldr	r4, [r5, #12]
 8006212:	e7e6      	b.n	80061e2 <_puts_r+0x2a>
 8006214:	3601      	adds	r6, #1
 8006216:	60a3      	str	r3, [r4, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	da04      	bge.n	8006226 <_puts_r+0x6e>
 800621c:	69a2      	ldr	r2, [r4, #24]
 800621e:	429a      	cmp	r2, r3
 8006220:	dc16      	bgt.n	8006250 <_puts_r+0x98>
 8006222:	290a      	cmp	r1, #10
 8006224:	d014      	beq.n	8006250 <_puts_r+0x98>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	6022      	str	r2, [r4, #0]
 800622c:	7019      	strb	r1, [r3, #0]
 800622e:	68a3      	ldr	r3, [r4, #8]
 8006230:	7831      	ldrb	r1, [r6, #0]
 8006232:	3b01      	subs	r3, #1
 8006234:	2900      	cmp	r1, #0
 8006236:	d1ed      	bne.n	8006214 <_puts_r+0x5c>
 8006238:	60a3      	str	r3, [r4, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	da0f      	bge.n	800625e <_puts_r+0xa6>
 800623e:	0022      	movs	r2, r4
 8006240:	310a      	adds	r1, #10
 8006242:	0028      	movs	r0, r5
 8006244:	f000 f880 	bl	8006348 <__swbuf_r>
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	d0d6      	beq.n	80061fa <_puts_r+0x42>
 800624c:	200a      	movs	r0, #10
 800624e:	e7d6      	b.n	80061fe <_puts_r+0x46>
 8006250:	0022      	movs	r2, r4
 8006252:	0028      	movs	r0, r5
 8006254:	f000 f878 	bl	8006348 <__swbuf_r>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d1e8      	bne.n	800622e <_puts_r+0x76>
 800625c:	e7cd      	b.n	80061fa <_puts_r+0x42>
 800625e:	200a      	movs	r0, #10
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	6022      	str	r2, [r4, #0]
 8006266:	7018      	strb	r0, [r3, #0]
 8006268:	e7c9      	b.n	80061fe <_puts_r+0x46>
 800626a:	46c0      	nop			; (mov r8, r8)
 800626c:	08006ef0 	.word	0x08006ef0
 8006270:	08006f10 	.word	0x08006f10
 8006274:	08006ed0 	.word	0x08006ed0

08006278 <puts>:
 8006278:	b510      	push	{r4, lr}
 800627a:	4b03      	ldr	r3, [pc, #12]	; (8006288 <puts+0x10>)
 800627c:	0001      	movs	r1, r0
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	f7ff ff9a 	bl	80061b8 <_puts_r>
 8006284:	bd10      	pop	{r4, pc}
 8006286:	46c0      	nop			; (mov r8, r8)
 8006288:	20000004 	.word	0x20000004

0800628c <_sbrk_r>:
 800628c:	2300      	movs	r3, #0
 800628e:	b570      	push	{r4, r5, r6, lr}
 8006290:	4c06      	ldr	r4, [pc, #24]	; (80062ac <_sbrk_r+0x20>)
 8006292:	0005      	movs	r5, r0
 8006294:	0008      	movs	r0, r1
 8006296:	6023      	str	r3, [r4, #0]
 8006298:	f7ff fc66 	bl	8005b68 <_sbrk>
 800629c:	1c43      	adds	r3, r0, #1
 800629e:	d103      	bne.n	80062a8 <_sbrk_r+0x1c>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d000      	beq.n	80062a8 <_sbrk_r+0x1c>
 80062a6:	602b      	str	r3, [r5, #0]
 80062a8:	bd70      	pop	{r4, r5, r6, pc}
 80062aa:	46c0      	nop			; (mov r8, r8)
 80062ac:	200002e8 	.word	0x200002e8

080062b0 <__sread>:
 80062b0:	b570      	push	{r4, r5, r6, lr}
 80062b2:	000c      	movs	r4, r1
 80062b4:	250e      	movs	r5, #14
 80062b6:	5f49      	ldrsh	r1, [r1, r5]
 80062b8:	f000 fc6e 	bl	8006b98 <_read_r>
 80062bc:	2800      	cmp	r0, #0
 80062be:	db03      	blt.n	80062c8 <__sread+0x18>
 80062c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80062c2:	181b      	adds	r3, r3, r0
 80062c4:	6563      	str	r3, [r4, #84]	; 0x54
 80062c6:	bd70      	pop	{r4, r5, r6, pc}
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	4a02      	ldr	r2, [pc, #8]	; (80062d4 <__sread+0x24>)
 80062cc:	4013      	ands	r3, r2
 80062ce:	81a3      	strh	r3, [r4, #12]
 80062d0:	e7f9      	b.n	80062c6 <__sread+0x16>
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	ffffefff 	.word	0xffffefff

080062d8 <__swrite>:
 80062d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062da:	001f      	movs	r7, r3
 80062dc:	898b      	ldrh	r3, [r1, #12]
 80062de:	0005      	movs	r5, r0
 80062e0:	000c      	movs	r4, r1
 80062e2:	0016      	movs	r6, r2
 80062e4:	05db      	lsls	r3, r3, #23
 80062e6:	d505      	bpl.n	80062f4 <__swrite+0x1c>
 80062e8:	230e      	movs	r3, #14
 80062ea:	5ec9      	ldrsh	r1, [r1, r3]
 80062ec:	2200      	movs	r2, #0
 80062ee:	2302      	movs	r3, #2
 80062f0:	f000 f91c 	bl	800652c <_lseek_r>
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	4a05      	ldr	r2, [pc, #20]	; (800630c <__swrite+0x34>)
 80062f8:	0028      	movs	r0, r5
 80062fa:	4013      	ands	r3, r2
 80062fc:	81a3      	strh	r3, [r4, #12]
 80062fe:	0032      	movs	r2, r6
 8006300:	230e      	movs	r3, #14
 8006302:	5ee1      	ldrsh	r1, [r4, r3]
 8006304:	003b      	movs	r3, r7
 8006306:	f000 f875 	bl	80063f4 <_write_r>
 800630a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800630c:	ffffefff 	.word	0xffffefff

08006310 <__sseek>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	000c      	movs	r4, r1
 8006314:	250e      	movs	r5, #14
 8006316:	5f49      	ldrsh	r1, [r1, r5]
 8006318:	f000 f908 	bl	800652c <_lseek_r>
 800631c:	89a3      	ldrh	r3, [r4, #12]
 800631e:	1c42      	adds	r2, r0, #1
 8006320:	d103      	bne.n	800632a <__sseek+0x1a>
 8006322:	4a05      	ldr	r2, [pc, #20]	; (8006338 <__sseek+0x28>)
 8006324:	4013      	ands	r3, r2
 8006326:	81a3      	strh	r3, [r4, #12]
 8006328:	bd70      	pop	{r4, r5, r6, pc}
 800632a:	2280      	movs	r2, #128	; 0x80
 800632c:	0152      	lsls	r2, r2, #5
 800632e:	4313      	orrs	r3, r2
 8006330:	81a3      	strh	r3, [r4, #12]
 8006332:	6560      	str	r0, [r4, #84]	; 0x54
 8006334:	e7f8      	b.n	8006328 <__sseek+0x18>
 8006336:	46c0      	nop			; (mov r8, r8)
 8006338:	ffffefff 	.word	0xffffefff

0800633c <__sclose>:
 800633c:	b510      	push	{r4, lr}
 800633e:	230e      	movs	r3, #14
 8006340:	5ec9      	ldrsh	r1, [r1, r3]
 8006342:	f000 f8e1 	bl	8006508 <_close_r>
 8006346:	bd10      	pop	{r4, pc}

08006348 <__swbuf_r>:
 8006348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634a:	0005      	movs	r5, r0
 800634c:	000e      	movs	r6, r1
 800634e:	0014      	movs	r4, r2
 8006350:	2800      	cmp	r0, #0
 8006352:	d004      	beq.n	800635e <__swbuf_r+0x16>
 8006354:	6983      	ldr	r3, [r0, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <__swbuf_r+0x16>
 800635a:	f7ff fdab 	bl	8005eb4 <__sinit>
 800635e:	4b22      	ldr	r3, [pc, #136]	; (80063e8 <__swbuf_r+0xa0>)
 8006360:	429c      	cmp	r4, r3
 8006362:	d12d      	bne.n	80063c0 <__swbuf_r+0x78>
 8006364:	686c      	ldr	r4, [r5, #4]
 8006366:	69a3      	ldr	r3, [r4, #24]
 8006368:	60a3      	str	r3, [r4, #8]
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	071b      	lsls	r3, r3, #28
 800636e:	d531      	bpl.n	80063d4 <__swbuf_r+0x8c>
 8006370:	6923      	ldr	r3, [r4, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d02e      	beq.n	80063d4 <__swbuf_r+0x8c>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	6922      	ldr	r2, [r4, #16]
 800637a:	b2f7      	uxtb	r7, r6
 800637c:	1a98      	subs	r0, r3, r2
 800637e:	6963      	ldr	r3, [r4, #20]
 8006380:	b2f6      	uxtb	r6, r6
 8006382:	4283      	cmp	r3, r0
 8006384:	dc05      	bgt.n	8006392 <__swbuf_r+0x4a>
 8006386:	0021      	movs	r1, r4
 8006388:	0028      	movs	r0, r5
 800638a:	f7ff fd11 	bl	8005db0 <_fflush_r>
 800638e:	2800      	cmp	r0, #0
 8006390:	d126      	bne.n	80063e0 <__swbuf_r+0x98>
 8006392:	68a3      	ldr	r3, [r4, #8]
 8006394:	3001      	adds	r0, #1
 8006396:	3b01      	subs	r3, #1
 8006398:	60a3      	str	r3, [r4, #8]
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	6022      	str	r2, [r4, #0]
 80063a0:	701f      	strb	r7, [r3, #0]
 80063a2:	6963      	ldr	r3, [r4, #20]
 80063a4:	4283      	cmp	r3, r0
 80063a6:	d004      	beq.n	80063b2 <__swbuf_r+0x6a>
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	07db      	lsls	r3, r3, #31
 80063ac:	d51a      	bpl.n	80063e4 <__swbuf_r+0x9c>
 80063ae:	2e0a      	cmp	r6, #10
 80063b0:	d118      	bne.n	80063e4 <__swbuf_r+0x9c>
 80063b2:	0021      	movs	r1, r4
 80063b4:	0028      	movs	r0, r5
 80063b6:	f7ff fcfb 	bl	8005db0 <_fflush_r>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d012      	beq.n	80063e4 <__swbuf_r+0x9c>
 80063be:	e00f      	b.n	80063e0 <__swbuf_r+0x98>
 80063c0:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <__swbuf_r+0xa4>)
 80063c2:	429c      	cmp	r4, r3
 80063c4:	d101      	bne.n	80063ca <__swbuf_r+0x82>
 80063c6:	68ac      	ldr	r4, [r5, #8]
 80063c8:	e7cd      	b.n	8006366 <__swbuf_r+0x1e>
 80063ca:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <__swbuf_r+0xa8>)
 80063cc:	429c      	cmp	r4, r3
 80063ce:	d1ca      	bne.n	8006366 <__swbuf_r+0x1e>
 80063d0:	68ec      	ldr	r4, [r5, #12]
 80063d2:	e7c8      	b.n	8006366 <__swbuf_r+0x1e>
 80063d4:	0021      	movs	r1, r4
 80063d6:	0028      	movs	r0, r5
 80063d8:	f000 f820 	bl	800641c <__swsetup_r>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d0ca      	beq.n	8006376 <__swbuf_r+0x2e>
 80063e0:	2601      	movs	r6, #1
 80063e2:	4276      	negs	r6, r6
 80063e4:	0030      	movs	r0, r6
 80063e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063e8:	08006ef0 	.word	0x08006ef0
 80063ec:	08006f10 	.word	0x08006f10
 80063f0:	08006ed0 	.word	0x08006ed0

080063f4 <_write_r>:
 80063f4:	b570      	push	{r4, r5, r6, lr}
 80063f6:	0005      	movs	r5, r0
 80063f8:	0008      	movs	r0, r1
 80063fa:	0011      	movs	r1, r2
 80063fc:	2200      	movs	r2, #0
 80063fe:	4c06      	ldr	r4, [pc, #24]	; (8006418 <_write_r+0x24>)
 8006400:	6022      	str	r2, [r4, #0]
 8006402:	001a      	movs	r2, r3
 8006404:	f7ff fb67 	bl	8005ad6 <_write>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d103      	bne.n	8006414 <_write_r+0x20>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d000      	beq.n	8006414 <_write_r+0x20>
 8006412:	602b      	str	r3, [r5, #0]
 8006414:	bd70      	pop	{r4, r5, r6, pc}
 8006416:	46c0      	nop			; (mov r8, r8)
 8006418:	200002e8 	.word	0x200002e8

0800641c <__swsetup_r>:
 800641c:	4b36      	ldr	r3, [pc, #216]	; (80064f8 <__swsetup_r+0xdc>)
 800641e:	b570      	push	{r4, r5, r6, lr}
 8006420:	681d      	ldr	r5, [r3, #0]
 8006422:	0006      	movs	r6, r0
 8006424:	000c      	movs	r4, r1
 8006426:	2d00      	cmp	r5, #0
 8006428:	d005      	beq.n	8006436 <__swsetup_r+0x1a>
 800642a:	69ab      	ldr	r3, [r5, #24]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d102      	bne.n	8006436 <__swsetup_r+0x1a>
 8006430:	0028      	movs	r0, r5
 8006432:	f7ff fd3f 	bl	8005eb4 <__sinit>
 8006436:	4b31      	ldr	r3, [pc, #196]	; (80064fc <__swsetup_r+0xe0>)
 8006438:	429c      	cmp	r4, r3
 800643a:	d10f      	bne.n	800645c <__swsetup_r+0x40>
 800643c:	686c      	ldr	r4, [r5, #4]
 800643e:	230c      	movs	r3, #12
 8006440:	5ee2      	ldrsh	r2, [r4, r3]
 8006442:	b293      	uxth	r3, r2
 8006444:	0719      	lsls	r1, r3, #28
 8006446:	d42d      	bmi.n	80064a4 <__swsetup_r+0x88>
 8006448:	06d9      	lsls	r1, r3, #27
 800644a:	d411      	bmi.n	8006470 <__swsetup_r+0x54>
 800644c:	2309      	movs	r3, #9
 800644e:	2001      	movs	r0, #1
 8006450:	6033      	str	r3, [r6, #0]
 8006452:	3337      	adds	r3, #55	; 0x37
 8006454:	4313      	orrs	r3, r2
 8006456:	81a3      	strh	r3, [r4, #12]
 8006458:	4240      	negs	r0, r0
 800645a:	bd70      	pop	{r4, r5, r6, pc}
 800645c:	4b28      	ldr	r3, [pc, #160]	; (8006500 <__swsetup_r+0xe4>)
 800645e:	429c      	cmp	r4, r3
 8006460:	d101      	bne.n	8006466 <__swsetup_r+0x4a>
 8006462:	68ac      	ldr	r4, [r5, #8]
 8006464:	e7eb      	b.n	800643e <__swsetup_r+0x22>
 8006466:	4b27      	ldr	r3, [pc, #156]	; (8006504 <__swsetup_r+0xe8>)
 8006468:	429c      	cmp	r4, r3
 800646a:	d1e8      	bne.n	800643e <__swsetup_r+0x22>
 800646c:	68ec      	ldr	r4, [r5, #12]
 800646e:	e7e6      	b.n	800643e <__swsetup_r+0x22>
 8006470:	075b      	lsls	r3, r3, #29
 8006472:	d513      	bpl.n	800649c <__swsetup_r+0x80>
 8006474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006476:	2900      	cmp	r1, #0
 8006478:	d008      	beq.n	800648c <__swsetup_r+0x70>
 800647a:	0023      	movs	r3, r4
 800647c:	3344      	adds	r3, #68	; 0x44
 800647e:	4299      	cmp	r1, r3
 8006480:	d002      	beq.n	8006488 <__swsetup_r+0x6c>
 8006482:	0030      	movs	r0, r6
 8006484:	f7ff fdd6 	bl	8006034 <_free_r>
 8006488:	2300      	movs	r3, #0
 800648a:	6363      	str	r3, [r4, #52]	; 0x34
 800648c:	2224      	movs	r2, #36	; 0x24
 800648e:	89a3      	ldrh	r3, [r4, #12]
 8006490:	4393      	bics	r3, r2
 8006492:	81a3      	strh	r3, [r4, #12]
 8006494:	2300      	movs	r3, #0
 8006496:	6063      	str	r3, [r4, #4]
 8006498:	6923      	ldr	r3, [r4, #16]
 800649a:	6023      	str	r3, [r4, #0]
 800649c:	2308      	movs	r3, #8
 800649e:	89a2      	ldrh	r2, [r4, #12]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	81a3      	strh	r3, [r4, #12]
 80064a4:	6923      	ldr	r3, [r4, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10b      	bne.n	80064c2 <__swsetup_r+0xa6>
 80064aa:	21a0      	movs	r1, #160	; 0xa0
 80064ac:	2280      	movs	r2, #128	; 0x80
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	0089      	lsls	r1, r1, #2
 80064b2:	0092      	lsls	r2, r2, #2
 80064b4:	400b      	ands	r3, r1
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d003      	beq.n	80064c2 <__swsetup_r+0xa6>
 80064ba:	0021      	movs	r1, r4
 80064bc:	0030      	movs	r0, r6
 80064be:	f000 f871 	bl	80065a4 <__smakebuf_r>
 80064c2:	2301      	movs	r3, #1
 80064c4:	89a2      	ldrh	r2, [r4, #12]
 80064c6:	4013      	ands	r3, r2
 80064c8:	d011      	beq.n	80064ee <__swsetup_r+0xd2>
 80064ca:	2300      	movs	r3, #0
 80064cc:	60a3      	str	r3, [r4, #8]
 80064ce:	6963      	ldr	r3, [r4, #20]
 80064d0:	425b      	negs	r3, r3
 80064d2:	61a3      	str	r3, [r4, #24]
 80064d4:	2000      	movs	r0, #0
 80064d6:	6923      	ldr	r3, [r4, #16]
 80064d8:	4283      	cmp	r3, r0
 80064da:	d1be      	bne.n	800645a <__swsetup_r+0x3e>
 80064dc:	230c      	movs	r3, #12
 80064de:	5ee2      	ldrsh	r2, [r4, r3]
 80064e0:	0613      	lsls	r3, r2, #24
 80064e2:	d5ba      	bpl.n	800645a <__swsetup_r+0x3e>
 80064e4:	2340      	movs	r3, #64	; 0x40
 80064e6:	4313      	orrs	r3, r2
 80064e8:	81a3      	strh	r3, [r4, #12]
 80064ea:	3801      	subs	r0, #1
 80064ec:	e7b5      	b.n	800645a <__swsetup_r+0x3e>
 80064ee:	0792      	lsls	r2, r2, #30
 80064f0:	d400      	bmi.n	80064f4 <__swsetup_r+0xd8>
 80064f2:	6963      	ldr	r3, [r4, #20]
 80064f4:	60a3      	str	r3, [r4, #8]
 80064f6:	e7ed      	b.n	80064d4 <__swsetup_r+0xb8>
 80064f8:	20000004 	.word	0x20000004
 80064fc:	08006ef0 	.word	0x08006ef0
 8006500:	08006f10 	.word	0x08006f10
 8006504:	08006ed0 	.word	0x08006ed0

08006508 <_close_r>:
 8006508:	2300      	movs	r3, #0
 800650a:	b570      	push	{r4, r5, r6, lr}
 800650c:	4c06      	ldr	r4, [pc, #24]	; (8006528 <_close_r+0x20>)
 800650e:	0005      	movs	r5, r0
 8006510:	0008      	movs	r0, r1
 8006512:	6023      	str	r3, [r4, #0]
 8006514:	f7ff fafb 	bl	8005b0e <_close>
 8006518:	1c43      	adds	r3, r0, #1
 800651a:	d103      	bne.n	8006524 <_close_r+0x1c>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d000      	beq.n	8006524 <_close_r+0x1c>
 8006522:	602b      	str	r3, [r5, #0]
 8006524:	bd70      	pop	{r4, r5, r6, pc}
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	200002e8 	.word	0x200002e8

0800652c <_lseek_r>:
 800652c:	b570      	push	{r4, r5, r6, lr}
 800652e:	0005      	movs	r5, r0
 8006530:	0008      	movs	r0, r1
 8006532:	0011      	movs	r1, r2
 8006534:	2200      	movs	r2, #0
 8006536:	4c06      	ldr	r4, [pc, #24]	; (8006550 <_lseek_r+0x24>)
 8006538:	6022      	str	r2, [r4, #0]
 800653a:	001a      	movs	r2, r3
 800653c:	f7ff fb08 	bl	8005b50 <_lseek>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d103      	bne.n	800654c <_lseek_r+0x20>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d000      	beq.n	800654c <_lseek_r+0x20>
 800654a:	602b      	str	r3, [r5, #0]
 800654c:	bd70      	pop	{r4, r5, r6, pc}
 800654e:	46c0      	nop			; (mov r8, r8)
 8006550:	200002e8 	.word	0x200002e8

08006554 <__swhatbuf_r>:
 8006554:	b570      	push	{r4, r5, r6, lr}
 8006556:	000e      	movs	r6, r1
 8006558:	001d      	movs	r5, r3
 800655a:	230e      	movs	r3, #14
 800655c:	5ec9      	ldrsh	r1, [r1, r3]
 800655e:	b096      	sub	sp, #88	; 0x58
 8006560:	0014      	movs	r4, r2
 8006562:	2900      	cmp	r1, #0
 8006564:	da07      	bge.n	8006576 <__swhatbuf_r+0x22>
 8006566:	2300      	movs	r3, #0
 8006568:	602b      	str	r3, [r5, #0]
 800656a:	89b3      	ldrh	r3, [r6, #12]
 800656c:	061b      	lsls	r3, r3, #24
 800656e:	d411      	bmi.n	8006594 <__swhatbuf_r+0x40>
 8006570:	2380      	movs	r3, #128	; 0x80
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	e00f      	b.n	8006596 <__swhatbuf_r+0x42>
 8006576:	466a      	mov	r2, sp
 8006578:	f000 fb22 	bl	8006bc0 <_fstat_r>
 800657c:	2800      	cmp	r0, #0
 800657e:	dbf2      	blt.n	8006566 <__swhatbuf_r+0x12>
 8006580:	22f0      	movs	r2, #240	; 0xf0
 8006582:	9b01      	ldr	r3, [sp, #4]
 8006584:	0212      	lsls	r2, r2, #8
 8006586:	4013      	ands	r3, r2
 8006588:	4a05      	ldr	r2, [pc, #20]	; (80065a0 <__swhatbuf_r+0x4c>)
 800658a:	189b      	adds	r3, r3, r2
 800658c:	425a      	negs	r2, r3
 800658e:	4153      	adcs	r3, r2
 8006590:	602b      	str	r3, [r5, #0]
 8006592:	e7ed      	b.n	8006570 <__swhatbuf_r+0x1c>
 8006594:	2340      	movs	r3, #64	; 0x40
 8006596:	2000      	movs	r0, #0
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	b016      	add	sp, #88	; 0x58
 800659c:	bd70      	pop	{r4, r5, r6, pc}
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	ffffe000 	.word	0xffffe000

080065a4 <__smakebuf_r>:
 80065a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065a6:	2602      	movs	r6, #2
 80065a8:	898b      	ldrh	r3, [r1, #12]
 80065aa:	0005      	movs	r5, r0
 80065ac:	000c      	movs	r4, r1
 80065ae:	4233      	tst	r3, r6
 80065b0:	d006      	beq.n	80065c0 <__smakebuf_r+0x1c>
 80065b2:	0023      	movs	r3, r4
 80065b4:	3347      	adds	r3, #71	; 0x47
 80065b6:	6023      	str	r3, [r4, #0]
 80065b8:	6123      	str	r3, [r4, #16]
 80065ba:	2301      	movs	r3, #1
 80065bc:	6163      	str	r3, [r4, #20]
 80065be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80065c0:	ab01      	add	r3, sp, #4
 80065c2:	466a      	mov	r2, sp
 80065c4:	f7ff ffc6 	bl	8006554 <__swhatbuf_r>
 80065c8:	9900      	ldr	r1, [sp, #0]
 80065ca:	0007      	movs	r7, r0
 80065cc:	0028      	movs	r0, r5
 80065ce:	f7ff fd7b 	bl	80060c8 <_malloc_r>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d108      	bne.n	80065e8 <__smakebuf_r+0x44>
 80065d6:	220c      	movs	r2, #12
 80065d8:	5ea3      	ldrsh	r3, [r4, r2]
 80065da:	059a      	lsls	r2, r3, #22
 80065dc:	d4ef      	bmi.n	80065be <__smakebuf_r+0x1a>
 80065de:	2203      	movs	r2, #3
 80065e0:	4393      	bics	r3, r2
 80065e2:	431e      	orrs	r6, r3
 80065e4:	81a6      	strh	r6, [r4, #12]
 80065e6:	e7e4      	b.n	80065b2 <__smakebuf_r+0xe>
 80065e8:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <__smakebuf_r+0x84>)
 80065ea:	62ab      	str	r3, [r5, #40]	; 0x28
 80065ec:	2380      	movs	r3, #128	; 0x80
 80065ee:	89a2      	ldrh	r2, [r4, #12]
 80065f0:	6020      	str	r0, [r4, #0]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	81a3      	strh	r3, [r4, #12]
 80065f6:	9b00      	ldr	r3, [sp, #0]
 80065f8:	6120      	str	r0, [r4, #16]
 80065fa:	6163      	str	r3, [r4, #20]
 80065fc:	9b01      	ldr	r3, [sp, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00d      	beq.n	800661e <__smakebuf_r+0x7a>
 8006602:	230e      	movs	r3, #14
 8006604:	5ee1      	ldrsh	r1, [r4, r3]
 8006606:	0028      	movs	r0, r5
 8006608:	f000 faec 	bl	8006be4 <_isatty_r>
 800660c:	2800      	cmp	r0, #0
 800660e:	d006      	beq.n	800661e <__smakebuf_r+0x7a>
 8006610:	2203      	movs	r2, #3
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	4393      	bics	r3, r2
 8006616:	001a      	movs	r2, r3
 8006618:	2301      	movs	r3, #1
 800661a:	4313      	orrs	r3, r2
 800661c:	81a3      	strh	r3, [r4, #12]
 800661e:	89a0      	ldrh	r0, [r4, #12]
 8006620:	4338      	orrs	r0, r7
 8006622:	81a0      	strh	r0, [r4, #12]
 8006624:	e7cb      	b.n	80065be <__smakebuf_r+0x1a>
 8006626:	46c0      	nop			; (mov r8, r8)
 8006628:	08005e79 	.word	0x08005e79

0800662c <__malloc_lock>:
 800662c:	4770      	bx	lr

0800662e <__malloc_unlock>:
 800662e:	4770      	bx	lr

08006630 <__sfputc_r>:
 8006630:	6893      	ldr	r3, [r2, #8]
 8006632:	b510      	push	{r4, lr}
 8006634:	3b01      	subs	r3, #1
 8006636:	6093      	str	r3, [r2, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	da04      	bge.n	8006646 <__sfputc_r+0x16>
 800663c:	6994      	ldr	r4, [r2, #24]
 800663e:	42a3      	cmp	r3, r4
 8006640:	db07      	blt.n	8006652 <__sfputc_r+0x22>
 8006642:	290a      	cmp	r1, #10
 8006644:	d005      	beq.n	8006652 <__sfputc_r+0x22>
 8006646:	6813      	ldr	r3, [r2, #0]
 8006648:	1c58      	adds	r0, r3, #1
 800664a:	6010      	str	r0, [r2, #0]
 800664c:	7019      	strb	r1, [r3, #0]
 800664e:	0008      	movs	r0, r1
 8006650:	bd10      	pop	{r4, pc}
 8006652:	f7ff fe79 	bl	8006348 <__swbuf_r>
 8006656:	0001      	movs	r1, r0
 8006658:	e7f9      	b.n	800664e <__sfputc_r+0x1e>

0800665a <__sfputs_r>:
 800665a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665c:	0006      	movs	r6, r0
 800665e:	000f      	movs	r7, r1
 8006660:	0014      	movs	r4, r2
 8006662:	18d5      	adds	r5, r2, r3
 8006664:	42ac      	cmp	r4, r5
 8006666:	d101      	bne.n	800666c <__sfputs_r+0x12>
 8006668:	2000      	movs	r0, #0
 800666a:	e007      	b.n	800667c <__sfputs_r+0x22>
 800666c:	7821      	ldrb	r1, [r4, #0]
 800666e:	003a      	movs	r2, r7
 8006670:	0030      	movs	r0, r6
 8006672:	f7ff ffdd 	bl	8006630 <__sfputc_r>
 8006676:	3401      	adds	r4, #1
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d1f3      	bne.n	8006664 <__sfputs_r+0xa>
 800667c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006680 <_vfiprintf_r>:
 8006680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006682:	b0a1      	sub	sp, #132	; 0x84
 8006684:	9003      	str	r0, [sp, #12]
 8006686:	000f      	movs	r7, r1
 8006688:	0016      	movs	r6, r2
 800668a:	001d      	movs	r5, r3
 800668c:	2800      	cmp	r0, #0
 800668e:	d005      	beq.n	800669c <_vfiprintf_r+0x1c>
 8006690:	6983      	ldr	r3, [r0, #24]
 8006692:	9305      	str	r3, [sp, #20]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <_vfiprintf_r+0x1c>
 8006698:	f7ff fc0c 	bl	8005eb4 <__sinit>
 800669c:	4b7b      	ldr	r3, [pc, #492]	; (800688c <_vfiprintf_r+0x20c>)
 800669e:	429f      	cmp	r7, r3
 80066a0:	d15c      	bne.n	800675c <_vfiprintf_r+0xdc>
 80066a2:	9b03      	ldr	r3, [sp, #12]
 80066a4:	685f      	ldr	r7, [r3, #4]
 80066a6:	89bb      	ldrh	r3, [r7, #12]
 80066a8:	071b      	lsls	r3, r3, #28
 80066aa:	d563      	bpl.n	8006774 <_vfiprintf_r+0xf4>
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d060      	beq.n	8006774 <_vfiprintf_r+0xf4>
 80066b2:	2300      	movs	r3, #0
 80066b4:	ac08      	add	r4, sp, #32
 80066b6:	6163      	str	r3, [r4, #20]
 80066b8:	3320      	adds	r3, #32
 80066ba:	7663      	strb	r3, [r4, #25]
 80066bc:	3310      	adds	r3, #16
 80066be:	76a3      	strb	r3, [r4, #26]
 80066c0:	9507      	str	r5, [sp, #28]
 80066c2:	0035      	movs	r5, r6
 80066c4:	782b      	ldrb	r3, [r5, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <_vfiprintf_r+0x4e>
 80066ca:	2b25      	cmp	r3, #37	; 0x25
 80066cc:	d15c      	bne.n	8006788 <_vfiprintf_r+0x108>
 80066ce:	1bab      	subs	r3, r5, r6
 80066d0:	9305      	str	r3, [sp, #20]
 80066d2:	d00c      	beq.n	80066ee <_vfiprintf_r+0x6e>
 80066d4:	0032      	movs	r2, r6
 80066d6:	0039      	movs	r1, r7
 80066d8:	9803      	ldr	r0, [sp, #12]
 80066da:	f7ff ffbe 	bl	800665a <__sfputs_r>
 80066de:	1c43      	adds	r3, r0, #1
 80066e0:	d100      	bne.n	80066e4 <_vfiprintf_r+0x64>
 80066e2:	e0c4      	b.n	800686e <_vfiprintf_r+0x1ee>
 80066e4:	6962      	ldr	r2, [r4, #20]
 80066e6:	9b05      	ldr	r3, [sp, #20]
 80066e8:	4694      	mov	ip, r2
 80066ea:	4463      	add	r3, ip
 80066ec:	6163      	str	r3, [r4, #20]
 80066ee:	782b      	ldrb	r3, [r5, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d100      	bne.n	80066f6 <_vfiprintf_r+0x76>
 80066f4:	e0bb      	b.n	800686e <_vfiprintf_r+0x1ee>
 80066f6:	2201      	movs	r2, #1
 80066f8:	2300      	movs	r3, #0
 80066fa:	4252      	negs	r2, r2
 80066fc:	6062      	str	r2, [r4, #4]
 80066fe:	a904      	add	r1, sp, #16
 8006700:	3254      	adds	r2, #84	; 0x54
 8006702:	1852      	adds	r2, r2, r1
 8006704:	1c6e      	adds	r6, r5, #1
 8006706:	6023      	str	r3, [r4, #0]
 8006708:	60e3      	str	r3, [r4, #12]
 800670a:	60a3      	str	r3, [r4, #8]
 800670c:	7013      	strb	r3, [r2, #0]
 800670e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006710:	7831      	ldrb	r1, [r6, #0]
 8006712:	2205      	movs	r2, #5
 8006714:	485e      	ldr	r0, [pc, #376]	; (8006890 <_vfiprintf_r+0x210>)
 8006716:	f000 fa77 	bl	8006c08 <memchr>
 800671a:	1c75      	adds	r5, r6, #1
 800671c:	2800      	cmp	r0, #0
 800671e:	d135      	bne.n	800678c <_vfiprintf_r+0x10c>
 8006720:	6822      	ldr	r2, [r4, #0]
 8006722:	06d3      	lsls	r3, r2, #27
 8006724:	d504      	bpl.n	8006730 <_vfiprintf_r+0xb0>
 8006726:	2353      	movs	r3, #83	; 0x53
 8006728:	a904      	add	r1, sp, #16
 800672a:	185b      	adds	r3, r3, r1
 800672c:	2120      	movs	r1, #32
 800672e:	7019      	strb	r1, [r3, #0]
 8006730:	0713      	lsls	r3, r2, #28
 8006732:	d504      	bpl.n	800673e <_vfiprintf_r+0xbe>
 8006734:	2353      	movs	r3, #83	; 0x53
 8006736:	a904      	add	r1, sp, #16
 8006738:	185b      	adds	r3, r3, r1
 800673a:	212b      	movs	r1, #43	; 0x2b
 800673c:	7019      	strb	r1, [r3, #0]
 800673e:	7833      	ldrb	r3, [r6, #0]
 8006740:	2b2a      	cmp	r3, #42	; 0x2a
 8006742:	d02c      	beq.n	800679e <_vfiprintf_r+0x11e>
 8006744:	0035      	movs	r5, r6
 8006746:	2100      	movs	r1, #0
 8006748:	200a      	movs	r0, #10
 800674a:	68e3      	ldr	r3, [r4, #12]
 800674c:	782a      	ldrb	r2, [r5, #0]
 800674e:	1c6e      	adds	r6, r5, #1
 8006750:	3a30      	subs	r2, #48	; 0x30
 8006752:	2a09      	cmp	r2, #9
 8006754:	d964      	bls.n	8006820 <_vfiprintf_r+0x1a0>
 8006756:	2900      	cmp	r1, #0
 8006758:	d02e      	beq.n	80067b8 <_vfiprintf_r+0x138>
 800675a:	e026      	b.n	80067aa <_vfiprintf_r+0x12a>
 800675c:	4b4d      	ldr	r3, [pc, #308]	; (8006894 <_vfiprintf_r+0x214>)
 800675e:	429f      	cmp	r7, r3
 8006760:	d102      	bne.n	8006768 <_vfiprintf_r+0xe8>
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	689f      	ldr	r7, [r3, #8]
 8006766:	e79e      	b.n	80066a6 <_vfiprintf_r+0x26>
 8006768:	4b4b      	ldr	r3, [pc, #300]	; (8006898 <_vfiprintf_r+0x218>)
 800676a:	429f      	cmp	r7, r3
 800676c:	d19b      	bne.n	80066a6 <_vfiprintf_r+0x26>
 800676e:	9b03      	ldr	r3, [sp, #12]
 8006770:	68df      	ldr	r7, [r3, #12]
 8006772:	e798      	b.n	80066a6 <_vfiprintf_r+0x26>
 8006774:	0039      	movs	r1, r7
 8006776:	9803      	ldr	r0, [sp, #12]
 8006778:	f7ff fe50 	bl	800641c <__swsetup_r>
 800677c:	2800      	cmp	r0, #0
 800677e:	d098      	beq.n	80066b2 <_vfiprintf_r+0x32>
 8006780:	2001      	movs	r0, #1
 8006782:	4240      	negs	r0, r0
 8006784:	b021      	add	sp, #132	; 0x84
 8006786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006788:	3501      	adds	r5, #1
 800678a:	e79b      	b.n	80066c4 <_vfiprintf_r+0x44>
 800678c:	4b40      	ldr	r3, [pc, #256]	; (8006890 <_vfiprintf_r+0x210>)
 800678e:	6822      	ldr	r2, [r4, #0]
 8006790:	1ac0      	subs	r0, r0, r3
 8006792:	2301      	movs	r3, #1
 8006794:	4083      	lsls	r3, r0
 8006796:	4313      	orrs	r3, r2
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	002e      	movs	r6, r5
 800679c:	e7b8      	b.n	8006710 <_vfiprintf_r+0x90>
 800679e:	9b07      	ldr	r3, [sp, #28]
 80067a0:	1d19      	adds	r1, r3, #4
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	9107      	str	r1, [sp, #28]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	db01      	blt.n	80067ae <_vfiprintf_r+0x12e>
 80067aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80067ac:	e004      	b.n	80067b8 <_vfiprintf_r+0x138>
 80067ae:	425b      	negs	r3, r3
 80067b0:	60e3      	str	r3, [r4, #12]
 80067b2:	2302      	movs	r3, #2
 80067b4:	4313      	orrs	r3, r2
 80067b6:	6023      	str	r3, [r4, #0]
 80067b8:	782b      	ldrb	r3, [r5, #0]
 80067ba:	2b2e      	cmp	r3, #46	; 0x2e
 80067bc:	d10a      	bne.n	80067d4 <_vfiprintf_r+0x154>
 80067be:	786b      	ldrb	r3, [r5, #1]
 80067c0:	2b2a      	cmp	r3, #42	; 0x2a
 80067c2:	d135      	bne.n	8006830 <_vfiprintf_r+0x1b0>
 80067c4:	9b07      	ldr	r3, [sp, #28]
 80067c6:	3502      	adds	r5, #2
 80067c8:	1d1a      	adds	r2, r3, #4
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	9207      	str	r2, [sp, #28]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	db2b      	blt.n	800682a <_vfiprintf_r+0x1aa>
 80067d2:	9309      	str	r3, [sp, #36]	; 0x24
 80067d4:	4e31      	ldr	r6, [pc, #196]	; (800689c <_vfiprintf_r+0x21c>)
 80067d6:	7829      	ldrb	r1, [r5, #0]
 80067d8:	2203      	movs	r2, #3
 80067da:	0030      	movs	r0, r6
 80067dc:	f000 fa14 	bl	8006c08 <memchr>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	d006      	beq.n	80067f2 <_vfiprintf_r+0x172>
 80067e4:	2340      	movs	r3, #64	; 0x40
 80067e6:	1b80      	subs	r0, r0, r6
 80067e8:	4083      	lsls	r3, r0
 80067ea:	6822      	ldr	r2, [r4, #0]
 80067ec:	3501      	adds	r5, #1
 80067ee:	4313      	orrs	r3, r2
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	7829      	ldrb	r1, [r5, #0]
 80067f4:	2206      	movs	r2, #6
 80067f6:	482a      	ldr	r0, [pc, #168]	; (80068a0 <_vfiprintf_r+0x220>)
 80067f8:	1c6e      	adds	r6, r5, #1
 80067fa:	7621      	strb	r1, [r4, #24]
 80067fc:	f000 fa04 	bl	8006c08 <memchr>
 8006800:	2800      	cmp	r0, #0
 8006802:	d03a      	beq.n	800687a <_vfiprintf_r+0x1fa>
 8006804:	4b27      	ldr	r3, [pc, #156]	; (80068a4 <_vfiprintf_r+0x224>)
 8006806:	2b00      	cmp	r3, #0
 8006808:	d125      	bne.n	8006856 <_vfiprintf_r+0x1d6>
 800680a:	2207      	movs	r2, #7
 800680c:	9b07      	ldr	r3, [sp, #28]
 800680e:	3307      	adds	r3, #7
 8006810:	4393      	bics	r3, r2
 8006812:	3308      	adds	r3, #8
 8006814:	9307      	str	r3, [sp, #28]
 8006816:	6963      	ldr	r3, [r4, #20]
 8006818:	9a04      	ldr	r2, [sp, #16]
 800681a:	189b      	adds	r3, r3, r2
 800681c:	6163      	str	r3, [r4, #20]
 800681e:	e750      	b.n	80066c2 <_vfiprintf_r+0x42>
 8006820:	4343      	muls	r3, r0
 8006822:	2101      	movs	r1, #1
 8006824:	189b      	adds	r3, r3, r2
 8006826:	0035      	movs	r5, r6
 8006828:	e790      	b.n	800674c <_vfiprintf_r+0xcc>
 800682a:	2301      	movs	r3, #1
 800682c:	425b      	negs	r3, r3
 800682e:	e7d0      	b.n	80067d2 <_vfiprintf_r+0x152>
 8006830:	2300      	movs	r3, #0
 8006832:	200a      	movs	r0, #10
 8006834:	001a      	movs	r2, r3
 8006836:	3501      	adds	r5, #1
 8006838:	6063      	str	r3, [r4, #4]
 800683a:	7829      	ldrb	r1, [r5, #0]
 800683c:	1c6e      	adds	r6, r5, #1
 800683e:	3930      	subs	r1, #48	; 0x30
 8006840:	2909      	cmp	r1, #9
 8006842:	d903      	bls.n	800684c <_vfiprintf_r+0x1cc>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0c5      	beq.n	80067d4 <_vfiprintf_r+0x154>
 8006848:	9209      	str	r2, [sp, #36]	; 0x24
 800684a:	e7c3      	b.n	80067d4 <_vfiprintf_r+0x154>
 800684c:	4342      	muls	r2, r0
 800684e:	2301      	movs	r3, #1
 8006850:	1852      	adds	r2, r2, r1
 8006852:	0035      	movs	r5, r6
 8006854:	e7f1      	b.n	800683a <_vfiprintf_r+0x1ba>
 8006856:	ab07      	add	r3, sp, #28
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	003a      	movs	r2, r7
 800685c:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <_vfiprintf_r+0x228>)
 800685e:	0021      	movs	r1, r4
 8006860:	9803      	ldr	r0, [sp, #12]
 8006862:	e000      	b.n	8006866 <_vfiprintf_r+0x1e6>
 8006864:	bf00      	nop
 8006866:	9004      	str	r0, [sp, #16]
 8006868:	9b04      	ldr	r3, [sp, #16]
 800686a:	3301      	adds	r3, #1
 800686c:	d1d3      	bne.n	8006816 <_vfiprintf_r+0x196>
 800686e:	89bb      	ldrh	r3, [r7, #12]
 8006870:	065b      	lsls	r3, r3, #25
 8006872:	d500      	bpl.n	8006876 <_vfiprintf_r+0x1f6>
 8006874:	e784      	b.n	8006780 <_vfiprintf_r+0x100>
 8006876:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006878:	e784      	b.n	8006784 <_vfiprintf_r+0x104>
 800687a:	ab07      	add	r3, sp, #28
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	003a      	movs	r2, r7
 8006880:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <_vfiprintf_r+0x228>)
 8006882:	0021      	movs	r1, r4
 8006884:	9803      	ldr	r0, [sp, #12]
 8006886:	f000 f87f 	bl	8006988 <_printf_i>
 800688a:	e7ec      	b.n	8006866 <_vfiprintf_r+0x1e6>
 800688c:	08006ef0 	.word	0x08006ef0
 8006890:	08006f34 	.word	0x08006f34
 8006894:	08006f10 	.word	0x08006f10
 8006898:	08006ed0 	.word	0x08006ed0
 800689c:	08006f3a 	.word	0x08006f3a
 80068a0:	08006f3e 	.word	0x08006f3e
 80068a4:	00000000 	.word	0x00000000
 80068a8:	0800665b 	.word	0x0800665b

080068ac <_printf_common>:
 80068ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068ae:	0015      	movs	r5, r2
 80068b0:	9301      	str	r3, [sp, #4]
 80068b2:	688a      	ldr	r2, [r1, #8]
 80068b4:	690b      	ldr	r3, [r1, #16]
 80068b6:	9000      	str	r0, [sp, #0]
 80068b8:	000c      	movs	r4, r1
 80068ba:	4293      	cmp	r3, r2
 80068bc:	da00      	bge.n	80068c0 <_printf_common+0x14>
 80068be:	0013      	movs	r3, r2
 80068c0:	0022      	movs	r2, r4
 80068c2:	602b      	str	r3, [r5, #0]
 80068c4:	3243      	adds	r2, #67	; 0x43
 80068c6:	7812      	ldrb	r2, [r2, #0]
 80068c8:	2a00      	cmp	r2, #0
 80068ca:	d001      	beq.n	80068d0 <_printf_common+0x24>
 80068cc:	3301      	adds	r3, #1
 80068ce:	602b      	str	r3, [r5, #0]
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	069b      	lsls	r3, r3, #26
 80068d4:	d502      	bpl.n	80068dc <_printf_common+0x30>
 80068d6:	682b      	ldr	r3, [r5, #0]
 80068d8:	3302      	adds	r3, #2
 80068da:	602b      	str	r3, [r5, #0]
 80068dc:	2706      	movs	r7, #6
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	401f      	ands	r7, r3
 80068e2:	d027      	beq.n	8006934 <_printf_common+0x88>
 80068e4:	0023      	movs	r3, r4
 80068e6:	3343      	adds	r3, #67	; 0x43
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	1e5a      	subs	r2, r3, #1
 80068ec:	4193      	sbcs	r3, r2
 80068ee:	6822      	ldr	r2, [r4, #0]
 80068f0:	0692      	lsls	r2, r2, #26
 80068f2:	d430      	bmi.n	8006956 <_printf_common+0xaa>
 80068f4:	0022      	movs	r2, r4
 80068f6:	9901      	ldr	r1, [sp, #4]
 80068f8:	3243      	adds	r2, #67	; 0x43
 80068fa:	9800      	ldr	r0, [sp, #0]
 80068fc:	9e08      	ldr	r6, [sp, #32]
 80068fe:	47b0      	blx	r6
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	d025      	beq.n	8006950 <_printf_common+0xa4>
 8006904:	2306      	movs	r3, #6
 8006906:	6820      	ldr	r0, [r4, #0]
 8006908:	682a      	ldr	r2, [r5, #0]
 800690a:	68e1      	ldr	r1, [r4, #12]
 800690c:	4003      	ands	r3, r0
 800690e:	2500      	movs	r5, #0
 8006910:	2b04      	cmp	r3, #4
 8006912:	d103      	bne.n	800691c <_printf_common+0x70>
 8006914:	1a8d      	subs	r5, r1, r2
 8006916:	43eb      	mvns	r3, r5
 8006918:	17db      	asrs	r3, r3, #31
 800691a:	401d      	ands	r5, r3
 800691c:	68a3      	ldr	r3, [r4, #8]
 800691e:	6922      	ldr	r2, [r4, #16]
 8006920:	4293      	cmp	r3, r2
 8006922:	dd01      	ble.n	8006928 <_printf_common+0x7c>
 8006924:	1a9b      	subs	r3, r3, r2
 8006926:	18ed      	adds	r5, r5, r3
 8006928:	2700      	movs	r7, #0
 800692a:	42bd      	cmp	r5, r7
 800692c:	d120      	bne.n	8006970 <_printf_common+0xc4>
 800692e:	2000      	movs	r0, #0
 8006930:	e010      	b.n	8006954 <_printf_common+0xa8>
 8006932:	3701      	adds	r7, #1
 8006934:	68e3      	ldr	r3, [r4, #12]
 8006936:	682a      	ldr	r2, [r5, #0]
 8006938:	1a9b      	subs	r3, r3, r2
 800693a:	42bb      	cmp	r3, r7
 800693c:	ddd2      	ble.n	80068e4 <_printf_common+0x38>
 800693e:	0022      	movs	r2, r4
 8006940:	2301      	movs	r3, #1
 8006942:	3219      	adds	r2, #25
 8006944:	9901      	ldr	r1, [sp, #4]
 8006946:	9800      	ldr	r0, [sp, #0]
 8006948:	9e08      	ldr	r6, [sp, #32]
 800694a:	47b0      	blx	r6
 800694c:	1c43      	adds	r3, r0, #1
 800694e:	d1f0      	bne.n	8006932 <_printf_common+0x86>
 8006950:	2001      	movs	r0, #1
 8006952:	4240      	negs	r0, r0
 8006954:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006956:	2030      	movs	r0, #48	; 0x30
 8006958:	18e1      	adds	r1, r4, r3
 800695a:	3143      	adds	r1, #67	; 0x43
 800695c:	7008      	strb	r0, [r1, #0]
 800695e:	0021      	movs	r1, r4
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	3145      	adds	r1, #69	; 0x45
 8006964:	7809      	ldrb	r1, [r1, #0]
 8006966:	18a2      	adds	r2, r4, r2
 8006968:	3243      	adds	r2, #67	; 0x43
 800696a:	3302      	adds	r3, #2
 800696c:	7011      	strb	r1, [r2, #0]
 800696e:	e7c1      	b.n	80068f4 <_printf_common+0x48>
 8006970:	0022      	movs	r2, r4
 8006972:	2301      	movs	r3, #1
 8006974:	321a      	adds	r2, #26
 8006976:	9901      	ldr	r1, [sp, #4]
 8006978:	9800      	ldr	r0, [sp, #0]
 800697a:	9e08      	ldr	r6, [sp, #32]
 800697c:	47b0      	blx	r6
 800697e:	1c43      	adds	r3, r0, #1
 8006980:	d0e6      	beq.n	8006950 <_printf_common+0xa4>
 8006982:	3701      	adds	r7, #1
 8006984:	e7d1      	b.n	800692a <_printf_common+0x7e>
	...

08006988 <_printf_i>:
 8006988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800698a:	b089      	sub	sp, #36	; 0x24
 800698c:	9204      	str	r2, [sp, #16]
 800698e:	000a      	movs	r2, r1
 8006990:	3243      	adds	r2, #67	; 0x43
 8006992:	9305      	str	r3, [sp, #20]
 8006994:	9003      	str	r0, [sp, #12]
 8006996:	9202      	str	r2, [sp, #8]
 8006998:	7e0a      	ldrb	r2, [r1, #24]
 800699a:	000c      	movs	r4, r1
 800699c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800699e:	2a6e      	cmp	r2, #110	; 0x6e
 80069a0:	d100      	bne.n	80069a4 <_printf_i+0x1c>
 80069a2:	e086      	b.n	8006ab2 <_printf_i+0x12a>
 80069a4:	d81f      	bhi.n	80069e6 <_printf_i+0x5e>
 80069a6:	2a63      	cmp	r2, #99	; 0x63
 80069a8:	d033      	beq.n	8006a12 <_printf_i+0x8a>
 80069aa:	d808      	bhi.n	80069be <_printf_i+0x36>
 80069ac:	2a00      	cmp	r2, #0
 80069ae:	d100      	bne.n	80069b2 <_printf_i+0x2a>
 80069b0:	e08c      	b.n	8006acc <_printf_i+0x144>
 80069b2:	2a58      	cmp	r2, #88	; 0x58
 80069b4:	d04d      	beq.n	8006a52 <_printf_i+0xca>
 80069b6:	0025      	movs	r5, r4
 80069b8:	3542      	adds	r5, #66	; 0x42
 80069ba:	702a      	strb	r2, [r5, #0]
 80069bc:	e030      	b.n	8006a20 <_printf_i+0x98>
 80069be:	2a64      	cmp	r2, #100	; 0x64
 80069c0:	d001      	beq.n	80069c6 <_printf_i+0x3e>
 80069c2:	2a69      	cmp	r2, #105	; 0x69
 80069c4:	d1f7      	bne.n	80069b6 <_printf_i+0x2e>
 80069c6:	6819      	ldr	r1, [r3, #0]
 80069c8:	6825      	ldr	r5, [r4, #0]
 80069ca:	1d0a      	adds	r2, r1, #4
 80069cc:	0628      	lsls	r0, r5, #24
 80069ce:	d529      	bpl.n	8006a24 <_printf_i+0x9c>
 80069d0:	6808      	ldr	r0, [r1, #0]
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	2800      	cmp	r0, #0
 80069d6:	da03      	bge.n	80069e0 <_printf_i+0x58>
 80069d8:	232d      	movs	r3, #45	; 0x2d
 80069da:	9a02      	ldr	r2, [sp, #8]
 80069dc:	4240      	negs	r0, r0
 80069de:	7013      	strb	r3, [r2, #0]
 80069e0:	4e6b      	ldr	r6, [pc, #428]	; (8006b90 <_printf_i+0x208>)
 80069e2:	270a      	movs	r7, #10
 80069e4:	e04f      	b.n	8006a86 <_printf_i+0xfe>
 80069e6:	2a73      	cmp	r2, #115	; 0x73
 80069e8:	d074      	beq.n	8006ad4 <_printf_i+0x14c>
 80069ea:	d808      	bhi.n	80069fe <_printf_i+0x76>
 80069ec:	2a6f      	cmp	r2, #111	; 0x6f
 80069ee:	d01f      	beq.n	8006a30 <_printf_i+0xa8>
 80069f0:	2a70      	cmp	r2, #112	; 0x70
 80069f2:	d1e0      	bne.n	80069b6 <_printf_i+0x2e>
 80069f4:	2220      	movs	r2, #32
 80069f6:	6809      	ldr	r1, [r1, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	6022      	str	r2, [r4, #0]
 80069fc:	e003      	b.n	8006a06 <_printf_i+0x7e>
 80069fe:	2a75      	cmp	r2, #117	; 0x75
 8006a00:	d016      	beq.n	8006a30 <_printf_i+0xa8>
 8006a02:	2a78      	cmp	r2, #120	; 0x78
 8006a04:	d1d7      	bne.n	80069b6 <_printf_i+0x2e>
 8006a06:	0022      	movs	r2, r4
 8006a08:	2178      	movs	r1, #120	; 0x78
 8006a0a:	3245      	adds	r2, #69	; 0x45
 8006a0c:	7011      	strb	r1, [r2, #0]
 8006a0e:	4e61      	ldr	r6, [pc, #388]	; (8006b94 <_printf_i+0x20c>)
 8006a10:	e022      	b.n	8006a58 <_printf_i+0xd0>
 8006a12:	0025      	movs	r5, r4
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	3542      	adds	r5, #66	; 0x42
 8006a18:	1d11      	adds	r1, r2, #4
 8006a1a:	6019      	str	r1, [r3, #0]
 8006a1c:	6813      	ldr	r3, [r2, #0]
 8006a1e:	702b      	strb	r3, [r5, #0]
 8006a20:	2301      	movs	r3, #1
 8006a22:	e065      	b.n	8006af0 <_printf_i+0x168>
 8006a24:	6808      	ldr	r0, [r1, #0]
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	0669      	lsls	r1, r5, #25
 8006a2a:	d5d3      	bpl.n	80069d4 <_printf_i+0x4c>
 8006a2c:	b200      	sxth	r0, r0
 8006a2e:	e7d1      	b.n	80069d4 <_printf_i+0x4c>
 8006a30:	6819      	ldr	r1, [r3, #0]
 8006a32:	6825      	ldr	r5, [r4, #0]
 8006a34:	1d08      	adds	r0, r1, #4
 8006a36:	6018      	str	r0, [r3, #0]
 8006a38:	6808      	ldr	r0, [r1, #0]
 8006a3a:	062e      	lsls	r6, r5, #24
 8006a3c:	d505      	bpl.n	8006a4a <_printf_i+0xc2>
 8006a3e:	4e54      	ldr	r6, [pc, #336]	; (8006b90 <_printf_i+0x208>)
 8006a40:	2708      	movs	r7, #8
 8006a42:	2a6f      	cmp	r2, #111	; 0x6f
 8006a44:	d01b      	beq.n	8006a7e <_printf_i+0xf6>
 8006a46:	270a      	movs	r7, #10
 8006a48:	e019      	b.n	8006a7e <_printf_i+0xf6>
 8006a4a:	066d      	lsls	r5, r5, #25
 8006a4c:	d5f7      	bpl.n	8006a3e <_printf_i+0xb6>
 8006a4e:	b280      	uxth	r0, r0
 8006a50:	e7f5      	b.n	8006a3e <_printf_i+0xb6>
 8006a52:	3145      	adds	r1, #69	; 0x45
 8006a54:	4e4e      	ldr	r6, [pc, #312]	; (8006b90 <_printf_i+0x208>)
 8006a56:	700a      	strb	r2, [r1, #0]
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	6822      	ldr	r2, [r4, #0]
 8006a5c:	1d01      	adds	r1, r0, #4
 8006a5e:	6800      	ldr	r0, [r0, #0]
 8006a60:	6019      	str	r1, [r3, #0]
 8006a62:	0615      	lsls	r5, r2, #24
 8006a64:	d521      	bpl.n	8006aaa <_printf_i+0x122>
 8006a66:	07d3      	lsls	r3, r2, #31
 8006a68:	d502      	bpl.n	8006a70 <_printf_i+0xe8>
 8006a6a:	2320      	movs	r3, #32
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	6022      	str	r2, [r4, #0]
 8006a70:	2710      	movs	r7, #16
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d103      	bne.n	8006a7e <_printf_i+0xf6>
 8006a76:	2320      	movs	r3, #32
 8006a78:	6822      	ldr	r2, [r4, #0]
 8006a7a:	439a      	bics	r2, r3
 8006a7c:	6022      	str	r2, [r4, #0]
 8006a7e:	0023      	movs	r3, r4
 8006a80:	2200      	movs	r2, #0
 8006a82:	3343      	adds	r3, #67	; 0x43
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	6863      	ldr	r3, [r4, #4]
 8006a88:	60a3      	str	r3, [r4, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	db58      	blt.n	8006b40 <_printf_i+0x1b8>
 8006a8e:	2204      	movs	r2, #4
 8006a90:	6821      	ldr	r1, [r4, #0]
 8006a92:	4391      	bics	r1, r2
 8006a94:	6021      	str	r1, [r4, #0]
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d154      	bne.n	8006b44 <_printf_i+0x1bc>
 8006a9a:	9d02      	ldr	r5, [sp, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d05a      	beq.n	8006b56 <_printf_i+0x1ce>
 8006aa0:	0025      	movs	r5, r4
 8006aa2:	7833      	ldrb	r3, [r6, #0]
 8006aa4:	3542      	adds	r5, #66	; 0x42
 8006aa6:	702b      	strb	r3, [r5, #0]
 8006aa8:	e055      	b.n	8006b56 <_printf_i+0x1ce>
 8006aaa:	0655      	lsls	r5, r2, #25
 8006aac:	d5db      	bpl.n	8006a66 <_printf_i+0xde>
 8006aae:	b280      	uxth	r0, r0
 8006ab0:	e7d9      	b.n	8006a66 <_printf_i+0xde>
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	680d      	ldr	r5, [r1, #0]
 8006ab6:	1d10      	adds	r0, r2, #4
 8006ab8:	6949      	ldr	r1, [r1, #20]
 8006aba:	6018      	str	r0, [r3, #0]
 8006abc:	6813      	ldr	r3, [r2, #0]
 8006abe:	062e      	lsls	r6, r5, #24
 8006ac0:	d501      	bpl.n	8006ac6 <_printf_i+0x13e>
 8006ac2:	6019      	str	r1, [r3, #0]
 8006ac4:	e002      	b.n	8006acc <_printf_i+0x144>
 8006ac6:	066d      	lsls	r5, r5, #25
 8006ac8:	d5fb      	bpl.n	8006ac2 <_printf_i+0x13a>
 8006aca:	8019      	strh	r1, [r3, #0]
 8006acc:	2300      	movs	r3, #0
 8006ace:	9d02      	ldr	r5, [sp, #8]
 8006ad0:	6123      	str	r3, [r4, #16]
 8006ad2:	e04f      	b.n	8006b74 <_printf_i+0x1ec>
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	1d11      	adds	r1, r2, #4
 8006ad8:	6019      	str	r1, [r3, #0]
 8006ada:	6815      	ldr	r5, [r2, #0]
 8006adc:	2100      	movs	r1, #0
 8006ade:	6862      	ldr	r2, [r4, #4]
 8006ae0:	0028      	movs	r0, r5
 8006ae2:	f000 f891 	bl	8006c08 <memchr>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d001      	beq.n	8006aee <_printf_i+0x166>
 8006aea:	1b40      	subs	r0, r0, r5
 8006aec:	6060      	str	r0, [r4, #4]
 8006aee:	6863      	ldr	r3, [r4, #4]
 8006af0:	6123      	str	r3, [r4, #16]
 8006af2:	2300      	movs	r3, #0
 8006af4:	9a02      	ldr	r2, [sp, #8]
 8006af6:	7013      	strb	r3, [r2, #0]
 8006af8:	e03c      	b.n	8006b74 <_printf_i+0x1ec>
 8006afa:	6923      	ldr	r3, [r4, #16]
 8006afc:	002a      	movs	r2, r5
 8006afe:	9904      	ldr	r1, [sp, #16]
 8006b00:	9803      	ldr	r0, [sp, #12]
 8006b02:	9d05      	ldr	r5, [sp, #20]
 8006b04:	47a8      	blx	r5
 8006b06:	1c43      	adds	r3, r0, #1
 8006b08:	d03e      	beq.n	8006b88 <_printf_i+0x200>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	079b      	lsls	r3, r3, #30
 8006b0e:	d415      	bmi.n	8006b3c <_printf_i+0x1b4>
 8006b10:	9b07      	ldr	r3, [sp, #28]
 8006b12:	68e0      	ldr	r0, [r4, #12]
 8006b14:	4298      	cmp	r0, r3
 8006b16:	da39      	bge.n	8006b8c <_printf_i+0x204>
 8006b18:	0018      	movs	r0, r3
 8006b1a:	e037      	b.n	8006b8c <_printf_i+0x204>
 8006b1c:	0022      	movs	r2, r4
 8006b1e:	2301      	movs	r3, #1
 8006b20:	3219      	adds	r2, #25
 8006b22:	9904      	ldr	r1, [sp, #16]
 8006b24:	9803      	ldr	r0, [sp, #12]
 8006b26:	9e05      	ldr	r6, [sp, #20]
 8006b28:	47b0      	blx	r6
 8006b2a:	1c43      	adds	r3, r0, #1
 8006b2c:	d02c      	beq.n	8006b88 <_printf_i+0x200>
 8006b2e:	3501      	adds	r5, #1
 8006b30:	68e3      	ldr	r3, [r4, #12]
 8006b32:	9a07      	ldr	r2, [sp, #28]
 8006b34:	1a9b      	subs	r3, r3, r2
 8006b36:	42ab      	cmp	r3, r5
 8006b38:	dcf0      	bgt.n	8006b1c <_printf_i+0x194>
 8006b3a:	e7e9      	b.n	8006b10 <_printf_i+0x188>
 8006b3c:	2500      	movs	r5, #0
 8006b3e:	e7f7      	b.n	8006b30 <_printf_i+0x1a8>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d0ad      	beq.n	8006aa0 <_printf_i+0x118>
 8006b44:	9d02      	ldr	r5, [sp, #8]
 8006b46:	0039      	movs	r1, r7
 8006b48:	f7f9 fb64 	bl	8000214 <__aeabi_uidivmod>
 8006b4c:	5c73      	ldrb	r3, [r6, r1]
 8006b4e:	3d01      	subs	r5, #1
 8006b50:	702b      	strb	r3, [r5, #0]
 8006b52:	2800      	cmp	r0, #0
 8006b54:	d1f7      	bne.n	8006b46 <_printf_i+0x1be>
 8006b56:	2f08      	cmp	r7, #8
 8006b58:	d109      	bne.n	8006b6e <_printf_i+0x1e6>
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	07db      	lsls	r3, r3, #31
 8006b5e:	d506      	bpl.n	8006b6e <_printf_i+0x1e6>
 8006b60:	6863      	ldr	r3, [r4, #4]
 8006b62:	6922      	ldr	r2, [r4, #16]
 8006b64:	4293      	cmp	r3, r2
 8006b66:	dc02      	bgt.n	8006b6e <_printf_i+0x1e6>
 8006b68:	2330      	movs	r3, #48	; 0x30
 8006b6a:	3d01      	subs	r5, #1
 8006b6c:	702b      	strb	r3, [r5, #0]
 8006b6e:	9b02      	ldr	r3, [sp, #8]
 8006b70:	1b5b      	subs	r3, r3, r5
 8006b72:	6123      	str	r3, [r4, #16]
 8006b74:	9b05      	ldr	r3, [sp, #20]
 8006b76:	aa07      	add	r2, sp, #28
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	0021      	movs	r1, r4
 8006b7c:	9b04      	ldr	r3, [sp, #16]
 8006b7e:	9803      	ldr	r0, [sp, #12]
 8006b80:	f7ff fe94 	bl	80068ac <_printf_common>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d1b8      	bne.n	8006afa <_printf_i+0x172>
 8006b88:	2001      	movs	r0, #1
 8006b8a:	4240      	negs	r0, r0
 8006b8c:	b009      	add	sp, #36	; 0x24
 8006b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b90:	08006f45 	.word	0x08006f45
 8006b94:	08006f56 	.word	0x08006f56

08006b98 <_read_r>:
 8006b98:	b570      	push	{r4, r5, r6, lr}
 8006b9a:	0005      	movs	r5, r0
 8006b9c:	0008      	movs	r0, r1
 8006b9e:	0011      	movs	r1, r2
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	4c06      	ldr	r4, [pc, #24]	; (8006bbc <_read_r+0x24>)
 8006ba4:	6022      	str	r2, [r4, #0]
 8006ba6:	001a      	movs	r2, r3
 8006ba8:	f7fe ff78 	bl	8005a9c <_read>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	d103      	bne.n	8006bb8 <_read_r+0x20>
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d000      	beq.n	8006bb8 <_read_r+0x20>
 8006bb6:	602b      	str	r3, [r5, #0]
 8006bb8:	bd70      	pop	{r4, r5, r6, pc}
 8006bba:	46c0      	nop			; (mov r8, r8)
 8006bbc:	200002e8 	.word	0x200002e8

08006bc0 <_fstat_r>:
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	b570      	push	{r4, r5, r6, lr}
 8006bc4:	4c06      	ldr	r4, [pc, #24]	; (8006be0 <_fstat_r+0x20>)
 8006bc6:	0005      	movs	r5, r0
 8006bc8:	0008      	movs	r0, r1
 8006bca:	0011      	movs	r1, r2
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	f7fe ffa8 	bl	8005b22 <_fstat>
 8006bd2:	1c43      	adds	r3, r0, #1
 8006bd4:	d103      	bne.n	8006bde <_fstat_r+0x1e>
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d000      	beq.n	8006bde <_fstat_r+0x1e>
 8006bdc:	602b      	str	r3, [r5, #0]
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	200002e8 	.word	0x200002e8

08006be4 <_isatty_r>:
 8006be4:	2300      	movs	r3, #0
 8006be6:	b570      	push	{r4, r5, r6, lr}
 8006be8:	4c06      	ldr	r4, [pc, #24]	; (8006c04 <_isatty_r+0x20>)
 8006bea:	0005      	movs	r5, r0
 8006bec:	0008      	movs	r0, r1
 8006bee:	6023      	str	r3, [r4, #0]
 8006bf0:	f7fe ffa5 	bl	8005b3e <_isatty>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d103      	bne.n	8006c00 <_isatty_r+0x1c>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d000      	beq.n	8006c00 <_isatty_r+0x1c>
 8006bfe:	602b      	str	r3, [r5, #0]
 8006c00:	bd70      	pop	{r4, r5, r6, pc}
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	200002e8 	.word	0x200002e8

08006c08 <memchr>:
 8006c08:	b2c9      	uxtb	r1, r1
 8006c0a:	1882      	adds	r2, r0, r2
 8006c0c:	4290      	cmp	r0, r2
 8006c0e:	d101      	bne.n	8006c14 <memchr+0xc>
 8006c10:	2000      	movs	r0, #0
 8006c12:	4770      	bx	lr
 8006c14:	7803      	ldrb	r3, [r0, #0]
 8006c16:	428b      	cmp	r3, r1
 8006c18:	d0fb      	beq.n	8006c12 <memchr+0xa>
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	e7f6      	b.n	8006c0c <memchr+0x4>

08006c1e <fmax>:
 8006c1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c20:	0004      	movs	r4, r0
 8006c22:	000d      	movs	r5, r1
 8006c24:	0016      	movs	r6, r2
 8006c26:	001f      	movs	r7, r3
 8006c28:	f000 f816 	bl	8006c58 <__fpclassifyd>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d00d      	beq.n	8006c4c <fmax+0x2e>
 8006c30:	0030      	movs	r0, r6
 8006c32:	0039      	movs	r1, r7
 8006c34:	f000 f810 	bl	8006c58 <__fpclassifyd>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d009      	beq.n	8006c50 <fmax+0x32>
 8006c3c:	0032      	movs	r2, r6
 8006c3e:	003b      	movs	r3, r7
 8006c40:	0020      	movs	r0, r4
 8006c42:	0029      	movs	r1, r5
 8006c44:	f7f9 fb16 	bl	8000274 <__aeabi_dcmpgt>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d101      	bne.n	8006c50 <fmax+0x32>
 8006c4c:	0034      	movs	r4, r6
 8006c4e:	003d      	movs	r5, r7
 8006c50:	0029      	movs	r1, r5
 8006c52:	0020      	movs	r0, r4
 8006c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c58 <__fpclassifyd>:
 8006c58:	b530      	push	{r4, r5, lr}
 8006c5a:	0005      	movs	r5, r0
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	430d      	orrs	r5, r1
 8006c60:	d018      	beq.n	8006c94 <__fpclassifyd+0x3c>
 8006c62:	2380      	movs	r3, #128	; 0x80
 8006c64:	061b      	lsls	r3, r3, #24
 8006c66:	4299      	cmp	r1, r3
 8006c68:	d102      	bne.n	8006c70 <__fpclassifyd+0x18>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d011      	beq.n	8006c94 <__fpclassifyd+0x3c>
 8006c70:	4b09      	ldr	r3, [pc, #36]	; (8006c98 <__fpclassifyd+0x40>)
 8006c72:	0049      	lsls	r1, r1, #1
 8006c74:	0849      	lsrs	r1, r1, #1
 8006c76:	4a09      	ldr	r2, [pc, #36]	; (8006c9c <__fpclassifyd+0x44>)
 8006c78:	18cc      	adds	r4, r1, r3
 8006c7a:	2304      	movs	r3, #4
 8006c7c:	4294      	cmp	r4, r2
 8006c7e:	d909      	bls.n	8006c94 <__fpclassifyd+0x3c>
 8006c80:	4a07      	ldr	r2, [pc, #28]	; (8006ca0 <__fpclassifyd+0x48>)
 8006c82:	3b01      	subs	r3, #1
 8006c84:	4291      	cmp	r1, r2
 8006c86:	d905      	bls.n	8006c94 <__fpclassifyd+0x3c>
 8006c88:	4a06      	ldr	r2, [pc, #24]	; (8006ca4 <__fpclassifyd+0x4c>)
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	4291      	cmp	r1, r2
 8006c8e:	d101      	bne.n	8006c94 <__fpclassifyd+0x3c>
 8006c90:	4243      	negs	r3, r0
 8006c92:	4143      	adcs	r3, r0
 8006c94:	0018      	movs	r0, r3
 8006c96:	bd30      	pop	{r4, r5, pc}
 8006c98:	fff00000 	.word	0xfff00000
 8006c9c:	7fdfffff 	.word	0x7fdfffff
 8006ca0:	000fffff 	.word	0x000fffff
 8006ca4:	7ff00000 	.word	0x7ff00000

08006ca8 <_init>:
 8006ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006caa:	46c0      	nop			; (mov r8, r8)
 8006cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cae:	bc08      	pop	{r3}
 8006cb0:	469e      	mov	lr, r3
 8006cb2:	4770      	bx	lr

08006cb4 <_fini>:
 8006cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb6:	46c0      	nop			; (mov r8, r8)
 8006cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cba:	bc08      	pop	{r3}
 8006cbc:	469e      	mov	lr, r3
 8006cbe:	4770      	bx	lr
