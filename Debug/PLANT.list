
PLANT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080068a4  080068a4  000168a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ae4  08006ae4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006ae4  08006ae4  00016ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006aec  08006aec  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aec  08006aec  00016aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006af0  08006af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000068  08006b5c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08006b5c  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 0000002c  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df87  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f66  00000000  00000000  0002e01b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d50  00000000  00000000  0002ff88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  00030cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016398  00000000  00000000  00031930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a0ad  00000000  00000000  00047cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088836  00000000  00000000  00051d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000b2  00000000  00000000  000da5ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003788  00000000  00000000  000da660  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000003c  00000000  00000000  000ddde8  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macinfo 00000001  00000000  00000000  000dde24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800688c 	.word	0x0800688c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800688c 	.word	0x0800688c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 fd5f 	bl	8000d40 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 fd5a 	bl	8000d40 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__aeabi_fadd>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	4647      	mov	r7, r8
 80003e8:	46ce      	mov	lr, r9
 80003ea:	0243      	lsls	r3, r0, #9
 80003ec:	0a5b      	lsrs	r3, r3, #9
 80003ee:	0044      	lsls	r4, r0, #1
 80003f0:	0fc2      	lsrs	r2, r0, #31
 80003f2:	469c      	mov	ip, r3
 80003f4:	0048      	lsls	r0, r1, #1
 80003f6:	00dd      	lsls	r5, r3, #3
 80003f8:	024b      	lsls	r3, r1, #9
 80003fa:	0e24      	lsrs	r4, r4, #24
 80003fc:	0a5b      	lsrs	r3, r3, #9
 80003fe:	0e00      	lsrs	r0, r0, #24
 8000400:	b580      	push	{r7, lr}
 8000402:	4698      	mov	r8, r3
 8000404:	0026      	movs	r6, r4
 8000406:	4691      	mov	r9, r2
 8000408:	0fc9      	lsrs	r1, r1, #31
 800040a:	00db      	lsls	r3, r3, #3
 800040c:	1a27      	subs	r7, r4, r0
 800040e:	428a      	cmp	r2, r1
 8000410:	d029      	beq.n	8000466 <__aeabi_fadd+0x82>
 8000412:	2f00      	cmp	r7, #0
 8000414:	dd15      	ble.n	8000442 <__aeabi_fadd+0x5e>
 8000416:	2800      	cmp	r0, #0
 8000418:	d14a      	bne.n	80004b0 <__aeabi_fadd+0xcc>
 800041a:	2b00      	cmp	r3, #0
 800041c:	d000      	beq.n	8000420 <__aeabi_fadd+0x3c>
 800041e:	e095      	b.n	800054c <__aeabi_fadd+0x168>
 8000420:	08ed      	lsrs	r5, r5, #3
 8000422:	2cff      	cmp	r4, #255	; 0xff
 8000424:	d100      	bne.n	8000428 <__aeabi_fadd+0x44>
 8000426:	e088      	b.n	800053a <__aeabi_fadd+0x156>
 8000428:	026b      	lsls	r3, r5, #9
 800042a:	0a5b      	lsrs	r3, r3, #9
 800042c:	b2e6      	uxtb	r6, r4
 800042e:	025b      	lsls	r3, r3, #9
 8000430:	05f6      	lsls	r6, r6, #23
 8000432:	0a58      	lsrs	r0, r3, #9
 8000434:	4330      	orrs	r0, r6
 8000436:	07d2      	lsls	r2, r2, #31
 8000438:	4310      	orrs	r0, r2
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4690      	mov	r8, r2
 800043e:	4699      	mov	r9, r3
 8000440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000442:	2f00      	cmp	r7, #0
 8000444:	d000      	beq.n	8000448 <__aeabi_fadd+0x64>
 8000446:	e087      	b.n	8000558 <__aeabi_fadd+0x174>
 8000448:	1c60      	adds	r0, r4, #1
 800044a:	b2c0      	uxtb	r0, r0
 800044c:	2801      	cmp	r0, #1
 800044e:	dc00      	bgt.n	8000452 <__aeabi_fadd+0x6e>
 8000450:	e0b6      	b.n	80005c0 <__aeabi_fadd+0x1dc>
 8000452:	1aee      	subs	r6, r5, r3
 8000454:	0172      	lsls	r2, r6, #5
 8000456:	d500      	bpl.n	800045a <__aeabi_fadd+0x76>
 8000458:	e0c5      	b.n	80005e6 <__aeabi_fadd+0x202>
 800045a:	2e00      	cmp	r6, #0
 800045c:	d13d      	bne.n	80004da <__aeabi_fadd+0xf6>
 800045e:	2200      	movs	r2, #0
 8000460:	2600      	movs	r6, #0
 8000462:	2300      	movs	r3, #0
 8000464:	e7e3      	b.n	800042e <__aeabi_fadd+0x4a>
 8000466:	2f00      	cmp	r7, #0
 8000468:	dc00      	bgt.n	800046c <__aeabi_fadd+0x88>
 800046a:	e096      	b.n	800059a <__aeabi_fadd+0x1b6>
 800046c:	2800      	cmp	r0, #0
 800046e:	d05d      	beq.n	800052c <__aeabi_fadd+0x148>
 8000470:	2cff      	cmp	r4, #255	; 0xff
 8000472:	d060      	beq.n	8000536 <__aeabi_fadd+0x152>
 8000474:	2280      	movs	r2, #128	; 0x80
 8000476:	04d2      	lsls	r2, r2, #19
 8000478:	4313      	orrs	r3, r2
 800047a:	2f1b      	cmp	r7, #27
 800047c:	dd00      	ble.n	8000480 <__aeabi_fadd+0x9c>
 800047e:	e0ec      	b.n	800065a <__aeabi_fadd+0x276>
 8000480:	2220      	movs	r2, #32
 8000482:	1bd2      	subs	r2, r2, r7
 8000484:	0018      	movs	r0, r3
 8000486:	4093      	lsls	r3, r2
 8000488:	40f8      	lsrs	r0, r7
 800048a:	1e5a      	subs	r2, r3, #1
 800048c:	4193      	sbcs	r3, r2
 800048e:	4303      	orrs	r3, r0
 8000490:	18ed      	adds	r5, r5, r3
 8000492:	016b      	lsls	r3, r5, #5
 8000494:	d57b      	bpl.n	800058e <__aeabi_fadd+0x1aa>
 8000496:	3401      	adds	r4, #1
 8000498:	2cff      	cmp	r4, #255	; 0xff
 800049a:	d100      	bne.n	800049e <__aeabi_fadd+0xba>
 800049c:	e0b7      	b.n	800060e <__aeabi_fadd+0x22a>
 800049e:	2201      	movs	r2, #1
 80004a0:	2607      	movs	r6, #7
 80004a2:	402a      	ands	r2, r5
 80004a4:	086b      	lsrs	r3, r5, #1
 80004a6:	4d9a      	ldr	r5, [pc, #616]	; (8000710 <__aeabi_fadd+0x32c>)
 80004a8:	401d      	ands	r5, r3
 80004aa:	4315      	orrs	r5, r2
 80004ac:	402e      	ands	r6, r5
 80004ae:	e029      	b.n	8000504 <__aeabi_fadd+0x120>
 80004b0:	2cff      	cmp	r4, #255	; 0xff
 80004b2:	d0b5      	beq.n	8000420 <__aeabi_fadd+0x3c>
 80004b4:	2280      	movs	r2, #128	; 0x80
 80004b6:	04d2      	lsls	r2, r2, #19
 80004b8:	4313      	orrs	r3, r2
 80004ba:	2f1b      	cmp	r7, #27
 80004bc:	dd00      	ble.n	80004c0 <__aeabi_fadd+0xdc>
 80004be:	e0b2      	b.n	8000626 <__aeabi_fadd+0x242>
 80004c0:	2220      	movs	r2, #32
 80004c2:	1bd2      	subs	r2, r2, r7
 80004c4:	0019      	movs	r1, r3
 80004c6:	4093      	lsls	r3, r2
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	1e5a      	subs	r2, r3, #1
 80004cc:	4193      	sbcs	r3, r2
 80004ce:	430b      	orrs	r3, r1
 80004d0:	1aed      	subs	r5, r5, r3
 80004d2:	016b      	lsls	r3, r5, #5
 80004d4:	d55b      	bpl.n	800058e <__aeabi_fadd+0x1aa>
 80004d6:	01ad      	lsls	r5, r5, #6
 80004d8:	09ae      	lsrs	r6, r5, #6
 80004da:	0030      	movs	r0, r6
 80004dc:	f000 fc12 	bl	8000d04 <__clzsi2>
 80004e0:	3805      	subs	r0, #5
 80004e2:	4086      	lsls	r6, r0
 80004e4:	4284      	cmp	r4, r0
 80004e6:	dc65      	bgt.n	80005b4 <__aeabi_fadd+0x1d0>
 80004e8:	1b04      	subs	r4, r0, r4
 80004ea:	0033      	movs	r3, r6
 80004ec:	2020      	movs	r0, #32
 80004ee:	3401      	adds	r4, #1
 80004f0:	40e3      	lsrs	r3, r4
 80004f2:	1b04      	subs	r4, r0, r4
 80004f4:	40a6      	lsls	r6, r4
 80004f6:	1e75      	subs	r5, r6, #1
 80004f8:	41ae      	sbcs	r6, r5
 80004fa:	4333      	orrs	r3, r6
 80004fc:	2607      	movs	r6, #7
 80004fe:	001d      	movs	r5, r3
 8000500:	2400      	movs	r4, #0
 8000502:	401e      	ands	r6, r3
 8000504:	2201      	movs	r2, #1
 8000506:	464b      	mov	r3, r9
 8000508:	401a      	ands	r2, r3
 800050a:	2e00      	cmp	r6, #0
 800050c:	d004      	beq.n	8000518 <__aeabi_fadd+0x134>
 800050e:	230f      	movs	r3, #15
 8000510:	402b      	ands	r3, r5
 8000512:	2b04      	cmp	r3, #4
 8000514:	d000      	beq.n	8000518 <__aeabi_fadd+0x134>
 8000516:	3504      	adds	r5, #4
 8000518:	016b      	lsls	r3, r5, #5
 800051a:	d400      	bmi.n	800051e <__aeabi_fadd+0x13a>
 800051c:	e780      	b.n	8000420 <__aeabi_fadd+0x3c>
 800051e:	3401      	adds	r4, #1
 8000520:	b2e6      	uxtb	r6, r4
 8000522:	2cff      	cmp	r4, #255	; 0xff
 8000524:	d12f      	bne.n	8000586 <__aeabi_fadd+0x1a2>
 8000526:	26ff      	movs	r6, #255	; 0xff
 8000528:	2300      	movs	r3, #0
 800052a:	e780      	b.n	800042e <__aeabi_fadd+0x4a>
 800052c:	2b00      	cmp	r3, #0
 800052e:	d152      	bne.n	80005d6 <__aeabi_fadd+0x1f2>
 8000530:	2cff      	cmp	r4, #255	; 0xff
 8000532:	d000      	beq.n	8000536 <__aeabi_fadd+0x152>
 8000534:	e774      	b.n	8000420 <__aeabi_fadd+0x3c>
 8000536:	000a      	movs	r2, r1
 8000538:	08ed      	lsrs	r5, r5, #3
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0f3      	beq.n	8000526 <__aeabi_fadd+0x142>
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	03db      	lsls	r3, r3, #15
 8000542:	432b      	orrs	r3, r5
 8000544:	025b      	lsls	r3, r3, #9
 8000546:	0a5b      	lsrs	r3, r3, #9
 8000548:	26ff      	movs	r6, #255	; 0xff
 800054a:	e770      	b.n	800042e <__aeabi_fadd+0x4a>
 800054c:	3f01      	subs	r7, #1
 800054e:	2f00      	cmp	r7, #0
 8000550:	d0be      	beq.n	80004d0 <__aeabi_fadd+0xec>
 8000552:	2cff      	cmp	r4, #255	; 0xff
 8000554:	d1b1      	bne.n	80004ba <__aeabi_fadd+0xd6>
 8000556:	e763      	b.n	8000420 <__aeabi_fadd+0x3c>
 8000558:	2c00      	cmp	r4, #0
 800055a:	d047      	beq.n	80005ec <__aeabi_fadd+0x208>
 800055c:	28ff      	cmp	r0, #255	; 0xff
 800055e:	d069      	beq.n	8000634 <__aeabi_fadd+0x250>
 8000560:	2480      	movs	r4, #128	; 0x80
 8000562:	04e4      	lsls	r4, r4, #19
 8000564:	427a      	negs	r2, r7
 8000566:	4325      	orrs	r5, r4
 8000568:	2a1b      	cmp	r2, #27
 800056a:	dd00      	ble.n	800056e <__aeabi_fadd+0x18a>
 800056c:	e0c5      	b.n	80006fa <__aeabi_fadd+0x316>
 800056e:	002c      	movs	r4, r5
 8000570:	2620      	movs	r6, #32
 8000572:	40d4      	lsrs	r4, r2
 8000574:	1ab2      	subs	r2, r6, r2
 8000576:	4095      	lsls	r5, r2
 8000578:	1e6a      	subs	r2, r5, #1
 800057a:	4195      	sbcs	r5, r2
 800057c:	4325      	orrs	r5, r4
 800057e:	1b5d      	subs	r5, r3, r5
 8000580:	0004      	movs	r4, r0
 8000582:	4689      	mov	r9, r1
 8000584:	e7a5      	b.n	80004d2 <__aeabi_fadd+0xee>
 8000586:	01ab      	lsls	r3, r5, #6
 8000588:	0a5b      	lsrs	r3, r3, #9
 800058a:	e750      	b.n	800042e <__aeabi_fadd+0x4a>
 800058c:	2400      	movs	r4, #0
 800058e:	2201      	movs	r2, #1
 8000590:	464b      	mov	r3, r9
 8000592:	401a      	ands	r2, r3
 8000594:	076b      	lsls	r3, r5, #29
 8000596:	d1ba      	bne.n	800050e <__aeabi_fadd+0x12a>
 8000598:	e742      	b.n	8000420 <__aeabi_fadd+0x3c>
 800059a:	2f00      	cmp	r7, #0
 800059c:	d13b      	bne.n	8000616 <__aeabi_fadd+0x232>
 800059e:	3401      	adds	r4, #1
 80005a0:	b2e0      	uxtb	r0, r4
 80005a2:	2801      	cmp	r0, #1
 80005a4:	dd4a      	ble.n	800063c <__aeabi_fadd+0x258>
 80005a6:	2cff      	cmp	r4, #255	; 0xff
 80005a8:	d0bd      	beq.n	8000526 <__aeabi_fadd+0x142>
 80005aa:	2607      	movs	r6, #7
 80005ac:	18ed      	adds	r5, r5, r3
 80005ae:	086d      	lsrs	r5, r5, #1
 80005b0:	402e      	ands	r6, r5
 80005b2:	e7a7      	b.n	8000504 <__aeabi_fadd+0x120>
 80005b4:	2307      	movs	r3, #7
 80005b6:	4d57      	ldr	r5, [pc, #348]	; (8000714 <__aeabi_fadd+0x330>)
 80005b8:	1a24      	subs	r4, r4, r0
 80005ba:	4035      	ands	r5, r6
 80005bc:	401e      	ands	r6, r3
 80005be:	e7a1      	b.n	8000504 <__aeabi_fadd+0x120>
 80005c0:	2c00      	cmp	r4, #0
 80005c2:	d11b      	bne.n	80005fc <__aeabi_fadd+0x218>
 80005c4:	2d00      	cmp	r5, #0
 80005c6:	d16e      	bne.n	80006a6 <__aeabi_fadd+0x2c2>
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d100      	bne.n	80005ce <__aeabi_fadd+0x1ea>
 80005cc:	e09a      	b.n	8000704 <__aeabi_fadd+0x320>
 80005ce:	000a      	movs	r2, r1
 80005d0:	001d      	movs	r5, r3
 80005d2:	003c      	movs	r4, r7
 80005d4:	e724      	b.n	8000420 <__aeabi_fadd+0x3c>
 80005d6:	3f01      	subs	r7, #1
 80005d8:	2f00      	cmp	r7, #0
 80005da:	d100      	bne.n	80005de <__aeabi_fadd+0x1fa>
 80005dc:	e758      	b.n	8000490 <__aeabi_fadd+0xac>
 80005de:	2cff      	cmp	r4, #255	; 0xff
 80005e0:	d000      	beq.n	80005e4 <__aeabi_fadd+0x200>
 80005e2:	e74a      	b.n	800047a <__aeabi_fadd+0x96>
 80005e4:	e7a7      	b.n	8000536 <__aeabi_fadd+0x152>
 80005e6:	1b5e      	subs	r6, r3, r5
 80005e8:	4689      	mov	r9, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fadd+0xf6>
 80005ec:	2d00      	cmp	r5, #0
 80005ee:	d11c      	bne.n	800062a <__aeabi_fadd+0x246>
 80005f0:	000a      	movs	r2, r1
 80005f2:	28ff      	cmp	r0, #255	; 0xff
 80005f4:	d01f      	beq.n	8000636 <__aeabi_fadd+0x252>
 80005f6:	0004      	movs	r4, r0
 80005f8:	001d      	movs	r5, r3
 80005fa:	e711      	b.n	8000420 <__aeabi_fadd+0x3c>
 80005fc:	2d00      	cmp	r5, #0
 80005fe:	d15d      	bne.n	80006bc <__aeabi_fadd+0x2d8>
 8000600:	2b00      	cmp	r3, #0
 8000602:	d117      	bne.n	8000634 <__aeabi_fadd+0x250>
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	2200      	movs	r2, #0
 8000608:	03db      	lsls	r3, r3, #15
 800060a:	26ff      	movs	r6, #255	; 0xff
 800060c:	e70f      	b.n	800042e <__aeabi_fadd+0x4a>
 800060e:	000a      	movs	r2, r1
 8000610:	26ff      	movs	r6, #255	; 0xff
 8000612:	2300      	movs	r3, #0
 8000614:	e70b      	b.n	800042e <__aeabi_fadd+0x4a>
 8000616:	2c00      	cmp	r4, #0
 8000618:	d121      	bne.n	800065e <__aeabi_fadd+0x27a>
 800061a:	2d00      	cmp	r5, #0
 800061c:	d166      	bne.n	80006ec <__aeabi_fadd+0x308>
 800061e:	28ff      	cmp	r0, #255	; 0xff
 8000620:	d1e9      	bne.n	80005f6 <__aeabi_fadd+0x212>
 8000622:	001d      	movs	r5, r3
 8000624:	e787      	b.n	8000536 <__aeabi_fadd+0x152>
 8000626:	2301      	movs	r3, #1
 8000628:	e752      	b.n	80004d0 <__aeabi_fadd+0xec>
 800062a:	1c7a      	adds	r2, r7, #1
 800062c:	d0a7      	beq.n	800057e <__aeabi_fadd+0x19a>
 800062e:	43fa      	mvns	r2, r7
 8000630:	28ff      	cmp	r0, #255	; 0xff
 8000632:	d199      	bne.n	8000568 <__aeabi_fadd+0x184>
 8000634:	000a      	movs	r2, r1
 8000636:	001d      	movs	r5, r3
 8000638:	24ff      	movs	r4, #255	; 0xff
 800063a:	e6f1      	b.n	8000420 <__aeabi_fadd+0x3c>
 800063c:	2e00      	cmp	r6, #0
 800063e:	d121      	bne.n	8000684 <__aeabi_fadd+0x2a0>
 8000640:	2d00      	cmp	r5, #0
 8000642:	d04f      	beq.n	80006e4 <__aeabi_fadd+0x300>
 8000644:	2b00      	cmp	r3, #0
 8000646:	d04c      	beq.n	80006e2 <__aeabi_fadd+0x2fe>
 8000648:	18ed      	adds	r5, r5, r3
 800064a:	016b      	lsls	r3, r5, #5
 800064c:	d59e      	bpl.n	800058c <__aeabi_fadd+0x1a8>
 800064e:	4b31      	ldr	r3, [pc, #196]	; (8000714 <__aeabi_fadd+0x330>)
 8000650:	3607      	adds	r6, #7
 8000652:	402e      	ands	r6, r5
 8000654:	2401      	movs	r4, #1
 8000656:	401d      	ands	r5, r3
 8000658:	e754      	b.n	8000504 <__aeabi_fadd+0x120>
 800065a:	2301      	movs	r3, #1
 800065c:	e718      	b.n	8000490 <__aeabi_fadd+0xac>
 800065e:	28ff      	cmp	r0, #255	; 0xff
 8000660:	d0df      	beq.n	8000622 <__aeabi_fadd+0x23e>
 8000662:	2480      	movs	r4, #128	; 0x80
 8000664:	04e4      	lsls	r4, r4, #19
 8000666:	427f      	negs	r7, r7
 8000668:	4325      	orrs	r5, r4
 800066a:	2f1b      	cmp	r7, #27
 800066c:	dc4d      	bgt.n	800070a <__aeabi_fadd+0x326>
 800066e:	2620      	movs	r6, #32
 8000670:	1bf6      	subs	r6, r6, r7
 8000672:	002c      	movs	r4, r5
 8000674:	40b5      	lsls	r5, r6
 8000676:	40fc      	lsrs	r4, r7
 8000678:	1e6a      	subs	r2, r5, #1
 800067a:	4195      	sbcs	r5, r2
 800067c:	4325      	orrs	r5, r4
 800067e:	18ed      	adds	r5, r5, r3
 8000680:	0004      	movs	r4, r0
 8000682:	e706      	b.n	8000492 <__aeabi_fadd+0xae>
 8000684:	2d00      	cmp	r5, #0
 8000686:	d0cc      	beq.n	8000622 <__aeabi_fadd+0x23e>
 8000688:	2b00      	cmp	r3, #0
 800068a:	d100      	bne.n	800068e <__aeabi_fadd+0x2aa>
 800068c:	e753      	b.n	8000536 <__aeabi_fadd+0x152>
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	4660      	mov	r0, ip
 8000692:	03c9      	lsls	r1, r1, #15
 8000694:	4208      	tst	r0, r1
 8000696:	d003      	beq.n	80006a0 <__aeabi_fadd+0x2bc>
 8000698:	4640      	mov	r0, r8
 800069a:	4208      	tst	r0, r1
 800069c:	d100      	bne.n	80006a0 <__aeabi_fadd+0x2bc>
 800069e:	001d      	movs	r5, r3
 80006a0:	2101      	movs	r1, #1
 80006a2:	4011      	ands	r1, r2
 80006a4:	e747      	b.n	8000536 <__aeabi_fadd+0x152>
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d100      	bne.n	80006ac <__aeabi_fadd+0x2c8>
 80006aa:	e6b9      	b.n	8000420 <__aeabi_fadd+0x3c>
 80006ac:	1aea      	subs	r2, r5, r3
 80006ae:	0150      	lsls	r0, r2, #5
 80006b0:	d525      	bpl.n	80006fe <__aeabi_fadd+0x31a>
 80006b2:	2607      	movs	r6, #7
 80006b4:	1b5d      	subs	r5, r3, r5
 80006b6:	402e      	ands	r6, r5
 80006b8:	4689      	mov	r9, r1
 80006ba:	e723      	b.n	8000504 <__aeabi_fadd+0x120>
 80006bc:	24ff      	movs	r4, #255	; 0xff
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fadd+0x2e0>
 80006c2:	e6ad      	b.n	8000420 <__aeabi_fadd+0x3c>
 80006c4:	2280      	movs	r2, #128	; 0x80
 80006c6:	4660      	mov	r0, ip
 80006c8:	03d2      	lsls	r2, r2, #15
 80006ca:	4210      	tst	r0, r2
 80006cc:	d004      	beq.n	80006d8 <__aeabi_fadd+0x2f4>
 80006ce:	4640      	mov	r0, r8
 80006d0:	4210      	tst	r0, r2
 80006d2:	d101      	bne.n	80006d8 <__aeabi_fadd+0x2f4>
 80006d4:	001d      	movs	r5, r3
 80006d6:	4689      	mov	r9, r1
 80006d8:	2201      	movs	r2, #1
 80006da:	464b      	mov	r3, r9
 80006dc:	24ff      	movs	r4, #255	; 0xff
 80006de:	401a      	ands	r2, r3
 80006e0:	e69e      	b.n	8000420 <__aeabi_fadd+0x3c>
 80006e2:	002b      	movs	r3, r5
 80006e4:	08dd      	lsrs	r5, r3, #3
 80006e6:	000a      	movs	r2, r1
 80006e8:	2400      	movs	r4, #0
 80006ea:	e69d      	b.n	8000428 <__aeabi_fadd+0x44>
 80006ec:	1c7a      	adds	r2, r7, #1
 80006ee:	d0c6      	beq.n	800067e <__aeabi_fadd+0x29a>
 80006f0:	43ff      	mvns	r7, r7
 80006f2:	28ff      	cmp	r0, #255	; 0xff
 80006f4:	d1b9      	bne.n	800066a <__aeabi_fadd+0x286>
 80006f6:	001d      	movs	r5, r3
 80006f8:	e71d      	b.n	8000536 <__aeabi_fadd+0x152>
 80006fa:	2501      	movs	r5, #1
 80006fc:	e73f      	b.n	800057e <__aeabi_fadd+0x19a>
 80006fe:	1e15      	subs	r5, r2, #0
 8000700:	d000      	beq.n	8000704 <__aeabi_fadd+0x320>
 8000702:	e744      	b.n	800058e <__aeabi_fadd+0x1aa>
 8000704:	2200      	movs	r2, #0
 8000706:	2300      	movs	r3, #0
 8000708:	e691      	b.n	800042e <__aeabi_fadd+0x4a>
 800070a:	2501      	movs	r5, #1
 800070c:	e7b7      	b.n	800067e <__aeabi_fadd+0x29a>
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	7dffffff 	.word	0x7dffffff
 8000714:	fbffffff 	.word	0xfbffffff

08000718 <__aeabi_fmul>:
 8000718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071a:	464e      	mov	r6, r9
 800071c:	4657      	mov	r7, sl
 800071e:	4645      	mov	r5, r8
 8000720:	46de      	mov	lr, fp
 8000722:	b5e0      	push	{r5, r6, r7, lr}
 8000724:	0243      	lsls	r3, r0, #9
 8000726:	0a5b      	lsrs	r3, r3, #9
 8000728:	0045      	lsls	r5, r0, #1
 800072a:	b083      	sub	sp, #12
 800072c:	1c0f      	adds	r7, r1, #0
 800072e:	4699      	mov	r9, r3
 8000730:	0e2d      	lsrs	r5, r5, #24
 8000732:	0fc6      	lsrs	r6, r0, #31
 8000734:	2d00      	cmp	r5, #0
 8000736:	d057      	beq.n	80007e8 <__aeabi_fmul+0xd0>
 8000738:	2dff      	cmp	r5, #255	; 0xff
 800073a:	d024      	beq.n	8000786 <__aeabi_fmul+0x6e>
 800073c:	2080      	movs	r0, #128	; 0x80
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	04c0      	lsls	r0, r0, #19
 8000742:	4318      	orrs	r0, r3
 8000744:	2300      	movs	r3, #0
 8000746:	4681      	mov	r9, r0
 8000748:	469a      	mov	sl, r3
 800074a:	469b      	mov	fp, r3
 800074c:	3d7f      	subs	r5, #127	; 0x7f
 800074e:	027c      	lsls	r4, r7, #9
 8000750:	007a      	lsls	r2, r7, #1
 8000752:	0ffb      	lsrs	r3, r7, #31
 8000754:	0a64      	lsrs	r4, r4, #9
 8000756:	0e12      	lsrs	r2, r2, #24
 8000758:	4698      	mov	r8, r3
 800075a:	d023      	beq.n	80007a4 <__aeabi_fmul+0x8c>
 800075c:	2aff      	cmp	r2, #255	; 0xff
 800075e:	d04b      	beq.n	80007f8 <__aeabi_fmul+0xe0>
 8000760:	00e3      	lsls	r3, r4, #3
 8000762:	2480      	movs	r4, #128	; 0x80
 8000764:	2000      	movs	r0, #0
 8000766:	04e4      	lsls	r4, r4, #19
 8000768:	3a7f      	subs	r2, #127	; 0x7f
 800076a:	431c      	orrs	r4, r3
 800076c:	18ad      	adds	r5, r5, r2
 800076e:	1c6b      	adds	r3, r5, #1
 8000770:	4647      	mov	r7, r8
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	4653      	mov	r3, sl
 8000776:	4077      	eors	r7, r6
 8000778:	003a      	movs	r2, r7
 800077a:	2b0f      	cmp	r3, #15
 800077c:	d848      	bhi.n	8000810 <__aeabi_fmul+0xf8>
 800077e:	497d      	ldr	r1, [pc, #500]	; (8000974 <__aeabi_fmul+0x25c>)
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	58cb      	ldr	r3, [r1, r3]
 8000784:	469f      	mov	pc, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d000      	beq.n	800078c <__aeabi_fmul+0x74>
 800078a:	e085      	b.n	8000898 <__aeabi_fmul+0x180>
 800078c:	3308      	adds	r3, #8
 800078e:	469a      	mov	sl, r3
 8000790:	3b06      	subs	r3, #6
 8000792:	469b      	mov	fp, r3
 8000794:	027c      	lsls	r4, r7, #9
 8000796:	007a      	lsls	r2, r7, #1
 8000798:	0ffb      	lsrs	r3, r7, #31
 800079a:	25ff      	movs	r5, #255	; 0xff
 800079c:	0a64      	lsrs	r4, r4, #9
 800079e:	0e12      	lsrs	r2, r2, #24
 80007a0:	4698      	mov	r8, r3
 80007a2:	d1db      	bne.n	800075c <__aeabi_fmul+0x44>
 80007a4:	2c00      	cmp	r4, #0
 80007a6:	d000      	beq.n	80007aa <__aeabi_fmul+0x92>
 80007a8:	e090      	b.n	80008cc <__aeabi_fmul+0x1b4>
 80007aa:	4652      	mov	r2, sl
 80007ac:	2301      	movs	r3, #1
 80007ae:	431a      	orrs	r2, r3
 80007b0:	4692      	mov	sl, r2
 80007b2:	2001      	movs	r0, #1
 80007b4:	e7db      	b.n	800076e <__aeabi_fmul+0x56>
 80007b6:	464c      	mov	r4, r9
 80007b8:	4658      	mov	r0, fp
 80007ba:	0017      	movs	r7, r2
 80007bc:	2802      	cmp	r0, #2
 80007be:	d024      	beq.n	800080a <__aeabi_fmul+0xf2>
 80007c0:	2803      	cmp	r0, #3
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fmul+0xae>
 80007c4:	e0cf      	b.n	8000966 <__aeabi_fmul+0x24e>
 80007c6:	2200      	movs	r2, #0
 80007c8:	2300      	movs	r3, #0
 80007ca:	2801      	cmp	r0, #1
 80007cc:	d14d      	bne.n	800086a <__aeabi_fmul+0x152>
 80007ce:	0258      	lsls	r0, r3, #9
 80007d0:	05d2      	lsls	r2, r2, #23
 80007d2:	0a40      	lsrs	r0, r0, #9
 80007d4:	07ff      	lsls	r7, r7, #31
 80007d6:	4310      	orrs	r0, r2
 80007d8:	4338      	orrs	r0, r7
 80007da:	b003      	add	sp, #12
 80007dc:	bc3c      	pop	{r2, r3, r4, r5}
 80007de:	4690      	mov	r8, r2
 80007e0:	4699      	mov	r9, r3
 80007e2:	46a2      	mov	sl, r4
 80007e4:	46ab      	mov	fp, r5
 80007e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d15b      	bne.n	80008a4 <__aeabi_fmul+0x18c>
 80007ec:	2304      	movs	r3, #4
 80007ee:	469a      	mov	sl, r3
 80007f0:	3b03      	subs	r3, #3
 80007f2:	2500      	movs	r5, #0
 80007f4:	469b      	mov	fp, r3
 80007f6:	e7aa      	b.n	800074e <__aeabi_fmul+0x36>
 80007f8:	35ff      	adds	r5, #255	; 0xff
 80007fa:	2c00      	cmp	r4, #0
 80007fc:	d160      	bne.n	80008c0 <__aeabi_fmul+0x1a8>
 80007fe:	4652      	mov	r2, sl
 8000800:	2302      	movs	r3, #2
 8000802:	431a      	orrs	r2, r3
 8000804:	4692      	mov	sl, r2
 8000806:	2002      	movs	r0, #2
 8000808:	e7b1      	b.n	800076e <__aeabi_fmul+0x56>
 800080a:	22ff      	movs	r2, #255	; 0xff
 800080c:	2300      	movs	r3, #0
 800080e:	e7de      	b.n	80007ce <__aeabi_fmul+0xb6>
 8000810:	464b      	mov	r3, r9
 8000812:	0c1b      	lsrs	r3, r3, #16
 8000814:	469c      	mov	ip, r3
 8000816:	464b      	mov	r3, r9
 8000818:	0426      	lsls	r6, r4, #16
 800081a:	0c36      	lsrs	r6, r6, #16
 800081c:	0418      	lsls	r0, r3, #16
 800081e:	4661      	mov	r1, ip
 8000820:	0033      	movs	r3, r6
 8000822:	0c22      	lsrs	r2, r4, #16
 8000824:	4664      	mov	r4, ip
 8000826:	0c00      	lsrs	r0, r0, #16
 8000828:	4343      	muls	r3, r0
 800082a:	434e      	muls	r6, r1
 800082c:	4350      	muls	r0, r2
 800082e:	4354      	muls	r4, r2
 8000830:	1980      	adds	r0, r0, r6
 8000832:	0c1a      	lsrs	r2, r3, #16
 8000834:	1812      	adds	r2, r2, r0
 8000836:	4296      	cmp	r6, r2
 8000838:	d903      	bls.n	8000842 <__aeabi_fmul+0x12a>
 800083a:	2180      	movs	r1, #128	; 0x80
 800083c:	0249      	lsls	r1, r1, #9
 800083e:	468c      	mov	ip, r1
 8000840:	4464      	add	r4, ip
 8000842:	041b      	lsls	r3, r3, #16
 8000844:	0c1b      	lsrs	r3, r3, #16
 8000846:	0410      	lsls	r0, r2, #16
 8000848:	18c0      	adds	r0, r0, r3
 800084a:	0183      	lsls	r3, r0, #6
 800084c:	1e5e      	subs	r6, r3, #1
 800084e:	41b3      	sbcs	r3, r6
 8000850:	0e80      	lsrs	r0, r0, #26
 8000852:	4318      	orrs	r0, r3
 8000854:	0c13      	lsrs	r3, r2, #16
 8000856:	191b      	adds	r3, r3, r4
 8000858:	019b      	lsls	r3, r3, #6
 800085a:	4303      	orrs	r3, r0
 800085c:	001c      	movs	r4, r3
 800085e:	0123      	lsls	r3, r4, #4
 8000860:	d579      	bpl.n	8000956 <__aeabi_fmul+0x23e>
 8000862:	2301      	movs	r3, #1
 8000864:	0862      	lsrs	r2, r4, #1
 8000866:	401c      	ands	r4, r3
 8000868:	4314      	orrs	r4, r2
 800086a:	9a01      	ldr	r2, [sp, #4]
 800086c:	327f      	adds	r2, #127	; 0x7f
 800086e:	2a00      	cmp	r2, #0
 8000870:	dd4d      	ble.n	800090e <__aeabi_fmul+0x1f6>
 8000872:	0763      	lsls	r3, r4, #29
 8000874:	d004      	beq.n	8000880 <__aeabi_fmul+0x168>
 8000876:	230f      	movs	r3, #15
 8000878:	4023      	ands	r3, r4
 800087a:	2b04      	cmp	r3, #4
 800087c:	d000      	beq.n	8000880 <__aeabi_fmul+0x168>
 800087e:	3404      	adds	r4, #4
 8000880:	0123      	lsls	r3, r4, #4
 8000882:	d503      	bpl.n	800088c <__aeabi_fmul+0x174>
 8000884:	4b3c      	ldr	r3, [pc, #240]	; (8000978 <__aeabi_fmul+0x260>)
 8000886:	9a01      	ldr	r2, [sp, #4]
 8000888:	401c      	ands	r4, r3
 800088a:	3280      	adds	r2, #128	; 0x80
 800088c:	2afe      	cmp	r2, #254	; 0xfe
 800088e:	dcbc      	bgt.n	800080a <__aeabi_fmul+0xf2>
 8000890:	01a3      	lsls	r3, r4, #6
 8000892:	0a5b      	lsrs	r3, r3, #9
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	e79a      	b.n	80007ce <__aeabi_fmul+0xb6>
 8000898:	230c      	movs	r3, #12
 800089a:	469a      	mov	sl, r3
 800089c:	3b09      	subs	r3, #9
 800089e:	25ff      	movs	r5, #255	; 0xff
 80008a0:	469b      	mov	fp, r3
 80008a2:	e754      	b.n	800074e <__aeabi_fmul+0x36>
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 fa2d 	bl	8000d04 <__clzsi2>
 80008aa:	464a      	mov	r2, r9
 80008ac:	1f43      	subs	r3, r0, #5
 80008ae:	2576      	movs	r5, #118	; 0x76
 80008b0:	409a      	lsls	r2, r3
 80008b2:	2300      	movs	r3, #0
 80008b4:	426d      	negs	r5, r5
 80008b6:	4691      	mov	r9, r2
 80008b8:	1a2d      	subs	r5, r5, r0
 80008ba:	469a      	mov	sl, r3
 80008bc:	469b      	mov	fp, r3
 80008be:	e746      	b.n	800074e <__aeabi_fmul+0x36>
 80008c0:	4652      	mov	r2, sl
 80008c2:	2303      	movs	r3, #3
 80008c4:	431a      	orrs	r2, r3
 80008c6:	4692      	mov	sl, r2
 80008c8:	2003      	movs	r0, #3
 80008ca:	e750      	b.n	800076e <__aeabi_fmul+0x56>
 80008cc:	0020      	movs	r0, r4
 80008ce:	f000 fa19 	bl	8000d04 <__clzsi2>
 80008d2:	1f43      	subs	r3, r0, #5
 80008d4:	1a2d      	subs	r5, r5, r0
 80008d6:	409c      	lsls	r4, r3
 80008d8:	3d76      	subs	r5, #118	; 0x76
 80008da:	2000      	movs	r0, #0
 80008dc:	e747      	b.n	800076e <__aeabi_fmul+0x56>
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	2700      	movs	r7, #0
 80008e2:	03db      	lsls	r3, r3, #15
 80008e4:	22ff      	movs	r2, #255	; 0xff
 80008e6:	e772      	b.n	80007ce <__aeabi_fmul+0xb6>
 80008e8:	4642      	mov	r2, r8
 80008ea:	e766      	b.n	80007ba <__aeabi_fmul+0xa2>
 80008ec:	464c      	mov	r4, r9
 80008ee:	0032      	movs	r2, r6
 80008f0:	4658      	mov	r0, fp
 80008f2:	e762      	b.n	80007ba <__aeabi_fmul+0xa2>
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	464a      	mov	r2, r9
 80008f8:	03db      	lsls	r3, r3, #15
 80008fa:	421a      	tst	r2, r3
 80008fc:	d022      	beq.n	8000944 <__aeabi_fmul+0x22c>
 80008fe:	421c      	tst	r4, r3
 8000900:	d120      	bne.n	8000944 <__aeabi_fmul+0x22c>
 8000902:	4323      	orrs	r3, r4
 8000904:	025b      	lsls	r3, r3, #9
 8000906:	0a5b      	lsrs	r3, r3, #9
 8000908:	4647      	mov	r7, r8
 800090a:	22ff      	movs	r2, #255	; 0xff
 800090c:	e75f      	b.n	80007ce <__aeabi_fmul+0xb6>
 800090e:	2301      	movs	r3, #1
 8000910:	1a9a      	subs	r2, r3, r2
 8000912:	2a1b      	cmp	r2, #27
 8000914:	dc21      	bgt.n	800095a <__aeabi_fmul+0x242>
 8000916:	0023      	movs	r3, r4
 8000918:	9901      	ldr	r1, [sp, #4]
 800091a:	40d3      	lsrs	r3, r2
 800091c:	319e      	adds	r1, #158	; 0x9e
 800091e:	408c      	lsls	r4, r1
 8000920:	001a      	movs	r2, r3
 8000922:	0023      	movs	r3, r4
 8000924:	1e5c      	subs	r4, r3, #1
 8000926:	41a3      	sbcs	r3, r4
 8000928:	4313      	orrs	r3, r2
 800092a:	075a      	lsls	r2, r3, #29
 800092c:	d004      	beq.n	8000938 <__aeabi_fmul+0x220>
 800092e:	220f      	movs	r2, #15
 8000930:	401a      	ands	r2, r3
 8000932:	2a04      	cmp	r2, #4
 8000934:	d000      	beq.n	8000938 <__aeabi_fmul+0x220>
 8000936:	3304      	adds	r3, #4
 8000938:	015a      	lsls	r2, r3, #5
 800093a:	d411      	bmi.n	8000960 <__aeabi_fmul+0x248>
 800093c:	019b      	lsls	r3, r3, #6
 800093e:	0a5b      	lsrs	r3, r3, #9
 8000940:	2200      	movs	r2, #0
 8000942:	e744      	b.n	80007ce <__aeabi_fmul+0xb6>
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	464a      	mov	r2, r9
 8000948:	03db      	lsls	r3, r3, #15
 800094a:	4313      	orrs	r3, r2
 800094c:	025b      	lsls	r3, r3, #9
 800094e:	0a5b      	lsrs	r3, r3, #9
 8000950:	0037      	movs	r7, r6
 8000952:	22ff      	movs	r2, #255	; 0xff
 8000954:	e73b      	b.n	80007ce <__aeabi_fmul+0xb6>
 8000956:	9501      	str	r5, [sp, #4]
 8000958:	e787      	b.n	800086a <__aeabi_fmul+0x152>
 800095a:	2200      	movs	r2, #0
 800095c:	2300      	movs	r3, #0
 800095e:	e736      	b.n	80007ce <__aeabi_fmul+0xb6>
 8000960:	2201      	movs	r2, #1
 8000962:	2300      	movs	r3, #0
 8000964:	e733      	b.n	80007ce <__aeabi_fmul+0xb6>
 8000966:	2380      	movs	r3, #128	; 0x80
 8000968:	03db      	lsls	r3, r3, #15
 800096a:	4323      	orrs	r3, r4
 800096c:	025b      	lsls	r3, r3, #9
 800096e:	0a5b      	lsrs	r3, r3, #9
 8000970:	22ff      	movs	r2, #255	; 0xff
 8000972:	e72c      	b.n	80007ce <__aeabi_fmul+0xb6>
 8000974:	080069a0 	.word	0x080069a0
 8000978:	f7ffffff 	.word	0xf7ffffff

0800097c <__aeabi_fsub>:
 800097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097e:	4647      	mov	r7, r8
 8000980:	46ce      	mov	lr, r9
 8000982:	0044      	lsls	r4, r0, #1
 8000984:	0fc2      	lsrs	r2, r0, #31
 8000986:	b580      	push	{r7, lr}
 8000988:	0247      	lsls	r7, r0, #9
 800098a:	0248      	lsls	r0, r1, #9
 800098c:	0a40      	lsrs	r0, r0, #9
 800098e:	4684      	mov	ip, r0
 8000990:	4666      	mov	r6, ip
 8000992:	0048      	lsls	r0, r1, #1
 8000994:	0a7f      	lsrs	r7, r7, #9
 8000996:	0e24      	lsrs	r4, r4, #24
 8000998:	00f6      	lsls	r6, r6, #3
 800099a:	0025      	movs	r5, r4
 800099c:	4690      	mov	r8, r2
 800099e:	00fb      	lsls	r3, r7, #3
 80009a0:	0e00      	lsrs	r0, r0, #24
 80009a2:	0fc9      	lsrs	r1, r1, #31
 80009a4:	46b1      	mov	r9, r6
 80009a6:	28ff      	cmp	r0, #255	; 0xff
 80009a8:	d100      	bne.n	80009ac <__aeabi_fsub+0x30>
 80009aa:	e085      	b.n	8000ab8 <__aeabi_fsub+0x13c>
 80009ac:	2601      	movs	r6, #1
 80009ae:	4071      	eors	r1, r6
 80009b0:	1a26      	subs	r6, r4, r0
 80009b2:	4291      	cmp	r1, r2
 80009b4:	d057      	beq.n	8000a66 <__aeabi_fsub+0xea>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	dd43      	ble.n	8000a42 <__aeabi_fsub+0xc6>
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fsub+0x44>
 80009be:	e07f      	b.n	8000ac0 <__aeabi_fsub+0x144>
 80009c0:	4649      	mov	r1, r9
 80009c2:	2900      	cmp	r1, #0
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fsub+0x4c>
 80009c6:	e0aa      	b.n	8000b1e <__aeabi_fsub+0x1a2>
 80009c8:	3e01      	subs	r6, #1
 80009ca:	2e00      	cmp	r6, #0
 80009cc:	d000      	beq.n	80009d0 <__aeabi_fsub+0x54>
 80009ce:	e0f7      	b.n	8000bc0 <__aeabi_fsub+0x244>
 80009d0:	1a5b      	subs	r3, r3, r1
 80009d2:	015a      	lsls	r2, r3, #5
 80009d4:	d400      	bmi.n	80009d8 <__aeabi_fsub+0x5c>
 80009d6:	e08b      	b.n	8000af0 <__aeabi_fsub+0x174>
 80009d8:	019b      	lsls	r3, r3, #6
 80009da:	099c      	lsrs	r4, r3, #6
 80009dc:	0020      	movs	r0, r4
 80009de:	f000 f991 	bl	8000d04 <__clzsi2>
 80009e2:	3805      	subs	r0, #5
 80009e4:	4084      	lsls	r4, r0
 80009e6:	4285      	cmp	r5, r0
 80009e8:	dd00      	ble.n	80009ec <__aeabi_fsub+0x70>
 80009ea:	e0d3      	b.n	8000b94 <__aeabi_fsub+0x218>
 80009ec:	1b45      	subs	r5, r0, r5
 80009ee:	0023      	movs	r3, r4
 80009f0:	2020      	movs	r0, #32
 80009f2:	3501      	adds	r5, #1
 80009f4:	40eb      	lsrs	r3, r5
 80009f6:	1b45      	subs	r5, r0, r5
 80009f8:	40ac      	lsls	r4, r5
 80009fa:	1e62      	subs	r2, r4, #1
 80009fc:	4194      	sbcs	r4, r2
 80009fe:	4323      	orrs	r3, r4
 8000a00:	2407      	movs	r4, #7
 8000a02:	2500      	movs	r5, #0
 8000a04:	401c      	ands	r4, r3
 8000a06:	2201      	movs	r2, #1
 8000a08:	4641      	mov	r1, r8
 8000a0a:	400a      	ands	r2, r1
 8000a0c:	2c00      	cmp	r4, #0
 8000a0e:	d004      	beq.n	8000a1a <__aeabi_fsub+0x9e>
 8000a10:	210f      	movs	r1, #15
 8000a12:	4019      	ands	r1, r3
 8000a14:	2904      	cmp	r1, #4
 8000a16:	d000      	beq.n	8000a1a <__aeabi_fsub+0x9e>
 8000a18:	3304      	adds	r3, #4
 8000a1a:	0159      	lsls	r1, r3, #5
 8000a1c:	d400      	bmi.n	8000a20 <__aeabi_fsub+0xa4>
 8000a1e:	e080      	b.n	8000b22 <__aeabi_fsub+0x1a6>
 8000a20:	3501      	adds	r5, #1
 8000a22:	b2ec      	uxtb	r4, r5
 8000a24:	2dff      	cmp	r5, #255	; 0xff
 8000a26:	d000      	beq.n	8000a2a <__aeabi_fsub+0xae>
 8000a28:	e0a3      	b.n	8000b72 <__aeabi_fsub+0x1f6>
 8000a2a:	24ff      	movs	r4, #255	; 0xff
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	025b      	lsls	r3, r3, #9
 8000a30:	05e4      	lsls	r4, r4, #23
 8000a32:	0a58      	lsrs	r0, r3, #9
 8000a34:	07d2      	lsls	r2, r2, #31
 8000a36:	4320      	orrs	r0, r4
 8000a38:	4310      	orrs	r0, r2
 8000a3a:	bc0c      	pop	{r2, r3}
 8000a3c:	4690      	mov	r8, r2
 8000a3e:	4699      	mov	r9, r3
 8000a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d174      	bne.n	8000b30 <__aeabi_fsub+0x1b4>
 8000a46:	1c60      	adds	r0, r4, #1
 8000a48:	b2c0      	uxtb	r0, r0
 8000a4a:	2801      	cmp	r0, #1
 8000a4c:	dc00      	bgt.n	8000a50 <__aeabi_fsub+0xd4>
 8000a4e:	e0a7      	b.n	8000ba0 <__aeabi_fsub+0x224>
 8000a50:	464a      	mov	r2, r9
 8000a52:	1a9c      	subs	r4, r3, r2
 8000a54:	0162      	lsls	r2, r4, #5
 8000a56:	d500      	bpl.n	8000a5a <__aeabi_fsub+0xde>
 8000a58:	e0b6      	b.n	8000bc8 <__aeabi_fsub+0x24c>
 8000a5a:	2c00      	cmp	r4, #0
 8000a5c:	d1be      	bne.n	80009dc <__aeabi_fsub+0x60>
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2400      	movs	r4, #0
 8000a62:	2300      	movs	r3, #0
 8000a64:	e7e3      	b.n	8000a2e <__aeabi_fsub+0xb2>
 8000a66:	2e00      	cmp	r6, #0
 8000a68:	dc00      	bgt.n	8000a6c <__aeabi_fsub+0xf0>
 8000a6a:	e085      	b.n	8000b78 <__aeabi_fsub+0x1fc>
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	d046      	beq.n	8000afe <__aeabi_fsub+0x182>
 8000a70:	2cff      	cmp	r4, #255	; 0xff
 8000a72:	d049      	beq.n	8000b08 <__aeabi_fsub+0x18c>
 8000a74:	2280      	movs	r2, #128	; 0x80
 8000a76:	4648      	mov	r0, r9
 8000a78:	04d2      	lsls	r2, r2, #19
 8000a7a:	4310      	orrs	r0, r2
 8000a7c:	4681      	mov	r9, r0
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2e1b      	cmp	r6, #27
 8000a82:	dc09      	bgt.n	8000a98 <__aeabi_fsub+0x11c>
 8000a84:	2020      	movs	r0, #32
 8000a86:	464c      	mov	r4, r9
 8000a88:	1b80      	subs	r0, r0, r6
 8000a8a:	4084      	lsls	r4, r0
 8000a8c:	464a      	mov	r2, r9
 8000a8e:	0020      	movs	r0, r4
 8000a90:	40f2      	lsrs	r2, r6
 8000a92:	1e44      	subs	r4, r0, #1
 8000a94:	41a0      	sbcs	r0, r4
 8000a96:	4302      	orrs	r2, r0
 8000a98:	189b      	adds	r3, r3, r2
 8000a9a:	015a      	lsls	r2, r3, #5
 8000a9c:	d528      	bpl.n	8000af0 <__aeabi_fsub+0x174>
 8000a9e:	3501      	adds	r5, #1
 8000aa0:	2dff      	cmp	r5, #255	; 0xff
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fsub+0x12a>
 8000aa4:	e0a8      	b.n	8000bf8 <__aeabi_fsub+0x27c>
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2407      	movs	r4, #7
 8000aaa:	4994      	ldr	r1, [pc, #592]	; (8000cfc <__aeabi_fsub+0x380>)
 8000aac:	401a      	ands	r2, r3
 8000aae:	085b      	lsrs	r3, r3, #1
 8000ab0:	400b      	ands	r3, r1
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	401c      	ands	r4, r3
 8000ab6:	e7a6      	b.n	8000a06 <__aeabi_fsub+0x8a>
 8000ab8:	2e00      	cmp	r6, #0
 8000aba:	d000      	beq.n	8000abe <__aeabi_fsub+0x142>
 8000abc:	e778      	b.n	80009b0 <__aeabi_fsub+0x34>
 8000abe:	e775      	b.n	80009ac <__aeabi_fsub+0x30>
 8000ac0:	2cff      	cmp	r4, #255	; 0xff
 8000ac2:	d054      	beq.n	8000b6e <__aeabi_fsub+0x1f2>
 8000ac4:	2280      	movs	r2, #128	; 0x80
 8000ac6:	4649      	mov	r1, r9
 8000ac8:	04d2      	lsls	r2, r2, #19
 8000aca:	4311      	orrs	r1, r2
 8000acc:	4689      	mov	r9, r1
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2e1b      	cmp	r6, #27
 8000ad2:	dc09      	bgt.n	8000ae8 <__aeabi_fsub+0x16c>
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	4648      	mov	r0, r9
 8000ad8:	1b89      	subs	r1, r1, r6
 8000ada:	4088      	lsls	r0, r1
 8000adc:	464a      	mov	r2, r9
 8000ade:	0001      	movs	r1, r0
 8000ae0:	40f2      	lsrs	r2, r6
 8000ae2:	1e48      	subs	r0, r1, #1
 8000ae4:	4181      	sbcs	r1, r0
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	1a9b      	subs	r3, r3, r2
 8000aea:	015a      	lsls	r2, r3, #5
 8000aec:	d500      	bpl.n	8000af0 <__aeabi_fsub+0x174>
 8000aee:	e773      	b.n	80009d8 <__aeabi_fsub+0x5c>
 8000af0:	2201      	movs	r2, #1
 8000af2:	4641      	mov	r1, r8
 8000af4:	400a      	ands	r2, r1
 8000af6:	0759      	lsls	r1, r3, #29
 8000af8:	d000      	beq.n	8000afc <__aeabi_fsub+0x180>
 8000afa:	e789      	b.n	8000a10 <__aeabi_fsub+0x94>
 8000afc:	e011      	b.n	8000b22 <__aeabi_fsub+0x1a6>
 8000afe:	4648      	mov	r0, r9
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d158      	bne.n	8000bb6 <__aeabi_fsub+0x23a>
 8000b04:	2cff      	cmp	r4, #255	; 0xff
 8000b06:	d10c      	bne.n	8000b22 <__aeabi_fsub+0x1a6>
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_fsub+0x194>
 8000b0e:	e78c      	b.n	8000a2a <__aeabi_fsub+0xae>
 8000b10:	2080      	movs	r0, #128	; 0x80
 8000b12:	03c0      	lsls	r0, r0, #15
 8000b14:	4303      	orrs	r3, r0
 8000b16:	025b      	lsls	r3, r3, #9
 8000b18:	0a5b      	lsrs	r3, r3, #9
 8000b1a:	24ff      	movs	r4, #255	; 0xff
 8000b1c:	e787      	b.n	8000a2e <__aeabi_fsub+0xb2>
 8000b1e:	2cff      	cmp	r4, #255	; 0xff
 8000b20:	d025      	beq.n	8000b6e <__aeabi_fsub+0x1f2>
 8000b22:	08db      	lsrs	r3, r3, #3
 8000b24:	2dff      	cmp	r5, #255	; 0xff
 8000b26:	d0f0      	beq.n	8000b0a <__aeabi_fsub+0x18e>
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	b2ec      	uxtb	r4, r5
 8000b2e:	e77e      	b.n	8000a2e <__aeabi_fsub+0xb2>
 8000b30:	2c00      	cmp	r4, #0
 8000b32:	d04d      	beq.n	8000bd0 <__aeabi_fsub+0x254>
 8000b34:	28ff      	cmp	r0, #255	; 0xff
 8000b36:	d018      	beq.n	8000b6a <__aeabi_fsub+0x1ee>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	04e4      	lsls	r4, r4, #19
 8000b3c:	4272      	negs	r2, r6
 8000b3e:	4323      	orrs	r3, r4
 8000b40:	2a1b      	cmp	r2, #27
 8000b42:	dd00      	ble.n	8000b46 <__aeabi_fsub+0x1ca>
 8000b44:	e0c4      	b.n	8000cd0 <__aeabi_fsub+0x354>
 8000b46:	001c      	movs	r4, r3
 8000b48:	2520      	movs	r5, #32
 8000b4a:	40d4      	lsrs	r4, r2
 8000b4c:	1aaa      	subs	r2, r5, r2
 8000b4e:	4093      	lsls	r3, r2
 8000b50:	1e5a      	subs	r2, r3, #1
 8000b52:	4193      	sbcs	r3, r2
 8000b54:	4323      	orrs	r3, r4
 8000b56:	464a      	mov	r2, r9
 8000b58:	0005      	movs	r5, r0
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	4688      	mov	r8, r1
 8000b5e:	e738      	b.n	80009d2 <__aeabi_fsub+0x56>
 8000b60:	1c72      	adds	r2, r6, #1
 8000b62:	d0f8      	beq.n	8000b56 <__aeabi_fsub+0x1da>
 8000b64:	43f2      	mvns	r2, r6
 8000b66:	28ff      	cmp	r0, #255	; 0xff
 8000b68:	d1ea      	bne.n	8000b40 <__aeabi_fsub+0x1c4>
 8000b6a:	000a      	movs	r2, r1
 8000b6c:	464b      	mov	r3, r9
 8000b6e:	25ff      	movs	r5, #255	; 0xff
 8000b70:	e7d7      	b.n	8000b22 <__aeabi_fsub+0x1a6>
 8000b72:	019b      	lsls	r3, r3, #6
 8000b74:	0a5b      	lsrs	r3, r3, #9
 8000b76:	e75a      	b.n	8000a2e <__aeabi_fsub+0xb2>
 8000b78:	2e00      	cmp	r6, #0
 8000b7a:	d141      	bne.n	8000c00 <__aeabi_fsub+0x284>
 8000b7c:	1c65      	adds	r5, r4, #1
 8000b7e:	b2e9      	uxtb	r1, r5
 8000b80:	2901      	cmp	r1, #1
 8000b82:	dd45      	ble.n	8000c10 <__aeabi_fsub+0x294>
 8000b84:	2dff      	cmp	r5, #255	; 0xff
 8000b86:	d100      	bne.n	8000b8a <__aeabi_fsub+0x20e>
 8000b88:	e74f      	b.n	8000a2a <__aeabi_fsub+0xae>
 8000b8a:	2407      	movs	r4, #7
 8000b8c:	444b      	add	r3, r9
 8000b8e:	085b      	lsrs	r3, r3, #1
 8000b90:	401c      	ands	r4, r3
 8000b92:	e738      	b.n	8000a06 <__aeabi_fsub+0x8a>
 8000b94:	2207      	movs	r2, #7
 8000b96:	4b5a      	ldr	r3, [pc, #360]	; (8000d00 <__aeabi_fsub+0x384>)
 8000b98:	1a2d      	subs	r5, r5, r0
 8000b9a:	4023      	ands	r3, r4
 8000b9c:	4014      	ands	r4, r2
 8000b9e:	e732      	b.n	8000a06 <__aeabi_fsub+0x8a>
 8000ba0:	2c00      	cmp	r4, #0
 8000ba2:	d11d      	bne.n	8000be0 <__aeabi_fsub+0x264>
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d17a      	bne.n	8000c9e <__aeabi_fsub+0x322>
 8000ba8:	464b      	mov	r3, r9
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_fsub+0x234>
 8000bae:	e091      	b.n	8000cd4 <__aeabi_fsub+0x358>
 8000bb0:	000a      	movs	r2, r1
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	e7b5      	b.n	8000b22 <__aeabi_fsub+0x1a6>
 8000bb6:	3e01      	subs	r6, #1
 8000bb8:	2e00      	cmp	r6, #0
 8000bba:	d119      	bne.n	8000bf0 <__aeabi_fsub+0x274>
 8000bbc:	444b      	add	r3, r9
 8000bbe:	e76c      	b.n	8000a9a <__aeabi_fsub+0x11e>
 8000bc0:	2cff      	cmp	r4, #255	; 0xff
 8000bc2:	d184      	bne.n	8000ace <__aeabi_fsub+0x152>
 8000bc4:	25ff      	movs	r5, #255	; 0xff
 8000bc6:	e7ac      	b.n	8000b22 <__aeabi_fsub+0x1a6>
 8000bc8:	464a      	mov	r2, r9
 8000bca:	4688      	mov	r8, r1
 8000bcc:	1ad4      	subs	r4, r2, r3
 8000bce:	e705      	b.n	80009dc <__aeabi_fsub+0x60>
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1c5      	bne.n	8000b60 <__aeabi_fsub+0x1e4>
 8000bd4:	000a      	movs	r2, r1
 8000bd6:	28ff      	cmp	r0, #255	; 0xff
 8000bd8:	d0c8      	beq.n	8000b6c <__aeabi_fsub+0x1f0>
 8000bda:	0005      	movs	r5, r0
 8000bdc:	464b      	mov	r3, r9
 8000bde:	e7a0      	b.n	8000b22 <__aeabi_fsub+0x1a6>
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d149      	bne.n	8000c78 <__aeabi_fsub+0x2fc>
 8000be4:	464b      	mov	r3, r9
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d077      	beq.n	8000cda <__aeabi_fsub+0x35e>
 8000bea:	000a      	movs	r2, r1
 8000bec:	25ff      	movs	r5, #255	; 0xff
 8000bee:	e798      	b.n	8000b22 <__aeabi_fsub+0x1a6>
 8000bf0:	2cff      	cmp	r4, #255	; 0xff
 8000bf2:	d000      	beq.n	8000bf6 <__aeabi_fsub+0x27a>
 8000bf4:	e743      	b.n	8000a7e <__aeabi_fsub+0x102>
 8000bf6:	e787      	b.n	8000b08 <__aeabi_fsub+0x18c>
 8000bf8:	000a      	movs	r2, r1
 8000bfa:	24ff      	movs	r4, #255	; 0xff
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e716      	b.n	8000a2e <__aeabi_fsub+0xb2>
 8000c00:	2c00      	cmp	r4, #0
 8000c02:	d115      	bne.n	8000c30 <__aeabi_fsub+0x2b4>
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d157      	bne.n	8000cb8 <__aeabi_fsub+0x33c>
 8000c08:	28ff      	cmp	r0, #255	; 0xff
 8000c0a:	d1e6      	bne.n	8000bda <__aeabi_fsub+0x25e>
 8000c0c:	464b      	mov	r3, r9
 8000c0e:	e77b      	b.n	8000b08 <__aeabi_fsub+0x18c>
 8000c10:	2c00      	cmp	r4, #0
 8000c12:	d120      	bne.n	8000c56 <__aeabi_fsub+0x2da>
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d057      	beq.n	8000cc8 <__aeabi_fsub+0x34c>
 8000c18:	4649      	mov	r1, r9
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d053      	beq.n	8000cc6 <__aeabi_fsub+0x34a>
 8000c1e:	444b      	add	r3, r9
 8000c20:	015a      	lsls	r2, r3, #5
 8000c22:	d568      	bpl.n	8000cf6 <__aeabi_fsub+0x37a>
 8000c24:	2407      	movs	r4, #7
 8000c26:	4a36      	ldr	r2, [pc, #216]	; (8000d00 <__aeabi_fsub+0x384>)
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2501      	movs	r5, #1
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	e6ea      	b.n	8000a06 <__aeabi_fsub+0x8a>
 8000c30:	28ff      	cmp	r0, #255	; 0xff
 8000c32:	d0eb      	beq.n	8000c0c <__aeabi_fsub+0x290>
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	04d2      	lsls	r2, r2, #19
 8000c38:	4276      	negs	r6, r6
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	2e1b      	cmp	r6, #27
 8000c3e:	dc53      	bgt.n	8000ce8 <__aeabi_fsub+0x36c>
 8000c40:	2520      	movs	r5, #32
 8000c42:	1bad      	subs	r5, r5, r6
 8000c44:	001a      	movs	r2, r3
 8000c46:	40ab      	lsls	r3, r5
 8000c48:	40f2      	lsrs	r2, r6
 8000c4a:	1e5c      	subs	r4, r3, #1
 8000c4c:	41a3      	sbcs	r3, r4
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	444b      	add	r3, r9
 8000c52:	0005      	movs	r5, r0
 8000c54:	e721      	b.n	8000a9a <__aeabi_fsub+0x11e>
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0d8      	beq.n	8000c0c <__aeabi_fsub+0x290>
 8000c5a:	4649      	mov	r1, r9
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_fsub+0x2e6>
 8000c60:	e752      	b.n	8000b08 <__aeabi_fsub+0x18c>
 8000c62:	2180      	movs	r1, #128	; 0x80
 8000c64:	03c9      	lsls	r1, r1, #15
 8000c66:	420f      	tst	r7, r1
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fsub+0x2f0>
 8000c6a:	e74d      	b.n	8000b08 <__aeabi_fsub+0x18c>
 8000c6c:	4660      	mov	r0, ip
 8000c6e:	4208      	tst	r0, r1
 8000c70:	d000      	beq.n	8000c74 <__aeabi_fsub+0x2f8>
 8000c72:	e749      	b.n	8000b08 <__aeabi_fsub+0x18c>
 8000c74:	464b      	mov	r3, r9
 8000c76:	e747      	b.n	8000b08 <__aeabi_fsub+0x18c>
 8000c78:	4648      	mov	r0, r9
 8000c7a:	25ff      	movs	r5, #255	; 0xff
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_fsub+0x306>
 8000c80:	e74f      	b.n	8000b22 <__aeabi_fsub+0x1a6>
 8000c82:	2280      	movs	r2, #128	; 0x80
 8000c84:	03d2      	lsls	r2, r2, #15
 8000c86:	4217      	tst	r7, r2
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fsub+0x318>
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	4210      	tst	r0, r2
 8000c8e:	d101      	bne.n	8000c94 <__aeabi_fsub+0x318>
 8000c90:	464b      	mov	r3, r9
 8000c92:	4688      	mov	r8, r1
 8000c94:	2201      	movs	r2, #1
 8000c96:	4641      	mov	r1, r8
 8000c98:	25ff      	movs	r5, #255	; 0xff
 8000c9a:	400a      	ands	r2, r1
 8000c9c:	e741      	b.n	8000b22 <__aeabi_fsub+0x1a6>
 8000c9e:	4648      	mov	r0, r9
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d01f      	beq.n	8000ce4 <__aeabi_fsub+0x368>
 8000ca4:	1a1a      	subs	r2, r3, r0
 8000ca6:	0150      	lsls	r0, r2, #5
 8000ca8:	d520      	bpl.n	8000cec <__aeabi_fsub+0x370>
 8000caa:	464a      	mov	r2, r9
 8000cac:	2407      	movs	r4, #7
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	401c      	ands	r4, r3
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	2500      	movs	r5, #0
 8000cb6:	e6a6      	b.n	8000a06 <__aeabi_fsub+0x8a>
 8000cb8:	1c74      	adds	r4, r6, #1
 8000cba:	d0c9      	beq.n	8000c50 <__aeabi_fsub+0x2d4>
 8000cbc:	43f6      	mvns	r6, r6
 8000cbe:	28ff      	cmp	r0, #255	; 0xff
 8000cc0:	d1bc      	bne.n	8000c3c <__aeabi_fsub+0x2c0>
 8000cc2:	464b      	mov	r3, r9
 8000cc4:	e720      	b.n	8000b08 <__aeabi_fsub+0x18c>
 8000cc6:	4699      	mov	r9, r3
 8000cc8:	464b      	mov	r3, r9
 8000cca:	2500      	movs	r5, #0
 8000ccc:	08db      	lsrs	r3, r3, #3
 8000cce:	e72b      	b.n	8000b28 <__aeabi_fsub+0x1ac>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e740      	b.n	8000b56 <__aeabi_fsub+0x1da>
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e6a9      	b.n	8000a2e <__aeabi_fsub+0xb2>
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	2200      	movs	r2, #0
 8000cde:	03db      	lsls	r3, r3, #15
 8000ce0:	24ff      	movs	r4, #255	; 0xff
 8000ce2:	e6a4      	b.n	8000a2e <__aeabi_fsub+0xb2>
 8000ce4:	2500      	movs	r5, #0
 8000ce6:	e71c      	b.n	8000b22 <__aeabi_fsub+0x1a6>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e7b1      	b.n	8000c50 <__aeabi_fsub+0x2d4>
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	d0f1      	beq.n	8000cd4 <__aeabi_fsub+0x358>
 8000cf0:	0013      	movs	r3, r2
 8000cf2:	2500      	movs	r5, #0
 8000cf4:	e6fc      	b.n	8000af0 <__aeabi_fsub+0x174>
 8000cf6:	2500      	movs	r5, #0
 8000cf8:	e6fa      	b.n	8000af0 <__aeabi_fsub+0x174>
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	7dffffff 	.word	0x7dffffff
 8000d00:	fbffffff 	.word	0xfbffffff

08000d04 <__clzsi2>:
 8000d04:	211c      	movs	r1, #28
 8000d06:	2301      	movs	r3, #1
 8000d08:	041b      	lsls	r3, r3, #16
 8000d0a:	4298      	cmp	r0, r3
 8000d0c:	d301      	bcc.n	8000d12 <__clzsi2+0xe>
 8000d0e:	0c00      	lsrs	r0, r0, #16
 8000d10:	3910      	subs	r1, #16
 8000d12:	0a1b      	lsrs	r3, r3, #8
 8000d14:	4298      	cmp	r0, r3
 8000d16:	d301      	bcc.n	8000d1c <__clzsi2+0x18>
 8000d18:	0a00      	lsrs	r0, r0, #8
 8000d1a:	3908      	subs	r1, #8
 8000d1c:	091b      	lsrs	r3, r3, #4
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d301      	bcc.n	8000d26 <__clzsi2+0x22>
 8000d22:	0900      	lsrs	r0, r0, #4
 8000d24:	3904      	subs	r1, #4
 8000d26:	a202      	add	r2, pc, #8	; (adr r2, 8000d30 <__clzsi2+0x2c>)
 8000d28:	5c10      	ldrb	r0, [r2, r0]
 8000d2a:	1840      	adds	r0, r0, r1
 8000d2c:	4770      	bx	lr
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	02020304 	.word	0x02020304
 8000d34:	01010101 	.word	0x01010101
	...

08000d40 <__clzdi2>:
 8000d40:	b510      	push	{r4, lr}
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d103      	bne.n	8000d4e <__clzdi2+0xe>
 8000d46:	f7ff ffdd 	bl	8000d04 <__clzsi2>
 8000d4a:	3020      	adds	r0, #32
 8000d4c:	e002      	b.n	8000d54 <__clzdi2+0x14>
 8000d4e:	1c08      	adds	r0, r1, #0
 8000d50:	f7ff ffd8 	bl	8000d04 <__clzsi2>
 8000d54:	bd10      	pop	{r4, pc}
 8000d56:	46c0      	nop			; (mov r8, r8)

08000d58 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_Init+0x3c>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_Init+0x3c>)
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d70:	2000      	movs	r0, #0
 8000d72:	f000 f811 	bl	8000d98 <HAL_InitTick>
 8000d76:	1e03      	subs	r3, r0, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	701a      	strb	r2, [r3, #0]
 8000d80:	e001      	b.n	8000d86 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d82:	f004 f8fd 	bl	8004f80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
}
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	40022000 	.word	0x40022000

08000d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da0:	230f      	movs	r3, #15
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_InitTick+0x50>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	23fa      	movs	r3, #250	; 0xfa
 8000dae:	0099      	lsls	r1, r3, #2
 8000db0:	0010      	movs	r0, r2
 8000db2:	f7ff f9a9 	bl	8000108 <__udivsi3>
 8000db6:	0003      	movs	r3, r0
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 fc16 	bl	80015ea <HAL_SYSTICK_Config>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d004      	beq.n	8000dcc <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000dc2:	230f      	movs	r3, #15
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	e006      	b.n	8000dda <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	2301      	movs	r3, #1
 8000dd0:	425b      	negs	r3, r3
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f000 fbe3 	bl	80015a0 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000dda:	230f      	movs	r3, #15
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	781b      	ldrb	r3, [r3, #0]
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b004      	add	sp, #16
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000000 	.word	0x20000000

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  uwTick++;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_IncTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <HAL_IncTick+0x14>)
 8000df8:	601a      	str	r2, [r3, #0]
}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200000bc 	.word	0x200000bc

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b02      	ldr	r3, [pc, #8]	; (8000e14 <HAL_GetTick+0x10>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	200000bc 	.word	0x200000bc

08000e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff fff0 	bl	8000e04 <HAL_GetTick>
 8000e24:	0003      	movs	r3, r0
 8000e26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	d002      	beq.n	8000e38 <HAL_Delay+0x20>
  {
    wait++;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	3301      	adds	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	f7ff ffe3 	bl	8000e04 <HAL_GetTick>
 8000e3e:	0002      	movs	r2, r0
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d8f7      	bhi.n	8000e3a <HAL_Delay+0x22>
  {
  }
}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b004      	add	sp, #16
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e159      	b.n	800111a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10a      	bne.n	8000e84 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2250      	movs	r2, #80	; 0x50
 8000e78:	2100      	movs	r1, #0
 8000e7a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f004 f892 	bl	8004fa8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e88:	2210      	movs	r2, #16
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	2b10      	cmp	r3, #16
 8000e8e:	d005      	beq.n	8000e9c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	2204      	movs	r2, #4
 8000e98:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e9a:	d00b      	beq.n	8000eb4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ea0:	2210      	movs	r2, #16
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2250      	movs	r2, #80	; 0x50
 8000eac:	2100      	movs	r1, #0
 8000eae:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e132      	b.n	800111a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eb8:	4a9a      	ldr	r2, [pc, #616]	; (8001124 <HAL_ADC_Init+0x2d0>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2203      	movs	r2, #3
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d108      	bne.n	8000ee4 <HAL_ADC_Init+0x90>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4013      	ands	r3, r2
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d101      	bne.n	8000ee4 <HAL_ADC_Init+0x90>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <HAL_ADC_Init+0x92>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d149      	bne.n	8000f7e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	23c0      	movs	r3, #192	; 0xc0
 8000ef0:	061b      	lsls	r3, r3, #24
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d00b      	beq.n	8000f0e <HAL_ADC_Init+0xba>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	05db      	lsls	r3, r3, #23
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d005      	beq.n	8000f0e <HAL_ADC_Init+0xba>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	061b      	lsls	r3, r3, #24
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d111      	bne.n	8000f32 <HAL_ADC_Init+0xde>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	0892      	lsrs	r2, r2, #2
 8000f1c:	611a      	str	r2, [r3, #16]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6919      	ldr	r1, [r3, #16]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	611a      	str	r2, [r3, #16]
 8000f30:	e014      	b.n	8000f5c <HAL_ADC_Init+0x108>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	0092      	lsls	r2, r2, #2
 8000f3e:	0892      	lsrs	r2, r2, #2
 8000f40:	611a      	str	r2, [r3, #16]
 8000f42:	4b79      	ldr	r3, [pc, #484]	; (8001128 <HAL_ADC_Init+0x2d4>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4b78      	ldr	r3, [pc, #480]	; (8001128 <HAL_ADC_Init+0x2d4>)
 8000f48:	4978      	ldr	r1, [pc, #480]	; (800112c <HAL_ADC_Init+0x2d8>)
 8000f4a:	400a      	ands	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	4b76      	ldr	r3, [pc, #472]	; (8001128 <HAL_ADC_Init+0x2d4>)
 8000f50:	6819      	ldr	r1, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	4b74      	ldr	r3, [pc, #464]	; (8001128 <HAL_ADC_Init+0x2d4>)
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2118      	movs	r1, #24
 8000f68:	438a      	bics	r2, r1
 8000f6a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	68d9      	ldr	r1, [r3, #12]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000f7e:	4b6a      	ldr	r3, [pc, #424]	; (8001128 <HAL_ADC_Init+0x2d4>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b69      	ldr	r3, [pc, #420]	; (8001128 <HAL_ADC_Init+0x2d4>)
 8000f84:	496a      	ldr	r1, [pc, #424]	; (8001130 <HAL_ADC_Init+0x2dc>)
 8000f86:	400a      	ands	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000f8a:	4b67      	ldr	r3, [pc, #412]	; (8001128 <HAL_ADC_Init+0x2d4>)
 8000f8c:	6819      	ldr	r1, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f92:	065a      	lsls	r2, r3, #25
 8000f94:	4b64      	ldr	r3, [pc, #400]	; (8001128 <HAL_ADC_Init+0x2d4>)
 8000f96:	430a      	orrs	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	055b      	lsls	r3, r3, #21
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d108      	bne.n	8000fba <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2180      	movs	r1, #128	; 0x80
 8000fb4:	0549      	lsls	r1, r1, #21
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	495b      	ldr	r1, [pc, #364]	; (8001134 <HAL_ADC_Init+0x2e0>)
 8000fc6:	400a      	ands	r2, r1
 8000fc8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68d9      	ldr	r1, [r3, #12]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d101      	bne.n	8000fe0 <HAL_ADC_Init+0x18c>
 8000fdc:	2304      	movs	r3, #4
 8000fde:	e000      	b.n	8000fe2 <HAL_ADC_Init+0x18e>
 8000fe0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000fe2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2020      	movs	r0, #32
 8000fe8:	5c1b      	ldrb	r3, [r3, r0]
 8000fea:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000fec:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	202c      	movs	r0, #44	; 0x2c
 8000ff2:	5c1b      	ldrb	r3, [r3, r0]
 8000ff4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ff6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ffc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001004:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800100c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800101a:	23c2      	movs	r3, #194	; 0xc2
 800101c:	33ff      	adds	r3, #255	; 0xff
 800101e:	429a      	cmp	r2, r3
 8001020:	d00b      	beq.n	800103a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68d9      	ldr	r1, [r3, #12]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001030:	431a      	orrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2221      	movs	r2, #33	; 0x21
 800103e:	5c9b      	ldrb	r3, [r3, r2]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d11a      	bne.n	800107a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2220      	movs	r2, #32
 8001048:	5c9b      	ldrb	r3, [r3, r2]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d109      	bne.n	8001062 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68da      	ldr	r2, [r3, #12]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2180      	movs	r1, #128	; 0x80
 800105a:	0249      	lsls	r1, r1, #9
 800105c:	430a      	orrs	r2, r1
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	e00b      	b.n	800107a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001066:	2220      	movs	r2, #32
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	2201      	movs	r2, #1
 8001074:	431a      	orrs	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800107e:	2b01      	cmp	r3, #1
 8001080:	d11f      	bne.n	80010c2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	492a      	ldr	r1, [pc, #168]	; (8001138 <HAL_ADC_Init+0x2e4>)
 800108e:	400a      	ands	r2, r1
 8001090:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6919      	ldr	r1, [r3, #16]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80010a0:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80010a6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	691a      	ldr	r2, [r3, #16]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2101      	movs	r1, #1
 80010bc:	430a      	orrs	r2, r1
 80010be:	611a      	str	r2, [r3, #16]
 80010c0:	e00e      	b.n	80010e0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	2201      	movs	r2, #1
 80010ca:	4013      	ands	r3, r2
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d107      	bne.n	80010e0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	691a      	ldr	r2, [r3, #16]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2101      	movs	r1, #1
 80010dc:	438a      	bics	r2, r1
 80010de:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	695a      	ldr	r2, [r3, #20]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2107      	movs	r1, #7
 80010ec:	438a      	bics	r2, r1
 80010ee:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6959      	ldr	r1, [r3, #20]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	430a      	orrs	r2, r1
 8001100:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800110c:	2203      	movs	r2, #3
 800110e:	4393      	bics	r3, r2
 8001110:	2201      	movs	r2, #1
 8001112:	431a      	orrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	0018      	movs	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	fffffefd 	.word	0xfffffefd
 8001128:	40012708 	.word	0x40012708
 800112c:	ffc3ffff 	.word	0xffc3ffff
 8001130:	fdffffff 	.word	0xfdffffff
 8001134:	fffe0219 	.word	0xfffe0219
 8001138:	fffffc03 	.word	0xfffffc03

0800113c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2204      	movs	r2, #4
 800114c:	4013      	ands	r3, r2
 800114e:	2b04      	cmp	r3, #4
 8001150:	d106      	bne.n	8001160 <HAL_ADC_IRQHandler+0x24>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2204      	movs	r2, #4
 800115a:	4013      	ands	r3, r2
 800115c:	2b04      	cmp	r3, #4
 800115e:	d00d      	beq.n	800117c <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2208      	movs	r2, #8
 8001168:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800116a:	2b08      	cmp	r3, #8
 800116c:	d154      	bne.n	8001218 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2208      	movs	r2, #8
 8001176:	4013      	ands	r3, r2
 8001178:	2b08      	cmp	r3, #8
 800117a:	d14d      	bne.n	8001218 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001180:	2210      	movs	r2, #16
 8001182:	4013      	ands	r3, r2
 8001184:	d106      	bne.n	8001194 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800118a:	2280      	movs	r2, #128	; 0x80
 800118c:	0092      	lsls	r2, r2, #2
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	23c0      	movs	r3, #192	; 0xc0
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	4013      	ands	r3, r2
 80011a0:	d12e      	bne.n	8001200 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2220      	movs	r2, #32
 80011a6:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d129      	bne.n	8001200 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2208      	movs	r2, #8
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d122      	bne.n	8001200 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	2204      	movs	r2, #4
 80011c2:	4013      	ands	r3, r2
 80011c4:	d110      	bne.n	80011e8 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	210c      	movs	r1, #12
 80011d2:	438a      	bics	r2, r1
 80011d4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011da:	4a35      	ldr	r2, [pc, #212]	; (80012b0 <HAL_ADC_IRQHandler+0x174>)
 80011dc:	4013      	ands	r3, r2
 80011de:	2201      	movs	r2, #1
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	655a      	str	r2, [r3, #84]	; 0x54
 80011e6:	e00b      	b.n	8001200 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ec:	2220      	movs	r2, #32
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f8:	2201      	movs	r2, #1
 80011fa:	431a      	orrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	0018      	movs	r0, r3
 8001204:	f000 f856 	bl	80012b4 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d003      	beq.n	8001218 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	220c      	movs	r2, #12
 8001216:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	4013      	ands	r3, r2
 8001222:	2b80      	cmp	r3, #128	; 0x80
 8001224:	d115      	bne.n	8001252 <HAL_ADC_IRQHandler+0x116>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2280      	movs	r2, #128	; 0x80
 800122e:	4013      	ands	r3, r2
 8001230:	2b80      	cmp	r3, #128	; 0x80
 8001232:	d10e      	bne.n	8001252 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001238:	2280      	movs	r2, #128	; 0x80
 800123a:	0252      	lsls	r2, r2, #9
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	0018      	movs	r0, r3
 8001246:	f000 f83d 	bl	80012c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2210      	movs	r2, #16
 800125a:	4013      	ands	r3, r2
 800125c:	2b10      	cmp	r3, #16
 800125e:	d123      	bne.n	80012a8 <HAL_ADC_IRQHandler+0x16c>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2210      	movs	r2, #16
 8001268:	4013      	ands	r3, r2
 800126a:	2b10      	cmp	r3, #16
 800126c:	d11c      	bne.n	80012a8 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	2b00      	cmp	r3, #0
 8001274:	d006      	beq.n	8001284 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2201      	movs	r2, #1
 800127e:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001280:	2b01      	cmp	r3, #1
 8001282:	d10d      	bne.n	80012a0 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001288:	2202      	movs	r2, #2
 800128a:	431a      	orrs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2210      	movs	r2, #16
 8001296:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	0018      	movs	r0, r3
 800129c:	f003 fe58 	bl	8004f50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2210      	movs	r2, #16
 80012a6:	601a      	str	r2, [r3, #0]
  }
  
}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b002      	add	sp, #8
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	fffffefe 	.word	0xfffffefe

080012b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	b002      	add	sp, #8
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2250      	movs	r2, #80	; 0x50
 80012e2:	5c9b      	ldrb	r3, [r3, r2]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <HAL_ADC_ConfigChannel+0x18>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e085      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x124>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2250      	movs	r2, #80	; 0x50
 80012f0:	2101      	movs	r1, #1
 80012f2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2204      	movs	r2, #4
 80012fc:	4013      	ands	r3, r2
 80012fe:	d00b      	beq.n	8001318 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001304:	2220      	movs	r2, #32
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2250      	movs	r2, #80	; 0x50
 8001310:	2100      	movs	r1, #0
 8001312:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e06f      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4a38      	ldr	r2, [pc, #224]	; (8001400 <HAL_ADC_ConfigChannel+0x12c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d035      	beq.n	800138e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	035b      	lsls	r3, r3, #13
 800132e:	0b5a      	lsrs	r2, r3, #13
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	02db      	lsls	r3, r3, #11
 8001340:	4013      	ands	r3, r2
 8001342:	d009      	beq.n	8001358 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001344:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <HAL_ADC_ConfigChannel+0x130>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <HAL_ADC_ConfigChannel+0x130>)
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	0409      	lsls	r1, r1, #16
 800134e:	430a      	orrs	r2, r1
 8001350:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001352:	200a      	movs	r0, #10
 8001354:	f000 f85e 	bl	8001414 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	029b      	lsls	r3, r3, #10
 8001360:	4013      	ands	r3, r2
 8001362:	d006      	beq.n	8001372 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001364:	4b27      	ldr	r3, [pc, #156]	; (8001404 <HAL_ADC_ConfigChannel+0x130>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b26      	ldr	r3, [pc, #152]	; (8001404 <HAL_ADC_ConfigChannel+0x130>)
 800136a:	2180      	movs	r1, #128	; 0x80
 800136c:	03c9      	lsls	r1, r1, #15
 800136e:	430a      	orrs	r2, r1
 8001370:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	025b      	lsls	r3, r3, #9
 800137a:	4013      	ands	r3, r2
 800137c:	d037      	beq.n	80013ee <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <HAL_ADC_ConfigChannel+0x130>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <HAL_ADC_ConfigChannel+0x130>)
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	0449      	lsls	r1, r1, #17
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	e02f      	b.n	80013ee <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	035b      	lsls	r3, r3, #13
 800139a:	0b5b      	lsrs	r3, r3, #13
 800139c:	43d9      	mvns	r1, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	400a      	ands	r2, r1
 80013a4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	02db      	lsls	r3, r3, #11
 80013ae:	4013      	ands	r3, r2
 80013b0:	d005      	beq.n	80013be <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <HAL_ADC_ConfigChannel+0x130>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_ADC_ConfigChannel+0x130>)
 80013b8:	4913      	ldr	r1, [pc, #76]	; (8001408 <HAL_ADC_ConfigChannel+0x134>)
 80013ba:	400a      	ands	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	029b      	lsls	r3, r3, #10
 80013c6:	4013      	ands	r3, r2
 80013c8:	d005      	beq.n	80013d6 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_ADC_ConfigChannel+0x130>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_ADC_ConfigChannel+0x130>)
 80013d0:	490e      	ldr	r1, [pc, #56]	; (800140c <HAL_ADC_ConfigChannel+0x138>)
 80013d2:	400a      	ands	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	025b      	lsls	r3, r3, #9
 80013de:	4013      	ands	r3, r2
 80013e0:	d005      	beq.n	80013ee <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_ADC_ConfigChannel+0x130>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <HAL_ADC_ConfigChannel+0x130>)
 80013e8:	4909      	ldr	r1, [pc, #36]	; (8001410 <HAL_ADC_ConfigChannel+0x13c>)
 80013ea:	400a      	ands	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2250      	movs	r2, #80	; 0x50
 80013f2:	2100      	movs	r1, #0
 80013f4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	00001001 	.word	0x00001001
 8001404:	40012708 	.word	0x40012708
 8001408:	ff7fffff 	.word	0xff7fffff
 800140c:	ffbfffff 	.word	0xffbfffff
 8001410:	feffffff 	.word	0xfeffffff

08001414 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <ADC_DelayMicroSecond+0x34>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	490a      	ldr	r1, [pc, #40]	; (800144c <ADC_DelayMicroSecond+0x38>)
 8001422:	0018      	movs	r0, r3
 8001424:	f7fe fe70 	bl	8000108 <__udivsi3>
 8001428:	0003      	movs	r3, r0
 800142a:	001a      	movs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4353      	muls	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001432:	e002      	b.n	800143a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3b01      	subs	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f9      	bne.n	8001434 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b004      	add	sp, #16
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000000 	.word	0x20000000
 800144c:	000f4240 	.word	0x000f4240

08001450 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	0002      	movs	r2, r0
 8001458:	1dfb      	adds	r3, r7, #7
 800145a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800145c:	1dfb      	adds	r3, r7, #7
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	001a      	movs	r2, r3
 8001462:	231f      	movs	r3, #31
 8001464:	401a      	ands	r2, r3
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <NVIC_EnableIRQ+0x28>)
 8001468:	2101      	movs	r1, #1
 800146a:	4091      	lsls	r1, r2
 800146c:	000a      	movs	r2, r1
 800146e:	601a      	str	r2, [r3, #0]
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b002      	add	sp, #8
 8001476:	bd80      	pop	{r7, pc}
 8001478:	e000e100 	.word	0xe000e100

0800147c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	0002      	movs	r2, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800148a:	1dfb      	adds	r3, r7, #7
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b7f      	cmp	r3, #127	; 0x7f
 8001490:	d932      	bls.n	80014f8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001492:	4a2f      	ldr	r2, [pc, #188]	; (8001550 <NVIC_SetPriority+0xd4>)
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	0019      	movs	r1, r3
 800149a:	230f      	movs	r3, #15
 800149c:	400b      	ands	r3, r1
 800149e:	3b08      	subs	r3, #8
 80014a0:	089b      	lsrs	r3, r3, #2
 80014a2:	3306      	adds	r3, #6
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	18d3      	adds	r3, r2, r3
 80014a8:	3304      	adds	r3, #4
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	1dfa      	adds	r2, r7, #7
 80014ae:	7812      	ldrb	r2, [r2, #0]
 80014b0:	0011      	movs	r1, r2
 80014b2:	2203      	movs	r2, #3
 80014b4:	400a      	ands	r2, r1
 80014b6:	00d2      	lsls	r2, r2, #3
 80014b8:	21ff      	movs	r1, #255	; 0xff
 80014ba:	4091      	lsls	r1, r2
 80014bc:	000a      	movs	r2, r1
 80014be:	43d2      	mvns	r2, r2
 80014c0:	401a      	ands	r2, r3
 80014c2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	019b      	lsls	r3, r3, #6
 80014c8:	22ff      	movs	r2, #255	; 0xff
 80014ca:	401a      	ands	r2, r3
 80014cc:	1dfb      	adds	r3, r7, #7
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	0018      	movs	r0, r3
 80014d2:	2303      	movs	r3, #3
 80014d4:	4003      	ands	r3, r0
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014da:	481d      	ldr	r0, [pc, #116]	; (8001550 <NVIC_SetPriority+0xd4>)
 80014dc:	1dfb      	adds	r3, r7, #7
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	001c      	movs	r4, r3
 80014e2:	230f      	movs	r3, #15
 80014e4:	4023      	ands	r3, r4
 80014e6:	3b08      	subs	r3, #8
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	430a      	orrs	r2, r1
 80014ec:	3306      	adds	r3, #6
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	18c3      	adds	r3, r0, r3
 80014f2:	3304      	adds	r3, #4
 80014f4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014f6:	e027      	b.n	8001548 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f8:	4a16      	ldr	r2, [pc, #88]	; (8001554 <NVIC_SetPriority+0xd8>)
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	33c0      	adds	r3, #192	; 0xc0
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	589b      	ldr	r3, [r3, r2]
 8001508:	1dfa      	adds	r2, r7, #7
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	0011      	movs	r1, r2
 800150e:	2203      	movs	r2, #3
 8001510:	400a      	ands	r2, r1
 8001512:	00d2      	lsls	r2, r2, #3
 8001514:	21ff      	movs	r1, #255	; 0xff
 8001516:	4091      	lsls	r1, r2
 8001518:	000a      	movs	r2, r1
 800151a:	43d2      	mvns	r2, r2
 800151c:	401a      	ands	r2, r3
 800151e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	019b      	lsls	r3, r3, #6
 8001524:	22ff      	movs	r2, #255	; 0xff
 8001526:	401a      	ands	r2, r3
 8001528:	1dfb      	adds	r3, r7, #7
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	0018      	movs	r0, r3
 800152e:	2303      	movs	r3, #3
 8001530:	4003      	ands	r3, r0
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <NVIC_SetPriority+0xd8>)
 8001538:	1dfb      	adds	r3, r7, #7
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b25b      	sxtb	r3, r3
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	430a      	orrs	r2, r1
 8001542:	33c0      	adds	r3, #192	; 0xc0
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	501a      	str	r2, [r3, r0]
}
 8001548:	46c0      	nop			; (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	b003      	add	sp, #12
 800154e:	bd90      	pop	{r4, r7, pc}
 8001550:	e000ed00 	.word	0xe000ed00
 8001554:	e000e100 	.word	0xe000e100

08001558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <SysTick_Config+0x40>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156a:	2301      	movs	r3, #1
 800156c:	e010      	b.n	8001590 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <SysTick_Config+0x44>)
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	3a01      	subs	r2, #1
 8001574:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001576:	2301      	movs	r3, #1
 8001578:	425b      	negs	r3, r3
 800157a:	2103      	movs	r1, #3
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff ff7d 	bl	800147c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <SysTick_Config+0x44>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <SysTick_Config+0x44>)
 800158a:	2207      	movs	r2, #7
 800158c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800158e:	2300      	movs	r3, #0
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b002      	add	sp, #8
 8001596:	bd80      	pop	{r7, pc}
 8001598:	00ffffff 	.word	0x00ffffff
 800159c:	e000e010 	.word	0xe000e010

080015a0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	210f      	movs	r1, #15
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	1c02      	adds	r2, r0, #0
 80015b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b25b      	sxtb	r3, r3
 80015ba:	0011      	movs	r1, r2
 80015bc:	0018      	movs	r0, r3
 80015be:	f7ff ff5d 	bl	800147c <NVIC_SetPriority>
}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b004      	add	sp, #16
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	0002      	movs	r2, r0
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff ff37 	bl	8001450 <NVIC_EnableIRQ>
}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b002      	add	sp, #8
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7ff ffaf 	bl	8001558 <SysTick_Config>
 80015fa:	0003      	movs	r3, r0
}
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	b002      	add	sp, #8
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800161a:	e155      	b.n	80018c8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2101      	movs	r1, #1
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	4091      	lsls	r1, r2
 8001626:	000a      	movs	r2, r1
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d100      	bne.n	8001634 <HAL_GPIO_Init+0x30>
 8001632:	e146      	b.n	80018c2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x40>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b12      	cmp	r3, #18
 8001642:	d123      	bne.n	800168c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	08da      	lsrs	r2, r3, #3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3208      	adds	r2, #8
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	58d3      	ldr	r3, [r2, r3]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2207      	movs	r2, #7
 8001656:	4013      	ands	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	409a      	lsls	r2, r3
 800165e:	0013      	movs	r3, r2
 8001660:	43da      	mvns	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2107      	movs	r1, #7
 8001670:	400b      	ands	r3, r1
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	409a      	lsls	r2, r3
 8001676:	0013      	movs	r3, r2
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	08da      	lsrs	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3208      	adds	r2, #8
 8001686:	0092      	lsls	r2, r2, #2
 8001688:	6939      	ldr	r1, [r7, #16]
 800168a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d00b      	beq.n	80016ac <HAL_GPIO_Init+0xa8>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d007      	beq.n	80016ac <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a0:	2b11      	cmp	r3, #17
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b12      	cmp	r3, #18
 80016aa:	d130      	bne.n	800170e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	409a      	lsls	r2, r3
 80016ba:	0013      	movs	r3, r2
 80016bc:	43da      	mvns	r2, r3
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	409a      	lsls	r2, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e2:	2201      	movs	r2, #1
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	43da      	mvns	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	2201      	movs	r2, #1
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	409a      	lsls	r2, r3
 8001700:	0013      	movs	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	43da      	mvns	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2203      	movs	r2, #3
 800172c:	401a      	ands	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	2203      	movs	r2, #3
 800174e:	409a      	lsls	r2, r3
 8001750:	0013      	movs	r3, r2
 8001752:	43da      	mvns	r2, r3
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	409a      	lsls	r2, r3
 8001764:	0013      	movs	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	055b      	lsls	r3, r3, #21
 800177a:	4013      	ands	r3, r2
 800177c:	d100      	bne.n	8001780 <HAL_GPIO_Init+0x17c>
 800177e:	e0a0      	b.n	80018c2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001780:	4b57      	ldr	r3, [pc, #348]	; (80018e0 <HAL_GPIO_Init+0x2dc>)
 8001782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001784:	4b56      	ldr	r3, [pc, #344]	; (80018e0 <HAL_GPIO_Init+0x2dc>)
 8001786:	2101      	movs	r1, #1
 8001788:	430a      	orrs	r2, r1
 800178a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 800178c:	4a55      	ldr	r2, [pc, #340]	; (80018e4 <HAL_GPIO_Init+0x2e0>)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	589b      	ldr	r3, [r3, r2]
 8001798:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2203      	movs	r2, #3
 800179e:	4013      	ands	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	409a      	lsls	r2, r3
 80017a6:	0013      	movs	r3, r2
 80017a8:	43da      	mvns	r2, r3
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	23a0      	movs	r3, #160	; 0xa0
 80017b4:	05db      	lsls	r3, r3, #23
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d01f      	beq.n	80017fa <HAL_GPIO_Init+0x1f6>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4a      	ldr	r2, [pc, #296]	; (80018e8 <HAL_GPIO_Init+0x2e4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d019      	beq.n	80017f6 <HAL_GPIO_Init+0x1f2>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a49      	ldr	r2, [pc, #292]	; (80018ec <HAL_GPIO_Init+0x2e8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_GPIO_Init+0x1ee>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a48      	ldr	r2, [pc, #288]	; (80018f0 <HAL_GPIO_Init+0x2ec>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00d      	beq.n	80017ee <HAL_GPIO_Init+0x1ea>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a47      	ldr	r2, [pc, #284]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d007      	beq.n	80017ea <HAL_GPIO_Init+0x1e6>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a46      	ldr	r2, [pc, #280]	; (80018f8 <HAL_GPIO_Init+0x2f4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d101      	bne.n	80017e6 <HAL_GPIO_Init+0x1e2>
 80017e2:	2305      	movs	r3, #5
 80017e4:	e00a      	b.n	80017fc <HAL_GPIO_Init+0x1f8>
 80017e6:	2306      	movs	r3, #6
 80017e8:	e008      	b.n	80017fc <HAL_GPIO_Init+0x1f8>
 80017ea:	2304      	movs	r3, #4
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x1f8>
 80017ee:	2303      	movs	r3, #3
 80017f0:	e004      	b.n	80017fc <HAL_GPIO_Init+0x1f8>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e002      	b.n	80017fc <HAL_GPIO_Init+0x1f8>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_GPIO_Init+0x1f8>
 80017fa:	2300      	movs	r3, #0
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	2103      	movs	r1, #3
 8001800:	400a      	ands	r2, r1
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	4093      	lsls	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800180c:	4935      	ldr	r1, [pc, #212]	; (80018e4 <HAL_GPIO_Init+0x2e0>)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181a:	4b38      	ldr	r3, [pc, #224]	; (80018fc <HAL_GPIO_Init+0x2f8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	43da      	mvns	r2, r3
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	025b      	lsls	r3, r3, #9
 8001832:	4013      	ands	r3, r2
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800183e:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <HAL_GPIO_Init+0x2f8>)
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001844:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_GPIO_Init+0x2f8>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43da      	mvns	r2, r3
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	029b      	lsls	r3, r3, #10
 800185c:	4013      	ands	r3, r2
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <HAL_GPIO_Init+0x2f8>)
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_GPIO_Init+0x2f8>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43da      	mvns	r2, r3
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	035b      	lsls	r3, r3, #13
 8001886:	4013      	ands	r3, r2
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_GPIO_Init+0x2f8>)
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001898:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_GPIO_Init+0x2f8>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43da      	mvns	r2, r3
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	039b      	lsls	r3, r3, #14
 80018b0:	4013      	ands	r3, r2
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_GPIO_Init+0x2f8>)
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	40da      	lsrs	r2, r3
 80018d0:	1e13      	subs	r3, r2, #0
 80018d2:	d000      	beq.n	80018d6 <HAL_GPIO_Init+0x2d2>
 80018d4:	e6a2      	b.n	800161c <HAL_GPIO_Init+0x18>
  }
}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	46bd      	mov	sp, r7
 80018da:	b006      	add	sp, #24
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010000 	.word	0x40010000
 80018e8:	50000400 	.word	0x50000400
 80018ec:	50000800 	.word	0x50000800
 80018f0:	50000c00 	.word	0x50000c00
 80018f4:	50001000 	.word	0x50001000
 80018f8:	50001c00 	.word	0x50001c00
 80018fc:	40010400 	.word	0x40010400

08001900 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	0008      	movs	r0, r1
 800190a:	0011      	movs	r1, r2
 800190c:	1cbb      	adds	r3, r7, #2
 800190e:	1c02      	adds	r2, r0, #0
 8001910:	801a      	strh	r2, [r3, #0]
 8001912:	1c7b      	adds	r3, r7, #1
 8001914:	1c0a      	adds	r2, r1, #0
 8001916:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001918:	1c7b      	adds	r3, r7, #1
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d004      	beq.n	800192a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001920:	1cbb      	adds	r3, r7, #2
 8001922:	881a      	ldrh	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001928:	e003      	b.n	8001932 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800192a:	1cbb      	adds	r3, r7, #2
 800192c:	881a      	ldrh	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	46bd      	mov	sp, r7
 8001936:	b002      	add	sp, #8
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	0002      	movs	r2, r0
 8001944:	1dbb      	adds	r3, r7, #6
 8001946:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	1dba      	adds	r2, r7, #6
 800194e:	8812      	ldrh	r2, [r2, #0]
 8001950:	4013      	ands	r3, r2
 8001952:	d008      	beq.n	8001966 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001956:	1dba      	adds	r2, r7, #6
 8001958:	8812      	ldrh	r2, [r2, #0]
 800195a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800195c:	1dbb      	adds	r3, r7, #6
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	0018      	movs	r0, r3
 8001962:	f000 f807 	bl	8001974 <HAL_GPIO_EXTI_Callback>
  }
}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	b002      	add	sp, #8
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	40010400 	.word	0x40010400

08001974 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	0002      	movs	r2, r0
 800197c:	1dbb      	adds	r3, r7, #6
 800197e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b002      	add	sp, #8
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d102      	bne.n	800199c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	f000 fbbc 	bl	8002114 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800199c:	4bc8      	ldr	r3, [pc, #800]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	220c      	movs	r2, #12
 80019a2:	4013      	ands	r3, r2
 80019a4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019a6:	4bc6      	ldr	r3, [pc, #792]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	025b      	lsls	r3, r3, #9
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2201      	movs	r2, #1
 80019b8:	4013      	ands	r3, r2
 80019ba:	d100      	bne.n	80019be <HAL_RCC_OscConfig+0x36>
 80019bc:	e07e      	b.n	8001abc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d007      	beq.n	80019d4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d112      	bne.n	80019f0 <HAL_RCC_OscConfig+0x68>
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	025b      	lsls	r3, r3, #9
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d10d      	bne.n	80019f0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	4bba      	ldr	r3, [pc, #744]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	029b      	lsls	r3, r3, #10
 80019dc:	4013      	ands	r3, r2
 80019de:	d100      	bne.n	80019e2 <HAL_RCC_OscConfig+0x5a>
 80019e0:	e06b      	b.n	8001aba <HAL_RCC_OscConfig+0x132>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d167      	bne.n	8001aba <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f000 fb92 	bl	8002114 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	025b      	lsls	r3, r3, #9
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_OscConfig+0x84>
 80019fc:	4bb0      	ldr	r3, [pc, #704]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4baf      	ldr	r3, [pc, #700]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	0249      	lsls	r1, r1, #9
 8001a06:	430a      	orrs	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e027      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	23a0      	movs	r3, #160	; 0xa0
 8001a12:	02db      	lsls	r3, r3, #11
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d10e      	bne.n	8001a36 <HAL_RCC_OscConfig+0xae>
 8001a18:	4ba9      	ldr	r3, [pc, #676]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4ba8      	ldr	r3, [pc, #672]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	02c9      	lsls	r1, r1, #11
 8001a22:	430a      	orrs	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	4ba6      	ldr	r3, [pc, #664]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4ba5      	ldr	r3, [pc, #660]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001a2c:	2180      	movs	r1, #128	; 0x80
 8001a2e:	0249      	lsls	r1, r1, #9
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	e012      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a36:	4ba2      	ldr	r3, [pc, #648]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4ba1      	ldr	r3, [pc, #644]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001a3c:	49a1      	ldr	r1, [pc, #644]	; (8001cc4 <HAL_RCC_OscConfig+0x33c>)
 8001a3e:	400a      	ands	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	4b9f      	ldr	r3, [pc, #636]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	025b      	lsls	r3, r3, #9
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4b9b      	ldr	r3, [pc, #620]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b9a      	ldr	r3, [pc, #616]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001a56:	499c      	ldr	r1, [pc, #624]	; (8001cc8 <HAL_RCC_OscConfig+0x340>)
 8001a58:	400a      	ands	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d015      	beq.n	8001a90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff f9ce 	bl	8000e04 <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a6c:	e009      	b.n	8001a82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a6e:	f7ff f9c9 	bl	8000e04 <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b64      	cmp	r3, #100	; 0x64
 8001a7a:	d902      	bls.n	8001a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	f000 fb49 	bl	8002114 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a82:	4b8f      	ldr	r3, [pc, #572]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	029b      	lsls	r3, r3, #10
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d0ef      	beq.n	8001a6e <HAL_RCC_OscConfig+0xe6>
 8001a8e:	e015      	b.n	8001abc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff f9b8 	bl	8000e04 <HAL_GetTick>
 8001a94:	0003      	movs	r3, r0
 8001a96:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a9a:	f7ff f9b3 	bl	8000e04 <HAL_GetTick>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b64      	cmp	r3, #100	; 0x64
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e333      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001aac:	4b84      	ldr	r3, [pc, #528]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	029b      	lsls	r3, r3, #10
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d1f0      	bne.n	8001a9a <HAL_RCC_OscConfig+0x112>
 8001ab8:	e000      	b.n	8001abc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d100      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x140>
 8001ac6:	e098      	b.n	8001bfa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d009      	beq.n	8001aea <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001ad6:	4b7a      	ldr	r3, [pc, #488]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b79      	ldr	r3, [pc, #484]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001adc:	2120      	movs	r1, #32
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	4393      	bics	r3, r2
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	d13d      	bne.n	8001b72 <HAL_RCC_OscConfig+0x1ea>
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d13a      	bne.n	8001b72 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001afc:	4b70      	ldr	r3, [pc, #448]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2204      	movs	r2, #4
 8001b02:	4013      	ands	r3, r2
 8001b04:	d004      	beq.n	8001b10 <HAL_RCC_OscConfig+0x188>
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e301      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b6b      	ldr	r3, [pc, #428]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4a6d      	ldr	r2, [pc, #436]	; (8001ccc <HAL_RCC_OscConfig+0x344>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	0019      	movs	r1, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	021a      	lsls	r2, r3, #8
 8001b20:	4b67      	ldr	r3, [pc, #412]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001b22:	430a      	orrs	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b26:	4b66      	ldr	r3, [pc, #408]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2209      	movs	r2, #9
 8001b2c:	4393      	bics	r3, r2
 8001b2e:	0019      	movs	r1, r3
 8001b30:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b38:	f000 fc20 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8001b3c:	0001      	movs	r1, r0
 8001b3e:	4b60      	ldr	r3, [pc, #384]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	091b      	lsrs	r3, r3, #4
 8001b44:	220f      	movs	r2, #15
 8001b46:	4013      	ands	r3, r2
 8001b48:	4a61      	ldr	r2, [pc, #388]	; (8001cd0 <HAL_RCC_OscConfig+0x348>)
 8001b4a:	5cd3      	ldrb	r3, [r2, r3]
 8001b4c:	000a      	movs	r2, r1
 8001b4e:	40da      	lsrs	r2, r3
 8001b50:	4b60      	ldr	r3, [pc, #384]	; (8001cd4 <HAL_RCC_OscConfig+0x34c>)
 8001b52:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001b54:	2513      	movs	r5, #19
 8001b56:	197c      	adds	r4, r7, r5
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f7ff f91d 	bl	8000d98 <HAL_InitTick>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001b62:	197b      	adds	r3, r7, r5
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d047      	beq.n	8001bfa <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001b6a:	2313      	movs	r3, #19
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	e2d0      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d027      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b78:	4b51      	ldr	r3, [pc, #324]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2209      	movs	r2, #9
 8001b7e:	4393      	bics	r3, r2
 8001b80:	0019      	movs	r1, r3
 8001b82:	4b4f      	ldr	r3, [pc, #316]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b86:	430a      	orrs	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7ff f93b 	bl	8000e04 <HAL_GetTick>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b94:	f7ff f936 	bl	8000e04 <HAL_GetTick>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e2b6      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ba6:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2204      	movs	r2, #4
 8001bac:	4013      	ands	r3, r2
 8001bae:	d0f1      	beq.n	8001b94 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb0:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4a45      	ldr	r2, [pc, #276]	; (8001ccc <HAL_RCC_OscConfig+0x344>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	0019      	movs	r1, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	021a      	lsls	r2, r3, #8
 8001bc0:	4b3f      	ldr	r3, [pc, #252]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	e018      	b.n	8001bfa <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc8:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001bce:	2101      	movs	r1, #1
 8001bd0:	438a      	bics	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f916 	bl	8000e04 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bde:	f7ff f911 	bl	8000e04 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e291      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bf0:	4b33      	ldr	r3, [pc, #204]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d1f1      	bne.n	8001bde <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2210      	movs	r2, #16
 8001c00:	4013      	ands	r3, r2
 8001c02:	d100      	bne.n	8001c06 <HAL_RCC_OscConfig+0x27e>
 8001c04:	e09f      	b.n	8001d46 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d13f      	bne.n	8001c8c <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c0c:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4013      	ands	r3, r2
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_OscConfig+0x29c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e277      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a2b      	ldr	r2, [pc, #172]	; (8001cd8 <HAL_RCC_OscConfig+0x350>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001c34:	430a      	orrs	r2, r1
 8001c36:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c38:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	0a19      	lsrs	r1, r3, #8
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	061a      	lsls	r2, r3, #24
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	0b5b      	lsrs	r3, r3, #13
 8001c52:	3301      	adds	r3, #1
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	0212      	lsls	r2, r2, #8
 8001c58:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	210f      	movs	r1, #15
 8001c62:	400b      	ands	r3, r1
 8001c64:	491a      	ldr	r1, [pc, #104]	; (8001cd0 <HAL_RCC_OscConfig+0x348>)
 8001c66:	5ccb      	ldrb	r3, [r1, r3]
 8001c68:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_RCC_OscConfig+0x34c>)
 8001c6c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001c6e:	2513      	movs	r5, #19
 8001c70:	197c      	adds	r4, r7, r5
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff f890 	bl	8000d98 <HAL_InitTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001c7c:	197b      	adds	r3, r7, r5
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d060      	beq.n	8001d46 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001c84:	2313      	movs	r3, #19
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	e243      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d03e      	beq.n	8001d12 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_RCC_OscConfig+0x338>)
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	0049      	lsls	r1, r1, #1
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff f8af 	bl	8000e04 <HAL_GetTick>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001caa:	e017      	b.n	8001cdc <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cac:	f7ff f8aa 	bl	8000e04 <HAL_GetTick>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d910      	bls.n	8001cdc <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e22a      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	fffeffff 	.word	0xfffeffff
 8001cc8:	fffbffff 	.word	0xfffbffff
 8001ccc:	ffffe0ff 	.word	0xffffe0ff
 8001cd0:	08006a28 	.word	0x08006a28
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cdc:	4bc6      	ldr	r3, [pc, #792]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d0e1      	beq.n	8001cac <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce8:	4bc3      	ldr	r3, [pc, #780]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	4ac3      	ldr	r2, [pc, #780]	; (8001ffc <HAL_RCC_OscConfig+0x674>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf6:	4bc0      	ldr	r3, [pc, #768]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cfc:	4bbe      	ldr	r3, [pc, #760]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	0a19      	lsrs	r1, r3, #8
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	061a      	lsls	r2, r3, #24
 8001d0a:	4bbb      	ldr	r3, [pc, #748]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	e019      	b.n	8001d46 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d12:	4bb9      	ldr	r3, [pc, #740]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4bb8      	ldr	r3, [pc, #736]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001d18:	49b9      	ldr	r1, [pc, #740]	; (8002000 <HAL_RCC_OscConfig+0x678>)
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7ff f871 	bl	8000e04 <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d28:	f7ff f86c 	bl	8000e04 <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e1ec      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d3a:	4baf      	ldr	r3, [pc, #700]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4013      	ands	r3, r2
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d036      	beq.n	8001dbe <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d019      	beq.n	8001d8c <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d58:	4ba7      	ldr	r3, [pc, #668]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001d5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d5c:	4ba6      	ldr	r3, [pc, #664]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001d5e:	2101      	movs	r1, #1
 8001d60:	430a      	orrs	r2, r1
 8001d62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d64:	f7ff f84e 	bl	8000e04 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d6e:	f7ff f849 	bl	8000e04 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e1c9      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d80:	4b9d      	ldr	r3, [pc, #628]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d84:	2202      	movs	r2, #2
 8001d86:	4013      	ands	r3, r2
 8001d88:	d0f1      	beq.n	8001d6e <HAL_RCC_OscConfig+0x3e6>
 8001d8a:	e018      	b.n	8001dbe <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8c:	4b9a      	ldr	r3, [pc, #616]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001d8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d90:	4b99      	ldr	r3, [pc, #612]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001d92:	2101      	movs	r1, #1
 8001d94:	438a      	bics	r2, r1
 8001d96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d98:	f7ff f834 	bl	8000e04 <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da2:	f7ff f82f 	bl	8000e04 <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e1af      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001db4:	4b90      	ldr	r3, [pc, #576]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db8:	2202      	movs	r2, #2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d1f1      	bne.n	8001da2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d100      	bne.n	8001dca <HAL_RCC_OscConfig+0x442>
 8001dc8:	e0af      	b.n	8001f2a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dca:	2323      	movs	r3, #35	; 0x23
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd2:	4b89      	ldr	r3, [pc, #548]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	055b      	lsls	r3, r3, #21
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d10a      	bne.n	8001df4 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b86      	ldr	r3, [pc, #536]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001de2:	4b85      	ldr	r3, [pc, #532]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	0549      	lsls	r1, r1, #21
 8001de8:	430a      	orrs	r2, r1
 8001dea:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001dec:	2323      	movs	r3, #35	; 0x23
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	4b83      	ldr	r3, [pc, #524]	; (8002004 <HAL_RCC_OscConfig+0x67c>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d11a      	bne.n	8001e36 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e00:	4b80      	ldr	r3, [pc, #512]	; (8002004 <HAL_RCC_OscConfig+0x67c>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b7f      	ldr	r3, [pc, #508]	; (8002004 <HAL_RCC_OscConfig+0x67c>)
 8001e06:	2180      	movs	r1, #128	; 0x80
 8001e08:	0049      	lsls	r1, r1, #1
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0e:	f7fe fff9 	bl	8000e04 <HAL_GetTick>
 8001e12:	0003      	movs	r3, r0
 8001e14:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e18:	f7fe fff4 	bl	8000e04 <HAL_GetTick>
 8001e1c:	0002      	movs	r2, r0
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e174      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2a:	4b76      	ldr	r3, [pc, #472]	; (8002004 <HAL_RCC_OscConfig+0x67c>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4013      	ands	r3, r2
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_OscConfig+0x4ca>
 8001e42:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001e44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e46:	4b6c      	ldr	r3, [pc, #432]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	0049      	lsls	r1, r1, #1
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	651a      	str	r2, [r3, #80]	; 0x50
 8001e50:	e031      	b.n	8001eb6 <HAL_RCC_OscConfig+0x52e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
 8001e5a:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001e5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e5e:	4b66      	ldr	r3, [pc, #408]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001e60:	4967      	ldr	r1, [pc, #412]	; (8002000 <HAL_RCC_OscConfig+0x678>)
 8001e62:	400a      	ands	r2, r1
 8001e64:	651a      	str	r2, [r3, #80]	; 0x50
 8001e66:	4b64      	ldr	r3, [pc, #400]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001e68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e6a:	4b63      	ldr	r3, [pc, #396]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001e6c:	4966      	ldr	r1, [pc, #408]	; (8002008 <HAL_RCC_OscConfig+0x680>)
 8001e6e:	400a      	ands	r2, r1
 8001e70:	651a      	str	r2, [r3, #80]	; 0x50
 8001e72:	e020      	b.n	8001eb6 <HAL_RCC_OscConfig+0x52e>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	23a0      	movs	r3, #160	; 0xa0
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d10e      	bne.n	8001e9e <HAL_RCC_OscConfig+0x516>
 8001e80:	4b5d      	ldr	r3, [pc, #372]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001e82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e84:	4b5c      	ldr	r3, [pc, #368]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	00c9      	lsls	r1, r1, #3
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	651a      	str	r2, [r3, #80]	; 0x50
 8001e8e:	4b5a      	ldr	r3, [pc, #360]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001e90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e92:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	0049      	lsls	r1, r1, #1
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	651a      	str	r2, [r3, #80]	; 0x50
 8001e9c:	e00b      	b.n	8001eb6 <HAL_RCC_OscConfig+0x52e>
 8001e9e:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001ea0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ea2:	4b55      	ldr	r3, [pc, #340]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001ea4:	4956      	ldr	r1, [pc, #344]	; (8002000 <HAL_RCC_OscConfig+0x678>)
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	651a      	str	r2, [r3, #80]	; 0x50
 8001eaa:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eae:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001eb0:	4955      	ldr	r1, [pc, #340]	; (8002008 <HAL_RCC_OscConfig+0x680>)
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d015      	beq.n	8001eea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebe:	f7fe ffa1 	bl	8000e04 <HAL_GetTick>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ec6:	e009      	b.n	8001edc <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec8:	f7fe ff9c 	bl	8000e04 <HAL_GetTick>
 8001ecc:	0002      	movs	r2, r0
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	4a4e      	ldr	r2, [pc, #312]	; (800200c <HAL_RCC_OscConfig+0x684>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e11b      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001edc:	4b46      	ldr	r3, [pc, #280]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001ede:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d0ef      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x540>
 8001ee8:	e014      	b.n	8001f14 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7fe ff8b 	bl	8000e04 <HAL_GetTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ef2:	e009      	b.n	8001f08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef4:	f7fe ff86 	bl	8000e04 <HAL_GetTick>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	4a43      	ldr	r2, [pc, #268]	; (800200c <HAL_RCC_OscConfig+0x684>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e105      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f08:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001f0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4013      	ands	r3, r2
 8001f12:	d1ef      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f14:	2323      	movs	r3, #35	; 0x23
 8001f16:	18fb      	adds	r3, r7, r3
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d105      	bne.n	8001f2a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f1e:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f22:	4b35      	ldr	r3, [pc, #212]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001f24:	493a      	ldr	r1, [pc, #232]	; (8002010 <HAL_RCC_OscConfig+0x688>)
 8001f26:	400a      	ands	r2, r1
 8001f28:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	4013      	ands	r3, r2
 8001f32:	d049      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d026      	beq.n	8001f8a <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001f42:	2101      	movs	r1, #1
 8001f44:	430a      	orrs	r2, r1
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001f4e:	2101      	movs	r1, #1
 8001f50:	430a      	orrs	r2, r1
 8001f52:	635a      	str	r2, [r3, #52]	; 0x34
 8001f54:	4b2f      	ldr	r3, [pc, #188]	; (8002014 <HAL_RCC_OscConfig+0x68c>)
 8001f56:	6a1a      	ldr	r2, [r3, #32]
 8001f58:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <HAL_RCC_OscConfig+0x68c>)
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	0189      	lsls	r1, r1, #6
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7fe ff4f 	bl	8000e04 <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f6c:	f7fe ff4a 	bl	8000e04 <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e0ca      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2202      	movs	r2, #2
 8001f84:	4013      	ands	r3, r2
 8001f86:	d0f1      	beq.n	8001f6c <HAL_RCC_OscConfig+0x5e4>
 8001f88:	e01e      	b.n	8001fc8 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001f90:	2101      	movs	r1, #1
 8001f92:	438a      	bics	r2, r1
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <HAL_RCC_OscConfig+0x68c>)
 8001f98:	6a1a      	ldr	r2, [r3, #32]
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <HAL_RCC_OscConfig+0x68c>)
 8001f9c:	491e      	ldr	r1, [pc, #120]	; (8002018 <HAL_RCC_OscConfig+0x690>)
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7fe ff2f 	bl	8000e04 <HAL_GetTick>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fac:	f7fe ff2a 	bl	8000e04 <HAL_GetTick>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e0aa      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d1f1      	bne.n	8001fac <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d100      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x64a>
 8001fd0:	e09f      	b.n	8002112 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	2b0c      	cmp	r3, #12
 8001fd6:	d100      	bne.n	8001fda <HAL_RCC_OscConfig+0x652>
 8001fd8:	e078      	b.n	80020cc <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d159      	bne.n	8002096 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <HAL_RCC_OscConfig+0x670>)
 8001fe8:	490c      	ldr	r1, [pc, #48]	; (800201c <HAL_RCC_OscConfig+0x694>)
 8001fea:	400a      	ands	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7fe ff09 	bl	8000e04 <HAL_GetTick>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ff6:	e01c      	b.n	8002032 <HAL_RCC_OscConfig+0x6aa>
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	ffff1fff 	.word	0xffff1fff
 8002000:	fffffeff 	.word	0xfffffeff
 8002004:	40007000 	.word	0x40007000
 8002008:	fffffbff 	.word	0xfffffbff
 800200c:	00001388 	.word	0x00001388
 8002010:	efffffff 	.word	0xefffffff
 8002014:	40010000 	.word	0x40010000
 8002018:	ffffdfff 	.word	0xffffdfff
 800201c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002020:	f7fe fef0 	bl	8000e04 <HAL_GetTick>
 8002024:	0002      	movs	r2, r0
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e070      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002032:	4b3a      	ldr	r3, [pc, #232]	; (800211c <HAL_RCC_OscConfig+0x794>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	049b      	lsls	r3, r3, #18
 800203a:	4013      	ands	r3, r2
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800203e:	4b37      	ldr	r3, [pc, #220]	; (800211c <HAL_RCC_OscConfig+0x794>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	4a37      	ldr	r2, [pc, #220]	; (8002120 <HAL_RCC_OscConfig+0x798>)
 8002044:	4013      	ands	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002056:	431a      	orrs	r2, r3
 8002058:	4b30      	ldr	r3, [pc, #192]	; (800211c <HAL_RCC_OscConfig+0x794>)
 800205a:	430a      	orrs	r2, r1
 800205c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800205e:	4b2f      	ldr	r3, [pc, #188]	; (800211c <HAL_RCC_OscConfig+0x794>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	4b2e      	ldr	r3, [pc, #184]	; (800211c <HAL_RCC_OscConfig+0x794>)
 8002064:	2180      	movs	r1, #128	; 0x80
 8002066:	0449      	lsls	r1, r1, #17
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7fe feca 	bl	8000e04 <HAL_GetTick>
 8002070:	0003      	movs	r3, r0
 8002072:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002076:	f7fe fec5 	bl	8000e04 <HAL_GetTick>
 800207a:	0002      	movs	r2, r0
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e045      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <HAL_RCC_OscConfig+0x794>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	049b      	lsls	r3, r3, #18
 8002090:	4013      	ands	r3, r2
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x6ee>
 8002094:	e03d      	b.n	8002112 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002096:	4b21      	ldr	r3, [pc, #132]	; (800211c <HAL_RCC_OscConfig+0x794>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <HAL_RCC_OscConfig+0x794>)
 800209c:	4921      	ldr	r1, [pc, #132]	; (8002124 <HAL_RCC_OscConfig+0x79c>)
 800209e:	400a      	ands	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7fe feaf 	bl	8000e04 <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ac:	f7fe feaa 	bl	8000e04 <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e02a      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_RCC_OscConfig+0x794>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	049b      	lsls	r3, r3, #18
 80020c6:	4013      	ands	r3, r2
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x724>
 80020ca:	e022      	b.n	8002112 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e01d      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d8:	4b10      	ldr	r3, [pc, #64]	; (800211c <HAL_RCC_OscConfig+0x794>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	401a      	ands	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d10f      	bne.n	800210e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	23f0      	movs	r3, #240	; 0xf0
 80020f2:	039b      	lsls	r3, r3, #14
 80020f4:	401a      	ands	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d107      	bne.n	800210e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	23c0      	movs	r3, #192	; 0xc0
 8002102:	041b      	lsls	r3, r3, #16
 8002104:	401a      	ands	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	b00a      	add	sp, #40	; 0x28
 800211a:	bdb0      	pop	{r4, r5, r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	ff02ffff 	.word	0xff02ffff
 8002124:	feffffff 	.word	0xfeffffff

08002128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002128:	b5b0      	push	{r4, r5, r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e10d      	b.n	8002358 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800213c:	4b88      	ldr	r3, [pc, #544]	; (8002360 <HAL_RCC_ClockConfig+0x238>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2201      	movs	r2, #1
 8002142:	4013      	ands	r3, r2
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d911      	bls.n	800216e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	4b85      	ldr	r3, [pc, #532]	; (8002360 <HAL_RCC_ClockConfig+0x238>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2201      	movs	r2, #1
 8002150:	4393      	bics	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	4b82      	ldr	r3, [pc, #520]	; (8002360 <HAL_RCC_ClockConfig+0x238>)
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215c:	4b80      	ldr	r3, [pc, #512]	; (8002360 <HAL_RCC_ClockConfig+0x238>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2201      	movs	r2, #1
 8002162:	4013      	ands	r3, r2
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e0f4      	b.n	8002358 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2202      	movs	r2, #2
 8002174:	4013      	ands	r3, r2
 8002176:	d009      	beq.n	800218c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002178:	4b7a      	ldr	r3, [pc, #488]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	22f0      	movs	r2, #240	; 0xf0
 800217e:	4393      	bics	r3, r2
 8002180:	0019      	movs	r1, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	4b77      	ldr	r3, [pc, #476]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 8002188:	430a      	orrs	r2, r1
 800218a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2201      	movs	r2, #1
 8002192:	4013      	ands	r3, r2
 8002194:	d100      	bne.n	8002198 <HAL_RCC_ClockConfig+0x70>
 8002196:	e089      	b.n	80022ac <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021a0:	4b70      	ldr	r3, [pc, #448]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	029b      	lsls	r3, r3, #10
 80021a8:	4013      	ands	r3, r2
 80021aa:	d120      	bne.n	80021ee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0d3      	b.n	8002358 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d107      	bne.n	80021c8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021b8:	4b6a      	ldr	r3, [pc, #424]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	049b      	lsls	r3, r3, #18
 80021c0:	4013      	ands	r3, r2
 80021c2:	d114      	bne.n	80021ee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0c7      	b.n	8002358 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d106      	bne.n	80021de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021d0:	4b64      	ldr	r3, [pc, #400]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2204      	movs	r2, #4
 80021d6:	4013      	ands	r3, r2
 80021d8:	d109      	bne.n	80021ee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0bc      	b.n	8002358 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021de:	4b61      	ldr	r3, [pc, #388]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4013      	ands	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0b4      	b.n	8002358 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ee:	4b5d      	ldr	r3, [pc, #372]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2203      	movs	r2, #3
 80021f4:	4393      	bics	r3, r2
 80021f6:	0019      	movs	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4b59      	ldr	r3, [pc, #356]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 80021fe:	430a      	orrs	r2, r1
 8002200:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002202:	f7fe fdff 	bl	8000e04 <HAL_GetTick>
 8002206:	0003      	movs	r3, r0
 8002208:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d111      	bne.n	8002236 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002212:	e009      	b.n	8002228 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002214:	f7fe fdf6 	bl	8000e04 <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	4a52      	ldr	r2, [pc, #328]	; (8002368 <HAL_RCC_ClockConfig+0x240>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e097      	b.n	8002358 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002228:	4b4e      	ldr	r3, [pc, #312]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	220c      	movs	r2, #12
 800222e:	4013      	ands	r3, r2
 8002230:	2b08      	cmp	r3, #8
 8002232:	d1ef      	bne.n	8002214 <HAL_RCC_ClockConfig+0xec>
 8002234:	e03a      	b.n	80022ac <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d111      	bne.n	8002262 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800223e:	e009      	b.n	8002254 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002240:	f7fe fde0 	bl	8000e04 <HAL_GetTick>
 8002244:	0002      	movs	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	4a47      	ldr	r2, [pc, #284]	; (8002368 <HAL_RCC_ClockConfig+0x240>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e081      	b.n	8002358 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002254:	4b43      	ldr	r3, [pc, #268]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	220c      	movs	r2, #12
 800225a:	4013      	ands	r3, r2
 800225c:	2b0c      	cmp	r3, #12
 800225e:	d1ef      	bne.n	8002240 <HAL_RCC_ClockConfig+0x118>
 8002260:	e024      	b.n	80022ac <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d11b      	bne.n	80022a2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800226a:	e009      	b.n	8002280 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7fe fdca 	bl	8000e04 <HAL_GetTick>
 8002270:	0002      	movs	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	4a3c      	ldr	r2, [pc, #240]	; (8002368 <HAL_RCC_ClockConfig+0x240>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e06b      	b.n	8002358 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002280:	4b38      	ldr	r3, [pc, #224]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	220c      	movs	r2, #12
 8002286:	4013      	ands	r3, r2
 8002288:	2b04      	cmp	r3, #4
 800228a:	d1ef      	bne.n	800226c <HAL_RCC_ClockConfig+0x144>
 800228c:	e00e      	b.n	80022ac <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228e:	f7fe fdb9 	bl	8000e04 <HAL_GetTick>
 8002292:	0002      	movs	r2, r0
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	4a33      	ldr	r2, [pc, #204]	; (8002368 <HAL_RCC_ClockConfig+0x240>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e05a      	b.n	8002358 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80022a2:	4b30      	ldr	r3, [pc, #192]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	220c      	movs	r2, #12
 80022a8:	4013      	ands	r3, r2
 80022aa:	d1f0      	bne.n	800228e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ac:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <HAL_RCC_ClockConfig+0x238>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2201      	movs	r2, #1
 80022b2:	4013      	ands	r3, r2
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d211      	bcs.n	80022de <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_RCC_ClockConfig+0x238>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2201      	movs	r2, #1
 80022c0:	4393      	bics	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	4b26      	ldr	r3, [pc, #152]	; (8002360 <HAL_RCC_ClockConfig+0x238>)
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022cc:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_RCC_ClockConfig+0x238>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2201      	movs	r2, #1
 80022d2:	4013      	ands	r3, r2
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d001      	beq.n	80022de <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e03c      	b.n	8002358 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2204      	movs	r2, #4
 80022e4:	4013      	ands	r3, r2
 80022e6:	d009      	beq.n	80022fc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e8:	4b1e      	ldr	r3, [pc, #120]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4a1f      	ldr	r2, [pc, #124]	; (800236c <HAL_RCC_ClockConfig+0x244>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	0019      	movs	r1, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 80022f8:	430a      	orrs	r2, r1
 80022fa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2208      	movs	r2, #8
 8002302:	4013      	ands	r3, r2
 8002304:	d00a      	beq.n	800231c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	4a19      	ldr	r2, [pc, #100]	; (8002370 <HAL_RCC_ClockConfig+0x248>)
 800230c:	4013      	ands	r3, r2
 800230e:	0019      	movs	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	00da      	lsls	r2, r3, #3
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 8002318:	430a      	orrs	r2, r1
 800231a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800231c:	f000 f82e 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8002320:	0001      	movs	r1, r0
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_RCC_ClockConfig+0x23c>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	220f      	movs	r2, #15
 800232a:	4013      	ands	r3, r2
 800232c:	4a11      	ldr	r2, [pc, #68]	; (8002374 <HAL_RCC_ClockConfig+0x24c>)
 800232e:	5cd3      	ldrb	r3, [r2, r3]
 8002330:	000a      	movs	r2, r1
 8002332:	40da      	lsrs	r2, r3
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_RCC_ClockConfig+0x250>)
 8002336:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002338:	250b      	movs	r5, #11
 800233a:	197c      	adds	r4, r7, r5
 800233c:	2000      	movs	r0, #0
 800233e:	f7fe fd2b 	bl	8000d98 <HAL_InitTick>
 8002342:	0003      	movs	r3, r0
 8002344:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002346:	197b      	adds	r3, r7, r5
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800234e:	230b      	movs	r3, #11
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	e000      	b.n	8002358 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b004      	add	sp, #16
 800235e:	bdb0      	pop	{r4, r5, r7, pc}
 8002360:	40022000 	.word	0x40022000
 8002364:	40021000 	.word	0x40021000
 8002368:	00001388 	.word	0x00001388
 800236c:	fffff8ff 	.word	0xfffff8ff
 8002370:	ffffc7ff 	.word	0xffffc7ff
 8002374:	08006a28 	.word	0x08006a28
 8002378:	20000000 	.word	0x20000000

0800237c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002382:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	220c      	movs	r2, #12
 800238c:	4013      	ands	r3, r2
 800238e:	2b08      	cmp	r3, #8
 8002390:	d00e      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x34>
 8002392:	2b0c      	cmp	r3, #12
 8002394:	d00f      	beq.n	80023b6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002396:	2b04      	cmp	r3, #4
 8002398:	d157      	bne.n	800244a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800239a:	4b35      	ldr	r3, [pc, #212]	; (8002470 <HAL_RCC_GetSysClockFreq+0xf4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2210      	movs	r2, #16
 80023a0:	4013      	ands	r3, r2
 80023a2:	d002      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80023a4:	4b33      	ldr	r3, [pc, #204]	; (8002474 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023a6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80023a8:	e05d      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80023aa:	4b33      	ldr	r3, [pc, #204]	; (8002478 <HAL_RCC_GetSysClockFreq+0xfc>)
 80023ac:	613b      	str	r3, [r7, #16]
      break;
 80023ae:	e05a      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023b0:	4b32      	ldr	r3, [pc, #200]	; (800247c <HAL_RCC_GetSysClockFreq+0x100>)
 80023b2:	613b      	str	r3, [r7, #16]
      break;
 80023b4:	e057      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	0c9b      	lsrs	r3, r3, #18
 80023ba:	220f      	movs	r2, #15
 80023bc:	4013      	ands	r3, r2
 80023be:	4a30      	ldr	r2, [pc, #192]	; (8002480 <HAL_RCC_GetSysClockFreq+0x104>)
 80023c0:	5cd3      	ldrb	r3, [r2, r3]
 80023c2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	0d9b      	lsrs	r3, r3, #22
 80023c8:	2203      	movs	r2, #3
 80023ca:	4013      	ands	r3, r2
 80023cc:	3301      	adds	r3, #1
 80023ce:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_RCC_GetSysClockFreq+0xf4>)
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	025b      	lsls	r3, r3, #9
 80023d8:	4013      	ands	r3, r2
 80023da:	d00f      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	000a      	movs	r2, r1
 80023e0:	0152      	lsls	r2, r2, #5
 80023e2:	1a52      	subs	r2, r2, r1
 80023e4:	0193      	lsls	r3, r2, #6
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	185b      	adds	r3, r3, r1
 80023ec:	025b      	lsls	r3, r3, #9
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	0018      	movs	r0, r3
 80023f2:	f7fd fe89 	bl	8000108 <__udivsi3>
 80023f6:	0003      	movs	r3, r0
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	e023      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80023fc:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <HAL_RCC_GetSysClockFreq+0xf4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2210      	movs	r2, #16
 8002402:	4013      	ands	r3, r2
 8002404:	d00f      	beq.n	8002426 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	000a      	movs	r2, r1
 800240a:	0152      	lsls	r2, r2, #5
 800240c:	1a52      	subs	r2, r2, r1
 800240e:	0193      	lsls	r3, r2, #6
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	185b      	adds	r3, r3, r1
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	0018      	movs	r0, r3
 800241c:	f7fd fe74 	bl	8000108 <__udivsi3>
 8002420:	0003      	movs	r3, r0
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	e00e      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002426:	68b9      	ldr	r1, [r7, #8]
 8002428:	000a      	movs	r2, r1
 800242a:	0152      	lsls	r2, r2, #5
 800242c:	1a52      	subs	r2, r2, r1
 800242e:	0193      	lsls	r3, r2, #6
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	185b      	adds	r3, r3, r1
 8002436:	029b      	lsls	r3, r3, #10
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	0018      	movs	r0, r3
 800243c:	f7fd fe64 	bl	8000108 <__udivsi3>
 8002440:	0003      	movs	r3, r0
 8002442:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	613b      	str	r3, [r7, #16]
      break;
 8002448:	e00d      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_RCC_GetSysClockFreq+0xf4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	0b5b      	lsrs	r3, r3, #13
 8002450:	2207      	movs	r2, #7
 8002452:	4013      	ands	r3, r2
 8002454:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	3301      	adds	r3, #1
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	0212      	lsls	r2, r2, #8
 800245e:	409a      	lsls	r2, r3
 8002460:	0013      	movs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
      break;
 8002464:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002466:	693b      	ldr	r3, [r7, #16]
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	b006      	add	sp, #24
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40021000 	.word	0x40021000
 8002474:	003d0900 	.word	0x003d0900
 8002478:	00f42400 	.word	0x00f42400
 800247c:	007a1200 	.word	0x007a1200
 8002480:	08006a40 	.word	0x08006a40

08002484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002488:	4b02      	ldr	r3, [pc, #8]	; (8002494 <HAL_RCC_GetHCLKFreq+0x10>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	0018      	movs	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	20000000 	.word	0x20000000

08002498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800249c:	f7ff fff2 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024a0:	0001      	movs	r1, r0
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	2207      	movs	r2, #7
 80024aa:	4013      	ands	r3, r2
 80024ac:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	40d9      	lsrs	r1, r3
 80024b2:	000b      	movs	r3, r1
}
 80024b4:	0018      	movs	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	40021000 	.word	0x40021000
 80024c0:	08006a38 	.word	0x08006a38

080024c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024c8:	f7ff ffdc 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024cc:	0001      	movs	r1, r0
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	0adb      	lsrs	r3, r3, #11
 80024d4:	2207      	movs	r2, #7
 80024d6:	4013      	ands	r3, r2
 80024d8:	4a04      	ldr	r2, [pc, #16]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80024da:	5cd3      	ldrb	r3, [r2, r3]
 80024dc:	40d9      	lsrs	r1, r3
 80024de:	000b      	movs	r3, r1
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	40021000 	.word	0x40021000
 80024ec:	08006a38 	.word	0x08006a38

080024f0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2220      	movs	r2, #32
 80024fe:	4013      	ands	r3, r2
 8002500:	d106      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	4013      	ands	r3, r2
 800250c:	d100      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800250e:	e0dd      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002510:	2317      	movs	r3, #23
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002518:	4ba4      	ldr	r3, [pc, #656]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800251a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	055b      	lsls	r3, r3, #21
 8002520:	4013      	ands	r3, r2
 8002522:	d10a      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002524:	4ba1      	ldr	r3, [pc, #644]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002528:	4ba0      	ldr	r3, [pc, #640]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800252a:	2180      	movs	r1, #128	; 0x80
 800252c:	0549      	lsls	r1, r1, #21
 800252e:	430a      	orrs	r2, r1
 8002530:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002532:	2317      	movs	r3, #23
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253a:	4b9d      	ldr	r3, [pc, #628]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4013      	ands	r3, r2
 8002544:	d11a      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002546:	4b9a      	ldr	r3, [pc, #616]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4b99      	ldr	r3, [pc, #612]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	0049      	lsls	r1, r1, #1
 8002550:	430a      	orrs	r2, r1
 8002552:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002554:	f7fe fc56 	bl	8000e04 <HAL_GetTick>
 8002558:	0003      	movs	r3, r0
 800255a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	e008      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255e:	f7fe fc51 	bl	8000e04 <HAL_GetTick>
 8002562:	0002      	movs	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b64      	cmp	r3, #100	; 0x64
 800256a:	d901      	bls.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e118      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	4b8f      	ldr	r3, [pc, #572]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4013      	ands	r3, r2
 800257a:	d0f0      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800257c:	4b8b      	ldr	r3, [pc, #556]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	23c0      	movs	r3, #192	; 0xc0
 8002582:	039b      	lsls	r3, r3, #14
 8002584:	4013      	ands	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	23c0      	movs	r3, #192	; 0xc0
 800258e:	039b      	lsls	r3, r3, #14
 8002590:	4013      	ands	r3, r2
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	429a      	cmp	r2, r3
 8002596:	d107      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	23c0      	movs	r3, #192	; 0xc0
 800259e:	039b      	lsls	r3, r3, #14
 80025a0:	4013      	ands	r3, r2
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d013      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	23c0      	movs	r3, #192	; 0xc0
 80025ae:	029b      	lsls	r3, r3, #10
 80025b0:	401a      	ands	r2, r3
 80025b2:	23c0      	movs	r3, #192	; 0xc0
 80025b4:	029b      	lsls	r3, r3, #10
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d10a      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80025ba:	4b7c      	ldr	r3, [pc, #496]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	029b      	lsls	r3, r3, #10
 80025c2:	401a      	ands	r2, r3
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	029b      	lsls	r3, r3, #10
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d101      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0e8      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80025d0:	4b76      	ldr	r3, [pc, #472]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80025d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025d4:	23c0      	movs	r3, #192	; 0xc0
 80025d6:	029b      	lsls	r3, r3, #10
 80025d8:	4013      	ands	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d049      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	23c0      	movs	r3, #192	; 0xc0
 80025e8:	029b      	lsls	r3, r3, #10
 80025ea:	4013      	ands	r3, r2
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d004      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2220      	movs	r2, #32
 80025f8:	4013      	ands	r3, r2
 80025fa:	d10d      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	23c0      	movs	r3, #192	; 0xc0
 8002602:	029b      	lsls	r3, r3, #10
 8002604:	4013      	ands	r3, r2
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	429a      	cmp	r2, r3
 800260a:	d034      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	4013      	ands	r3, r2
 8002616:	d02e      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002618:	4b64      	ldr	r3, [pc, #400]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800261a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800261c:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800261e:	4013      	ands	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002622:	4b62      	ldr	r3, [pc, #392]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002626:	4b61      	ldr	r3, [pc, #388]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002628:	2180      	movs	r1, #128	; 0x80
 800262a:	0309      	lsls	r1, r1, #12
 800262c:	430a      	orrs	r2, r1
 800262e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002630:	4b5e      	ldr	r3, [pc, #376]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002632:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002634:	4b5d      	ldr	r3, [pc, #372]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002636:	4960      	ldr	r1, [pc, #384]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002638:	400a      	ands	r2, r1
 800263a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800263c:	4b5b      	ldr	r3, [pc, #364]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4013      	ands	r3, r2
 800264a:	d014      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7fe fbda 	bl	8000e04 <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002654:	e009      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7fe fbd5 	bl	8000e04 <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	4a56      	ldr	r2, [pc, #344]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e09b      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800266a:	4b50      	ldr	r3, [pc, #320]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800266c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4013      	ands	r3, r2
 8002674:	d0ef      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	23c0      	movs	r3, #192	; 0xc0
 800267c:	029b      	lsls	r3, r3, #10
 800267e:	401a      	ands	r2, r3
 8002680:	23c0      	movs	r3, #192	; 0xc0
 8002682:	029b      	lsls	r3, r3, #10
 8002684:	429a      	cmp	r2, r3
 8002686:	d10c      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002688:	4b48      	ldr	r3, [pc, #288]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a4c      	ldr	r2, [pc, #304]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800268e:	4013      	ands	r3, r2
 8002690:	0019      	movs	r1, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	23c0      	movs	r3, #192	; 0xc0
 8002698:	039b      	lsls	r3, r3, #14
 800269a:	401a      	ands	r2, r3
 800269c:	4b43      	ldr	r3, [pc, #268]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	4b42      	ldr	r3, [pc, #264]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	23c0      	movs	r3, #192	; 0xc0
 80026ac:	029b      	lsls	r3, r3, #10
 80026ae:	401a      	ands	r2, r3
 80026b0:	4b3e      	ldr	r3, [pc, #248]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026b2:	430a      	orrs	r2, r1
 80026b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026b6:	2317      	movs	r3, #23
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d105      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c0:	4b3a      	ldr	r3, [pc, #232]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c4:	4b39      	ldr	r3, [pc, #228]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026c6:	493f      	ldr	r1, [pc, #252]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026c8:	400a      	ands	r2, r1
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2201      	movs	r2, #1
 80026d2:	4013      	ands	r3, r2
 80026d4:	d009      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026d6:	4b35      	ldr	r3, [pc, #212]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026da:	2203      	movs	r2, #3
 80026dc:	4393      	bics	r3, r2
 80026de:	0019      	movs	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	4b31      	ldr	r3, [pc, #196]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026e6:	430a      	orrs	r2, r1
 80026e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2202      	movs	r2, #2
 80026f0:	4013      	ands	r3, r2
 80026f2:	d009      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026f4:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f8:	220c      	movs	r2, #12
 80026fa:	4393      	bics	r3, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002704:	430a      	orrs	r2, r1
 8002706:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2204      	movs	r2, #4
 800270e:	4013      	ands	r3, r2
 8002710:	d009      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002712:	4b26      	ldr	r3, [pc, #152]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	4a2c      	ldr	r2, [pc, #176]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002718:	4013      	ands	r3, r2
 800271a:	0019      	movs	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	4b22      	ldr	r3, [pc, #136]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002722:	430a      	orrs	r2, r1
 8002724:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2208      	movs	r2, #8
 800272c:	4013      	ands	r3, r2
 800272e:	d009      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002730:	4b1e      	ldr	r3, [pc, #120]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002734:	4a25      	ldr	r2, [pc, #148]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002736:	4013      	ands	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002740:	430a      	orrs	r2, r1
 8002742:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4013      	ands	r3, r2
 800274e:	d009      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002750:	4b16      	ldr	r3, [pc, #88]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002754:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002756:	4013      	ands	r3, r2
 8002758:	0019      	movs	r1, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69da      	ldr	r2, [r3, #28]
 800275e:	4b13      	ldr	r3, [pc, #76]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002760:	430a      	orrs	r2, r1
 8002762:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2240      	movs	r2, #64	; 0x40
 800276a:	4013      	ands	r3, r2
 800276c:	d009      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800276e:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002772:	4a17      	ldr	r2, [pc, #92]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002774:	4013      	ands	r3, r2
 8002776:	0019      	movs	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800277e:	430a      	orrs	r2, r1
 8002780:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2280      	movs	r2, #128	; 0x80
 8002788:	4013      	ands	r3, r2
 800278a:	d009      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800278c:	4b07      	ldr	r3, [pc, #28]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800278e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002790:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002792:	4013      	ands	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1a      	ldr	r2, [r3, #32]
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800279c:	430a      	orrs	r2, r1
 800279e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	0018      	movs	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b006      	add	sp, #24
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40007000 	.word	0x40007000
 80027b4:	fffcffff 	.word	0xfffcffff
 80027b8:	fff7ffff 	.word	0xfff7ffff
 80027bc:	00001388 	.word	0x00001388
 80027c0:	ffcfffff 	.word	0xffcfffff
 80027c4:	efffffff 	.word	0xefffffff
 80027c8:	fffff3ff 	.word	0xfffff3ff
 80027cc:	ffffcfff 	.word	0xffffcfff
 80027d0:	fbffffff 	.word	0xfbffffff
 80027d4:	fff3ffff 	.word	0xfff3ffff

080027d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e01e      	b.n	8002828 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2239      	movs	r2, #57	; 0x39
 80027ee:	5c9b      	ldrb	r3, [r3, r2]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d107      	bne.n	8002806 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2238      	movs	r2, #56	; 0x38
 80027fa:	2100      	movs	r1, #0
 80027fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	0018      	movs	r0, r3
 8002802:	f002 fc17 	bl	8005034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2239      	movs	r2, #57	; 0x39
 800280a:	2102      	movs	r1, #2
 800280c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3304      	adds	r3, #4
 8002816:	0019      	movs	r1, r3
 8002818:	0010      	movs	r0, r2
 800281a:	f000 fc8b 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2239      	movs	r2, #57	; 0x39
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	b002      	add	sp, #8
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2101      	movs	r1, #1
 8002844:	430a      	orrs	r2, r1
 8002846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2207      	movs	r2, #7
 8002850:	4013      	ands	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b06      	cmp	r3, #6
 8002858:	d007      	beq.n	800286a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2101      	movs	r1, #1
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	0018      	movs	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	b004      	add	sp, #16
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e01e      	b.n	80028c4 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2239      	movs	r2, #57	; 0x39
 800288a:	5c9b      	ldrb	r3, [r3, r2]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d107      	bne.n	80028a2 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2238      	movs	r2, #56	; 0x38
 8002896:	2100      	movs	r1, #0
 8002898:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	0018      	movs	r0, r3
 800289e:	f002 fc0d 	bl	80050bc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2239      	movs	r2, #57	; 0x39
 80028a6:	2102      	movs	r1, #2
 80028a8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3304      	adds	r3, #4
 80028b2:	0019      	movs	r1, r3
 80028b4:	0010      	movs	r0, r2
 80028b6:	f000 fc3d 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2239      	movs	r2, #57	; 0x39
 80028be:	2101      	movs	r1, #1
 80028c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b002      	add	sp, #8
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e01e      	b.n	800291c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2239      	movs	r2, #57	; 0x39
 80028e2:	5c9b      	ldrb	r3, [r3, r2]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d107      	bne.n	80028fa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2238      	movs	r2, #56	; 0x38
 80028ee:	2100      	movs	r1, #0
 80028f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f002 fbc9 	bl	800508c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2239      	movs	r2, #57	; 0x39
 80028fe:	2102      	movs	r1, #2
 8002900:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3304      	adds	r3, #4
 800290a:	0019      	movs	r1, r3
 800290c:	0010      	movs	r0, r2
 800290e:	f000 fc11 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2239      	movs	r2, #57	; 0x39
 8002916:	2101      	movs	r1, #1
 8002918:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b002      	add	sp, #8
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6839      	ldr	r1, [r7, #0]
 8002934:	2201      	movs	r2, #1
 8002936:	0018      	movs	r0, r3
 8002938:	f000 fe7c 	bl	8003634 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2207      	movs	r2, #7
 8002944:	4013      	ands	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b06      	cmp	r3, #6
 800294c:	d007      	beq.n	800295e <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2101      	movs	r1, #1
 800295a:	430a      	orrs	r2, r1
 800295c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	0018      	movs	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	b004      	add	sp, #16
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e07c      	b.n	8002a76 <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2239      	movs	r2, #57	; 0x39
 8002980:	5c9b      	ldrb	r3, [r3, r2]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d107      	bne.n	8002998 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2238      	movs	r2, #56	; 0x38
 800298c:	2100      	movs	r1, #0
 800298e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	0018      	movs	r0, r3
 8002994:	f002 fbb2 	bl	80050fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2239      	movs	r2, #57	; 0x39
 800299c:	2102      	movs	r1, #2
 800299e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4935      	ldr	r1, [pc, #212]	; (8002a80 <HAL_TIM_Encoder_Init+0x118>)
 80029ac:	400a      	ands	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3304      	adds	r3, #4
 80029b8:	0019      	movs	r1, r3
 80029ba:	0010      	movs	r0, r2
 80029bc:	f000 fbba 	bl	8003134 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4a27      	ldr	r2, [pc, #156]	; (8002a84 <HAL_TIM_Encoder_Init+0x11c>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	4313      	orrs	r3, r2
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4a22      	ldr	r2, [pc, #136]	; (8002a88 <HAL_TIM_Encoder_Init+0x120>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4a21      	ldr	r2, [pc, #132]	; (8002a8c <HAL_TIM_Encoder_Init+0x124>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	4313      	orrs	r3, r2
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	011a      	lsls	r2, r3, #4
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	031b      	lsls	r3, r3, #12
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2222      	movs	r2, #34	; 0x22
 8002a36:	4393      	bics	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2288      	movs	r2, #136	; 0x88
 8002a3e:	4393      	bics	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2239      	movs	r2, #57	; 0x39
 8002a70:	2101      	movs	r1, #1
 8002a72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	0018      	movs	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b006      	add	sp, #24
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	ffffbff8 	.word	0xffffbff8
 8002a84:	fffffcfc 	.word	0xfffffcfc
 8002a88:	fffff3f3 	.word	0xfffff3f3
 8002a8c:	ffff0f0f 	.word	0xffff0f0f

08002a90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_TIM_Encoder_Start+0x16>
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d008      	beq.n	8002ab6 <HAL_TIM_Encoder_Start+0x26>
 8002aa4:	e00f      	b.n	8002ac6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	2100      	movs	r1, #0
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f000 fdc0 	bl	8003634 <TIM_CCxChannelCmd>
      break;
 8002ab4:	e016      	b.n	8002ae4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2201      	movs	r2, #1
 8002abc:	2104      	movs	r1, #4
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 fdb8 	bl	8003634 <TIM_CCxChannelCmd>
      break;
 8002ac4:	e00e      	b.n	8002ae4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2201      	movs	r2, #1
 8002acc:	2100      	movs	r1, #0
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 fdb0 	bl	8003634 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	2104      	movs	r1, #4
 8002adc:	0018      	movs	r0, r3
 8002ade:	f000 fda9 	bl	8003634 <TIM_CCxChannelCmd>
      break;
 8002ae2:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2101      	movs	r1, #1
 8002af0:	430a      	orrs	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	0018      	movs	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b002      	add	sp, #8
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d124      	bne.n	8002b5e <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d11d      	bne.n	8002b5e <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2203      	movs	r2, #3
 8002b28:	4252      	negs	r2, r2
 8002b2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2203      	movs	r2, #3
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d004      	beq.n	8002b48 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	0018      	movs	r0, r3
 8002b42:	f000 fadf 	bl	8003104 <HAL_TIM_IC_CaptureCallback>
 8002b46:	e007      	b.n	8002b58 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 fad2 	bl	80030f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 fade 	bl	8003114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2204      	movs	r2, #4
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d125      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2204      	movs	r2, #4
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d11e      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2205      	movs	r2, #5
 8002b80:	4252      	negs	r2, r2
 8002b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699a      	ldr	r2, [r3, #24]
 8002b90:	23c0      	movs	r3, #192	; 0xc0
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4013      	ands	r3, r2
 8002b96:	d004      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 fab2 	bl	8003104 <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e007      	b.n	8002bb2 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f000 faa5 	bl	80030f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f000 fab1 	bl	8003114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	2208      	movs	r2, #8
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d124      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2208      	movs	r2, #8
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d11d      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2209      	movs	r2, #9
 8002bda:	4252      	negs	r2, r2
 8002bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2204      	movs	r2, #4
 8002be2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	2203      	movs	r2, #3
 8002bec:	4013      	ands	r3, r2
 8002bee:	d004      	beq.n	8002bfa <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f000 fa86 	bl	8003104 <HAL_TIM_IC_CaptureCallback>
 8002bf8:	e007      	b.n	8002c0a <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f000 fa79 	bl	80030f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0018      	movs	r0, r3
 8002c06:	f000 fa85 	bl	8003114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	2210      	movs	r2, #16
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d125      	bne.n	8002c6a <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2210      	movs	r2, #16
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d11e      	bne.n	8002c6a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2211      	movs	r2, #17
 8002c32:	4252      	negs	r2, r2
 8002c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2208      	movs	r2, #8
 8002c3a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69da      	ldr	r2, [r3, #28]
 8002c42:	23c0      	movs	r3, #192	; 0xc0
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4013      	ands	r3, r2
 8002c48:	d004      	beq.n	8002c54 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f000 fa59 	bl	8003104 <HAL_TIM_IC_CaptureCallback>
 8002c52:	e007      	b.n	8002c64 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	0018      	movs	r0, r3
 8002c58:	f000 fa4c 	bl	80030f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f000 fa58 	bl	8003114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2201      	movs	r2, #1
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d10f      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d108      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	4252      	negs	r2, r2
 8002c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	0018      	movs	r0, r3
 8002c94:	f000 fa26 	bl	80030e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2240      	movs	r2, #64	; 0x40
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d10f      	bne.n	8002cc6 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2240      	movs	r2, #64	; 0x40
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b40      	cmp	r3, #64	; 0x40
 8002cb2:	d108      	bne.n	8002cc6 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2241      	movs	r2, #65	; 0x41
 8002cba:	4252      	negs	r2, r2
 8002cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 fa2f 	bl	8003124 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b002      	add	sp, #8
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2238      	movs	r2, #56	; 0x38
 8002cde:	5c9b      	ldrb	r3, [r3, r2]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_TIM_OC_ConfigChannel+0x1a>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e03c      	b.n	8002d62 <HAL_TIM_OC_ConfigChannel+0x94>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2238      	movs	r2, #56	; 0x38
 8002cec:	2101      	movs	r1, #1
 8002cee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2239      	movs	r2, #57	; 0x39
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d010      	beq.n	8002d20 <HAL_TIM_OC_ConfigChannel+0x52>
 8002cfe:	d802      	bhi.n	8002d06 <HAL_TIM_OC_ConfigChannel+0x38>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8002d04:	e024      	b.n	8002d50 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d012      	beq.n	8002d30 <HAL_TIM_OC_ConfigChannel+0x62>
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d018      	beq.n	8002d40 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8002d0e:	e01f      	b.n	8002d50 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	0011      	movs	r1, r2
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f000 fa69 	bl	80031f0 <TIM_OC1_SetConfig>
      break;
 8002d1e:	e017      	b.n	8002d50 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	0011      	movs	r1, r2
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f000 fa9d 	bl	8003268 <TIM_OC2_SetConfig>
      break;
 8002d2e:	e00f      	b.n	8002d50 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	0011      	movs	r1, r2
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 fad7 	bl	80032ec <TIM_OC3_SetConfig>
      break;
 8002d3e:	e007      	b.n	8002d50 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	0011      	movs	r1, r2
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 fb0f 	bl	800336c <TIM_OC4_SetConfig>
      break;
 8002d4e:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2239      	movs	r2, #57	; 0x39
 8002d54:	2101      	movs	r1, #1
 8002d56:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2238      	movs	r2, #56	; 0x38
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b004      	add	sp, #16
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2238      	movs	r2, #56	; 0x38
 8002d7c:	5c9b      	ldrb	r3, [r3, r2]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e0a4      	b.n	8002ed0 <HAL_TIM_PWM_ConfigChannel+0x164>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2238      	movs	r2, #56	; 0x38
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2239      	movs	r2, #57	; 0x39
 8002d92:	2102      	movs	r1, #2
 8002d94:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d029      	beq.n	8002df0 <HAL_TIM_PWM_ConfigChannel+0x84>
 8002d9c:	d802      	bhi.n	8002da4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002da2:	e08c      	b.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d046      	beq.n	8002e36 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002da8:	2b0c      	cmp	r3, #12
 8002daa:	d065      	beq.n	8002e78 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002dac:	e087      	b.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	0011      	movs	r1, r2
 8002db6:	0018      	movs	r0, r3
 8002db8:	f000 fa1a 	bl	80031f0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2108      	movs	r1, #8
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2104      	movs	r1, #4
 8002dd8:	438a      	bics	r2, r1
 8002dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6999      	ldr	r1, [r3, #24]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	619a      	str	r2, [r3, #24]
      break;
 8002dee:	e066      	b.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	0011      	movs	r1, r2
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f000 fa35 	bl	8003268 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	699a      	ldr	r2, [r3, #24]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2180      	movs	r1, #128	; 0x80
 8002e0a:	0109      	lsls	r1, r1, #4
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	492f      	ldr	r1, [pc, #188]	; (8002ed8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6999      	ldr	r1, [r3, #24]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	021a      	lsls	r2, r3, #8
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	619a      	str	r2, [r3, #24]
      break;
 8002e34:	e043      	b.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	0011      	movs	r1, r2
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f000 fa54 	bl	80032ec <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2108      	movs	r1, #8
 8002e50:	430a      	orrs	r2, r1
 8002e52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	69da      	ldr	r2, [r3, #28]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2104      	movs	r1, #4
 8002e60:	438a      	bics	r2, r1
 8002e62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69d9      	ldr	r1, [r3, #28]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	61da      	str	r2, [r3, #28]
      break;
 8002e76:	e022      	b.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	0011      	movs	r1, r2
 8002e80:	0018      	movs	r0, r3
 8002e82:	f000 fa73 	bl	800336c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	0109      	lsls	r1, r1, #4
 8002e94:	430a      	orrs	r2, r1
 8002e96:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69da      	ldr	r2, [r3, #28]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	490d      	ldr	r1, [pc, #52]	; (8002ed8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69d9      	ldr	r1, [r3, #28]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	021a      	lsls	r2, r3, #8
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	61da      	str	r2, [r3, #28]
      break;
 8002ebc:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2239      	movs	r2, #57	; 0x39
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2238      	movs	r2, #56	; 0x38
 8002eca:	2100      	movs	r1, #0
 8002ecc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b004      	add	sp, #16
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	fffffbff 	.word	0xfffffbff

08002edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2238      	movs	r2, #56	; 0x38
 8002eea:	5c9b      	ldrb	r3, [r3, r2]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_TIM_ConfigClockSource+0x18>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e0ab      	b.n	800304c <HAL_TIM_ConfigClockSource+0x170>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2238      	movs	r2, #56	; 0x38
 8002ef8:	2101      	movs	r1, #1
 8002efa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2239      	movs	r2, #57	; 0x39
 8002f00:	2102      	movs	r1, #2
 8002f02:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2277      	movs	r2, #119	; 0x77
 8002f10:	4393      	bics	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4a4f      	ldr	r2, [pc, #316]	; (8003054 <HAL_TIM_ConfigClockSource+0x178>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b40      	cmp	r3, #64	; 0x40
 8002f2a:	d100      	bne.n	8002f2e <HAL_TIM_ConfigClockSource+0x52>
 8002f2c:	e06b      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x12a>
 8002f2e:	d80e      	bhi.n	8002f4e <HAL_TIM_ConfigClockSource+0x72>
 8002f30:	2b10      	cmp	r3, #16
 8002f32:	d100      	bne.n	8002f36 <HAL_TIM_ConfigClockSource+0x5a>
 8002f34:	e077      	b.n	8003026 <HAL_TIM_ConfigClockSource+0x14a>
 8002f36:	d803      	bhi.n	8002f40 <HAL_TIM_ConfigClockSource+0x64>
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d100      	bne.n	8002f3e <HAL_TIM_ConfigClockSource+0x62>
 8002f3c:	e073      	b.n	8003026 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002f3e:	e07c      	b.n	800303a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d100      	bne.n	8002f46 <HAL_TIM_ConfigClockSource+0x6a>
 8002f44:	e06f      	b.n	8003026 <HAL_TIM_ConfigClockSource+0x14a>
 8002f46:	2b30      	cmp	r3, #48	; 0x30
 8002f48:	d100      	bne.n	8002f4c <HAL_TIM_ConfigClockSource+0x70>
 8002f4a:	e06c      	b.n	8003026 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002f4c:	e075      	b.n	800303a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002f4e:	2b70      	cmp	r3, #112	; 0x70
 8002f50:	d00e      	beq.n	8002f70 <HAL_TIM_ConfigClockSource+0x94>
 8002f52:	d804      	bhi.n	8002f5e <HAL_TIM_ConfigClockSource+0x82>
 8002f54:	2b50      	cmp	r3, #80	; 0x50
 8002f56:	d036      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0xea>
 8002f58:	2b60      	cmp	r3, #96	; 0x60
 8002f5a:	d044      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002f5c:	e06d      	b.n	800303a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002f5e:	2280      	movs	r2, #128	; 0x80
 8002f60:	0152      	lsls	r2, r2, #5
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d068      	beq.n	8003038 <HAL_TIM_ConfigClockSource+0x15c>
 8002f66:	2280      	movs	r2, #128	; 0x80
 8002f68:	0192      	lsls	r2, r2, #6
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d017      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002f6e:	e064      	b.n	800303a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6899      	ldr	r1, [r3, #8]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f000 fb38 	bl	80035f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2277      	movs	r2, #119	; 0x77
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	609a      	str	r2, [r3, #8]
      break;
 8002f9c:	e04d      	b.n	800303a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6899      	ldr	r1, [r3, #8]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f000 fb21 	bl	80035f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2180      	movs	r1, #128	; 0x80
 8002fbe:	01c9      	lsls	r1, r1, #7
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	609a      	str	r2, [r3, #8]
      break;
 8002fc4:	e039      	b.n	800303a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6859      	ldr	r1, [r3, #4]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	001a      	movs	r2, r3
 8002fd4:	f000 fa94 	bl	8003500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2150      	movs	r1, #80	; 0x50
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f000 faee 	bl	80035c0 <TIM_ITRx_SetConfig>
      break;
 8002fe4:	e029      	b.n	800303a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	001a      	movs	r2, r3
 8002ff4:	f000 fab2 	bl	800355c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2160      	movs	r1, #96	; 0x60
 8002ffe:	0018      	movs	r0, r3
 8003000:	f000 fade 	bl	80035c0 <TIM_ITRx_SetConfig>
      break;
 8003004:	e019      	b.n	800303a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6859      	ldr	r1, [r3, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	001a      	movs	r2, r3
 8003014:	f000 fa74 	bl	8003500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2140      	movs	r1, #64	; 0x40
 800301e:	0018      	movs	r0, r3
 8003020:	f000 face 	bl	80035c0 <TIM_ITRx_SetConfig>
      break;
 8003024:	e009      	b.n	800303a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	0019      	movs	r1, r3
 8003030:	0010      	movs	r0, r2
 8003032:	f000 fac5 	bl	80035c0 <TIM_ITRx_SetConfig>
      break;
 8003036:	e000      	b.n	800303a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003038:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2239      	movs	r2, #57	; 0x39
 800303e:	2101      	movs	r1, #1
 8003040:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2238      	movs	r2, #56	; 0x38
 8003046:	2100      	movs	r1, #0
 8003048:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b004      	add	sp, #16
 8003052:	bd80      	pop	{r7, pc}
 8003054:	ffff00ff 	.word	0xffff00ff

08003058 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2238      	movs	r2, #56	; 0x38
 8003066:	5c9b      	ldrb	r3, [r3, r2]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_TIM_SlaveConfigSynchro+0x18>
 800306c:	2302      	movs	r3, #2
 800306e:	e032      	b.n	80030d6 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2238      	movs	r2, #56	; 0x38
 8003074:	2101      	movs	r1, #1
 8003076:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2239      	movs	r2, #57	; 0x39
 800307c:	2102      	movs	r1, #2
 800307e:	5499      	strb	r1, [r3, r2]

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0011      	movs	r1, r2
 8003086:	0018      	movs	r0, r3
 8003088:	f000 f9b6 	bl	80033f8 <TIM_SlaveTimer_SetConfig>
 800308c:	1e03      	subs	r3, r0, #0
 800308e:	d009      	beq.n	80030a4 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
      htim->State = HAL_TIM_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2239      	movs	r2, #57	; 0x39
 8003094:	2101      	movs	r1, #1
 8003096:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2238      	movs	r2, #56	; 0x38
 800309c:	2100      	movs	r1, #0
 800309e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e018      	b.n	80030d6 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2140      	movs	r1, #64	; 0x40
 80030b0:	438a      	bics	r2, r1
 80030b2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <HAL_TIM_SlaveConfigSynchro+0x88>)
 80030c0:	400a      	ands	r2, r1
 80030c2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2239      	movs	r2, #57	; 0x39
 80030c8:	2101      	movs	r1, #1
 80030ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2238      	movs	r2, #56	; 0x38
 80030d0:	2100      	movs	r1, #0
 80030d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	ffffbfff 	.word	0xffffbfff

080030e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b002      	add	sp, #8
 8003132:	bd80      	pop	{r7, pc}

08003134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	05db      	lsls	r3, r3, #23
 800314a:	429a      	cmp	r2, r3
 800314c:	d00b      	beq.n	8003166 <TIM_Base_SetConfig+0x32>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a23      	ldr	r2, [pc, #140]	; (80031e0 <TIM_Base_SetConfig+0xac>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d007      	beq.n	8003166 <TIM_Base_SetConfig+0x32>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <TIM_Base_SetConfig+0xb0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d003      	beq.n	8003166 <TIM_Base_SetConfig+0x32>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a21      	ldr	r2, [pc, #132]	; (80031e8 <TIM_Base_SetConfig+0xb4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d108      	bne.n	8003178 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2270      	movs	r2, #112	; 0x70
 800316a:	4393      	bics	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	05db      	lsls	r3, r3, #23
 800317e:	429a      	cmp	r2, r3
 8003180:	d00b      	beq.n	800319a <TIM_Base_SetConfig+0x66>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a16      	ldr	r2, [pc, #88]	; (80031e0 <TIM_Base_SetConfig+0xac>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <TIM_Base_SetConfig+0x66>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a15      	ldr	r2, [pc, #84]	; (80031e4 <TIM_Base_SetConfig+0xb0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d003      	beq.n	800319a <TIM_Base_SetConfig+0x66>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <TIM_Base_SetConfig+0xb4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d108      	bne.n	80031ac <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4a13      	ldr	r2, [pc, #76]	; (80031ec <TIM_Base_SetConfig+0xb8>)
 800319e:	4013      	ands	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2280      	movs	r2, #128	; 0x80
 80031b0:	4393      	bics	r3, r2
 80031b2:	001a      	movs	r2, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	615a      	str	r2, [r3, #20]
}
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b004      	add	sp, #16
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40010800 	.word	0x40010800
 80031e8:	40011400 	.word	0x40011400
 80031ec:	fffffcff 	.word	0xfffffcff

080031f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	2201      	movs	r2, #1
 8003200:	4393      	bics	r3, r2
 8003202:	001a      	movs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2270      	movs	r2, #112	; 0x70
 800321e:	4393      	bics	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2203      	movs	r2, #3
 8003226:	4393      	bics	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2202      	movs	r2, #2
 8003238:	4393      	bics	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	621a      	str	r2, [r3, #32]
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b006      	add	sp, #24
 8003266:	bd80      	pop	{r7, pc}

08003268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	2210      	movs	r2, #16
 8003278:	4393      	bics	r3, r2
 800327a:	001a      	movs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <TIM_OC2_SetConfig+0x7c>)
 8003296:	4013      	ands	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4a12      	ldr	r2, [pc, #72]	; (80032e8 <TIM_OC2_SetConfig+0x80>)
 800329e:	4013      	ands	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2220      	movs	r2, #32
 80032b2:	4393      	bics	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	621a      	str	r2, [r3, #32]
}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b006      	add	sp, #24
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	ffff8fff 	.word	0xffff8fff
 80032e8:	fffffcff 	.word	0xfffffcff

080032ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	4a1a      	ldr	r2, [pc, #104]	; (8003364 <TIM_OC3_SetConfig+0x78>)
 80032fc:	401a      	ands	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2270      	movs	r2, #112	; 0x70
 8003318:	4393      	bics	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2203      	movs	r2, #3
 8003320:	4393      	bics	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	4a0d      	ldr	r2, [pc, #52]	; (8003368 <TIM_OC3_SetConfig+0x7c>)
 8003332:	4013      	ands	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	621a      	str	r2, [r3, #32]
}
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b006      	add	sp, #24
 8003362:	bd80      	pop	{r7, pc}
 8003364:	fffffeff 	.word	0xfffffeff
 8003368:	fffffdff 	.word	0xfffffdff

0800336c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <TIM_OC4_SetConfig+0x7c>)
 800337c:	401a      	ands	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a15      	ldr	r2, [pc, #84]	; (80033ec <TIM_OC4_SetConfig+0x80>)
 8003398:	4013      	ands	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <TIM_OC4_SetConfig+0x84>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	4a10      	ldr	r2, [pc, #64]	; (80033f4 <TIM_OC4_SetConfig+0x88>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	031b      	lsls	r3, r3, #12
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	621a      	str	r2, [r3, #32]
}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b006      	add	sp, #24
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	ffffefff 	.word	0xffffefff
 80033ec:	ffff8fff 	.word	0xffff8fff
 80033f0:	fffffcff 	.word	0xfffffcff
 80033f4:	ffffdfff 	.word	0xffffdfff

080033f8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2270      	movs	r2, #112	; 0x70
 800340e:	4393      	bics	r3, r2
 8003410:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2207      	movs	r2, #7
 8003420:	4393      	bics	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b30      	cmp	r3, #48	; 0x30
 800343c:	d05a      	beq.n	80034f4 <TIM_SlaveTimer_SetConfig+0xfc>
 800343e:	d806      	bhi.n	800344e <TIM_SlaveTimer_SetConfig+0x56>
 8003440:	2b10      	cmp	r3, #16
 8003442:	d057      	beq.n	80034f4 <TIM_SlaveTimer_SetConfig+0xfc>
 8003444:	2b20      	cmp	r3, #32
 8003446:	d055      	beq.n	80034f4 <TIM_SlaveTimer_SetConfig+0xfc>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d053      	beq.n	80034f4 <TIM_SlaveTimer_SetConfig+0xfc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800344c:	e053      	b.n	80034f6 <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 800344e:	2b50      	cmp	r3, #80	; 0x50
 8003450:	d03c      	beq.n	80034cc <TIM_SlaveTimer_SetConfig+0xd4>
 8003452:	d802      	bhi.n	800345a <TIM_SlaveTimer_SetConfig+0x62>
 8003454:	2b40      	cmp	r3, #64	; 0x40
 8003456:	d010      	beq.n	800347a <TIM_SlaveTimer_SetConfig+0x82>
      break;
 8003458:	e04d      	b.n	80034f6 <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 800345a:	2b60      	cmp	r3, #96	; 0x60
 800345c:	d040      	beq.n	80034e0 <TIM_SlaveTimer_SetConfig+0xe8>
 800345e:	2b70      	cmp	r3, #112	; 0x70
 8003460:	d000      	beq.n	8003464 <TIM_SlaveTimer_SetConfig+0x6c>
      break;
 8003462:	e048      	b.n	80034f6 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68d9      	ldr	r1, [r3, #12]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f000 f8be 	bl	80035f4 <TIM_ETR_SetConfig>
      break;
 8003478:	e03d      	b.n	80034f6 <TIM_SlaveTimer_SetConfig+0xfe>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b05      	cmp	r3, #5
 8003480:	d101      	bne.n	8003486 <TIM_SlaveTimer_SetConfig+0x8e>
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e038      	b.n	80034f8 <TIM_SlaveTimer_SetConfig+0x100>
      tmpccer = htim->Instance->CCER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6a1a      	ldr	r2, [r3, #32]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2101      	movs	r1, #1
 800349a:	438a      	bics	r2, r1
 800349c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	22f0      	movs	r2, #240	; 0xf0
 80034aa:	4393      	bics	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	621a      	str	r2, [r3, #32]
      break;
 80034ca:	e014      	b.n	80034f6 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	6899      	ldr	r1, [r3, #8]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	001a      	movs	r2, r3
 80034da:	f000 f811 	bl	8003500 <TIM_TI1_ConfigInputStage>
      break;
 80034de:	e00a      	b.n	80034f6 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6899      	ldr	r1, [r3, #8]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	001a      	movs	r2, r3
 80034ee:	f000 f835 	bl	800355c <TIM_TI2_ConfigInputStage>
      break;
 80034f2:	e000      	b.n	80034f6 <TIM_SlaveTimer_SetConfig+0xfe>
      break;
 80034f4:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b006      	add	sp, #24
 80034fe:	bd80      	pop	{r7, pc}

08003500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	2201      	movs	r2, #1
 8003518:	4393      	bics	r3, r2
 800351a:	001a      	movs	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	22f0      	movs	r2, #240	; 0xf0
 800352a:	4393      	bics	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	220a      	movs	r2, #10
 800353c:	4393      	bics	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	621a      	str	r2, [r3, #32]
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b006      	add	sp, #24
 800355a:	bd80      	pop	{r7, pc}

0800355c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	2210      	movs	r2, #16
 800356e:	4393      	bics	r3, r2
 8003570:	001a      	movs	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	4a0d      	ldr	r2, [pc, #52]	; (80035bc <TIM_TI2_ConfigInputStage+0x60>)
 8003586:	4013      	ands	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	031b      	lsls	r3, r3, #12
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	22a0      	movs	r2, #160	; 0xa0
 8003598:	4393      	bics	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	621a      	str	r2, [r3, #32]
}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b006      	add	sp, #24
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	ffff0fff 	.word	0xffff0fff

080035c0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2270      	movs	r2, #112	; 0x70
 80035d4:	4393      	bics	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	2207      	movs	r2, #7
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	609a      	str	r2, [r3, #8]
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b004      	add	sp, #16
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	4a09      	ldr	r2, [pc, #36]	; (8003630 <TIM_ETR_SetConfig+0x3c>)
 800360c:	4013      	ands	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	021a      	lsls	r2, r3, #8
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	431a      	orrs	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4313      	orrs	r3, r2
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	609a      	str	r2, [r3, #8]
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b006      	add	sp, #24
 800362e:	bd80      	pop	{r7, pc}
 8003630:	ffff00ff 	.word	0xffff00ff

08003634 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	221f      	movs	r2, #31
 8003644:	4013      	ands	r3, r2
 8003646:	2201      	movs	r2, #1
 8003648:	409a      	lsls	r2, r3
 800364a:	0013      	movs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	43d2      	mvns	r2, r2
 8003656:	401a      	ands	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1a      	ldr	r2, [r3, #32]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	211f      	movs	r1, #31
 8003664:	400b      	ands	r3, r1
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4099      	lsls	r1, r3
 800366a:	000b      	movs	r3, r1
 800366c:	431a      	orrs	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	621a      	str	r2, [r3, #32]
}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	46bd      	mov	sp, r7
 8003676:	b006      	add	sp, #24
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2238      	movs	r2, #56	; 0x38
 8003688:	5c9b      	ldrb	r3, [r3, r2]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800368e:	2302      	movs	r3, #2
 8003690:	e032      	b.n	80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2238      	movs	r2, #56	; 0x38
 8003696:	2101      	movs	r1, #1
 8003698:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2239      	movs	r2, #57	; 0x39
 800369e:	2102      	movs	r1, #2
 80036a0:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2270      	movs	r2, #112	; 0x70
 80036b6:	4393      	bics	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2280      	movs	r2, #128	; 0x80
 80036c8:	4393      	bics	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2239      	movs	r2, #57	; 0x39
 80036ea:	2101      	movs	r1, #1
 80036ec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2238      	movs	r2, #56	; 0x38
 80036f2:	2100      	movs	r1, #0
 80036f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	0018      	movs	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b004      	add	sp, #16
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2238      	movs	r2, #56	; 0x38
 800370e:	5c9b      	ldrb	r3, [r3, r2]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_TIMEx_RemapConfig+0x18>
 8003714:	2302      	movs	r3, #2
 8003716:	e00c      	b.n	8003732 <HAL_TIMEx_RemapConfig+0x32>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2238      	movs	r2, #56	; 0x38
 800371c:	2101      	movs	r1, #1
 800371e:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2238      	movs	r2, #56	; 0x38
 800372c:	2100      	movs	r1, #0
 800372e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b002      	add	sp, #8
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e044      	b.n	80037d8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003752:	2b00      	cmp	r3, #0
 8003754:	d107      	bne.n	8003766 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2270      	movs	r2, #112	; 0x70
 800375a:	2100      	movs	r1, #0
 800375c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	0018      	movs	r0, r3
 8003762:	f001 fda1 	bl	80052a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2224      	movs	r2, #36	; 0x24
 800376a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2101      	movs	r1, #1
 8003778:	438a      	bics	r2, r1
 800377a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	0018      	movs	r0, r3
 8003780:	f000 f8d8 	bl	8003934 <UART_SetConfig>
 8003784:	0003      	movs	r3, r0
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e024      	b.n	80037d8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	0018      	movs	r0, r3
 800379a:	f000 fbff 	bl	8003f9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	490d      	ldr	r1, [pc, #52]	; (80037e0 <HAL_UART_Init+0xa4>)
 80037aa:	400a      	ands	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	212a      	movs	r1, #42	; 0x2a
 80037ba:	438a      	bics	r2, r1
 80037bc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2101      	movs	r1, #1
 80037ca:	430a      	orrs	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	0018      	movs	r0, r3
 80037d2:	f000 fc97 	bl	8004104 <UART_CheckIdleState>
 80037d6:	0003      	movs	r3, r0
}
 80037d8:	0018      	movs	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	b002      	add	sp, #8
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	ffffb7ff 	.word	0xffffb7ff

080037e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	; 0x28
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	1dbb      	adds	r3, r7, #6
 80037f2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d000      	beq.n	80037fe <HAL_UART_Transmit+0x1a>
 80037fc:	e094      	b.n	8003928 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_UART_Transmit+0x28>
 8003804:	1dbb      	adds	r3, r7, #6
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e08c      	b.n	800392a <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	2380      	movs	r3, #128	; 0x80
 8003816:	015b      	lsls	r3, r3, #5
 8003818:	429a      	cmp	r2, r3
 800381a:	d109      	bne.n	8003830 <HAL_UART_Transmit+0x4c>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d105      	bne.n	8003830 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2201      	movs	r2, #1
 8003828:	4013      	ands	r3, r2
 800382a:	d001      	beq.n	8003830 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e07c      	b.n	800392a <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2270      	movs	r2, #112	; 0x70
 8003834:	5c9b      	ldrb	r3, [r3, r2]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_UART_Transmit+0x5a>
 800383a:	2302      	movs	r3, #2
 800383c:	e075      	b.n	800392a <HAL_UART_Transmit+0x146>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2270      	movs	r2, #112	; 0x70
 8003842:	2101      	movs	r1, #1
 8003844:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2221      	movs	r2, #33	; 0x21
 8003850:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003852:	f7fd fad7 	bl	8000e04 <HAL_GetTick>
 8003856:	0003      	movs	r3, r0
 8003858:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1dba      	adds	r2, r7, #6
 800385e:	2150      	movs	r1, #80	; 0x50
 8003860:	8812      	ldrh	r2, [r2, #0]
 8003862:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1dba      	adds	r2, r7, #6
 8003868:	2152      	movs	r1, #82	; 0x52
 800386a:	8812      	ldrh	r2, [r2, #0]
 800386c:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	015b      	lsls	r3, r3, #5
 8003876:	429a      	cmp	r2, r3
 8003878:	d108      	bne.n	800388c <HAL_UART_Transmit+0xa8>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d104      	bne.n	800388c <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	e003      	b.n	8003894 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003890:	2300      	movs	r3, #0
 8003892:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003894:	e02c      	b.n	80038f0 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	0013      	movs	r3, r2
 80038a0:	2200      	movs	r2, #0
 80038a2:	2180      	movs	r1, #128	; 0x80
 80038a4:	f000 fc74 	bl	8004190 <UART_WaitOnFlagUntilTimeout>
 80038a8:	1e03      	subs	r3, r0, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e03c      	b.n	800392a <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	001a      	movs	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	05d2      	lsls	r2, r2, #23
 80038c2:	0dd2      	lsrs	r2, r2, #23
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	3302      	adds	r3, #2
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	e007      	b.n	80038de <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	781a      	ldrb	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	3301      	adds	r3, #1
 80038dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2252      	movs	r2, #82	; 0x52
 80038e2:	5a9b      	ldrh	r3, [r3, r2]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b299      	uxth	r1, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2252      	movs	r2, #82	; 0x52
 80038ee:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2252      	movs	r2, #82	; 0x52
 80038f4:	5a9b      	ldrh	r3, [r3, r2]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1cc      	bne.n	8003896 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	0013      	movs	r3, r2
 8003906:	2200      	movs	r2, #0
 8003908:	2140      	movs	r1, #64	; 0x40
 800390a:	f000 fc41 	bl	8004190 <UART_WaitOnFlagUntilTimeout>
 800390e:	1e03      	subs	r3, r0, #0
 8003910:	d001      	beq.n	8003916 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e009      	b.n	800392a <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2220      	movs	r2, #32
 800391a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2270      	movs	r2, #112	; 0x70
 8003920:	2100      	movs	r1, #0
 8003922:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	e000      	b.n	800392a <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8003928:	2302      	movs	r3, #2
  }
}
 800392a:	0018      	movs	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	b008      	add	sp, #32
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003934:	b5b0      	push	{r4, r5, r7, lr}
 8003936:	b08e      	sub	sp, #56	; 0x38
 8003938:	af00      	add	r7, sp, #0
 800393a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800393c:	231b      	movs	r3, #27
 800393e:	2218      	movs	r2, #24
 8003940:	4694      	mov	ip, r2
 8003942:	44bc      	add	ip, r7
 8003944:	4463      	add	r3, ip
 8003946:	2210      	movs	r2, #16
 8003948:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800394a:	2300      	movs	r3, #0
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800394e:	2313      	movs	r3, #19
 8003950:	2218      	movs	r2, #24
 8003952:	4694      	mov	ip, r2
 8003954:	44bc      	add	ip, r7
 8003956:	4463      	add	r3, ip
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800395c:	2300      	movs	r3, #0
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	431a      	orrs	r2, r3
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	431a      	orrs	r2, r3
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	4313      	orrs	r3, r2
 8003976:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4aca      	ldr	r2, [pc, #808]	; (8003ca8 <UART_SetConfig+0x374>)
 8003980:	4013      	ands	r3, r2
 8003982:	0019      	movs	r1, r3
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800398a:	430a      	orrs	r2, r1
 800398c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4ac5      	ldr	r2, [pc, #788]	; (8003cac <UART_SetConfig+0x378>)
 8003996:	4013      	ands	r3, r2
 8003998:	0019      	movs	r1, r3
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4abf      	ldr	r2, [pc, #764]	; (8003cb0 <UART_SetConfig+0x37c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d004      	beq.n	80039c0 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039bc:	4313      	orrs	r3, r2
 80039be:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	4abb      	ldr	r2, [pc, #748]	; (8003cb4 <UART_SetConfig+0x380>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	0019      	movs	r1, r3
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039d2:	430a      	orrs	r2, r1
 80039d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4ab7      	ldr	r2, [pc, #732]	; (8003cb8 <UART_SetConfig+0x384>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d134      	bne.n	8003a4a <UART_SetConfig+0x116>
 80039e0:	4bb6      	ldr	r3, [pc, #728]	; (8003cbc <UART_SetConfig+0x388>)
 80039e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e4:	2203      	movs	r2, #3
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d015      	beq.n	8003a18 <UART_SetConfig+0xe4>
 80039ec:	d304      	bcc.n	80039f8 <UART_SetConfig+0xc4>
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d00a      	beq.n	8003a08 <UART_SetConfig+0xd4>
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d018      	beq.n	8003a28 <UART_SetConfig+0xf4>
 80039f6:	e01f      	b.n	8003a38 <UART_SetConfig+0x104>
 80039f8:	231b      	movs	r3, #27
 80039fa:	2218      	movs	r2, #24
 80039fc:	4694      	mov	ip, r2
 80039fe:	44bc      	add	ip, r7
 8003a00:	4463      	add	r3, ip
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	e0c5      	b.n	8003b94 <UART_SetConfig+0x260>
 8003a08:	231b      	movs	r3, #27
 8003a0a:	2218      	movs	r2, #24
 8003a0c:	4694      	mov	ip, r2
 8003a0e:	44bc      	add	ip, r7
 8003a10:	4463      	add	r3, ip
 8003a12:	2202      	movs	r2, #2
 8003a14:	701a      	strb	r2, [r3, #0]
 8003a16:	e0bd      	b.n	8003b94 <UART_SetConfig+0x260>
 8003a18:	231b      	movs	r3, #27
 8003a1a:	2218      	movs	r2, #24
 8003a1c:	4694      	mov	ip, r2
 8003a1e:	44bc      	add	ip, r7
 8003a20:	4463      	add	r3, ip
 8003a22:	2204      	movs	r2, #4
 8003a24:	701a      	strb	r2, [r3, #0]
 8003a26:	e0b5      	b.n	8003b94 <UART_SetConfig+0x260>
 8003a28:	231b      	movs	r3, #27
 8003a2a:	2218      	movs	r2, #24
 8003a2c:	4694      	mov	ip, r2
 8003a2e:	44bc      	add	ip, r7
 8003a30:	4463      	add	r3, ip
 8003a32:	2208      	movs	r2, #8
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	e0ad      	b.n	8003b94 <UART_SetConfig+0x260>
 8003a38:	231b      	movs	r3, #27
 8003a3a:	2218      	movs	r2, #24
 8003a3c:	4694      	mov	ip, r2
 8003a3e:	44bc      	add	ip, r7
 8003a40:	4463      	add	r3, ip
 8003a42:	2210      	movs	r2, #16
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	e0a4      	b.n	8003b94 <UART_SetConfig+0x260>
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a9c      	ldr	r2, [pc, #624]	; (8003cc0 <UART_SetConfig+0x38c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d137      	bne.n	8003ac4 <UART_SetConfig+0x190>
 8003a54:	4b99      	ldr	r3, [pc, #612]	; (8003cbc <UART_SetConfig+0x388>)
 8003a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a58:	220c      	movs	r2, #12
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d018      	beq.n	8003a92 <UART_SetConfig+0x15e>
 8003a60:	d802      	bhi.n	8003a68 <UART_SetConfig+0x134>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <UART_SetConfig+0x13e>
 8003a66:	e024      	b.n	8003ab2 <UART_SetConfig+0x17e>
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d00a      	beq.n	8003a82 <UART_SetConfig+0x14e>
 8003a6c:	2b0c      	cmp	r3, #12
 8003a6e:	d018      	beq.n	8003aa2 <UART_SetConfig+0x16e>
 8003a70:	e01f      	b.n	8003ab2 <UART_SetConfig+0x17e>
 8003a72:	231b      	movs	r3, #27
 8003a74:	2218      	movs	r2, #24
 8003a76:	4694      	mov	ip, r2
 8003a78:	44bc      	add	ip, r7
 8003a7a:	4463      	add	r3, ip
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	e088      	b.n	8003b94 <UART_SetConfig+0x260>
 8003a82:	231b      	movs	r3, #27
 8003a84:	2218      	movs	r2, #24
 8003a86:	4694      	mov	ip, r2
 8003a88:	44bc      	add	ip, r7
 8003a8a:	4463      	add	r3, ip
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	701a      	strb	r2, [r3, #0]
 8003a90:	e080      	b.n	8003b94 <UART_SetConfig+0x260>
 8003a92:	231b      	movs	r3, #27
 8003a94:	2218      	movs	r2, #24
 8003a96:	4694      	mov	ip, r2
 8003a98:	44bc      	add	ip, r7
 8003a9a:	4463      	add	r3, ip
 8003a9c:	2204      	movs	r2, #4
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	e078      	b.n	8003b94 <UART_SetConfig+0x260>
 8003aa2:	231b      	movs	r3, #27
 8003aa4:	2218      	movs	r2, #24
 8003aa6:	4694      	mov	ip, r2
 8003aa8:	44bc      	add	ip, r7
 8003aaa:	4463      	add	r3, ip
 8003aac:	2208      	movs	r2, #8
 8003aae:	701a      	strb	r2, [r3, #0]
 8003ab0:	e070      	b.n	8003b94 <UART_SetConfig+0x260>
 8003ab2:	231b      	movs	r3, #27
 8003ab4:	2218      	movs	r2, #24
 8003ab6:	4694      	mov	ip, r2
 8003ab8:	44bc      	add	ip, r7
 8003aba:	4463      	add	r3, ip
 8003abc:	2210      	movs	r2, #16
 8003abe:	701a      	strb	r2, [r3, #0]
 8003ac0:	46c0      	nop			; (mov r8, r8)
 8003ac2:	e067      	b.n	8003b94 <UART_SetConfig+0x260>
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a7e      	ldr	r2, [pc, #504]	; (8003cc4 <UART_SetConfig+0x390>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d107      	bne.n	8003ade <UART_SetConfig+0x1aa>
 8003ace:	231b      	movs	r3, #27
 8003ad0:	2218      	movs	r2, #24
 8003ad2:	4694      	mov	ip, r2
 8003ad4:	44bc      	add	ip, r7
 8003ad6:	4463      	add	r3, ip
 8003ad8:	2200      	movs	r2, #0
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	e05a      	b.n	8003b94 <UART_SetConfig+0x260>
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a79      	ldr	r2, [pc, #484]	; (8003cc8 <UART_SetConfig+0x394>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d107      	bne.n	8003af8 <UART_SetConfig+0x1c4>
 8003ae8:	231b      	movs	r3, #27
 8003aea:	2218      	movs	r2, #24
 8003aec:	4694      	mov	ip, r2
 8003aee:	44bc      	add	ip, r7
 8003af0:	4463      	add	r3, ip
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	e04d      	b.n	8003b94 <UART_SetConfig+0x260>
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a6c      	ldr	r2, [pc, #432]	; (8003cb0 <UART_SetConfig+0x37c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d141      	bne.n	8003b86 <UART_SetConfig+0x252>
 8003b02:	4b6e      	ldr	r3, [pc, #440]	; (8003cbc <UART_SetConfig+0x388>)
 8003b04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b06:	23c0      	movs	r3, #192	; 0xc0
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2280      	movs	r2, #128	; 0x80
 8003b0e:	00d2      	lsls	r2, r2, #3
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d01f      	beq.n	8003b54 <UART_SetConfig+0x220>
 8003b14:	2280      	movs	r2, #128	; 0x80
 8003b16:	00d2      	lsls	r2, r2, #3
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d802      	bhi.n	8003b22 <UART_SetConfig+0x1ee>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d009      	beq.n	8003b34 <UART_SetConfig+0x200>
 8003b20:	e028      	b.n	8003b74 <UART_SetConfig+0x240>
 8003b22:	2280      	movs	r2, #128	; 0x80
 8003b24:	0112      	lsls	r2, r2, #4
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00c      	beq.n	8003b44 <UART_SetConfig+0x210>
 8003b2a:	22c0      	movs	r2, #192	; 0xc0
 8003b2c:	0112      	lsls	r2, r2, #4
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d018      	beq.n	8003b64 <UART_SetConfig+0x230>
 8003b32:	e01f      	b.n	8003b74 <UART_SetConfig+0x240>
 8003b34:	231b      	movs	r3, #27
 8003b36:	2218      	movs	r2, #24
 8003b38:	4694      	mov	ip, r2
 8003b3a:	44bc      	add	ip, r7
 8003b3c:	4463      	add	r3, ip
 8003b3e:	2200      	movs	r2, #0
 8003b40:	701a      	strb	r2, [r3, #0]
 8003b42:	e027      	b.n	8003b94 <UART_SetConfig+0x260>
 8003b44:	231b      	movs	r3, #27
 8003b46:	2218      	movs	r2, #24
 8003b48:	4694      	mov	ip, r2
 8003b4a:	44bc      	add	ip, r7
 8003b4c:	4463      	add	r3, ip
 8003b4e:	2202      	movs	r2, #2
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	e01f      	b.n	8003b94 <UART_SetConfig+0x260>
 8003b54:	231b      	movs	r3, #27
 8003b56:	2218      	movs	r2, #24
 8003b58:	4694      	mov	ip, r2
 8003b5a:	44bc      	add	ip, r7
 8003b5c:	4463      	add	r3, ip
 8003b5e:	2204      	movs	r2, #4
 8003b60:	701a      	strb	r2, [r3, #0]
 8003b62:	e017      	b.n	8003b94 <UART_SetConfig+0x260>
 8003b64:	231b      	movs	r3, #27
 8003b66:	2218      	movs	r2, #24
 8003b68:	4694      	mov	ip, r2
 8003b6a:	44bc      	add	ip, r7
 8003b6c:	4463      	add	r3, ip
 8003b6e:	2208      	movs	r2, #8
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	e00f      	b.n	8003b94 <UART_SetConfig+0x260>
 8003b74:	231b      	movs	r3, #27
 8003b76:	2218      	movs	r2, #24
 8003b78:	4694      	mov	ip, r2
 8003b7a:	44bc      	add	ip, r7
 8003b7c:	4463      	add	r3, ip
 8003b7e:	2210      	movs	r2, #16
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	e006      	b.n	8003b94 <UART_SetConfig+0x260>
 8003b86:	231b      	movs	r3, #27
 8003b88:	2218      	movs	r2, #24
 8003b8a:	4694      	mov	ip, r2
 8003b8c:	44bc      	add	ip, r7
 8003b8e:	4463      	add	r3, ip
 8003b90:	2210      	movs	r2, #16
 8003b92:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a45      	ldr	r2, [pc, #276]	; (8003cb0 <UART_SetConfig+0x37c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d000      	beq.n	8003ba0 <UART_SetConfig+0x26c>
 8003b9e:	e09d      	b.n	8003cdc <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ba0:	231b      	movs	r3, #27
 8003ba2:	2218      	movs	r2, #24
 8003ba4:	4694      	mov	ip, r2
 8003ba6:	44bc      	add	ip, r7
 8003ba8:	4463      	add	r3, ip
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d00d      	beq.n	8003bcc <UART_SetConfig+0x298>
 8003bb0:	dc02      	bgt.n	8003bb8 <UART_SetConfig+0x284>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <UART_SetConfig+0x28e>
 8003bb6:	e01d      	b.n	8003bf4 <UART_SetConfig+0x2c0>
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d012      	beq.n	8003be2 <UART_SetConfig+0x2ae>
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d015      	beq.n	8003bec <UART_SetConfig+0x2b8>
 8003bc0:	e018      	b.n	8003bf4 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003bc2:	f7fe fc69 	bl	8002498 <HAL_RCC_GetPCLK1Freq>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bca:	e01b      	b.n	8003c04 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bcc:	4b3b      	ldr	r3, [pc, #236]	; (8003cbc <UART_SetConfig+0x388>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d002      	beq.n	8003bdc <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8003bd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ccc <UART_SetConfig+0x398>)
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8003bda:	e013      	b.n	8003c04 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003bdc:	4b3c      	ldr	r3, [pc, #240]	; (8003cd0 <UART_SetConfig+0x39c>)
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003be0:	e010      	b.n	8003c04 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003be2:	f7fe fbcb 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8003be6:	0003      	movs	r3, r0
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bea:	e00b      	b.n	8003c04 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bf2:	e007      	b.n	8003c04 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003bf4:	2313      	movs	r3, #19
 8003bf6:	2218      	movs	r2, #24
 8003bf8:	4694      	mov	ip, r2
 8003bfa:	44bc      	add	ip, r7
 8003bfc:	4463      	add	r3, ip
 8003bfe:	2201      	movs	r2, #1
 8003c00:	701a      	strb	r2, [r3, #0]
        break;
 8003c02:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d100      	bne.n	8003c0c <UART_SetConfig+0x2d8>
 8003c0a:	e1a6      	b.n	8003f5a <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	0013      	movs	r3, r2
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	189b      	adds	r3, r3, r2
 8003c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d305      	bcc.n	8003c28 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d907      	bls.n	8003c38 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8003c28:	2313      	movs	r3, #19
 8003c2a:	2218      	movs	r2, #24
 8003c2c:	4694      	mov	ip, r2
 8003c2e:	44bc      	add	ip, r7
 8003c30:	4463      	add	r3, ip
 8003c32:	2201      	movs	r2, #1
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	e190      	b.n	8003f5a <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	6939      	ldr	r1, [r7, #16]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	000b      	movs	r3, r1
 8003c46:	0e1b      	lsrs	r3, r3, #24
 8003c48:	0010      	movs	r0, r2
 8003c4a:	0205      	lsls	r5, r0, #8
 8003c4c:	431d      	orrs	r5, r3
 8003c4e:	000b      	movs	r3, r1
 8003c50:	021c      	lsls	r4, r3, #8
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	68b8      	ldr	r0, [r7, #8]
 8003c60:	68f9      	ldr	r1, [r7, #12]
 8003c62:	1900      	adds	r0, r0, r4
 8003c64:	4169      	adcs	r1, r5
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f7fc fad4 	bl	8000220 <__aeabi_uldivmod>
 8003c78:	0003      	movs	r3, r0
 8003c7a:	000c      	movs	r4, r1
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <UART_SetConfig+0x3a0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d908      	bls.n	8003c98 <UART_SetConfig+0x364>
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <UART_SetConfig+0x3a4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d804      	bhi.n	8003c98 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c94:	60da      	str	r2, [r3, #12]
 8003c96:	e160      	b.n	8003f5a <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8003c98:	2313      	movs	r3, #19
 8003c9a:	2218      	movs	r2, #24
 8003c9c:	4694      	mov	ip, r2
 8003c9e:	44bc      	add	ip, r7
 8003ca0:	4463      	add	r3, ip
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	e158      	b.n	8003f5a <UART_SetConfig+0x626>
 8003ca8:	efff69f3 	.word	0xefff69f3
 8003cac:	ffffcfff 	.word	0xffffcfff
 8003cb0:	40004800 	.word	0x40004800
 8003cb4:	fffff4ff 	.word	0xfffff4ff
 8003cb8:	40013800 	.word	0x40013800
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40004400 	.word	0x40004400
 8003cc4:	40004c00 	.word	0x40004c00
 8003cc8:	40005000 	.word	0x40005000
 8003ccc:	003d0900 	.word	0x003d0900
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	000002ff 	.word	0x000002ff
 8003cd8:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d000      	beq.n	8003cea <UART_SetConfig+0x3b6>
 8003ce8:	e0a9      	b.n	8003e3e <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8003cea:	231b      	movs	r3, #27
 8003cec:	2218      	movs	r2, #24
 8003cee:	4694      	mov	ip, r2
 8003cf0:	44bc      	add	ip, r7
 8003cf2:	4463      	add	r3, ip
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d86d      	bhi.n	8003dd6 <UART_SetConfig+0x4a2>
 8003cfa:	009a      	lsls	r2, r3, #2
 8003cfc:	4b9f      	ldr	r3, [pc, #636]	; (8003f7c <UART_SetConfig+0x648>)
 8003cfe:	18d3      	adds	r3, r2, r3
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003d04:	f7fe fbc8 	bl	8002498 <HAL_RCC_GetPCLK1Freq>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	005a      	lsls	r2, r3, #1
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	18d2      	adds	r2, r2, r3
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	0019      	movs	r1, r3
 8003d1a:	0010      	movs	r0, r2
 8003d1c:	f7fc f9f4 	bl	8000108 <__udivsi3>
 8003d20:	0003      	movs	r3, r0
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d26:	e05e      	b.n	8003de6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003d28:	f7fe fbcc 	bl	80024c4 <HAL_RCC_GetPCLK2Freq>
 8003d2c:	0003      	movs	r3, r0
 8003d2e:	005a      	lsls	r2, r3, #1
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	18d2      	adds	r2, r2, r3
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	0010      	movs	r0, r2
 8003d40:	f7fc f9e2 	bl	8000108 <__udivsi3>
 8003d44:	0003      	movs	r3, r0
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d4a:	e04c      	b.n	8003de6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d4c:	4b8c      	ldr	r3, [pc, #560]	; (8003f80 <UART_SetConfig+0x64c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2210      	movs	r2, #16
 8003d52:	4013      	ands	r3, r2
 8003d54:	d00e      	beq.n	8003d74 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	4a89      	ldr	r2, [pc, #548]	; (8003f84 <UART_SetConfig+0x650>)
 8003d5e:	189a      	adds	r2, r3, r2
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	0019      	movs	r1, r3
 8003d66:	0010      	movs	r0, r2
 8003d68:	f7fc f9ce 	bl	8000108 <__udivsi3>
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003d72:	e038      	b.n	8003de6 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	085b      	lsrs	r3, r3, #1
 8003d7a:	4a83      	ldr	r2, [pc, #524]	; (8003f88 <UART_SetConfig+0x654>)
 8003d7c:	189a      	adds	r2, r3, r2
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	0019      	movs	r1, r3
 8003d84:	0010      	movs	r0, r2
 8003d86:	f7fc f9bf 	bl	8000108 <__udivsi3>
 8003d8a:	0003      	movs	r3, r0
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d90:	e029      	b.n	8003de6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003d92:	f7fe faf3 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8003d96:	0003      	movs	r3, r0
 8003d98:	005a      	lsls	r2, r3, #1
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	18d2      	adds	r2, r2, r3
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	0019      	movs	r1, r3
 8003da8:	0010      	movs	r0, r2
 8003daa:	f7fc f9ad 	bl	8000108 <__udivsi3>
 8003dae:	0003      	movs	r3, r0
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003db4:	e017      	b.n	8003de6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	2280      	movs	r2, #128	; 0x80
 8003dbe:	0252      	lsls	r2, r2, #9
 8003dc0:	189a      	adds	r2, r3, r2
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	0019      	movs	r1, r3
 8003dc8:	0010      	movs	r0, r2
 8003dca:	f7fc f99d 	bl	8000108 <__udivsi3>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dd4:	e007      	b.n	8003de6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003dd6:	2313      	movs	r3, #19
 8003dd8:	2218      	movs	r2, #24
 8003dda:	4694      	mov	ip, r2
 8003ddc:	44bc      	add	ip, r7
 8003dde:	4463      	add	r3, ip
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
        break;
 8003de4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	2b0f      	cmp	r3, #15
 8003dea:	d920      	bls.n	8003e2e <UART_SetConfig+0x4fa>
 8003dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dee:	4a67      	ldr	r2, [pc, #412]	; (8003f8c <UART_SetConfig+0x658>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d81c      	bhi.n	8003e2e <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	200a      	movs	r0, #10
 8003dfa:	2418      	movs	r4, #24
 8003dfc:	193b      	adds	r3, r7, r4
 8003dfe:	181b      	adds	r3, r3, r0
 8003e00:	210f      	movs	r1, #15
 8003e02:	438a      	bics	r2, r1
 8003e04:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2207      	movs	r2, #7
 8003e0e:	4013      	ands	r3, r2
 8003e10:	b299      	uxth	r1, r3
 8003e12:	193b      	adds	r3, r7, r4
 8003e14:	181b      	adds	r3, r3, r0
 8003e16:	193a      	adds	r2, r7, r4
 8003e18:	1812      	adds	r2, r2, r0
 8003e1a:	8812      	ldrh	r2, [r2, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	193a      	adds	r2, r7, r4
 8003e26:	1812      	adds	r2, r2, r0
 8003e28:	8812      	ldrh	r2, [r2, #0]
 8003e2a:	60da      	str	r2, [r3, #12]
 8003e2c:	e095      	b.n	8003f5a <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8003e2e:	2313      	movs	r3, #19
 8003e30:	2218      	movs	r2, #24
 8003e32:	4694      	mov	ip, r2
 8003e34:	44bc      	add	ip, r7
 8003e36:	4463      	add	r3, ip
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	e08d      	b.n	8003f5a <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8003e3e:	231b      	movs	r3, #27
 8003e40:	2218      	movs	r2, #24
 8003e42:	4694      	mov	ip, r2
 8003e44:	44bc      	add	ip, r7
 8003e46:	4463      	add	r3, ip
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d86a      	bhi.n	8003f24 <UART_SetConfig+0x5f0>
 8003e4e:	009a      	lsls	r2, r3, #2
 8003e50:	4b4f      	ldr	r3, [pc, #316]	; (8003f90 <UART_SetConfig+0x65c>)
 8003e52:	18d3      	adds	r3, r2, r3
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e58:	f7fe fb1e 	bl	8002498 <HAL_RCC_GetPCLK1Freq>
 8003e5c:	0002      	movs	r2, r0
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	18d2      	adds	r2, r2, r3
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	0019      	movs	r1, r3
 8003e6c:	0010      	movs	r0, r2
 8003e6e:	f7fc f94b 	bl	8000108 <__udivsi3>
 8003e72:	0003      	movs	r3, r0
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e78:	e05c      	b.n	8003f34 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003e7a:	f7fe fb23 	bl	80024c4 <HAL_RCC_GetPCLK2Freq>
 8003e7e:	0002      	movs	r2, r0
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	085b      	lsrs	r3, r3, #1
 8003e86:	18d2      	adds	r2, r2, r3
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	0019      	movs	r1, r3
 8003e8e:	0010      	movs	r0, r2
 8003e90:	f7fc f93a 	bl	8000108 <__udivsi3>
 8003e94:	0003      	movs	r3, r0
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e9a:	e04b      	b.n	8003f34 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e9c:	4b38      	ldr	r3, [pc, #224]	; (8003f80 <UART_SetConfig+0x64c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2210      	movs	r2, #16
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d00e      	beq.n	8003ec4 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	085b      	lsrs	r3, r3, #1
 8003eac:	4a39      	ldr	r2, [pc, #228]	; (8003f94 <UART_SetConfig+0x660>)
 8003eae:	189a      	adds	r2, r3, r2
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	0010      	movs	r0, r2
 8003eb8:	f7fc f926 	bl	8000108 <__udivsi3>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003ec2:	e037      	b.n	8003f34 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	085b      	lsrs	r3, r3, #1
 8003eca:	4a33      	ldr	r2, [pc, #204]	; (8003f98 <UART_SetConfig+0x664>)
 8003ecc:	189a      	adds	r2, r3, r2
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	0010      	movs	r0, r2
 8003ed6:	f7fc f917 	bl	8000108 <__udivsi3>
 8003eda:	0003      	movs	r3, r0
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ee0:	e028      	b.n	8003f34 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003ee2:	f7fe fa4b 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8003ee6:	0002      	movs	r2, r0
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	085b      	lsrs	r3, r3, #1
 8003eee:	18d2      	adds	r2, r2, r3
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	0019      	movs	r1, r3
 8003ef6:	0010      	movs	r0, r2
 8003ef8:	f7fc f906 	bl	8000108 <__udivsi3>
 8003efc:	0003      	movs	r3, r0
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f02:	e017      	b.n	8003f34 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	2280      	movs	r2, #128	; 0x80
 8003f0c:	0212      	lsls	r2, r2, #8
 8003f0e:	189a      	adds	r2, r3, r2
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	0019      	movs	r1, r3
 8003f16:	0010      	movs	r0, r2
 8003f18:	f7fc f8f6 	bl	8000108 <__udivsi3>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f22:	e007      	b.n	8003f34 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003f24:	2313      	movs	r3, #19
 8003f26:	2218      	movs	r2, #24
 8003f28:	4694      	mov	ip, r2
 8003f2a:	44bc      	add	ip, r7
 8003f2c:	4463      	add	r3, ip
 8003f2e:	2201      	movs	r2, #1
 8003f30:	701a      	strb	r2, [r3, #0]
        break;
 8003f32:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f36:	2b0f      	cmp	r3, #15
 8003f38:	d908      	bls.n	8003f4c <UART_SetConfig+0x618>
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	4a13      	ldr	r2, [pc, #76]	; (8003f8c <UART_SetConfig+0x658>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d804      	bhi.n	8003f4c <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f48:	60da      	str	r2, [r3, #12]
 8003f4a:	e006      	b.n	8003f5a <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8003f4c:	2313      	movs	r3, #19
 8003f4e:	2218      	movs	r2, #24
 8003f50:	4694      	mov	ip, r2
 8003f52:	44bc      	add	ip, r7
 8003f54:	4463      	add	r3, ip
 8003f56:	2201      	movs	r2, #1
 8003f58:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2200      	movs	r2, #0
 8003f64:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003f66:	2313      	movs	r3, #19
 8003f68:	2218      	movs	r2, #24
 8003f6a:	4694      	mov	ip, r2
 8003f6c:	44bc      	add	ip, r7
 8003f6e:	4463      	add	r3, ip
 8003f70:	781b      	ldrb	r3, [r3, #0]
}
 8003f72:	0018      	movs	r0, r3
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b00e      	add	sp, #56	; 0x38
 8003f78:	bdb0      	pop	{r4, r5, r7, pc}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	080069e0 	.word	0x080069e0
 8003f80:	40021000 	.word	0x40021000
 8003f84:	007a1200 	.word	0x007a1200
 8003f88:	01e84800 	.word	0x01e84800
 8003f8c:	0000ffff 	.word	0x0000ffff
 8003f90:	08006a04 	.word	0x08006a04
 8003f94:	003d0900 	.word	0x003d0900
 8003f98:	00f42400 	.word	0x00f42400

08003f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	2201      	movs	r2, #1
 8003faa:	4013      	ands	r3, r2
 8003fac:	d00b      	beq.n	8003fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4a4a      	ldr	r2, [pc, #296]	; (80040e0 <UART_AdvFeatureConfig+0x144>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	0019      	movs	r1, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	2202      	movs	r2, #2
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d00b      	beq.n	8003fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4a43      	ldr	r2, [pc, #268]	; (80040e4 <UART_AdvFeatureConfig+0x148>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	0019      	movs	r1, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	2204      	movs	r2, #4
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d00b      	beq.n	800400a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	4a3b      	ldr	r2, [pc, #236]	; (80040e8 <UART_AdvFeatureConfig+0x14c>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	2208      	movs	r2, #8
 8004010:	4013      	ands	r3, r2
 8004012:	d00b      	beq.n	800402c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4a34      	ldr	r2, [pc, #208]	; (80040ec <UART_AdvFeatureConfig+0x150>)
 800401c:	4013      	ands	r3, r2
 800401e:	0019      	movs	r1, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2210      	movs	r2, #16
 8004032:	4013      	ands	r3, r2
 8004034:	d00b      	beq.n	800404e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	4a2c      	ldr	r2, [pc, #176]	; (80040f0 <UART_AdvFeatureConfig+0x154>)
 800403e:	4013      	ands	r3, r2
 8004040:	0019      	movs	r1, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	2220      	movs	r2, #32
 8004054:	4013      	ands	r3, r2
 8004056:	d00b      	beq.n	8004070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	4a25      	ldr	r2, [pc, #148]	; (80040f4 <UART_AdvFeatureConfig+0x158>)
 8004060:	4013      	ands	r3, r2
 8004062:	0019      	movs	r1, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	2240      	movs	r2, #64	; 0x40
 8004076:	4013      	ands	r3, r2
 8004078:	d01d      	beq.n	80040b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4a1d      	ldr	r2, [pc, #116]	; (80040f8 <UART_AdvFeatureConfig+0x15c>)
 8004082:	4013      	ands	r3, r2
 8004084:	0019      	movs	r1, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004096:	2380      	movs	r3, #128	; 0x80
 8004098:	035b      	lsls	r3, r3, #13
 800409a:	429a      	cmp	r2, r3
 800409c:	d10b      	bne.n	80040b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4a15      	ldr	r2, [pc, #84]	; (80040fc <UART_AdvFeatureConfig+0x160>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	0019      	movs	r1, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	4013      	ands	r3, r2
 80040be:	d00b      	beq.n	80040d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <UART_AdvFeatureConfig+0x164>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	0019      	movs	r1, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	605a      	str	r2, [r3, #4]
  }
}
 80040d8:	46c0      	nop			; (mov r8, r8)
 80040da:	46bd      	mov	sp, r7
 80040dc:	b002      	add	sp, #8
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	fffdffff 	.word	0xfffdffff
 80040e4:	fffeffff 	.word	0xfffeffff
 80040e8:	fffbffff 	.word	0xfffbffff
 80040ec:	ffff7fff 	.word	0xffff7fff
 80040f0:	ffffefff 	.word	0xffffefff
 80040f4:	ffffdfff 	.word	0xffffdfff
 80040f8:	ffefffff 	.word	0xffefffff
 80040fc:	ff9fffff 	.word	0xff9fffff
 8004100:	fff7ffff 	.word	0xfff7ffff

08004104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af02      	add	r7, sp, #8
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004112:	f7fc fe77 	bl	8000e04 <HAL_GetTick>
 8004116:	0003      	movs	r3, r0
 8004118:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2208      	movs	r2, #8
 8004122:	4013      	ands	r3, r2
 8004124:	2b08      	cmp	r3, #8
 8004126:	d10d      	bne.n	8004144 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	0399      	lsls	r1, r3, #14
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	4b16      	ldr	r3, [pc, #88]	; (800418c <UART_CheckIdleState+0x88>)
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	0013      	movs	r3, r2
 8004136:	2200      	movs	r2, #0
 8004138:	f000 f82a 	bl	8004190 <UART_WaitOnFlagUntilTimeout>
 800413c:	1e03      	subs	r3, r0, #0
 800413e:	d001      	beq.n	8004144 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e01f      	b.n	8004184 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2204      	movs	r2, #4
 800414c:	4013      	ands	r3, r2
 800414e:	2b04      	cmp	r3, #4
 8004150:	d10d      	bne.n	800416e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	03d9      	lsls	r1, r3, #15
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	4b0c      	ldr	r3, [pc, #48]	; (800418c <UART_CheckIdleState+0x88>)
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	0013      	movs	r3, r2
 8004160:	2200      	movs	r2, #0
 8004162:	f000 f815 	bl	8004190 <UART_WaitOnFlagUntilTimeout>
 8004166:	1e03      	subs	r3, r0, #0
 8004168:	d001      	beq.n	800416e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e00a      	b.n	8004184 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2270      	movs	r2, #112	; 0x70
 800417e:	2100      	movs	r1, #0
 8004180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	0018      	movs	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	b004      	add	sp, #16
 800418a:	bd80      	pop	{r7, pc}
 800418c:	01ffffff 	.word	0x01ffffff

08004190 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	1dfb      	adds	r3, r7, #7
 800419e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a0:	e029      	b.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	3301      	adds	r3, #1
 80041a6:	d026      	beq.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a8:	f7fc fe2c 	bl	8000e04 <HAL_GetTick>
 80041ac:	0002      	movs	r2, r0
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d302      	bcc.n	80041be <UART_WaitOnFlagUntilTimeout+0x2e>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d11b      	bne.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4915      	ldr	r1, [pc, #84]	; (8004220 <UART_WaitOnFlagUntilTimeout+0x90>)
 80041ca:	400a      	ands	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2101      	movs	r1, #1
 80041da:	438a      	bics	r2, r1
 80041dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2270      	movs	r2, #112	; 0x70
 80041ee:	2100      	movs	r1, #0
 80041f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e00f      	b.n	8004216 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	4013      	ands	r3, r2
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	425a      	negs	r2, r3
 8004206:	4153      	adcs	r3, r2
 8004208:	b2db      	uxtb	r3, r3
 800420a:	001a      	movs	r2, r3
 800420c:	1dfb      	adds	r3, r7, #7
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d0c6      	beq.n	80041a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	0018      	movs	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	b004      	add	sp, #16
 800421c:	bd80      	pop	{r7, pc}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	fffffe5f 	.word	0xfffffe5f

08004224 <init_Left>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

void init_Left(){
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
	GPIOA->ODR |= GPIO_PIN_4;
 8004228:	23a0      	movs	r3, #160	; 0xa0
 800422a:	05db      	lsls	r3, r3, #23
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	23a0      	movs	r3, #160	; 0xa0
 8004230:	05db      	lsls	r3, r3, #23
 8004232:	2110      	movs	r1, #16
 8004234:	430a      	orrs	r2, r1
 8004236:	615a      	str	r2, [r3, #20]
}
 8004238:	46c0      	nop			; (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <init_Right>:
void init_Right(){
 800423e:	b580      	push	{r7, lr}
 8004240:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~GPIO_PIN_4;
 8004242:	23a0      	movs	r3, #160	; 0xa0
 8004244:	05db      	lsls	r3, r3, #23
 8004246:	695a      	ldr	r2, [r3, #20]
 8004248:	23a0      	movs	r3, #160	; 0xa0
 800424a:	05db      	lsls	r3, r3, #23
 800424c:	2110      	movs	r1, #16
 800424e:	438a      	bics	r2, r1
 8004250:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= GPIO_PIN_8;
 8004252:	23a0      	movs	r3, #160	; 0xa0
 8004254:	05db      	lsls	r3, r3, #23
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	23a0      	movs	r3, #160	; 0xa0
 800425a:	05db      	lsls	r3, r3, #23
 800425c:	2180      	movs	r1, #128	; 0x80
 800425e:	0049      	lsls	r1, r1, #1
 8004260:	430a      	orrs	r2, r1
 8004262:	615a      	str	r2, [r3, #20]
}
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <init_Straight>:
void init_Straight(){
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~GPIO_PIN_8;
 8004270:	23a0      	movs	r3, #160	; 0xa0
 8004272:	05db      	lsls	r3, r3, #23
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	23a0      	movs	r3, #160	; 0xa0
 8004278:	05db      	lsls	r3, r3, #23
 800427a:	4903      	ldr	r1, [pc, #12]	; (8004288 <init_Straight+0x1c>)
 800427c:	400a      	ands	r2, r1
 800427e:	615a      	str	r2, [r3, #20]
}
 8004280:	46c0      	nop			; (mov r8, r8)
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	fffffeff 	.word	0xfffffeff

0800428c <myTim2Init>:
void myTim2Init(void){
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_IOPAEN;
 8004290:	4b2b      	ldr	r3, [pc, #172]	; (8004340 <myTim2Init+0xb4>)
 8004292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004294:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <myTim2Init+0xb4>)
 8004296:	2101      	movs	r1, #1
 8004298:	430a      	orrs	r2, r1
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800429c:	4b28      	ldr	r3, [pc, #160]	; (8004340 <myTim2Init+0xb4>)
 800429e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a0:	4b27      	ldr	r3, [pc, #156]	; (8004340 <myTim2Init+0xb4>)
 80042a2:	2101      	movs	r1, #1
 80042a4:	430a      	orrs	r2, r1
 80042a6:	639a      	str	r2, [r3, #56]	; 0x38
	GPIOA->MODER |= 2;
 80042a8:	23a0      	movs	r3, #160	; 0xa0
 80042aa:	05db      	lsls	r3, r3, #23
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	23a0      	movs	r3, #160	; 0xa0
 80042b0:	05db      	lsls	r3, r3, #23
 80042b2:	2102      	movs	r1, #2
 80042b4:	430a      	orrs	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= 2;
 80042b8:	23a0      	movs	r3, #160	; 0xa0
 80042ba:	05db      	lsls	r3, r3, #23
 80042bc:	6a1a      	ldr	r2, [r3, #32]
 80042be:	23a0      	movs	r3, #160	; 0xa0
 80042c0:	05db      	lsls	r3, r3, #23
 80042c2:	2102      	movs	r1, #2
 80042c4:	430a      	orrs	r2, r1
 80042c6:	621a      	str	r2, [r3, #32]
	GPIOA->OSPEEDR |= 2;
 80042c8:	23a0      	movs	r3, #160	; 0xa0
 80042ca:	05db      	lsls	r3, r3, #23
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	23a0      	movs	r3, #160	; 0xa0
 80042d0:	05db      	lsls	r3, r3, #23
 80042d2:	2102      	movs	r1, #2
 80042d4:	430a      	orrs	r2, r1
 80042d6:	609a      	str	r2, [r3, #8]
	TIM2->PSC = 20;
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	05db      	lsls	r3, r3, #23
 80042dc:	2214      	movs	r2, #20
 80042de:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 9;
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	05db      	lsls	r3, r3, #23
 80042e4:	2209      	movs	r2, #9
 80042e6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	05db      	lsls	r3, r3, #23
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	2380      	movs	r3, #128	; 0x80
 80042f0:	05db      	lsls	r3, r3, #23
 80042f2:	2160      	movs	r1, #96	; 0x60
 80042f4:	430a      	orrs	r2, r1
 80042f6:	619a      	str	r2, [r3, #24]
	TIM2->CCR1 = 9;
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	05db      	lsls	r3, r3, #23
 80042fc:	2209      	movs	r2, #9
 80042fe:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCER |= 1;
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	05db      	lsls	r3, r3, #23
 8004304:	6a1a      	ldr	r2, [r3, #32]
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	05db      	lsls	r3, r3, #23
 800430a:	2101      	movs	r1, #1
 800430c:	430a      	orrs	r2, r1
 800430e:	621a      	str	r2, [r3, #32]
	TIM2->CR1 |= 1;
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	05db      	lsls	r3, r3, #23
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	2380      	movs	r3, #128	; 0x80
 8004318:	05db      	lsls	r3, r3, #23
 800431a:	2101      	movs	r1, #1
 800431c:	430a      	orrs	r2, r1
 800431e:	601a      	str	r2, [r3, #0]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <myTim2Init+0xb4>)
 8004322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <myTim2Init+0xb4>)
 8004326:	2101      	movs	r1, #1
 8004328:	430a      	orrs	r2, r1
 800432a:	639a      	str	r2, [r3, #56]	; 0x38
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 800432c:	4b04      	ldr	r3, [pc, #16]	; (8004340 <myTim2Init+0xb4>)
 800432e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004330:	4b03      	ldr	r3, [pc, #12]	; (8004340 <myTim2Init+0xb4>)
 8004332:	2110      	movs	r1, #16
 8004334:	430a      	orrs	r2, r1
 8004336:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	40021000 	.word	0x40021000

08004344 <myDMAInit>:
void myDMAInit(uint32_t* buffer, uint32_t length){
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 800434e:	4b35      	ldr	r3, [pc, #212]	; (8004424 <myDMAInit+0xe0>)
 8004350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004352:	4b34      	ldr	r3, [pc, #208]	; (8004424 <myDMAInit+0xe0>)
 8004354:	2101      	movs	r1, #1
 8004356:	430a      	orrs	r2, r1
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
	DMA1_Channel1->CCR &= ~DMA_CCR_MEM2MEM;
 800435a:	4b33      	ldr	r3, [pc, #204]	; (8004428 <myDMAInit+0xe4>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4b32      	ldr	r3, [pc, #200]	; (8004428 <myDMAInit+0xe4>)
 8004360:	4932      	ldr	r1, [pc, #200]	; (800442c <myDMAInit+0xe8>)
 8004362:	400a      	ands	r2, r1
 8004364:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PL;
 8004366:	4b30      	ldr	r3, [pc, #192]	; (8004428 <myDMAInit+0xe4>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b2f      	ldr	r3, [pc, #188]	; (8004428 <myDMAInit+0xe4>)
 800436c:	4930      	ldr	r1, [pc, #192]	; (8004430 <myDMAInit+0xec>)
 800436e:	400a      	ands	r2, r1
 8004370:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_PL_1;
 8004372:	4b2d      	ldr	r3, [pc, #180]	; (8004428 <myDMAInit+0xe4>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b2c      	ldr	r3, [pc, #176]	; (8004428 <myDMAInit+0xe4>)
 8004378:	2180      	movs	r1, #128	; 0x80
 800437a:	0189      	lsls	r1, r1, #6
 800437c:	430a      	orrs	r2, r1
 800437e:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PSIZE;
 8004380:	4b29      	ldr	r3, [pc, #164]	; (8004428 <myDMAInit+0xe4>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4b28      	ldr	r3, [pc, #160]	; (8004428 <myDMAInit+0xe4>)
 8004386:	492b      	ldr	r1, [pc, #172]	; (8004434 <myDMAInit+0xf0>)
 8004388:	400a      	ands	r2, r1
 800438a:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0; // 16bits
 800438c:	4b26      	ldr	r3, [pc, #152]	; (8004428 <myDMAInit+0xe4>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	4b25      	ldr	r3, [pc, #148]	; (8004428 <myDMAInit+0xe4>)
 8004392:	2180      	movs	r1, #128	; 0x80
 8004394:	0049      	lsls	r1, r1, #1
 8004396:	430a      	orrs	r2, r1
 8004398:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_MSIZE;
 800439a:	4b23      	ldr	r3, [pc, #140]	; (8004428 <myDMAInit+0xe4>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4b22      	ldr	r3, [pc, #136]	; (8004428 <myDMAInit+0xe4>)
 80043a0:	4925      	ldr	r1, [pc, #148]	; (8004438 <myDMAInit+0xf4>)
 80043a2:	400a      	ands	r2, r1
 80043a4:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MSIZE_0; // 16bits
 80043a6:	4b20      	ldr	r3, [pc, #128]	; (8004428 <myDMAInit+0xe4>)
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	4b1f      	ldr	r3, [pc, #124]	; (8004428 <myDMAInit+0xe4>)
 80043ac:	2180      	movs	r1, #128	; 0x80
 80043ae:	00c9      	lsls	r1, r1, #3
 80043b0:	430a      	orrs	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PINC;
 80043b4:	4b1c      	ldr	r3, [pc, #112]	; (8004428 <myDMAInit+0xe4>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <myDMAInit+0xe4>)
 80043ba:	2140      	movs	r1, #64	; 0x40
 80043bc:	438a      	bics	r2, r1
 80043be:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <myDMAInit+0xe4>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b18      	ldr	r3, [pc, #96]	; (8004428 <myDMAInit+0xe4>)
 80043c6:	2180      	movs	r1, #128	; 0x80
 80043c8:	430a      	orrs	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_CIRC;
 80043cc:	4b16      	ldr	r3, [pc, #88]	; (8004428 <myDMAInit+0xe4>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	4b15      	ldr	r3, [pc, #84]	; (8004428 <myDMAInit+0xe4>)
 80043d2:	2120      	movs	r1, #32
 80043d4:	438a      	bics	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 80043d8:	4b13      	ldr	r3, [pc, #76]	; (8004428 <myDMAInit+0xe4>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b12      	ldr	r3, [pc, #72]	; (8004428 <myDMAInit+0xe4>)
 80043de:	2120      	movs	r1, #32
 80043e0:	430a      	orrs	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_DIR;
 80043e4:	4b10      	ldr	r3, [pc, #64]	; (8004428 <myDMAInit+0xe4>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b0f      	ldr	r3, [pc, #60]	; (8004428 <myDMAInit+0xe4>)
 80043ea:	2110      	movs	r1, #16
 80043ec:	438a      	bics	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CNDTR = length;
 80043f0:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <myDMAInit+0xe4>)
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	605a      	str	r2, [r3, #4]

	DMA1_Channel1->CPAR = (uint32_t) &(ADC1->DR);
 80043f6:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <myDMAInit+0xe4>)
 80043f8:	4a10      	ldr	r2, [pc, #64]	; (800443c <myDMAInit+0xf8>)
 80043fa:	609a      	str	r2, [r3, #8]

	DMA1_Channel1->CMAR = (uint32_t) buffer;
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <myDMAInit+0xe4>)
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	60da      	str	r2, [r3, #12]

	DMA1_CSELR->CSELR &= ~DMA_CSELR_C1S;
 8004402:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <myDMAInit+0xfc>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4b0e      	ldr	r3, [pc, #56]	; (8004440 <myDMAInit+0xfc>)
 8004408:	210f      	movs	r1, #15
 800440a:	438a      	bics	r2, r1
 800440c:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_EN;
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <myDMAInit+0xe4>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <myDMAInit+0xe4>)
 8004414:	2101      	movs	r1, #1
 8004416:	430a      	orrs	r2, r1
 8004418:	601a      	str	r2, [r3, #0]
}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	46bd      	mov	sp, r7
 800441e:	b002      	add	sp, #8
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	40021000 	.word	0x40021000
 8004428:	40020008 	.word	0x40020008
 800442c:	ffffbfff 	.word	0xffffbfff
 8004430:	ffffcfff 	.word	0xffffcfff
 8004434:	fffffcff 	.word	0xfffffcff
 8004438:	fffff3ff 	.word	0xfffff3ff
 800443c:	40012440 	.word	0x40012440
 8004440:	400200a8 	.word	0x400200a8

08004444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800444a:	f7fc fc85 	bl	8000d58 <HAL_Init>

  /* USER CODE BEGIN Init */
  R_PID.Kp = 500;
 800444e:	4b58      	ldr	r3, [pc, #352]	; (80045b0 <main+0x16c>)
 8004450:	4a58      	ldr	r2, [pc, #352]	; (80045b4 <main+0x170>)
 8004452:	619a      	str	r2, [r3, #24]
  R_PID.Kd = 0;
 8004454:	4b56      	ldr	r3, [pc, #344]	; (80045b0 <main+0x16c>)
 8004456:	2200      	movs	r2, #0
 8004458:	621a      	str	r2, [r3, #32]
  R_PID.Ki = 0;
 800445a:	4b55      	ldr	r3, [pc, #340]	; (80045b0 <main+0x16c>)
 800445c:	2200      	movs	r2, #0
 800445e:	61da      	str	r2, [r3, #28]
  arm_pid_init_f32(&R_PID, 1);
 8004460:	4b53      	ldr	r3, [pc, #332]	; (80045b0 <main+0x16c>)
 8004462:	2101      	movs	r1, #1
 8004464:	0018      	movs	r0, r3
 8004466:	f001 fa28 	bl	80058ba <arm_pid_init_f32>
  L_PID.Kp = 500;
 800446a:	4b53      	ldr	r3, [pc, #332]	; (80045b8 <main+0x174>)
 800446c:	4a51      	ldr	r2, [pc, #324]	; (80045b4 <main+0x170>)
 800446e:	619a      	str	r2, [r3, #24]
  L_PID.Kd = 0;
 8004470:	4b51      	ldr	r3, [pc, #324]	; (80045b8 <main+0x174>)
 8004472:	2200      	movs	r2, #0
 8004474:	621a      	str	r2, [r3, #32]
  L_PID.Ki = 0;
 8004476:	4b50      	ldr	r3, [pc, #320]	; (80045b8 <main+0x174>)
 8004478:	2200      	movs	r2, #0
 800447a:	61da      	str	r2, [r3, #28]
  arm_pid_init_f32(&L_PID, 1);
 800447c:	4b4e      	ldr	r3, [pc, #312]	; (80045b8 <main+0x174>)
 800447e:	2101      	movs	r1, #1
 8004480:	0018      	movs	r0, r3
 8004482:	f001 fa1a 	bl	80058ba <arm_pid_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004486:	f000 f8b5 	bl	80045f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800448a:	f000 fc17 	bl	8004cbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800448e:	f000 fbe5 	bl	8004c5c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8004492:	f000 f9ad 	bl	80047f0 <MX_TIM2_Init>
  MX_TIM6_Init();
 8004496:	f000 fad3 	bl	8004a40 <MX_TIM6_Init>
  MX_TIM21_Init();
 800449a:	f000 fb0d 	bl	8004ab8 <MX_TIM21_Init>
  MX_TIM22_Init();
 800449e:	f000 fb67 	bl	8004b70 <MX_TIM22_Init>
  MX_TIM3_Init();
 80044a2:	f000 fa45 	bl	8004930 <MX_TIM3_Init>
  MX_ADC_Init();
 80044a6:	f000 f911 	bl	80046cc <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  r_enc_setpoint = -1600;
 80044aa:	4b44      	ldr	r3, [pc, #272]	; (80045bc <main+0x178>)
 80044ac:	4a44      	ldr	r2, [pc, #272]	; (80045c0 <main+0x17c>)
 80044ae:	601a      	str	r2, [r3, #0]
//  r_dir = 1;
  l_enc_setpoint = 1600;
 80044b0:	4b44      	ldr	r3, [pc, #272]	; (80045c4 <main+0x180>)
 80044b2:	22c8      	movs	r2, #200	; 0xc8
 80044b4:	00d2      	lsls	r2, r2, #3
 80044b6:	601a      	str	r2, [r3, #0]
//  l_dir = 1;
  printf("Hello...\r\n");
 80044b8:	4b43      	ldr	r3, [pc, #268]	; (80045c8 <main+0x184>)
 80044ba:	0018      	movs	r0, r3
 80044bc:	f001 fd12 	bl	8005ee4 <puts>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80044c0:	4b42      	ldr	r3, [pc, #264]	; (80045cc <main+0x188>)
 80044c2:	2100      	movs	r1, #0
 80044c4:	0018      	movs	r0, r3
 80044c6:	f7fe fa2d 	bl	8002924 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80044ca:	4b40      	ldr	r3, [pc, #256]	; (80045cc <main+0x188>)
 80044cc:	2104      	movs	r1, #4
 80044ce:	0018      	movs	r0, r3
 80044d0:	f7fe fa28 	bl	8002924 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80044d4:	4b3d      	ldr	r3, [pc, #244]	; (80045cc <main+0x188>)
 80044d6:	2108      	movs	r1, #8
 80044d8:	0018      	movs	r0, r3
 80044da:	f7fe fa23 	bl	8002924 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80044de:	4b3b      	ldr	r3, [pc, #236]	; (80045cc <main+0x188>)
 80044e0:	210c      	movs	r1, #12
 80044e2:	0018      	movs	r0, r3
 80044e4:	f7fe fa1e 	bl	8002924 <HAL_TIM_PWM_Start>
//  HAL_ADC_Start_DMA(&hadc, (uint32_t*)buffer, 20);
  myTim2Init();
 80044e8:	f7ff fed0 	bl	800428c <myTim2Init>
  TIM6->CR1 |= 1;
 80044ec:	4b38      	ldr	r3, [pc, #224]	; (80045d0 <main+0x18c>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	4b37      	ldr	r3, [pc, #220]	; (80045d0 <main+0x18c>)
 80044f2:	2101      	movs	r1, #1
 80044f4:	430a      	orrs	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 80044f8:	4b36      	ldr	r3, [pc, #216]	; (80045d4 <main+0x190>)
 80044fa:	0018      	movs	r0, r3
 80044fc:	f7fe f998 	bl	8002830 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim21);
 8004500:	4b35      	ldr	r3, [pc, #212]	; (80045d8 <main+0x194>)
 8004502:	0018      	movs	r0, r3
 8004504:	f7fe f994 	bl	8002830 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim22,TIM_CHANNEL_ALL);
 8004508:	4b34      	ldr	r3, [pc, #208]	; (80045dc <main+0x198>)
 800450a:	213c      	movs	r1, #60	; 0x3c
 800450c:	0018      	movs	r0, r3
 800450e:	f7fe fabf 	bl	8002a90 <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COMPARE(&htim21, TIM_CHANNEL_1, 0);
 8004512:	4b31      	ldr	r3, [pc, #196]	; (80045d8 <main+0x194>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2200      	movs	r2, #0
 8004518:	635a      	str	r2, [r3, #52]	; 0x34

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	603b      	str	r3, [r7, #0]
  int hold = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	607b      	str	r3, [r7, #4]
  myDMAInit((uint32_t*) buffer, 4);
 8004522:	4b2f      	ldr	r3, [pc, #188]	; (80045e0 <main+0x19c>)
 8004524:	2104      	movs	r1, #4
 8004526:	0018      	movs	r0, r3
 8004528:	f7ff ff0c 	bl	8004344 <myDMAInit>
  ADC1->CFGR1 |= ADC_CFGR1_DMACFG;
 800452c:	4b2d      	ldr	r3, [pc, #180]	; (80045e4 <main+0x1a0>)
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <main+0x1a0>)
 8004532:	2102      	movs	r1, #2
 8004534:	430a      	orrs	r2, r1
 8004536:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 |= ADC_CFGR1_DMAEN;
 8004538:	4b2a      	ldr	r3, [pc, #168]	; (80045e4 <main+0x1a0>)
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	4b29      	ldr	r3, [pc, #164]	; (80045e4 <main+0x1a0>)
 800453e:	2101      	movs	r1, #1
 8004540:	430a      	orrs	r2, r1
 8004542:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 |= ADC_CFGR1_CONT;
 8004544:	4b27      	ldr	r3, [pc, #156]	; (80045e4 <main+0x1a0>)
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	4b26      	ldr	r3, [pc, #152]	; (80045e4 <main+0x1a0>)
 800454a:	2180      	movs	r1, #128	; 0x80
 800454c:	0189      	lsls	r1, r1, #6
 800454e:	430a      	orrs	r2, r1
 8004550:	60da      	str	r2, [r3, #12]
  ADC1->IER |= ADC_IER_EOSIE;
 8004552:	4b24      	ldr	r3, [pc, #144]	; (80045e4 <main+0x1a0>)
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	4b23      	ldr	r3, [pc, #140]	; (80045e4 <main+0x1a0>)
 8004558:	2108      	movs	r1, #8
 800455a:	430a      	orrs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]
  ADC1->CR |= ADC_CR_ADEN;
 800455e:	4b21      	ldr	r3, [pc, #132]	; (80045e4 <main+0x1a0>)
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <main+0x1a0>)
 8004564:	2101      	movs	r1, #1
 8004566:	430a      	orrs	r2, r1
 8004568:	609a      	str	r2, [r3, #8]
  ADC1->CR |= ADC_CR_ADSTART;
 800456a:	4b1e      	ldr	r3, [pc, #120]	; (80045e4 <main+0x1a0>)
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	4b1d      	ldr	r3, [pc, #116]	; (80045e4 <main+0x1a0>)
 8004570:	2104      	movs	r1, #4
 8004572:	430a      	orrs	r2, r1
 8004574:	609a      	str	r2, [r3, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	i = TIM22->CNT;
 8004576:	4b1c      	ldr	r3, [pc, #112]	; (80045e8 <main+0x1a4>)
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	603b      	str	r3, [r7, #0]
	HAL_Delay(200);
 800457c:	20c8      	movs	r0, #200	; 0xc8
 800457e:	f7fc fc4b 	bl	8000e18 <HAL_Delay>
//	printf("i = %d\r\n", i);
	if (hold > i){
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	dd06      	ble.n	8004598 <main+0x154>
	printf("turn left\r\n");
 800458a:	4b18      	ldr	r3, [pc, #96]	; (80045ec <main+0x1a8>)
 800458c:	0018      	movs	r0, r3
 800458e:	f001 fca9 	bl	8005ee4 <puts>
	  hold = i;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	607b      	str	r3, [r7, #4]
 8004596:	e7ee      	b.n	8004576 <main+0x132>
	}
	else if (hold < i) {
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	daea      	bge.n	8004576 <main+0x132>
	  printf("turn right\r\n");
 80045a0:	4b13      	ldr	r3, [pc, #76]	; (80045f0 <main+0x1ac>)
 80045a2:	0018      	movs	r0, r3
 80045a4:	f001 fc9e 	bl	8005ee4 <puts>
	  hold = i;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	607b      	str	r3, [r7, #4]
	i = TIM22->CNT;
 80045ac:	e7e3      	b.n	8004576 <main+0x132>
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	200001a4 	.word	0x200001a4
 80045b4:	43fa0000 	.word	0x43fa0000
 80045b8:	200000c0 	.word	0x200000c0
 80045bc:	20000084 	.word	0x20000084
 80045c0:	fffff9c0 	.word	0xfffff9c0
 80045c4:	2000008c 	.word	0x2000008c
 80045c8:	080068a4 	.word	0x080068a4
 80045cc:	200000e8 	.word	0x200000e8
 80045d0:	40001000 	.word	0x40001000
 80045d4:	20000168 	.word	0x20000168
 80045d8:	200002ec 	.word	0x200002ec
 80045dc:	20000124 	.word	0x20000124
 80045e0:	20000160 	.word	0x20000160
 80045e4:	40012400 	.word	0x40012400
 80045e8:	40011400 	.word	0x40011400
 80045ec:	080068b0 	.word	0x080068b0
 80045f0:	080068bc 	.word	0x080068bc

080045f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045f4:	b590      	push	{r4, r7, lr}
 80045f6:	b09f      	sub	sp, #124	; 0x7c
 80045f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045fa:	2440      	movs	r4, #64	; 0x40
 80045fc:	193b      	adds	r3, r7, r4
 80045fe:	0018      	movs	r0, r3
 8004600:	2338      	movs	r3, #56	; 0x38
 8004602:	001a      	movs	r2, r3
 8004604:	2100      	movs	r1, #0
 8004606:	f001 fb43 	bl	8005c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800460a:	232c      	movs	r3, #44	; 0x2c
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	0018      	movs	r0, r3
 8004610:	2314      	movs	r3, #20
 8004612:	001a      	movs	r2, r3
 8004614:	2100      	movs	r1, #0
 8004616:	f001 fb3b 	bl	8005c90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800461a:	1d3b      	adds	r3, r7, #4
 800461c:	0018      	movs	r0, r3
 800461e:	2328      	movs	r3, #40	; 0x28
 8004620:	001a      	movs	r2, r3
 8004622:	2100      	movs	r1, #0
 8004624:	f001 fb34 	bl	8005c90 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004628:	4b26      	ldr	r3, [pc, #152]	; (80046c4 <SystemClock_Config+0xd0>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a26      	ldr	r2, [pc, #152]	; (80046c8 <SystemClock_Config+0xd4>)
 800462e:	401a      	ands	r2, r3
 8004630:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <SystemClock_Config+0xd0>)
 8004632:	2180      	movs	r1, #128	; 0x80
 8004634:	0109      	lsls	r1, r1, #4
 8004636:	430a      	orrs	r2, r1
 8004638:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800463a:	0021      	movs	r1, r4
 800463c:	187b      	adds	r3, r7, r1
 800463e:	2210      	movs	r2, #16
 8004640:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004642:	187b      	adds	r3, r7, r1
 8004644:	2201      	movs	r2, #1
 8004646:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004648:	187b      	adds	r3, r7, r1
 800464a:	2200      	movs	r2, #0
 800464c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800464e:	187b      	adds	r3, r7, r1
 8004650:	22a0      	movs	r2, #160	; 0xa0
 8004652:	0212      	lsls	r2, r2, #8
 8004654:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004656:	187b      	adds	r3, r7, r1
 8004658:	2200      	movs	r2, #0
 800465a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800465c:	187b      	adds	r3, r7, r1
 800465e:	0018      	movs	r0, r3
 8004660:	f7fd f992 	bl	8001988 <HAL_RCC_OscConfig>
 8004664:	1e03      	subs	r3, r0, #0
 8004666:	d001      	beq.n	800466c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8004668:	f000 fc85 	bl	8004f76 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800466c:	212c      	movs	r1, #44	; 0x2c
 800466e:	187b      	adds	r3, r7, r1
 8004670:	220f      	movs	r2, #15
 8004672:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8004674:	187b      	adds	r3, r7, r1
 8004676:	2200      	movs	r2, #0
 8004678:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800467a:	187b      	adds	r3, r7, r1
 800467c:	2200      	movs	r2, #0
 800467e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004680:	187b      	adds	r3, r7, r1
 8004682:	2200      	movs	r2, #0
 8004684:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004686:	187b      	adds	r3, r7, r1
 8004688:	2200      	movs	r2, #0
 800468a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800468c:	187b      	adds	r3, r7, r1
 800468e:	2100      	movs	r1, #0
 8004690:	0018      	movs	r0, r3
 8004692:	f7fd fd49 	bl	8002128 <HAL_RCC_ClockConfig>
 8004696:	1e03      	subs	r3, r0, #0
 8004698:	d001      	beq.n	800469e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800469a:	f000 fc6c 	bl	8004f76 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800469e:	1d3b      	adds	r3, r7, #4
 80046a0:	2202      	movs	r2, #2
 80046a2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80046a4:	1d3b      	adds	r3, r7, #4
 80046a6:	2200      	movs	r2, #0
 80046a8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046aa:	1d3b      	adds	r3, r7, #4
 80046ac:	0018      	movs	r0, r3
 80046ae:	f7fd ff1f 	bl	80024f0 <HAL_RCCEx_PeriphCLKConfig>
 80046b2:	1e03      	subs	r3, r0, #0
 80046b4:	d001      	beq.n	80046ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80046b6:	f000 fc5e 	bl	8004f76 <Error_Handler>
  }
}
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	46bd      	mov	sp, r7
 80046be:	b01f      	add	sp, #124	; 0x7c
 80046c0:	bd90      	pop	{r4, r7, pc}
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	40007000 	.word	0x40007000
 80046c8:	ffffe7ff 	.word	0xffffe7ff

080046cc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80046d2:	003b      	movs	r3, r7
 80046d4:	0018      	movs	r0, r3
 80046d6:	2308      	movs	r3, #8
 80046d8:	001a      	movs	r2, r3
 80046da:	2100      	movs	r1, #0
 80046dc:	f001 fad8 	bl	8005c90 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80046e0:	4b3d      	ldr	r3, [pc, #244]	; (80047d8 <MX_ADC_Init+0x10c>)
 80046e2:	4a3e      	ldr	r2, [pc, #248]	; (80047dc <MX_ADC_Init+0x110>)
 80046e4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80046e6:	4b3c      	ldr	r3, [pc, #240]	; (80047d8 <MX_ADC_Init+0x10c>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80046ec:	4b3a      	ldr	r3, [pc, #232]	; (80047d8 <MX_ADC_Init+0x10c>)
 80046ee:	22c0      	movs	r2, #192	; 0xc0
 80046f0:	0612      	lsls	r2, r2, #24
 80046f2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80046f4:	4b38      	ldr	r3, [pc, #224]	; (80047d8 <MX_ADC_Init+0x10c>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80046fa:	4b37      	ldr	r3, [pc, #220]	; (80047d8 <MX_ADC_Init+0x10c>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004700:	4b35      	ldr	r3, [pc, #212]	; (80047d8 <MX_ADC_Init+0x10c>)
 8004702:	2201      	movs	r2, #1
 8004704:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004706:	4b34      	ldr	r3, [pc, #208]	; (80047d8 <MX_ADC_Init+0x10c>)
 8004708:	2200      	movs	r2, #0
 800470a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 800470c:	4b32      	ldr	r3, [pc, #200]	; (80047d8 <MX_ADC_Init+0x10c>)
 800470e:	2220      	movs	r2, #32
 8004710:	2101      	movs	r1, #1
 8004712:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004714:	4b30      	ldr	r3, [pc, #192]	; (80047d8 <MX_ADC_Init+0x10c>)
 8004716:	2221      	movs	r2, #33	; 0x21
 8004718:	2100      	movs	r1, #0
 800471a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800471c:	4b2e      	ldr	r3, [pc, #184]	; (80047d8 <MX_ADC_Init+0x10c>)
 800471e:	2200      	movs	r2, #0
 8004720:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004722:	4b2d      	ldr	r3, [pc, #180]	; (80047d8 <MX_ADC_Init+0x10c>)
 8004724:	22c2      	movs	r2, #194	; 0xc2
 8004726:	32ff      	adds	r2, #255	; 0xff
 8004728:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800472a:	4b2b      	ldr	r3, [pc, #172]	; (80047d8 <MX_ADC_Init+0x10c>)
 800472c:	222c      	movs	r2, #44	; 0x2c
 800472e:	2100      	movs	r1, #0
 8004730:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004732:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <MX_ADC_Init+0x10c>)
 8004734:	2204      	movs	r2, #4
 8004736:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004738:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <MX_ADC_Init+0x10c>)
 800473a:	2200      	movs	r2, #0
 800473c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800473e:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <MX_ADC_Init+0x10c>)
 8004740:	2200      	movs	r2, #0
 8004742:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004744:	4b24      	ldr	r3, [pc, #144]	; (80047d8 <MX_ADC_Init+0x10c>)
 8004746:	2200      	movs	r2, #0
 8004748:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800474a:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <MX_ADC_Init+0x10c>)
 800474c:	2200      	movs	r2, #0
 800474e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004750:	4b21      	ldr	r3, [pc, #132]	; (80047d8 <MX_ADC_Init+0x10c>)
 8004752:	0018      	movs	r0, r3
 8004754:	f7fc fb7e 	bl	8000e54 <HAL_ADC_Init>
 8004758:	1e03      	subs	r3, r0, #0
 800475a:	d001      	beq.n	8004760 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800475c:	f000 fc0b 	bl	8004f76 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004760:	003b      	movs	r3, r7
 8004762:	4a1f      	ldr	r2, [pc, #124]	; (80047e0 <MX_ADC_Init+0x114>)
 8004764:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004766:	003b      	movs	r3, r7
 8004768:	2280      	movs	r2, #128	; 0x80
 800476a:	0152      	lsls	r2, r2, #5
 800476c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800476e:	003a      	movs	r2, r7
 8004770:	4b19      	ldr	r3, [pc, #100]	; (80047d8 <MX_ADC_Init+0x10c>)
 8004772:	0011      	movs	r1, r2
 8004774:	0018      	movs	r0, r3
 8004776:	f7fc fdad 	bl	80012d4 <HAL_ADC_ConfigChannel>
 800477a:	1e03      	subs	r3, r0, #0
 800477c:	d001      	beq.n	8004782 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800477e:	f000 fbfa 	bl	8004f76 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004782:	003b      	movs	r3, r7
 8004784:	4a17      	ldr	r2, [pc, #92]	; (80047e4 <MX_ADC_Init+0x118>)
 8004786:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004788:	003a      	movs	r2, r7
 800478a:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <MX_ADC_Init+0x10c>)
 800478c:	0011      	movs	r1, r2
 800478e:	0018      	movs	r0, r3
 8004790:	f7fc fda0 	bl	80012d4 <HAL_ADC_ConfigChannel>
 8004794:	1e03      	subs	r3, r0, #0
 8004796:	d001      	beq.n	800479c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8004798:	f000 fbed 	bl	8004f76 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800479c:	003b      	movs	r3, r7
 800479e:	4a12      	ldr	r2, [pc, #72]	; (80047e8 <MX_ADC_Init+0x11c>)
 80047a0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80047a2:	003a      	movs	r2, r7
 80047a4:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <MX_ADC_Init+0x10c>)
 80047a6:	0011      	movs	r1, r2
 80047a8:	0018      	movs	r0, r3
 80047aa:	f7fc fd93 	bl	80012d4 <HAL_ADC_ConfigChannel>
 80047ae:	1e03      	subs	r3, r0, #0
 80047b0:	d001      	beq.n	80047b6 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 80047b2:	f000 fbe0 	bl	8004f76 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80047b6:	003b      	movs	r3, r7
 80047b8:	4a0c      	ldr	r2, [pc, #48]	; (80047ec <MX_ADC_Init+0x120>)
 80047ba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80047bc:	003a      	movs	r2, r7
 80047be:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <MX_ADC_Init+0x10c>)
 80047c0:	0011      	movs	r1, r2
 80047c2:	0018      	movs	r0, r3
 80047c4:	f7fc fd86 	bl	80012d4 <HAL_ADC_ConfigChannel>
 80047c8:	1e03      	subs	r3, r0, #0
 80047ca:	d001      	beq.n	80047d0 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 80047cc:	f000 fbd3 	bl	8004f76 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80047d0:	46c0      	nop			; (mov r8, r8)
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b002      	add	sp, #8
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000284 	.word	0x20000284
 80047dc:	40012400 	.word	0x40012400
 80047e0:	28000400 	.word	0x28000400
 80047e4:	2c000800 	.word	0x2c000800
 80047e8:	30001000 	.word	0x30001000
 80047ec:	34002000 	.word	0x34002000

080047f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b090      	sub	sp, #64	; 0x40
 80047f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047f6:	2330      	movs	r3, #48	; 0x30
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	0018      	movs	r0, r3
 80047fc:	2310      	movs	r3, #16
 80047fe:	001a      	movs	r2, r3
 8004800:	2100      	movs	r1, #0
 8004802:	f001 fa45 	bl	8005c90 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004806:	231c      	movs	r3, #28
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	0018      	movs	r0, r3
 800480c:	2314      	movs	r3, #20
 800480e:	001a      	movs	r2, r3
 8004810:	2100      	movs	r1, #0
 8004812:	f001 fa3d 	bl	8005c90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004816:	2314      	movs	r3, #20
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	0018      	movs	r0, r3
 800481c:	2308      	movs	r3, #8
 800481e:	001a      	movs	r2, r3
 8004820:	2100      	movs	r1, #0
 8004822:	f001 fa35 	bl	8005c90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004826:	1d3b      	adds	r3, r7, #4
 8004828:	0018      	movs	r0, r3
 800482a:	2310      	movs	r3, #16
 800482c:	001a      	movs	r2, r3
 800482e:	2100      	movs	r1, #0
 8004830:	f001 fa2e 	bl	8005c90 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004834:	4b3d      	ldr	r3, [pc, #244]	; (800492c <MX_TIM2_Init+0x13c>)
 8004836:	2280      	movs	r2, #128	; 0x80
 8004838:	05d2      	lsls	r2, r2, #23
 800483a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 800483c:	4b3b      	ldr	r3, [pc, #236]	; (800492c <MX_TIM2_Init+0x13c>)
 800483e:	2214      	movs	r2, #20
 8004840:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004842:	4b3a      	ldr	r3, [pc, #232]	; (800492c <MX_TIM2_Init+0x13c>)
 8004844:	2200      	movs	r2, #0
 8004846:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8004848:	4b38      	ldr	r3, [pc, #224]	; (800492c <MX_TIM2_Init+0x13c>)
 800484a:	2209      	movs	r2, #9
 800484c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800484e:	4b37      	ldr	r3, [pc, #220]	; (800492c <MX_TIM2_Init+0x13c>)
 8004850:	2200      	movs	r2, #0
 8004852:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004854:	4b35      	ldr	r3, [pc, #212]	; (800492c <MX_TIM2_Init+0x13c>)
 8004856:	2200      	movs	r2, #0
 8004858:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800485a:	4b34      	ldr	r3, [pc, #208]	; (800492c <MX_TIM2_Init+0x13c>)
 800485c:	0018      	movs	r0, r3
 800485e:	f7fd ffbb 	bl	80027d8 <HAL_TIM_Base_Init>
 8004862:	1e03      	subs	r3, r0, #0
 8004864:	d001      	beq.n	800486a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8004866:	f000 fb86 	bl	8004f76 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800486a:	2130      	movs	r1, #48	; 0x30
 800486c:	187b      	adds	r3, r7, r1
 800486e:	2280      	movs	r2, #128	; 0x80
 8004870:	0152      	lsls	r2, r2, #5
 8004872:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004874:	187a      	adds	r2, r7, r1
 8004876:	4b2d      	ldr	r3, [pc, #180]	; (800492c <MX_TIM2_Init+0x13c>)
 8004878:	0011      	movs	r1, r2
 800487a:	0018      	movs	r0, r3
 800487c:	f7fe fb2e 	bl	8002edc <HAL_TIM_ConfigClockSource>
 8004880:	1e03      	subs	r3, r0, #0
 8004882:	d001      	beq.n	8004888 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8004884:	f000 fb77 	bl	8004f76 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004888:	4b28      	ldr	r3, [pc, #160]	; (800492c <MX_TIM2_Init+0x13c>)
 800488a:	0018      	movs	r0, r3
 800488c:	f7fe f81e 	bl	80028cc <HAL_TIM_PWM_Init>
 8004890:	1e03      	subs	r3, r0, #0
 8004892:	d001      	beq.n	8004898 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8004894:	f000 fb6f 	bl	8004f76 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8004898:	211c      	movs	r1, #28
 800489a:	187b      	adds	r3, r7, r1
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80048a0:	187b      	adds	r3, r7, r1
 80048a2:	2200      	movs	r2, #0
 80048a4:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80048a6:	187a      	adds	r2, r7, r1
 80048a8:	4b20      	ldr	r3, [pc, #128]	; (800492c <MX_TIM2_Init+0x13c>)
 80048aa:	0011      	movs	r1, r2
 80048ac:	0018      	movs	r0, r3
 80048ae:	f7fe fbd3 	bl	8003058 <HAL_TIM_SlaveConfigSynchro>
 80048b2:	1e03      	subs	r3, r0, #0
 80048b4:	d001      	beq.n	80048ba <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80048b6:	f000 fb5e 	bl	8004f76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048ba:	2114      	movs	r1, #20
 80048bc:	187b      	adds	r3, r7, r1
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048c2:	187b      	adds	r3, r7, r1
 80048c4:	2200      	movs	r2, #0
 80048c6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80048c8:	187a      	adds	r2, r7, r1
 80048ca:	4b18      	ldr	r3, [pc, #96]	; (800492c <MX_TIM2_Init+0x13c>)
 80048cc:	0011      	movs	r1, r2
 80048ce:	0018      	movs	r0, r3
 80048d0:	f7fe fed3 	bl	800367a <HAL_TIMEx_MasterConfigSynchronization>
 80048d4:	1e03      	subs	r3, r0, #0
 80048d6:	d001      	beq.n	80048dc <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80048d8:	f000 fb4d 	bl	8004f76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048dc:	1d3b      	adds	r3, r7, #4
 80048de:	2260      	movs	r2, #96	; 0x60
 80048e0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 9;
 80048e2:	1d3b      	adds	r3, r7, #4
 80048e4:	2209      	movs	r2, #9
 80048e6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048e8:	1d3b      	adds	r3, r7, #4
 80048ea:	2200      	movs	r2, #0
 80048ec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048ee:	1d3b      	adds	r3, r7, #4
 80048f0:	2200      	movs	r2, #0
 80048f2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048f4:	1d39      	adds	r1, r7, #4
 80048f6:	4b0d      	ldr	r3, [pc, #52]	; (800492c <MX_TIM2_Init+0x13c>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	0018      	movs	r0, r3
 80048fc:	f7fe fa36 	bl	8002d6c <HAL_TIM_PWM_ConfigChannel>
 8004900:	1e03      	subs	r3, r0, #0
 8004902:	d001      	beq.n	8004908 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8004904:	f000 fb37 	bl	8004f76 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM3_TI1_GPIO) != HAL_OK)
 8004908:	4b08      	ldr	r3, [pc, #32]	; (800492c <MX_TIM2_Init+0x13c>)
 800490a:	2104      	movs	r1, #4
 800490c:	0018      	movs	r0, r3
 800490e:	f7fe fef7 	bl	8003700 <HAL_TIMEx_RemapConfig>
 8004912:	1e03      	subs	r3, r0, #0
 8004914:	d001      	beq.n	800491a <MX_TIM2_Init+0x12a>
  {
    Error_Handler();
 8004916:	f000 fb2e 	bl	8004f76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800491a:	4b04      	ldr	r3, [pc, #16]	; (800492c <MX_TIM2_Init+0x13c>)
 800491c:	0018      	movs	r0, r3
 800491e:	f000 fc39 	bl	8005194 <HAL_TIM_MspPostInit>

}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	46bd      	mov	sp, r7
 8004926:	b010      	add	sp, #64	; 0x40
 8004928:	bd80      	pop	{r7, pc}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	200001c8 	.word	0x200001c8

08004930 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004936:	2310      	movs	r3, #16
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	0018      	movs	r0, r3
 800493c:	2308      	movs	r3, #8
 800493e:	001a      	movs	r2, r3
 8004940:	2100      	movs	r1, #0
 8004942:	f001 f9a5 	bl	8005c90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004946:	003b      	movs	r3, r7
 8004948:	0018      	movs	r0, r3
 800494a:	2310      	movs	r3, #16
 800494c:	001a      	movs	r2, r3
 800494e:	2100      	movs	r1, #0
 8004950:	f001 f99e 	bl	8005c90 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004954:	4b37      	ldr	r3, [pc, #220]	; (8004a34 <MX_TIM3_Init+0x104>)
 8004956:	4a38      	ldr	r2, [pc, #224]	; (8004a38 <MX_TIM3_Init+0x108>)
 8004958:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800495a:	4b36      	ldr	r3, [pc, #216]	; (8004a34 <MX_TIM3_Init+0x104>)
 800495c:	2200      	movs	r2, #0
 800495e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004960:	4b34      	ldr	r3, [pc, #208]	; (8004a34 <MX_TIM3_Init+0x104>)
 8004962:	2200      	movs	r2, #0
 8004964:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004966:	4b33      	ldr	r3, [pc, #204]	; (8004a34 <MX_TIM3_Init+0x104>)
 8004968:	4a34      	ldr	r2, [pc, #208]	; (8004a3c <MX_TIM3_Init+0x10c>)
 800496a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800496c:	4b31      	ldr	r3, [pc, #196]	; (8004a34 <MX_TIM3_Init+0x104>)
 800496e:	2200      	movs	r2, #0
 8004970:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004972:	4b30      	ldr	r3, [pc, #192]	; (8004a34 <MX_TIM3_Init+0x104>)
 8004974:	2200      	movs	r2, #0
 8004976:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004978:	4b2e      	ldr	r3, [pc, #184]	; (8004a34 <MX_TIM3_Init+0x104>)
 800497a:	0018      	movs	r0, r3
 800497c:	f7fd ffa6 	bl	80028cc <HAL_TIM_PWM_Init>
 8004980:	1e03      	subs	r3, r0, #0
 8004982:	d001      	beq.n	8004988 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004984:	f000 faf7 	bl	8004f76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004988:	2110      	movs	r1, #16
 800498a:	187b      	adds	r3, r7, r1
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004990:	187b      	adds	r3, r7, r1
 8004992:	2200      	movs	r2, #0
 8004994:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004996:	187a      	adds	r2, r7, r1
 8004998:	4b26      	ldr	r3, [pc, #152]	; (8004a34 <MX_TIM3_Init+0x104>)
 800499a:	0011      	movs	r1, r2
 800499c:	0018      	movs	r0, r3
 800499e:	f7fe fe6c 	bl	800367a <HAL_TIMEx_MasterConfigSynchronization>
 80049a2:	1e03      	subs	r3, r0, #0
 80049a4:	d001      	beq.n	80049aa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80049a6:	f000 fae6 	bl	8004f76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049aa:	003b      	movs	r3, r7
 80049ac:	2260      	movs	r2, #96	; 0x60
 80049ae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80049b0:	003b      	movs	r3, r7
 80049b2:	2200      	movs	r2, #0
 80049b4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049b6:	003b      	movs	r3, r7
 80049b8:	2200      	movs	r2, #0
 80049ba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049bc:	003b      	movs	r3, r7
 80049be:	2200      	movs	r2, #0
 80049c0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049c2:	0039      	movs	r1, r7
 80049c4:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <MX_TIM3_Init+0x104>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	0018      	movs	r0, r3
 80049ca:	f7fe f9cf 	bl	8002d6c <HAL_TIM_PWM_ConfigChannel>
 80049ce:	1e03      	subs	r3, r0, #0
 80049d0:	d001      	beq.n	80049d6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80049d2:	f000 fad0 	bl	8004f76 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80049d6:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <MX_TIM3_Init+0x104>)
 80049d8:	2104      	movs	r1, #4
 80049da:	0018      	movs	r0, r3
 80049dc:	f7fe fe90 	bl	8003700 <HAL_TIMEx_RemapConfig>
 80049e0:	1e03      	subs	r3, r0, #0
 80049e2:	d001      	beq.n	80049e8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80049e4:	f000 fac7 	bl	8004f76 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80049e8:	0039      	movs	r1, r7
 80049ea:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <MX_TIM3_Init+0x104>)
 80049ec:	2204      	movs	r2, #4
 80049ee:	0018      	movs	r0, r3
 80049f0:	f7fe f9bc 	bl	8002d6c <HAL_TIM_PWM_ConfigChannel>
 80049f4:	1e03      	subs	r3, r0, #0
 80049f6:	d001      	beq.n	80049fc <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 80049f8:	f000 fabd 	bl	8004f76 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80049fc:	0039      	movs	r1, r7
 80049fe:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <MX_TIM3_Init+0x104>)
 8004a00:	2208      	movs	r2, #8
 8004a02:	0018      	movs	r0, r3
 8004a04:	f7fe f9b2 	bl	8002d6c <HAL_TIM_PWM_ConfigChannel>
 8004a08:	1e03      	subs	r3, r0, #0
 8004a0a:	d001      	beq.n	8004a10 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8004a0c:	f000 fab3 	bl	8004f76 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a10:	0039      	movs	r1, r7
 8004a12:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <MX_TIM3_Init+0x104>)
 8004a14:	220c      	movs	r2, #12
 8004a16:	0018      	movs	r0, r3
 8004a18:	f7fe f9a8 	bl	8002d6c <HAL_TIM_PWM_ConfigChannel>
 8004a1c:	1e03      	subs	r3, r0, #0
 8004a1e:	d001      	beq.n	8004a24 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8004a20:	f000 faa9 	bl	8004f76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004a24:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <MX_TIM3_Init+0x104>)
 8004a26:	0018      	movs	r0, r3
 8004a28:	f000 fbb4 	bl	8005194 <HAL_TIM_MspPostInit>

}
 8004a2c:	46c0      	nop			; (mov r8, r8)
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	b006      	add	sp, #24
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	200000e8 	.word	0x200000e8
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	0000ffff 	.word	0x0000ffff

08004a40 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a46:	003b      	movs	r3, r7
 8004a48:	0018      	movs	r0, r3
 8004a4a:	2308      	movs	r3, #8
 8004a4c:	001a      	movs	r2, r3
 8004a4e:	2100      	movs	r1, #0
 8004a50:	f001 f91e 	bl	8005c90 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004a54:	4b15      	ldr	r3, [pc, #84]	; (8004aac <MX_TIM6_Init+0x6c>)
 8004a56:	4a16      	ldr	r2, [pc, #88]	; (8004ab0 <MX_TIM6_Init+0x70>)
 8004a58:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2099;
 8004a5a:	4b14      	ldr	r3, [pc, #80]	; (8004aac <MX_TIM6_Init+0x6c>)
 8004a5c:	4a15      	ldr	r2, [pc, #84]	; (8004ab4 <MX_TIM6_Init+0x74>)
 8004a5e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a60:	4b12      	ldr	r3, [pc, #72]	; (8004aac <MX_TIM6_Init+0x6c>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 8004a66:	4b11      	ldr	r3, [pc, #68]	; (8004aac <MX_TIM6_Init+0x6c>)
 8004a68:	22f4      	movs	r2, #244	; 0xf4
 8004a6a:	32ff      	adds	r2, #255	; 0xff
 8004a6c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a6e:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <MX_TIM6_Init+0x6c>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004a74:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <MX_TIM6_Init+0x6c>)
 8004a76:	0018      	movs	r0, r3
 8004a78:	f7fd feae 	bl	80027d8 <HAL_TIM_Base_Init>
 8004a7c:	1e03      	subs	r3, r0, #0
 8004a7e:	d001      	beq.n	8004a84 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8004a80:	f000 fa79 	bl	8004f76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a84:	003b      	movs	r3, r7
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a8a:	003b      	movs	r3, r7
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004a90:	003a      	movs	r2, r7
 8004a92:	4b06      	ldr	r3, [pc, #24]	; (8004aac <MX_TIM6_Init+0x6c>)
 8004a94:	0011      	movs	r1, r2
 8004a96:	0018      	movs	r0, r3
 8004a98:	f7fe fdef 	bl	800367a <HAL_TIMEx_MasterConfigSynchronization>
 8004a9c:	1e03      	subs	r3, r0, #0
 8004a9e:	d001      	beq.n	8004aa4 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8004aa0:	f000 fa69 	bl	8004f76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004aa4:	46c0      	nop			; (mov r8, r8)
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b002      	add	sp, #8
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20000168 	.word	0x20000168
 8004ab0:	40001000 	.word	0x40001000
 8004ab4:	00000833 	.word	0x00000833

08004ab8 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004abe:	2310      	movs	r3, #16
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	001a      	movs	r2, r3
 8004ac8:	2100      	movs	r1, #0
 8004aca:	f001 f8e1 	bl	8005c90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ace:	003b      	movs	r3, r7
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	2310      	movs	r3, #16
 8004ad4:	001a      	movs	r2, r3
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	f001 f8da 	bl	8005c90 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8004adc:	4b22      	ldr	r3, [pc, #136]	; (8004b68 <MX_TIM21_Init+0xb0>)
 8004ade:	4a23      	ldr	r2, [pc, #140]	; (8004b6c <MX_TIM21_Init+0xb4>)
 8004ae0:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8004ae2:	4b21      	ldr	r3, [pc, #132]	; (8004b68 <MX_TIM21_Init+0xb0>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ae8:	4b1f      	ldr	r3, [pc, #124]	; (8004b68 <MX_TIM21_Init+0xb0>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 209;
 8004aee:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <MX_TIM21_Init+0xb0>)
 8004af0:	22d1      	movs	r2, #209	; 0xd1
 8004af2:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004af4:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <MX_TIM21_Init+0xb0>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004afa:	4b1b      	ldr	r3, [pc, #108]	; (8004b68 <MX_TIM21_Init+0xb0>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8004b00:	4b19      	ldr	r3, [pc, #100]	; (8004b68 <MX_TIM21_Init+0xb0>)
 8004b02:	0018      	movs	r0, r3
 8004b04:	f7fd feb6 	bl	8002874 <HAL_TIM_OC_Init>
 8004b08:	1e03      	subs	r3, r0, #0
 8004b0a:	d001      	beq.n	8004b10 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8004b0c:	f000 fa33 	bl	8004f76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b10:	2110      	movs	r1, #16
 8004b12:	187b      	adds	r3, r7, r1
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b18:	187b      	adds	r3, r7, r1
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8004b1e:	187a      	adds	r2, r7, r1
 8004b20:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <MX_TIM21_Init+0xb0>)
 8004b22:	0011      	movs	r1, r2
 8004b24:	0018      	movs	r0, r3
 8004b26:	f7fe fda8 	bl	800367a <HAL_TIMEx_MasterConfigSynchronization>
 8004b2a:	1e03      	subs	r3, r0, #0
 8004b2c:	d001      	beq.n	8004b32 <MX_TIM21_Init+0x7a>
  {
    Error_Handler();
 8004b2e:	f000 fa22 	bl	8004f76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8004b32:	003b      	movs	r3, r7
 8004b34:	2210      	movs	r2, #16
 8004b36:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004b38:	003b      	movs	r3, r7
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b3e:	003b      	movs	r3, r7
 8004b40:	2200      	movs	r2, #0
 8004b42:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b44:	003b      	movs	r3, r7
 8004b46:	2200      	movs	r2, #0
 8004b48:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b4a:	0039      	movs	r1, r7
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <MX_TIM21_Init+0xb0>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	0018      	movs	r0, r3
 8004b52:	f7fe f8bc 	bl	8002cce <HAL_TIM_OC_ConfigChannel>
 8004b56:	1e03      	subs	r3, r0, #0
 8004b58:	d001      	beq.n	8004b5e <MX_TIM21_Init+0xa6>
  {
    Error_Handler();
 8004b5a:	f000 fa0c 	bl	8004f76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b006      	add	sp, #24
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	200002ec 	.word	0x200002ec
 8004b6c:	40010800 	.word	0x40010800

08004b70 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8004b70:	b590      	push	{r4, r7, lr}
 8004b72:	b08d      	sub	sp, #52	; 0x34
 8004b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004b76:	240c      	movs	r4, #12
 8004b78:	193b      	adds	r3, r7, r4
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	2324      	movs	r3, #36	; 0x24
 8004b7e:	001a      	movs	r2, r3
 8004b80:	2100      	movs	r1, #0
 8004b82:	f001 f885 	bl	8005c90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b86:	1d3b      	adds	r3, r7, #4
 8004b88:	0018      	movs	r0, r3
 8004b8a:	2308      	movs	r3, #8
 8004b8c:	001a      	movs	r2, r3
 8004b8e:	2100      	movs	r1, #0
 8004b90:	f001 f87e 	bl	8005c90 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8004b94:	4b2e      	ldr	r3, [pc, #184]	; (8004c50 <MX_TIM22_Init+0xe0>)
 8004b96:	4a2f      	ldr	r2, [pc, #188]	; (8004c54 <MX_TIM22_Init+0xe4>)
 8004b98:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 8004b9a:	4b2d      	ldr	r3, [pc, #180]	; (8004c50 <MX_TIM22_Init+0xe0>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ba0:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <MX_TIM22_Init+0xe0>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 65000;
 8004ba6:	4b2a      	ldr	r3, [pc, #168]	; (8004c50 <MX_TIM22_Init+0xe0>)
 8004ba8:	4a2b      	ldr	r2, [pc, #172]	; (8004c58 <MX_TIM22_Init+0xe8>)
 8004baa:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bac:	4b28      	ldr	r3, [pc, #160]	; (8004c50 <MX_TIM22_Init+0xe0>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bb2:	4b27      	ldr	r3, [pc, #156]	; (8004c50 <MX_TIM22_Init+0xe0>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004bb8:	0021      	movs	r1, r4
 8004bba:	187b      	adds	r3, r7, r1
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004bc0:	187b      	adds	r3, r7, r1
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004bc6:	187b      	adds	r3, r7, r1
 8004bc8:	2201      	movs	r2, #1
 8004bca:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004bcc:	187b      	adds	r3, r7, r1
 8004bce:	2200      	movs	r2, #0
 8004bd0:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 5;
 8004bd2:	187b      	adds	r3, r7, r1
 8004bd4:	2205      	movs	r2, #5
 8004bd6:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004bd8:	187b      	adds	r3, r7, r1
 8004bda:	2202      	movs	r2, #2
 8004bdc:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004bde:	187b      	adds	r3, r7, r1
 8004be0:	2201      	movs	r2, #1
 8004be2:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004be4:	187b      	adds	r3, r7, r1
 8004be6:	2200      	movs	r2, #0
 8004be8:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 5;
 8004bea:	187b      	adds	r3, r7, r1
 8004bec:	2205      	movs	r2, #5
 8004bee:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim22, &sConfig) != HAL_OK)
 8004bf0:	187a      	adds	r2, r7, r1
 8004bf2:	4b17      	ldr	r3, [pc, #92]	; (8004c50 <MX_TIM22_Init+0xe0>)
 8004bf4:	0011      	movs	r1, r2
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f7fd feb6 	bl	8002968 <HAL_TIM_Encoder_Init>
 8004bfc:	1e03      	subs	r3, r0, #0
 8004bfe:	d001      	beq.n	8004c04 <MX_TIM22_Init+0x94>
  {
    Error_Handler();
 8004c00:	f000 f9b9 	bl	8004f76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c04:	1d3b      	adds	r3, r7, #4
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c0a:	1d3b      	adds	r3, r7, #4
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8004c10:	1d3a      	adds	r2, r7, #4
 8004c12:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <MX_TIM22_Init+0xe0>)
 8004c14:	0011      	movs	r1, r2
 8004c16:	0018      	movs	r0, r3
 8004c18:	f7fe fd2f 	bl	800367a <HAL_TIMEx_MasterConfigSynchronization>
 8004c1c:	1e03      	subs	r3, r0, #0
 8004c1e:	d001      	beq.n	8004c24 <MX_TIM22_Init+0xb4>
  {
    Error_Handler();
 8004c20:	f000 f9a9 	bl	8004f76 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM3_TI1_GPIO) != HAL_OK)
 8004c24:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <MX_TIM22_Init+0xe0>)
 8004c26:	2104      	movs	r1, #4
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7fe fd69 	bl	8003700 <HAL_TIMEx_RemapConfig>
 8004c2e:	1e03      	subs	r3, r0, #0
 8004c30:	d001      	beq.n	8004c36 <MX_TIM22_Init+0xc6>
  {
    Error_Handler();
 8004c32:	f000 f9a0 	bl	8004f76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_TI1_GPIO) != HAL_OK)
 8004c36:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <MX_TIM22_Init+0xe0>)
 8004c38:	2100      	movs	r1, #0
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f7fe fd60 	bl	8003700 <HAL_TIMEx_RemapConfig>
 8004c40:	1e03      	subs	r3, r0, #0
 8004c42:	d001      	beq.n	8004c48 <MX_TIM22_Init+0xd8>
    {
      Error_Handler();
 8004c44:	f000 f997 	bl	8004f76 <Error_Handler>
    }
  /* USER CODE END TIM22_Init 2 */

}
 8004c48:	46c0      	nop			; (mov r8, r8)
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	b00d      	add	sp, #52	; 0x34
 8004c4e:	bd90      	pop	{r4, r7, pc}
 8004c50:	20000124 	.word	0x20000124
 8004c54:	40011400 	.word	0x40011400
 8004c58:	0000fde8 	.word	0x0000fde8

08004c5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004c60:	4b14      	ldr	r3, [pc, #80]	; (8004cb4 <MX_USART2_UART_Init+0x58>)
 8004c62:	4a15      	ldr	r2, [pc, #84]	; (8004cb8 <MX_USART2_UART_Init+0x5c>)
 8004c64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004c66:	4b13      	ldr	r3, [pc, #76]	; (8004cb4 <MX_USART2_UART_Init+0x58>)
 8004c68:	22e1      	movs	r2, #225	; 0xe1
 8004c6a:	0252      	lsls	r2, r2, #9
 8004c6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c6e:	4b11      	ldr	r3, [pc, #68]	; (8004cb4 <MX_USART2_UART_Init+0x58>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c74:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <MX_USART2_UART_Init+0x58>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c7a:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <MX_USART2_UART_Init+0x58>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004c80:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <MX_USART2_UART_Init+0x58>)
 8004c82:	220c      	movs	r2, #12
 8004c84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c86:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <MX_USART2_UART_Init+0x58>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c8c:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <MX_USART2_UART_Init+0x58>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c92:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <MX_USART2_UART_Init+0x58>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c98:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <MX_USART2_UART_Init+0x58>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c9e:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <MX_USART2_UART_Init+0x58>)
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	f7fe fd4b 	bl	800373c <HAL_UART_Init>
 8004ca6:	1e03      	subs	r3, r0, #0
 8004ca8:	d001      	beq.n	8004cae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004caa:	f000 f964 	bl	8004f76 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20000204 	.word	0x20000204
 8004cb8:	40004400 	.word	0x40004400

08004cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004cbc:	b590      	push	{r4, r7, lr}
 8004cbe:	b08b      	sub	sp, #44	; 0x2c
 8004cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc2:	2414      	movs	r4, #20
 8004cc4:	193b      	adds	r3, r7, r4
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	2314      	movs	r3, #20
 8004cca:	001a      	movs	r2, r3
 8004ccc:	2100      	movs	r1, #0
 8004cce:	f000 ffdf 	bl	8005c90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cd2:	4b4a      	ldr	r3, [pc, #296]	; (8004dfc <MX_GPIO_Init+0x140>)
 8004cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd6:	4b49      	ldr	r3, [pc, #292]	; (8004dfc <MX_GPIO_Init+0x140>)
 8004cd8:	2104      	movs	r1, #4
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cde:	4b47      	ldr	r3, [pc, #284]	; (8004dfc <MX_GPIO_Init+0x140>)
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	2204      	movs	r2, #4
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004cea:	4b44      	ldr	r3, [pc, #272]	; (8004dfc <MX_GPIO_Init+0x140>)
 8004cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cee:	4b43      	ldr	r3, [pc, #268]	; (8004dfc <MX_GPIO_Init+0x140>)
 8004cf0:	2180      	movs	r1, #128	; 0x80
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cf6:	4b41      	ldr	r3, [pc, #260]	; (8004dfc <MX_GPIO_Init+0x140>)
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	2280      	movs	r2, #128	; 0x80
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d02:	4b3e      	ldr	r3, [pc, #248]	; (8004dfc <MX_GPIO_Init+0x140>)
 8004d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d06:	4b3d      	ldr	r3, [pc, #244]	; (8004dfc <MX_GPIO_Init+0x140>)
 8004d08:	2101      	movs	r1, #1
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d0e:	4b3b      	ldr	r3, [pc, #236]	; (8004dfc <MX_GPIO_Init+0x140>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	2201      	movs	r2, #1
 8004d14:	4013      	ands	r3, r2
 8004d16:	60bb      	str	r3, [r7, #8]
 8004d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d1a:	4b38      	ldr	r3, [pc, #224]	; (8004dfc <MX_GPIO_Init+0x140>)
 8004d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1e:	4b37      	ldr	r3, [pc, #220]	; (8004dfc <MX_GPIO_Init+0x140>)
 8004d20:	2102      	movs	r1, #2
 8004d22:	430a      	orrs	r2, r1
 8004d24:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d26:	4b35      	ldr	r3, [pc, #212]	; (8004dfc <MX_GPIO_Init+0x140>)
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	607b      	str	r3, [r7, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8004d32:	2398      	movs	r3, #152	; 0x98
 8004d34:	0059      	lsls	r1, r3, #1
 8004d36:	23a0      	movs	r3, #160	; 0xa0
 8004d38:	05db      	lsls	r3, r3, #23
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f7fc fddf 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004d42:	193b      	adds	r3, r7, r4
 8004d44:	2280      	movs	r2, #128	; 0x80
 8004d46:	0192      	lsls	r2, r2, #6
 8004d48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d4a:	193b      	adds	r3, r7, r4
 8004d4c:	4a2c      	ldr	r2, [pc, #176]	; (8004e00 <MX_GPIO_Init+0x144>)
 8004d4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d50:	193b      	adds	r3, r7, r4
 8004d52:	2200      	movs	r2, #0
 8004d54:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d56:	193b      	adds	r3, r7, r4
 8004d58:	4a2a      	ldr	r2, [pc, #168]	; (8004e04 <MX_GPIO_Init+0x148>)
 8004d5a:	0019      	movs	r1, r3
 8004d5c:	0010      	movs	r0, r2
 8004d5e:	f7fc fc51 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004d62:	0021      	movs	r1, r4
 8004d64:	187b      	adds	r3, r7, r1
 8004d66:	2202      	movs	r2, #2
 8004d68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d6a:	187b      	adds	r3, r7, r1
 8004d6c:	4a24      	ldr	r2, [pc, #144]	; (8004e00 <MX_GPIO_Init+0x144>)
 8004d6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d70:	187b      	adds	r3, r7, r1
 8004d72:	2200      	movs	r2, #0
 8004d74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d76:	000c      	movs	r4, r1
 8004d78:	187a      	adds	r2, r7, r1
 8004d7a:	23a0      	movs	r3, #160	; 0xa0
 8004d7c:	05db      	lsls	r3, r3, #23
 8004d7e:	0011      	movs	r1, r2
 8004d80:	0018      	movs	r0, r3
 8004d82:	f7fc fc3f 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 8004d86:	0021      	movs	r1, r4
 8004d88:	187b      	adds	r3, r7, r1
 8004d8a:	2298      	movs	r2, #152	; 0x98
 8004d8c:	0052      	lsls	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d90:	187b      	adds	r3, r7, r1
 8004d92:	2201      	movs	r2, #1
 8004d94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d96:	187b      	adds	r3, r7, r1
 8004d98:	2200      	movs	r2, #0
 8004d9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d9c:	187b      	adds	r3, r7, r1
 8004d9e:	2200      	movs	r2, #0
 8004da0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004da2:	000c      	movs	r4, r1
 8004da4:	187a      	adds	r2, r7, r1
 8004da6:	23a0      	movs	r3, #160	; 0xa0
 8004da8:	05db      	lsls	r3, r3, #23
 8004daa:	0011      	movs	r1, r2
 8004dac:	0018      	movs	r0, r3
 8004dae:	f7fc fc29 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_6;
 8004db2:	0021      	movs	r1, r4
 8004db4:	187b      	adds	r3, r7, r1
 8004db6:	22c2      	movs	r2, #194	; 0xc2
 8004db8:	0152      	lsls	r2, r2, #5
 8004dba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004dbc:	187b      	adds	r3, r7, r1
 8004dbe:	4a10      	ldr	r2, [pc, #64]	; (8004e00 <MX_GPIO_Init+0x144>)
 8004dc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc2:	187b      	adds	r3, r7, r1
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	4a0f      	ldr	r2, [pc, #60]	; (8004e08 <MX_GPIO_Init+0x14c>)
 8004dcc:	0019      	movs	r1, r3
 8004dce:	0010      	movs	r0, r2
 8004dd0:	f7fc fc18 	bl	8001604 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	2005      	movs	r0, #5
 8004dda:	f7fc fbe1 	bl	80015a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8004dde:	2005      	movs	r0, #5
 8004de0:	f7fc fbf3 	bl	80015ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004de4:	2200      	movs	r2, #0
 8004de6:	2100      	movs	r1, #0
 8004de8:	2007      	movs	r0, #7
 8004dea:	f7fc fbd9 	bl	80015a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004dee:	2007      	movs	r0, #7
 8004df0:	f7fc fbeb 	bl	80015ca <HAL_NVIC_EnableIRQ>

}
 8004df4:	46c0      	nop			; (mov r8, r8)
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b00b      	add	sp, #44	; 0x2c
 8004dfa:	bd90      	pop	{r4, r7, pc}
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	10110000 	.word	0x10110000
 8004e04:	50000800 	.word	0x50000800
 8004e08:	50000400 	.word	0x50000400

08004e0c <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8004e14:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <__io_putchar+0x20>)
 8004e16:	1d39      	adds	r1, r7, #4
 8004e18:	4805      	ldr	r0, [pc, #20]	; (8004e30 <__io_putchar+0x24>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f7fe fce2 	bl	80037e4 <HAL_UART_Transmit>

return ch;
 8004e20:	687b      	ldr	r3, [r7, #4]
}
 8004e22:	0018      	movs	r0, r3
 8004e24:	46bd      	mov	sp, r7
 8004e26:	b002      	add	sp, #8
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	0000ffff 	.word	0x0000ffff
 8004e30:	20000204 	.word	0x20000204

08004e34 <Right_Encoder_Interrupt_Handler>:

void Right_Encoder_Interrupt_Handler(void){
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
//	r_enc_cnt++;
	if(r_dir==1)
 8004e38:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <Right_Encoder_Interrupt_Handler+0x28>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d105      	bne.n	8004e4c <Right_Encoder_Interrupt_Handler+0x18>
		r_enc_currentPos++;
 8004e40:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <Right_Encoder_Interrupt_Handler+0x2c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <Right_Encoder_Interrupt_Handler+0x2c>)
 8004e48:	601a      	str	r2, [r3, #0]
	else
		r_enc_currentPos--;
}
 8004e4a:	e004      	b.n	8004e56 <Right_Encoder_Interrupt_Handler+0x22>
		r_enc_currentPos--;
 8004e4c:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <Right_Encoder_Interrupt_Handler+0x2c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	1e5a      	subs	r2, r3, #1
 8004e52:	4b03      	ldr	r3, [pc, #12]	; (8004e60 <Right_Encoder_Interrupt_Handler+0x2c>)
 8004e54:	601a      	str	r2, [r3, #0]
}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	200000e4 	.word	0x200000e4
 8004e60:	20000088 	.word	0x20000088

08004e64 <Left_Encoder_Interrupt_Handler>:

void Left_Encoder_Interrupt_Handler(void){
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
	if(l_dir==1)
 8004e68:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <Left_Encoder_Interrupt_Handler+0x28>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d105      	bne.n	8004e7c <Left_Encoder_Interrupt_Handler+0x18>
		l_enc_currentPos++;
 8004e70:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <Left_Encoder_Interrupt_Handler+0x2c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <Left_Encoder_Interrupt_Handler+0x2c>)
 8004e78:	601a      	str	r2, [r3, #0]
	else
		l_enc_currentPos--;
}
 8004e7a:	e004      	b.n	8004e86 <Left_Encoder_Interrupt_Handler+0x22>
		l_enc_currentPos--;
 8004e7c:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <Left_Encoder_Interrupt_Handler+0x2c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	1e5a      	subs	r2, r3, #1
 8004e82:	4b03      	ldr	r3, [pc, #12]	; (8004e90 <Left_Encoder_Interrupt_Handler+0x2c>)
 8004e84:	601a      	str	r2, [r3, #0]
}
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	200002e8 	.word	0x200002e8
 8004e90:	20000090 	.word	0x20000090

08004e94 <TEN_KHZ_TIM_Interrupt_Handler>:
  		Left_Motor_PWM_Gen(0, 1); // Switch to brake mode if within 0.5% off setpoint
  	else
  		Left_Motor_PWM_Gen(duty, 0);
}

void TEN_KHZ_TIM_Interrupt_Handler(void){
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
	//Right_Motor_Controller();
	//Left_Motor_Controller();
	ten_hz_counter++;
 8004e98:	4b08      	ldr	r3, [pc, #32]	; (8004ebc <TEN_KHZ_TIM_Interrupt_Handler+0x28>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <TEN_KHZ_TIM_Interrupt_Handler+0x28>)
 8004ea0:	601a      	str	r2, [r3, #0]
	if(ten_hz_counter >= 1000){
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <TEN_KHZ_TIM_Interrupt_Handler+0x28>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a06      	ldr	r2, [pc, #24]	; (8004ec0 <TEN_KHZ_TIM_Interrupt_Handler+0x2c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	dd04      	ble.n	8004eb6 <TEN_KHZ_TIM_Interrupt_Handler+0x22>
		Read_Light_Sensors();
 8004eac:	f000 f85e 	bl	8004f6c <Read_Light_Sensors>
		ten_hz_counter = 0;
 8004eb0:	4b02      	ldr	r3, [pc, #8]	; (8004ebc <TEN_KHZ_TIM_Interrupt_Handler+0x28>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
	}
}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000094 	.word	0x20000094
 8004ec0:	000003e7 	.word	0x000003e7

08004ec4 <Print_Encoder_Reading>:
void TIM22_Interrupt_Handler(void){
//	HAL_Delay(200);

}
// Debugging function - prints the right motor encoder reading when the blue button is pushed
void Print_Encoder_Reading(void){
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
	printf("Rotations: %d          \r", r_enc_currentPos);
 8004ec8:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <Print_Encoder_Reading+0x24>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	4b07      	ldr	r3, [pc, #28]	; (8004eec <Print_Encoder_Reading+0x28>)
 8004ece:	0011      	movs	r1, r2
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f000 ff8d 	bl	8005df0 <iprintf>
	fflush(stdout);
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <Print_Encoder_Reading+0x2c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	0018      	movs	r0, r3
 8004ede:	f000 fdc9 	bl	8005a74 <fflush>
//	r_enc_currentPos = 0;
}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20000088 	.word	0x20000088
 8004eec:	080068c8 	.word	0x080068c8
 8004ef0:	20000004 	.word	0x20000004

08004ef4 <ADC_ConvCpltCallback>:

void ADC_ConvCpltCallback(void)
{
 8004ef4:	b590      	push	{r4, r7, lr}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af02      	add	r7, sp, #8
	for(int i = 0; i < 2; i++){
 8004efa:	2300      	movs	r3, #0
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	e00a      	b.n	8004f16 <ADC_ConvCpltCallback+0x22>
		ADC_Values[i] = buffer[i];
 8004f00:	4b10      	ldr	r3, [pc, #64]	; (8004f44 <ADC_ConvCpltCallback+0x50>)
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	0052      	lsls	r2, r2, #1
 8004f06:	5ad1      	ldrh	r1, [r2, r3]
 8004f08:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <ADC_ConvCpltCallback+0x54>)
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	0052      	lsls	r2, r2, #1
 8004f0e:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < 2; i++){
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3301      	adds	r3, #1
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	ddf1      	ble.n	8004f00 <ADC_ConvCpltCallback+0xc>
	}
	printf("%u, %u, %u, %u\r\n",ADC_Values[0], ADC_Values[1], ADC_Values[2], ADC_Values[3]);
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <ADC_ConvCpltCallback+0x54>)
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	0019      	movs	r1, r3
 8004f22:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <ADC_ConvCpltCallback+0x54>)
 8004f24:	885b      	ldrh	r3, [r3, #2]
 8004f26:	001a      	movs	r2, r3
 8004f28:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <ADC_ConvCpltCallback+0x54>)
 8004f2a:	889b      	ldrh	r3, [r3, #4]
 8004f2c:	001c      	movs	r4, r3
 8004f2e:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <ADC_ConvCpltCallback+0x54>)
 8004f30:	88db      	ldrh	r3, [r3, #6]
 8004f32:	4806      	ldr	r0, [pc, #24]	; (8004f4c <ADC_ConvCpltCallback+0x58>)
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	0023      	movs	r3, r4
 8004f38:	f000 ff5a 	bl	8005df0 <iprintf>
//	HAL_ADC_Start_DMA(hadc, buffer, 2);
}
 8004f3c:	46c0      	nop			; (mov r8, r8)
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b003      	add	sp, #12
 8004f42:	bd90      	pop	{r4, r7, pc}
 8004f44:	20000160 	.word	0x20000160
 8004f48:	200002e0 	.word	0x200002e0
 8004f4c:	080068e4 	.word	0x080068e4

08004f50 <HAL_ADC_ErrorCallback>:
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	printf("ERROR\r\n");
 8004f58:	4b03      	ldr	r3, [pc, #12]	; (8004f68 <HAL_ADC_ErrorCallback+0x18>)
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f000 ffc2 	bl	8005ee4 <puts>
}
 8004f60:	46c0      	nop			; (mov r8, r8)
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b002      	add	sp, #8
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	080068f8 	.word	0x080068f8

08004f6c <Read_Light_Sensors>:

void Read_Light_Sensors(void){
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
//	printf("%d, %d, %d, %d", ADC_Values[0], ADC_Values[1], ADC_Values[2], ADC_Values[3]);

}
 8004f70:	46c0      	nop			; (mov r8, r8)
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f84:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <HAL_MspInit+0x24>)
 8004f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f88:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <HAL_MspInit+0x24>)
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f90:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <HAL_MspInit+0x24>)
 8004f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f94:	4b03      	ldr	r3, [pc, #12]	; (8004fa4 <HAL_MspInit+0x24>)
 8004f96:	2180      	movs	r1, #128	; 0x80
 8004f98:	0549      	lsls	r1, r1, #21
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40021000 	.word	0x40021000

08004fa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb0:	230c      	movs	r3, #12
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	2314      	movs	r3, #20
 8004fb8:	001a      	movs	r2, r3
 8004fba:	2100      	movs	r1, #0
 8004fbc:	f000 fe68 	bl	8005c90 <memset>
  if(hadc->Instance==ADC1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a18      	ldr	r2, [pc, #96]	; (8005028 <HAL_ADC_MspInit+0x80>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d12a      	bne.n	8005020 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004fca:	4b18      	ldr	r3, [pc, #96]	; (800502c <HAL_ADC_MspInit+0x84>)
 8004fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fce:	4b17      	ldr	r3, [pc, #92]	; (800502c <HAL_ADC_MspInit+0x84>)
 8004fd0:	2180      	movs	r1, #128	; 0x80
 8004fd2:	0089      	lsls	r1, r1, #2
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fd8:	4b14      	ldr	r3, [pc, #80]	; (800502c <HAL_ADC_MspInit+0x84>)
 8004fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fdc:	4b13      	ldr	r3, [pc, #76]	; (800502c <HAL_ADC_MspInit+0x84>)
 8004fde:	2104      	movs	r1, #4
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fe4:	4b11      	ldr	r3, [pc, #68]	; (800502c <HAL_ADC_MspInit+0x84>)
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	2204      	movs	r2, #4
 8004fea:	4013      	ands	r3, r2
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC_IN10
    PC1     ------> ADC_IN11
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004ff0:	210c      	movs	r1, #12
 8004ff2:	187b      	adds	r3, r7, r1
 8004ff4:	220f      	movs	r2, #15
 8004ff6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ff8:	187b      	adds	r3, r7, r1
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffe:	187b      	adds	r3, r7, r1
 8005000:	2200      	movs	r2, #0
 8005002:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005004:	187b      	adds	r3, r7, r1
 8005006:	4a0a      	ldr	r2, [pc, #40]	; (8005030 <HAL_ADC_MspInit+0x88>)
 8005008:	0019      	movs	r1, r3
 800500a:	0010      	movs	r0, r2
 800500c:	f7fc fafa 	bl	8001604 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8005010:	2200      	movs	r2, #0
 8005012:	2100      	movs	r1, #0
 8005014:	200c      	movs	r0, #12
 8005016:	f7fc fac3 	bl	80015a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800501a:	200c      	movs	r0, #12
 800501c:	f7fc fad5 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005020:	46c0      	nop			; (mov r8, r8)
 8005022:	46bd      	mov	sp, r7
 8005024:	b008      	add	sp, #32
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40012400 	.word	0x40012400
 800502c:	40021000 	.word	0x40021000
 8005030:	50000800 	.word	0x50000800

08005034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	2380      	movs	r3, #128	; 0x80
 8005042:	05db      	lsls	r3, r3, #23
 8005044:	429a      	cmp	r2, r3
 8005046:	d106      	bne.n	8005056 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005048:	4b0e      	ldr	r3, [pc, #56]	; (8005084 <HAL_TIM_Base_MspInit+0x50>)
 800504a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800504c:	4b0d      	ldr	r3, [pc, #52]	; (8005084 <HAL_TIM_Base_MspInit+0x50>)
 800504e:	2101      	movs	r1, #1
 8005050:	430a      	orrs	r2, r1
 8005052:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8005054:	e012      	b.n	800507c <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM6)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a0b      	ldr	r2, [pc, #44]	; (8005088 <HAL_TIM_Base_MspInit+0x54>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10d      	bne.n	800507c <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005060:	4b08      	ldr	r3, [pc, #32]	; (8005084 <HAL_TIM_Base_MspInit+0x50>)
 8005062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005064:	4b07      	ldr	r3, [pc, #28]	; (8005084 <HAL_TIM_Base_MspInit+0x50>)
 8005066:	2110      	movs	r1, #16
 8005068:	430a      	orrs	r2, r1
 800506a:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800506c:	2200      	movs	r2, #0
 800506e:	2100      	movs	r1, #0
 8005070:	2011      	movs	r0, #17
 8005072:	f7fc fa95 	bl	80015a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005076:	2011      	movs	r0, #17
 8005078:	f7fc faa7 	bl	80015ca <HAL_NVIC_EnableIRQ>
}
 800507c:	46c0      	nop			; (mov r8, r8)
 800507e:	46bd      	mov	sp, r7
 8005080:	b002      	add	sp, #8
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40021000 	.word	0x40021000
 8005088:	40001000 	.word	0x40001000

0800508c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a06      	ldr	r2, [pc, #24]	; (80050b4 <HAL_TIM_PWM_MspInit+0x28>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d105      	bne.n	80050aa <HAL_TIM_PWM_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800509e:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <HAL_TIM_PWM_MspInit+0x2c>)
 80050a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050a2:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <HAL_TIM_PWM_MspInit+0x2c>)
 80050a4:	2102      	movs	r1, #2
 80050a6:	430a      	orrs	r2, r1
 80050a8:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	46bd      	mov	sp, r7
 80050ae:	b002      	add	sp, #8
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	40000400 	.word	0x40000400
 80050b8:	40021000 	.word	0x40021000

080050bc <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM21)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a0a      	ldr	r2, [pc, #40]	; (80050f4 <HAL_TIM_OC_MspInit+0x38>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d10d      	bne.n	80050ea <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 80050ce:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <HAL_TIM_OC_MspInit+0x3c>)
 80050d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d2:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <HAL_TIM_OC_MspInit+0x3c>)
 80050d4:	2104      	movs	r1, #4
 80050d6:	430a      	orrs	r2, r1
 80050d8:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80050da:	2200      	movs	r2, #0
 80050dc:	2100      	movs	r1, #0
 80050de:	2014      	movs	r0, #20
 80050e0:	f7fc fa5e 	bl	80015a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80050e4:	2014      	movs	r0, #20
 80050e6:	f7fc fa70 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b002      	add	sp, #8
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	40010800 	.word	0x40010800
 80050f8:	40021000 	.word	0x40021000

080050fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005104:	230c      	movs	r3, #12
 8005106:	18fb      	adds	r3, r7, r3
 8005108:	0018      	movs	r0, r3
 800510a:	2314      	movs	r3, #20
 800510c:	001a      	movs	r2, r3
 800510e:	2100      	movs	r1, #0
 8005110:	f000 fdbe 	bl	8005c90 <memset>
  if(htim_encoder->Instance==TIM22)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <HAL_TIM_Encoder_MspInit+0x8c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d12f      	bne.n	800517e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM22_MspInit 0 */

  /* USER CODE END TIM22_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM22_CLK_ENABLE();
 800511e:	4b1b      	ldr	r3, [pc, #108]	; (800518c <HAL_TIM_Encoder_MspInit+0x90>)
 8005120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005122:	4b1a      	ldr	r3, [pc, #104]	; (800518c <HAL_TIM_Encoder_MspInit+0x90>)
 8005124:	2120      	movs	r1, #32
 8005126:	430a      	orrs	r2, r1
 8005128:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800512a:	4b18      	ldr	r3, [pc, #96]	; (800518c <HAL_TIM_Encoder_MspInit+0x90>)
 800512c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512e:	4b17      	ldr	r3, [pc, #92]	; (800518c <HAL_TIM_Encoder_MspInit+0x90>)
 8005130:	2104      	movs	r1, #4
 8005132:	430a      	orrs	r2, r1
 8005134:	62da      	str	r2, [r3, #44]	; 0x2c
 8005136:	4b15      	ldr	r3, [pc, #84]	; (800518c <HAL_TIM_Encoder_MspInit+0x90>)
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	2204      	movs	r2, #4
 800513c:	4013      	ands	r3, r2
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	68bb      	ldr	r3, [r7, #8]
    /**TIM22 GPIO Configuration    
    PC6     ------> TIM22_CH1
    PC7     ------> TIM22_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005142:	210c      	movs	r1, #12
 8005144:	187b      	adds	r3, r7, r1
 8005146:	22c0      	movs	r2, #192	; 0xc0
 8005148:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800514a:	187b      	adds	r3, r7, r1
 800514c:	2202      	movs	r2, #2
 800514e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005150:	187b      	adds	r3, r7, r1
 8005152:	2200      	movs	r2, #0
 8005154:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005156:	187b      	adds	r3, r7, r1
 8005158:	2200      	movs	r2, #0
 800515a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM22;
 800515c:	187b      	adds	r3, r7, r1
 800515e:	2200      	movs	r2, #0
 8005160:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005162:	187b      	adds	r3, r7, r1
 8005164:	4a0a      	ldr	r2, [pc, #40]	; (8005190 <HAL_TIM_Encoder_MspInit+0x94>)
 8005166:	0019      	movs	r1, r3
 8005168:	0010      	movs	r0, r2
 800516a:	f7fc fa4b 	bl	8001604 <HAL_GPIO_Init>

    /* TIM22 interrupt Init */
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 800516e:	2200      	movs	r2, #0
 8005170:	2100      	movs	r1, #0
 8005172:	2016      	movs	r0, #22
 8005174:	f7fc fa14 	bl	80015a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8005178:	2016      	movs	r0, #22
 800517a:	f7fc fa26 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	46bd      	mov	sp, r7
 8005182:	b008      	add	sp, #32
 8005184:	bd80      	pop	{r7, pc}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	40011400 	.word	0x40011400
 800518c:	40021000 	.word	0x40021000
 8005190:	50000800 	.word	0x50000800

08005194 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b08b      	sub	sp, #44	; 0x2c
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800519c:	2314      	movs	r3, #20
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	0018      	movs	r0, r3
 80051a2:	2314      	movs	r3, #20
 80051a4:	001a      	movs	r2, r3
 80051a6:	2100      	movs	r1, #0
 80051a8:	f000 fd72 	bl	8005c90 <memset>
  if(htim->Instance==TIM2)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	2380      	movs	r3, #128	; 0x80
 80051b2:	05db      	lsls	r3, r3, #23
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d123      	bne.n	8005200 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051b8:	4b38      	ldr	r3, [pc, #224]	; (800529c <HAL_TIM_MspPostInit+0x108>)
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	4b37      	ldr	r3, [pc, #220]	; (800529c <HAL_TIM_MspPostInit+0x108>)
 80051be:	2101      	movs	r1, #1
 80051c0:	430a      	orrs	r2, r1
 80051c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80051c4:	4b35      	ldr	r3, [pc, #212]	; (800529c <HAL_TIM_MspPostInit+0x108>)
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	2201      	movs	r2, #1
 80051ca:	4013      	ands	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80051d0:	2114      	movs	r1, #20
 80051d2:	187b      	adds	r3, r7, r1
 80051d4:	2201      	movs	r2, #1
 80051d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	2202      	movs	r2, #2
 80051dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051de:	187b      	adds	r3, r7, r1
 80051e0:	2200      	movs	r2, #0
 80051e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e4:	187b      	adds	r3, r7, r1
 80051e6:	2200      	movs	r2, #0
 80051e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80051ea:	187b      	adds	r3, r7, r1
 80051ec:	2202      	movs	r2, #2
 80051ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051f0:	187a      	adds	r2, r7, r1
 80051f2:	23a0      	movs	r3, #160	; 0xa0
 80051f4:	05db      	lsls	r3, r3, #23
 80051f6:	0011      	movs	r1, r2
 80051f8:	0018      	movs	r0, r3
 80051fa:	f7fc fa03 	bl	8001604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80051fe:	e049      	b.n	8005294 <HAL_TIM_MspPostInit+0x100>
  else if(htim->Instance==TIM3)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a26      	ldr	r2, [pc, #152]	; (80052a0 <HAL_TIM_MspPostInit+0x10c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d144      	bne.n	8005294 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800520a:	4b24      	ldr	r3, [pc, #144]	; (800529c <HAL_TIM_MspPostInit+0x108>)
 800520c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520e:	4b23      	ldr	r3, [pc, #140]	; (800529c <HAL_TIM_MspPostInit+0x108>)
 8005210:	2101      	movs	r1, #1
 8005212:	430a      	orrs	r2, r1
 8005214:	62da      	str	r2, [r3, #44]	; 0x2c
 8005216:	4b21      	ldr	r3, [pc, #132]	; (800529c <HAL_TIM_MspPostInit+0x108>)
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	2201      	movs	r2, #1
 800521c:	4013      	ands	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005222:	4b1e      	ldr	r3, [pc, #120]	; (800529c <HAL_TIM_MspPostInit+0x108>)
 8005224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005226:	4b1d      	ldr	r3, [pc, #116]	; (800529c <HAL_TIM_MspPostInit+0x108>)
 8005228:	2102      	movs	r1, #2
 800522a:	430a      	orrs	r2, r1
 800522c:	62da      	str	r2, [r3, #44]	; 0x2c
 800522e:	4b1b      	ldr	r3, [pc, #108]	; (800529c <HAL_TIM_MspPostInit+0x108>)
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	2202      	movs	r2, #2
 8005234:	4013      	ands	r3, r2
 8005236:	60bb      	str	r3, [r7, #8]
 8005238:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800523a:	2414      	movs	r4, #20
 800523c:	193b      	adds	r3, r7, r4
 800523e:	22c0      	movs	r2, #192	; 0xc0
 8005240:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005242:	193b      	adds	r3, r7, r4
 8005244:	2202      	movs	r2, #2
 8005246:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005248:	193b      	adds	r3, r7, r4
 800524a:	2200      	movs	r2, #0
 800524c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800524e:	193b      	adds	r3, r7, r4
 8005250:	2200      	movs	r2, #0
 8005252:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005254:	193b      	adds	r3, r7, r4
 8005256:	2202      	movs	r2, #2
 8005258:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800525a:	193a      	adds	r2, r7, r4
 800525c:	23a0      	movs	r3, #160	; 0xa0
 800525e:	05db      	lsls	r3, r3, #23
 8005260:	0011      	movs	r1, r2
 8005262:	0018      	movs	r0, r3
 8005264:	f7fc f9ce 	bl	8001604 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005268:	0021      	movs	r1, r4
 800526a:	187b      	adds	r3, r7, r1
 800526c:	2203      	movs	r2, #3
 800526e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005270:	187b      	adds	r3, r7, r1
 8005272:	2202      	movs	r2, #2
 8005274:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005276:	187b      	adds	r3, r7, r1
 8005278:	2200      	movs	r2, #0
 800527a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800527c:	187b      	adds	r3, r7, r1
 800527e:	2200      	movs	r2, #0
 8005280:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005282:	187b      	adds	r3, r7, r1
 8005284:	2202      	movs	r2, #2
 8005286:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005288:	187b      	adds	r3, r7, r1
 800528a:	4a06      	ldr	r2, [pc, #24]	; (80052a4 <HAL_TIM_MspPostInit+0x110>)
 800528c:	0019      	movs	r1, r3
 800528e:	0010      	movs	r0, r2
 8005290:	f7fc f9b8 	bl	8001604 <HAL_GPIO_Init>
}
 8005294:	46c0      	nop			; (mov r8, r8)
 8005296:	46bd      	mov	sp, r7
 8005298:	b00b      	add	sp, #44	; 0x2c
 800529a:	bd90      	pop	{r4, r7, pc}
 800529c:	40021000 	.word	0x40021000
 80052a0:	40000400 	.word	0x40000400
 80052a4:	50000400 	.word	0x50000400

080052a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052b0:	230c      	movs	r3, #12
 80052b2:	18fb      	adds	r3, r7, r3
 80052b4:	0018      	movs	r0, r3
 80052b6:	2314      	movs	r3, #20
 80052b8:	001a      	movs	r2, r3
 80052ba:	2100      	movs	r1, #0
 80052bc:	f000 fce8 	bl	8005c90 <memset>
  if(huart->Instance==USART2)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a18      	ldr	r2, [pc, #96]	; (8005328 <HAL_UART_MspInit+0x80>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d129      	bne.n	800531e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80052ca:	4b18      	ldr	r3, [pc, #96]	; (800532c <HAL_UART_MspInit+0x84>)
 80052cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ce:	4b17      	ldr	r3, [pc, #92]	; (800532c <HAL_UART_MspInit+0x84>)
 80052d0:	2180      	movs	r1, #128	; 0x80
 80052d2:	0289      	lsls	r1, r1, #10
 80052d4:	430a      	orrs	r2, r1
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052d8:	4b14      	ldr	r3, [pc, #80]	; (800532c <HAL_UART_MspInit+0x84>)
 80052da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052dc:	4b13      	ldr	r3, [pc, #76]	; (800532c <HAL_UART_MspInit+0x84>)
 80052de:	2101      	movs	r1, #1
 80052e0:	430a      	orrs	r2, r1
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80052e4:	4b11      	ldr	r3, [pc, #68]	; (800532c <HAL_UART_MspInit+0x84>)
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	2201      	movs	r2, #1
 80052ea:	4013      	ands	r3, r2
 80052ec:	60bb      	str	r3, [r7, #8]
 80052ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80052f0:	210c      	movs	r1, #12
 80052f2:	187b      	adds	r3, r7, r1
 80052f4:	220c      	movs	r2, #12
 80052f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f8:	187b      	adds	r3, r7, r1
 80052fa:	2202      	movs	r2, #2
 80052fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fe:	187b      	adds	r3, r7, r1
 8005300:	2200      	movs	r2, #0
 8005302:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005304:	187b      	adds	r3, r7, r1
 8005306:	2203      	movs	r2, #3
 8005308:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800530a:	187b      	adds	r3, r7, r1
 800530c:	2204      	movs	r2, #4
 800530e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005310:	187a      	adds	r2, r7, r1
 8005312:	23a0      	movs	r3, #160	; 0xa0
 8005314:	05db      	lsls	r3, r3, #23
 8005316:	0011      	movs	r1, r2
 8005318:	0018      	movs	r0, r3
 800531a:	f7fc f973 	bl	8001604 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	46bd      	mov	sp, r7
 8005322:	b008      	add	sp, #32
 8005324:	bd80      	pop	{r7, pc}
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	40004400 	.word	0x40004400
 800532c:	40021000 	.word	0x40021000

08005330 <checkTurn>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void checkTurn(void){
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
	if ((move == 1) && (count > 600)){
 8005334:	4b13      	ldr	r3, [pc, #76]	; (8005384 <checkTurn+0x54>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d10a      	bne.n	8005352 <checkTurn+0x22>
 800533c:	4b12      	ldr	r3, [pc, #72]	; (8005388 <checkTurn+0x58>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	2396      	movs	r3, #150	; 0x96
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	429a      	cmp	r2, r3
 8005346:	dd04      	ble.n	8005352 <checkTurn+0x22>
		printf("Keep turning left\r\n");
 8005348:	4b10      	ldr	r3, [pc, #64]	; (800538c <checkTurn+0x5c>)
 800534a:	0018      	movs	r0, r3
 800534c:	f000 fdca 	bl	8005ee4 <puts>
 8005350:	e015      	b.n	800537e <checkTurn+0x4e>
	}
	else if ((move == 2) && (count > 600)){
 8005352:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <checkTurn+0x54>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d10a      	bne.n	8005370 <checkTurn+0x40>
 800535a:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <checkTurn+0x58>)
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	2396      	movs	r3, #150	; 0x96
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	429a      	cmp	r2, r3
 8005364:	dd04      	ble.n	8005370 <checkTurn+0x40>
		printf("Keep turning right\r\n");
 8005366:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <checkTurn+0x60>)
 8005368:	0018      	movs	r0, r3
 800536a:	f000 fdbb 	bl	8005ee4 <puts>
 800536e:	e006      	b.n	800537e <checkTurn+0x4e>
	}
	else {
		printf("Good to go Forward\r\n");
 8005370:	4b08      	ldr	r3, [pc, #32]	; (8005394 <checkTurn+0x64>)
 8005372:	0018      	movs	r0, r3
 8005374:	f000 fdb6 	bl	8005ee4 <puts>
		move = 0;
 8005378:	4b02      	ldr	r3, [pc, #8]	; (8005384 <checkTurn+0x54>)
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
	}
}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	200000ac 	.word	0x200000ac
 8005388:	20000098 	.word	0x20000098
 800538c:	08006900 	.word	0x08006900
 8005390:	08006914 	.word	0x08006914
 8005394:	08006928 	.word	0x08006928

08005398 <checkStraight>:
void checkStraight(void){
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
	if (count > 600){
 800539c:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <checkStraight+0x28>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	2396      	movs	r3, #150	; 0x96
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	429a      	cmp	r2, r3
 80053a6:	dd08      	ble.n	80053ba <checkStraight+0x22>
		printf("checkDirection\r\n");
 80053a8:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <checkStraight+0x2c>)
 80053aa:	0018      	movs	r0, r3
 80053ac:	f000 fd9a 	bl	8005ee4 <puts>
		left = 1;
 80053b0:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <checkStraight+0x30>)
 80053b2:	2201      	movs	r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
		init_Left();
 80053b6:	f7fe ff35 	bl	8004224 <init_Left>
	}

}
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20000098 	.word	0x20000098
 80053c4:	0800693c 	.word	0x0800693c
 80053c8:	2000009c 	.word	0x2000009c

080053cc <checkLeft>:
void checkLeft(void){
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
	left++;
 80053d0:	4b12      	ldr	r3, [pc, #72]	; (800541c <checkLeft+0x50>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	4b11      	ldr	r3, [pc, #68]	; (800541c <checkLeft+0x50>)
 80053d8:	601a      	str	r2, [r3, #0]
	if (count > 600){
 80053da:	4b11      	ldr	r3, [pc, #68]	; (8005420 <checkLeft+0x54>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	2396      	movs	r3, #150	; 0x96
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	429a      	cmp	r2, r3
 80053e4:	dd03      	ble.n	80053ee <checkLeft+0x22>
		printf("Left Not good\r\n");
 80053e6:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <checkLeft+0x58>)
 80053e8:	0018      	movs	r0, r3
 80053ea:	f000 fd7b 	bl	8005ee4 <puts>
	}
	if (left > 3){
 80053ee:	4b0b      	ldr	r3, [pc, #44]	; (800541c <checkLeft+0x50>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	dd07      	ble.n	8005406 <checkLeft+0x3a>
		left = 0;
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <checkLeft+0x50>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]
		right = 1;
 80053fc:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <checkLeft+0x5c>)
 80053fe:	2201      	movs	r2, #1
 8005400:	601a      	str	r2, [r3, #0]
		init_Right();
 8005402:	f7fe ff1c 	bl	800423e <init_Right>
	}
	LCheck += count;
 8005406:	4b09      	ldr	r3, [pc, #36]	; (800542c <checkLeft+0x60>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4b05      	ldr	r3, [pc, #20]	; (8005420 <checkLeft+0x54>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	18d2      	adds	r2, r2, r3
 8005410:	4b06      	ldr	r3, [pc, #24]	; (800542c <checkLeft+0x60>)
 8005412:	601a      	str	r2, [r3, #0]
}
 8005414:	46c0      	nop			; (mov r8, r8)
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	2000009c 	.word	0x2000009c
 8005420:	20000098 	.word	0x20000098
 8005424:	0800694c 	.word	0x0800694c
 8005428:	200000a0 	.word	0x200000a0
 800542c:	200000a4 	.word	0x200000a4

08005430 <checkRight>:
void checkRight(void){
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
	right++;
 8005434:	4b11      	ldr	r3, [pc, #68]	; (800547c <checkRight+0x4c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	4b10      	ldr	r3, [pc, #64]	; (800547c <checkRight+0x4c>)
 800543c:	601a      	str	r2, [r3, #0]
	if (count > 600){
 800543e:	4b10      	ldr	r3, [pc, #64]	; (8005480 <checkRight+0x50>)
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	2396      	movs	r3, #150	; 0x96
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	429a      	cmp	r2, r3
 8005448:	dd03      	ble.n	8005452 <checkRight+0x22>
		printf("Right Not Good\r\n");
 800544a:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <checkRight+0x54>)
 800544c:	0018      	movs	r0, r3
 800544e:	f000 fd49 	bl	8005ee4 <puts>

	}
	if (right > 3){
 8005452:	4b0a      	ldr	r3, [pc, #40]	; (800547c <checkRight+0x4c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b03      	cmp	r3, #3
 8005458:	dd05      	ble.n	8005466 <checkRight+0x36>
		left = 0;
 800545a:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <checkRight+0x58>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
		right = 0;
 8005460:	4b06      	ldr	r3, [pc, #24]	; (800547c <checkRight+0x4c>)
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
	}
	RCheck += count;
 8005466:	4b09      	ldr	r3, [pc, #36]	; (800548c <checkRight+0x5c>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	4b05      	ldr	r3, [pc, #20]	; (8005480 <checkRight+0x50>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	18d2      	adds	r2, r2, r3
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <checkRight+0x5c>)
 8005472:	601a      	str	r2, [r3, #0]
}
 8005474:	46c0      	nop			; (mov r8, r8)
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	200000a0 	.word	0x200000a0
 8005480:	20000098 	.word	0x20000098
 8005484:	0800695c 	.word	0x0800695c
 8005488:	2000009c 	.word	0x2000009c
 800548c:	200000a8 	.word	0x200000a8

08005490 <determineDir>:
void determineDir(void){
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
	if (LCheck < RCheck){
 8005494:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <determineDir+0x44>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	4b0f      	ldr	r3, [pc, #60]	; (80054d8 <determineDir+0x48>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	da07      	bge.n	80054b0 <determineDir+0x20>
		printf("Turn Left\r\n");
 80054a0:	4b0e      	ldr	r3, [pc, #56]	; (80054dc <determineDir+0x4c>)
 80054a2:	0018      	movs	r0, r3
 80054a4:	f000 fd1e 	bl	8005ee4 <puts>
		move = 1;
 80054a8:	4b0d      	ldr	r3, [pc, #52]	; (80054e0 <determineDir+0x50>)
 80054aa:	2201      	movs	r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	e006      	b.n	80054be <determineDir+0x2e>
	}
	else {
		printf("Turn Right\r\n");
 80054b0:	4b0c      	ldr	r3, [pc, #48]	; (80054e4 <determineDir+0x54>)
 80054b2:	0018      	movs	r0, r3
 80054b4:	f000 fd16 	bl	8005ee4 <puts>
		move = 2;
 80054b8:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <determineDir+0x50>)
 80054ba:	2202      	movs	r2, #2
 80054bc:	601a      	str	r2, [r3, #0]
	}
	init_Straight();
 80054be:	f7fe fed5 	bl	800426c <init_Straight>
	LCheck = 0;
 80054c2:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <determineDir+0x44>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
	RCheck = 0;
 80054c8:	4b03      	ldr	r3, [pc, #12]	; (80054d8 <determineDir+0x48>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
}
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	200000a4 	.word	0x200000a4
 80054d8:	200000a8 	.word	0x200000a8
 80054dc:	0800696c 	.word	0x0800696c
 80054e0:	200000ac 	.word	0x200000ac
 80054e4:	08006978 	.word	0x08006978

080054e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80054ec:	46c0      	nop			; (mov r8, r8)
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HARD FAULT\r\n");
 80054f8:	4b02      	ldr	r3, [pc, #8]	; (8005504 <HardFault_Handler+0x10>)
 80054fa:	0018      	movs	r0, r3
 80054fc:	f000 fcf2 	bl	8005ee4 <puts>
 8005500:	e7fa      	b.n	80054f8 <HardFault_Handler+0x4>
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	08006984 	.word	0x08006984

08005508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800550c:	46c0      	nop			; (mov r8, r8)
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005520:	f7fb fc64 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005524:	46c0      	nop			; (mov r8, r8)
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_1)){
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <EXTI0_1_IRQHandler+0x30>)
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	2202      	movs	r2, #2
 8005536:	4013      	ands	r3, r2
 8005538:	d009      	beq.n	800554e <EXTI0_1_IRQHandler+0x22>
		if (((GPIOA->IDR) > 1) & 1){
 800553a:	23a0      	movs	r3, #160	; 0xa0
 800553c:	05db      	lsls	r3, r3, #23
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d904      	bls.n	800554e <EXTI0_1_IRQHandler+0x22>
			count++;
 8005544:	4b06      	ldr	r3, [pc, #24]	; (8005560 <EXTI0_1_IRQHandler+0x34>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	4b05      	ldr	r3, [pc, #20]	; (8005560 <EXTI0_1_IRQHandler+0x34>)
 800554c:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800554e:	2002      	movs	r0, #2
 8005550:	f7fc f9f4 	bl	800193c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8005554:	46c0      	nop			; (mov r8, r8)
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	40010400 	.word	0x40010400
 8005560:	20000098 	.word	0x20000098

08005564 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	// PIN 7
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6)){
 8005568:	4b1a      	ldr	r3, [pc, #104]	; (80055d4 <EXTI4_15_IRQHandler+0x70>)
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	2240      	movs	r2, #64	; 0x40
 800556e:	4013      	ands	r3, r2
 8005570:	d003      	beq.n	800557a <EXTI4_15_IRQHandler+0x16>
		printf("Push Button\r\n");
 8005572:	4b19      	ldr	r3, [pc, #100]	; (80055d8 <EXTI4_15_IRQHandler+0x74>)
 8005574:	0018      	movs	r0, r3
 8005576:	f000 fcb5 	bl	8005ee4 <puts>
	}
	// PIN 11
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11)){
 800557a:	4b16      	ldr	r3, [pc, #88]	; (80055d4 <EXTI4_15_IRQHandler+0x70>)
 800557c:	695a      	ldr	r2, [r3, #20]
 800557e:	2380      	movs	r3, #128	; 0x80
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	4013      	ands	r3, r2
 8005584:	d001      	beq.n	800558a <EXTI4_15_IRQHandler+0x26>
		Left_Encoder_Interrupt_Handler();
 8005586:	f7ff fc6d 	bl	8004e64 <Left_Encoder_Interrupt_Handler>
	}
	// PIN 12
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_12))
 800558a:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <EXTI4_15_IRQHandler+0x70>)
 800558c:	695a      	ldr	r2, [r3, #20]
 800558e:	2380      	movs	r3, #128	; 0x80
 8005590:	015b      	lsls	r3, r3, #5
 8005592:	4013      	ands	r3, r2
 8005594:	d001      	beq.n	800559a <EXTI4_15_IRQHandler+0x36>
	{
		Right_Encoder_Interrupt_Handler();
 8005596:	f7ff fc4d 	bl	8004e34 <Right_Encoder_Interrupt_Handler>
	}

	// PIN 13

	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 800559a:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <EXTI4_15_IRQHandler+0x70>)
 800559c:	695a      	ldr	r2, [r3, #20]
 800559e:	2380      	movs	r3, #128	; 0x80
 80055a0:	019b      	lsls	r3, r3, #6
 80055a2:	4013      	ands	r3, r2
 80055a4:	d001      	beq.n	80055aa <EXTI4_15_IRQHandler+0x46>
		Print_Encoder_Reading();
 80055a6:	f7ff fc8d 	bl	8004ec4 <Print_Encoder_Reading>
	}
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80055aa:	2040      	movs	r0, #64	; 0x40
 80055ac:	f7fc f9c6 	bl	800193c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80055b0:	2380      	movs	r3, #128	; 0x80
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	0018      	movs	r0, r3
 80055b6:	f7fc f9c1 	bl	800193c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80055ba:	2380      	movs	r3, #128	; 0x80
 80055bc:	015b      	lsls	r3, r3, #5
 80055be:	0018      	movs	r0, r3
 80055c0:	f7fc f9bc 	bl	800193c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	019b      	lsls	r3, r3, #6
 80055c8:	0018      	movs	r0, r3
 80055ca:	f7fc f9b7 	bl	800193c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40010400 	.word	0x40010400
 80055d8:	08006990 	.word	0x08006990

080055dc <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */
	if(ADC1->ISR & ADC_ISR_EOS){
 80055e0:	4b06      	ldr	r3, [pc, #24]	; (80055fc <ADC1_COMP_IRQHandler+0x20>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2208      	movs	r2, #8
 80055e6:	4013      	ands	r3, r2
 80055e8:	d001      	beq.n	80055ee <ADC1_COMP_IRQHandler+0x12>
		ADC_ConvCpltCallback();
 80055ea:	f7ff fc83 	bl	8004ef4 <ADC_ConvCpltCallback>
	}
  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80055ee:	4b04      	ldr	r3, [pc, #16]	; (8005600 <ADC1_COMP_IRQHandler+0x24>)
 80055f0:	0018      	movs	r0, r3
 80055f2:	f7fb fda3 	bl	800113c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40012400 	.word	0x40012400
 8005600:	20000284 	.word	0x20000284

08005604 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (move > 0){
 8005608:	4b1b      	ldr	r3, [pc, #108]	; (8005678 <TIM6_DAC_IRQHandler+0x74>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	dd02      	ble.n	8005616 <TIM6_DAC_IRQHandler+0x12>
		checkTurn();
 8005610:	f7ff fe8e 	bl	8005330 <checkTurn>
 8005614:	e026      	b.n	8005664 <TIM6_DAC_IRQHandler+0x60>
	}
	else if ((left == right) && (LCheck == RCheck)){
 8005616:	4b19      	ldr	r3, [pc, #100]	; (800567c <TIM6_DAC_IRQHandler+0x78>)
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	4b19      	ldr	r3, [pc, #100]	; (8005680 <TIM6_DAC_IRQHandler+0x7c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d108      	bne.n	8005634 <TIM6_DAC_IRQHandler+0x30>
 8005622:	4b18      	ldr	r3, [pc, #96]	; (8005684 <TIM6_DAC_IRQHandler+0x80>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	4b18      	ldr	r3, [pc, #96]	; (8005688 <TIM6_DAC_IRQHandler+0x84>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d102      	bne.n	8005634 <TIM6_DAC_IRQHandler+0x30>
		checkStraight();
 800562e:	f7ff feb3 	bl	8005398 <checkStraight>
 8005632:	e017      	b.n	8005664 <TIM6_DAC_IRQHandler+0x60>
	}
	else if(left > 0){
 8005634:	4b11      	ldr	r3, [pc, #68]	; (800567c <TIM6_DAC_IRQHandler+0x78>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	dd02      	ble.n	8005642 <TIM6_DAC_IRQHandler+0x3e>
		checkLeft();
 800563c:	f7ff fec6 	bl	80053cc <checkLeft>
 8005640:	e010      	b.n	8005664 <TIM6_DAC_IRQHandler+0x60>
	}
	else if(right > 0){
 8005642:	4b0f      	ldr	r3, [pc, #60]	; (8005680 <TIM6_DAC_IRQHandler+0x7c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	dd02      	ble.n	8005650 <TIM6_DAC_IRQHandler+0x4c>
		checkRight();
 800564a:	f7ff fef1 	bl	8005430 <checkRight>
 800564e:	e009      	b.n	8005664 <TIM6_DAC_IRQHandler+0x60>
	}
	else if ((RCheck > 0) && (LCheck > 0)){
 8005650:	4b0d      	ldr	r3, [pc, #52]	; (8005688 <TIM6_DAC_IRQHandler+0x84>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	dd05      	ble.n	8005664 <TIM6_DAC_IRQHandler+0x60>
 8005658:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <TIM6_DAC_IRQHandler+0x80>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	dd01      	ble.n	8005664 <TIM6_DAC_IRQHandler+0x60>
		determineDir();
 8005660:	f7ff ff16 	bl	8005490 <determineDir>
	}
	count = 0;
 8005664:	4b09      	ldr	r3, [pc, #36]	; (800568c <TIM6_DAC_IRQHandler+0x88>)
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800566a:	4b09      	ldr	r3, [pc, #36]	; (8005690 <TIM6_DAC_IRQHandler+0x8c>)
 800566c:	0018      	movs	r0, r3
 800566e:	f7fd fa46 	bl	8002afe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	200000ac 	.word	0x200000ac
 800567c:	2000009c 	.word	0x2000009c
 8005680:	200000a0 	.word	0x200000a0
 8005684:	200000a4 	.word	0x200000a4
 8005688:	200000a8 	.word	0x200000a8
 800568c:	20000098 	.word	0x20000098
 8005690:	20000168 	.word	0x20000168

08005694 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */
	TEN_KHZ_TIM_Interrupt_Handler();
 8005698:	f7ff fbfc 	bl	8004e94 <TEN_KHZ_TIM_Interrupt_Handler>
  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 800569c:	4b03      	ldr	r3, [pc, #12]	; (80056ac <TIM21_IRQHandler+0x18>)
 800569e:	0018      	movs	r0, r3
 80056a0:	f7fd fa2d 	bl	8002afe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80056a4:	46c0      	nop			; (mov r8, r8)
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	200002ec 	.word	0x200002ec

080056b0 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */
//  TIM22_Interrupt_Handler();
  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 80056b4:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <TIM22_IRQHandler+0x14>)
 80056b6:	0018      	movs	r0, r3
 80056b8:	f7fd fa21 	bl	8002afe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 80056bc:	46c0      	nop			; (mov r8, r8)
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	20000124 	.word	0x20000124

080056c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e00a      	b.n	80056f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80056da:	e000      	b.n	80056de <_read+0x16>
 80056dc:	bf00      	nop
 80056de:	0001      	movs	r1, r0
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	60ba      	str	r2, [r7, #8]
 80056e6:	b2ca      	uxtb	r2, r1
 80056e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	3301      	adds	r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	dbf0      	blt.n	80056da <_read+0x12>
	}

return len;
 80056f8:	687b      	ldr	r3, [r7, #4]
}
 80056fa:	0018      	movs	r0, r3
 80056fc:	46bd      	mov	sp, r7
 80056fe:	b006      	add	sp, #24
 8005700:	bd80      	pop	{r7, pc}

08005702 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b086      	sub	sp, #24
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	e009      	b.n	8005728 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	60ba      	str	r2, [r7, #8]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	0018      	movs	r0, r3
 800571e:	f7ff fb75 	bl	8004e0c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	3301      	adds	r3, #1
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	429a      	cmp	r2, r3
 800572e:	dbf1      	blt.n	8005714 <_write+0x12>
	}
	return len;
 8005730:	687b      	ldr	r3, [r7, #4]
}
 8005732:	0018      	movs	r0, r3
 8005734:	46bd      	mov	sp, r7
 8005736:	b006      	add	sp, #24
 8005738:	bd80      	pop	{r7, pc}

0800573a <_close>:

int _close(int file)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b082      	sub	sp, #8
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
	return -1;
 8005742:	2301      	movs	r3, #1
 8005744:	425b      	negs	r3, r3
}
 8005746:	0018      	movs	r0, r3
 8005748:	46bd      	mov	sp, r7
 800574a:	b002      	add	sp, #8
 800574c:	bd80      	pop	{r7, pc}

0800574e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b082      	sub	sp, #8
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2280      	movs	r2, #128	; 0x80
 800575c:	0192      	lsls	r2, r2, #6
 800575e:	605a      	str	r2, [r3, #4]
	return 0;
 8005760:	2300      	movs	r3, #0
}
 8005762:	0018      	movs	r0, r3
 8005764:	46bd      	mov	sp, r7
 8005766:	b002      	add	sp, #8
 8005768:	bd80      	pop	{r7, pc}

0800576a <_isatty>:

int _isatty(int file)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
	return 1;
 8005772:	2301      	movs	r3, #1
}
 8005774:	0018      	movs	r0, r3
 8005776:	46bd      	mov	sp, r7
 8005778:	b002      	add	sp, #8
 800577a:	bd80      	pop	{r7, pc}

0800577c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
	return 0;
 8005788:	2300      	movs	r3, #0
}
 800578a:	0018      	movs	r0, r3
 800578c:	46bd      	mov	sp, r7
 800578e:	b004      	add	sp, #16
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800579c:	4b11      	ldr	r3, [pc, #68]	; (80057e4 <_sbrk+0x50>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d102      	bne.n	80057aa <_sbrk+0x16>
		heap_end = &end;
 80057a4:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <_sbrk+0x50>)
 80057a6:	4a10      	ldr	r2, [pc, #64]	; (80057e8 <_sbrk+0x54>)
 80057a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80057aa:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <_sbrk+0x50>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80057b0:	4b0c      	ldr	r3, [pc, #48]	; (80057e4 <_sbrk+0x50>)
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	18d3      	adds	r3, r2, r3
 80057b8:	466a      	mov	r2, sp
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d907      	bls.n	80057ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80057be:	f000 f89d 	bl	80058fc <__errno>
 80057c2:	0003      	movs	r3, r0
 80057c4:	220c      	movs	r2, #12
 80057c6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80057c8:	2301      	movs	r3, #1
 80057ca:	425b      	negs	r3, r3
 80057cc:	e006      	b.n	80057dc <_sbrk+0x48>
	}

	heap_end += incr;
 80057ce:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <_sbrk+0x50>)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	18d2      	adds	r2, r2, r3
 80057d6:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <_sbrk+0x50>)
 80057d8:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80057da:	68fb      	ldr	r3, [r7, #12]
}
 80057dc:	0018      	movs	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	b004      	add	sp, #16
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	200000b0 	.word	0x200000b0
 80057e8:	20000330 	.word	0x20000330

080057ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80057f0:	4b17      	ldr	r3, [pc, #92]	; (8005850 <SystemInit+0x64>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4b16      	ldr	r3, [pc, #88]	; (8005850 <SystemInit+0x64>)
 80057f6:	2180      	movs	r1, #128	; 0x80
 80057f8:	0049      	lsls	r1, r1, #1
 80057fa:	430a      	orrs	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80057fe:	4b14      	ldr	r3, [pc, #80]	; (8005850 <SystemInit+0x64>)
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	4b13      	ldr	r3, [pc, #76]	; (8005850 <SystemInit+0x64>)
 8005804:	4913      	ldr	r1, [pc, #76]	; (8005854 <SystemInit+0x68>)
 8005806:	400a      	ands	r2, r1
 8005808:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800580a:	4b11      	ldr	r3, [pc, #68]	; (8005850 <SystemInit+0x64>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	4b10      	ldr	r3, [pc, #64]	; (8005850 <SystemInit+0x64>)
 8005810:	4911      	ldr	r1, [pc, #68]	; (8005858 <SystemInit+0x6c>)
 8005812:	400a      	ands	r2, r1
 8005814:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005816:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <SystemInit+0x64>)
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <SystemInit+0x64>)
 800581c:	2101      	movs	r1, #1
 800581e:	438a      	bics	r2, r1
 8005820:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005822:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <SystemInit+0x64>)
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <SystemInit+0x64>)
 8005828:	490c      	ldr	r1, [pc, #48]	; (800585c <SystemInit+0x70>)
 800582a:	400a      	ands	r2, r1
 800582c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800582e:	4b08      	ldr	r3, [pc, #32]	; (8005850 <SystemInit+0x64>)
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	4b07      	ldr	r3, [pc, #28]	; (8005850 <SystemInit+0x64>)
 8005834:	490a      	ldr	r1, [pc, #40]	; (8005860 <SystemInit+0x74>)
 8005836:	400a      	ands	r2, r1
 8005838:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800583a:	4b05      	ldr	r3, [pc, #20]	; (8005850 <SystemInit+0x64>)
 800583c:	2200      	movs	r2, #0
 800583e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005840:	4b08      	ldr	r3, [pc, #32]	; (8005864 <SystemInit+0x78>)
 8005842:	2280      	movs	r2, #128	; 0x80
 8005844:	0512      	lsls	r2, r2, #20
 8005846:	609a      	str	r2, [r3, #8]
#endif
}
 8005848:	46c0      	nop			; (mov r8, r8)
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	40021000 	.word	0x40021000
 8005854:	88ff400c 	.word	0x88ff400c
 8005858:	fef6fff6 	.word	0xfef6fff6
 800585c:	fffbffff 	.word	0xfffbffff
 8005860:	ff02ffff 	.word	0xff02ffff
 8005864:	e000ed00 	.word	0xe000ed00

08005868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005868:	480d      	ldr	r0, [pc, #52]	; (80058a0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800586a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800586c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800586e:	e003      	b.n	8005878 <LoopCopyDataInit>

08005870 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005870:	4b0c      	ldr	r3, [pc, #48]	; (80058a4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8005872:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005874:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005876:	3104      	adds	r1, #4

08005878 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8005878:	480b      	ldr	r0, [pc, #44]	; (80058a8 <LoopForever+0xa>)
  ldr  r3, =_edata
 800587a:	4b0c      	ldr	r3, [pc, #48]	; (80058ac <LoopForever+0xe>)
  adds  r2, r0, r1
 800587c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800587e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005880:	d3f6      	bcc.n	8005870 <CopyDataInit>
  ldr  r2, =_sbss
 8005882:	4a0b      	ldr	r2, [pc, #44]	; (80058b0 <LoopForever+0x12>)
  b  LoopFillZerobss
 8005884:	e002      	b.n	800588c <LoopFillZerobss>

08005886 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005886:	2300      	movs	r3, #0
  str  r3, [r2]
 8005888:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800588a:	3204      	adds	r2, #4

0800588c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800588c:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <LoopForever+0x16>)
  cmp  r2, r3
 800588e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005890:	d3f9      	bcc.n	8005886 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005892:	f7ff ffab 	bl	80057ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005896:	f000 f9d7 	bl	8005c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800589a:	f7fe fdd3 	bl	8004444 <main>

0800589e <LoopForever>:

LoopForever:
    b LoopForever
 800589e:	e7fe      	b.n	800589e <LoopForever>
   ldr   r0, =_estack
 80058a0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80058a4:	08006af4 	.word	0x08006af4
  ldr  r0, =_sdata
 80058a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80058ac:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 80058b0:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 80058b4:	2000032c 	.word	0x2000032c

080058b8 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058b8:	e7fe      	b.n	80058b8 <DMA1_Channel1_IRQHandler>

080058ba <arm_pid_init_f32>:
 80058ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058bc:	b081      	sub	sp, #4
 80058be:	460d      	mov	r5, r1
 80058c0:	4604      	mov	r4, r0
 80058c2:	6a06      	ldr	r6, [r0, #32]
 80058c4:	6086      	str	r6, [r0, #8]
 80058c6:	2003      	movs	r0, #3
 80058c8:	0781      	lsls	r1, r0, #30
 80058ca:	4630      	mov	r0, r6
 80058cc:	f7fa ff24 	bl	8000718 <__aeabi_fmul>
 80058d0:	69a7      	ldr	r7, [r4, #24]
 80058d2:	4639      	mov	r1, r7
 80058d4:	f7fb f852 	bl	800097c <__aeabi_fsub>
 80058d8:	6060      	str	r0, [r4, #4]
 80058da:	69e1      	ldr	r1, [r4, #28]
 80058dc:	4638      	mov	r0, r7
 80058de:	f7fa fd81 	bl	80003e4 <__aeabi_fadd>
 80058e2:	4631      	mov	r1, r6
 80058e4:	f7fa fd7e 	bl	80003e4 <__aeabi_fadd>
 80058e8:	6020      	str	r0, [r4, #0]
 80058ea:	2d00      	cmp	r5, #0
 80058ec:	d003      	beq.n	80058f6 <arm_pid_init_f32+0x3c>
 80058ee:	2000      	movs	r0, #0
 80058f0:	60e0      	str	r0, [r4, #12]
 80058f2:	6120      	str	r0, [r4, #16]
 80058f4:	6160      	str	r0, [r4, #20]
 80058f6:	b001      	add	sp, #4
 80058f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080058fc <__errno>:
 80058fc:	4b01      	ldr	r3, [pc, #4]	; (8005904 <__errno+0x8>)
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	4770      	bx	lr
 8005902:	46c0      	nop			; (mov r8, r8)
 8005904:	20000004 	.word	0x20000004

08005908 <__sflush_r>:
 8005908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800590a:	898a      	ldrh	r2, [r1, #12]
 800590c:	0005      	movs	r5, r0
 800590e:	000c      	movs	r4, r1
 8005910:	0713      	lsls	r3, r2, #28
 8005912:	d460      	bmi.n	80059d6 <__sflush_r+0xce>
 8005914:	684b      	ldr	r3, [r1, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	dc04      	bgt.n	8005924 <__sflush_r+0x1c>
 800591a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	dc01      	bgt.n	8005924 <__sflush_r+0x1c>
 8005920:	2000      	movs	r0, #0
 8005922:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005924:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005926:	2f00      	cmp	r7, #0
 8005928:	d0fa      	beq.n	8005920 <__sflush_r+0x18>
 800592a:	2300      	movs	r3, #0
 800592c:	682e      	ldr	r6, [r5, #0]
 800592e:	602b      	str	r3, [r5, #0]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	015b      	lsls	r3, r3, #5
 8005934:	6a21      	ldr	r1, [r4, #32]
 8005936:	401a      	ands	r2, r3
 8005938:	d034      	beq.n	80059a4 <__sflush_r+0x9c>
 800593a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800593c:	89a3      	ldrh	r3, [r4, #12]
 800593e:	075b      	lsls	r3, r3, #29
 8005940:	d506      	bpl.n	8005950 <__sflush_r+0x48>
 8005942:	6863      	ldr	r3, [r4, #4]
 8005944:	1ac0      	subs	r0, r0, r3
 8005946:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <__sflush_r+0x48>
 800594c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800594e:	1ac0      	subs	r0, r0, r3
 8005950:	0002      	movs	r2, r0
 8005952:	6a21      	ldr	r1, [r4, #32]
 8005954:	2300      	movs	r3, #0
 8005956:	0028      	movs	r0, r5
 8005958:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800595a:	47b8      	blx	r7
 800595c:	89a1      	ldrh	r1, [r4, #12]
 800595e:	1c43      	adds	r3, r0, #1
 8005960:	d106      	bne.n	8005970 <__sflush_r+0x68>
 8005962:	682b      	ldr	r3, [r5, #0]
 8005964:	2b1d      	cmp	r3, #29
 8005966:	d830      	bhi.n	80059ca <__sflush_r+0xc2>
 8005968:	4a2b      	ldr	r2, [pc, #172]	; (8005a18 <__sflush_r+0x110>)
 800596a:	40da      	lsrs	r2, r3
 800596c:	07d3      	lsls	r3, r2, #31
 800596e:	d52c      	bpl.n	80059ca <__sflush_r+0xc2>
 8005970:	2300      	movs	r3, #0
 8005972:	6063      	str	r3, [r4, #4]
 8005974:	6923      	ldr	r3, [r4, #16]
 8005976:	6023      	str	r3, [r4, #0]
 8005978:	04cb      	lsls	r3, r1, #19
 800597a:	d505      	bpl.n	8005988 <__sflush_r+0x80>
 800597c:	1c43      	adds	r3, r0, #1
 800597e:	d102      	bne.n	8005986 <__sflush_r+0x7e>
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d100      	bne.n	8005988 <__sflush_r+0x80>
 8005986:	6560      	str	r0, [r4, #84]	; 0x54
 8005988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800598a:	602e      	str	r6, [r5, #0]
 800598c:	2900      	cmp	r1, #0
 800598e:	d0c7      	beq.n	8005920 <__sflush_r+0x18>
 8005990:	0023      	movs	r3, r4
 8005992:	3344      	adds	r3, #68	; 0x44
 8005994:	4299      	cmp	r1, r3
 8005996:	d002      	beq.n	800599e <__sflush_r+0x96>
 8005998:	0028      	movs	r0, r5
 800599a:	f000 f981 	bl	8005ca0 <_free_r>
 800599e:	2000      	movs	r0, #0
 80059a0:	6360      	str	r0, [r4, #52]	; 0x34
 80059a2:	e7be      	b.n	8005922 <__sflush_r+0x1a>
 80059a4:	2301      	movs	r3, #1
 80059a6:	0028      	movs	r0, r5
 80059a8:	47b8      	blx	r7
 80059aa:	1c43      	adds	r3, r0, #1
 80059ac:	d1c6      	bne.n	800593c <__sflush_r+0x34>
 80059ae:	682b      	ldr	r3, [r5, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0c3      	beq.n	800593c <__sflush_r+0x34>
 80059b4:	2b1d      	cmp	r3, #29
 80059b6:	d001      	beq.n	80059bc <__sflush_r+0xb4>
 80059b8:	2b16      	cmp	r3, #22
 80059ba:	d101      	bne.n	80059c0 <__sflush_r+0xb8>
 80059bc:	602e      	str	r6, [r5, #0]
 80059be:	e7af      	b.n	8005920 <__sflush_r+0x18>
 80059c0:	2340      	movs	r3, #64	; 0x40
 80059c2:	89a2      	ldrh	r2, [r4, #12]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	81a3      	strh	r3, [r4, #12]
 80059c8:	e7ab      	b.n	8005922 <__sflush_r+0x1a>
 80059ca:	2340      	movs	r3, #64	; 0x40
 80059cc:	430b      	orrs	r3, r1
 80059ce:	2001      	movs	r0, #1
 80059d0:	81a3      	strh	r3, [r4, #12]
 80059d2:	4240      	negs	r0, r0
 80059d4:	e7a5      	b.n	8005922 <__sflush_r+0x1a>
 80059d6:	690f      	ldr	r7, [r1, #16]
 80059d8:	2f00      	cmp	r7, #0
 80059da:	d0a1      	beq.n	8005920 <__sflush_r+0x18>
 80059dc:	680b      	ldr	r3, [r1, #0]
 80059de:	600f      	str	r7, [r1, #0]
 80059e0:	1bdb      	subs	r3, r3, r7
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	2300      	movs	r3, #0
 80059e6:	0792      	lsls	r2, r2, #30
 80059e8:	d100      	bne.n	80059ec <__sflush_r+0xe4>
 80059ea:	694b      	ldr	r3, [r1, #20]
 80059ec:	60a3      	str	r3, [r4, #8]
 80059ee:	9b01      	ldr	r3, [sp, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	dc00      	bgt.n	80059f6 <__sflush_r+0xee>
 80059f4:	e794      	b.n	8005920 <__sflush_r+0x18>
 80059f6:	9b01      	ldr	r3, [sp, #4]
 80059f8:	003a      	movs	r2, r7
 80059fa:	6a21      	ldr	r1, [r4, #32]
 80059fc:	0028      	movs	r0, r5
 80059fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a00:	47b0      	blx	r6
 8005a02:	2800      	cmp	r0, #0
 8005a04:	dc03      	bgt.n	8005a0e <__sflush_r+0x106>
 8005a06:	2340      	movs	r3, #64	; 0x40
 8005a08:	89a2      	ldrh	r2, [r4, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	e7df      	b.n	80059ce <__sflush_r+0xc6>
 8005a0e:	9b01      	ldr	r3, [sp, #4]
 8005a10:	183f      	adds	r7, r7, r0
 8005a12:	1a1b      	subs	r3, r3, r0
 8005a14:	9301      	str	r3, [sp, #4]
 8005a16:	e7ea      	b.n	80059ee <__sflush_r+0xe6>
 8005a18:	20400001 	.word	0x20400001

08005a1c <_fflush_r>:
 8005a1c:	690b      	ldr	r3, [r1, #16]
 8005a1e:	b570      	push	{r4, r5, r6, lr}
 8005a20:	0005      	movs	r5, r0
 8005a22:	000c      	movs	r4, r1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <_fflush_r+0x10>
 8005a28:	2000      	movs	r0, #0
 8005a2a:	bd70      	pop	{r4, r5, r6, pc}
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	d004      	beq.n	8005a3a <_fflush_r+0x1e>
 8005a30:	6983      	ldr	r3, [r0, #24]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <_fflush_r+0x1e>
 8005a36:	f000 f873 	bl	8005b20 <__sinit>
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <_fflush_r+0x4c>)
 8005a3c:	429c      	cmp	r4, r3
 8005a3e:	d109      	bne.n	8005a54 <_fflush_r+0x38>
 8005a40:	686c      	ldr	r4, [r5, #4]
 8005a42:	220c      	movs	r2, #12
 8005a44:	5ea3      	ldrsh	r3, [r4, r2]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0ee      	beq.n	8005a28 <_fflush_r+0xc>
 8005a4a:	0021      	movs	r1, r4
 8005a4c:	0028      	movs	r0, r5
 8005a4e:	f7ff ff5b 	bl	8005908 <__sflush_r>
 8005a52:	e7ea      	b.n	8005a2a <_fflush_r+0xe>
 8005a54:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <_fflush_r+0x50>)
 8005a56:	429c      	cmp	r4, r3
 8005a58:	d101      	bne.n	8005a5e <_fflush_r+0x42>
 8005a5a:	68ac      	ldr	r4, [r5, #8]
 8005a5c:	e7f1      	b.n	8005a42 <_fflush_r+0x26>
 8005a5e:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <_fflush_r+0x54>)
 8005a60:	429c      	cmp	r4, r3
 8005a62:	d1ee      	bne.n	8005a42 <_fflush_r+0x26>
 8005a64:	68ec      	ldr	r4, [r5, #12]
 8005a66:	e7ec      	b.n	8005a42 <_fflush_r+0x26>
 8005a68:	08006a6c 	.word	0x08006a6c
 8005a6c:	08006a8c 	.word	0x08006a8c
 8005a70:	08006a4c 	.word	0x08006a4c

08005a74 <fflush>:
 8005a74:	b510      	push	{r4, lr}
 8005a76:	1e01      	subs	r1, r0, #0
 8005a78:	d105      	bne.n	8005a86 <fflush+0x12>
 8005a7a:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <fflush+0x1c>)
 8005a7c:	4905      	ldr	r1, [pc, #20]	; (8005a94 <fflush+0x20>)
 8005a7e:	6818      	ldr	r0, [r3, #0]
 8005a80:	f000 f8c0 	bl	8005c04 <_fwalk_reent>
 8005a84:	bd10      	pop	{r4, pc}
 8005a86:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <fflush+0x24>)
 8005a88:	6818      	ldr	r0, [r3, #0]
 8005a8a:	f7ff ffc7 	bl	8005a1c <_fflush_r>
 8005a8e:	e7f9      	b.n	8005a84 <fflush+0x10>
 8005a90:	08006aac 	.word	0x08006aac
 8005a94:	08005a1d 	.word	0x08005a1d
 8005a98:	20000004 	.word	0x20000004

08005a9c <std>:
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	b510      	push	{r4, lr}
 8005aa0:	0004      	movs	r4, r0
 8005aa2:	6003      	str	r3, [r0, #0]
 8005aa4:	6043      	str	r3, [r0, #4]
 8005aa6:	6083      	str	r3, [r0, #8]
 8005aa8:	8181      	strh	r1, [r0, #12]
 8005aaa:	6643      	str	r3, [r0, #100]	; 0x64
 8005aac:	81c2      	strh	r2, [r0, #14]
 8005aae:	6103      	str	r3, [r0, #16]
 8005ab0:	6143      	str	r3, [r0, #20]
 8005ab2:	6183      	str	r3, [r0, #24]
 8005ab4:	0019      	movs	r1, r3
 8005ab6:	2208      	movs	r2, #8
 8005ab8:	305c      	adds	r0, #92	; 0x5c
 8005aba:	f000 f8e9 	bl	8005c90 <memset>
 8005abe:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <std+0x38>)
 8005ac0:	6224      	str	r4, [r4, #32]
 8005ac2:	6263      	str	r3, [r4, #36]	; 0x24
 8005ac4:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <std+0x3c>)
 8005ac6:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ac8:	4b04      	ldr	r3, [pc, #16]	; (8005adc <std+0x40>)
 8005aca:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005acc:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <std+0x44>)
 8005ace:	6323      	str	r3, [r4, #48]	; 0x30
 8005ad0:	bd10      	pop	{r4, pc}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	08005f1d 	.word	0x08005f1d
 8005ad8:	08005f45 	.word	0x08005f45
 8005adc:	08005f7d 	.word	0x08005f7d
 8005ae0:	08005fa9 	.word	0x08005fa9

08005ae4 <_cleanup_r>:
 8005ae4:	b510      	push	{r4, lr}
 8005ae6:	4902      	ldr	r1, [pc, #8]	; (8005af0 <_cleanup_r+0xc>)
 8005ae8:	f000 f88c 	bl	8005c04 <_fwalk_reent>
 8005aec:	bd10      	pop	{r4, pc}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	08005a1d 	.word	0x08005a1d

08005af4 <__sfmoreglue>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	2568      	movs	r5, #104	; 0x68
 8005af8:	1e4a      	subs	r2, r1, #1
 8005afa:	4355      	muls	r5, r2
 8005afc:	000e      	movs	r6, r1
 8005afe:	0029      	movs	r1, r5
 8005b00:	3174      	adds	r1, #116	; 0x74
 8005b02:	f000 f917 	bl	8005d34 <_malloc_r>
 8005b06:	1e04      	subs	r4, r0, #0
 8005b08:	d008      	beq.n	8005b1c <__sfmoreglue+0x28>
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	002a      	movs	r2, r5
 8005b0e:	6001      	str	r1, [r0, #0]
 8005b10:	6046      	str	r6, [r0, #4]
 8005b12:	300c      	adds	r0, #12
 8005b14:	60a0      	str	r0, [r4, #8]
 8005b16:	3268      	adds	r2, #104	; 0x68
 8005b18:	f000 f8ba 	bl	8005c90 <memset>
 8005b1c:	0020      	movs	r0, r4
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}

08005b20 <__sinit>:
 8005b20:	6983      	ldr	r3, [r0, #24]
 8005b22:	b513      	push	{r0, r1, r4, lr}
 8005b24:	0004      	movs	r4, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d128      	bne.n	8005b7c <__sinit+0x5c>
 8005b2a:	6483      	str	r3, [r0, #72]	; 0x48
 8005b2c:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005b2e:	6503      	str	r3, [r0, #80]	; 0x50
 8005b30:	4b13      	ldr	r3, [pc, #76]	; (8005b80 <__sinit+0x60>)
 8005b32:	4a14      	ldr	r2, [pc, #80]	; (8005b84 <__sinit+0x64>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6282      	str	r2, [r0, #40]	; 0x28
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	4298      	cmp	r0, r3
 8005b3c:	d101      	bne.n	8005b42 <__sinit+0x22>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	6183      	str	r3, [r0, #24]
 8005b42:	0020      	movs	r0, r4
 8005b44:	f000 f820 	bl	8005b88 <__sfp>
 8005b48:	6060      	str	r0, [r4, #4]
 8005b4a:	0020      	movs	r0, r4
 8005b4c:	f000 f81c 	bl	8005b88 <__sfp>
 8005b50:	60a0      	str	r0, [r4, #8]
 8005b52:	0020      	movs	r0, r4
 8005b54:	f000 f818 	bl	8005b88 <__sfp>
 8005b58:	2200      	movs	r2, #0
 8005b5a:	60e0      	str	r0, [r4, #12]
 8005b5c:	2104      	movs	r1, #4
 8005b5e:	6860      	ldr	r0, [r4, #4]
 8005b60:	f7ff ff9c 	bl	8005a9c <std>
 8005b64:	2201      	movs	r2, #1
 8005b66:	2109      	movs	r1, #9
 8005b68:	68a0      	ldr	r0, [r4, #8]
 8005b6a:	f7ff ff97 	bl	8005a9c <std>
 8005b6e:	2202      	movs	r2, #2
 8005b70:	2112      	movs	r1, #18
 8005b72:	68e0      	ldr	r0, [r4, #12]
 8005b74:	f7ff ff92 	bl	8005a9c <std>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	61a3      	str	r3, [r4, #24]
 8005b7c:	bd13      	pop	{r0, r1, r4, pc}
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	08006aac 	.word	0x08006aac
 8005b84:	08005ae5 	.word	0x08005ae5

08005b88 <__sfp>:
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8a:	4b1c      	ldr	r3, [pc, #112]	; (8005bfc <__sfp+0x74>)
 8005b8c:	0007      	movs	r7, r0
 8005b8e:	681e      	ldr	r6, [r3, #0]
 8005b90:	69b3      	ldr	r3, [r6, #24]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d102      	bne.n	8005b9c <__sfp+0x14>
 8005b96:	0030      	movs	r0, r6
 8005b98:	f7ff ffc2 	bl	8005b20 <__sinit>
 8005b9c:	3648      	adds	r6, #72	; 0x48
 8005b9e:	68b4      	ldr	r4, [r6, #8]
 8005ba0:	6873      	ldr	r3, [r6, #4]
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	d504      	bpl.n	8005bb0 <__sfp+0x28>
 8005ba6:	6833      	ldr	r3, [r6, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d007      	beq.n	8005bbc <__sfp+0x34>
 8005bac:	6836      	ldr	r6, [r6, #0]
 8005bae:	e7f6      	b.n	8005b9e <__sfp+0x16>
 8005bb0:	220c      	movs	r2, #12
 8005bb2:	5ea5      	ldrsh	r5, [r4, r2]
 8005bb4:	2d00      	cmp	r5, #0
 8005bb6:	d00d      	beq.n	8005bd4 <__sfp+0x4c>
 8005bb8:	3468      	adds	r4, #104	; 0x68
 8005bba:	e7f2      	b.n	8005ba2 <__sfp+0x1a>
 8005bbc:	2104      	movs	r1, #4
 8005bbe:	0038      	movs	r0, r7
 8005bc0:	f7ff ff98 	bl	8005af4 <__sfmoreglue>
 8005bc4:	6030      	str	r0, [r6, #0]
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d1f0      	bne.n	8005bac <__sfp+0x24>
 8005bca:	230c      	movs	r3, #12
 8005bcc:	0004      	movs	r4, r0
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	0020      	movs	r0, r4
 8005bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd4:	0020      	movs	r0, r4
 8005bd6:	4b0a      	ldr	r3, [pc, #40]	; (8005c00 <__sfp+0x78>)
 8005bd8:	6665      	str	r5, [r4, #100]	; 0x64
 8005bda:	6025      	str	r5, [r4, #0]
 8005bdc:	6065      	str	r5, [r4, #4]
 8005bde:	60a5      	str	r5, [r4, #8]
 8005be0:	60e3      	str	r3, [r4, #12]
 8005be2:	6125      	str	r5, [r4, #16]
 8005be4:	6165      	str	r5, [r4, #20]
 8005be6:	61a5      	str	r5, [r4, #24]
 8005be8:	2208      	movs	r2, #8
 8005bea:	0029      	movs	r1, r5
 8005bec:	305c      	adds	r0, #92	; 0x5c
 8005bee:	f000 f84f 	bl	8005c90 <memset>
 8005bf2:	6365      	str	r5, [r4, #52]	; 0x34
 8005bf4:	63a5      	str	r5, [r4, #56]	; 0x38
 8005bf6:	64a5      	str	r5, [r4, #72]	; 0x48
 8005bf8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005bfa:	e7e9      	b.n	8005bd0 <__sfp+0x48>
 8005bfc:	08006aac 	.word	0x08006aac
 8005c00:	ffff0001 	.word	0xffff0001

08005c04 <_fwalk_reent>:
 8005c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c06:	0004      	movs	r4, r0
 8005c08:	0007      	movs	r7, r0
 8005c0a:	2600      	movs	r6, #0
 8005c0c:	9101      	str	r1, [sp, #4]
 8005c0e:	3448      	adds	r4, #72	; 0x48
 8005c10:	2c00      	cmp	r4, #0
 8005c12:	d101      	bne.n	8005c18 <_fwalk_reent+0x14>
 8005c14:	0030      	movs	r0, r6
 8005c16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c18:	6863      	ldr	r3, [r4, #4]
 8005c1a:	68a5      	ldr	r5, [r4, #8]
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	9b00      	ldr	r3, [sp, #0]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	d501      	bpl.n	8005c2a <_fwalk_reent+0x26>
 8005c26:	6824      	ldr	r4, [r4, #0]
 8005c28:	e7f2      	b.n	8005c10 <_fwalk_reent+0xc>
 8005c2a:	89ab      	ldrh	r3, [r5, #12]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d908      	bls.n	8005c42 <_fwalk_reent+0x3e>
 8005c30:	220e      	movs	r2, #14
 8005c32:	5eab      	ldrsh	r3, [r5, r2]
 8005c34:	3301      	adds	r3, #1
 8005c36:	d004      	beq.n	8005c42 <_fwalk_reent+0x3e>
 8005c38:	0029      	movs	r1, r5
 8005c3a:	0038      	movs	r0, r7
 8005c3c:	9b01      	ldr	r3, [sp, #4]
 8005c3e:	4798      	blx	r3
 8005c40:	4306      	orrs	r6, r0
 8005c42:	3568      	adds	r5, #104	; 0x68
 8005c44:	e7eb      	b.n	8005c1e <_fwalk_reent+0x1a>
	...

08005c48 <__libc_init_array>:
 8005c48:	b570      	push	{r4, r5, r6, lr}
 8005c4a:	2600      	movs	r6, #0
 8005c4c:	4d0c      	ldr	r5, [pc, #48]	; (8005c80 <__libc_init_array+0x38>)
 8005c4e:	4c0d      	ldr	r4, [pc, #52]	; (8005c84 <__libc_init_array+0x3c>)
 8005c50:	1b64      	subs	r4, r4, r5
 8005c52:	10a4      	asrs	r4, r4, #2
 8005c54:	42a6      	cmp	r6, r4
 8005c56:	d109      	bne.n	8005c6c <__libc_init_array+0x24>
 8005c58:	2600      	movs	r6, #0
 8005c5a:	f000 fe17 	bl	800688c <_init>
 8005c5e:	4d0a      	ldr	r5, [pc, #40]	; (8005c88 <__libc_init_array+0x40>)
 8005c60:	4c0a      	ldr	r4, [pc, #40]	; (8005c8c <__libc_init_array+0x44>)
 8005c62:	1b64      	subs	r4, r4, r5
 8005c64:	10a4      	asrs	r4, r4, #2
 8005c66:	42a6      	cmp	r6, r4
 8005c68:	d105      	bne.n	8005c76 <__libc_init_array+0x2e>
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}
 8005c6c:	00b3      	lsls	r3, r6, #2
 8005c6e:	58eb      	ldr	r3, [r5, r3]
 8005c70:	4798      	blx	r3
 8005c72:	3601      	adds	r6, #1
 8005c74:	e7ee      	b.n	8005c54 <__libc_init_array+0xc>
 8005c76:	00b3      	lsls	r3, r6, #2
 8005c78:	58eb      	ldr	r3, [r5, r3]
 8005c7a:	4798      	blx	r3
 8005c7c:	3601      	adds	r6, #1
 8005c7e:	e7f2      	b.n	8005c66 <__libc_init_array+0x1e>
 8005c80:	08006aec 	.word	0x08006aec
 8005c84:	08006aec 	.word	0x08006aec
 8005c88:	08006aec 	.word	0x08006aec
 8005c8c:	08006af0 	.word	0x08006af0

08005c90 <memset>:
 8005c90:	0003      	movs	r3, r0
 8005c92:	1812      	adds	r2, r2, r0
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d100      	bne.n	8005c9a <memset+0xa>
 8005c98:	4770      	bx	lr
 8005c9a:	7019      	strb	r1, [r3, #0]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	e7f9      	b.n	8005c94 <memset+0x4>

08005ca0 <_free_r>:
 8005ca0:	b570      	push	{r4, r5, r6, lr}
 8005ca2:	0005      	movs	r5, r0
 8005ca4:	2900      	cmp	r1, #0
 8005ca6:	d010      	beq.n	8005cca <_free_r+0x2a>
 8005ca8:	1f0c      	subs	r4, r1, #4
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	da00      	bge.n	8005cb2 <_free_r+0x12>
 8005cb0:	18e4      	adds	r4, r4, r3
 8005cb2:	0028      	movs	r0, r5
 8005cb4:	f000 faf0 	bl	8006298 <__malloc_lock>
 8005cb8:	4a1d      	ldr	r2, [pc, #116]	; (8005d30 <_free_r+0x90>)
 8005cba:	6813      	ldr	r3, [r2, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d105      	bne.n	8005ccc <_free_r+0x2c>
 8005cc0:	6063      	str	r3, [r4, #4]
 8005cc2:	6014      	str	r4, [r2, #0]
 8005cc4:	0028      	movs	r0, r5
 8005cc6:	f000 fae8 	bl	800629a <__malloc_unlock>
 8005cca:	bd70      	pop	{r4, r5, r6, pc}
 8005ccc:	42a3      	cmp	r3, r4
 8005cce:	d909      	bls.n	8005ce4 <_free_r+0x44>
 8005cd0:	6821      	ldr	r1, [r4, #0]
 8005cd2:	1860      	adds	r0, r4, r1
 8005cd4:	4283      	cmp	r3, r0
 8005cd6:	d1f3      	bne.n	8005cc0 <_free_r+0x20>
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	1841      	adds	r1, r0, r1
 8005cde:	6021      	str	r1, [r4, #0]
 8005ce0:	e7ee      	b.n	8005cc0 <_free_r+0x20>
 8005ce2:	0013      	movs	r3, r2
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	2a00      	cmp	r2, #0
 8005ce8:	d001      	beq.n	8005cee <_free_r+0x4e>
 8005cea:	42a2      	cmp	r2, r4
 8005cec:	d9f9      	bls.n	8005ce2 <_free_r+0x42>
 8005cee:	6819      	ldr	r1, [r3, #0]
 8005cf0:	1858      	adds	r0, r3, r1
 8005cf2:	42a0      	cmp	r0, r4
 8005cf4:	d10b      	bne.n	8005d0e <_free_r+0x6e>
 8005cf6:	6820      	ldr	r0, [r4, #0]
 8005cf8:	1809      	adds	r1, r1, r0
 8005cfa:	1858      	adds	r0, r3, r1
 8005cfc:	6019      	str	r1, [r3, #0]
 8005cfe:	4282      	cmp	r2, r0
 8005d00:	d1e0      	bne.n	8005cc4 <_free_r+0x24>
 8005d02:	6810      	ldr	r0, [r2, #0]
 8005d04:	6852      	ldr	r2, [r2, #4]
 8005d06:	1841      	adds	r1, r0, r1
 8005d08:	6019      	str	r1, [r3, #0]
 8005d0a:	605a      	str	r2, [r3, #4]
 8005d0c:	e7da      	b.n	8005cc4 <_free_r+0x24>
 8005d0e:	42a0      	cmp	r0, r4
 8005d10:	d902      	bls.n	8005d18 <_free_r+0x78>
 8005d12:	230c      	movs	r3, #12
 8005d14:	602b      	str	r3, [r5, #0]
 8005d16:	e7d5      	b.n	8005cc4 <_free_r+0x24>
 8005d18:	6821      	ldr	r1, [r4, #0]
 8005d1a:	1860      	adds	r0, r4, r1
 8005d1c:	4282      	cmp	r2, r0
 8005d1e:	d103      	bne.n	8005d28 <_free_r+0x88>
 8005d20:	6810      	ldr	r0, [r2, #0]
 8005d22:	6852      	ldr	r2, [r2, #4]
 8005d24:	1841      	adds	r1, r0, r1
 8005d26:	6021      	str	r1, [r4, #0]
 8005d28:	6062      	str	r2, [r4, #4]
 8005d2a:	605c      	str	r4, [r3, #4]
 8005d2c:	e7ca      	b.n	8005cc4 <_free_r+0x24>
 8005d2e:	46c0      	nop			; (mov r8, r8)
 8005d30:	200000b4 	.word	0x200000b4

08005d34 <_malloc_r>:
 8005d34:	2303      	movs	r3, #3
 8005d36:	b570      	push	{r4, r5, r6, lr}
 8005d38:	1ccd      	adds	r5, r1, #3
 8005d3a:	439d      	bics	r5, r3
 8005d3c:	3508      	adds	r5, #8
 8005d3e:	0006      	movs	r6, r0
 8005d40:	2d0c      	cmp	r5, #12
 8005d42:	d21e      	bcs.n	8005d82 <_malloc_r+0x4e>
 8005d44:	250c      	movs	r5, #12
 8005d46:	42a9      	cmp	r1, r5
 8005d48:	d81d      	bhi.n	8005d86 <_malloc_r+0x52>
 8005d4a:	0030      	movs	r0, r6
 8005d4c:	f000 faa4 	bl	8006298 <__malloc_lock>
 8005d50:	4a25      	ldr	r2, [pc, #148]	; (8005de8 <_malloc_r+0xb4>)
 8005d52:	6814      	ldr	r4, [r2, #0]
 8005d54:	0021      	movs	r1, r4
 8005d56:	2900      	cmp	r1, #0
 8005d58:	d119      	bne.n	8005d8e <_malloc_r+0x5a>
 8005d5a:	4c24      	ldr	r4, [pc, #144]	; (8005dec <_malloc_r+0xb8>)
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d103      	bne.n	8005d6a <_malloc_r+0x36>
 8005d62:	0030      	movs	r0, r6
 8005d64:	f000 f8c8 	bl	8005ef8 <_sbrk_r>
 8005d68:	6020      	str	r0, [r4, #0]
 8005d6a:	0029      	movs	r1, r5
 8005d6c:	0030      	movs	r0, r6
 8005d6e:	f000 f8c3 	bl	8005ef8 <_sbrk_r>
 8005d72:	1c43      	adds	r3, r0, #1
 8005d74:	d12b      	bne.n	8005dce <_malloc_r+0x9a>
 8005d76:	230c      	movs	r3, #12
 8005d78:	0030      	movs	r0, r6
 8005d7a:	6033      	str	r3, [r6, #0]
 8005d7c:	f000 fa8d 	bl	800629a <__malloc_unlock>
 8005d80:	e003      	b.n	8005d8a <_malloc_r+0x56>
 8005d82:	2d00      	cmp	r5, #0
 8005d84:	dadf      	bge.n	8005d46 <_malloc_r+0x12>
 8005d86:	230c      	movs	r3, #12
 8005d88:	6033      	str	r3, [r6, #0]
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	bd70      	pop	{r4, r5, r6, pc}
 8005d8e:	680b      	ldr	r3, [r1, #0]
 8005d90:	1b5b      	subs	r3, r3, r5
 8005d92:	d419      	bmi.n	8005dc8 <_malloc_r+0x94>
 8005d94:	2b0b      	cmp	r3, #11
 8005d96:	d903      	bls.n	8005da0 <_malloc_r+0x6c>
 8005d98:	600b      	str	r3, [r1, #0]
 8005d9a:	18cc      	adds	r4, r1, r3
 8005d9c:	6025      	str	r5, [r4, #0]
 8005d9e:	e003      	b.n	8005da8 <_malloc_r+0x74>
 8005da0:	684b      	ldr	r3, [r1, #4]
 8005da2:	428c      	cmp	r4, r1
 8005da4:	d10d      	bne.n	8005dc2 <_malloc_r+0x8e>
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	0030      	movs	r0, r6
 8005daa:	f000 fa76 	bl	800629a <__malloc_unlock>
 8005dae:	0020      	movs	r0, r4
 8005db0:	2207      	movs	r2, #7
 8005db2:	300b      	adds	r0, #11
 8005db4:	1d23      	adds	r3, r4, #4
 8005db6:	4390      	bics	r0, r2
 8005db8:	1ac3      	subs	r3, r0, r3
 8005dba:	d0e7      	beq.n	8005d8c <_malloc_r+0x58>
 8005dbc:	425a      	negs	r2, r3
 8005dbe:	50e2      	str	r2, [r4, r3]
 8005dc0:	e7e4      	b.n	8005d8c <_malloc_r+0x58>
 8005dc2:	6063      	str	r3, [r4, #4]
 8005dc4:	000c      	movs	r4, r1
 8005dc6:	e7ef      	b.n	8005da8 <_malloc_r+0x74>
 8005dc8:	000c      	movs	r4, r1
 8005dca:	6849      	ldr	r1, [r1, #4]
 8005dcc:	e7c3      	b.n	8005d56 <_malloc_r+0x22>
 8005dce:	2303      	movs	r3, #3
 8005dd0:	1cc4      	adds	r4, r0, #3
 8005dd2:	439c      	bics	r4, r3
 8005dd4:	42a0      	cmp	r0, r4
 8005dd6:	d0e1      	beq.n	8005d9c <_malloc_r+0x68>
 8005dd8:	1a21      	subs	r1, r4, r0
 8005dda:	0030      	movs	r0, r6
 8005ddc:	f000 f88c 	bl	8005ef8 <_sbrk_r>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d1db      	bne.n	8005d9c <_malloc_r+0x68>
 8005de4:	e7c7      	b.n	8005d76 <_malloc_r+0x42>
 8005de6:	46c0      	nop			; (mov r8, r8)
 8005de8:	200000b4 	.word	0x200000b4
 8005dec:	200000b8 	.word	0x200000b8

08005df0 <iprintf>:
 8005df0:	b40f      	push	{r0, r1, r2, r3}
 8005df2:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <iprintf+0x30>)
 8005df4:	b513      	push	{r0, r1, r4, lr}
 8005df6:	681c      	ldr	r4, [r3, #0]
 8005df8:	2c00      	cmp	r4, #0
 8005dfa:	d005      	beq.n	8005e08 <iprintf+0x18>
 8005dfc:	69a3      	ldr	r3, [r4, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d102      	bne.n	8005e08 <iprintf+0x18>
 8005e02:	0020      	movs	r0, r4
 8005e04:	f7ff fe8c 	bl	8005b20 <__sinit>
 8005e08:	ab05      	add	r3, sp, #20
 8005e0a:	9a04      	ldr	r2, [sp, #16]
 8005e0c:	68a1      	ldr	r1, [r4, #8]
 8005e0e:	0020      	movs	r0, r4
 8005e10:	9301      	str	r3, [sp, #4]
 8005e12:	f000 fa6b 	bl	80062ec <_vfiprintf_r>
 8005e16:	bc16      	pop	{r1, r2, r4}
 8005e18:	bc08      	pop	{r3}
 8005e1a:	b004      	add	sp, #16
 8005e1c:	4718      	bx	r3
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	20000004 	.word	0x20000004

08005e24 <_puts_r>:
 8005e24:	b570      	push	{r4, r5, r6, lr}
 8005e26:	0005      	movs	r5, r0
 8005e28:	000e      	movs	r6, r1
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	d004      	beq.n	8005e38 <_puts_r+0x14>
 8005e2e:	6983      	ldr	r3, [r0, #24]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <_puts_r+0x14>
 8005e34:	f7ff fe74 	bl	8005b20 <__sinit>
 8005e38:	69ab      	ldr	r3, [r5, #24]
 8005e3a:	68ac      	ldr	r4, [r5, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d102      	bne.n	8005e46 <_puts_r+0x22>
 8005e40:	0028      	movs	r0, r5
 8005e42:	f7ff fe6d 	bl	8005b20 <__sinit>
 8005e46:	4b24      	ldr	r3, [pc, #144]	; (8005ed8 <_puts_r+0xb4>)
 8005e48:	429c      	cmp	r4, r3
 8005e4a:	d10f      	bne.n	8005e6c <_puts_r+0x48>
 8005e4c:	686c      	ldr	r4, [r5, #4]
 8005e4e:	89a3      	ldrh	r3, [r4, #12]
 8005e50:	071b      	lsls	r3, r3, #28
 8005e52:	d502      	bpl.n	8005e5a <_puts_r+0x36>
 8005e54:	6923      	ldr	r3, [r4, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d11f      	bne.n	8005e9a <_puts_r+0x76>
 8005e5a:	0021      	movs	r1, r4
 8005e5c:	0028      	movs	r0, r5
 8005e5e:	f000 f913 	bl	8006088 <__swsetup_r>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d019      	beq.n	8005e9a <_puts_r+0x76>
 8005e66:	2001      	movs	r0, #1
 8005e68:	4240      	negs	r0, r0
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	4b1b      	ldr	r3, [pc, #108]	; (8005edc <_puts_r+0xb8>)
 8005e6e:	429c      	cmp	r4, r3
 8005e70:	d101      	bne.n	8005e76 <_puts_r+0x52>
 8005e72:	68ac      	ldr	r4, [r5, #8]
 8005e74:	e7eb      	b.n	8005e4e <_puts_r+0x2a>
 8005e76:	4b1a      	ldr	r3, [pc, #104]	; (8005ee0 <_puts_r+0xbc>)
 8005e78:	429c      	cmp	r4, r3
 8005e7a:	d1e8      	bne.n	8005e4e <_puts_r+0x2a>
 8005e7c:	68ec      	ldr	r4, [r5, #12]
 8005e7e:	e7e6      	b.n	8005e4e <_puts_r+0x2a>
 8005e80:	3601      	adds	r6, #1
 8005e82:	60a3      	str	r3, [r4, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	da04      	bge.n	8005e92 <_puts_r+0x6e>
 8005e88:	69a2      	ldr	r2, [r4, #24]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	dc16      	bgt.n	8005ebc <_puts_r+0x98>
 8005e8e:	290a      	cmp	r1, #10
 8005e90:	d014      	beq.n	8005ebc <_puts_r+0x98>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	6022      	str	r2, [r4, #0]
 8005e98:	7019      	strb	r1, [r3, #0]
 8005e9a:	68a3      	ldr	r3, [r4, #8]
 8005e9c:	7831      	ldrb	r1, [r6, #0]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	2900      	cmp	r1, #0
 8005ea2:	d1ed      	bne.n	8005e80 <_puts_r+0x5c>
 8005ea4:	60a3      	str	r3, [r4, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	da0f      	bge.n	8005eca <_puts_r+0xa6>
 8005eaa:	0022      	movs	r2, r4
 8005eac:	310a      	adds	r1, #10
 8005eae:	0028      	movs	r0, r5
 8005eb0:	f000 f880 	bl	8005fb4 <__swbuf_r>
 8005eb4:	1c43      	adds	r3, r0, #1
 8005eb6:	d0d6      	beq.n	8005e66 <_puts_r+0x42>
 8005eb8:	200a      	movs	r0, #10
 8005eba:	e7d6      	b.n	8005e6a <_puts_r+0x46>
 8005ebc:	0022      	movs	r2, r4
 8005ebe:	0028      	movs	r0, r5
 8005ec0:	f000 f878 	bl	8005fb4 <__swbuf_r>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	d1e8      	bne.n	8005e9a <_puts_r+0x76>
 8005ec8:	e7cd      	b.n	8005e66 <_puts_r+0x42>
 8005eca:	200a      	movs	r0, #10
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	6022      	str	r2, [r4, #0]
 8005ed2:	7018      	strb	r0, [r3, #0]
 8005ed4:	e7c9      	b.n	8005e6a <_puts_r+0x46>
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	08006a6c 	.word	0x08006a6c
 8005edc:	08006a8c 	.word	0x08006a8c
 8005ee0:	08006a4c 	.word	0x08006a4c

08005ee4 <puts>:
 8005ee4:	b510      	push	{r4, lr}
 8005ee6:	4b03      	ldr	r3, [pc, #12]	; (8005ef4 <puts+0x10>)
 8005ee8:	0001      	movs	r1, r0
 8005eea:	6818      	ldr	r0, [r3, #0]
 8005eec:	f7ff ff9a 	bl	8005e24 <_puts_r>
 8005ef0:	bd10      	pop	{r4, pc}
 8005ef2:	46c0      	nop			; (mov r8, r8)
 8005ef4:	20000004 	.word	0x20000004

08005ef8 <_sbrk_r>:
 8005ef8:	2300      	movs	r3, #0
 8005efa:	b570      	push	{r4, r5, r6, lr}
 8005efc:	4c06      	ldr	r4, [pc, #24]	; (8005f18 <_sbrk_r+0x20>)
 8005efe:	0005      	movs	r5, r0
 8005f00:	0008      	movs	r0, r1
 8005f02:	6023      	str	r3, [r4, #0]
 8005f04:	f7ff fc46 	bl	8005794 <_sbrk>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d103      	bne.n	8005f14 <_sbrk_r+0x1c>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d000      	beq.n	8005f14 <_sbrk_r+0x1c>
 8005f12:	602b      	str	r3, [r5, #0]
 8005f14:	bd70      	pop	{r4, r5, r6, pc}
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	20000328 	.word	0x20000328

08005f1c <__sread>:
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	000c      	movs	r4, r1
 8005f20:	250e      	movs	r5, #14
 8005f22:	5f49      	ldrsh	r1, [r1, r5]
 8005f24:	f000 fc6e 	bl	8006804 <_read_r>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	db03      	blt.n	8005f34 <__sread+0x18>
 8005f2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f2e:	181b      	adds	r3, r3, r0
 8005f30:	6563      	str	r3, [r4, #84]	; 0x54
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	4a02      	ldr	r2, [pc, #8]	; (8005f40 <__sread+0x24>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	81a3      	strh	r3, [r4, #12]
 8005f3c:	e7f9      	b.n	8005f32 <__sread+0x16>
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	ffffefff 	.word	0xffffefff

08005f44 <__swrite>:
 8005f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f46:	001f      	movs	r7, r3
 8005f48:	898b      	ldrh	r3, [r1, #12]
 8005f4a:	0005      	movs	r5, r0
 8005f4c:	000c      	movs	r4, r1
 8005f4e:	0016      	movs	r6, r2
 8005f50:	05db      	lsls	r3, r3, #23
 8005f52:	d505      	bpl.n	8005f60 <__swrite+0x1c>
 8005f54:	230e      	movs	r3, #14
 8005f56:	5ec9      	ldrsh	r1, [r1, r3]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	f000 f91c 	bl	8006198 <_lseek_r>
 8005f60:	89a3      	ldrh	r3, [r4, #12]
 8005f62:	4a05      	ldr	r2, [pc, #20]	; (8005f78 <__swrite+0x34>)
 8005f64:	0028      	movs	r0, r5
 8005f66:	4013      	ands	r3, r2
 8005f68:	81a3      	strh	r3, [r4, #12]
 8005f6a:	0032      	movs	r2, r6
 8005f6c:	230e      	movs	r3, #14
 8005f6e:	5ee1      	ldrsh	r1, [r4, r3]
 8005f70:	003b      	movs	r3, r7
 8005f72:	f000 f875 	bl	8006060 <_write_r>
 8005f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f78:	ffffefff 	.word	0xffffefff

08005f7c <__sseek>:
 8005f7c:	b570      	push	{r4, r5, r6, lr}
 8005f7e:	000c      	movs	r4, r1
 8005f80:	250e      	movs	r5, #14
 8005f82:	5f49      	ldrsh	r1, [r1, r5]
 8005f84:	f000 f908 	bl	8006198 <_lseek_r>
 8005f88:	89a3      	ldrh	r3, [r4, #12]
 8005f8a:	1c42      	adds	r2, r0, #1
 8005f8c:	d103      	bne.n	8005f96 <__sseek+0x1a>
 8005f8e:	4a05      	ldr	r2, [pc, #20]	; (8005fa4 <__sseek+0x28>)
 8005f90:	4013      	ands	r3, r2
 8005f92:	81a3      	strh	r3, [r4, #12]
 8005f94:	bd70      	pop	{r4, r5, r6, pc}
 8005f96:	2280      	movs	r2, #128	; 0x80
 8005f98:	0152      	lsls	r2, r2, #5
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	81a3      	strh	r3, [r4, #12]
 8005f9e:	6560      	str	r0, [r4, #84]	; 0x54
 8005fa0:	e7f8      	b.n	8005f94 <__sseek+0x18>
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	ffffefff 	.word	0xffffefff

08005fa8 <__sclose>:
 8005fa8:	b510      	push	{r4, lr}
 8005faa:	230e      	movs	r3, #14
 8005fac:	5ec9      	ldrsh	r1, [r1, r3]
 8005fae:	f000 f8e1 	bl	8006174 <_close_r>
 8005fb2:	bd10      	pop	{r4, pc}

08005fb4 <__swbuf_r>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	0005      	movs	r5, r0
 8005fb8:	000e      	movs	r6, r1
 8005fba:	0014      	movs	r4, r2
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d004      	beq.n	8005fca <__swbuf_r+0x16>
 8005fc0:	6983      	ldr	r3, [r0, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <__swbuf_r+0x16>
 8005fc6:	f7ff fdab 	bl	8005b20 <__sinit>
 8005fca:	4b22      	ldr	r3, [pc, #136]	; (8006054 <__swbuf_r+0xa0>)
 8005fcc:	429c      	cmp	r4, r3
 8005fce:	d12d      	bne.n	800602c <__swbuf_r+0x78>
 8005fd0:	686c      	ldr	r4, [r5, #4]
 8005fd2:	69a3      	ldr	r3, [r4, #24]
 8005fd4:	60a3      	str	r3, [r4, #8]
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	071b      	lsls	r3, r3, #28
 8005fda:	d531      	bpl.n	8006040 <__swbuf_r+0x8c>
 8005fdc:	6923      	ldr	r3, [r4, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d02e      	beq.n	8006040 <__swbuf_r+0x8c>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	6922      	ldr	r2, [r4, #16]
 8005fe6:	b2f7      	uxtb	r7, r6
 8005fe8:	1a98      	subs	r0, r3, r2
 8005fea:	6963      	ldr	r3, [r4, #20]
 8005fec:	b2f6      	uxtb	r6, r6
 8005fee:	4283      	cmp	r3, r0
 8005ff0:	dc05      	bgt.n	8005ffe <__swbuf_r+0x4a>
 8005ff2:	0021      	movs	r1, r4
 8005ff4:	0028      	movs	r0, r5
 8005ff6:	f7ff fd11 	bl	8005a1c <_fflush_r>
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	d126      	bne.n	800604c <__swbuf_r+0x98>
 8005ffe:	68a3      	ldr	r3, [r4, #8]
 8006000:	3001      	adds	r0, #1
 8006002:	3b01      	subs	r3, #1
 8006004:	60a3      	str	r3, [r4, #8]
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	6022      	str	r2, [r4, #0]
 800600c:	701f      	strb	r7, [r3, #0]
 800600e:	6963      	ldr	r3, [r4, #20]
 8006010:	4283      	cmp	r3, r0
 8006012:	d004      	beq.n	800601e <__swbuf_r+0x6a>
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	07db      	lsls	r3, r3, #31
 8006018:	d51a      	bpl.n	8006050 <__swbuf_r+0x9c>
 800601a:	2e0a      	cmp	r6, #10
 800601c:	d118      	bne.n	8006050 <__swbuf_r+0x9c>
 800601e:	0021      	movs	r1, r4
 8006020:	0028      	movs	r0, r5
 8006022:	f7ff fcfb 	bl	8005a1c <_fflush_r>
 8006026:	2800      	cmp	r0, #0
 8006028:	d012      	beq.n	8006050 <__swbuf_r+0x9c>
 800602a:	e00f      	b.n	800604c <__swbuf_r+0x98>
 800602c:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <__swbuf_r+0xa4>)
 800602e:	429c      	cmp	r4, r3
 8006030:	d101      	bne.n	8006036 <__swbuf_r+0x82>
 8006032:	68ac      	ldr	r4, [r5, #8]
 8006034:	e7cd      	b.n	8005fd2 <__swbuf_r+0x1e>
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <__swbuf_r+0xa8>)
 8006038:	429c      	cmp	r4, r3
 800603a:	d1ca      	bne.n	8005fd2 <__swbuf_r+0x1e>
 800603c:	68ec      	ldr	r4, [r5, #12]
 800603e:	e7c8      	b.n	8005fd2 <__swbuf_r+0x1e>
 8006040:	0021      	movs	r1, r4
 8006042:	0028      	movs	r0, r5
 8006044:	f000 f820 	bl	8006088 <__swsetup_r>
 8006048:	2800      	cmp	r0, #0
 800604a:	d0ca      	beq.n	8005fe2 <__swbuf_r+0x2e>
 800604c:	2601      	movs	r6, #1
 800604e:	4276      	negs	r6, r6
 8006050:	0030      	movs	r0, r6
 8006052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006054:	08006a6c 	.word	0x08006a6c
 8006058:	08006a8c 	.word	0x08006a8c
 800605c:	08006a4c 	.word	0x08006a4c

08006060 <_write_r>:
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	0005      	movs	r5, r0
 8006064:	0008      	movs	r0, r1
 8006066:	0011      	movs	r1, r2
 8006068:	2200      	movs	r2, #0
 800606a:	4c06      	ldr	r4, [pc, #24]	; (8006084 <_write_r+0x24>)
 800606c:	6022      	str	r2, [r4, #0]
 800606e:	001a      	movs	r2, r3
 8006070:	f7ff fb47 	bl	8005702 <_write>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d103      	bne.n	8006080 <_write_r+0x20>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d000      	beq.n	8006080 <_write_r+0x20>
 800607e:	602b      	str	r3, [r5, #0]
 8006080:	bd70      	pop	{r4, r5, r6, pc}
 8006082:	46c0      	nop			; (mov r8, r8)
 8006084:	20000328 	.word	0x20000328

08006088 <__swsetup_r>:
 8006088:	4b36      	ldr	r3, [pc, #216]	; (8006164 <__swsetup_r+0xdc>)
 800608a:	b570      	push	{r4, r5, r6, lr}
 800608c:	681d      	ldr	r5, [r3, #0]
 800608e:	0006      	movs	r6, r0
 8006090:	000c      	movs	r4, r1
 8006092:	2d00      	cmp	r5, #0
 8006094:	d005      	beq.n	80060a2 <__swsetup_r+0x1a>
 8006096:	69ab      	ldr	r3, [r5, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d102      	bne.n	80060a2 <__swsetup_r+0x1a>
 800609c:	0028      	movs	r0, r5
 800609e:	f7ff fd3f 	bl	8005b20 <__sinit>
 80060a2:	4b31      	ldr	r3, [pc, #196]	; (8006168 <__swsetup_r+0xe0>)
 80060a4:	429c      	cmp	r4, r3
 80060a6:	d10f      	bne.n	80060c8 <__swsetup_r+0x40>
 80060a8:	686c      	ldr	r4, [r5, #4]
 80060aa:	230c      	movs	r3, #12
 80060ac:	5ee2      	ldrsh	r2, [r4, r3]
 80060ae:	b293      	uxth	r3, r2
 80060b0:	0719      	lsls	r1, r3, #28
 80060b2:	d42d      	bmi.n	8006110 <__swsetup_r+0x88>
 80060b4:	06d9      	lsls	r1, r3, #27
 80060b6:	d411      	bmi.n	80060dc <__swsetup_r+0x54>
 80060b8:	2309      	movs	r3, #9
 80060ba:	2001      	movs	r0, #1
 80060bc:	6033      	str	r3, [r6, #0]
 80060be:	3337      	adds	r3, #55	; 0x37
 80060c0:	4313      	orrs	r3, r2
 80060c2:	81a3      	strh	r3, [r4, #12]
 80060c4:	4240      	negs	r0, r0
 80060c6:	bd70      	pop	{r4, r5, r6, pc}
 80060c8:	4b28      	ldr	r3, [pc, #160]	; (800616c <__swsetup_r+0xe4>)
 80060ca:	429c      	cmp	r4, r3
 80060cc:	d101      	bne.n	80060d2 <__swsetup_r+0x4a>
 80060ce:	68ac      	ldr	r4, [r5, #8]
 80060d0:	e7eb      	b.n	80060aa <__swsetup_r+0x22>
 80060d2:	4b27      	ldr	r3, [pc, #156]	; (8006170 <__swsetup_r+0xe8>)
 80060d4:	429c      	cmp	r4, r3
 80060d6:	d1e8      	bne.n	80060aa <__swsetup_r+0x22>
 80060d8:	68ec      	ldr	r4, [r5, #12]
 80060da:	e7e6      	b.n	80060aa <__swsetup_r+0x22>
 80060dc:	075b      	lsls	r3, r3, #29
 80060de:	d513      	bpl.n	8006108 <__swsetup_r+0x80>
 80060e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060e2:	2900      	cmp	r1, #0
 80060e4:	d008      	beq.n	80060f8 <__swsetup_r+0x70>
 80060e6:	0023      	movs	r3, r4
 80060e8:	3344      	adds	r3, #68	; 0x44
 80060ea:	4299      	cmp	r1, r3
 80060ec:	d002      	beq.n	80060f4 <__swsetup_r+0x6c>
 80060ee:	0030      	movs	r0, r6
 80060f0:	f7ff fdd6 	bl	8005ca0 <_free_r>
 80060f4:	2300      	movs	r3, #0
 80060f6:	6363      	str	r3, [r4, #52]	; 0x34
 80060f8:	2224      	movs	r2, #36	; 0x24
 80060fa:	89a3      	ldrh	r3, [r4, #12]
 80060fc:	4393      	bics	r3, r2
 80060fe:	81a3      	strh	r3, [r4, #12]
 8006100:	2300      	movs	r3, #0
 8006102:	6063      	str	r3, [r4, #4]
 8006104:	6923      	ldr	r3, [r4, #16]
 8006106:	6023      	str	r3, [r4, #0]
 8006108:	2308      	movs	r3, #8
 800610a:	89a2      	ldrh	r2, [r4, #12]
 800610c:	4313      	orrs	r3, r2
 800610e:	81a3      	strh	r3, [r4, #12]
 8006110:	6923      	ldr	r3, [r4, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10b      	bne.n	800612e <__swsetup_r+0xa6>
 8006116:	21a0      	movs	r1, #160	; 0xa0
 8006118:	2280      	movs	r2, #128	; 0x80
 800611a:	89a3      	ldrh	r3, [r4, #12]
 800611c:	0089      	lsls	r1, r1, #2
 800611e:	0092      	lsls	r2, r2, #2
 8006120:	400b      	ands	r3, r1
 8006122:	4293      	cmp	r3, r2
 8006124:	d003      	beq.n	800612e <__swsetup_r+0xa6>
 8006126:	0021      	movs	r1, r4
 8006128:	0030      	movs	r0, r6
 800612a:	f000 f871 	bl	8006210 <__smakebuf_r>
 800612e:	2301      	movs	r3, #1
 8006130:	89a2      	ldrh	r2, [r4, #12]
 8006132:	4013      	ands	r3, r2
 8006134:	d011      	beq.n	800615a <__swsetup_r+0xd2>
 8006136:	2300      	movs	r3, #0
 8006138:	60a3      	str	r3, [r4, #8]
 800613a:	6963      	ldr	r3, [r4, #20]
 800613c:	425b      	negs	r3, r3
 800613e:	61a3      	str	r3, [r4, #24]
 8006140:	2000      	movs	r0, #0
 8006142:	6923      	ldr	r3, [r4, #16]
 8006144:	4283      	cmp	r3, r0
 8006146:	d1be      	bne.n	80060c6 <__swsetup_r+0x3e>
 8006148:	230c      	movs	r3, #12
 800614a:	5ee2      	ldrsh	r2, [r4, r3]
 800614c:	0613      	lsls	r3, r2, #24
 800614e:	d5ba      	bpl.n	80060c6 <__swsetup_r+0x3e>
 8006150:	2340      	movs	r3, #64	; 0x40
 8006152:	4313      	orrs	r3, r2
 8006154:	81a3      	strh	r3, [r4, #12]
 8006156:	3801      	subs	r0, #1
 8006158:	e7b5      	b.n	80060c6 <__swsetup_r+0x3e>
 800615a:	0792      	lsls	r2, r2, #30
 800615c:	d400      	bmi.n	8006160 <__swsetup_r+0xd8>
 800615e:	6963      	ldr	r3, [r4, #20]
 8006160:	60a3      	str	r3, [r4, #8]
 8006162:	e7ed      	b.n	8006140 <__swsetup_r+0xb8>
 8006164:	20000004 	.word	0x20000004
 8006168:	08006a6c 	.word	0x08006a6c
 800616c:	08006a8c 	.word	0x08006a8c
 8006170:	08006a4c 	.word	0x08006a4c

08006174 <_close_r>:
 8006174:	2300      	movs	r3, #0
 8006176:	b570      	push	{r4, r5, r6, lr}
 8006178:	4c06      	ldr	r4, [pc, #24]	; (8006194 <_close_r+0x20>)
 800617a:	0005      	movs	r5, r0
 800617c:	0008      	movs	r0, r1
 800617e:	6023      	str	r3, [r4, #0]
 8006180:	f7ff fadb 	bl	800573a <_close>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	d103      	bne.n	8006190 <_close_r+0x1c>
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d000      	beq.n	8006190 <_close_r+0x1c>
 800618e:	602b      	str	r3, [r5, #0]
 8006190:	bd70      	pop	{r4, r5, r6, pc}
 8006192:	46c0      	nop			; (mov r8, r8)
 8006194:	20000328 	.word	0x20000328

08006198 <_lseek_r>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	0005      	movs	r5, r0
 800619c:	0008      	movs	r0, r1
 800619e:	0011      	movs	r1, r2
 80061a0:	2200      	movs	r2, #0
 80061a2:	4c06      	ldr	r4, [pc, #24]	; (80061bc <_lseek_r+0x24>)
 80061a4:	6022      	str	r2, [r4, #0]
 80061a6:	001a      	movs	r2, r3
 80061a8:	f7ff fae8 	bl	800577c <_lseek>
 80061ac:	1c43      	adds	r3, r0, #1
 80061ae:	d103      	bne.n	80061b8 <_lseek_r+0x20>
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d000      	beq.n	80061b8 <_lseek_r+0x20>
 80061b6:	602b      	str	r3, [r5, #0]
 80061b8:	bd70      	pop	{r4, r5, r6, pc}
 80061ba:	46c0      	nop			; (mov r8, r8)
 80061bc:	20000328 	.word	0x20000328

080061c0 <__swhatbuf_r>:
 80061c0:	b570      	push	{r4, r5, r6, lr}
 80061c2:	000e      	movs	r6, r1
 80061c4:	001d      	movs	r5, r3
 80061c6:	230e      	movs	r3, #14
 80061c8:	5ec9      	ldrsh	r1, [r1, r3]
 80061ca:	b096      	sub	sp, #88	; 0x58
 80061cc:	0014      	movs	r4, r2
 80061ce:	2900      	cmp	r1, #0
 80061d0:	da07      	bge.n	80061e2 <__swhatbuf_r+0x22>
 80061d2:	2300      	movs	r3, #0
 80061d4:	602b      	str	r3, [r5, #0]
 80061d6:	89b3      	ldrh	r3, [r6, #12]
 80061d8:	061b      	lsls	r3, r3, #24
 80061da:	d411      	bmi.n	8006200 <__swhatbuf_r+0x40>
 80061dc:	2380      	movs	r3, #128	; 0x80
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	e00f      	b.n	8006202 <__swhatbuf_r+0x42>
 80061e2:	466a      	mov	r2, sp
 80061e4:	f000 fb22 	bl	800682c <_fstat_r>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	dbf2      	blt.n	80061d2 <__swhatbuf_r+0x12>
 80061ec:	22f0      	movs	r2, #240	; 0xf0
 80061ee:	9b01      	ldr	r3, [sp, #4]
 80061f0:	0212      	lsls	r2, r2, #8
 80061f2:	4013      	ands	r3, r2
 80061f4:	4a05      	ldr	r2, [pc, #20]	; (800620c <__swhatbuf_r+0x4c>)
 80061f6:	189b      	adds	r3, r3, r2
 80061f8:	425a      	negs	r2, r3
 80061fa:	4153      	adcs	r3, r2
 80061fc:	602b      	str	r3, [r5, #0]
 80061fe:	e7ed      	b.n	80061dc <__swhatbuf_r+0x1c>
 8006200:	2340      	movs	r3, #64	; 0x40
 8006202:	2000      	movs	r0, #0
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	b016      	add	sp, #88	; 0x58
 8006208:	bd70      	pop	{r4, r5, r6, pc}
 800620a:	46c0      	nop			; (mov r8, r8)
 800620c:	ffffe000 	.word	0xffffe000

08006210 <__smakebuf_r>:
 8006210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006212:	2602      	movs	r6, #2
 8006214:	898b      	ldrh	r3, [r1, #12]
 8006216:	0005      	movs	r5, r0
 8006218:	000c      	movs	r4, r1
 800621a:	4233      	tst	r3, r6
 800621c:	d006      	beq.n	800622c <__smakebuf_r+0x1c>
 800621e:	0023      	movs	r3, r4
 8006220:	3347      	adds	r3, #71	; 0x47
 8006222:	6023      	str	r3, [r4, #0]
 8006224:	6123      	str	r3, [r4, #16]
 8006226:	2301      	movs	r3, #1
 8006228:	6163      	str	r3, [r4, #20]
 800622a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800622c:	ab01      	add	r3, sp, #4
 800622e:	466a      	mov	r2, sp
 8006230:	f7ff ffc6 	bl	80061c0 <__swhatbuf_r>
 8006234:	9900      	ldr	r1, [sp, #0]
 8006236:	0007      	movs	r7, r0
 8006238:	0028      	movs	r0, r5
 800623a:	f7ff fd7b 	bl	8005d34 <_malloc_r>
 800623e:	2800      	cmp	r0, #0
 8006240:	d108      	bne.n	8006254 <__smakebuf_r+0x44>
 8006242:	220c      	movs	r2, #12
 8006244:	5ea3      	ldrsh	r3, [r4, r2]
 8006246:	059a      	lsls	r2, r3, #22
 8006248:	d4ef      	bmi.n	800622a <__smakebuf_r+0x1a>
 800624a:	2203      	movs	r2, #3
 800624c:	4393      	bics	r3, r2
 800624e:	431e      	orrs	r6, r3
 8006250:	81a6      	strh	r6, [r4, #12]
 8006252:	e7e4      	b.n	800621e <__smakebuf_r+0xe>
 8006254:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <__smakebuf_r+0x84>)
 8006256:	62ab      	str	r3, [r5, #40]	; 0x28
 8006258:	2380      	movs	r3, #128	; 0x80
 800625a:	89a2      	ldrh	r2, [r4, #12]
 800625c:	6020      	str	r0, [r4, #0]
 800625e:	4313      	orrs	r3, r2
 8006260:	81a3      	strh	r3, [r4, #12]
 8006262:	9b00      	ldr	r3, [sp, #0]
 8006264:	6120      	str	r0, [r4, #16]
 8006266:	6163      	str	r3, [r4, #20]
 8006268:	9b01      	ldr	r3, [sp, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00d      	beq.n	800628a <__smakebuf_r+0x7a>
 800626e:	230e      	movs	r3, #14
 8006270:	5ee1      	ldrsh	r1, [r4, r3]
 8006272:	0028      	movs	r0, r5
 8006274:	f000 faec 	bl	8006850 <_isatty_r>
 8006278:	2800      	cmp	r0, #0
 800627a:	d006      	beq.n	800628a <__smakebuf_r+0x7a>
 800627c:	2203      	movs	r2, #3
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	4393      	bics	r3, r2
 8006282:	001a      	movs	r2, r3
 8006284:	2301      	movs	r3, #1
 8006286:	4313      	orrs	r3, r2
 8006288:	81a3      	strh	r3, [r4, #12]
 800628a:	89a0      	ldrh	r0, [r4, #12]
 800628c:	4338      	orrs	r0, r7
 800628e:	81a0      	strh	r0, [r4, #12]
 8006290:	e7cb      	b.n	800622a <__smakebuf_r+0x1a>
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	08005ae5 	.word	0x08005ae5

08006298 <__malloc_lock>:
 8006298:	4770      	bx	lr

0800629a <__malloc_unlock>:
 800629a:	4770      	bx	lr

0800629c <__sfputc_r>:
 800629c:	6893      	ldr	r3, [r2, #8]
 800629e:	b510      	push	{r4, lr}
 80062a0:	3b01      	subs	r3, #1
 80062a2:	6093      	str	r3, [r2, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	da04      	bge.n	80062b2 <__sfputc_r+0x16>
 80062a8:	6994      	ldr	r4, [r2, #24]
 80062aa:	42a3      	cmp	r3, r4
 80062ac:	db07      	blt.n	80062be <__sfputc_r+0x22>
 80062ae:	290a      	cmp	r1, #10
 80062b0:	d005      	beq.n	80062be <__sfputc_r+0x22>
 80062b2:	6813      	ldr	r3, [r2, #0]
 80062b4:	1c58      	adds	r0, r3, #1
 80062b6:	6010      	str	r0, [r2, #0]
 80062b8:	7019      	strb	r1, [r3, #0]
 80062ba:	0008      	movs	r0, r1
 80062bc:	bd10      	pop	{r4, pc}
 80062be:	f7ff fe79 	bl	8005fb4 <__swbuf_r>
 80062c2:	0001      	movs	r1, r0
 80062c4:	e7f9      	b.n	80062ba <__sfputc_r+0x1e>

080062c6 <__sfputs_r>:
 80062c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c8:	0006      	movs	r6, r0
 80062ca:	000f      	movs	r7, r1
 80062cc:	0014      	movs	r4, r2
 80062ce:	18d5      	adds	r5, r2, r3
 80062d0:	42ac      	cmp	r4, r5
 80062d2:	d101      	bne.n	80062d8 <__sfputs_r+0x12>
 80062d4:	2000      	movs	r0, #0
 80062d6:	e007      	b.n	80062e8 <__sfputs_r+0x22>
 80062d8:	7821      	ldrb	r1, [r4, #0]
 80062da:	003a      	movs	r2, r7
 80062dc:	0030      	movs	r0, r6
 80062de:	f7ff ffdd 	bl	800629c <__sfputc_r>
 80062e2:	3401      	adds	r4, #1
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	d1f3      	bne.n	80062d0 <__sfputs_r+0xa>
 80062e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062ec <_vfiprintf_r>:
 80062ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ee:	b0a1      	sub	sp, #132	; 0x84
 80062f0:	9003      	str	r0, [sp, #12]
 80062f2:	000f      	movs	r7, r1
 80062f4:	0016      	movs	r6, r2
 80062f6:	001d      	movs	r5, r3
 80062f8:	2800      	cmp	r0, #0
 80062fa:	d005      	beq.n	8006308 <_vfiprintf_r+0x1c>
 80062fc:	6983      	ldr	r3, [r0, #24]
 80062fe:	9305      	str	r3, [sp, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <_vfiprintf_r+0x1c>
 8006304:	f7ff fc0c 	bl	8005b20 <__sinit>
 8006308:	4b7b      	ldr	r3, [pc, #492]	; (80064f8 <_vfiprintf_r+0x20c>)
 800630a:	429f      	cmp	r7, r3
 800630c:	d15c      	bne.n	80063c8 <_vfiprintf_r+0xdc>
 800630e:	9b03      	ldr	r3, [sp, #12]
 8006310:	685f      	ldr	r7, [r3, #4]
 8006312:	89bb      	ldrh	r3, [r7, #12]
 8006314:	071b      	lsls	r3, r3, #28
 8006316:	d563      	bpl.n	80063e0 <_vfiprintf_r+0xf4>
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d060      	beq.n	80063e0 <_vfiprintf_r+0xf4>
 800631e:	2300      	movs	r3, #0
 8006320:	ac08      	add	r4, sp, #32
 8006322:	6163      	str	r3, [r4, #20]
 8006324:	3320      	adds	r3, #32
 8006326:	7663      	strb	r3, [r4, #25]
 8006328:	3310      	adds	r3, #16
 800632a:	76a3      	strb	r3, [r4, #26]
 800632c:	9507      	str	r5, [sp, #28]
 800632e:	0035      	movs	r5, r6
 8006330:	782b      	ldrb	r3, [r5, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <_vfiprintf_r+0x4e>
 8006336:	2b25      	cmp	r3, #37	; 0x25
 8006338:	d15c      	bne.n	80063f4 <_vfiprintf_r+0x108>
 800633a:	1bab      	subs	r3, r5, r6
 800633c:	9305      	str	r3, [sp, #20]
 800633e:	d00c      	beq.n	800635a <_vfiprintf_r+0x6e>
 8006340:	0032      	movs	r2, r6
 8006342:	0039      	movs	r1, r7
 8006344:	9803      	ldr	r0, [sp, #12]
 8006346:	f7ff ffbe 	bl	80062c6 <__sfputs_r>
 800634a:	1c43      	adds	r3, r0, #1
 800634c:	d100      	bne.n	8006350 <_vfiprintf_r+0x64>
 800634e:	e0c4      	b.n	80064da <_vfiprintf_r+0x1ee>
 8006350:	6962      	ldr	r2, [r4, #20]
 8006352:	9b05      	ldr	r3, [sp, #20]
 8006354:	4694      	mov	ip, r2
 8006356:	4463      	add	r3, ip
 8006358:	6163      	str	r3, [r4, #20]
 800635a:	782b      	ldrb	r3, [r5, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d100      	bne.n	8006362 <_vfiprintf_r+0x76>
 8006360:	e0bb      	b.n	80064da <_vfiprintf_r+0x1ee>
 8006362:	2201      	movs	r2, #1
 8006364:	2300      	movs	r3, #0
 8006366:	4252      	negs	r2, r2
 8006368:	6062      	str	r2, [r4, #4]
 800636a:	a904      	add	r1, sp, #16
 800636c:	3254      	adds	r2, #84	; 0x54
 800636e:	1852      	adds	r2, r2, r1
 8006370:	1c6e      	adds	r6, r5, #1
 8006372:	6023      	str	r3, [r4, #0]
 8006374:	60e3      	str	r3, [r4, #12]
 8006376:	60a3      	str	r3, [r4, #8]
 8006378:	7013      	strb	r3, [r2, #0]
 800637a:	65a3      	str	r3, [r4, #88]	; 0x58
 800637c:	7831      	ldrb	r1, [r6, #0]
 800637e:	2205      	movs	r2, #5
 8006380:	485e      	ldr	r0, [pc, #376]	; (80064fc <_vfiprintf_r+0x210>)
 8006382:	f000 fa77 	bl	8006874 <memchr>
 8006386:	1c75      	adds	r5, r6, #1
 8006388:	2800      	cmp	r0, #0
 800638a:	d135      	bne.n	80063f8 <_vfiprintf_r+0x10c>
 800638c:	6822      	ldr	r2, [r4, #0]
 800638e:	06d3      	lsls	r3, r2, #27
 8006390:	d504      	bpl.n	800639c <_vfiprintf_r+0xb0>
 8006392:	2353      	movs	r3, #83	; 0x53
 8006394:	a904      	add	r1, sp, #16
 8006396:	185b      	adds	r3, r3, r1
 8006398:	2120      	movs	r1, #32
 800639a:	7019      	strb	r1, [r3, #0]
 800639c:	0713      	lsls	r3, r2, #28
 800639e:	d504      	bpl.n	80063aa <_vfiprintf_r+0xbe>
 80063a0:	2353      	movs	r3, #83	; 0x53
 80063a2:	a904      	add	r1, sp, #16
 80063a4:	185b      	adds	r3, r3, r1
 80063a6:	212b      	movs	r1, #43	; 0x2b
 80063a8:	7019      	strb	r1, [r3, #0]
 80063aa:	7833      	ldrb	r3, [r6, #0]
 80063ac:	2b2a      	cmp	r3, #42	; 0x2a
 80063ae:	d02c      	beq.n	800640a <_vfiprintf_r+0x11e>
 80063b0:	0035      	movs	r5, r6
 80063b2:	2100      	movs	r1, #0
 80063b4:	200a      	movs	r0, #10
 80063b6:	68e3      	ldr	r3, [r4, #12]
 80063b8:	782a      	ldrb	r2, [r5, #0]
 80063ba:	1c6e      	adds	r6, r5, #1
 80063bc:	3a30      	subs	r2, #48	; 0x30
 80063be:	2a09      	cmp	r2, #9
 80063c0:	d964      	bls.n	800648c <_vfiprintf_r+0x1a0>
 80063c2:	2900      	cmp	r1, #0
 80063c4:	d02e      	beq.n	8006424 <_vfiprintf_r+0x138>
 80063c6:	e026      	b.n	8006416 <_vfiprintf_r+0x12a>
 80063c8:	4b4d      	ldr	r3, [pc, #308]	; (8006500 <_vfiprintf_r+0x214>)
 80063ca:	429f      	cmp	r7, r3
 80063cc:	d102      	bne.n	80063d4 <_vfiprintf_r+0xe8>
 80063ce:	9b03      	ldr	r3, [sp, #12]
 80063d0:	689f      	ldr	r7, [r3, #8]
 80063d2:	e79e      	b.n	8006312 <_vfiprintf_r+0x26>
 80063d4:	4b4b      	ldr	r3, [pc, #300]	; (8006504 <_vfiprintf_r+0x218>)
 80063d6:	429f      	cmp	r7, r3
 80063d8:	d19b      	bne.n	8006312 <_vfiprintf_r+0x26>
 80063da:	9b03      	ldr	r3, [sp, #12]
 80063dc:	68df      	ldr	r7, [r3, #12]
 80063de:	e798      	b.n	8006312 <_vfiprintf_r+0x26>
 80063e0:	0039      	movs	r1, r7
 80063e2:	9803      	ldr	r0, [sp, #12]
 80063e4:	f7ff fe50 	bl	8006088 <__swsetup_r>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d098      	beq.n	800631e <_vfiprintf_r+0x32>
 80063ec:	2001      	movs	r0, #1
 80063ee:	4240      	negs	r0, r0
 80063f0:	b021      	add	sp, #132	; 0x84
 80063f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f4:	3501      	adds	r5, #1
 80063f6:	e79b      	b.n	8006330 <_vfiprintf_r+0x44>
 80063f8:	4b40      	ldr	r3, [pc, #256]	; (80064fc <_vfiprintf_r+0x210>)
 80063fa:	6822      	ldr	r2, [r4, #0]
 80063fc:	1ac0      	subs	r0, r0, r3
 80063fe:	2301      	movs	r3, #1
 8006400:	4083      	lsls	r3, r0
 8006402:	4313      	orrs	r3, r2
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	002e      	movs	r6, r5
 8006408:	e7b8      	b.n	800637c <_vfiprintf_r+0x90>
 800640a:	9b07      	ldr	r3, [sp, #28]
 800640c:	1d19      	adds	r1, r3, #4
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	9107      	str	r1, [sp, #28]
 8006412:	2b00      	cmp	r3, #0
 8006414:	db01      	blt.n	800641a <_vfiprintf_r+0x12e>
 8006416:	930b      	str	r3, [sp, #44]	; 0x2c
 8006418:	e004      	b.n	8006424 <_vfiprintf_r+0x138>
 800641a:	425b      	negs	r3, r3
 800641c:	60e3      	str	r3, [r4, #12]
 800641e:	2302      	movs	r3, #2
 8006420:	4313      	orrs	r3, r2
 8006422:	6023      	str	r3, [r4, #0]
 8006424:	782b      	ldrb	r3, [r5, #0]
 8006426:	2b2e      	cmp	r3, #46	; 0x2e
 8006428:	d10a      	bne.n	8006440 <_vfiprintf_r+0x154>
 800642a:	786b      	ldrb	r3, [r5, #1]
 800642c:	2b2a      	cmp	r3, #42	; 0x2a
 800642e:	d135      	bne.n	800649c <_vfiprintf_r+0x1b0>
 8006430:	9b07      	ldr	r3, [sp, #28]
 8006432:	3502      	adds	r5, #2
 8006434:	1d1a      	adds	r2, r3, #4
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	9207      	str	r2, [sp, #28]
 800643a:	2b00      	cmp	r3, #0
 800643c:	db2b      	blt.n	8006496 <_vfiprintf_r+0x1aa>
 800643e:	9309      	str	r3, [sp, #36]	; 0x24
 8006440:	4e31      	ldr	r6, [pc, #196]	; (8006508 <_vfiprintf_r+0x21c>)
 8006442:	7829      	ldrb	r1, [r5, #0]
 8006444:	2203      	movs	r2, #3
 8006446:	0030      	movs	r0, r6
 8006448:	f000 fa14 	bl	8006874 <memchr>
 800644c:	2800      	cmp	r0, #0
 800644e:	d006      	beq.n	800645e <_vfiprintf_r+0x172>
 8006450:	2340      	movs	r3, #64	; 0x40
 8006452:	1b80      	subs	r0, r0, r6
 8006454:	4083      	lsls	r3, r0
 8006456:	6822      	ldr	r2, [r4, #0]
 8006458:	3501      	adds	r5, #1
 800645a:	4313      	orrs	r3, r2
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	7829      	ldrb	r1, [r5, #0]
 8006460:	2206      	movs	r2, #6
 8006462:	482a      	ldr	r0, [pc, #168]	; (800650c <_vfiprintf_r+0x220>)
 8006464:	1c6e      	adds	r6, r5, #1
 8006466:	7621      	strb	r1, [r4, #24]
 8006468:	f000 fa04 	bl	8006874 <memchr>
 800646c:	2800      	cmp	r0, #0
 800646e:	d03a      	beq.n	80064e6 <_vfiprintf_r+0x1fa>
 8006470:	4b27      	ldr	r3, [pc, #156]	; (8006510 <_vfiprintf_r+0x224>)
 8006472:	2b00      	cmp	r3, #0
 8006474:	d125      	bne.n	80064c2 <_vfiprintf_r+0x1d6>
 8006476:	2207      	movs	r2, #7
 8006478:	9b07      	ldr	r3, [sp, #28]
 800647a:	3307      	adds	r3, #7
 800647c:	4393      	bics	r3, r2
 800647e:	3308      	adds	r3, #8
 8006480:	9307      	str	r3, [sp, #28]
 8006482:	6963      	ldr	r3, [r4, #20]
 8006484:	9a04      	ldr	r2, [sp, #16]
 8006486:	189b      	adds	r3, r3, r2
 8006488:	6163      	str	r3, [r4, #20]
 800648a:	e750      	b.n	800632e <_vfiprintf_r+0x42>
 800648c:	4343      	muls	r3, r0
 800648e:	2101      	movs	r1, #1
 8006490:	189b      	adds	r3, r3, r2
 8006492:	0035      	movs	r5, r6
 8006494:	e790      	b.n	80063b8 <_vfiprintf_r+0xcc>
 8006496:	2301      	movs	r3, #1
 8006498:	425b      	negs	r3, r3
 800649a:	e7d0      	b.n	800643e <_vfiprintf_r+0x152>
 800649c:	2300      	movs	r3, #0
 800649e:	200a      	movs	r0, #10
 80064a0:	001a      	movs	r2, r3
 80064a2:	3501      	adds	r5, #1
 80064a4:	6063      	str	r3, [r4, #4]
 80064a6:	7829      	ldrb	r1, [r5, #0]
 80064a8:	1c6e      	adds	r6, r5, #1
 80064aa:	3930      	subs	r1, #48	; 0x30
 80064ac:	2909      	cmp	r1, #9
 80064ae:	d903      	bls.n	80064b8 <_vfiprintf_r+0x1cc>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0c5      	beq.n	8006440 <_vfiprintf_r+0x154>
 80064b4:	9209      	str	r2, [sp, #36]	; 0x24
 80064b6:	e7c3      	b.n	8006440 <_vfiprintf_r+0x154>
 80064b8:	4342      	muls	r2, r0
 80064ba:	2301      	movs	r3, #1
 80064bc:	1852      	adds	r2, r2, r1
 80064be:	0035      	movs	r5, r6
 80064c0:	e7f1      	b.n	80064a6 <_vfiprintf_r+0x1ba>
 80064c2:	ab07      	add	r3, sp, #28
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	003a      	movs	r2, r7
 80064c8:	4b12      	ldr	r3, [pc, #72]	; (8006514 <_vfiprintf_r+0x228>)
 80064ca:	0021      	movs	r1, r4
 80064cc:	9803      	ldr	r0, [sp, #12]
 80064ce:	e000      	b.n	80064d2 <_vfiprintf_r+0x1e6>
 80064d0:	bf00      	nop
 80064d2:	9004      	str	r0, [sp, #16]
 80064d4:	9b04      	ldr	r3, [sp, #16]
 80064d6:	3301      	adds	r3, #1
 80064d8:	d1d3      	bne.n	8006482 <_vfiprintf_r+0x196>
 80064da:	89bb      	ldrh	r3, [r7, #12]
 80064dc:	065b      	lsls	r3, r3, #25
 80064de:	d500      	bpl.n	80064e2 <_vfiprintf_r+0x1f6>
 80064e0:	e784      	b.n	80063ec <_vfiprintf_r+0x100>
 80064e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80064e4:	e784      	b.n	80063f0 <_vfiprintf_r+0x104>
 80064e6:	ab07      	add	r3, sp, #28
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	003a      	movs	r2, r7
 80064ec:	4b09      	ldr	r3, [pc, #36]	; (8006514 <_vfiprintf_r+0x228>)
 80064ee:	0021      	movs	r1, r4
 80064f0:	9803      	ldr	r0, [sp, #12]
 80064f2:	f000 f87f 	bl	80065f4 <_printf_i>
 80064f6:	e7ec      	b.n	80064d2 <_vfiprintf_r+0x1e6>
 80064f8:	08006a6c 	.word	0x08006a6c
 80064fc:	08006ab0 	.word	0x08006ab0
 8006500:	08006a8c 	.word	0x08006a8c
 8006504:	08006a4c 	.word	0x08006a4c
 8006508:	08006ab6 	.word	0x08006ab6
 800650c:	08006aba 	.word	0x08006aba
 8006510:	00000000 	.word	0x00000000
 8006514:	080062c7 	.word	0x080062c7

08006518 <_printf_common>:
 8006518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800651a:	0015      	movs	r5, r2
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	688a      	ldr	r2, [r1, #8]
 8006520:	690b      	ldr	r3, [r1, #16]
 8006522:	9000      	str	r0, [sp, #0]
 8006524:	000c      	movs	r4, r1
 8006526:	4293      	cmp	r3, r2
 8006528:	da00      	bge.n	800652c <_printf_common+0x14>
 800652a:	0013      	movs	r3, r2
 800652c:	0022      	movs	r2, r4
 800652e:	602b      	str	r3, [r5, #0]
 8006530:	3243      	adds	r2, #67	; 0x43
 8006532:	7812      	ldrb	r2, [r2, #0]
 8006534:	2a00      	cmp	r2, #0
 8006536:	d001      	beq.n	800653c <_printf_common+0x24>
 8006538:	3301      	adds	r3, #1
 800653a:	602b      	str	r3, [r5, #0]
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	069b      	lsls	r3, r3, #26
 8006540:	d502      	bpl.n	8006548 <_printf_common+0x30>
 8006542:	682b      	ldr	r3, [r5, #0]
 8006544:	3302      	adds	r3, #2
 8006546:	602b      	str	r3, [r5, #0]
 8006548:	2706      	movs	r7, #6
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	401f      	ands	r7, r3
 800654e:	d027      	beq.n	80065a0 <_printf_common+0x88>
 8006550:	0023      	movs	r3, r4
 8006552:	3343      	adds	r3, #67	; 0x43
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	1e5a      	subs	r2, r3, #1
 8006558:	4193      	sbcs	r3, r2
 800655a:	6822      	ldr	r2, [r4, #0]
 800655c:	0692      	lsls	r2, r2, #26
 800655e:	d430      	bmi.n	80065c2 <_printf_common+0xaa>
 8006560:	0022      	movs	r2, r4
 8006562:	9901      	ldr	r1, [sp, #4]
 8006564:	3243      	adds	r2, #67	; 0x43
 8006566:	9800      	ldr	r0, [sp, #0]
 8006568:	9e08      	ldr	r6, [sp, #32]
 800656a:	47b0      	blx	r6
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d025      	beq.n	80065bc <_printf_common+0xa4>
 8006570:	2306      	movs	r3, #6
 8006572:	6820      	ldr	r0, [r4, #0]
 8006574:	682a      	ldr	r2, [r5, #0]
 8006576:	68e1      	ldr	r1, [r4, #12]
 8006578:	4003      	ands	r3, r0
 800657a:	2500      	movs	r5, #0
 800657c:	2b04      	cmp	r3, #4
 800657e:	d103      	bne.n	8006588 <_printf_common+0x70>
 8006580:	1a8d      	subs	r5, r1, r2
 8006582:	43eb      	mvns	r3, r5
 8006584:	17db      	asrs	r3, r3, #31
 8006586:	401d      	ands	r5, r3
 8006588:	68a3      	ldr	r3, [r4, #8]
 800658a:	6922      	ldr	r2, [r4, #16]
 800658c:	4293      	cmp	r3, r2
 800658e:	dd01      	ble.n	8006594 <_printf_common+0x7c>
 8006590:	1a9b      	subs	r3, r3, r2
 8006592:	18ed      	adds	r5, r5, r3
 8006594:	2700      	movs	r7, #0
 8006596:	42bd      	cmp	r5, r7
 8006598:	d120      	bne.n	80065dc <_printf_common+0xc4>
 800659a:	2000      	movs	r0, #0
 800659c:	e010      	b.n	80065c0 <_printf_common+0xa8>
 800659e:	3701      	adds	r7, #1
 80065a0:	68e3      	ldr	r3, [r4, #12]
 80065a2:	682a      	ldr	r2, [r5, #0]
 80065a4:	1a9b      	subs	r3, r3, r2
 80065a6:	42bb      	cmp	r3, r7
 80065a8:	ddd2      	ble.n	8006550 <_printf_common+0x38>
 80065aa:	0022      	movs	r2, r4
 80065ac:	2301      	movs	r3, #1
 80065ae:	3219      	adds	r2, #25
 80065b0:	9901      	ldr	r1, [sp, #4]
 80065b2:	9800      	ldr	r0, [sp, #0]
 80065b4:	9e08      	ldr	r6, [sp, #32]
 80065b6:	47b0      	blx	r6
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d1f0      	bne.n	800659e <_printf_common+0x86>
 80065bc:	2001      	movs	r0, #1
 80065be:	4240      	negs	r0, r0
 80065c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065c2:	2030      	movs	r0, #48	; 0x30
 80065c4:	18e1      	adds	r1, r4, r3
 80065c6:	3143      	adds	r1, #67	; 0x43
 80065c8:	7008      	strb	r0, [r1, #0]
 80065ca:	0021      	movs	r1, r4
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	3145      	adds	r1, #69	; 0x45
 80065d0:	7809      	ldrb	r1, [r1, #0]
 80065d2:	18a2      	adds	r2, r4, r2
 80065d4:	3243      	adds	r2, #67	; 0x43
 80065d6:	3302      	adds	r3, #2
 80065d8:	7011      	strb	r1, [r2, #0]
 80065da:	e7c1      	b.n	8006560 <_printf_common+0x48>
 80065dc:	0022      	movs	r2, r4
 80065de:	2301      	movs	r3, #1
 80065e0:	321a      	adds	r2, #26
 80065e2:	9901      	ldr	r1, [sp, #4]
 80065e4:	9800      	ldr	r0, [sp, #0]
 80065e6:	9e08      	ldr	r6, [sp, #32]
 80065e8:	47b0      	blx	r6
 80065ea:	1c43      	adds	r3, r0, #1
 80065ec:	d0e6      	beq.n	80065bc <_printf_common+0xa4>
 80065ee:	3701      	adds	r7, #1
 80065f0:	e7d1      	b.n	8006596 <_printf_common+0x7e>
	...

080065f4 <_printf_i>:
 80065f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065f6:	b089      	sub	sp, #36	; 0x24
 80065f8:	9204      	str	r2, [sp, #16]
 80065fa:	000a      	movs	r2, r1
 80065fc:	3243      	adds	r2, #67	; 0x43
 80065fe:	9305      	str	r3, [sp, #20]
 8006600:	9003      	str	r0, [sp, #12]
 8006602:	9202      	str	r2, [sp, #8]
 8006604:	7e0a      	ldrb	r2, [r1, #24]
 8006606:	000c      	movs	r4, r1
 8006608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800660a:	2a6e      	cmp	r2, #110	; 0x6e
 800660c:	d100      	bne.n	8006610 <_printf_i+0x1c>
 800660e:	e086      	b.n	800671e <_printf_i+0x12a>
 8006610:	d81f      	bhi.n	8006652 <_printf_i+0x5e>
 8006612:	2a63      	cmp	r2, #99	; 0x63
 8006614:	d033      	beq.n	800667e <_printf_i+0x8a>
 8006616:	d808      	bhi.n	800662a <_printf_i+0x36>
 8006618:	2a00      	cmp	r2, #0
 800661a:	d100      	bne.n	800661e <_printf_i+0x2a>
 800661c:	e08c      	b.n	8006738 <_printf_i+0x144>
 800661e:	2a58      	cmp	r2, #88	; 0x58
 8006620:	d04d      	beq.n	80066be <_printf_i+0xca>
 8006622:	0025      	movs	r5, r4
 8006624:	3542      	adds	r5, #66	; 0x42
 8006626:	702a      	strb	r2, [r5, #0]
 8006628:	e030      	b.n	800668c <_printf_i+0x98>
 800662a:	2a64      	cmp	r2, #100	; 0x64
 800662c:	d001      	beq.n	8006632 <_printf_i+0x3e>
 800662e:	2a69      	cmp	r2, #105	; 0x69
 8006630:	d1f7      	bne.n	8006622 <_printf_i+0x2e>
 8006632:	6819      	ldr	r1, [r3, #0]
 8006634:	6825      	ldr	r5, [r4, #0]
 8006636:	1d0a      	adds	r2, r1, #4
 8006638:	0628      	lsls	r0, r5, #24
 800663a:	d529      	bpl.n	8006690 <_printf_i+0x9c>
 800663c:	6808      	ldr	r0, [r1, #0]
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	2800      	cmp	r0, #0
 8006642:	da03      	bge.n	800664c <_printf_i+0x58>
 8006644:	232d      	movs	r3, #45	; 0x2d
 8006646:	9a02      	ldr	r2, [sp, #8]
 8006648:	4240      	negs	r0, r0
 800664a:	7013      	strb	r3, [r2, #0]
 800664c:	4e6b      	ldr	r6, [pc, #428]	; (80067fc <_printf_i+0x208>)
 800664e:	270a      	movs	r7, #10
 8006650:	e04f      	b.n	80066f2 <_printf_i+0xfe>
 8006652:	2a73      	cmp	r2, #115	; 0x73
 8006654:	d074      	beq.n	8006740 <_printf_i+0x14c>
 8006656:	d808      	bhi.n	800666a <_printf_i+0x76>
 8006658:	2a6f      	cmp	r2, #111	; 0x6f
 800665a:	d01f      	beq.n	800669c <_printf_i+0xa8>
 800665c:	2a70      	cmp	r2, #112	; 0x70
 800665e:	d1e0      	bne.n	8006622 <_printf_i+0x2e>
 8006660:	2220      	movs	r2, #32
 8006662:	6809      	ldr	r1, [r1, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	6022      	str	r2, [r4, #0]
 8006668:	e003      	b.n	8006672 <_printf_i+0x7e>
 800666a:	2a75      	cmp	r2, #117	; 0x75
 800666c:	d016      	beq.n	800669c <_printf_i+0xa8>
 800666e:	2a78      	cmp	r2, #120	; 0x78
 8006670:	d1d7      	bne.n	8006622 <_printf_i+0x2e>
 8006672:	0022      	movs	r2, r4
 8006674:	2178      	movs	r1, #120	; 0x78
 8006676:	3245      	adds	r2, #69	; 0x45
 8006678:	7011      	strb	r1, [r2, #0]
 800667a:	4e61      	ldr	r6, [pc, #388]	; (8006800 <_printf_i+0x20c>)
 800667c:	e022      	b.n	80066c4 <_printf_i+0xd0>
 800667e:	0025      	movs	r5, r4
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	3542      	adds	r5, #66	; 0x42
 8006684:	1d11      	adds	r1, r2, #4
 8006686:	6019      	str	r1, [r3, #0]
 8006688:	6813      	ldr	r3, [r2, #0]
 800668a:	702b      	strb	r3, [r5, #0]
 800668c:	2301      	movs	r3, #1
 800668e:	e065      	b.n	800675c <_printf_i+0x168>
 8006690:	6808      	ldr	r0, [r1, #0]
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	0669      	lsls	r1, r5, #25
 8006696:	d5d3      	bpl.n	8006640 <_printf_i+0x4c>
 8006698:	b200      	sxth	r0, r0
 800669a:	e7d1      	b.n	8006640 <_printf_i+0x4c>
 800669c:	6819      	ldr	r1, [r3, #0]
 800669e:	6825      	ldr	r5, [r4, #0]
 80066a0:	1d08      	adds	r0, r1, #4
 80066a2:	6018      	str	r0, [r3, #0]
 80066a4:	6808      	ldr	r0, [r1, #0]
 80066a6:	062e      	lsls	r6, r5, #24
 80066a8:	d505      	bpl.n	80066b6 <_printf_i+0xc2>
 80066aa:	4e54      	ldr	r6, [pc, #336]	; (80067fc <_printf_i+0x208>)
 80066ac:	2708      	movs	r7, #8
 80066ae:	2a6f      	cmp	r2, #111	; 0x6f
 80066b0:	d01b      	beq.n	80066ea <_printf_i+0xf6>
 80066b2:	270a      	movs	r7, #10
 80066b4:	e019      	b.n	80066ea <_printf_i+0xf6>
 80066b6:	066d      	lsls	r5, r5, #25
 80066b8:	d5f7      	bpl.n	80066aa <_printf_i+0xb6>
 80066ba:	b280      	uxth	r0, r0
 80066bc:	e7f5      	b.n	80066aa <_printf_i+0xb6>
 80066be:	3145      	adds	r1, #69	; 0x45
 80066c0:	4e4e      	ldr	r6, [pc, #312]	; (80067fc <_printf_i+0x208>)
 80066c2:	700a      	strb	r2, [r1, #0]
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	6822      	ldr	r2, [r4, #0]
 80066c8:	1d01      	adds	r1, r0, #4
 80066ca:	6800      	ldr	r0, [r0, #0]
 80066cc:	6019      	str	r1, [r3, #0]
 80066ce:	0615      	lsls	r5, r2, #24
 80066d0:	d521      	bpl.n	8006716 <_printf_i+0x122>
 80066d2:	07d3      	lsls	r3, r2, #31
 80066d4:	d502      	bpl.n	80066dc <_printf_i+0xe8>
 80066d6:	2320      	movs	r3, #32
 80066d8:	431a      	orrs	r2, r3
 80066da:	6022      	str	r2, [r4, #0]
 80066dc:	2710      	movs	r7, #16
 80066de:	2800      	cmp	r0, #0
 80066e0:	d103      	bne.n	80066ea <_printf_i+0xf6>
 80066e2:	2320      	movs	r3, #32
 80066e4:	6822      	ldr	r2, [r4, #0]
 80066e6:	439a      	bics	r2, r3
 80066e8:	6022      	str	r2, [r4, #0]
 80066ea:	0023      	movs	r3, r4
 80066ec:	2200      	movs	r2, #0
 80066ee:	3343      	adds	r3, #67	; 0x43
 80066f0:	701a      	strb	r2, [r3, #0]
 80066f2:	6863      	ldr	r3, [r4, #4]
 80066f4:	60a3      	str	r3, [r4, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	db58      	blt.n	80067ac <_printf_i+0x1b8>
 80066fa:	2204      	movs	r2, #4
 80066fc:	6821      	ldr	r1, [r4, #0]
 80066fe:	4391      	bics	r1, r2
 8006700:	6021      	str	r1, [r4, #0]
 8006702:	2800      	cmp	r0, #0
 8006704:	d154      	bne.n	80067b0 <_printf_i+0x1bc>
 8006706:	9d02      	ldr	r5, [sp, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d05a      	beq.n	80067c2 <_printf_i+0x1ce>
 800670c:	0025      	movs	r5, r4
 800670e:	7833      	ldrb	r3, [r6, #0]
 8006710:	3542      	adds	r5, #66	; 0x42
 8006712:	702b      	strb	r3, [r5, #0]
 8006714:	e055      	b.n	80067c2 <_printf_i+0x1ce>
 8006716:	0655      	lsls	r5, r2, #25
 8006718:	d5db      	bpl.n	80066d2 <_printf_i+0xde>
 800671a:	b280      	uxth	r0, r0
 800671c:	e7d9      	b.n	80066d2 <_printf_i+0xde>
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	680d      	ldr	r5, [r1, #0]
 8006722:	1d10      	adds	r0, r2, #4
 8006724:	6949      	ldr	r1, [r1, #20]
 8006726:	6018      	str	r0, [r3, #0]
 8006728:	6813      	ldr	r3, [r2, #0]
 800672a:	062e      	lsls	r6, r5, #24
 800672c:	d501      	bpl.n	8006732 <_printf_i+0x13e>
 800672e:	6019      	str	r1, [r3, #0]
 8006730:	e002      	b.n	8006738 <_printf_i+0x144>
 8006732:	066d      	lsls	r5, r5, #25
 8006734:	d5fb      	bpl.n	800672e <_printf_i+0x13a>
 8006736:	8019      	strh	r1, [r3, #0]
 8006738:	2300      	movs	r3, #0
 800673a:	9d02      	ldr	r5, [sp, #8]
 800673c:	6123      	str	r3, [r4, #16]
 800673e:	e04f      	b.n	80067e0 <_printf_i+0x1ec>
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	1d11      	adds	r1, r2, #4
 8006744:	6019      	str	r1, [r3, #0]
 8006746:	6815      	ldr	r5, [r2, #0]
 8006748:	2100      	movs	r1, #0
 800674a:	6862      	ldr	r2, [r4, #4]
 800674c:	0028      	movs	r0, r5
 800674e:	f000 f891 	bl	8006874 <memchr>
 8006752:	2800      	cmp	r0, #0
 8006754:	d001      	beq.n	800675a <_printf_i+0x166>
 8006756:	1b40      	subs	r0, r0, r5
 8006758:	6060      	str	r0, [r4, #4]
 800675a:	6863      	ldr	r3, [r4, #4]
 800675c:	6123      	str	r3, [r4, #16]
 800675e:	2300      	movs	r3, #0
 8006760:	9a02      	ldr	r2, [sp, #8]
 8006762:	7013      	strb	r3, [r2, #0]
 8006764:	e03c      	b.n	80067e0 <_printf_i+0x1ec>
 8006766:	6923      	ldr	r3, [r4, #16]
 8006768:	002a      	movs	r2, r5
 800676a:	9904      	ldr	r1, [sp, #16]
 800676c:	9803      	ldr	r0, [sp, #12]
 800676e:	9d05      	ldr	r5, [sp, #20]
 8006770:	47a8      	blx	r5
 8006772:	1c43      	adds	r3, r0, #1
 8006774:	d03e      	beq.n	80067f4 <_printf_i+0x200>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	079b      	lsls	r3, r3, #30
 800677a:	d415      	bmi.n	80067a8 <_printf_i+0x1b4>
 800677c:	9b07      	ldr	r3, [sp, #28]
 800677e:	68e0      	ldr	r0, [r4, #12]
 8006780:	4298      	cmp	r0, r3
 8006782:	da39      	bge.n	80067f8 <_printf_i+0x204>
 8006784:	0018      	movs	r0, r3
 8006786:	e037      	b.n	80067f8 <_printf_i+0x204>
 8006788:	0022      	movs	r2, r4
 800678a:	2301      	movs	r3, #1
 800678c:	3219      	adds	r2, #25
 800678e:	9904      	ldr	r1, [sp, #16]
 8006790:	9803      	ldr	r0, [sp, #12]
 8006792:	9e05      	ldr	r6, [sp, #20]
 8006794:	47b0      	blx	r6
 8006796:	1c43      	adds	r3, r0, #1
 8006798:	d02c      	beq.n	80067f4 <_printf_i+0x200>
 800679a:	3501      	adds	r5, #1
 800679c:	68e3      	ldr	r3, [r4, #12]
 800679e:	9a07      	ldr	r2, [sp, #28]
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	42ab      	cmp	r3, r5
 80067a4:	dcf0      	bgt.n	8006788 <_printf_i+0x194>
 80067a6:	e7e9      	b.n	800677c <_printf_i+0x188>
 80067a8:	2500      	movs	r5, #0
 80067aa:	e7f7      	b.n	800679c <_printf_i+0x1a8>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d0ad      	beq.n	800670c <_printf_i+0x118>
 80067b0:	9d02      	ldr	r5, [sp, #8]
 80067b2:	0039      	movs	r1, r7
 80067b4:	f7f9 fd2e 	bl	8000214 <__aeabi_uidivmod>
 80067b8:	5c73      	ldrb	r3, [r6, r1]
 80067ba:	3d01      	subs	r5, #1
 80067bc:	702b      	strb	r3, [r5, #0]
 80067be:	2800      	cmp	r0, #0
 80067c0:	d1f7      	bne.n	80067b2 <_printf_i+0x1be>
 80067c2:	2f08      	cmp	r7, #8
 80067c4:	d109      	bne.n	80067da <_printf_i+0x1e6>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	07db      	lsls	r3, r3, #31
 80067ca:	d506      	bpl.n	80067da <_printf_i+0x1e6>
 80067cc:	6863      	ldr	r3, [r4, #4]
 80067ce:	6922      	ldr	r2, [r4, #16]
 80067d0:	4293      	cmp	r3, r2
 80067d2:	dc02      	bgt.n	80067da <_printf_i+0x1e6>
 80067d4:	2330      	movs	r3, #48	; 0x30
 80067d6:	3d01      	subs	r5, #1
 80067d8:	702b      	strb	r3, [r5, #0]
 80067da:	9b02      	ldr	r3, [sp, #8]
 80067dc:	1b5b      	subs	r3, r3, r5
 80067de:	6123      	str	r3, [r4, #16]
 80067e0:	9b05      	ldr	r3, [sp, #20]
 80067e2:	aa07      	add	r2, sp, #28
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	0021      	movs	r1, r4
 80067e8:	9b04      	ldr	r3, [sp, #16]
 80067ea:	9803      	ldr	r0, [sp, #12]
 80067ec:	f7ff fe94 	bl	8006518 <_printf_common>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	d1b8      	bne.n	8006766 <_printf_i+0x172>
 80067f4:	2001      	movs	r0, #1
 80067f6:	4240      	negs	r0, r0
 80067f8:	b009      	add	sp, #36	; 0x24
 80067fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067fc:	08006ac1 	.word	0x08006ac1
 8006800:	08006ad2 	.word	0x08006ad2

08006804 <_read_r>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	0005      	movs	r5, r0
 8006808:	0008      	movs	r0, r1
 800680a:	0011      	movs	r1, r2
 800680c:	2200      	movs	r2, #0
 800680e:	4c06      	ldr	r4, [pc, #24]	; (8006828 <_read_r+0x24>)
 8006810:	6022      	str	r2, [r4, #0]
 8006812:	001a      	movs	r2, r3
 8006814:	f7fe ff58 	bl	80056c8 <_read>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d103      	bne.n	8006824 <_read_r+0x20>
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d000      	beq.n	8006824 <_read_r+0x20>
 8006822:	602b      	str	r3, [r5, #0]
 8006824:	bd70      	pop	{r4, r5, r6, pc}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	20000328 	.word	0x20000328

0800682c <_fstat_r>:
 800682c:	2300      	movs	r3, #0
 800682e:	b570      	push	{r4, r5, r6, lr}
 8006830:	4c06      	ldr	r4, [pc, #24]	; (800684c <_fstat_r+0x20>)
 8006832:	0005      	movs	r5, r0
 8006834:	0008      	movs	r0, r1
 8006836:	0011      	movs	r1, r2
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	f7fe ff88 	bl	800574e <_fstat>
 800683e:	1c43      	adds	r3, r0, #1
 8006840:	d103      	bne.n	800684a <_fstat_r+0x1e>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d000      	beq.n	800684a <_fstat_r+0x1e>
 8006848:	602b      	str	r3, [r5, #0]
 800684a:	bd70      	pop	{r4, r5, r6, pc}
 800684c:	20000328 	.word	0x20000328

08006850 <_isatty_r>:
 8006850:	2300      	movs	r3, #0
 8006852:	b570      	push	{r4, r5, r6, lr}
 8006854:	4c06      	ldr	r4, [pc, #24]	; (8006870 <_isatty_r+0x20>)
 8006856:	0005      	movs	r5, r0
 8006858:	0008      	movs	r0, r1
 800685a:	6023      	str	r3, [r4, #0]
 800685c:	f7fe ff85 	bl	800576a <_isatty>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d103      	bne.n	800686c <_isatty_r+0x1c>
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d000      	beq.n	800686c <_isatty_r+0x1c>
 800686a:	602b      	str	r3, [r5, #0]
 800686c:	bd70      	pop	{r4, r5, r6, pc}
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	20000328 	.word	0x20000328

08006874 <memchr>:
 8006874:	b2c9      	uxtb	r1, r1
 8006876:	1882      	adds	r2, r0, r2
 8006878:	4290      	cmp	r0, r2
 800687a:	d101      	bne.n	8006880 <memchr+0xc>
 800687c:	2000      	movs	r0, #0
 800687e:	4770      	bx	lr
 8006880:	7803      	ldrb	r3, [r0, #0]
 8006882:	428b      	cmp	r3, r1
 8006884:	d0fb      	beq.n	800687e <memchr+0xa>
 8006886:	3001      	adds	r0, #1
 8006888:	e7f6      	b.n	8006878 <memchr+0x4>
	...

0800688c <_init>:
 800688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688e:	46c0      	nop			; (mov r8, r8)
 8006890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006892:	bc08      	pop	{r3}
 8006894:	469e      	mov	lr, r3
 8006896:	4770      	bx	lr

08006898 <_fini>:
 8006898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689a:	46c0      	nop			; (mov r8, r8)
 800689c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800689e:	bc08      	pop	{r3}
 80068a0:	469e      	mov	lr, r3
 80068a2:	4770      	bx	lr
