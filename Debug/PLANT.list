
PLANT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007db8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  08007e78  08007e78  00017e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081dc  080081dc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080081dc  080081dc  000181dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081e4  080081e4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081e4  080081e4  000181e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081e8  080081e8  000181e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080081ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000068  08008254  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08008254  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fad1  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022b3  00000000  00000000  0002fb61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  00031e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  00032d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001704e  00000000  00000000  00033ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b727  00000000  00000000  0004ab1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ebef  00000000  00000000  00056245  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4e34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003edc  00000000  00000000  000e4eb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007e60 	.word	0x08007e60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08007e60 	.word	0x08007e60

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 fc31 	bl	8000c6c <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fb89 	bl	8000b2c <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fc23 	bl	8000c6c <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fc19 	bl	8000c6c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fbab 	bl	8000ba4 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fba1 	bl	8000ba4 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	1c08      	adds	r0, r1, #0
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 fa9d 	bl	80009b8 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 fa1f 	bl	80008cc <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fa8f 	bl	80009b8 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fa85 	bl	80009b8 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fa2d 	bl	800091c <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fa23 	bl	800091c <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_uldivmod>:
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d111      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d10f      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004ec:	2900      	cmp	r1, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_uldivmod+0xe>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d002      	beq.n	80004fa <__aeabi_uldivmod+0x16>
 80004f4:	2100      	movs	r1, #0
 80004f6:	43c9      	mvns	r1, r1
 80004f8:	1c08      	adds	r0, r1, #0
 80004fa:	b407      	push	{r0, r1, r2}
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <__aeabi_uldivmod+0x24>)
 80004fe:	a102      	add	r1, pc, #8	; (adr r1, 8000508 <__aeabi_uldivmod+0x24>)
 8000500:	1840      	adds	r0, r0, r1
 8000502:	9002      	str	r0, [sp, #8]
 8000504:	bd03      	pop	{r0, r1, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	fffffee9 	.word	0xfffffee9
 800050c:	b403      	push	{r0, r1}
 800050e:	4668      	mov	r0, sp
 8000510:	b501      	push	{r0, lr}
 8000512:	9802      	ldr	r0, [sp, #8]
 8000514:	f000 f806 	bl	8000524 <__udivmoddi4>
 8000518:	9b01      	ldr	r3, [sp, #4]
 800051a:	469e      	mov	lr, r3
 800051c:	b002      	add	sp, #8
 800051e:	bc0c      	pop	{r2, r3}
 8000520:	4770      	bx	lr
 8000522:	46c0      	nop			; (mov r8, r8)

08000524 <__udivmoddi4>:
 8000524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000526:	464f      	mov	r7, r9
 8000528:	4646      	mov	r6, r8
 800052a:	46d6      	mov	lr, sl
 800052c:	b5c0      	push	{r6, r7, lr}
 800052e:	0004      	movs	r4, r0
 8000530:	b082      	sub	sp, #8
 8000532:	000d      	movs	r5, r1
 8000534:	4691      	mov	r9, r2
 8000536:	4698      	mov	r8, r3
 8000538:	428b      	cmp	r3, r1
 800053a:	d82f      	bhi.n	800059c <__udivmoddi4+0x78>
 800053c:	d02c      	beq.n	8000598 <__udivmoddi4+0x74>
 800053e:	4641      	mov	r1, r8
 8000540:	4648      	mov	r0, r9
 8000542:	f000 fc89 	bl	8000e58 <__clzdi2>
 8000546:	0029      	movs	r1, r5
 8000548:	0006      	movs	r6, r0
 800054a:	0020      	movs	r0, r4
 800054c:	f000 fc84 	bl	8000e58 <__clzdi2>
 8000550:	1a33      	subs	r3, r6, r0
 8000552:	469c      	mov	ip, r3
 8000554:	3b20      	subs	r3, #32
 8000556:	469a      	mov	sl, r3
 8000558:	d500      	bpl.n	800055c <__udivmoddi4+0x38>
 800055a:	e076      	b.n	800064a <__udivmoddi4+0x126>
 800055c:	464b      	mov	r3, r9
 800055e:	4652      	mov	r2, sl
 8000560:	4093      	lsls	r3, r2
 8000562:	001f      	movs	r7, r3
 8000564:	464b      	mov	r3, r9
 8000566:	4662      	mov	r2, ip
 8000568:	4093      	lsls	r3, r2
 800056a:	001e      	movs	r6, r3
 800056c:	42af      	cmp	r7, r5
 800056e:	d828      	bhi.n	80005c2 <__udivmoddi4+0x9e>
 8000570:	d025      	beq.n	80005be <__udivmoddi4+0x9a>
 8000572:	4653      	mov	r3, sl
 8000574:	1ba4      	subs	r4, r4, r6
 8000576:	41bd      	sbcs	r5, r7
 8000578:	2b00      	cmp	r3, #0
 800057a:	da00      	bge.n	800057e <__udivmoddi4+0x5a>
 800057c:	e07b      	b.n	8000676 <__udivmoddi4+0x152>
 800057e:	2200      	movs	r2, #0
 8000580:	2300      	movs	r3, #0
 8000582:	9200      	str	r2, [sp, #0]
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2301      	movs	r3, #1
 8000588:	4652      	mov	r2, sl
 800058a:	4093      	lsls	r3, r2
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2301      	movs	r3, #1
 8000590:	4662      	mov	r2, ip
 8000592:	4093      	lsls	r3, r2
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	e018      	b.n	80005ca <__udivmoddi4+0xa6>
 8000598:	4282      	cmp	r2, r0
 800059a:	d9d0      	bls.n	800053e <__udivmoddi4+0x1a>
 800059c:	2200      	movs	r2, #0
 800059e:	2300      	movs	r3, #0
 80005a0:	9200      	str	r2, [sp, #0]
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <__udivmoddi4+0x8a>
 80005aa:	601c      	str	r4, [r3, #0]
 80005ac:	605d      	str	r5, [r3, #4]
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	b002      	add	sp, #8
 80005b4:	bc1c      	pop	{r2, r3, r4}
 80005b6:	4690      	mov	r8, r2
 80005b8:	4699      	mov	r9, r3
 80005ba:	46a2      	mov	sl, r4
 80005bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d9d7      	bls.n	8000572 <__udivmoddi4+0x4e>
 80005c2:	2200      	movs	r2, #0
 80005c4:	2300      	movs	r3, #0
 80005c6:	9200      	str	r2, [sp, #0]
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	4663      	mov	r3, ip
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d0e9      	beq.n	80005a4 <__udivmoddi4+0x80>
 80005d0:	07fb      	lsls	r3, r7, #31
 80005d2:	4698      	mov	r8, r3
 80005d4:	4641      	mov	r1, r8
 80005d6:	0872      	lsrs	r2, r6, #1
 80005d8:	430a      	orrs	r2, r1
 80005da:	087b      	lsrs	r3, r7, #1
 80005dc:	4666      	mov	r6, ip
 80005de:	e00e      	b.n	80005fe <__udivmoddi4+0xda>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	d101      	bne.n	80005e8 <__udivmoddi4+0xc4>
 80005e4:	42a2      	cmp	r2, r4
 80005e6:	d80c      	bhi.n	8000602 <__udivmoddi4+0xde>
 80005e8:	1aa4      	subs	r4, r4, r2
 80005ea:	419d      	sbcs	r5, r3
 80005ec:	2001      	movs	r0, #1
 80005ee:	1924      	adds	r4, r4, r4
 80005f0:	416d      	adcs	r5, r5
 80005f2:	2100      	movs	r1, #0
 80005f4:	3e01      	subs	r6, #1
 80005f6:	1824      	adds	r4, r4, r0
 80005f8:	414d      	adcs	r5, r1
 80005fa:	2e00      	cmp	r6, #0
 80005fc:	d006      	beq.n	800060c <__udivmoddi4+0xe8>
 80005fe:	42ab      	cmp	r3, r5
 8000600:	d9ee      	bls.n	80005e0 <__udivmoddi4+0xbc>
 8000602:	3e01      	subs	r6, #1
 8000604:	1924      	adds	r4, r4, r4
 8000606:	416d      	adcs	r5, r5
 8000608:	2e00      	cmp	r6, #0
 800060a:	d1f8      	bne.n	80005fe <__udivmoddi4+0xda>
 800060c:	9800      	ldr	r0, [sp, #0]
 800060e:	9901      	ldr	r1, [sp, #4]
 8000610:	4653      	mov	r3, sl
 8000612:	1900      	adds	r0, r0, r4
 8000614:	4169      	adcs	r1, r5
 8000616:	2b00      	cmp	r3, #0
 8000618:	db23      	blt.n	8000662 <__udivmoddi4+0x13e>
 800061a:	002b      	movs	r3, r5
 800061c:	4652      	mov	r2, sl
 800061e:	40d3      	lsrs	r3, r2
 8000620:	002a      	movs	r2, r5
 8000622:	4664      	mov	r4, ip
 8000624:	40e2      	lsrs	r2, r4
 8000626:	001c      	movs	r4, r3
 8000628:	4653      	mov	r3, sl
 800062a:	0015      	movs	r5, r2
 800062c:	2b00      	cmp	r3, #0
 800062e:	db2d      	blt.n	800068c <__udivmoddi4+0x168>
 8000630:	0026      	movs	r6, r4
 8000632:	4657      	mov	r7, sl
 8000634:	40be      	lsls	r6, r7
 8000636:	0033      	movs	r3, r6
 8000638:	0026      	movs	r6, r4
 800063a:	4667      	mov	r7, ip
 800063c:	40be      	lsls	r6, r7
 800063e:	0032      	movs	r2, r6
 8000640:	1a80      	subs	r0, r0, r2
 8000642:	4199      	sbcs	r1, r3
 8000644:	9000      	str	r0, [sp, #0]
 8000646:	9101      	str	r1, [sp, #4]
 8000648:	e7ac      	b.n	80005a4 <__udivmoddi4+0x80>
 800064a:	4662      	mov	r2, ip
 800064c:	2320      	movs	r3, #32
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	464a      	mov	r2, r9
 8000652:	40da      	lsrs	r2, r3
 8000654:	4661      	mov	r1, ip
 8000656:	0013      	movs	r3, r2
 8000658:	4642      	mov	r2, r8
 800065a:	408a      	lsls	r2, r1
 800065c:	0017      	movs	r7, r2
 800065e:	431f      	orrs	r7, r3
 8000660:	e780      	b.n	8000564 <__udivmoddi4+0x40>
 8000662:	4662      	mov	r2, ip
 8000664:	2320      	movs	r3, #32
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	002a      	movs	r2, r5
 800066a:	4666      	mov	r6, ip
 800066c:	409a      	lsls	r2, r3
 800066e:	0023      	movs	r3, r4
 8000670:	40f3      	lsrs	r3, r6
 8000672:	4313      	orrs	r3, r2
 8000674:	e7d4      	b.n	8000620 <__udivmoddi4+0xfc>
 8000676:	4662      	mov	r2, ip
 8000678:	2320      	movs	r3, #32
 800067a:	2100      	movs	r1, #0
 800067c:	1a9b      	subs	r3, r3, r2
 800067e:	2200      	movs	r2, #0
 8000680:	9100      	str	r1, [sp, #0]
 8000682:	9201      	str	r2, [sp, #4]
 8000684:	2201      	movs	r2, #1
 8000686:	40da      	lsrs	r2, r3
 8000688:	9201      	str	r2, [sp, #4]
 800068a:	e780      	b.n	800058e <__udivmoddi4+0x6a>
 800068c:	2320      	movs	r3, #32
 800068e:	4662      	mov	r2, ip
 8000690:	0026      	movs	r6, r4
 8000692:	1a9b      	subs	r3, r3, r2
 8000694:	40de      	lsrs	r6, r3
 8000696:	002f      	movs	r7, r5
 8000698:	46b0      	mov	r8, r6
 800069a:	4666      	mov	r6, ip
 800069c:	40b7      	lsls	r7, r6
 800069e:	4646      	mov	r6, r8
 80006a0:	003b      	movs	r3, r7
 80006a2:	4333      	orrs	r3, r6
 80006a4:	e7c8      	b.n	8000638 <__udivmoddi4+0x114>
 80006a6:	46c0      	nop			; (mov r8, r8)

080006a8 <__aeabi_fdiv>:
 80006a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006aa:	4657      	mov	r7, sl
 80006ac:	464e      	mov	r6, r9
 80006ae:	4645      	mov	r5, r8
 80006b0:	46de      	mov	lr, fp
 80006b2:	0244      	lsls	r4, r0, #9
 80006b4:	b5e0      	push	{r5, r6, r7, lr}
 80006b6:	0046      	lsls	r6, r0, #1
 80006b8:	4688      	mov	r8, r1
 80006ba:	0a64      	lsrs	r4, r4, #9
 80006bc:	0e36      	lsrs	r6, r6, #24
 80006be:	0fc7      	lsrs	r7, r0, #31
 80006c0:	2e00      	cmp	r6, #0
 80006c2:	d063      	beq.n	800078c <__aeabi_fdiv+0xe4>
 80006c4:	2eff      	cmp	r6, #255	; 0xff
 80006c6:	d024      	beq.n	8000712 <__aeabi_fdiv+0x6a>
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	00e4      	lsls	r4, r4, #3
 80006cc:	04db      	lsls	r3, r3, #19
 80006ce:	431c      	orrs	r4, r3
 80006d0:	2300      	movs	r3, #0
 80006d2:	4699      	mov	r9, r3
 80006d4:	469b      	mov	fp, r3
 80006d6:	3e7f      	subs	r6, #127	; 0x7f
 80006d8:	4643      	mov	r3, r8
 80006da:	4642      	mov	r2, r8
 80006dc:	025d      	lsls	r5, r3, #9
 80006de:	0fd2      	lsrs	r2, r2, #31
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	0a6d      	lsrs	r5, r5, #9
 80006e4:	0e1b      	lsrs	r3, r3, #24
 80006e6:	4690      	mov	r8, r2
 80006e8:	4692      	mov	sl, r2
 80006ea:	d065      	beq.n	80007b8 <__aeabi_fdiv+0x110>
 80006ec:	2bff      	cmp	r3, #255	; 0xff
 80006ee:	d055      	beq.n	800079c <__aeabi_fdiv+0xf4>
 80006f0:	2280      	movs	r2, #128	; 0x80
 80006f2:	2100      	movs	r1, #0
 80006f4:	00ed      	lsls	r5, r5, #3
 80006f6:	04d2      	lsls	r2, r2, #19
 80006f8:	3b7f      	subs	r3, #127	; 0x7f
 80006fa:	4315      	orrs	r5, r2
 80006fc:	1af6      	subs	r6, r6, r3
 80006fe:	4643      	mov	r3, r8
 8000700:	464a      	mov	r2, r9
 8000702:	407b      	eors	r3, r7
 8000704:	2a0f      	cmp	r2, #15
 8000706:	d900      	bls.n	800070a <__aeabi_fdiv+0x62>
 8000708:	e08d      	b.n	8000826 <__aeabi_fdiv+0x17e>
 800070a:	486d      	ldr	r0, [pc, #436]	; (80008c0 <__aeabi_fdiv+0x218>)
 800070c:	0092      	lsls	r2, r2, #2
 800070e:	5882      	ldr	r2, [r0, r2]
 8000710:	4697      	mov	pc, r2
 8000712:	2c00      	cmp	r4, #0
 8000714:	d154      	bne.n	80007c0 <__aeabi_fdiv+0x118>
 8000716:	2308      	movs	r3, #8
 8000718:	4699      	mov	r9, r3
 800071a:	3b06      	subs	r3, #6
 800071c:	26ff      	movs	r6, #255	; 0xff
 800071e:	469b      	mov	fp, r3
 8000720:	e7da      	b.n	80006d8 <__aeabi_fdiv+0x30>
 8000722:	2500      	movs	r5, #0
 8000724:	4653      	mov	r3, sl
 8000726:	2902      	cmp	r1, #2
 8000728:	d01b      	beq.n	8000762 <__aeabi_fdiv+0xba>
 800072a:	2903      	cmp	r1, #3
 800072c:	d100      	bne.n	8000730 <__aeabi_fdiv+0x88>
 800072e:	e0bf      	b.n	80008b0 <__aeabi_fdiv+0x208>
 8000730:	2901      	cmp	r1, #1
 8000732:	d028      	beq.n	8000786 <__aeabi_fdiv+0xde>
 8000734:	0030      	movs	r0, r6
 8000736:	307f      	adds	r0, #127	; 0x7f
 8000738:	2800      	cmp	r0, #0
 800073a:	dd20      	ble.n	800077e <__aeabi_fdiv+0xd6>
 800073c:	076a      	lsls	r2, r5, #29
 800073e:	d004      	beq.n	800074a <__aeabi_fdiv+0xa2>
 8000740:	220f      	movs	r2, #15
 8000742:	402a      	ands	r2, r5
 8000744:	2a04      	cmp	r2, #4
 8000746:	d000      	beq.n	800074a <__aeabi_fdiv+0xa2>
 8000748:	3504      	adds	r5, #4
 800074a:	012a      	lsls	r2, r5, #4
 800074c:	d503      	bpl.n	8000756 <__aeabi_fdiv+0xae>
 800074e:	0030      	movs	r0, r6
 8000750:	4a5c      	ldr	r2, [pc, #368]	; (80008c4 <__aeabi_fdiv+0x21c>)
 8000752:	3080      	adds	r0, #128	; 0x80
 8000754:	4015      	ands	r5, r2
 8000756:	28fe      	cmp	r0, #254	; 0xfe
 8000758:	dc03      	bgt.n	8000762 <__aeabi_fdiv+0xba>
 800075a:	01ac      	lsls	r4, r5, #6
 800075c:	0a64      	lsrs	r4, r4, #9
 800075e:	b2c2      	uxtb	r2, r0
 8000760:	e001      	b.n	8000766 <__aeabi_fdiv+0xbe>
 8000762:	22ff      	movs	r2, #255	; 0xff
 8000764:	2400      	movs	r4, #0
 8000766:	0264      	lsls	r4, r4, #9
 8000768:	05d2      	lsls	r2, r2, #23
 800076a:	0a60      	lsrs	r0, r4, #9
 800076c:	07db      	lsls	r3, r3, #31
 800076e:	4310      	orrs	r0, r2
 8000770:	4318      	orrs	r0, r3
 8000772:	bc3c      	pop	{r2, r3, r4, r5}
 8000774:	4690      	mov	r8, r2
 8000776:	4699      	mov	r9, r3
 8000778:	46a2      	mov	sl, r4
 800077a:	46ab      	mov	fp, r5
 800077c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800077e:	2201      	movs	r2, #1
 8000780:	1a10      	subs	r0, r2, r0
 8000782:	281b      	cmp	r0, #27
 8000784:	dd7c      	ble.n	8000880 <__aeabi_fdiv+0x1d8>
 8000786:	2200      	movs	r2, #0
 8000788:	2400      	movs	r4, #0
 800078a:	e7ec      	b.n	8000766 <__aeabi_fdiv+0xbe>
 800078c:	2c00      	cmp	r4, #0
 800078e:	d11d      	bne.n	80007cc <__aeabi_fdiv+0x124>
 8000790:	2304      	movs	r3, #4
 8000792:	4699      	mov	r9, r3
 8000794:	3b03      	subs	r3, #3
 8000796:	2600      	movs	r6, #0
 8000798:	469b      	mov	fp, r3
 800079a:	e79d      	b.n	80006d8 <__aeabi_fdiv+0x30>
 800079c:	3eff      	subs	r6, #255	; 0xff
 800079e:	2d00      	cmp	r5, #0
 80007a0:	d120      	bne.n	80007e4 <__aeabi_fdiv+0x13c>
 80007a2:	2102      	movs	r1, #2
 80007a4:	4643      	mov	r3, r8
 80007a6:	464a      	mov	r2, r9
 80007a8:	407b      	eors	r3, r7
 80007aa:	430a      	orrs	r2, r1
 80007ac:	2a0f      	cmp	r2, #15
 80007ae:	d8d8      	bhi.n	8000762 <__aeabi_fdiv+0xba>
 80007b0:	4845      	ldr	r0, [pc, #276]	; (80008c8 <__aeabi_fdiv+0x220>)
 80007b2:	0092      	lsls	r2, r2, #2
 80007b4:	5882      	ldr	r2, [r0, r2]
 80007b6:	4697      	mov	pc, r2
 80007b8:	2d00      	cmp	r5, #0
 80007ba:	d119      	bne.n	80007f0 <__aeabi_fdiv+0x148>
 80007bc:	2101      	movs	r1, #1
 80007be:	e7f1      	b.n	80007a4 <__aeabi_fdiv+0xfc>
 80007c0:	230c      	movs	r3, #12
 80007c2:	4699      	mov	r9, r3
 80007c4:	3b09      	subs	r3, #9
 80007c6:	26ff      	movs	r6, #255	; 0xff
 80007c8:	469b      	mov	fp, r3
 80007ca:	e785      	b.n	80006d8 <__aeabi_fdiv+0x30>
 80007cc:	0020      	movs	r0, r4
 80007ce:	f000 fb25 	bl	8000e1c <__clzsi2>
 80007d2:	2676      	movs	r6, #118	; 0x76
 80007d4:	1f43      	subs	r3, r0, #5
 80007d6:	409c      	lsls	r4, r3
 80007d8:	2300      	movs	r3, #0
 80007da:	4276      	negs	r6, r6
 80007dc:	1a36      	subs	r6, r6, r0
 80007de:	4699      	mov	r9, r3
 80007e0:	469b      	mov	fp, r3
 80007e2:	e779      	b.n	80006d8 <__aeabi_fdiv+0x30>
 80007e4:	464a      	mov	r2, r9
 80007e6:	2303      	movs	r3, #3
 80007e8:	431a      	orrs	r2, r3
 80007ea:	4691      	mov	r9, r2
 80007ec:	2103      	movs	r1, #3
 80007ee:	e786      	b.n	80006fe <__aeabi_fdiv+0x56>
 80007f0:	0028      	movs	r0, r5
 80007f2:	f000 fb13 	bl	8000e1c <__clzsi2>
 80007f6:	1f43      	subs	r3, r0, #5
 80007f8:	1836      	adds	r6, r6, r0
 80007fa:	409d      	lsls	r5, r3
 80007fc:	3676      	adds	r6, #118	; 0x76
 80007fe:	2100      	movs	r1, #0
 8000800:	e77d      	b.n	80006fe <__aeabi_fdiv+0x56>
 8000802:	2480      	movs	r4, #128	; 0x80
 8000804:	2300      	movs	r3, #0
 8000806:	03e4      	lsls	r4, r4, #15
 8000808:	22ff      	movs	r2, #255	; 0xff
 800080a:	e7ac      	b.n	8000766 <__aeabi_fdiv+0xbe>
 800080c:	2500      	movs	r5, #0
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	03db      	lsls	r3, r3, #15
 8000812:	421c      	tst	r4, r3
 8000814:	d028      	beq.n	8000868 <__aeabi_fdiv+0x1c0>
 8000816:	421d      	tst	r5, r3
 8000818:	d126      	bne.n	8000868 <__aeabi_fdiv+0x1c0>
 800081a:	432b      	orrs	r3, r5
 800081c:	025c      	lsls	r4, r3, #9
 800081e:	0a64      	lsrs	r4, r4, #9
 8000820:	4643      	mov	r3, r8
 8000822:	22ff      	movs	r2, #255	; 0xff
 8000824:	e79f      	b.n	8000766 <__aeabi_fdiv+0xbe>
 8000826:	0162      	lsls	r2, r4, #5
 8000828:	016c      	lsls	r4, r5, #5
 800082a:	42a2      	cmp	r2, r4
 800082c:	d224      	bcs.n	8000878 <__aeabi_fdiv+0x1d0>
 800082e:	211b      	movs	r1, #27
 8000830:	2500      	movs	r5, #0
 8000832:	3e01      	subs	r6, #1
 8000834:	2701      	movs	r7, #1
 8000836:	0010      	movs	r0, r2
 8000838:	006d      	lsls	r5, r5, #1
 800083a:	0052      	lsls	r2, r2, #1
 800083c:	2800      	cmp	r0, #0
 800083e:	db01      	blt.n	8000844 <__aeabi_fdiv+0x19c>
 8000840:	4294      	cmp	r4, r2
 8000842:	d801      	bhi.n	8000848 <__aeabi_fdiv+0x1a0>
 8000844:	1b12      	subs	r2, r2, r4
 8000846:	433d      	orrs	r5, r7
 8000848:	3901      	subs	r1, #1
 800084a:	2900      	cmp	r1, #0
 800084c:	d1f3      	bne.n	8000836 <__aeabi_fdiv+0x18e>
 800084e:	0014      	movs	r4, r2
 8000850:	1e62      	subs	r2, r4, #1
 8000852:	4194      	sbcs	r4, r2
 8000854:	4325      	orrs	r5, r4
 8000856:	e76d      	b.n	8000734 <__aeabi_fdiv+0x8c>
 8000858:	46ba      	mov	sl, r7
 800085a:	4659      	mov	r1, fp
 800085c:	0025      	movs	r5, r4
 800085e:	4653      	mov	r3, sl
 8000860:	2902      	cmp	r1, #2
 8000862:	d000      	beq.n	8000866 <__aeabi_fdiv+0x1be>
 8000864:	e761      	b.n	800072a <__aeabi_fdiv+0x82>
 8000866:	e77c      	b.n	8000762 <__aeabi_fdiv+0xba>
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	03db      	lsls	r3, r3, #15
 800086c:	431c      	orrs	r4, r3
 800086e:	0264      	lsls	r4, r4, #9
 8000870:	0a64      	lsrs	r4, r4, #9
 8000872:	003b      	movs	r3, r7
 8000874:	22ff      	movs	r2, #255	; 0xff
 8000876:	e776      	b.n	8000766 <__aeabi_fdiv+0xbe>
 8000878:	1b12      	subs	r2, r2, r4
 800087a:	211a      	movs	r1, #26
 800087c:	2501      	movs	r5, #1
 800087e:	e7d9      	b.n	8000834 <__aeabi_fdiv+0x18c>
 8000880:	369e      	adds	r6, #158	; 0x9e
 8000882:	002a      	movs	r2, r5
 8000884:	40b5      	lsls	r5, r6
 8000886:	002c      	movs	r4, r5
 8000888:	40c2      	lsrs	r2, r0
 800088a:	1e65      	subs	r5, r4, #1
 800088c:	41ac      	sbcs	r4, r5
 800088e:	4314      	orrs	r4, r2
 8000890:	0762      	lsls	r2, r4, #29
 8000892:	d004      	beq.n	800089e <__aeabi_fdiv+0x1f6>
 8000894:	220f      	movs	r2, #15
 8000896:	4022      	ands	r2, r4
 8000898:	2a04      	cmp	r2, #4
 800089a:	d000      	beq.n	800089e <__aeabi_fdiv+0x1f6>
 800089c:	3404      	adds	r4, #4
 800089e:	0162      	lsls	r2, r4, #5
 80008a0:	d403      	bmi.n	80008aa <__aeabi_fdiv+0x202>
 80008a2:	01a4      	lsls	r4, r4, #6
 80008a4:	0a64      	lsrs	r4, r4, #9
 80008a6:	2200      	movs	r2, #0
 80008a8:	e75d      	b.n	8000766 <__aeabi_fdiv+0xbe>
 80008aa:	2201      	movs	r2, #1
 80008ac:	2400      	movs	r4, #0
 80008ae:	e75a      	b.n	8000766 <__aeabi_fdiv+0xbe>
 80008b0:	2480      	movs	r4, #128	; 0x80
 80008b2:	03e4      	lsls	r4, r4, #15
 80008b4:	432c      	orrs	r4, r5
 80008b6:	0264      	lsls	r4, r4, #9
 80008b8:	0a64      	lsrs	r4, r4, #9
 80008ba:	22ff      	movs	r2, #255	; 0xff
 80008bc:	e753      	b.n	8000766 <__aeabi_fdiv+0xbe>
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	08008058 	.word	0x08008058
 80008c4:	f7ffffff 	.word	0xf7ffffff
 80008c8:	08008098 	.word	0x08008098

080008cc <__eqsf2>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	0042      	lsls	r2, r0, #1
 80008d0:	024e      	lsls	r6, r1, #9
 80008d2:	004c      	lsls	r4, r1, #1
 80008d4:	0245      	lsls	r5, r0, #9
 80008d6:	0a6d      	lsrs	r5, r5, #9
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	0fc3      	lsrs	r3, r0, #31
 80008dc:	0a76      	lsrs	r6, r6, #9
 80008de:	0e24      	lsrs	r4, r4, #24
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	2aff      	cmp	r2, #255	; 0xff
 80008e4:	d00f      	beq.n	8000906 <__eqsf2+0x3a>
 80008e6:	2cff      	cmp	r4, #255	; 0xff
 80008e8:	d011      	beq.n	800090e <__eqsf2+0x42>
 80008ea:	2001      	movs	r0, #1
 80008ec:	42a2      	cmp	r2, r4
 80008ee:	d000      	beq.n	80008f2 <__eqsf2+0x26>
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	42b5      	cmp	r5, r6
 80008f4:	d1fc      	bne.n	80008f0 <__eqsf2+0x24>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d00d      	beq.n	8000916 <__eqsf2+0x4a>
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	d1f8      	bne.n	80008f0 <__eqsf2+0x24>
 80008fe:	0028      	movs	r0, r5
 8000900:	1e45      	subs	r5, r0, #1
 8000902:	41a8      	sbcs	r0, r5
 8000904:	e7f4      	b.n	80008f0 <__eqsf2+0x24>
 8000906:	2001      	movs	r0, #1
 8000908:	2d00      	cmp	r5, #0
 800090a:	d1f1      	bne.n	80008f0 <__eqsf2+0x24>
 800090c:	e7eb      	b.n	80008e6 <__eqsf2+0x1a>
 800090e:	2001      	movs	r0, #1
 8000910:	2e00      	cmp	r6, #0
 8000912:	d1ed      	bne.n	80008f0 <__eqsf2+0x24>
 8000914:	e7e9      	b.n	80008ea <__eqsf2+0x1e>
 8000916:	2000      	movs	r0, #0
 8000918:	e7ea      	b.n	80008f0 <__eqsf2+0x24>
 800091a:	46c0      	nop			; (mov r8, r8)

0800091c <__gesf2>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	004a      	lsls	r2, r1, #1
 8000920:	024e      	lsls	r6, r1, #9
 8000922:	0245      	lsls	r5, r0, #9
 8000924:	0044      	lsls	r4, r0, #1
 8000926:	0a6d      	lsrs	r5, r5, #9
 8000928:	0e24      	lsrs	r4, r4, #24
 800092a:	0fc3      	lsrs	r3, r0, #31
 800092c:	0a76      	lsrs	r6, r6, #9
 800092e:	0e12      	lsrs	r2, r2, #24
 8000930:	0fc9      	lsrs	r1, r1, #31
 8000932:	2cff      	cmp	r4, #255	; 0xff
 8000934:	d015      	beq.n	8000962 <__gesf2+0x46>
 8000936:	2aff      	cmp	r2, #255	; 0xff
 8000938:	d00e      	beq.n	8000958 <__gesf2+0x3c>
 800093a:	2c00      	cmp	r4, #0
 800093c:	d115      	bne.n	800096a <__gesf2+0x4e>
 800093e:	2a00      	cmp	r2, #0
 8000940:	d101      	bne.n	8000946 <__gesf2+0x2a>
 8000942:	2e00      	cmp	r6, #0
 8000944:	d01c      	beq.n	8000980 <__gesf2+0x64>
 8000946:	2d00      	cmp	r5, #0
 8000948:	d014      	beq.n	8000974 <__gesf2+0x58>
 800094a:	428b      	cmp	r3, r1
 800094c:	d027      	beq.n	800099e <__gesf2+0x82>
 800094e:	2002      	movs	r0, #2
 8000950:	3b01      	subs	r3, #1
 8000952:	4018      	ands	r0, r3
 8000954:	3801      	subs	r0, #1
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	2e00      	cmp	r6, #0
 800095a:	d0ee      	beq.n	800093a <__gesf2+0x1e>
 800095c:	2002      	movs	r0, #2
 800095e:	4240      	negs	r0, r0
 8000960:	e7f9      	b.n	8000956 <__gesf2+0x3a>
 8000962:	2d00      	cmp	r5, #0
 8000964:	d1fa      	bne.n	800095c <__gesf2+0x40>
 8000966:	2aff      	cmp	r2, #255	; 0xff
 8000968:	d00e      	beq.n	8000988 <__gesf2+0x6c>
 800096a:	2a00      	cmp	r2, #0
 800096c:	d10e      	bne.n	800098c <__gesf2+0x70>
 800096e:	2e00      	cmp	r6, #0
 8000970:	d0ed      	beq.n	800094e <__gesf2+0x32>
 8000972:	e00b      	b.n	800098c <__gesf2+0x70>
 8000974:	2301      	movs	r3, #1
 8000976:	3901      	subs	r1, #1
 8000978:	4399      	bics	r1, r3
 800097a:	0008      	movs	r0, r1
 800097c:	3001      	adds	r0, #1
 800097e:	e7ea      	b.n	8000956 <__gesf2+0x3a>
 8000980:	2000      	movs	r0, #0
 8000982:	2d00      	cmp	r5, #0
 8000984:	d0e7      	beq.n	8000956 <__gesf2+0x3a>
 8000986:	e7e2      	b.n	800094e <__gesf2+0x32>
 8000988:	2e00      	cmp	r6, #0
 800098a:	d1e7      	bne.n	800095c <__gesf2+0x40>
 800098c:	428b      	cmp	r3, r1
 800098e:	d1de      	bne.n	800094e <__gesf2+0x32>
 8000990:	4294      	cmp	r4, r2
 8000992:	dd05      	ble.n	80009a0 <__gesf2+0x84>
 8000994:	2102      	movs	r1, #2
 8000996:	1e58      	subs	r0, r3, #1
 8000998:	4008      	ands	r0, r1
 800099a:	3801      	subs	r0, #1
 800099c:	e7db      	b.n	8000956 <__gesf2+0x3a>
 800099e:	2400      	movs	r4, #0
 80009a0:	42a2      	cmp	r2, r4
 80009a2:	dc04      	bgt.n	80009ae <__gesf2+0x92>
 80009a4:	42b5      	cmp	r5, r6
 80009a6:	d8d2      	bhi.n	800094e <__gesf2+0x32>
 80009a8:	2000      	movs	r0, #0
 80009aa:	42b5      	cmp	r5, r6
 80009ac:	d2d3      	bcs.n	8000956 <__gesf2+0x3a>
 80009ae:	1e58      	subs	r0, r3, #1
 80009b0:	2301      	movs	r3, #1
 80009b2:	4398      	bics	r0, r3
 80009b4:	3001      	adds	r0, #1
 80009b6:	e7ce      	b.n	8000956 <__gesf2+0x3a>

080009b8 <__lesf2>:
 80009b8:	b530      	push	{r4, r5, lr}
 80009ba:	0042      	lsls	r2, r0, #1
 80009bc:	0244      	lsls	r4, r0, #9
 80009be:	024d      	lsls	r5, r1, #9
 80009c0:	0fc3      	lsrs	r3, r0, #31
 80009c2:	0048      	lsls	r0, r1, #1
 80009c4:	0a64      	lsrs	r4, r4, #9
 80009c6:	0e12      	lsrs	r2, r2, #24
 80009c8:	0a6d      	lsrs	r5, r5, #9
 80009ca:	0e00      	lsrs	r0, r0, #24
 80009cc:	0fc9      	lsrs	r1, r1, #31
 80009ce:	2aff      	cmp	r2, #255	; 0xff
 80009d0:	d012      	beq.n	80009f8 <__lesf2+0x40>
 80009d2:	28ff      	cmp	r0, #255	; 0xff
 80009d4:	d00c      	beq.n	80009f0 <__lesf2+0x38>
 80009d6:	2a00      	cmp	r2, #0
 80009d8:	d112      	bne.n	8000a00 <__lesf2+0x48>
 80009da:	2800      	cmp	r0, #0
 80009dc:	d119      	bne.n	8000a12 <__lesf2+0x5a>
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d117      	bne.n	8000a12 <__lesf2+0x5a>
 80009e2:	2c00      	cmp	r4, #0
 80009e4:	d02b      	beq.n	8000a3e <__lesf2+0x86>
 80009e6:	2002      	movs	r0, #2
 80009e8:	3b01      	subs	r3, #1
 80009ea:	4018      	ands	r0, r3
 80009ec:	3801      	subs	r0, #1
 80009ee:	e026      	b.n	8000a3e <__lesf2+0x86>
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d0f0      	beq.n	80009d6 <__lesf2+0x1e>
 80009f4:	2002      	movs	r0, #2
 80009f6:	e022      	b.n	8000a3e <__lesf2+0x86>
 80009f8:	2c00      	cmp	r4, #0
 80009fa:	d1fb      	bne.n	80009f4 <__lesf2+0x3c>
 80009fc:	28ff      	cmp	r0, #255	; 0xff
 80009fe:	d01f      	beq.n	8000a40 <__lesf2+0x88>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d11f      	bne.n	8000a44 <__lesf2+0x8c>
 8000a04:	2d00      	cmp	r5, #0
 8000a06:	d11d      	bne.n	8000a44 <__lesf2+0x8c>
 8000a08:	2002      	movs	r0, #2
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	4018      	ands	r0, r3
 8000a0e:	3801      	subs	r0, #1
 8000a10:	e015      	b.n	8000a3e <__lesf2+0x86>
 8000a12:	2c00      	cmp	r4, #0
 8000a14:	d00e      	beq.n	8000a34 <__lesf2+0x7c>
 8000a16:	428b      	cmp	r3, r1
 8000a18:	d1e5      	bne.n	80009e6 <__lesf2+0x2e>
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4290      	cmp	r0, r2
 8000a1e:	dc04      	bgt.n	8000a2a <__lesf2+0x72>
 8000a20:	42ac      	cmp	r4, r5
 8000a22:	d8e0      	bhi.n	80009e6 <__lesf2+0x2e>
 8000a24:	2000      	movs	r0, #0
 8000a26:	42ac      	cmp	r4, r5
 8000a28:	d209      	bcs.n	8000a3e <__lesf2+0x86>
 8000a2a:	1e58      	subs	r0, r3, #1
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	4398      	bics	r0, r3
 8000a30:	3001      	adds	r0, #1
 8000a32:	e004      	b.n	8000a3e <__lesf2+0x86>
 8000a34:	2301      	movs	r3, #1
 8000a36:	3901      	subs	r1, #1
 8000a38:	4399      	bics	r1, r3
 8000a3a:	0008      	movs	r0, r1
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	bd30      	pop	{r4, r5, pc}
 8000a40:	2d00      	cmp	r5, #0
 8000a42:	d1d7      	bne.n	80009f4 <__lesf2+0x3c>
 8000a44:	428b      	cmp	r3, r1
 8000a46:	d1ce      	bne.n	80009e6 <__lesf2+0x2e>
 8000a48:	4282      	cmp	r2, r0
 8000a4a:	dde7      	ble.n	8000a1c <__lesf2+0x64>
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	1e58      	subs	r0, r3, #1
 8000a50:	4008      	ands	r0, r1
 8000a52:	3801      	subs	r0, #1
 8000a54:	e7f3      	b.n	8000a3e <__lesf2+0x86>
 8000a56:	46c0      	nop			; (mov r8, r8)

08000a58 <__aeabi_f2iz>:
 8000a58:	0241      	lsls	r1, r0, #9
 8000a5a:	0042      	lsls	r2, r0, #1
 8000a5c:	0fc3      	lsrs	r3, r0, #31
 8000a5e:	0a49      	lsrs	r1, r1, #9
 8000a60:	0e12      	lsrs	r2, r2, #24
 8000a62:	2000      	movs	r0, #0
 8000a64:	2a7e      	cmp	r2, #126	; 0x7e
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_f2iz+0x2c>
 8000a68:	2a9d      	cmp	r2, #157	; 0x9d
 8000a6a:	d80c      	bhi.n	8000a86 <__aeabi_f2iz+0x2e>
 8000a6c:	2080      	movs	r0, #128	; 0x80
 8000a6e:	0400      	lsls	r0, r0, #16
 8000a70:	4301      	orrs	r1, r0
 8000a72:	2a95      	cmp	r2, #149	; 0x95
 8000a74:	dc0a      	bgt.n	8000a8c <__aeabi_f2iz+0x34>
 8000a76:	2096      	movs	r0, #150	; 0x96
 8000a78:	1a82      	subs	r2, r0, r2
 8000a7a:	40d1      	lsrs	r1, r2
 8000a7c:	4248      	negs	r0, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d100      	bne.n	8000a84 <__aeabi_f2iz+0x2c>
 8000a82:	0008      	movs	r0, r1
 8000a84:	4770      	bx	lr
 8000a86:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <__aeabi_f2iz+0x3c>)
 8000a88:	1898      	adds	r0, r3, r2
 8000a8a:	e7fb      	b.n	8000a84 <__aeabi_f2iz+0x2c>
 8000a8c:	3a96      	subs	r2, #150	; 0x96
 8000a8e:	4091      	lsls	r1, r2
 8000a90:	e7f4      	b.n	8000a7c <__aeabi_f2iz+0x24>
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	7fffffff 	.word	0x7fffffff

08000a98 <__aeabi_i2f>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	d03d      	beq.n	8000b1a <__aeabi_i2f+0x82>
 8000a9e:	17c3      	asrs	r3, r0, #31
 8000aa0:	18c5      	adds	r5, r0, r3
 8000aa2:	405d      	eors	r5, r3
 8000aa4:	0fc4      	lsrs	r4, r0, #31
 8000aa6:	0028      	movs	r0, r5
 8000aa8:	f000 f9b8 	bl	8000e1c <__clzsi2>
 8000aac:	229e      	movs	r2, #158	; 0x9e
 8000aae:	1a12      	subs	r2, r2, r0
 8000ab0:	2a96      	cmp	r2, #150	; 0x96
 8000ab2:	dc07      	bgt.n	8000ac4 <__aeabi_i2f+0x2c>
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	2808      	cmp	r0, #8
 8000ab8:	dd33      	ble.n	8000b22 <__aeabi_i2f+0x8a>
 8000aba:	3808      	subs	r0, #8
 8000abc:	4085      	lsls	r5, r0
 8000abe:	0268      	lsls	r0, r5, #9
 8000ac0:	0a40      	lsrs	r0, r0, #9
 8000ac2:	e023      	b.n	8000b0c <__aeabi_i2f+0x74>
 8000ac4:	2a99      	cmp	r2, #153	; 0x99
 8000ac6:	dd0b      	ble.n	8000ae0 <__aeabi_i2f+0x48>
 8000ac8:	2305      	movs	r3, #5
 8000aca:	0029      	movs	r1, r5
 8000acc:	1a1b      	subs	r3, r3, r0
 8000ace:	40d9      	lsrs	r1, r3
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	331b      	adds	r3, #27
 8000ad4:	409d      	lsls	r5, r3
 8000ad6:	002b      	movs	r3, r5
 8000ad8:	1e5d      	subs	r5, r3, #1
 8000ada:	41ab      	sbcs	r3, r5
 8000adc:	4319      	orrs	r1, r3
 8000ade:	000d      	movs	r5, r1
 8000ae0:	2805      	cmp	r0, #5
 8000ae2:	dd01      	ble.n	8000ae8 <__aeabi_i2f+0x50>
 8000ae4:	1f43      	subs	r3, r0, #5
 8000ae6:	409d      	lsls	r5, r3
 8000ae8:	002b      	movs	r3, r5
 8000aea:	490f      	ldr	r1, [pc, #60]	; (8000b28 <__aeabi_i2f+0x90>)
 8000aec:	400b      	ands	r3, r1
 8000aee:	076e      	lsls	r6, r5, #29
 8000af0:	d009      	beq.n	8000b06 <__aeabi_i2f+0x6e>
 8000af2:	260f      	movs	r6, #15
 8000af4:	4035      	ands	r5, r6
 8000af6:	2d04      	cmp	r5, #4
 8000af8:	d005      	beq.n	8000b06 <__aeabi_i2f+0x6e>
 8000afa:	3304      	adds	r3, #4
 8000afc:	015d      	lsls	r5, r3, #5
 8000afe:	d502      	bpl.n	8000b06 <__aeabi_i2f+0x6e>
 8000b00:	229f      	movs	r2, #159	; 0x9f
 8000b02:	400b      	ands	r3, r1
 8000b04:	1a12      	subs	r2, r2, r0
 8000b06:	019b      	lsls	r3, r3, #6
 8000b08:	0a58      	lsrs	r0, r3, #9
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	0240      	lsls	r0, r0, #9
 8000b0e:	05d2      	lsls	r2, r2, #23
 8000b10:	0a40      	lsrs	r0, r0, #9
 8000b12:	07e4      	lsls	r4, r4, #31
 8000b14:	4310      	orrs	r0, r2
 8000b16:	4320      	orrs	r0, r4
 8000b18:	bd70      	pop	{r4, r5, r6, pc}
 8000b1a:	2400      	movs	r4, #0
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2000      	movs	r0, #0
 8000b20:	e7f4      	b.n	8000b0c <__aeabi_i2f+0x74>
 8000b22:	0268      	lsls	r0, r5, #9
 8000b24:	0a40      	lsrs	r0, r0, #9
 8000b26:	e7f1      	b.n	8000b0c <__aeabi_i2f+0x74>
 8000b28:	fbffffff 	.word	0xfbffffff

08000b2c <__eqdf2>:
 8000b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b2e:	464f      	mov	r7, r9
 8000b30:	4646      	mov	r6, r8
 8000b32:	46d6      	mov	lr, sl
 8000b34:	4684      	mov	ip, r0
 8000b36:	b5c0      	push	{r6, r7, lr}
 8000b38:	4680      	mov	r8, r0
 8000b3a:	4e19      	ldr	r6, [pc, #100]	; (8000ba0 <__eqdf2+0x74>)
 8000b3c:	0318      	lsls	r0, r3, #12
 8000b3e:	030f      	lsls	r7, r1, #12
 8000b40:	004d      	lsls	r5, r1, #1
 8000b42:	0b00      	lsrs	r0, r0, #12
 8000b44:	005c      	lsls	r4, r3, #1
 8000b46:	4682      	mov	sl, r0
 8000b48:	0b3f      	lsrs	r7, r7, #12
 8000b4a:	0d6d      	lsrs	r5, r5, #21
 8000b4c:	0fc9      	lsrs	r1, r1, #31
 8000b4e:	4691      	mov	r9, r2
 8000b50:	0d64      	lsrs	r4, r4, #21
 8000b52:	0fdb      	lsrs	r3, r3, #31
 8000b54:	2001      	movs	r0, #1
 8000b56:	42b5      	cmp	r5, r6
 8000b58:	d00a      	beq.n	8000b70 <__eqdf2+0x44>
 8000b5a:	42b4      	cmp	r4, r6
 8000b5c:	d003      	beq.n	8000b66 <__eqdf2+0x3a>
 8000b5e:	42a5      	cmp	r5, r4
 8000b60:	d101      	bne.n	8000b66 <__eqdf2+0x3a>
 8000b62:	4557      	cmp	r7, sl
 8000b64:	d00c      	beq.n	8000b80 <__eqdf2+0x54>
 8000b66:	bc1c      	pop	{r2, r3, r4}
 8000b68:	4690      	mov	r8, r2
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	46a2      	mov	sl, r4
 8000b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b70:	4666      	mov	r6, ip
 8000b72:	433e      	orrs	r6, r7
 8000b74:	d1f7      	bne.n	8000b66 <__eqdf2+0x3a>
 8000b76:	42ac      	cmp	r4, r5
 8000b78:	d1f5      	bne.n	8000b66 <__eqdf2+0x3a>
 8000b7a:	4654      	mov	r4, sl
 8000b7c:	4314      	orrs	r4, r2
 8000b7e:	d1f2      	bne.n	8000b66 <__eqdf2+0x3a>
 8000b80:	2001      	movs	r0, #1
 8000b82:	45c8      	cmp	r8, r9
 8000b84:	d1ef      	bne.n	8000b66 <__eqdf2+0x3a>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d007      	beq.n	8000b9a <__eqdf2+0x6e>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d1eb      	bne.n	8000b66 <__eqdf2+0x3a>
 8000b8e:	4663      	mov	r3, ip
 8000b90:	431f      	orrs	r7, r3
 8000b92:	0038      	movs	r0, r7
 8000b94:	1e47      	subs	r7, r0, #1
 8000b96:	41b8      	sbcs	r0, r7
 8000b98:	e7e5      	b.n	8000b66 <__eqdf2+0x3a>
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	e7e3      	b.n	8000b66 <__eqdf2+0x3a>
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	000007ff 	.word	0x000007ff

08000ba4 <__gedf2>:
 8000ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba6:	464f      	mov	r7, r9
 8000ba8:	4646      	mov	r6, r8
 8000baa:	46d6      	mov	lr, sl
 8000bac:	004d      	lsls	r5, r1, #1
 8000bae:	b5c0      	push	{r6, r7, lr}
 8000bb0:	030e      	lsls	r6, r1, #12
 8000bb2:	0fc9      	lsrs	r1, r1, #31
 8000bb4:	468a      	mov	sl, r1
 8000bb6:	492c      	ldr	r1, [pc, #176]	; (8000c68 <__gedf2+0xc4>)
 8000bb8:	031f      	lsls	r7, r3, #12
 8000bba:	005c      	lsls	r4, r3, #1
 8000bbc:	4680      	mov	r8, r0
 8000bbe:	0b36      	lsrs	r6, r6, #12
 8000bc0:	0d6d      	lsrs	r5, r5, #21
 8000bc2:	4691      	mov	r9, r2
 8000bc4:	0b3f      	lsrs	r7, r7, #12
 8000bc6:	0d64      	lsrs	r4, r4, #21
 8000bc8:	0fdb      	lsrs	r3, r3, #31
 8000bca:	428d      	cmp	r5, r1
 8000bcc:	d01e      	beq.n	8000c0c <__gedf2+0x68>
 8000bce:	428c      	cmp	r4, r1
 8000bd0:	d016      	beq.n	8000c00 <__gedf2+0x5c>
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	d11e      	bne.n	8000c14 <__gedf2+0x70>
 8000bd6:	4330      	orrs	r0, r6
 8000bd8:	4684      	mov	ip, r0
 8000bda:	2c00      	cmp	r4, #0
 8000bdc:	d101      	bne.n	8000be2 <__gedf2+0x3e>
 8000bde:	433a      	orrs	r2, r7
 8000be0:	d023      	beq.n	8000c2a <__gedf2+0x86>
 8000be2:	4662      	mov	r2, ip
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d01a      	beq.n	8000c1e <__gedf2+0x7a>
 8000be8:	459a      	cmp	sl, r3
 8000bea:	d029      	beq.n	8000c40 <__gedf2+0x9c>
 8000bec:	4651      	mov	r1, sl
 8000bee:	2002      	movs	r0, #2
 8000bf0:	3901      	subs	r1, #1
 8000bf2:	4008      	ands	r0, r1
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	bc1c      	pop	{r2, r3, r4}
 8000bf8:	4690      	mov	r8, r2
 8000bfa:	4699      	mov	r9, r3
 8000bfc:	46a2      	mov	sl, r4
 8000bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c00:	0039      	movs	r1, r7
 8000c02:	4311      	orrs	r1, r2
 8000c04:	d0e5      	beq.n	8000bd2 <__gedf2+0x2e>
 8000c06:	2002      	movs	r0, #2
 8000c08:	4240      	negs	r0, r0
 8000c0a:	e7f4      	b.n	8000bf6 <__gedf2+0x52>
 8000c0c:	4330      	orrs	r0, r6
 8000c0e:	d1fa      	bne.n	8000c06 <__gedf2+0x62>
 8000c10:	42ac      	cmp	r4, r5
 8000c12:	d00f      	beq.n	8000c34 <__gedf2+0x90>
 8000c14:	2c00      	cmp	r4, #0
 8000c16:	d10f      	bne.n	8000c38 <__gedf2+0x94>
 8000c18:	433a      	orrs	r2, r7
 8000c1a:	d0e7      	beq.n	8000bec <__gedf2+0x48>
 8000c1c:	e00c      	b.n	8000c38 <__gedf2+0x94>
 8000c1e:	2201      	movs	r2, #1
 8000c20:	3b01      	subs	r3, #1
 8000c22:	4393      	bics	r3, r2
 8000c24:	0018      	movs	r0, r3
 8000c26:	3001      	adds	r0, #1
 8000c28:	e7e5      	b.n	8000bf6 <__gedf2+0x52>
 8000c2a:	4663      	mov	r3, ip
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0e1      	beq.n	8000bf6 <__gedf2+0x52>
 8000c32:	e7db      	b.n	8000bec <__gedf2+0x48>
 8000c34:	433a      	orrs	r2, r7
 8000c36:	d1e6      	bne.n	8000c06 <__gedf2+0x62>
 8000c38:	459a      	cmp	sl, r3
 8000c3a:	d1d7      	bne.n	8000bec <__gedf2+0x48>
 8000c3c:	42a5      	cmp	r5, r4
 8000c3e:	dcd5      	bgt.n	8000bec <__gedf2+0x48>
 8000c40:	42a5      	cmp	r5, r4
 8000c42:	db05      	blt.n	8000c50 <__gedf2+0xac>
 8000c44:	42be      	cmp	r6, r7
 8000c46:	d8d1      	bhi.n	8000bec <__gedf2+0x48>
 8000c48:	d008      	beq.n	8000c5c <__gedf2+0xb8>
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	42be      	cmp	r6, r7
 8000c4e:	d2d2      	bcs.n	8000bf6 <__gedf2+0x52>
 8000c50:	4650      	mov	r0, sl
 8000c52:	2301      	movs	r3, #1
 8000c54:	3801      	subs	r0, #1
 8000c56:	4398      	bics	r0, r3
 8000c58:	3001      	adds	r0, #1
 8000c5a:	e7cc      	b.n	8000bf6 <__gedf2+0x52>
 8000c5c:	45c8      	cmp	r8, r9
 8000c5e:	d8c5      	bhi.n	8000bec <__gedf2+0x48>
 8000c60:	2000      	movs	r0, #0
 8000c62:	45c8      	cmp	r8, r9
 8000c64:	d3f4      	bcc.n	8000c50 <__gedf2+0xac>
 8000c66:	e7c6      	b.n	8000bf6 <__gedf2+0x52>
 8000c68:	000007ff 	.word	0x000007ff

08000c6c <__ledf2>:
 8000c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6e:	464f      	mov	r7, r9
 8000c70:	4646      	mov	r6, r8
 8000c72:	46d6      	mov	lr, sl
 8000c74:	004d      	lsls	r5, r1, #1
 8000c76:	b5c0      	push	{r6, r7, lr}
 8000c78:	030e      	lsls	r6, r1, #12
 8000c7a:	0fc9      	lsrs	r1, r1, #31
 8000c7c:	468a      	mov	sl, r1
 8000c7e:	492e      	ldr	r1, [pc, #184]	; (8000d38 <__ledf2+0xcc>)
 8000c80:	031f      	lsls	r7, r3, #12
 8000c82:	005c      	lsls	r4, r3, #1
 8000c84:	4680      	mov	r8, r0
 8000c86:	0b36      	lsrs	r6, r6, #12
 8000c88:	0d6d      	lsrs	r5, r5, #21
 8000c8a:	4691      	mov	r9, r2
 8000c8c:	0b3f      	lsrs	r7, r7, #12
 8000c8e:	0d64      	lsrs	r4, r4, #21
 8000c90:	0fdb      	lsrs	r3, r3, #31
 8000c92:	428d      	cmp	r5, r1
 8000c94:	d018      	beq.n	8000cc8 <__ledf2+0x5c>
 8000c96:	428c      	cmp	r4, r1
 8000c98:	d011      	beq.n	8000cbe <__ledf2+0x52>
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d118      	bne.n	8000cd0 <__ledf2+0x64>
 8000c9e:	4330      	orrs	r0, r6
 8000ca0:	4684      	mov	ip, r0
 8000ca2:	2c00      	cmp	r4, #0
 8000ca4:	d11e      	bne.n	8000ce4 <__ledf2+0x78>
 8000ca6:	433a      	orrs	r2, r7
 8000ca8:	d11c      	bne.n	8000ce4 <__ledf2+0x78>
 8000caa:	4663      	mov	r3, ip
 8000cac:	2000      	movs	r0, #0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d030      	beq.n	8000d14 <__ledf2+0xa8>
 8000cb2:	4651      	mov	r1, sl
 8000cb4:	2002      	movs	r0, #2
 8000cb6:	3901      	subs	r1, #1
 8000cb8:	4008      	ands	r0, r1
 8000cba:	3801      	subs	r0, #1
 8000cbc:	e02a      	b.n	8000d14 <__ledf2+0xa8>
 8000cbe:	0039      	movs	r1, r7
 8000cc0:	4311      	orrs	r1, r2
 8000cc2:	d0ea      	beq.n	8000c9a <__ledf2+0x2e>
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	e025      	b.n	8000d14 <__ledf2+0xa8>
 8000cc8:	4330      	orrs	r0, r6
 8000cca:	d1fb      	bne.n	8000cc4 <__ledf2+0x58>
 8000ccc:	42ac      	cmp	r4, r5
 8000cce:	d026      	beq.n	8000d1e <__ledf2+0xb2>
 8000cd0:	2c00      	cmp	r4, #0
 8000cd2:	d126      	bne.n	8000d22 <__ledf2+0xb6>
 8000cd4:	433a      	orrs	r2, r7
 8000cd6:	d124      	bne.n	8000d22 <__ledf2+0xb6>
 8000cd8:	4651      	mov	r1, sl
 8000cda:	2002      	movs	r0, #2
 8000cdc:	3901      	subs	r1, #1
 8000cde:	4008      	ands	r0, r1
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e017      	b.n	8000d14 <__ledf2+0xa8>
 8000ce4:	4662      	mov	r2, ip
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d00f      	beq.n	8000d0a <__ledf2+0x9e>
 8000cea:	459a      	cmp	sl, r3
 8000cec:	d1e1      	bne.n	8000cb2 <__ledf2+0x46>
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	db05      	blt.n	8000cfe <__ledf2+0x92>
 8000cf2:	42be      	cmp	r6, r7
 8000cf4:	d8dd      	bhi.n	8000cb2 <__ledf2+0x46>
 8000cf6:	d019      	beq.n	8000d2c <__ledf2+0xc0>
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	42be      	cmp	r6, r7
 8000cfc:	d20a      	bcs.n	8000d14 <__ledf2+0xa8>
 8000cfe:	4650      	mov	r0, sl
 8000d00:	2301      	movs	r3, #1
 8000d02:	3801      	subs	r0, #1
 8000d04:	4398      	bics	r0, r3
 8000d06:	3001      	adds	r0, #1
 8000d08:	e004      	b.n	8000d14 <__ledf2+0xa8>
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	4393      	bics	r3, r2
 8000d10:	0018      	movs	r0, r3
 8000d12:	3001      	adds	r0, #1
 8000d14:	bc1c      	pop	{r2, r3, r4}
 8000d16:	4690      	mov	r8, r2
 8000d18:	4699      	mov	r9, r3
 8000d1a:	46a2      	mov	sl, r4
 8000d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d1e:	433a      	orrs	r2, r7
 8000d20:	d1d0      	bne.n	8000cc4 <__ledf2+0x58>
 8000d22:	459a      	cmp	sl, r3
 8000d24:	d1c5      	bne.n	8000cb2 <__ledf2+0x46>
 8000d26:	42a5      	cmp	r5, r4
 8000d28:	dcc3      	bgt.n	8000cb2 <__ledf2+0x46>
 8000d2a:	e7e0      	b.n	8000cee <__ledf2+0x82>
 8000d2c:	45c8      	cmp	r8, r9
 8000d2e:	d8c0      	bhi.n	8000cb2 <__ledf2+0x46>
 8000d30:	2000      	movs	r0, #0
 8000d32:	45c8      	cmp	r8, r9
 8000d34:	d3e3      	bcc.n	8000cfe <__ledf2+0x92>
 8000d36:	e7ed      	b.n	8000d14 <__ledf2+0xa8>
 8000d38:	000007ff 	.word	0x000007ff

08000d3c <__aeabi_d2iz>:
 8000d3c:	b530      	push	{r4, r5, lr}
 8000d3e:	4d14      	ldr	r5, [pc, #80]	; (8000d90 <__aeabi_d2iz+0x54>)
 8000d40:	030a      	lsls	r2, r1, #12
 8000d42:	004b      	lsls	r3, r1, #1
 8000d44:	0b12      	lsrs	r2, r2, #12
 8000d46:	0d5b      	lsrs	r3, r3, #21
 8000d48:	0fc9      	lsrs	r1, r1, #31
 8000d4a:	2400      	movs	r4, #0
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	dd11      	ble.n	8000d74 <__aeabi_d2iz+0x38>
 8000d50:	4c10      	ldr	r4, [pc, #64]	; (8000d94 <__aeabi_d2iz+0x58>)
 8000d52:	42a3      	cmp	r3, r4
 8000d54:	dc10      	bgt.n	8000d78 <__aeabi_d2iz+0x3c>
 8000d56:	2480      	movs	r4, #128	; 0x80
 8000d58:	0364      	lsls	r4, r4, #13
 8000d5a:	4322      	orrs	r2, r4
 8000d5c:	4c0e      	ldr	r4, [pc, #56]	; (8000d98 <__aeabi_d2iz+0x5c>)
 8000d5e:	1ae4      	subs	r4, r4, r3
 8000d60:	2c1f      	cmp	r4, #31
 8000d62:	dd0c      	ble.n	8000d7e <__aeabi_d2iz+0x42>
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <__aeabi_d2iz+0x60>)
 8000d66:	1ac3      	subs	r3, r0, r3
 8000d68:	40da      	lsrs	r2, r3
 8000d6a:	0013      	movs	r3, r2
 8000d6c:	425c      	negs	r4, r3
 8000d6e:	2900      	cmp	r1, #0
 8000d70:	d100      	bne.n	8000d74 <__aeabi_d2iz+0x38>
 8000d72:	001c      	movs	r4, r3
 8000d74:	0020      	movs	r0, r4
 8000d76:	bd30      	pop	{r4, r5, pc}
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <__aeabi_d2iz+0x64>)
 8000d7a:	18cc      	adds	r4, r1, r3
 8000d7c:	e7fa      	b.n	8000d74 <__aeabi_d2iz+0x38>
 8000d7e:	4d09      	ldr	r5, [pc, #36]	; (8000da4 <__aeabi_d2iz+0x68>)
 8000d80:	40e0      	lsrs	r0, r4
 8000d82:	46ac      	mov	ip, r5
 8000d84:	4463      	add	r3, ip
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	4303      	orrs	r3, r0
 8000d8c:	e7ee      	b.n	8000d6c <__aeabi_d2iz+0x30>
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	000003fe 	.word	0x000003fe
 8000d94:	0000041d 	.word	0x0000041d
 8000d98:	00000433 	.word	0x00000433
 8000d9c:	00000413 	.word	0x00000413
 8000da0:	7fffffff 	.word	0x7fffffff
 8000da4:	fffffbed 	.word	0xfffffbed

08000da8 <__aeabi_i2d>:
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	2800      	cmp	r0, #0
 8000dac:	d02d      	beq.n	8000e0a <__aeabi_i2d+0x62>
 8000dae:	17c3      	asrs	r3, r0, #31
 8000db0:	18c5      	adds	r5, r0, r3
 8000db2:	405d      	eors	r5, r3
 8000db4:	0fc4      	lsrs	r4, r0, #31
 8000db6:	0028      	movs	r0, r5
 8000db8:	f000 f830 	bl	8000e1c <__clzsi2>
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <__aeabi_i2d+0x6c>)
 8000dbe:	1a1b      	subs	r3, r3, r0
 8000dc0:	055b      	lsls	r3, r3, #21
 8000dc2:	0d5b      	lsrs	r3, r3, #21
 8000dc4:	280a      	cmp	r0, #10
 8000dc6:	dd15      	ble.n	8000df4 <__aeabi_i2d+0x4c>
 8000dc8:	380b      	subs	r0, #11
 8000dca:	4085      	lsls	r5, r0
 8000dcc:	2200      	movs	r2, #0
 8000dce:	032d      	lsls	r5, r5, #12
 8000dd0:	0b2d      	lsrs	r5, r5, #12
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	0010      	movs	r0, r2
 8000dd6:	032d      	lsls	r5, r5, #12
 8000dd8:	0d0a      	lsrs	r2, r1, #20
 8000dda:	0b2d      	lsrs	r5, r5, #12
 8000ddc:	0512      	lsls	r2, r2, #20
 8000dde:	432a      	orrs	r2, r5
 8000de0:	4d0d      	ldr	r5, [pc, #52]	; (8000e18 <__aeabi_i2d+0x70>)
 8000de2:	051b      	lsls	r3, r3, #20
 8000de4:	402a      	ands	r2, r5
 8000de6:	4313      	orrs	r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	07e4      	lsls	r4, r4, #31
 8000dec:	085b      	lsrs	r3, r3, #1
 8000dee:	4323      	orrs	r3, r4
 8000df0:	0019      	movs	r1, r3
 8000df2:	bd70      	pop	{r4, r5, r6, pc}
 8000df4:	0002      	movs	r2, r0
 8000df6:	0029      	movs	r1, r5
 8000df8:	3215      	adds	r2, #21
 8000dfa:	4091      	lsls	r1, r2
 8000dfc:	000a      	movs	r2, r1
 8000dfe:	210b      	movs	r1, #11
 8000e00:	1a08      	subs	r0, r1, r0
 8000e02:	40c5      	lsrs	r5, r0
 8000e04:	032d      	lsls	r5, r5, #12
 8000e06:	0b2d      	lsrs	r5, r5, #12
 8000e08:	e7e3      	b.n	8000dd2 <__aeabi_i2d+0x2a>
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	2500      	movs	r5, #0
 8000e10:	2200      	movs	r2, #0
 8000e12:	e7de      	b.n	8000dd2 <__aeabi_i2d+0x2a>
 8000e14:	0000041e 	.word	0x0000041e
 8000e18:	800fffff 	.word	0x800fffff

08000e1c <__clzsi2>:
 8000e1c:	211c      	movs	r1, #28
 8000e1e:	2301      	movs	r3, #1
 8000e20:	041b      	lsls	r3, r3, #16
 8000e22:	4298      	cmp	r0, r3
 8000e24:	d301      	bcc.n	8000e2a <__clzsi2+0xe>
 8000e26:	0c00      	lsrs	r0, r0, #16
 8000e28:	3910      	subs	r1, #16
 8000e2a:	0a1b      	lsrs	r3, r3, #8
 8000e2c:	4298      	cmp	r0, r3
 8000e2e:	d301      	bcc.n	8000e34 <__clzsi2+0x18>
 8000e30:	0a00      	lsrs	r0, r0, #8
 8000e32:	3908      	subs	r1, #8
 8000e34:	091b      	lsrs	r3, r3, #4
 8000e36:	4298      	cmp	r0, r3
 8000e38:	d301      	bcc.n	8000e3e <__clzsi2+0x22>
 8000e3a:	0900      	lsrs	r0, r0, #4
 8000e3c:	3904      	subs	r1, #4
 8000e3e:	a202      	add	r2, pc, #8	; (adr r2, 8000e48 <__clzsi2+0x2c>)
 8000e40:	5c10      	ldrb	r0, [r2, r0]
 8000e42:	1840      	adds	r0, r0, r1
 8000e44:	4770      	bx	lr
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	02020304 	.word	0x02020304
 8000e4c:	01010101 	.word	0x01010101
	...

08000e58 <__clzdi2>:
 8000e58:	b510      	push	{r4, lr}
 8000e5a:	2900      	cmp	r1, #0
 8000e5c:	d103      	bne.n	8000e66 <__clzdi2+0xe>
 8000e5e:	f7ff ffdd 	bl	8000e1c <__clzsi2>
 8000e62:	3020      	adds	r0, #32
 8000e64:	e002      	b.n	8000e6c <__clzdi2+0x14>
 8000e66:	1c08      	adds	r0, r1, #0
 8000e68:	f7ff ffd8 	bl	8000e1c <__clzsi2>
 8000e6c:	bd10      	pop	{r4, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)

08000e70 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_Init+0x3c>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Init+0x3c>)
 8000e82:	2140      	movs	r1, #64	; 0x40
 8000e84:	430a      	orrs	r2, r1
 8000e86:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f000 f811 	bl	8000eb0 <HAL_InitTick>
 8000e8e:	1e03      	subs	r3, r0, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]
 8000e98:	e001      	b.n	8000e9e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e9a:	f005 fc39 	bl	8006710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	781b      	ldrb	r3, [r3, #0]
}
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b002      	add	sp, #8
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb8:	230f      	movs	r3, #15
 8000eba:	18fb      	adds	r3, r7, r3
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_InitTick+0x50>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	23fa      	movs	r3, #250	; 0xfa
 8000ec6:	0099      	lsls	r1, r3, #2
 8000ec8:	0010      	movs	r0, r2
 8000eca:	f7ff f91d 	bl	8000108 <__udivsi3>
 8000ece:	0003      	movs	r3, r0
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f000 fcac 	bl	800182e <HAL_SYSTICK_Config>
 8000ed6:	1e03      	subs	r3, r0, #0
 8000ed8:	d004      	beq.n	8000ee4 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000eda:	230f      	movs	r3, #15
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	e006      	b.n	8000ef2 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	425b      	negs	r3, r3
 8000eea:	2200      	movs	r2, #0
 8000eec:	0018      	movs	r0, r3
 8000eee:	f000 fc79 	bl	80017e4 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000ef2:	230f      	movs	r3, #15
 8000ef4:	18fb      	adds	r3, r7, r3
 8000ef6:	781b      	ldrb	r3, [r3, #0]
}
 8000ef8:	0018      	movs	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b004      	add	sp, #16
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000000 	.word	0x20000000

08000f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  uwTick++;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_IncTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	4b02      	ldr	r3, [pc, #8]	; (8000f18 <HAL_IncTick+0x14>)
 8000f10:	601a      	str	r2, [r3, #0]
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200000d4 	.word	0x200000d4

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b02      	ldr	r3, [pc, #8]	; (8000f2c <HAL_GetTick+0x10>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	0018      	movs	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	200000d4 	.word	0x200000d4

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff fff0 	bl	8000f1c <HAL_GetTick>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3301      	adds	r3, #1
 8000f48:	d002      	beq.n	8000f50 <HAL_Delay+0x20>
  {
    wait++;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	f7ff ffe3 	bl	8000f1c <HAL_GetTick>
 8000f56:	0002      	movs	r2, r0
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d8f7      	bhi.n	8000f52 <HAL_Delay+0x22>
  {
  }
}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b004      	add	sp, #16
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e159      	b.n	8001232 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10a      	bne.n	8000f9c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2250      	movs	r2, #80	; 0x50
 8000f90:	2100      	movs	r1, #0
 8000f92:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	0018      	movs	r0, r3
 8000f98:	f005 fbce 	bl	8006738 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa0:	2210      	movs	r2, #16
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2b10      	cmp	r3, #16
 8000fa6:	d005      	beq.n	8000fb4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	2204      	movs	r2, #4
 8000fb0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000fb2:	d00b      	beq.n	8000fcc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb8:	2210      	movs	r2, #16
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2250      	movs	r2, #80	; 0x50
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e132      	b.n	8001232 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd0:	4a9a      	ldr	r2, [pc, #616]	; (800123c <HAL_ADC_Init+0x2d0>)
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d108      	bne.n	8000ffc <HAL_ADC_Init+0x90>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d101      	bne.n	8000ffc <HAL_ADC_Init+0x90>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <HAL_ADC_Init+0x92>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d149      	bne.n	8001096 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	23c0      	movs	r3, #192	; 0xc0
 8001008:	061b      	lsls	r3, r3, #24
 800100a:	429a      	cmp	r2, r3
 800100c:	d00b      	beq.n	8001026 <HAL_ADC_Init+0xba>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	05db      	lsls	r3, r3, #23
 8001016:	429a      	cmp	r2, r3
 8001018:	d005      	beq.n	8001026 <HAL_ADC_Init+0xba>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	061b      	lsls	r3, r3, #24
 8001022:	429a      	cmp	r2, r3
 8001024:	d111      	bne.n	800104a <HAL_ADC_Init+0xde>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	691a      	ldr	r2, [r3, #16]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0092      	lsls	r2, r2, #2
 8001032:	0892      	lsrs	r2, r2, #2
 8001034:	611a      	str	r2, [r3, #16]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6919      	ldr	r1, [r3, #16]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	e014      	b.n	8001074 <HAL_ADC_Init+0x108>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	691a      	ldr	r2, [r3, #16]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	0892      	lsrs	r2, r2, #2
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	4b79      	ldr	r3, [pc, #484]	; (8001240 <HAL_ADC_Init+0x2d4>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4b78      	ldr	r3, [pc, #480]	; (8001240 <HAL_ADC_Init+0x2d4>)
 8001060:	4978      	ldr	r1, [pc, #480]	; (8001244 <HAL_ADC_Init+0x2d8>)
 8001062:	400a      	ands	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	4b76      	ldr	r3, [pc, #472]	; (8001240 <HAL_ADC_Init+0x2d4>)
 8001068:	6819      	ldr	r1, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	4b74      	ldr	r3, [pc, #464]	; (8001240 <HAL_ADC_Init+0x2d4>)
 8001070:	430a      	orrs	r2, r1
 8001072:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2118      	movs	r1, #24
 8001080:	438a      	bics	r2, r1
 8001082:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68d9      	ldr	r1, [r3, #12]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	430a      	orrs	r2, r1
 8001094:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001096:	4b6a      	ldr	r3, [pc, #424]	; (8001240 <HAL_ADC_Init+0x2d4>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b69      	ldr	r3, [pc, #420]	; (8001240 <HAL_ADC_Init+0x2d4>)
 800109c:	496a      	ldr	r1, [pc, #424]	; (8001248 <HAL_ADC_Init+0x2dc>)
 800109e:	400a      	ands	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80010a2:	4b67      	ldr	r3, [pc, #412]	; (8001240 <HAL_ADC_Init+0x2d4>)
 80010a4:	6819      	ldr	r1, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010aa:	065a      	lsls	r2, r3, #25
 80010ac:	4b64      	ldr	r3, [pc, #400]	; (8001240 <HAL_ADC_Init+0x2d4>)
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	055b      	lsls	r3, r3, #21
 80010bc:	4013      	ands	r3, r2
 80010be:	d108      	bne.n	80010d2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2180      	movs	r1, #128	; 0x80
 80010cc:	0549      	lsls	r1, r1, #21
 80010ce:	430a      	orrs	r2, r1
 80010d0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	495b      	ldr	r1, [pc, #364]	; (800124c <HAL_ADC_Init+0x2e0>)
 80010de:	400a      	ands	r2, r1
 80010e0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68d9      	ldr	r1, [r3, #12]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d101      	bne.n	80010f8 <HAL_ADC_Init+0x18c>
 80010f4:	2304      	movs	r3, #4
 80010f6:	e000      	b.n	80010fa <HAL_ADC_Init+0x18e>
 80010f8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80010fa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2020      	movs	r0, #32
 8001100:	5c1b      	ldrb	r3, [r3, r0]
 8001102:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001104:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	202c      	movs	r0, #44	; 0x2c
 800110a:	5c1b      	ldrb	r3, [r3, r0]
 800110c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800110e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001114:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800111c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001124:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001132:	23c2      	movs	r3, #194	; 0xc2
 8001134:	33ff      	adds	r3, #255	; 0xff
 8001136:	429a      	cmp	r2, r3
 8001138:	d00b      	beq.n	8001152 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68d9      	ldr	r1, [r3, #12]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	430a      	orrs	r2, r1
 8001150:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2221      	movs	r2, #33	; 0x21
 8001156:	5c9b      	ldrb	r3, [r3, r2]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d11a      	bne.n	8001192 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2220      	movs	r2, #32
 8001160:	5c9b      	ldrb	r3, [r3, r2]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d109      	bne.n	800117a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2180      	movs	r1, #128	; 0x80
 8001172:	0249      	lsls	r1, r1, #9
 8001174:	430a      	orrs	r2, r1
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	e00b      	b.n	8001192 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117e:	2220      	movs	r2, #32
 8001180:	431a      	orrs	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	2201      	movs	r2, #1
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001196:	2b01      	cmp	r3, #1
 8001198:	d11f      	bne.n	80011da <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	492a      	ldr	r1, [pc, #168]	; (8001250 <HAL_ADC_Init+0x2e4>)
 80011a6:	400a      	ands	r2, r1
 80011a8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6919      	ldr	r1, [r3, #16]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80011b8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80011be:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	691a      	ldr	r2, [r3, #16]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2101      	movs	r1, #1
 80011d4:	430a      	orrs	r2, r1
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	e00e      	b.n	80011f8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	2201      	movs	r2, #1
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d107      	bne.n	80011f8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2101      	movs	r1, #1
 80011f4:	438a      	bics	r2, r1
 80011f6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2107      	movs	r1, #7
 8001204:	438a      	bics	r2, r1
 8001206:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6959      	ldr	r1, [r3, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	430a      	orrs	r2, r1
 8001218:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001224:	2203      	movs	r2, #3
 8001226:	4393      	bics	r3, r2
 8001228:	2201      	movs	r2, #1
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	fffffefd 	.word	0xfffffefd
 8001240:	40012708 	.word	0x40012708
 8001244:	ffc3ffff 	.word	0xffc3ffff
 8001248:	fdffffff 	.word	0xfdffffff
 800124c:	fffe0219 	.word	0xfffe0219
 8001250:	fffffc03 	.word	0xfffffc03

08001254 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2204      	movs	r2, #4
 8001264:	4013      	ands	r3, r2
 8001266:	2b04      	cmp	r3, #4
 8001268:	d106      	bne.n	8001278 <HAL_ADC_IRQHandler+0x24>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2204      	movs	r2, #4
 8001272:	4013      	ands	r3, r2
 8001274:	2b04      	cmp	r3, #4
 8001276:	d00d      	beq.n	8001294 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2208      	movs	r2, #8
 8001280:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001282:	2b08      	cmp	r3, #8
 8001284:	d154      	bne.n	8001330 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2208      	movs	r2, #8
 800128e:	4013      	ands	r3, r2
 8001290:	2b08      	cmp	r3, #8
 8001292:	d14d      	bne.n	8001330 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001298:	2210      	movs	r2, #16
 800129a:	4013      	ands	r3, r2
 800129c:	d106      	bne.n	80012ac <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a2:	2280      	movs	r2, #128	; 0x80
 80012a4:	0092      	lsls	r2, r2, #2
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	23c0      	movs	r3, #192	; 0xc0
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	4013      	ands	r3, r2
 80012b8:	d12e      	bne.n	8001318 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2220      	movs	r2, #32
 80012be:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d129      	bne.n	8001318 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2208      	movs	r2, #8
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d122      	bne.n	8001318 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2204      	movs	r2, #4
 80012da:	4013      	ands	r3, r2
 80012dc:	d110      	bne.n	8001300 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	210c      	movs	r1, #12
 80012ea:	438a      	bics	r2, r1
 80012ec:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f2:	4a35      	ldr	r2, [pc, #212]	; (80013c8 <HAL_ADC_IRQHandler+0x174>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	2201      	movs	r2, #1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	655a      	str	r2, [r3, #84]	; 0x54
 80012fe:	e00b      	b.n	8001318 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001304:	2220      	movs	r2, #32
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001310:	2201      	movs	r2, #1
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	0018      	movs	r0, r3
 800131c:	f000 f856 	bl	80013cc <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d003      	beq.n	8001330 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	220c      	movs	r2, #12
 800132e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	4013      	ands	r3, r2
 800133a:	2b80      	cmp	r3, #128	; 0x80
 800133c:	d115      	bne.n	800136a <HAL_ADC_IRQHandler+0x116>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2280      	movs	r2, #128	; 0x80
 8001346:	4013      	ands	r3, r2
 8001348:	2b80      	cmp	r3, #128	; 0x80
 800134a:	d10e      	bne.n	800136a <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	0252      	lsls	r2, r2, #9
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	0018      	movs	r0, r3
 800135e:	f000 f83d 	bl	80013dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2210      	movs	r2, #16
 8001372:	4013      	ands	r3, r2
 8001374:	2b10      	cmp	r3, #16
 8001376:	d123      	bne.n	80013c0 <HAL_ADC_IRQHandler+0x16c>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2210      	movs	r2, #16
 8001380:	4013      	ands	r3, r2
 8001382:	2b10      	cmp	r3, #16
 8001384:	d11c      	bne.n	80013c0 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2201      	movs	r2, #1
 8001396:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001398:	2b01      	cmp	r3, #1
 800139a:	d10d      	bne.n	80013b8 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a0:	2202      	movs	r2, #2
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2210      	movs	r2, #16
 80013ae:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	0018      	movs	r0, r3
 80013b4:	f004 fe06 	bl	8005fc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2210      	movs	r2, #16
 80013be:	601a      	str	r2, [r3, #0]
  }
  
}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b002      	add	sp, #8
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	fffffefe 	.word	0xfffffefe

080013cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b002      	add	sp, #8
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b002      	add	sp, #8
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2250      	movs	r2, #80	; 0x50
 80013fa:	5c9b      	ldrb	r3, [r3, r2]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x18>
 8001400:	2302      	movs	r3, #2
 8001402:	e085      	b.n	8001510 <HAL_ADC_ConfigChannel+0x124>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2250      	movs	r2, #80	; 0x50
 8001408:	2101      	movs	r1, #1
 800140a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2204      	movs	r2, #4
 8001414:	4013      	ands	r3, r2
 8001416:	d00b      	beq.n	8001430 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141c:	2220      	movs	r2, #32
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2250      	movs	r2, #80	; 0x50
 8001428:	2100      	movs	r1, #0
 800142a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e06f      	b.n	8001510 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4a38      	ldr	r2, [pc, #224]	; (8001518 <HAL_ADC_ConfigChannel+0x12c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d035      	beq.n	80014a6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	035b      	lsls	r3, r3, #13
 8001446:	0b5a      	lsrs	r2, r3, #13
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	02db      	lsls	r3, r3, #11
 8001458:	4013      	ands	r3, r2
 800145a:	d009      	beq.n	8001470 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 800145c:	4b2f      	ldr	r3, [pc, #188]	; (800151c <HAL_ADC_ConfigChannel+0x130>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b2e      	ldr	r3, [pc, #184]	; (800151c <HAL_ADC_ConfigChannel+0x130>)
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	0409      	lsls	r1, r1, #16
 8001466:	430a      	orrs	r2, r1
 8001468:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800146a:	200a      	movs	r0, #10
 800146c:	f000 f85e 	bl	800152c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	029b      	lsls	r3, r3, #10
 8001478:	4013      	ands	r3, r2
 800147a:	d006      	beq.n	800148a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 800147c:	4b27      	ldr	r3, [pc, #156]	; (800151c <HAL_ADC_ConfigChannel+0x130>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b26      	ldr	r3, [pc, #152]	; (800151c <HAL_ADC_ConfigChannel+0x130>)
 8001482:	2180      	movs	r1, #128	; 0x80
 8001484:	03c9      	lsls	r1, r1, #15
 8001486:	430a      	orrs	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	4013      	ands	r3, r2
 8001494:	d037      	beq.n	8001506 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <HAL_ADC_ConfigChannel+0x130>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_ADC_ConfigChannel+0x130>)
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	0449      	lsls	r1, r1, #17
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	e02f      	b.n	8001506 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	035b      	lsls	r3, r3, #13
 80014b2:	0b5b      	lsrs	r3, r3, #13
 80014b4:	43d9      	mvns	r1, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	400a      	ands	r2, r1
 80014bc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	2380      	movs	r3, #128	; 0x80
 80014c4:	02db      	lsls	r3, r3, #11
 80014c6:	4013      	ands	r3, r2
 80014c8:	d005      	beq.n	80014d6 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <HAL_ADC_ConfigChannel+0x130>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_ADC_ConfigChannel+0x130>)
 80014d0:	4913      	ldr	r1, [pc, #76]	; (8001520 <HAL_ADC_ConfigChannel+0x134>)
 80014d2:	400a      	ands	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	029b      	lsls	r3, r3, #10
 80014de:	4013      	ands	r3, r2
 80014e0:	d005      	beq.n	80014ee <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <HAL_ADC_ConfigChannel+0x130>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <HAL_ADC_ConfigChannel+0x130>)
 80014e8:	490e      	ldr	r1, [pc, #56]	; (8001524 <HAL_ADC_ConfigChannel+0x138>)
 80014ea:	400a      	ands	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	025b      	lsls	r3, r3, #9
 80014f6:	4013      	ands	r3, r2
 80014f8:	d005      	beq.n	8001506 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_ADC_ConfigChannel+0x130>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_ADC_ConfigChannel+0x130>)
 8001500:	4909      	ldr	r1, [pc, #36]	; (8001528 <HAL_ADC_ConfigChannel+0x13c>)
 8001502:	400a      	ands	r2, r1
 8001504:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2250      	movs	r2, #80	; 0x50
 800150a:	2100      	movs	r1, #0
 800150c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	0018      	movs	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	b002      	add	sp, #8
 8001516:	bd80      	pop	{r7, pc}
 8001518:	00001001 	.word	0x00001001
 800151c:	40012708 	.word	0x40012708
 8001520:	ff7fffff 	.word	0xff7fffff
 8001524:	ffbfffff 	.word	0xffbfffff
 8001528:	feffffff 	.word	0xfeffffff

0800152c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <ADC_DelayMicroSecond+0x34>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	490a      	ldr	r1, [pc, #40]	; (8001564 <ADC_DelayMicroSecond+0x38>)
 800153a:	0018      	movs	r0, r3
 800153c:	f7fe fde4 	bl	8000108 <__udivsi3>
 8001540:	0003      	movs	r3, r0
 8001542:	001a      	movs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4353      	muls	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800154a:	e002      	b.n	8001552 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	3b01      	subs	r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f9      	bne.n	800154c <ADC_DelayMicroSecond+0x20>
  } 
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b004      	add	sp, #16
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000000 	.word	0x20000000
 8001564:	000f4240 	.word	0x000f4240

08001568 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001572:	2317      	movs	r3, #23
 8001574:	18fb      	adds	r3, r7, r3
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2250      	movs	r2, #80	; 0x50
 8001586:	5c9b      	ldrb	r3, [r3, r2]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_ADCEx_Calibration_Start+0x28>
 800158c:	2302      	movs	r3, #2
 800158e:	e07a      	b.n	8001686 <HAL_ADCEx_Calibration_Start+0x11e>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2250      	movs	r2, #80	; 0x50
 8001594:	2101      	movs	r1, #1
 8001596:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2203      	movs	r2, #3
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d108      	bne.n	80015b8 <HAL_ADCEx_Calibration_Start+0x50>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2201      	movs	r2, #1
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_ADCEx_Calibration_Start+0x50>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <HAL_ADCEx_Calibration_Start+0x52>
 80015b8:	2300      	movs	r3, #0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d152      	bne.n	8001664 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c2:	4a33      	ldr	r2, [pc, #204]	; (8001690 <HAL_ADCEx_Calibration_Start+0x128>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	2202      	movs	r2, #2
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2203      	movs	r2, #3
 80015d6:	4013      	ands	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2103      	movs	r1, #3
 80015e6:	438a      	bics	r2, r1
 80015e8:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	0609      	lsls	r1, r1, #24
 80015f8:	430a      	orrs	r2, r1
 80015fa:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80015fc:	f7ff fc8e 	bl	8000f1c <HAL_GetTick>
 8001600:	0003      	movs	r3, r0
 8001602:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001604:	e014      	b.n	8001630 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001606:	f7ff fc89 	bl	8000f1c <HAL_GetTick>
 800160a:	0002      	movs	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b0a      	cmp	r3, #10
 8001612:	d90d      	bls.n	8001630 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001618:	2212      	movs	r2, #18
 800161a:	4393      	bics	r3, r2
 800161c:	2210      	movs	r2, #16
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2250      	movs	r2, #80	; 0x50
 8001628:	2100      	movs	r1, #0
 800162a:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e02a      	b.n	8001686 <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	0fdb      	lsrs	r3, r3, #31
 8001638:	07da      	lsls	r2, r3, #31
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	429a      	cmp	r2, r3
 8001640:	d0e1      	beq.n	8001606 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68d9      	ldr	r1, [r3, #12]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	430a      	orrs	r2, r1
 8001650:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001656:	2203      	movs	r2, #3
 8001658:	4393      	bics	r3, r2
 800165a:	2201      	movs	r2, #1
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	655a      	str	r2, [r3, #84]	; 0x54
 8001662:	e009      	b.n	8001678 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001668:	2220      	movs	r2, #32
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8001670:	2317      	movs	r3, #23
 8001672:	18fb      	adds	r3, r7, r3
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2250      	movs	r2, #80	; 0x50
 800167c:	2100      	movs	r1, #0
 800167e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001680:	2317      	movs	r3, #23
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	781b      	ldrb	r3, [r3, #0]
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b006      	add	sp, #24
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	fffffefd 	.word	0xfffffefd

08001694 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	0002      	movs	r2, r0
 800169c:	1dfb      	adds	r3, r7, #7
 800169e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	001a      	movs	r2, r3
 80016a6:	231f      	movs	r3, #31
 80016a8:	401a      	ands	r2, r3
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <NVIC_EnableIRQ+0x28>)
 80016ac:	2101      	movs	r1, #1
 80016ae:	4091      	lsls	r1, r2
 80016b0:	000a      	movs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]
}
 80016b4:	46c0      	nop			; (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b002      	add	sp, #8
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	0002      	movs	r2, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80016ce:	1dfb      	adds	r3, r7, #7
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b7f      	cmp	r3, #127	; 0x7f
 80016d4:	d932      	bls.n	800173c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016d6:	4a2f      	ldr	r2, [pc, #188]	; (8001794 <NVIC_SetPriority+0xd4>)
 80016d8:	1dfb      	adds	r3, r7, #7
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	0019      	movs	r1, r3
 80016de:	230f      	movs	r3, #15
 80016e0:	400b      	ands	r3, r1
 80016e2:	3b08      	subs	r3, #8
 80016e4:	089b      	lsrs	r3, r3, #2
 80016e6:	3306      	adds	r3, #6
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	18d3      	adds	r3, r2, r3
 80016ec:	3304      	adds	r3, #4
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	1dfa      	adds	r2, r7, #7
 80016f2:	7812      	ldrb	r2, [r2, #0]
 80016f4:	0011      	movs	r1, r2
 80016f6:	2203      	movs	r2, #3
 80016f8:	400a      	ands	r2, r1
 80016fa:	00d2      	lsls	r2, r2, #3
 80016fc:	21ff      	movs	r1, #255	; 0xff
 80016fe:	4091      	lsls	r1, r2
 8001700:	000a      	movs	r2, r1
 8001702:	43d2      	mvns	r2, r2
 8001704:	401a      	ands	r2, r3
 8001706:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	019b      	lsls	r3, r3, #6
 800170c:	22ff      	movs	r2, #255	; 0xff
 800170e:	401a      	ands	r2, r3
 8001710:	1dfb      	adds	r3, r7, #7
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	0018      	movs	r0, r3
 8001716:	2303      	movs	r3, #3
 8001718:	4003      	ands	r3, r0
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <NVIC_SetPriority+0xd4>)
 8001720:	1dfb      	adds	r3, r7, #7
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	001c      	movs	r4, r3
 8001726:	230f      	movs	r3, #15
 8001728:	4023      	ands	r3, r4
 800172a:	3b08      	subs	r3, #8
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	430a      	orrs	r2, r1
 8001730:	3306      	adds	r3, #6
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	18c3      	adds	r3, r0, r3
 8001736:	3304      	adds	r3, #4
 8001738:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800173a:	e027      	b.n	800178c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800173c:	4a16      	ldr	r2, [pc, #88]	; (8001798 <NVIC_SetPriority+0xd8>)
 800173e:	1dfb      	adds	r3, r7, #7
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b25b      	sxtb	r3, r3
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	33c0      	adds	r3, #192	; 0xc0
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	589b      	ldr	r3, [r3, r2]
 800174c:	1dfa      	adds	r2, r7, #7
 800174e:	7812      	ldrb	r2, [r2, #0]
 8001750:	0011      	movs	r1, r2
 8001752:	2203      	movs	r2, #3
 8001754:	400a      	ands	r2, r1
 8001756:	00d2      	lsls	r2, r2, #3
 8001758:	21ff      	movs	r1, #255	; 0xff
 800175a:	4091      	lsls	r1, r2
 800175c:	000a      	movs	r2, r1
 800175e:	43d2      	mvns	r2, r2
 8001760:	401a      	ands	r2, r3
 8001762:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	019b      	lsls	r3, r3, #6
 8001768:	22ff      	movs	r2, #255	; 0xff
 800176a:	401a      	ands	r2, r3
 800176c:	1dfb      	adds	r3, r7, #7
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	0018      	movs	r0, r3
 8001772:	2303      	movs	r3, #3
 8001774:	4003      	ands	r3, r0
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800177a:	4807      	ldr	r0, [pc, #28]	; (8001798 <NVIC_SetPriority+0xd8>)
 800177c:	1dfb      	adds	r3, r7, #7
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b25b      	sxtb	r3, r3
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	430a      	orrs	r2, r1
 8001786:	33c0      	adds	r3, #192	; 0xc0
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	501a      	str	r2, [r3, r0]
}
 800178c:	46c0      	nop			; (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	b003      	add	sp, #12
 8001792:	bd90      	pop	{r4, r7, pc}
 8001794:	e000ed00 	.word	0xe000ed00
 8001798:	e000e100 	.word	0xe000e100

0800179c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <SysTick_Config+0x40>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ae:	2301      	movs	r3, #1
 80017b0:	e010      	b.n	80017d4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <SysTick_Config+0x44>)
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	3a01      	subs	r2, #1
 80017b8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ba:	2301      	movs	r3, #1
 80017bc:	425b      	negs	r3, r3
 80017be:	2103      	movs	r1, #3
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff ff7d 	bl	80016c0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <SysTick_Config+0x44>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SysTick_Config+0x44>)
 80017ce:	2207      	movs	r2, #7
 80017d0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b002      	add	sp, #8
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	00ffffff 	.word	0x00ffffff
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	210f      	movs	r1, #15
 80017f0:	187b      	adds	r3, r7, r1
 80017f2:	1c02      	adds	r2, r0, #0
 80017f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b25b      	sxtb	r3, r3
 80017fe:	0011      	movs	r1, r2
 8001800:	0018      	movs	r0, r3
 8001802:	f7ff ff5d 	bl	80016c0 <NVIC_SetPriority>
}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	46bd      	mov	sp, r7
 800180a:	b004      	add	sp, #16
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	0002      	movs	r2, r0
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181a:	1dfb      	adds	r3, r7, #7
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b25b      	sxtb	r3, r3
 8001820:	0018      	movs	r0, r3
 8001822:	f7ff ff37 	bl	8001694 <NVIC_EnableIRQ>
}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	46bd      	mov	sp, r7
 800182a:	b002      	add	sp, #8
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	0018      	movs	r0, r3
 800183a:	f7ff ffaf 	bl	800179c <SysTick_Config>
 800183e:	0003      	movs	r3, r0
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b002      	add	sp, #8
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800185e:	e155      	b.n	8001b0c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2101      	movs	r1, #1
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	4091      	lsls	r1, r2
 800186a:	000a      	movs	r2, r1
 800186c:	4013      	ands	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d100      	bne.n	8001878 <HAL_GPIO_Init+0x30>
 8001876:	e146      	b.n	8001b06 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x40>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b12      	cmp	r3, #18
 8001886:	d123      	bne.n	80018d0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	08da      	lsrs	r2, r3, #3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3208      	adds	r2, #8
 8001890:	0092      	lsls	r2, r2, #2
 8001892:	58d3      	ldr	r3, [r2, r3]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2207      	movs	r2, #7
 800189a:	4013      	ands	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	220f      	movs	r2, #15
 80018a0:	409a      	lsls	r2, r3
 80018a2:	0013      	movs	r3, r2
 80018a4:	43da      	mvns	r2, r3
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2107      	movs	r1, #7
 80018b4:	400b      	ands	r3, r1
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	409a      	lsls	r2, r3
 80018ba:	0013      	movs	r3, r2
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	08da      	lsrs	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3208      	adds	r2, #8
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	6939      	ldr	r1, [r7, #16]
 80018ce:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d00b      	beq.n	80018f0 <HAL_GPIO_Init+0xa8>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d007      	beq.n	80018f0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e4:	2b11      	cmp	r3, #17
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b12      	cmp	r3, #18
 80018ee:	d130      	bne.n	8001952 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	409a      	lsls	r2, r3
 80018fe:	0013      	movs	r3, r2
 8001900:	43da      	mvns	r2, r3
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	409a      	lsls	r2, r3
 8001912:	0013      	movs	r3, r2
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001926:	2201      	movs	r2, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
 800192c:	0013      	movs	r3, r2
 800192e:	43da      	mvns	r2, r3
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	2201      	movs	r2, #1
 800193e:	401a      	ands	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
 8001944:	0013      	movs	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	409a      	lsls	r2, r3
 8001960:	0013      	movs	r3, r2
 8001962:	43da      	mvns	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2203      	movs	r2, #3
 8001970:	401a      	ands	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	409a      	lsls	r2, r3
 8001978:	0013      	movs	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	409a      	lsls	r2, r3
 8001994:	0013      	movs	r3, r2
 8001996:	43da      	mvns	r2, r3
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	409a      	lsls	r2, r3
 80019a8:	0013      	movs	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	055b      	lsls	r3, r3, #21
 80019be:	4013      	ands	r3, r2
 80019c0:	d100      	bne.n	80019c4 <HAL_GPIO_Init+0x17c>
 80019c2:	e0a0      	b.n	8001b06 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c4:	4b57      	ldr	r3, [pc, #348]	; (8001b24 <HAL_GPIO_Init+0x2dc>)
 80019c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c8:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <HAL_GPIO_Init+0x2dc>)
 80019ca:	2101      	movs	r1, #1
 80019cc:	430a      	orrs	r2, r1
 80019ce:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80019d0:	4a55      	ldr	r2, [pc, #340]	; (8001b28 <HAL_GPIO_Init+0x2e0>)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	589b      	ldr	r3, [r3, r2]
 80019dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2203      	movs	r2, #3
 80019e2:	4013      	ands	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	409a      	lsls	r2, r3
 80019ea:	0013      	movs	r3, r2
 80019ec:	43da      	mvns	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	23a0      	movs	r3, #160	; 0xa0
 80019f8:	05db      	lsls	r3, r3, #23
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d01f      	beq.n	8001a3e <HAL_GPIO_Init+0x1f6>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4a      	ldr	r2, [pc, #296]	; (8001b2c <HAL_GPIO_Init+0x2e4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d019      	beq.n	8001a3a <HAL_GPIO_Init+0x1f2>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a49      	ldr	r2, [pc, #292]	; (8001b30 <HAL_GPIO_Init+0x2e8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d013      	beq.n	8001a36 <HAL_GPIO_Init+0x1ee>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a48      	ldr	r2, [pc, #288]	; (8001b34 <HAL_GPIO_Init+0x2ec>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00d      	beq.n	8001a32 <HAL_GPIO_Init+0x1ea>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a47      	ldr	r2, [pc, #284]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d007      	beq.n	8001a2e <HAL_GPIO_Init+0x1e6>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a46      	ldr	r2, [pc, #280]	; (8001b3c <HAL_GPIO_Init+0x2f4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_GPIO_Init+0x1e2>
 8001a26:	2305      	movs	r3, #5
 8001a28:	e00a      	b.n	8001a40 <HAL_GPIO_Init+0x1f8>
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	e008      	b.n	8001a40 <HAL_GPIO_Init+0x1f8>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x1f8>
 8001a32:	2303      	movs	r3, #3
 8001a34:	e004      	b.n	8001a40 <HAL_GPIO_Init+0x1f8>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e002      	b.n	8001a40 <HAL_GPIO_Init+0x1f8>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x1f8>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	2103      	movs	r1, #3
 8001a44:	400a      	ands	r2, r1
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	4093      	lsls	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a50:	4935      	ldr	r1, [pc, #212]	; (8001b28 <HAL_GPIO_Init+0x2e0>)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a5e:	4b38      	ldr	r3, [pc, #224]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43da      	mvns	r2, r3
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	025b      	lsls	r3, r3, #9
 8001a76:	4013      	ands	r3, r2
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a88:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43da      	mvns	r2, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	029b      	lsls	r3, r3, #10
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001aac:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43da      	mvns	r2, r3
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	035b      	lsls	r3, r3, #13
 8001aca:	4013      	ands	r3, r2
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43da      	mvns	r2, r3
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	039b      	lsls	r3, r3, #14
 8001af4:	4013      	ands	r3, r2
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_GPIO_Init+0x2f8>)
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	40da      	lsrs	r2, r3
 8001b14:	1e13      	subs	r3, r2, #0
 8001b16:	d000      	beq.n	8001b1a <HAL_GPIO_Init+0x2d2>
 8001b18:	e6a2      	b.n	8001860 <HAL_GPIO_Init+0x18>
  }
}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b006      	add	sp, #24
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	50000400 	.word	0x50000400
 8001b30:	50000800 	.word	0x50000800
 8001b34:	50000c00 	.word	0x50000c00
 8001b38:	50001000 	.word	0x50001000
 8001b3c:	50001c00 	.word	0x50001c00
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	000a      	movs	r2, r1
 8001b4e:	1cbb      	adds	r3, r7, #2
 8001b50:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	1cba      	adds	r2, r7, #2
 8001b58:	8812      	ldrh	r2, [r2, #0]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d004      	beq.n	8001b68 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b5e:	230f      	movs	r3, #15
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	e003      	b.n	8001b70 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b68:	230f      	movs	r3, #15
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b70:	230f      	movs	r3, #15
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	781b      	ldrb	r3, [r3, #0]
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b004      	add	sp, #16
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	0008      	movs	r0, r1
 8001b88:	0011      	movs	r1, r2
 8001b8a:	1cbb      	adds	r3, r7, #2
 8001b8c:	1c02      	adds	r2, r0, #0
 8001b8e:	801a      	strh	r2, [r3, #0]
 8001b90:	1c7b      	adds	r3, r7, #1
 8001b92:	1c0a      	adds	r2, r1, #0
 8001b94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001b96:	1c7b      	adds	r3, r7, #1
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9e:	1cbb      	adds	r3, r7, #2
 8001ba0:	881a      	ldrh	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ba6:	e003      	b.n	8001bb0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001ba8:	1cbb      	adds	r3, r7, #2
 8001baa:	881a      	ldrh	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	1dbb      	adds	r3, r7, #6
 8001bc2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	1dba      	adds	r2, r7, #6
 8001bca:	8812      	ldrh	r2, [r2, #0]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d008      	beq.n	8001be2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001bd2:	1dba      	adds	r2, r7, #6
 8001bd4:	8812      	ldrh	r2, [r2, #0]
 8001bd6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bd8:	1dbb      	adds	r3, r7, #6
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f000 f807 	bl	8001bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b002      	add	sp, #8
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	40010400 	.word	0x40010400

08001bf0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	1dbb      	adds	r3, r7, #6
 8001bfa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001bfc:	46c0      	nop			; (mov r8, r8)
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b002      	add	sp, #8
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	b5b0      	push	{r4, r5, r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d102      	bne.n	8001c18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	f000 fbbc 	bl	8002390 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c18:	4bc8      	ldr	r3, [pc, #800]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	220c      	movs	r2, #12
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c22:	4bc6      	ldr	r3, [pc, #792]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	025b      	lsls	r3, r3, #9
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2201      	movs	r2, #1
 8001c34:	4013      	ands	r3, r2
 8001c36:	d100      	bne.n	8001c3a <HAL_RCC_OscConfig+0x36>
 8001c38:	e07e      	b.n	8001d38 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d007      	beq.n	8001c50 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d112      	bne.n	8001c6c <HAL_RCC_OscConfig+0x68>
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	025b      	lsls	r3, r3, #9
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d10d      	bne.n	8001c6c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	4bba      	ldr	r3, [pc, #744]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	029b      	lsls	r3, r3, #10
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d100      	bne.n	8001c5e <HAL_RCC_OscConfig+0x5a>
 8001c5c:	e06b      	b.n	8001d36 <HAL_RCC_OscConfig+0x132>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d167      	bne.n	8001d36 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	f000 fb92 	bl	8002390 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	025b      	lsls	r3, r3, #9
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d107      	bne.n	8001c88 <HAL_RCC_OscConfig+0x84>
 8001c78:	4bb0      	ldr	r3, [pc, #704]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4baf      	ldr	r3, [pc, #700]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001c7e:	2180      	movs	r1, #128	; 0x80
 8001c80:	0249      	lsls	r1, r1, #9
 8001c82:	430a      	orrs	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	e027      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	23a0      	movs	r3, #160	; 0xa0
 8001c8e:	02db      	lsls	r3, r3, #11
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d10e      	bne.n	8001cb2 <HAL_RCC_OscConfig+0xae>
 8001c94:	4ba9      	ldr	r3, [pc, #676]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4ba8      	ldr	r3, [pc, #672]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	02c9      	lsls	r1, r1, #11
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	4ba6      	ldr	r3, [pc, #664]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4ba5      	ldr	r3, [pc, #660]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0249      	lsls	r1, r1, #9
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e012      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
 8001cb2:	4ba2      	ldr	r3, [pc, #648]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4ba1      	ldr	r3, [pc, #644]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001cb8:	49a1      	ldr	r1, [pc, #644]	; (8001f40 <HAL_RCC_OscConfig+0x33c>)
 8001cba:	400a      	ands	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	4b9f      	ldr	r3, [pc, #636]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	025b      	lsls	r3, r3, #9
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4b9b      	ldr	r3, [pc, #620]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b9a      	ldr	r3, [pc, #616]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001cd2:	499c      	ldr	r1, [pc, #624]	; (8001f44 <HAL_RCC_OscConfig+0x340>)
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d015      	beq.n	8001d0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f91c 	bl	8000f1c <HAL_GetTick>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ce8:	e009      	b.n	8001cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cea:	f7ff f917 	bl	8000f1c <HAL_GetTick>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b64      	cmp	r3, #100	; 0x64
 8001cf6:	d902      	bls.n	8001cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	f000 fb49 	bl	8002390 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cfe:	4b8f      	ldr	r3, [pc, #572]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	029b      	lsls	r3, r3, #10
 8001d06:	4013      	ands	r3, r2
 8001d08:	d0ef      	beq.n	8001cea <HAL_RCC_OscConfig+0xe6>
 8001d0a:	e015      	b.n	8001d38 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f906 	bl	8000f1c <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d16:	f7ff f901 	bl	8000f1c <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b64      	cmp	r3, #100	; 0x64
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e333      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d28:	4b84      	ldr	r3, [pc, #528]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	029b      	lsls	r3, r3, #10
 8001d30:	4013      	ands	r3, r2
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x112>
 8001d34:	e000      	b.n	8001d38 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d36:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d100      	bne.n	8001d44 <HAL_RCC_OscConfig+0x140>
 8001d42:	e098      	b.n	8001e76 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d009      	beq.n	8001d66 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001d52:	4b7a      	ldr	r3, [pc, #488]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001d58:	2120      	movs	r1, #32
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	2220      	movs	r2, #32
 8001d62:	4393      	bics	r3, r2
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	2b0c      	cmp	r3, #12
 8001d70:	d13d      	bne.n	8001dee <HAL_RCC_OscConfig+0x1ea>
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d13a      	bne.n	8001dee <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d78:	4b70      	ldr	r3, [pc, #448]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d004      	beq.n	8001d8c <HAL_RCC_OscConfig+0x188>
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e301      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4b6b      	ldr	r3, [pc, #428]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4a6d      	ldr	r2, [pc, #436]	; (8001f48 <HAL_RCC_OscConfig+0x344>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	021a      	lsls	r2, r3, #8
 8001d9c:	4b67      	ldr	r3, [pc, #412]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001da2:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2209      	movs	r2, #9
 8001da8:	4393      	bics	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001db4:	f000 fc20 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 8001db8:	0001      	movs	r1, r0
 8001dba:	4b60      	ldr	r3, [pc, #384]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	4a61      	ldr	r2, [pc, #388]	; (8001f4c <HAL_RCC_OscConfig+0x348>)
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]
 8001dc8:	000a      	movs	r2, r1
 8001dca:	40da      	lsrs	r2, r3
 8001dcc:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <HAL_RCC_OscConfig+0x34c>)
 8001dce:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001dd0:	2513      	movs	r5, #19
 8001dd2:	197c      	adds	r4, r7, r5
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff f86b 	bl	8000eb0 <HAL_InitTick>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001dde:	197b      	adds	r3, r7, r5
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d047      	beq.n	8001e76 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001de6:	2313      	movs	r3, #19
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	e2d0      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d027      	beq.n	8001e44 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001df4:	4b51      	ldr	r3, [pc, #324]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2209      	movs	r2, #9
 8001dfa:	4393      	bics	r3, r2
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	4b4f      	ldr	r3, [pc, #316]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e02:	430a      	orrs	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7ff f889 	bl	8000f1c <HAL_GetTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e10:	f7ff f884 	bl	8000f1c <HAL_GetTick>
 8001e14:	0002      	movs	r2, r0
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e2b6      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e22:	4b46      	ldr	r3, [pc, #280]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2204      	movs	r2, #4
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d0f1      	beq.n	8001e10 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4a45      	ldr	r2, [pc, #276]	; (8001f48 <HAL_RCC_OscConfig+0x344>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	0019      	movs	r1, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	021a      	lsls	r2, r3, #8
 8001e3c:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	e018      	b.n	8001e76 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e44:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	438a      	bics	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7ff f864 	bl	8000f1c <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7ff f85f 	bl	8000f1c <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e291      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e6c:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2204      	movs	r2, #4
 8001e72:	4013      	ands	r3, r2
 8001e74:	d1f1      	bne.n	8001e5a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2210      	movs	r2, #16
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d100      	bne.n	8001e82 <HAL_RCC_OscConfig+0x27e>
 8001e80:	e09f      	b.n	8001fc2 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d13f      	bne.n	8001f08 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e88:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4013      	ands	r3, r2
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x29c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e277      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ea0:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a2b      	ldr	r2, [pc, #172]	; (8001f54 <HAL_RCC_OscConfig+0x350>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eae:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	0a19      	lsrs	r1, r3, #8
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	061a      	lsls	r2, r3, #24
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	0b5b      	lsrs	r3, r3, #13
 8001ece:	3301      	adds	r3, #1
 8001ed0:	2280      	movs	r2, #128	; 0x80
 8001ed2:	0212      	lsls	r2, r2, #8
 8001ed4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001ed6:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	210f      	movs	r1, #15
 8001ede:	400b      	ands	r3, r1
 8001ee0:	491a      	ldr	r1, [pc, #104]	; (8001f4c <HAL_RCC_OscConfig+0x348>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_RCC_OscConfig+0x34c>)
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001eea:	2513      	movs	r5, #19
 8001eec:	197c      	adds	r4, r7, r5
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7fe ffde 	bl	8000eb0 <HAL_InitTick>
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ef8:	197b      	adds	r3, r7, r5
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d060      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001f00:	2313      	movs	r3, #19
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	e243      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d03e      	beq.n	8001f8e <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_RCC_OscConfig+0x338>)
 8001f16:	2180      	movs	r1, #128	; 0x80
 8001f18:	0049      	lsls	r1, r1, #1
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7fe fffd 	bl	8000f1c <HAL_GetTick>
 8001f22:	0003      	movs	r3, r0
 8001f24:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f26:	e017      	b.n	8001f58 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f28:	f7fe fff8 	bl	8000f1c <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d910      	bls.n	8001f58 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e22a      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	fffeffff 	.word	0xfffeffff
 8001f44:	fffbffff 	.word	0xfffbffff
 8001f48:	ffffe0ff 	.word	0xffffe0ff
 8001f4c:	08008120 	.word	0x08008120
 8001f50:	20000000 	.word	0x20000000
 8001f54:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f58:	4bc6      	ldr	r3, [pc, #792]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4013      	ands	r3, r2
 8001f62:	d0e1      	beq.n	8001f28 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f64:	4bc3      	ldr	r3, [pc, #780]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4ac3      	ldr	r2, [pc, #780]	; (8002278 <HAL_RCC_OscConfig+0x674>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	0019      	movs	r1, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f72:	4bc0      	ldr	r3, [pc, #768]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8001f74:	430a      	orrs	r2, r1
 8001f76:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f78:	4bbe      	ldr	r3, [pc, #760]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	0a19      	lsrs	r1, r3, #8
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	061a      	lsls	r2, r3, #24
 8001f86:	4bbb      	ldr	r3, [pc, #748]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	e019      	b.n	8001fc2 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f8e:	4bb9      	ldr	r3, [pc, #740]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4bb8      	ldr	r3, [pc, #736]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8001f94:	49b9      	ldr	r1, [pc, #740]	; (800227c <HAL_RCC_OscConfig+0x678>)
 8001f96:	400a      	ands	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7fe ffbf 	bl	8000f1c <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fa4:	f7fe ffba 	bl	8000f1c <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e1ec      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fb6:	4baf      	ldr	r3, [pc, #700]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2208      	movs	r2, #8
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d036      	beq.n	800203a <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d019      	beq.n	8002008 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd4:	4ba7      	ldr	r3, [pc, #668]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8001fd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd8:	4ba6      	ldr	r3, [pc, #664]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8001fda:	2101      	movs	r1, #1
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe0:	f7fe ff9c 	bl	8000f1c <HAL_GetTick>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fea:	f7fe ff97 	bl	8000f1c <HAL_GetTick>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e1c9      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ffc:	4b9d      	ldr	r3, [pc, #628]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8001ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002000:	2202      	movs	r2, #2
 8002002:	4013      	ands	r3, r2
 8002004:	d0f1      	beq.n	8001fea <HAL_RCC_OscConfig+0x3e6>
 8002006:	e018      	b.n	800203a <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002008:	4b9a      	ldr	r3, [pc, #616]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 800200a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800200c:	4b99      	ldr	r3, [pc, #612]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 800200e:	2101      	movs	r1, #1
 8002010:	438a      	bics	r2, r1
 8002012:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002014:	f7fe ff82 	bl	8000f1c <HAL_GetTick>
 8002018:	0003      	movs	r3, r0
 800201a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201e:	f7fe ff7d 	bl	8000f1c <HAL_GetTick>
 8002022:	0002      	movs	r2, r0
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e1af      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002030:	4b90      	ldr	r3, [pc, #576]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8002032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002034:	2202      	movs	r2, #2
 8002036:	4013      	ands	r3, r2
 8002038:	d1f1      	bne.n	800201e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2204      	movs	r2, #4
 8002040:	4013      	ands	r3, r2
 8002042:	d100      	bne.n	8002046 <HAL_RCC_OscConfig+0x442>
 8002044:	e0af      	b.n	80021a6 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002046:	2323      	movs	r3, #35	; 0x23
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204e:	4b89      	ldr	r3, [pc, #548]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8002050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	055b      	lsls	r3, r3, #21
 8002056:	4013      	ands	r3, r2
 8002058:	d10a      	bne.n	8002070 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	4b86      	ldr	r3, [pc, #536]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 800205c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800205e:	4b85      	ldr	r3, [pc, #532]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	0549      	lsls	r1, r1, #21
 8002064:	430a      	orrs	r2, r1
 8002066:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002068:	2323      	movs	r3, #35	; 0x23
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	4b83      	ldr	r3, [pc, #524]	; (8002280 <HAL_RCC_OscConfig+0x67c>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4013      	ands	r3, r2
 800207a:	d11a      	bne.n	80020b2 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207c:	4b80      	ldr	r3, [pc, #512]	; (8002280 <HAL_RCC_OscConfig+0x67c>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b7f      	ldr	r3, [pc, #508]	; (8002280 <HAL_RCC_OscConfig+0x67c>)
 8002082:	2180      	movs	r1, #128	; 0x80
 8002084:	0049      	lsls	r1, r1, #1
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208a:	f7fe ff47 	bl	8000f1c <HAL_GetTick>
 800208e:	0003      	movs	r3, r0
 8002090:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002094:	f7fe ff42 	bl	8000f1c <HAL_GetTick>
 8002098:	0002      	movs	r2, r0
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e174      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a6:	4b76      	ldr	r3, [pc, #472]	; (8002280 <HAL_RCC_OscConfig+0x67c>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4013      	ands	r3, r2
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_OscConfig+0x4ca>
 80020be:	4b6d      	ldr	r3, [pc, #436]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 80020c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020c2:	4b6c      	ldr	r3, [pc, #432]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 80020c4:	2180      	movs	r1, #128	; 0x80
 80020c6:	0049      	lsls	r1, r1, #1
 80020c8:	430a      	orrs	r2, r1
 80020ca:	651a      	str	r2, [r3, #80]	; 0x50
 80020cc:	e031      	b.n	8002132 <HAL_RCC_OscConfig+0x52e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x4ec>
 80020d6:	4b67      	ldr	r3, [pc, #412]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 80020d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020da:	4b66      	ldr	r3, [pc, #408]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 80020dc:	4967      	ldr	r1, [pc, #412]	; (800227c <HAL_RCC_OscConfig+0x678>)
 80020de:	400a      	ands	r2, r1
 80020e0:	651a      	str	r2, [r3, #80]	; 0x50
 80020e2:	4b64      	ldr	r3, [pc, #400]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 80020e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020e6:	4b63      	ldr	r3, [pc, #396]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 80020e8:	4966      	ldr	r1, [pc, #408]	; (8002284 <HAL_RCC_OscConfig+0x680>)
 80020ea:	400a      	ands	r2, r1
 80020ec:	651a      	str	r2, [r3, #80]	; 0x50
 80020ee:	e020      	b.n	8002132 <HAL_RCC_OscConfig+0x52e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	23a0      	movs	r3, #160	; 0xa0
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d10e      	bne.n	800211a <HAL_RCC_OscConfig+0x516>
 80020fc:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 80020fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002100:	4b5c      	ldr	r3, [pc, #368]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8002102:	2180      	movs	r1, #128	; 0x80
 8002104:	00c9      	lsls	r1, r1, #3
 8002106:	430a      	orrs	r2, r1
 8002108:	651a      	str	r2, [r3, #80]	; 0x50
 800210a:	4b5a      	ldr	r3, [pc, #360]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 800210c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800210e:	4b59      	ldr	r3, [pc, #356]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8002110:	2180      	movs	r1, #128	; 0x80
 8002112:	0049      	lsls	r1, r1, #1
 8002114:	430a      	orrs	r2, r1
 8002116:	651a      	str	r2, [r3, #80]	; 0x50
 8002118:	e00b      	b.n	8002132 <HAL_RCC_OscConfig+0x52e>
 800211a:	4b56      	ldr	r3, [pc, #344]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 800211c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800211e:	4b55      	ldr	r3, [pc, #340]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8002120:	4956      	ldr	r1, [pc, #344]	; (800227c <HAL_RCC_OscConfig+0x678>)
 8002122:	400a      	ands	r2, r1
 8002124:	651a      	str	r2, [r3, #80]	; 0x50
 8002126:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8002128:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800212a:	4b52      	ldr	r3, [pc, #328]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 800212c:	4955      	ldr	r1, [pc, #340]	; (8002284 <HAL_RCC_OscConfig+0x680>)
 800212e:	400a      	ands	r2, r1
 8002130:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d015      	beq.n	8002166 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213a:	f7fe feef 	bl	8000f1c <HAL_GetTick>
 800213e:	0003      	movs	r3, r0
 8002140:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002142:	e009      	b.n	8002158 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7fe feea 	bl	8000f1c <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	4a4e      	ldr	r2, [pc, #312]	; (8002288 <HAL_RCC_OscConfig+0x684>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e11b      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002158:	4b46      	ldr	r3, [pc, #280]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 800215a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4013      	ands	r3, r2
 8002162:	d0ef      	beq.n	8002144 <HAL_RCC_OscConfig+0x540>
 8002164:	e014      	b.n	8002190 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002166:	f7fe fed9 	bl	8000f1c <HAL_GetTick>
 800216a:	0003      	movs	r3, r0
 800216c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800216e:	e009      	b.n	8002184 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002170:	f7fe fed4 	bl	8000f1c <HAL_GetTick>
 8002174:	0002      	movs	r2, r0
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	4a43      	ldr	r2, [pc, #268]	; (8002288 <HAL_RCC_OscConfig+0x684>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e105      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002184:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8002186:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d1ef      	bne.n	8002170 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002190:	2323      	movs	r3, #35	; 0x23
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d105      	bne.n	80021a6 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219a:	4b36      	ldr	r3, [pc, #216]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 800219c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800219e:	4b35      	ldr	r3, [pc, #212]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 80021a0:	493a      	ldr	r1, [pc, #232]	; (800228c <HAL_RCC_OscConfig+0x688>)
 80021a2:	400a      	ands	r2, r1
 80021a4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2220      	movs	r2, #32
 80021ac:	4013      	ands	r3, r2
 80021ae:	d049      	beq.n	8002244 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d026      	beq.n	8002206 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80021b8:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 80021be:	2101      	movs	r1, #1
 80021c0:	430a      	orrs	r2, r1
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 80021c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c8:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 80021ca:	2101      	movs	r1, #1
 80021cc:	430a      	orrs	r2, r1
 80021ce:	635a      	str	r2, [r3, #52]	; 0x34
 80021d0:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <HAL_RCC_OscConfig+0x68c>)
 80021d2:	6a1a      	ldr	r2, [r3, #32]
 80021d4:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <HAL_RCC_OscConfig+0x68c>)
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	0189      	lsls	r1, r1, #6
 80021da:	430a      	orrs	r2, r1
 80021dc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe fe9d 	bl	8000f1c <HAL_GetTick>
 80021e2:	0003      	movs	r3, r0
 80021e4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021e8:	f7fe fe98 	bl	8000f1c <HAL_GetTick>
 80021ec:	0002      	movs	r2, r0
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e0ca      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021fa:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2202      	movs	r2, #2
 8002200:	4013      	ands	r3, r2
 8002202:	d0f1      	beq.n	80021e8 <HAL_RCC_OscConfig+0x5e4>
 8002204:	e01e      	b.n	8002244 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 800220c:	2101      	movs	r1, #1
 800220e:	438a      	bics	r2, r1
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <HAL_RCC_OscConfig+0x68c>)
 8002214:	6a1a      	ldr	r2, [r3, #32]
 8002216:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <HAL_RCC_OscConfig+0x68c>)
 8002218:	491e      	ldr	r1, [pc, #120]	; (8002294 <HAL_RCC_OscConfig+0x690>)
 800221a:	400a      	ands	r2, r1
 800221c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7fe fe7d 	bl	8000f1c <HAL_GetTick>
 8002222:	0003      	movs	r3, r0
 8002224:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002228:	f7fe fe78 	bl	8000f1c <HAL_GetTick>
 800222c:	0002      	movs	r2, r0
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e0aa      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800223a:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2202      	movs	r2, #2
 8002240:	4013      	ands	r3, r2
 8002242:	d1f1      	bne.n	8002228 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	2b00      	cmp	r3, #0
 800224a:	d100      	bne.n	800224e <HAL_RCC_OscConfig+0x64a>
 800224c:	e09f      	b.n	800238e <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	2b0c      	cmp	r3, #12
 8002252:	d100      	bne.n	8002256 <HAL_RCC_OscConfig+0x652>
 8002254:	e078      	b.n	8002348 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	2b02      	cmp	r3, #2
 800225c:	d159      	bne.n	8002312 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <HAL_RCC_OscConfig+0x670>)
 8002264:	490c      	ldr	r1, [pc, #48]	; (8002298 <HAL_RCC_OscConfig+0x694>)
 8002266:	400a      	ands	r2, r1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7fe fe57 	bl	8000f1c <HAL_GetTick>
 800226e:	0003      	movs	r3, r0
 8002270:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002272:	e01c      	b.n	80022ae <HAL_RCC_OscConfig+0x6aa>
 8002274:	40021000 	.word	0x40021000
 8002278:	ffff1fff 	.word	0xffff1fff
 800227c:	fffffeff 	.word	0xfffffeff
 8002280:	40007000 	.word	0x40007000
 8002284:	fffffbff 	.word	0xfffffbff
 8002288:	00001388 	.word	0x00001388
 800228c:	efffffff 	.word	0xefffffff
 8002290:	40010000 	.word	0x40010000
 8002294:	ffffdfff 	.word	0xffffdfff
 8002298:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229c:	f7fe fe3e 	bl	8000f1c <HAL_GetTick>
 80022a0:	0002      	movs	r2, r0
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e070      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022ae:	4b3a      	ldr	r3, [pc, #232]	; (8002398 <HAL_RCC_OscConfig+0x794>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	049b      	lsls	r3, r3, #18
 80022b6:	4013      	ands	r3, r2
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ba:	4b37      	ldr	r3, [pc, #220]	; (8002398 <HAL_RCC_OscConfig+0x794>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	4a37      	ldr	r2, [pc, #220]	; (800239c <HAL_RCC_OscConfig+0x798>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	431a      	orrs	r2, r3
 80022d4:	4b30      	ldr	r3, [pc, #192]	; (8002398 <HAL_RCC_OscConfig+0x794>)
 80022d6:	430a      	orrs	r2, r1
 80022d8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022da:	4b2f      	ldr	r3, [pc, #188]	; (8002398 <HAL_RCC_OscConfig+0x794>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <HAL_RCC_OscConfig+0x794>)
 80022e0:	2180      	movs	r1, #128	; 0x80
 80022e2:	0449      	lsls	r1, r1, #17
 80022e4:	430a      	orrs	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7fe fe18 	bl	8000f1c <HAL_GetTick>
 80022ec:	0003      	movs	r3, r0
 80022ee:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f2:	f7fe fe13 	bl	8000f1c <HAL_GetTick>
 80022f6:	0002      	movs	r2, r0
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e045      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <HAL_RCC_OscConfig+0x794>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	049b      	lsls	r3, r3, #18
 800230c:	4013      	ands	r3, r2
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x6ee>
 8002310:	e03d      	b.n	800238e <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002312:	4b21      	ldr	r3, [pc, #132]	; (8002398 <HAL_RCC_OscConfig+0x794>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4b20      	ldr	r3, [pc, #128]	; (8002398 <HAL_RCC_OscConfig+0x794>)
 8002318:	4921      	ldr	r1, [pc, #132]	; (80023a0 <HAL_RCC_OscConfig+0x79c>)
 800231a:	400a      	ands	r2, r1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe fdfd 	bl	8000f1c <HAL_GetTick>
 8002322:	0003      	movs	r3, r0
 8002324:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe fdf8 	bl	8000f1c <HAL_GetTick>
 800232c:	0002      	movs	r2, r0
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e02a      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800233a:	4b17      	ldr	r3, [pc, #92]	; (8002398 <HAL_RCC_OscConfig+0x794>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	049b      	lsls	r3, r3, #18
 8002342:	4013      	ands	r3, r2
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x724>
 8002346:	e022      	b.n	800238e <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e01d      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002354:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_RCC_OscConfig+0x794>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	025b      	lsls	r3, r3, #9
 8002360:	401a      	ands	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	429a      	cmp	r2, r3
 8002368:	d10f      	bne.n	800238a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	23f0      	movs	r3, #240	; 0xf0
 800236e:	039b      	lsls	r3, r3, #14
 8002370:	401a      	ands	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d107      	bne.n	800238a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	23c0      	movs	r3, #192	; 0xc0
 800237e:	041b      	lsls	r3, r3, #16
 8002380:	401a      	ands	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b00a      	add	sp, #40	; 0x28
 8002396:	bdb0      	pop	{r4, r5, r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	ff02ffff 	.word	0xff02ffff
 80023a0:	feffffff 	.word	0xfeffffff

080023a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a4:	b5b0      	push	{r4, r5, r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e10d      	b.n	80025d4 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b8:	4b88      	ldr	r3, [pc, #544]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2201      	movs	r2, #1
 80023be:	4013      	ands	r3, r2
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d911      	bls.n	80023ea <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b85      	ldr	r3, [pc, #532]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2201      	movs	r2, #1
 80023cc:	4393      	bics	r3, r2
 80023ce:	0019      	movs	r1, r3
 80023d0:	4b82      	ldr	r3, [pc, #520]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d8:	4b80      	ldr	r3, [pc, #512]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2201      	movs	r2, #1
 80023de:	4013      	ands	r3, r2
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0f4      	b.n	80025d4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2202      	movs	r2, #2
 80023f0:	4013      	ands	r3, r2
 80023f2:	d009      	beq.n	8002408 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	4b7a      	ldr	r3, [pc, #488]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	22f0      	movs	r2, #240	; 0xf0
 80023fa:	4393      	bics	r3, r2
 80023fc:	0019      	movs	r1, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	4b77      	ldr	r3, [pc, #476]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 8002404:	430a      	orrs	r2, r1
 8002406:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2201      	movs	r2, #1
 800240e:	4013      	ands	r3, r2
 8002410:	d100      	bne.n	8002414 <HAL_RCC_ClockConfig+0x70>
 8002412:	e089      	b.n	8002528 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d107      	bne.n	800242c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800241c:	4b70      	ldr	r3, [pc, #448]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	029b      	lsls	r3, r3, #10
 8002424:	4013      	ands	r3, r2
 8002426:	d120      	bne.n	800246a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0d3      	b.n	80025d4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b03      	cmp	r3, #3
 8002432:	d107      	bne.n	8002444 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002434:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	049b      	lsls	r3, r3, #18
 800243c:	4013      	ands	r3, r2
 800243e:	d114      	bne.n	800246a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0c7      	b.n	80025d4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d106      	bne.n	800245a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800244c:	4b64      	ldr	r3, [pc, #400]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2204      	movs	r2, #4
 8002452:	4013      	ands	r3, r2
 8002454:	d109      	bne.n	800246a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e0bc      	b.n	80025d4 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800245a:	4b61      	ldr	r3, [pc, #388]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4013      	ands	r3, r2
 8002464:	d101      	bne.n	800246a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e0b4      	b.n	80025d4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246a:	4b5d      	ldr	r3, [pc, #372]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2203      	movs	r2, #3
 8002470:	4393      	bics	r3, r2
 8002472:	0019      	movs	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4b59      	ldr	r3, [pc, #356]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 800247a:	430a      	orrs	r2, r1
 800247c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800247e:	f7fe fd4d 	bl	8000f1c <HAL_GetTick>
 8002482:	0003      	movs	r3, r0
 8002484:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d111      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800248e:	e009      	b.n	80024a4 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f7fe fd44 	bl	8000f1c <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	4a52      	ldr	r2, [pc, #328]	; (80025e4 <HAL_RCC_ClockConfig+0x240>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e097      	b.n	80025d4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a4:	4b4e      	ldr	r3, [pc, #312]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	220c      	movs	r2, #12
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d1ef      	bne.n	8002490 <HAL_RCC_ClockConfig+0xec>
 80024b0:	e03a      	b.n	8002528 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d111      	bne.n	80024de <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ba:	e009      	b.n	80024d0 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024bc:	f7fe fd2e 	bl	8000f1c <HAL_GetTick>
 80024c0:	0002      	movs	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	4a47      	ldr	r2, [pc, #284]	; (80025e4 <HAL_RCC_ClockConfig+0x240>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e081      	b.n	80025d4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d0:	4b43      	ldr	r3, [pc, #268]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	220c      	movs	r2, #12
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b0c      	cmp	r3, #12
 80024da:	d1ef      	bne.n	80024bc <HAL_RCC_ClockConfig+0x118>
 80024dc:	e024      	b.n	8002528 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d11b      	bne.n	800251e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e6:	e009      	b.n	80024fc <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e8:	f7fe fd18 	bl	8000f1c <HAL_GetTick>
 80024ec:	0002      	movs	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	4a3c      	ldr	r2, [pc, #240]	; (80025e4 <HAL_RCC_ClockConfig+0x240>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e06b      	b.n	80025d4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024fc:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	220c      	movs	r2, #12
 8002502:	4013      	ands	r3, r2
 8002504:	2b04      	cmp	r3, #4
 8002506:	d1ef      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x144>
 8002508:	e00e      	b.n	8002528 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250a:	f7fe fd07 	bl	8000f1c <HAL_GetTick>
 800250e:	0002      	movs	r2, r0
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	4a33      	ldr	r2, [pc, #204]	; (80025e4 <HAL_RCC_ClockConfig+0x240>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e05a      	b.n	80025d4 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800251e:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	220c      	movs	r2, #12
 8002524:	4013      	ands	r3, r2
 8002526:	d1f0      	bne.n	800250a <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002528:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2201      	movs	r2, #1
 800252e:	4013      	ands	r3, r2
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d211      	bcs.n	800255a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b29      	ldr	r3, [pc, #164]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2201      	movs	r2, #1
 800253c:	4393      	bics	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	4b26      	ldr	r3, [pc, #152]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002548:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2201      	movs	r2, #1
 800254e:	4013      	ands	r3, r2
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d001      	beq.n	800255a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e03c      	b.n	80025d4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2204      	movs	r2, #4
 8002560:	4013      	ands	r3, r2
 8002562:	d009      	beq.n	8002578 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002564:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <HAL_RCC_ClockConfig+0x244>)
 800256a:	4013      	ands	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 8002574:	430a      	orrs	r2, r1
 8002576:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2208      	movs	r2, #8
 800257e:	4013      	ands	r3, r2
 8002580:	d00a      	beq.n	8002598 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002582:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	4a19      	ldr	r2, [pc, #100]	; (80025ec <HAL_RCC_ClockConfig+0x248>)
 8002588:	4013      	ands	r3, r2
 800258a:	0019      	movs	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	00da      	lsls	r2, r3, #3
 8002592:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 8002594:	430a      	orrs	r2, r1
 8002596:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002598:	f000 f82e 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 800259c:	0001      	movs	r1, r0
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	220f      	movs	r2, #15
 80025a6:	4013      	ands	r3, r2
 80025a8:	4a11      	ldr	r2, [pc, #68]	; (80025f0 <HAL_RCC_ClockConfig+0x24c>)
 80025aa:	5cd3      	ldrb	r3, [r2, r3]
 80025ac:	000a      	movs	r2, r1
 80025ae:	40da      	lsrs	r2, r3
 80025b0:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_RCC_ClockConfig+0x250>)
 80025b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80025b4:	250b      	movs	r5, #11
 80025b6:	197c      	adds	r4, r7, r5
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7fe fc79 	bl	8000eb0 <HAL_InitTick>
 80025be:	0003      	movs	r3, r0
 80025c0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80025c2:	197b      	adds	r3, r7, r5
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80025ca:	230b      	movs	r3, #11
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	e000      	b.n	80025d4 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b004      	add	sp, #16
 80025da:	bdb0      	pop	{r4, r5, r7, pc}
 80025dc:	40022000 	.word	0x40022000
 80025e0:	40021000 	.word	0x40021000
 80025e4:	00001388 	.word	0x00001388
 80025e8:	fffff8ff 	.word	0xfffff8ff
 80025ec:	ffffc7ff 	.word	0xffffc7ff
 80025f0:	08008120 	.word	0x08008120
 80025f4:	20000000 	.word	0x20000000

080025f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80025fe:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_RCC_GetSysClockFreq+0xf4>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	220c      	movs	r2, #12
 8002608:	4013      	ands	r3, r2
 800260a:	2b08      	cmp	r3, #8
 800260c:	d00e      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x34>
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d00f      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x3a>
 8002612:	2b04      	cmp	r3, #4
 8002614:	d157      	bne.n	80026c6 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002616:	4b35      	ldr	r3, [pc, #212]	; (80026ec <HAL_RCC_GetSysClockFreq+0xf4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2210      	movs	r2, #16
 800261c:	4013      	ands	r3, r2
 800261e:	d002      	beq.n	8002626 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002620:	4b33      	ldr	r3, [pc, #204]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002622:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002624:	e05d      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8002626:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002628:	613b      	str	r3, [r7, #16]
      break;
 800262a:	e05a      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800262c:	4b32      	ldr	r3, [pc, #200]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x100>)
 800262e:	613b      	str	r3, [r7, #16]
      break;
 8002630:	e057      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	0c9b      	lsrs	r3, r3, #18
 8002636:	220f      	movs	r2, #15
 8002638:	4013      	ands	r3, r2
 800263a:	4a30      	ldr	r2, [pc, #192]	; (80026fc <HAL_RCC_GetSysClockFreq+0x104>)
 800263c:	5cd3      	ldrb	r3, [r2, r3]
 800263e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	0d9b      	lsrs	r3, r3, #22
 8002644:	2203      	movs	r2, #3
 8002646:	4013      	ands	r3, r2
 8002648:	3301      	adds	r3, #1
 800264a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800264c:	4b27      	ldr	r3, [pc, #156]	; (80026ec <HAL_RCC_GetSysClockFreq+0xf4>)
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	025b      	lsls	r3, r3, #9
 8002654:	4013      	ands	r3, r2
 8002656:	d00f      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	000a      	movs	r2, r1
 800265c:	0152      	lsls	r2, r2, #5
 800265e:	1a52      	subs	r2, r2, r1
 8002660:	0193      	lsls	r3, r2, #6
 8002662:	1a9b      	subs	r3, r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	185b      	adds	r3, r3, r1
 8002668:	025b      	lsls	r3, r3, #9
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	0018      	movs	r0, r3
 800266e:	f7fd fd4b 	bl	8000108 <__udivsi3>
 8002672:	0003      	movs	r3, r0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	e023      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002678:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <HAL_RCC_GetSysClockFreq+0xf4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2210      	movs	r2, #16
 800267e:	4013      	ands	r3, r2
 8002680:	d00f      	beq.n	80026a2 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	000a      	movs	r2, r1
 8002686:	0152      	lsls	r2, r2, #5
 8002688:	1a52      	subs	r2, r2, r1
 800268a:	0193      	lsls	r3, r2, #6
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	185b      	adds	r3, r3, r1
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	0018      	movs	r0, r3
 8002698:	f7fd fd36 	bl	8000108 <__udivsi3>
 800269c:	0003      	movs	r3, r0
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	e00e      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	000a      	movs	r2, r1
 80026a6:	0152      	lsls	r2, r2, #5
 80026a8:	1a52      	subs	r2, r2, r1
 80026aa:	0193      	lsls	r3, r2, #6
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	185b      	adds	r3, r3, r1
 80026b2:	029b      	lsls	r3, r3, #10
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	0018      	movs	r0, r3
 80026b8:	f7fd fd26 	bl	8000108 <__udivsi3>
 80026bc:	0003      	movs	r3, r0
 80026be:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	613b      	str	r3, [r7, #16]
      break;
 80026c4:	e00d      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_GetSysClockFreq+0xf4>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	0b5b      	lsrs	r3, r3, #13
 80026cc:	2207      	movs	r2, #7
 80026ce:	4013      	ands	r3, r2
 80026d0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	2280      	movs	r2, #128	; 0x80
 80026d8:	0212      	lsls	r2, r2, #8
 80026da:	409a      	lsls	r2, r3
 80026dc:	0013      	movs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
      break;
 80026e0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80026e2:	693b      	ldr	r3, [r7, #16]
}
 80026e4:	0018      	movs	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b006      	add	sp, #24
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	003d0900 	.word	0x003d0900
 80026f4:	00f42400 	.word	0x00f42400
 80026f8:	007a1200 	.word	0x007a1200
 80026fc:	08008138 	.word	0x08008138

08002700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <HAL_RCC_GetHCLKFreq+0x10>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	0018      	movs	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	20000000 	.word	0x20000000

08002714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002718:	f7ff fff2 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 800271c:	0001      	movs	r1, r0
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	2207      	movs	r2, #7
 8002726:	4013      	ands	r3, r2
 8002728:	4a04      	ldr	r2, [pc, #16]	; (800273c <HAL_RCC_GetPCLK1Freq+0x28>)
 800272a:	5cd3      	ldrb	r3, [r2, r3]
 800272c:	40d9      	lsrs	r1, r3
 800272e:	000b      	movs	r3, r1
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	40021000 	.word	0x40021000
 800273c:	08008130 	.word	0x08008130

08002740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002744:	f7ff ffdc 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8002748:	0001      	movs	r1, r0
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	0adb      	lsrs	r3, r3, #11
 8002750:	2207      	movs	r2, #7
 8002752:	4013      	ands	r3, r2
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	40d9      	lsrs	r1, r3
 800275a:	000b      	movs	r3, r1
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	40021000 	.word	0x40021000
 8002768:	08008130 	.word	0x08008130

0800276c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2220      	movs	r2, #32
 800277a:	4013      	ands	r3, r2
 800277c:	d106      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	4013      	ands	r3, r2
 8002788:	d100      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x20>
 800278a:	e0dd      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800278c:	2317      	movs	r3, #23
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002794:	4ba4      	ldr	r3, [pc, #656]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	055b      	lsls	r3, r3, #21
 800279c:	4013      	ands	r3, r2
 800279e:	d10a      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a0:	4ba1      	ldr	r3, [pc, #644]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027a4:	4ba0      	ldr	r3, [pc, #640]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027a6:	2180      	movs	r1, #128	; 0x80
 80027a8:	0549      	lsls	r1, r1, #21
 80027aa:	430a      	orrs	r2, r1
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80027ae:	2317      	movs	r3, #23
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b6:	4b9d      	ldr	r3, [pc, #628]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4013      	ands	r3, r2
 80027c0:	d11a      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c2:	4b9a      	ldr	r3, [pc, #616]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b99      	ldr	r3, [pc, #612]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80027c8:	2180      	movs	r1, #128	; 0x80
 80027ca:	0049      	lsls	r1, r1, #1
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d0:	f7fe fba4 	bl	8000f1c <HAL_GetTick>
 80027d4:	0003      	movs	r3, r0
 80027d6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	e008      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027da:	f7fe fb9f 	bl	8000f1c <HAL_GetTick>
 80027de:	0002      	movs	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b64      	cmp	r3, #100	; 0x64
 80027e6:	d901      	bls.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e118      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ec:	4b8f      	ldr	r3, [pc, #572]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4013      	ands	r3, r2
 80027f6:	d0f0      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80027f8:	4b8b      	ldr	r3, [pc, #556]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	23c0      	movs	r3, #192	; 0xc0
 80027fe:	039b      	lsls	r3, r3, #14
 8002800:	4013      	ands	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	23c0      	movs	r3, #192	; 0xc0
 800280a:	039b      	lsls	r3, r3, #14
 800280c:	4013      	ands	r3, r2
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	429a      	cmp	r2, r3
 8002812:	d107      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	23c0      	movs	r3, #192	; 0xc0
 800281a:	039b      	lsls	r3, r3, #14
 800281c:	4013      	ands	r3, r2
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	429a      	cmp	r2, r3
 8002822:	d013      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	23c0      	movs	r3, #192	; 0xc0
 800282a:	029b      	lsls	r3, r3, #10
 800282c:	401a      	ands	r2, r3
 800282e:	23c0      	movs	r3, #192	; 0xc0
 8002830:	029b      	lsls	r3, r3, #10
 8002832:	429a      	cmp	r2, r3
 8002834:	d10a      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002836:	4b7c      	ldr	r3, [pc, #496]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	029b      	lsls	r3, r3, #10
 800283e:	401a      	ands	r2, r3
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	029b      	lsls	r3, r3, #10
 8002844:	429a      	cmp	r2, r3
 8002846:	d101      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0e8      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800284c:	4b76      	ldr	r3, [pc, #472]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800284e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002850:	23c0      	movs	r3, #192	; 0xc0
 8002852:	029b      	lsls	r3, r3, #10
 8002854:	4013      	ands	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d049      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	23c0      	movs	r3, #192	; 0xc0
 8002864:	029b      	lsls	r3, r3, #10
 8002866:	4013      	ands	r3, r2
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	429a      	cmp	r2, r3
 800286c:	d004      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2220      	movs	r2, #32
 8002874:	4013      	ands	r3, r2
 8002876:	d10d      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	23c0      	movs	r3, #192	; 0xc0
 800287e:	029b      	lsls	r3, r3, #10
 8002880:	4013      	ands	r3, r2
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	429a      	cmp	r2, r3
 8002886:	d034      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	4013      	ands	r3, r2
 8002892:	d02e      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002894:	4b64      	ldr	r3, [pc, #400]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002898:	4a65      	ldr	r2, [pc, #404]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800289a:	4013      	ands	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800289e:	4b62      	ldr	r3, [pc, #392]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028a2:	4b61      	ldr	r3, [pc, #388]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028a4:	2180      	movs	r1, #128	; 0x80
 80028a6:	0309      	lsls	r1, r1, #12
 80028a8:	430a      	orrs	r2, r1
 80028aa:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028ac:	4b5e      	ldr	r3, [pc, #376]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028b0:	4b5d      	ldr	r3, [pc, #372]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028b2:	4960      	ldr	r1, [pc, #384]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80028b4:	400a      	ands	r2, r1
 80028b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80028b8:	4b5b      	ldr	r3, [pc, #364]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4013      	ands	r3, r2
 80028c6:	d014      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7fe fb28 	bl	8000f1c <HAL_GetTick>
 80028cc:	0003      	movs	r3, r0
 80028ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028d0:	e009      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d2:	f7fe fb23 	bl	8000f1c <HAL_GetTick>
 80028d6:	0002      	movs	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	4a56      	ldr	r2, [pc, #344]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e09b      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028e6:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4013      	ands	r3, r2
 80028f0:	d0ef      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	23c0      	movs	r3, #192	; 0xc0
 80028f8:	029b      	lsls	r3, r3, #10
 80028fa:	401a      	ands	r2, r3
 80028fc:	23c0      	movs	r3, #192	; 0xc0
 80028fe:	029b      	lsls	r3, r3, #10
 8002900:	429a      	cmp	r2, r3
 8002902:	d10c      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002904:	4b48      	ldr	r3, [pc, #288]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a4c      	ldr	r2, [pc, #304]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	23c0      	movs	r3, #192	; 0xc0
 8002914:	039b      	lsls	r3, r3, #14
 8002916:	401a      	ands	r2, r3
 8002918:	4b43      	ldr	r3, [pc, #268]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	4b42      	ldr	r3, [pc, #264]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002920:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	23c0      	movs	r3, #192	; 0xc0
 8002928:	029b      	lsls	r3, r3, #10
 800292a:	401a      	ands	r2, r3
 800292c:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800292e:	430a      	orrs	r2, r1
 8002930:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002932:	2317      	movs	r3, #23
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d105      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293c:	4b3a      	ldr	r3, [pc, #232]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800293e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002940:	4b39      	ldr	r3, [pc, #228]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002942:	493f      	ldr	r1, [pc, #252]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002944:	400a      	ands	r2, r1
 8002946:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2201      	movs	r2, #1
 800294e:	4013      	ands	r3, r2
 8002950:	d009      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002952:	4b35      	ldr	r3, [pc, #212]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002956:	2203      	movs	r2, #3
 8002958:	4393      	bics	r3, r2
 800295a:	0019      	movs	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	4b31      	ldr	r3, [pc, #196]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002962:	430a      	orrs	r2, r1
 8002964:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2202      	movs	r2, #2
 800296c:	4013      	ands	r3, r2
 800296e:	d009      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002970:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002974:	220c      	movs	r2, #12
 8002976:	4393      	bics	r3, r2
 8002978:	0019      	movs	r1, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002980:	430a      	orrs	r2, r1
 8002982:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2204      	movs	r2, #4
 800298a:	4013      	ands	r3, r2
 800298c:	d009      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800298e:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	4a2c      	ldr	r2, [pc, #176]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002994:	4013      	ands	r3, r2
 8002996:	0019      	movs	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	4b22      	ldr	r3, [pc, #136]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800299e:	430a      	orrs	r2, r1
 80029a0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2208      	movs	r2, #8
 80029a8:	4013      	ands	r3, r2
 80029aa:	d009      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ac:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b0:	4a25      	ldr	r2, [pc, #148]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029bc:	430a      	orrs	r2, r1
 80029be:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4013      	ands	r3, r2
 80029ca:	d009      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d0:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	0019      	movs	r1, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029dc:	430a      	orrs	r2, r1
 80029de:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2240      	movs	r2, #64	; 0x40
 80029e6:	4013      	ands	r3, r2
 80029e8:	d009      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029ea:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	4a17      	ldr	r2, [pc, #92]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80029fa:	430a      	orrs	r2, r1
 80029fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2280      	movs	r2, #128	; 0x80
 8002a04:	4013      	ands	r3, r2
 8002a06:	d009      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0c:	4a10      	ldr	r2, [pc, #64]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	0019      	movs	r1, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1a      	ldr	r2, [r3, #32]
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	0018      	movs	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b006      	add	sp, #24
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	fffcffff 	.word	0xfffcffff
 8002a34:	fff7ffff 	.word	0xfff7ffff
 8002a38:	00001388 	.word	0x00001388
 8002a3c:	ffcfffff 	.word	0xffcfffff
 8002a40:	efffffff 	.word	0xefffffff
 8002a44:	fffff3ff 	.word	0xfffff3ff
 8002a48:	ffffcfff 	.word	0xffffcfff
 8002a4c:	fbffffff 	.word	0xfbffffff
 8002a50:	fff3ffff 	.word	0xfff3ffff

08002a54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e08e      	b.n	8002b84 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2221      	movs	r2, #33	; 0x21
 8002a6a:	5c9b      	ldrb	r3, [r3, r2]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d107      	bne.n	8002a82 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	2100      	movs	r1, #0
 8002a78:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f003 fea1 	bl	80067c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2221      	movs	r2, #33	; 0x21
 8002a86:	2102      	movs	r1, #2
 8002a88:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	22ca      	movs	r2, #202	; 0xca
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2253      	movs	r2, #83	; 0x53
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 fbe0 	bl	8003262 <RTC_EnterInitMode>
 8002aa2:	1e03      	subs	r3, r0, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	22ff      	movs	r2, #255	; 0xff
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2221      	movs	r2, #33	; 0x21
 8002ab2:	2104      	movs	r1, #4
 8002ab4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e064      	b.n	8002b84 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4931      	ldr	r1, [pc, #196]	; (8002b8c <HAL_RTC_Init+0x138>)
 8002ac6:	400a      	ands	r2, r1
 8002ac8:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6899      	ldr	r1, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68d2      	ldr	r2, [r2, #12]
 8002af0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6919      	ldr	r1, [r3, #16]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	041a      	lsls	r2, r3, #16
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	438a      	bics	r2, r1
 8002b14:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2103      	movs	r1, #3
 8002b22:	438a      	bics	r2, r1
 8002b24:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69da      	ldr	r2, [r3, #28]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2220      	movs	r2, #32
 8002b46:	4013      	ands	r3, r2
 8002b48:	d113      	bne.n	8002b72 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 fb61 	bl	8003214 <HAL_RTC_WaitForSynchro>
 8002b52:	1e03      	subs	r3, r0, #0
 8002b54:	d00d      	beq.n	8002b72 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	22ff      	movs	r2, #255	; 0xff
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2221      	movs	r2, #33	; 0x21
 8002b62:	2104      	movs	r1, #4
 8002b64:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e008      	b.n	8002b84 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	22ff      	movs	r2, #255	; 0xff
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2221      	movs	r2, #33	; 0x21
 8002b7e:	2101      	movs	r1, #1
 8002b80:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b82:	2300      	movs	r3, #0
  }
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	ff8fffbf 	.word	0xff8fffbf

08002b90 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	5c9b      	ldrb	r3, [r3, r2]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_RTC_SetTime+0x1a>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e0ad      	b.n	8002d06 <HAL_RTC_SetTime+0x176>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	2101      	movs	r1, #1
 8002bb0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2221      	movs	r2, #33	; 0x21
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d125      	bne.n	8002c0c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2240      	movs	r2, #64	; 0x40
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d102      	bne.n	8002bd2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f000 fb6d 	bl	80032b6 <RTC_ByteToBcd2>
 8002bdc:	0003      	movs	r3, r0
 8002bde:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	785b      	ldrb	r3, [r3, #1]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f000 fb66 	bl	80032b6 <RTC_ByteToBcd2>
 8002bea:	0003      	movs	r3, r0
 8002bec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002bee:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	789b      	ldrb	r3, [r3, #2]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f000 fb5e 	bl	80032b6 <RTC_ByteToBcd2>
 8002bfa:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002bfc:	0022      	movs	r2, r4
 8002bfe:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	78db      	ldrb	r3, [r3, #3]
 8002c04:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	e017      	b.n	8002c3c <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2240      	movs	r2, #64	; 0x40
 8002c14:	4013      	ands	r3, r2
 8002c16:	d102      	bne.n	8002c1e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	785b      	ldrb	r3, [r3, #1]
 8002c28:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c2a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002c30:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	78db      	ldrb	r3, [r3, #3]
 8002c36:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	22ca      	movs	r2, #202	; 0xca
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2253      	movs	r2, #83	; 0x53
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f000 fb07 	bl	8003262 <RTC_EnterInitMode>
 8002c54:	1e03      	subs	r3, r0, #0
 8002c56:	d00d      	beq.n	8002c74 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	22ff      	movs	r2, #255	; 0xff
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2221      	movs	r2, #33	; 0x21
 8002c64:	2104      	movs	r1, #4
 8002c66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e048      	b.n	8002d06 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4925      	ldr	r1, [pc, #148]	; (8002d10 <HAL_RTC_SetTime+0x180>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4922      	ldr	r1, [pc, #136]	; (8002d14 <HAL_RTC_SetTime+0x184>)
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6899      	ldr	r1, [r3, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2180      	movs	r1, #128	; 0x80
 8002cb4:	438a      	bics	r2, r1
 8002cb6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d113      	bne.n	8002cec <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f000 faa4 	bl	8003214 <HAL_RTC_WaitForSynchro>
 8002ccc:	1e03      	subs	r3, r0, #0
 8002cce:	d00d      	beq.n	8002cec <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	22ff      	movs	r2, #255	; 0xff
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2221      	movs	r2, #33	; 0x21
 8002cdc:	2104      	movs	r1, #4
 8002cde:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e00c      	b.n	8002d06 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	22ff      	movs	r2, #255	; 0xff
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2221      	movs	r2, #33	; 0x21
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	2100      	movs	r1, #0
 8002d02:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d04:	2300      	movs	r3, #0
  }
}
 8002d06:	0018      	movs	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b007      	add	sp, #28
 8002d0c:	bd90      	pop	{r4, r7, pc}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	007f7f7f 	.word	0x007f7f7f
 8002d14:	fffbffff 	.word	0xfffbffff

08002d18 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	045b      	lsls	r3, r3, #17
 8002d36:	0c5a      	lsrs	r2, r3, #17
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a22      	ldr	r2, [pc, #136]	; (8002dcc <HAL_RTC_GetTime+0xb4>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	0c1b      	lsrs	r3, r3, #16
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	223f      	movs	r2, #63	; 0x3f
 8002d50:	4013      	ands	r3, r2
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	227f      	movs	r2, #127	; 0x7f
 8002d60:	4013      	ands	r3, r2
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	227f      	movs	r2, #127	; 0x7f
 8002d6e:	4013      	ands	r3, r2
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2240      	movs	r2, #64	; 0x40
 8002d7e:	4013      	ands	r3, r2
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d11a      	bne.n	8002dc2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	0018      	movs	r0, r3
 8002d92:	f000 fab9 	bl	8003308 <RTC_Bcd2ToByte>
 8002d96:	0003      	movs	r3, r0
 8002d98:	001a      	movs	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	785b      	ldrb	r3, [r3, #1]
 8002da2:	0018      	movs	r0, r3
 8002da4:	f000 fab0 	bl	8003308 <RTC_Bcd2ToByte>
 8002da8:	0003      	movs	r3, r0
 8002daa:	001a      	movs	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	789b      	ldrb	r3, [r3, #2]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f000 faa7 	bl	8003308 <RTC_Bcd2ToByte>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	001a      	movs	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b006      	add	sp, #24
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	007f7f7f 	.word	0x007f7f7f

08002dd0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	5c9b      	ldrb	r3, [r3, r2]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_RTC_SetDate+0x1a>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e099      	b.n	8002f1e <HAL_RTC_SetDate+0x14e>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	2101      	movs	r1, #1
 8002df0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2221      	movs	r2, #33	; 0x21
 8002df6:	2102      	movs	r1, #2
 8002df8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10e      	bne.n	8002e1e <HAL_RTC_SetDate+0x4e>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	785b      	ldrb	r3, [r3, #1]
 8002e04:	001a      	movs	r2, r3
 8002e06:	2310      	movs	r3, #16
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d008      	beq.n	8002e1e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	785b      	ldrb	r3, [r3, #1]
 8002e10:	2210      	movs	r2, #16
 8002e12:	4393      	bics	r3, r2
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	330a      	adds	r3, #10
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d11c      	bne.n	8002e5e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	78db      	ldrb	r3, [r3, #3]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f000 fa44 	bl	80032b6 <RTC_ByteToBcd2>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	785b      	ldrb	r3, [r3, #1]
 8002e36:	0018      	movs	r0, r3
 8002e38:	f000 fa3d 	bl	80032b6 <RTC_ByteToBcd2>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e40:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	789b      	ldrb	r3, [r3, #2]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 fa35 	bl	80032b6 <RTC_ByteToBcd2>
 8002e4c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002e4e:	0022      	movs	r2, r4
 8002e50:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	e00e      	b.n	8002e7c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	78db      	ldrb	r3, [r3, #3]
 8002e62:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	785b      	ldrb	r3, [r3, #1]
 8002e68:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002e6a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002e70:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	22ca      	movs	r2, #202	; 0xca
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2253      	movs	r2, #83	; 0x53
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 f9e7 	bl	8003262 <RTC_EnterInitMode>
 8002e94:	1e03      	subs	r3, r0, #0
 8002e96:	d00d      	beq.n	8002eb4 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	22ff      	movs	r2, #255	; 0xff
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2221      	movs	r2, #33	; 0x21
 8002ea4:	2104      	movs	r1, #4
 8002ea6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	2100      	movs	r1, #0
 8002eae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e034      	b.n	8002f1e <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	491b      	ldr	r1, [pc, #108]	; (8002f28 <HAL_RTC_SetDate+0x158>)
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2180      	movs	r1, #128	; 0x80
 8002ecc:	438a      	bics	r2, r1
 8002ece:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d113      	bne.n	8002f04 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f000 f998 	bl	8003214 <HAL_RTC_WaitForSynchro>
 8002ee4:	1e03      	subs	r3, r0, #0
 8002ee6:	d00d      	beq.n	8002f04 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	22ff      	movs	r2, #255	; 0xff
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2221      	movs	r2, #33	; 0x21
 8002ef4:	2104      	movs	r1, #4
 8002ef6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	2100      	movs	r1, #0
 8002efe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e00c      	b.n	8002f1e <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	22ff      	movs	r2, #255	; 0xff
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2221      	movs	r2, #33	; 0x21
 8002f10:	2101      	movs	r1, #1
 8002f12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	2100      	movs	r1, #0
 8002f1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
  }
}
 8002f1e:	0018      	movs	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b007      	add	sp, #28
 8002f24:	bd90      	pop	{r4, r7, pc}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	00ffff3f 	.word	0x00ffff3f

08002f2c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a21      	ldr	r2, [pc, #132]	; (8002fc4 <HAL_RTC_GetDate+0x98>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	0c1b      	lsrs	r3, r3, #16
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	221f      	movs	r2, #31
 8002f56:	4013      	ands	r3, r2
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	223f      	movs	r2, #63	; 0x3f
 8002f64:	4013      	ands	r3, r2
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	0b5b      	lsrs	r3, r3, #13
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2207      	movs	r2, #7
 8002f74:	4013      	ands	r3, r2
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d11a      	bne.n	8002fb8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	78db      	ldrb	r3, [r3, #3]
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 f9be 	bl	8003308 <RTC_Bcd2ToByte>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	001a      	movs	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	785b      	ldrb	r3, [r3, #1]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 f9b5 	bl	8003308 <RTC_Bcd2ToByte>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	001a      	movs	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	789b      	ldrb	r3, [r3, #2]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f000 f9ac 	bl	8003308 <RTC_Bcd2ToByte>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b006      	add	sp, #24
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	00ffff3f 	.word	0x00ffff3f

08002fc8 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	5c9b      	ldrb	r3, [r3, r2]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RTC_SetAlarm+0x1a>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e10c      	b.n	80031fc <HAL_RTC_SetAlarm+0x234>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2221      	movs	r2, #33	; 0x21
 8002fee:	2102      	movs	r1, #2
 8002ff0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d136      	bne.n	8003066 <HAL_RTC_SetAlarm+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2240      	movs	r2, #64	; 0x40
 8003000:	4013      	ands	r3, r2
 8003002:	d102      	bne.n	800300a <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2200      	movs	r2, #0
 8003008:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	0018      	movs	r0, r3
 8003010:	f000 f951 	bl	80032b6 <RTC_ByteToBcd2>
 8003014:	0003      	movs	r3, r0
 8003016:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	785b      	ldrb	r3, [r3, #1]
 800301c:	0018      	movs	r0, r3
 800301e:	f000 f94a 	bl	80032b6 <RTC_ByteToBcd2>
 8003022:	0003      	movs	r3, r0
 8003024:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003026:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	789b      	ldrb	r3, [r3, #2]
 800302c:	0018      	movs	r0, r3
 800302e:	f000 f942 	bl	80032b6 <RTC_ByteToBcd2>
 8003032:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003034:	0022      	movs	r2, r4
 8003036:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	78db      	ldrb	r3, [r3, #3]
 800303c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800303e:	431a      	orrs	r2, r3
 8003040:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2220      	movs	r2, #32
 8003046:	5c9b      	ldrb	r3, [r3, r2]
 8003048:	0018      	movs	r0, r3
 800304a:	f000 f934 	bl	80032b6 <RTC_ByteToBcd2>
 800304e:	0003      	movs	r3, r0
 8003050:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003052:	0022      	movs	r2, r4
 8003054:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800305a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003060:	4313      	orrs	r3, r2
 8003062:	61fb      	str	r3, [r7, #28]
 8003064:	e022      	b.n	80030ac <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2240      	movs	r2, #64	; 0x40
 800306e:	4013      	ands	r3, r2
 8003070:	d102      	bne.n	8003078 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2200      	movs	r2, #0
 8003076:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003084:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800308a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	78db      	ldrb	r3, [r3, #3]
 8003090:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003092:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2120      	movs	r1, #32
 8003098:	5c5b      	ldrb	r3, [r3, r1]
 800309a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800309c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80030a2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	22ca      	movs	r2, #202	; 0xca
 80030be:	625a      	str	r2, [r3, #36]	; 0x24
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2253      	movs	r2, #83	; 0x53
 80030c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d143      	bne.n	800315c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4949      	ldr	r1, [pc, #292]	; (8003204 <HAL_RTC_SetAlarm+0x23c>)
 80030e0:	400a      	ands	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4946      	ldr	r1, [pc, #280]	; (8003208 <HAL_RTC_SetAlarm+0x240>)
 80030f0:	400a      	ands	r2, r1
 80030f2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80030f4:	f7fd ff12 	bl	8000f1c <HAL_GetTick>
 80030f8:	0003      	movs	r3, r0
 80030fa:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80030fc:	e016      	b.n	800312c <HAL_RTC_SetAlarm+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80030fe:	f7fd ff0d 	bl	8000f1c <HAL_GetTick>
 8003102:	0002      	movs	r2, r0
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	1ad2      	subs	r2, r2, r3
 8003108:	23fa      	movs	r3, #250	; 0xfa
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	429a      	cmp	r2, r3
 800310e:	d90d      	bls.n	800312c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	22ff      	movs	r2, #255	; 0xff
 8003116:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2221      	movs	r2, #33	; 0x21
 800311c:	2103      	movs	r1, #3
 800311e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	2100      	movs	r1, #0
 8003126:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e067      	b.n	80031fc <HAL_RTC_SetAlarm+0x234>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	4013      	ands	r3, r2
 8003136:	d0e2      	beq.n	80030fe <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	0049      	lsls	r1, r1, #1
 8003156:	430a      	orrs	r2, r1
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	e042      	b.n	80031e2 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4929      	ldr	r1, [pc, #164]	; (800320c <HAL_RTC_SetAlarm+0x244>)
 8003168:	400a      	ands	r2, r1
 800316a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4926      	ldr	r1, [pc, #152]	; (8003210 <HAL_RTC_SetAlarm+0x248>)
 8003178:	400a      	ands	r2, r1
 800317a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800317c:	f7fd fece 	bl	8000f1c <HAL_GetTick>
 8003180:	0003      	movs	r3, r0
 8003182:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003184:	e016      	b.n	80031b4 <HAL_RTC_SetAlarm+0x1ec>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003186:	f7fd fec9 	bl	8000f1c <HAL_GetTick>
 800318a:	0002      	movs	r2, r0
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	1ad2      	subs	r2, r2, r3
 8003190:	23fa      	movs	r3, #250	; 0xfa
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	429a      	cmp	r2, r3
 8003196:	d90d      	bls.n	80031b4 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	22ff      	movs	r2, #255	; 0xff
 800319e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2221      	movs	r2, #33	; 0x21
 80031a4:	2103      	movs	r1, #3
 80031a6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	2100      	movs	r1, #0
 80031ae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e023      	b.n	80031fc <HAL_RTC_SetAlarm+0x234>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	2202      	movs	r2, #2
 80031bc:	4013      	ands	r3, r2
 80031be:	d0e2      	beq.n	8003186 <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69fa      	ldr	r2, [r7, #28]
 80031c6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2180      	movs	r1, #128	; 0x80
 80031dc:	0089      	lsls	r1, r1, #2
 80031de:	430a      	orrs	r2, r1
 80031e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	22ff      	movs	r2, #255	; 0xff
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2221      	movs	r2, #33	; 0x21
 80031ee:	2101      	movs	r1, #1
 80031f0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	2100      	movs	r1, #0
 80031f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	0018      	movs	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	b009      	add	sp, #36	; 0x24
 8003202:	bd90      	pop	{r4, r7, pc}
 8003204:	fffffeff 	.word	0xfffffeff
 8003208:	ffffefff 	.word	0xffffefff
 800320c:	fffffdff 	.word	0xfffffdff
 8003210:	ffffdfff 	.word	0xffffdfff

08003214 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	21a0      	movs	r1, #160	; 0xa0
 8003228:	438a      	bics	r2, r1
 800322a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800322c:	f7fd fe76 	bl	8000f1c <HAL_GetTick>
 8003230:	0003      	movs	r3, r0
 8003232:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003234:	e00a      	b.n	800324c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003236:	f7fd fe71 	bl	8000f1c <HAL_GetTick>
 800323a:	0002      	movs	r2, r0
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1ad2      	subs	r2, r2, r3
 8003240:	23fa      	movs	r3, #250	; 0xfa
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	429a      	cmp	r2, r3
 8003246:	d901      	bls.n	800324c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e006      	b.n	800325a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	4013      	ands	r3, r2
 8003256:	d0ee      	beq.n	8003236 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	0018      	movs	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	b004      	add	sp, #16
 8003260:	bd80      	pop	{r7, pc}

08003262 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2240      	movs	r2, #64	; 0x40
 8003272:	4013      	ands	r3, r2
 8003274:	d11a      	bne.n	80032ac <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2201      	movs	r2, #1
 800327c:	4252      	negs	r2, r2
 800327e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003280:	f7fd fe4c 	bl	8000f1c <HAL_GetTick>
 8003284:	0003      	movs	r3, r0
 8003286:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003288:	e00a      	b.n	80032a0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800328a:	f7fd fe47 	bl	8000f1c <HAL_GetTick>
 800328e:	0002      	movs	r2, r0
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1ad2      	subs	r2, r2, r3
 8003294:	23fa      	movs	r3, #250	; 0xfa
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	429a      	cmp	r2, r3
 800329a:	d901      	bls.n	80032a0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e006      	b.n	80032ae <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2240      	movs	r2, #64	; 0x40
 80032a8:	4013      	ands	r3, r2
 80032aa:	d0ee      	beq.n	800328a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	0018      	movs	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b004      	add	sp, #16
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	0002      	movs	r2, r0
 80032be:	1dfb      	adds	r3, r7, #7
 80032c0:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80032c6:	230b      	movs	r3, #11
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	1dfa      	adds	r2, r7, #7
 80032cc:	7812      	ldrb	r2, [r2, #0]
 80032ce:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80032d0:	e008      	b.n	80032e4 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3301      	adds	r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80032d8:	220b      	movs	r2, #11
 80032da:	18bb      	adds	r3, r7, r2
 80032dc:	18ba      	adds	r2, r7, r2
 80032de:	7812      	ldrb	r2, [r2, #0]
 80032e0:	3a0a      	subs	r2, #10
 80032e2:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80032e4:	230b      	movs	r3, #11
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b09      	cmp	r3, #9
 80032ec:	d8f1      	bhi.n	80032d2 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	230b      	movs	r3, #11
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	b2db      	uxtb	r3, r3
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b004      	add	sp, #16
 8003306:	bd80      	pop	{r7, pc}

08003308 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	0002      	movs	r2, r0
 8003310:	1dfb      	adds	r3, r7, #7
 8003312:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003314:	1dfb      	adds	r3, r7, #7
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	b2db      	uxtb	r3, r3
 800331c:	001a      	movs	r2, r3
 800331e:	0013      	movs	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	189b      	adds	r3, r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	b2da      	uxtb	r2, r3
 800332c:	1dfb      	adds	r3, r7, #7
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	210f      	movs	r1, #15
 8003332:	400b      	ands	r3, r1
 8003334:	b2db      	uxtb	r3, r3
 8003336:	18d3      	adds	r3, r2, r3
 8003338:	b2db      	uxtb	r3, r3
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b004      	add	sp, #16
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e01e      	b.n	8003392 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2239      	movs	r2, #57	; 0x39
 8003358:	5c9b      	ldrb	r3, [r3, r2]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d107      	bne.n	8003370 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2238      	movs	r2, #56	; 0x38
 8003364:	2100      	movs	r1, #0
 8003366:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	0018      	movs	r0, r3
 800336c:	f003 fa42 	bl	80067f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2239      	movs	r2, #57	; 0x39
 8003374:	2102      	movs	r1, #2
 8003376:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3304      	adds	r3, #4
 8003380:	0019      	movs	r1, r3
 8003382:	0010      	movs	r0, r2
 8003384:	f000 fcac 	bl	8003ce0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2239      	movs	r2, #57	; 0x39
 800338c:	2101      	movs	r1, #1
 800338e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	0018      	movs	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	b002      	add	sp, #8
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2101      	movs	r1, #1
 80033ae:	430a      	orrs	r2, r1
 80033b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2207      	movs	r2, #7
 80033ba:	4013      	ands	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b06      	cmp	r3, #6
 80033c2:	d007      	beq.n	80033d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2101      	movs	r1, #1
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	0018      	movs	r0, r3
 80033d8:	46bd      	mov	sp, r7
 80033da:	b004      	add	sp, #16
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e01e      	b.n	800342e <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2239      	movs	r2, #57	; 0x39
 80033f4:	5c9b      	ldrb	r3, [r3, r2]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d107      	bne.n	800340c <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2238      	movs	r2, #56	; 0x38
 8003400:	2100      	movs	r1, #0
 8003402:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	0018      	movs	r0, r3
 8003408:	f003 fa38 	bl	800687c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2239      	movs	r2, #57	; 0x39
 8003410:	2102      	movs	r1, #2
 8003412:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	0019      	movs	r1, r3
 800341e:	0010      	movs	r0, r2
 8003420:	f000 fc5e 	bl	8003ce0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2239      	movs	r2, #57	; 0x39
 8003428:	2101      	movs	r1, #1
 800342a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	0018      	movs	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	b002      	add	sp, #8
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e01e      	b.n	8003486 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2239      	movs	r2, #57	; 0x39
 800344c:	5c9b      	ldrb	r3, [r3, r2]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d107      	bne.n	8003464 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2238      	movs	r2, #56	; 0x38
 8003458:	2100      	movs	r1, #0
 800345a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	0018      	movs	r0, r3
 8003460:	f003 f9f4 	bl	800684c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2239      	movs	r2, #57	; 0x39
 8003468:	2102      	movs	r1, #2
 800346a:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	0019      	movs	r1, r3
 8003476:	0010      	movs	r0, r2
 8003478:	f000 fc32 	bl	8003ce0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2239      	movs	r2, #57	; 0x39
 8003480:	2101      	movs	r1, #1
 8003482:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	b002      	add	sp, #8
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	2201      	movs	r2, #1
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 fe9d 	bl	80041e0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2207      	movs	r2, #7
 80034ae:	4013      	ands	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b06      	cmp	r3, #6
 80034b6:	d007      	beq.n	80034c8 <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2101      	movs	r1, #1
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	0018      	movs	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b004      	add	sp, #16
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e07c      	b.n	80035e2 <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2239      	movs	r2, #57	; 0x39
 80034ec:	5c9b      	ldrb	r3, [r3, r2]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d107      	bne.n	8003504 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2238      	movs	r2, #56	; 0x38
 80034f8:	2100      	movs	r1, #0
 80034fa:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	0018      	movs	r0, r3
 8003500:	f003 f9dc 	bl	80068bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2239      	movs	r2, #57	; 0x39
 8003508:	2102      	movs	r1, #2
 800350a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4935      	ldr	r1, [pc, #212]	; (80035ec <HAL_TIM_Encoder_Init+0x118>)
 8003518:	400a      	ands	r2, r1
 800351a:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3304      	adds	r3, #4
 8003524:	0019      	movs	r1, r3
 8003526:	0010      	movs	r0, r2
 8003528:	f000 fbda 	bl	8003ce0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4a27      	ldr	r2, [pc, #156]	; (80035f0 <HAL_TIM_Encoder_Init+0x11c>)
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	4313      	orrs	r3, r2
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4a22      	ldr	r2, [pc, #136]	; (80035f4 <HAL_TIM_Encoder_Init+0x120>)
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4a21      	ldr	r2, [pc, #132]	; (80035f8 <HAL_TIM_Encoder_Init+0x124>)
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	4313      	orrs	r3, r2
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	011a      	lsls	r2, r3, #4
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	031b      	lsls	r3, r3, #12
 8003596:	4313      	orrs	r3, r2
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2222      	movs	r2, #34	; 0x22
 80035a2:	4393      	bics	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2288      	movs	r2, #136	; 0x88
 80035aa:	4393      	bics	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	4313      	orrs	r3, r2
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2239      	movs	r2, #57	; 0x39
 80035dc:	2101      	movs	r1, #1
 80035de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	0018      	movs	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b006      	add	sp, #24
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	ffffbff8 	.word	0xffffbff8
 80035f0:	fffffcfc 	.word	0xfffffcfc
 80035f4:	fffff3f3 	.word	0xfffff3f3
 80035f8:	ffff0f0f 	.word	0xffff0f0f

080035fc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_TIM_Encoder_Start_IT+0x16>
 800360c:	2b04      	cmp	r3, #4
 800360e:	d010      	beq.n	8003632 <HAL_TIM_Encoder_Start_IT+0x36>
 8003610:	e01f      	b.n	8003652 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2201      	movs	r2, #1
 8003618:	2100      	movs	r1, #0
 800361a:	0018      	movs	r0, r3
 800361c:	f000 fde0 	bl	80041e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2102      	movs	r1, #2
 800362c:	430a      	orrs	r2, r1
 800362e:	60da      	str	r2, [r3, #12]
      break;
 8003630:	e02e      	b.n	8003690 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2201      	movs	r2, #1
 8003638:	2104      	movs	r1, #4
 800363a:	0018      	movs	r0, r3
 800363c:	f000 fdd0 	bl	80041e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2104      	movs	r1, #4
 800364c:	430a      	orrs	r2, r1
 800364e:	60da      	str	r2, [r3, #12]
      break;
 8003650:	e01e      	b.n	8003690 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2201      	movs	r2, #1
 8003658:	2100      	movs	r1, #0
 800365a:	0018      	movs	r0, r3
 800365c:	f000 fdc0 	bl	80041e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2201      	movs	r2, #1
 8003666:	2104      	movs	r1, #4
 8003668:	0018      	movs	r0, r3
 800366a:	f000 fdb9 	bl	80041e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2102      	movs	r1, #2
 800367a:	430a      	orrs	r2, r1
 800367c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2104      	movs	r1, #4
 800368a:	430a      	orrs	r2, r1
 800368c:	60da      	str	r2, [r3, #12]
      break;
 800368e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2101      	movs	r1, #1
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	0018      	movs	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b002      	add	sp, #8
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2202      	movs	r2, #2
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d124      	bne.n	800370a <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2202      	movs	r2, #2
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d11d      	bne.n	800370a <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2203      	movs	r2, #3
 80036d4:	4252      	negs	r2, r2
 80036d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	2203      	movs	r2, #3
 80036e6:	4013      	ands	r3, r2
 80036e8:	d004      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f000 fadf 	bl	8003cb0 <HAL_TIM_IC_CaptureCallback>
 80036f2:	e007      	b.n	8003704 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	0018      	movs	r0, r3
 80036f8:	f000 fad2 	bl	8003ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	0018      	movs	r0, r3
 8003700:	f000 fade 	bl	8003cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2204      	movs	r2, #4
 8003712:	4013      	ands	r3, r2
 8003714:	2b04      	cmp	r3, #4
 8003716:	d125      	bne.n	8003764 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2204      	movs	r2, #4
 8003720:	4013      	ands	r3, r2
 8003722:	2b04      	cmp	r3, #4
 8003724:	d11e      	bne.n	8003764 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2205      	movs	r2, #5
 800372c:	4252      	negs	r2, r2
 800372e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699a      	ldr	r2, [r3, #24]
 800373c:	23c0      	movs	r3, #192	; 0xc0
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4013      	ands	r3, r2
 8003742:	d004      	beq.n	800374e <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	0018      	movs	r0, r3
 8003748:	f000 fab2 	bl	8003cb0 <HAL_TIM_IC_CaptureCallback>
 800374c:	e007      	b.n	800375e <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	0018      	movs	r0, r3
 8003752:	f000 faa5 	bl	8003ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	0018      	movs	r0, r3
 800375a:	f000 fab1 	bl	8003cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2208      	movs	r2, #8
 800376c:	4013      	ands	r3, r2
 800376e:	2b08      	cmp	r3, #8
 8003770:	d124      	bne.n	80037bc <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	2208      	movs	r2, #8
 800377a:	4013      	ands	r3, r2
 800377c:	2b08      	cmp	r3, #8
 800377e:	d11d      	bne.n	80037bc <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2209      	movs	r2, #9
 8003786:	4252      	negs	r2, r2
 8003788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2204      	movs	r2, #4
 800378e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	2203      	movs	r2, #3
 8003798:	4013      	ands	r3, r2
 800379a:	d004      	beq.n	80037a6 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	0018      	movs	r0, r3
 80037a0:	f000 fa86 	bl	8003cb0 <HAL_TIM_IC_CaptureCallback>
 80037a4:	e007      	b.n	80037b6 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	0018      	movs	r0, r3
 80037aa:	f000 fa79 	bl	8003ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f000 fa85 	bl	8003cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2210      	movs	r2, #16
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d125      	bne.n	8003816 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	2210      	movs	r2, #16
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d11e      	bne.n	8003816 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2211      	movs	r2, #17
 80037de:	4252      	negs	r2, r2
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2208      	movs	r2, #8
 80037e6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69da      	ldr	r2, [r3, #28]
 80037ee:	23c0      	movs	r3, #192	; 0xc0
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4013      	ands	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	0018      	movs	r0, r3
 80037fa:	f000 fa59 	bl	8003cb0 <HAL_TIM_IC_CaptureCallback>
 80037fe:	e007      	b.n	8003810 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	0018      	movs	r0, r3
 8003804:	f000 fa4c 	bl	8003ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	0018      	movs	r0, r3
 800380c:	f000 fa58 	bl	8003cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2201      	movs	r2, #1
 800381e:	4013      	ands	r3, r2
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10f      	bne.n	8003844 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	4013      	ands	r3, r2
 800382e:	2b01      	cmp	r3, #1
 8003830:	d108      	bne.n	8003844 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2202      	movs	r2, #2
 8003838:	4252      	negs	r2, r2
 800383a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	0018      	movs	r0, r3
 8003840:	f000 fa26 	bl	8003c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2240      	movs	r2, #64	; 0x40
 800384c:	4013      	ands	r3, r2
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d10f      	bne.n	8003872 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2240      	movs	r2, #64	; 0x40
 800385a:	4013      	ands	r3, r2
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d108      	bne.n	8003872 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2241      	movs	r2, #65	; 0x41
 8003866:	4252      	negs	r2, r2
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	0018      	movs	r0, r3
 800386e:	f000 fa2f 	bl	8003cd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2238      	movs	r2, #56	; 0x38
 800388a:	5c9b      	ldrb	r3, [r3, r2]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003890:	2302      	movs	r3, #2
 8003892:	e03c      	b.n	800390e <HAL_TIM_OC_ConfigChannel+0x94>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2238      	movs	r2, #56	; 0x38
 8003898:	2101      	movs	r1, #1
 800389a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2239      	movs	r2, #57	; 0x39
 80038a0:	2102      	movs	r1, #2
 80038a2:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d010      	beq.n	80038cc <HAL_TIM_OC_ConfigChannel+0x52>
 80038aa:	d802      	bhi.n	80038b2 <HAL_TIM_OC_ConfigChannel+0x38>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 80038b0:	e024      	b.n	80038fc <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d012      	beq.n	80038dc <HAL_TIM_OC_ConfigChannel+0x62>
 80038b6:	2b0c      	cmp	r3, #12
 80038b8:	d018      	beq.n	80038ec <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 80038ba:	e01f      	b.n	80038fc <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	0011      	movs	r1, r2
 80038c4:	0018      	movs	r0, r3
 80038c6:	f000 fa69 	bl	8003d9c <TIM_OC1_SetConfig>
      break;
 80038ca:	e017      	b.n	80038fc <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	0011      	movs	r1, r2
 80038d4:	0018      	movs	r0, r3
 80038d6:	f000 fa9d 	bl	8003e14 <TIM_OC2_SetConfig>
      break;
 80038da:	e00f      	b.n	80038fc <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	0011      	movs	r1, r2
 80038e4:	0018      	movs	r0, r3
 80038e6:	f000 fad7 	bl	8003e98 <TIM_OC3_SetConfig>
      break;
 80038ea:	e007      	b.n	80038fc <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	0011      	movs	r1, r2
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 fb0f 	bl	8003f18 <TIM_OC4_SetConfig>
      break;
 80038fa:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2239      	movs	r2, #57	; 0x39
 8003900:	2101      	movs	r1, #1
 8003902:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2238      	movs	r2, #56	; 0x38
 8003908:	2100      	movs	r1, #0
 800390a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b004      	add	sp, #16
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2238      	movs	r2, #56	; 0x38
 8003928:	5c9b      	ldrb	r3, [r3, r2]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800392e:	2302      	movs	r3, #2
 8003930:	e0a4      	b.n	8003a7c <HAL_TIM_PWM_ConfigChannel+0x164>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2238      	movs	r2, #56	; 0x38
 8003936:	2101      	movs	r1, #1
 8003938:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2239      	movs	r2, #57	; 0x39
 800393e:	2102      	movs	r1, #2
 8003940:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b04      	cmp	r3, #4
 8003946:	d029      	beq.n	800399c <HAL_TIM_PWM_ConfigChannel+0x84>
 8003948:	d802      	bhi.n	8003950 <HAL_TIM_PWM_ConfigChannel+0x38>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800394e:	e08c      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8003950:	2b08      	cmp	r3, #8
 8003952:	d046      	beq.n	80039e2 <HAL_TIM_PWM_ConfigChannel+0xca>
 8003954:	2b0c      	cmp	r3, #12
 8003956:	d065      	beq.n	8003a24 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8003958:	e087      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	0011      	movs	r1, r2
 8003962:	0018      	movs	r0, r3
 8003964:	f000 fa1a 	bl	8003d9c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2108      	movs	r1, #8
 8003974:	430a      	orrs	r2, r1
 8003976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2104      	movs	r1, #4
 8003984:	438a      	bics	r2, r1
 8003986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6999      	ldr	r1, [r3, #24]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	619a      	str	r2, [r3, #24]
      break;
 800399a:	e066      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	0011      	movs	r1, r2
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 fa35 	bl	8003e14 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699a      	ldr	r2, [r3, #24]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2180      	movs	r1, #128	; 0x80
 80039b6:	0109      	lsls	r1, r1, #4
 80039b8:	430a      	orrs	r2, r1
 80039ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	492f      	ldr	r1, [pc, #188]	; (8003a84 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80039c8:	400a      	ands	r2, r1
 80039ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6999      	ldr	r1, [r3, #24]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	021a      	lsls	r2, r3, #8
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	619a      	str	r2, [r3, #24]
      break;
 80039e0:	e043      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	0011      	movs	r1, r2
 80039ea:	0018      	movs	r0, r3
 80039ec:	f000 fa54 	bl	8003e98 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69da      	ldr	r2, [r3, #28]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2108      	movs	r1, #8
 80039fc:	430a      	orrs	r2, r1
 80039fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2104      	movs	r1, #4
 8003a0c:	438a      	bics	r2, r1
 8003a0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69d9      	ldr	r1, [r3, #28]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	61da      	str	r2, [r3, #28]
      break;
 8003a22:	e022      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	0011      	movs	r1, r2
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f000 fa73 	bl	8003f18 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69da      	ldr	r2, [r3, #28]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2180      	movs	r1, #128	; 0x80
 8003a3e:	0109      	lsls	r1, r1, #4
 8003a40:	430a      	orrs	r2, r1
 8003a42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69da      	ldr	r2, [r3, #28]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	490d      	ldr	r1, [pc, #52]	; (8003a84 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003a50:	400a      	ands	r2, r1
 8003a52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69d9      	ldr	r1, [r3, #28]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	021a      	lsls	r2, r3, #8
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	61da      	str	r2, [r3, #28]
      break;
 8003a68:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2239      	movs	r2, #57	; 0x39
 8003a6e:	2101      	movs	r1, #1
 8003a70:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2238      	movs	r2, #56	; 0x38
 8003a76:	2100      	movs	r1, #0
 8003a78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b004      	add	sp, #16
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	fffffbff 	.word	0xfffffbff

08003a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2238      	movs	r2, #56	; 0x38
 8003a96:	5c9b      	ldrb	r3, [r3, r2]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_TIM_ConfigClockSource+0x18>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e0ab      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x170>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2238      	movs	r2, #56	; 0x38
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2239      	movs	r2, #57	; 0x39
 8003aac:	2102      	movs	r1, #2
 8003aae:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2277      	movs	r2, #119	; 0x77
 8003abc:	4393      	bics	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4a4f      	ldr	r2, [pc, #316]	; (8003c00 <HAL_TIM_ConfigClockSource+0x178>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b40      	cmp	r3, #64	; 0x40
 8003ad6:	d100      	bne.n	8003ada <HAL_TIM_ConfigClockSource+0x52>
 8003ad8:	e06b      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x12a>
 8003ada:	d80e      	bhi.n	8003afa <HAL_TIM_ConfigClockSource+0x72>
 8003adc:	2b10      	cmp	r3, #16
 8003ade:	d100      	bne.n	8003ae2 <HAL_TIM_ConfigClockSource+0x5a>
 8003ae0:	e077      	b.n	8003bd2 <HAL_TIM_ConfigClockSource+0x14a>
 8003ae2:	d803      	bhi.n	8003aec <HAL_TIM_ConfigClockSource+0x64>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d100      	bne.n	8003aea <HAL_TIM_ConfigClockSource+0x62>
 8003ae8:	e073      	b.n	8003bd2 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003aea:	e07c      	b.n	8003be6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d100      	bne.n	8003af2 <HAL_TIM_ConfigClockSource+0x6a>
 8003af0:	e06f      	b.n	8003bd2 <HAL_TIM_ConfigClockSource+0x14a>
 8003af2:	2b30      	cmp	r3, #48	; 0x30
 8003af4:	d100      	bne.n	8003af8 <HAL_TIM_ConfigClockSource+0x70>
 8003af6:	e06c      	b.n	8003bd2 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003af8:	e075      	b.n	8003be6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003afa:	2b70      	cmp	r3, #112	; 0x70
 8003afc:	d00e      	beq.n	8003b1c <HAL_TIM_ConfigClockSource+0x94>
 8003afe:	d804      	bhi.n	8003b0a <HAL_TIM_ConfigClockSource+0x82>
 8003b00:	2b50      	cmp	r3, #80	; 0x50
 8003b02:	d036      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0xea>
 8003b04:	2b60      	cmp	r3, #96	; 0x60
 8003b06:	d044      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003b08:	e06d      	b.n	8003be6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003b0a:	2280      	movs	r2, #128	; 0x80
 8003b0c:	0152      	lsls	r2, r2, #5
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d068      	beq.n	8003be4 <HAL_TIM_ConfigClockSource+0x15c>
 8003b12:	2280      	movs	r2, #128	; 0x80
 8003b14:	0192      	lsls	r2, r2, #6
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d017      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8003b1a:	e064      	b.n	8003be6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	6899      	ldr	r1, [r3, #8]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f000 fb38 	bl	80041a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2277      	movs	r2, #119	; 0x77
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	609a      	str	r2, [r3, #8]
      break;
 8003b48:	e04d      	b.n	8003be6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6899      	ldr	r1, [r3, #8]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f000 fb21 	bl	80041a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2180      	movs	r1, #128	; 0x80
 8003b6a:	01c9      	lsls	r1, r1, #7
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]
      break;
 8003b70:	e039      	b.n	8003be6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6859      	ldr	r1, [r3, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	001a      	movs	r2, r3
 8003b80:	f000 fa94 	bl	80040ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2150      	movs	r1, #80	; 0x50
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f000 faee 	bl	800416c <TIM_ITRx_SetConfig>
      break;
 8003b90:	e029      	b.n	8003be6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	001a      	movs	r2, r3
 8003ba0:	f000 fab2 	bl	8004108 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2160      	movs	r1, #96	; 0x60
 8003baa:	0018      	movs	r0, r3
 8003bac:	f000 fade 	bl	800416c <TIM_ITRx_SetConfig>
      break;
 8003bb0:	e019      	b.n	8003be6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6859      	ldr	r1, [r3, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	001a      	movs	r2, r3
 8003bc0:	f000 fa74 	bl	80040ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2140      	movs	r1, #64	; 0x40
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 face 	bl	800416c <TIM_ITRx_SetConfig>
      break;
 8003bd0:	e009      	b.n	8003be6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	0019      	movs	r1, r3
 8003bdc:	0010      	movs	r0, r2
 8003bde:	f000 fac5 	bl	800416c <TIM_ITRx_SetConfig>
      break;
 8003be2:	e000      	b.n	8003be6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003be4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2239      	movs	r2, #57	; 0x39
 8003bea:	2101      	movs	r1, #1
 8003bec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2238      	movs	r2, #56	; 0x38
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b004      	add	sp, #16
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	ffff00ff 	.word	0xffff00ff

08003c04 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2238      	movs	r2, #56	; 0x38
 8003c12:	5c9b      	ldrb	r3, [r3, r2]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e032      	b.n	8003c82 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2238      	movs	r2, #56	; 0x38
 8003c20:	2101      	movs	r1, #1
 8003c22:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2239      	movs	r2, #57	; 0x39
 8003c28:	2102      	movs	r1, #2
 8003c2a:	5499      	strb	r1, [r3, r2]

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	0011      	movs	r1, r2
 8003c32:	0018      	movs	r0, r3
 8003c34:	f000 f9b6 	bl	8003fa4 <TIM_SlaveTimer_SetConfig>
 8003c38:	1e03      	subs	r3, r0, #0
 8003c3a:	d009      	beq.n	8003c50 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
      htim->State = HAL_TIM_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2239      	movs	r2, #57	; 0x39
 8003c40:	2101      	movs	r1, #1
 8003c42:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2238      	movs	r2, #56	; 0x38
 8003c48:	2100      	movs	r1, #0
 8003c4a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e018      	b.n	8003c82 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2140      	movs	r1, #64	; 0x40
 8003c5c:	438a      	bics	r2, r1
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4908      	ldr	r1, [pc, #32]	; (8003c8c <HAL_TIM_SlaveConfigSynchro+0x88>)
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2239      	movs	r2, #57	; 0x39
 8003c74:	2101      	movs	r1, #1
 8003c76:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2238      	movs	r2, #56	; 0x38
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	0018      	movs	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b002      	add	sp, #8
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	ffffbfff 	.word	0xffffbfff

08003c90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ca8:	46c0      	nop			; (mov r8, r8)
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b002      	add	sp, #8
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b002      	add	sp, #8
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b002      	add	sp, #8
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd8:	46c0      	nop			; (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b002      	add	sp, #8
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	05db      	lsls	r3, r3, #23
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d00b      	beq.n	8003d12 <TIM_Base_SetConfig+0x32>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a23      	ldr	r2, [pc, #140]	; (8003d8c <TIM_Base_SetConfig+0xac>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d007      	beq.n	8003d12 <TIM_Base_SetConfig+0x32>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a22      	ldr	r2, [pc, #136]	; (8003d90 <TIM_Base_SetConfig+0xb0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d003      	beq.n	8003d12 <TIM_Base_SetConfig+0x32>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a21      	ldr	r2, [pc, #132]	; (8003d94 <TIM_Base_SetConfig+0xb4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d108      	bne.n	8003d24 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2270      	movs	r2, #112	; 0x70
 8003d16:	4393      	bics	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	2380      	movs	r3, #128	; 0x80
 8003d28:	05db      	lsls	r3, r3, #23
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d00b      	beq.n	8003d46 <TIM_Base_SetConfig+0x66>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a16      	ldr	r2, [pc, #88]	; (8003d8c <TIM_Base_SetConfig+0xac>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d007      	beq.n	8003d46 <TIM_Base_SetConfig+0x66>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a15      	ldr	r2, [pc, #84]	; (8003d90 <TIM_Base_SetConfig+0xb0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d003      	beq.n	8003d46 <TIM_Base_SetConfig+0x66>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a14      	ldr	r2, [pc, #80]	; (8003d94 <TIM_Base_SetConfig+0xb4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d108      	bne.n	8003d58 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a13      	ldr	r2, [pc, #76]	; (8003d98 <TIM_Base_SetConfig+0xb8>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2280      	movs	r2, #128	; 0x80
 8003d5c:	4393      	bics	r3, r2
 8003d5e:	001a      	movs	r2, r3
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	615a      	str	r2, [r3, #20]
}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b004      	add	sp, #16
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40000400 	.word	0x40000400
 8003d90:	40010800 	.word	0x40010800
 8003d94:	40011400 	.word	0x40011400
 8003d98:	fffffcff 	.word	0xfffffcff

08003d9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	2201      	movs	r2, #1
 8003dac:	4393      	bics	r3, r2
 8003dae:	001a      	movs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2270      	movs	r2, #112	; 0x70
 8003dca:	4393      	bics	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	4393      	bics	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2202      	movs	r2, #2
 8003de4:	4393      	bics	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	621a      	str	r2, [r3, #32]
}
 8003e0c:	46c0      	nop			; (mov r8, r8)
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b006      	add	sp, #24
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	2210      	movs	r2, #16
 8003e24:	4393      	bics	r3, r2
 8003e26:	001a      	movs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4a13      	ldr	r2, [pc, #76]	; (8003e90 <TIM_OC2_SetConfig+0x7c>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4a12      	ldr	r2, [pc, #72]	; (8003e94 <TIM_OC2_SetConfig+0x80>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	4393      	bics	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	621a      	str	r2, [r3, #32]
}
 8003e88:	46c0      	nop			; (mov r8, r8)
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b006      	add	sp, #24
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	ffff8fff 	.word	0xffff8fff
 8003e94:	fffffcff 	.word	0xfffffcff

08003e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	4a1a      	ldr	r2, [pc, #104]	; (8003f10 <TIM_OC3_SetConfig+0x78>)
 8003ea8:	401a      	ands	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2270      	movs	r2, #112	; 0x70
 8003ec4:	4393      	bics	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2203      	movs	r2, #3
 8003ecc:	4393      	bics	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	4a0d      	ldr	r2, [pc, #52]	; (8003f14 <TIM_OC3_SetConfig+0x7c>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	621a      	str	r2, [r3, #32]
}
 8003f08:	46c0      	nop			; (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b006      	add	sp, #24
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	fffffeff 	.word	0xfffffeff
 8003f14:	fffffdff 	.word	0xfffffdff

08003f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	4a1b      	ldr	r2, [pc, #108]	; (8003f94 <TIM_OC4_SetConfig+0x7c>)
 8003f28:	401a      	ands	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4a15      	ldr	r2, [pc, #84]	; (8003f98 <TIM_OC4_SetConfig+0x80>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <TIM_OC4_SetConfig+0x84>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	4a10      	ldr	r2, [pc, #64]	; (8003fa0 <TIM_OC4_SetConfig+0x88>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	031b      	lsls	r3, r3, #12
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	621a      	str	r2, [r3, #32]
}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b006      	add	sp, #24
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	ffffefff 	.word	0xffffefff
 8003f98:	ffff8fff 	.word	0xffff8fff
 8003f9c:	fffffcff 	.word	0xfffffcff
 8003fa0:	ffffdfff 	.word	0xffffdfff

08003fa4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2270      	movs	r2, #112	; 0x70
 8003fba:	4393      	bics	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2207      	movs	r2, #7
 8003fcc:	4393      	bics	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b30      	cmp	r3, #48	; 0x30
 8003fe8:	d05a      	beq.n	80040a0 <TIM_SlaveTimer_SetConfig+0xfc>
 8003fea:	d806      	bhi.n	8003ffa <TIM_SlaveTimer_SetConfig+0x56>
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d057      	beq.n	80040a0 <TIM_SlaveTimer_SetConfig+0xfc>
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	d055      	beq.n	80040a0 <TIM_SlaveTimer_SetConfig+0xfc>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d053      	beq.n	80040a0 <TIM_SlaveTimer_SetConfig+0xfc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8003ff8:	e053      	b.n	80040a2 <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8003ffa:	2b50      	cmp	r3, #80	; 0x50
 8003ffc:	d03c      	beq.n	8004078 <TIM_SlaveTimer_SetConfig+0xd4>
 8003ffe:	d802      	bhi.n	8004006 <TIM_SlaveTimer_SetConfig+0x62>
 8004000:	2b40      	cmp	r3, #64	; 0x40
 8004002:	d010      	beq.n	8004026 <TIM_SlaveTimer_SetConfig+0x82>
      break;
 8004004:	e04d      	b.n	80040a2 <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8004006:	2b60      	cmp	r3, #96	; 0x60
 8004008:	d040      	beq.n	800408c <TIM_SlaveTimer_SetConfig+0xe8>
 800400a:	2b70      	cmp	r3, #112	; 0x70
 800400c:	d000      	beq.n	8004010 <TIM_SlaveTimer_SetConfig+0x6c>
      break;
 800400e:	e048      	b.n	80040a2 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68d9      	ldr	r1, [r3, #12]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f000 f8be 	bl	80041a0 <TIM_ETR_SetConfig>
      break;
 8004024:	e03d      	b.n	80040a2 <TIM_SlaveTimer_SetConfig+0xfe>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b05      	cmp	r3, #5
 800402c:	d101      	bne.n	8004032 <TIM_SlaveTimer_SetConfig+0x8e>
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e038      	b.n	80040a4 <TIM_SlaveTimer_SetConfig+0x100>
      tmpccer = htim->Instance->CCER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6a1a      	ldr	r2, [r3, #32]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2101      	movs	r1, #1
 8004046:	438a      	bics	r2, r1
 8004048:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	22f0      	movs	r2, #240	; 0xf0
 8004056:	4393      	bics	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	621a      	str	r2, [r3, #32]
      break;
 8004076:	e014      	b.n	80040a2 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	6899      	ldr	r1, [r3, #8]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	001a      	movs	r2, r3
 8004086:	f000 f811 	bl	80040ac <TIM_TI1_ConfigInputStage>
      break;
 800408a:	e00a      	b.n	80040a2 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	6899      	ldr	r1, [r3, #8]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	001a      	movs	r2, r3
 800409a:	f000 f835 	bl	8004108 <TIM_TI2_ConfigInputStage>
      break;
 800409e:	e000      	b.n	80040a2 <TIM_SlaveTimer_SetConfig+0xfe>
      break;
 80040a0:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	0018      	movs	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b006      	add	sp, #24
 80040aa:	bd80      	pop	{r7, pc}

080040ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	2201      	movs	r2, #1
 80040c4:	4393      	bics	r3, r2
 80040c6:	001a      	movs	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	22f0      	movs	r2, #240	; 0xf0
 80040d6:	4393      	bics	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	220a      	movs	r2, #10
 80040e8:	4393      	bics	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	621a      	str	r2, [r3, #32]
}
 8004100:	46c0      	nop			; (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	b006      	add	sp, #24
 8004106:	bd80      	pop	{r7, pc}

08004108 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	2210      	movs	r2, #16
 800411a:	4393      	bics	r3, r2
 800411c:	001a      	movs	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	4a0d      	ldr	r2, [pc, #52]	; (8004168 <TIM_TI2_ConfigInputStage+0x60>)
 8004132:	4013      	ands	r3, r2
 8004134:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	031b      	lsls	r3, r3, #12
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	22a0      	movs	r2, #160	; 0xa0
 8004144:	4393      	bics	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4313      	orrs	r3, r2
 8004150:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	46bd      	mov	sp, r7
 8004162:	b006      	add	sp, #24
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	ffff0fff 	.word	0xffff0fff

0800416c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2270      	movs	r2, #112	; 0x70
 8004180:	4393      	bics	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	2207      	movs	r2, #7
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	609a      	str	r2, [r3, #8]
}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	46bd      	mov	sp, r7
 800419a:	b004      	add	sp, #16
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	4a09      	ldr	r2, [pc, #36]	; (80041dc <TIM_ETR_SetConfig+0x3c>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	021a      	lsls	r2, r3, #8
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	609a      	str	r2, [r3, #8]
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b006      	add	sp, #24
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	ffff00ff 	.word	0xffff00ff

080041e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	221f      	movs	r2, #31
 80041f0:	4013      	ands	r3, r2
 80041f2:	2201      	movs	r2, #1
 80041f4:	409a      	lsls	r2, r3
 80041f6:	0013      	movs	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	43d2      	mvns	r2, r2
 8004202:	401a      	ands	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a1a      	ldr	r2, [r3, #32]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	211f      	movs	r1, #31
 8004210:	400b      	ands	r3, r1
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4099      	lsls	r1, r3
 8004216:	000b      	movs	r3, r1
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	621a      	str	r2, [r3, #32]
}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	46bd      	mov	sp, r7
 8004222:	b006      	add	sp, #24
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2238      	movs	r2, #56	; 0x38
 8004234:	5c9b      	ldrb	r3, [r3, r2]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800423a:	2302      	movs	r3, #2
 800423c:	e032      	b.n	80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2238      	movs	r2, #56	; 0x38
 8004242:	2101      	movs	r1, #1
 8004244:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2239      	movs	r2, #57	; 0x39
 800424a:	2102      	movs	r1, #2
 800424c:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2270      	movs	r2, #112	; 0x70
 8004262:	4393      	bics	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2280      	movs	r2, #128	; 0x80
 8004274:	4393      	bics	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	4313      	orrs	r3, r2
 8004280:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2239      	movs	r2, #57	; 0x39
 8004296:	2101      	movs	r1, #1
 8004298:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2238      	movs	r2, #56	; 0x38
 800429e:	2100      	movs	r1, #0
 80042a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	0018      	movs	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b004      	add	sp, #16
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2238      	movs	r2, #56	; 0x38
 80042ba:	5c9b      	ldrb	r3, [r3, r2]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_TIMEx_RemapConfig+0x18>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e00c      	b.n	80042de <HAL_TIMEx_RemapConfig+0x32>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2238      	movs	r2, #56	; 0x38
 80042c8:	2101      	movs	r1, #1
 80042ca:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2238      	movs	r2, #56	; 0x38
 80042d8:	2100      	movs	r1, #0
 80042da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	0018      	movs	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b002      	add	sp, #8
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e044      	b.n	8004384 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d107      	bne.n	8004312 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2270      	movs	r2, #112	; 0x70
 8004306:	2100      	movs	r1, #0
 8004308:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	0018      	movs	r0, r3
 800430e:	f002 fbab 	bl	8006a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2224      	movs	r2, #36	; 0x24
 8004316:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2101      	movs	r1, #1
 8004324:	438a      	bics	r2, r1
 8004326:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	0018      	movs	r0, r3
 800432c:	f000 f8d8 	bl	80044e0 <UART_SetConfig>
 8004330:	0003      	movs	r3, r0
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e024      	b.n	8004384 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	0018      	movs	r0, r3
 8004346:	f000 fbff 	bl	8004b48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	490d      	ldr	r1, [pc, #52]	; (800438c <HAL_UART_Init+0xa4>)
 8004356:	400a      	ands	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	212a      	movs	r1, #42	; 0x2a
 8004366:	438a      	bics	r2, r1
 8004368:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2101      	movs	r1, #1
 8004376:	430a      	orrs	r2, r1
 8004378:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	0018      	movs	r0, r3
 800437e:	f000 fc97 	bl	8004cb0 <UART_CheckIdleState>
 8004382:	0003      	movs	r3, r0
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	b002      	add	sp, #8
 800438a:	bd80      	pop	{r7, pc}
 800438c:	ffffb7ff 	.word	0xffffb7ff

08004390 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08a      	sub	sp, #40	; 0x28
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	1dbb      	adds	r3, r7, #6
 800439e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	d000      	beq.n	80043aa <HAL_UART_Transmit+0x1a>
 80043a8:	e094      	b.n	80044d4 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <HAL_UART_Transmit+0x28>
 80043b0:	1dbb      	adds	r3, r7, #6
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e08c      	b.n	80044d6 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	015b      	lsls	r3, r3, #5
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d109      	bne.n	80043dc <HAL_UART_Transmit+0x4c>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d105      	bne.n	80043dc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2201      	movs	r2, #1
 80043d4:	4013      	ands	r3, r2
 80043d6:	d001      	beq.n	80043dc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e07c      	b.n	80044d6 <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2270      	movs	r2, #112	; 0x70
 80043e0:	5c9b      	ldrb	r3, [r3, r2]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_UART_Transmit+0x5a>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e075      	b.n	80044d6 <HAL_UART_Transmit+0x146>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2270      	movs	r2, #112	; 0x70
 80043ee:	2101      	movs	r1, #1
 80043f0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2221      	movs	r2, #33	; 0x21
 80043fc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80043fe:	f7fc fd8d 	bl	8000f1c <HAL_GetTick>
 8004402:	0003      	movs	r3, r0
 8004404:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1dba      	adds	r2, r7, #6
 800440a:	2150      	movs	r1, #80	; 0x50
 800440c:	8812      	ldrh	r2, [r2, #0]
 800440e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	1dba      	adds	r2, r7, #6
 8004414:	2152      	movs	r1, #82	; 0x52
 8004416:	8812      	ldrh	r2, [r2, #0]
 8004418:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	2380      	movs	r3, #128	; 0x80
 8004420:	015b      	lsls	r3, r3, #5
 8004422:	429a      	cmp	r2, r3
 8004424:	d108      	bne.n	8004438 <HAL_UART_Transmit+0xa8>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d104      	bne.n	8004438 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	e003      	b.n	8004440 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800443c:	2300      	movs	r3, #0
 800443e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004440:	e02c      	b.n	800449c <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	0013      	movs	r3, r2
 800444c:	2200      	movs	r2, #0
 800444e:	2180      	movs	r1, #128	; 0x80
 8004450:	f000 fc74 	bl	8004d3c <UART_WaitOnFlagUntilTimeout>
 8004454:	1e03      	subs	r3, r0, #0
 8004456:	d001      	beq.n	800445c <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e03c      	b.n	80044d6 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10b      	bne.n	800447a <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	001a      	movs	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	05d2      	lsls	r2, r2, #23
 800446e:	0dd2      	lsrs	r2, r2, #23
 8004470:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	3302      	adds	r3, #2
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	e007      	b.n	800448a <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	781a      	ldrb	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	3301      	adds	r3, #1
 8004488:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2252      	movs	r2, #82	; 0x52
 800448e:	5a9b      	ldrh	r3, [r3, r2]
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b299      	uxth	r1, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2252      	movs	r2, #82	; 0x52
 800449a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2252      	movs	r2, #82	; 0x52
 80044a0:	5a9b      	ldrh	r3, [r3, r2]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1cc      	bne.n	8004442 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	0013      	movs	r3, r2
 80044b2:	2200      	movs	r2, #0
 80044b4:	2140      	movs	r1, #64	; 0x40
 80044b6:	f000 fc41 	bl	8004d3c <UART_WaitOnFlagUntilTimeout>
 80044ba:	1e03      	subs	r3, r0, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e009      	b.n	80044d6 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2270      	movs	r2, #112	; 0x70
 80044cc:	2100      	movs	r1, #0
 80044ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	e000      	b.n	80044d6 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
  }
}
 80044d6:	0018      	movs	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	b008      	add	sp, #32
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e0:	b5b0      	push	{r4, r5, r7, lr}
 80044e2:	b08e      	sub	sp, #56	; 0x38
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80044e8:	231b      	movs	r3, #27
 80044ea:	2218      	movs	r2, #24
 80044ec:	4694      	mov	ip, r2
 80044ee:	44bc      	add	ip, r7
 80044f0:	4463      	add	r3, ip
 80044f2:	2210      	movs	r2, #16
 80044f4:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80044fa:	2313      	movs	r3, #19
 80044fc:	2218      	movs	r2, #24
 80044fe:	4694      	mov	ip, r2
 8004500:	44bc      	add	ip, r7
 8004502:	4463      	add	r3, ip
 8004504:	2200      	movs	r2, #0
 8004506:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004508:	2300      	movs	r3, #0
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	431a      	orrs	r2, r3
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	431a      	orrs	r2, r3
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	4313      	orrs	r3, r2
 8004522:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4aca      	ldr	r2, [pc, #808]	; (8004854 <UART_SetConfig+0x374>)
 800452c:	4013      	ands	r3, r2
 800452e:	0019      	movs	r1, r3
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004536:	430a      	orrs	r2, r1
 8004538:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4ac5      	ldr	r2, [pc, #788]	; (8004858 <UART_SetConfig+0x378>)
 8004542:	4013      	ands	r3, r2
 8004544:	0019      	movs	r1, r3
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4abf      	ldr	r2, [pc, #764]	; (800485c <UART_SetConfig+0x37c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004568:	4313      	orrs	r3, r2
 800456a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	4abb      	ldr	r2, [pc, #748]	; (8004860 <UART_SetConfig+0x380>)
 8004574:	4013      	ands	r3, r2
 8004576:	0019      	movs	r1, r3
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800457e:	430a      	orrs	r2, r1
 8004580:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4ab7      	ldr	r2, [pc, #732]	; (8004864 <UART_SetConfig+0x384>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d134      	bne.n	80045f6 <UART_SetConfig+0x116>
 800458c:	4bb6      	ldr	r3, [pc, #728]	; (8004868 <UART_SetConfig+0x388>)
 800458e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004590:	2203      	movs	r2, #3
 8004592:	4013      	ands	r3, r2
 8004594:	2b01      	cmp	r3, #1
 8004596:	d015      	beq.n	80045c4 <UART_SetConfig+0xe4>
 8004598:	d304      	bcc.n	80045a4 <UART_SetConfig+0xc4>
 800459a:	2b02      	cmp	r3, #2
 800459c:	d00a      	beq.n	80045b4 <UART_SetConfig+0xd4>
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d018      	beq.n	80045d4 <UART_SetConfig+0xf4>
 80045a2:	e01f      	b.n	80045e4 <UART_SetConfig+0x104>
 80045a4:	231b      	movs	r3, #27
 80045a6:	2218      	movs	r2, #24
 80045a8:	4694      	mov	ip, r2
 80045aa:	44bc      	add	ip, r7
 80045ac:	4463      	add	r3, ip
 80045ae:	2201      	movs	r2, #1
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	e0c5      	b.n	8004740 <UART_SetConfig+0x260>
 80045b4:	231b      	movs	r3, #27
 80045b6:	2218      	movs	r2, #24
 80045b8:	4694      	mov	ip, r2
 80045ba:	44bc      	add	ip, r7
 80045bc:	4463      	add	r3, ip
 80045be:	2202      	movs	r2, #2
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	e0bd      	b.n	8004740 <UART_SetConfig+0x260>
 80045c4:	231b      	movs	r3, #27
 80045c6:	2218      	movs	r2, #24
 80045c8:	4694      	mov	ip, r2
 80045ca:	44bc      	add	ip, r7
 80045cc:	4463      	add	r3, ip
 80045ce:	2204      	movs	r2, #4
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	e0b5      	b.n	8004740 <UART_SetConfig+0x260>
 80045d4:	231b      	movs	r3, #27
 80045d6:	2218      	movs	r2, #24
 80045d8:	4694      	mov	ip, r2
 80045da:	44bc      	add	ip, r7
 80045dc:	4463      	add	r3, ip
 80045de:	2208      	movs	r2, #8
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	e0ad      	b.n	8004740 <UART_SetConfig+0x260>
 80045e4:	231b      	movs	r3, #27
 80045e6:	2218      	movs	r2, #24
 80045e8:	4694      	mov	ip, r2
 80045ea:	44bc      	add	ip, r7
 80045ec:	4463      	add	r3, ip
 80045ee:	2210      	movs	r2, #16
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	e0a4      	b.n	8004740 <UART_SetConfig+0x260>
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a9c      	ldr	r2, [pc, #624]	; (800486c <UART_SetConfig+0x38c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d137      	bne.n	8004670 <UART_SetConfig+0x190>
 8004600:	4b99      	ldr	r3, [pc, #612]	; (8004868 <UART_SetConfig+0x388>)
 8004602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004604:	220c      	movs	r2, #12
 8004606:	4013      	ands	r3, r2
 8004608:	2b04      	cmp	r3, #4
 800460a:	d018      	beq.n	800463e <UART_SetConfig+0x15e>
 800460c:	d802      	bhi.n	8004614 <UART_SetConfig+0x134>
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <UART_SetConfig+0x13e>
 8004612:	e024      	b.n	800465e <UART_SetConfig+0x17e>
 8004614:	2b08      	cmp	r3, #8
 8004616:	d00a      	beq.n	800462e <UART_SetConfig+0x14e>
 8004618:	2b0c      	cmp	r3, #12
 800461a:	d018      	beq.n	800464e <UART_SetConfig+0x16e>
 800461c:	e01f      	b.n	800465e <UART_SetConfig+0x17e>
 800461e:	231b      	movs	r3, #27
 8004620:	2218      	movs	r2, #24
 8004622:	4694      	mov	ip, r2
 8004624:	44bc      	add	ip, r7
 8004626:	4463      	add	r3, ip
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	e088      	b.n	8004740 <UART_SetConfig+0x260>
 800462e:	231b      	movs	r3, #27
 8004630:	2218      	movs	r2, #24
 8004632:	4694      	mov	ip, r2
 8004634:	44bc      	add	ip, r7
 8004636:	4463      	add	r3, ip
 8004638:	2202      	movs	r2, #2
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	e080      	b.n	8004740 <UART_SetConfig+0x260>
 800463e:	231b      	movs	r3, #27
 8004640:	2218      	movs	r2, #24
 8004642:	4694      	mov	ip, r2
 8004644:	44bc      	add	ip, r7
 8004646:	4463      	add	r3, ip
 8004648:	2204      	movs	r2, #4
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	e078      	b.n	8004740 <UART_SetConfig+0x260>
 800464e:	231b      	movs	r3, #27
 8004650:	2218      	movs	r2, #24
 8004652:	4694      	mov	ip, r2
 8004654:	44bc      	add	ip, r7
 8004656:	4463      	add	r3, ip
 8004658:	2208      	movs	r2, #8
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e070      	b.n	8004740 <UART_SetConfig+0x260>
 800465e:	231b      	movs	r3, #27
 8004660:	2218      	movs	r2, #24
 8004662:	4694      	mov	ip, r2
 8004664:	44bc      	add	ip, r7
 8004666:	4463      	add	r3, ip
 8004668:	2210      	movs	r2, #16
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	e067      	b.n	8004740 <UART_SetConfig+0x260>
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a7e      	ldr	r2, [pc, #504]	; (8004870 <UART_SetConfig+0x390>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d107      	bne.n	800468a <UART_SetConfig+0x1aa>
 800467a:	231b      	movs	r3, #27
 800467c:	2218      	movs	r2, #24
 800467e:	4694      	mov	ip, r2
 8004680:	44bc      	add	ip, r7
 8004682:	4463      	add	r3, ip
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	e05a      	b.n	8004740 <UART_SetConfig+0x260>
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a79      	ldr	r2, [pc, #484]	; (8004874 <UART_SetConfig+0x394>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d107      	bne.n	80046a4 <UART_SetConfig+0x1c4>
 8004694:	231b      	movs	r3, #27
 8004696:	2218      	movs	r2, #24
 8004698:	4694      	mov	ip, r2
 800469a:	44bc      	add	ip, r7
 800469c:	4463      	add	r3, ip
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	e04d      	b.n	8004740 <UART_SetConfig+0x260>
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a6c      	ldr	r2, [pc, #432]	; (800485c <UART_SetConfig+0x37c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d141      	bne.n	8004732 <UART_SetConfig+0x252>
 80046ae:	4b6e      	ldr	r3, [pc, #440]	; (8004868 <UART_SetConfig+0x388>)
 80046b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046b2:	23c0      	movs	r3, #192	; 0xc0
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	4013      	ands	r3, r2
 80046b8:	2280      	movs	r2, #128	; 0x80
 80046ba:	00d2      	lsls	r2, r2, #3
 80046bc:	4293      	cmp	r3, r2
 80046be:	d01f      	beq.n	8004700 <UART_SetConfig+0x220>
 80046c0:	2280      	movs	r2, #128	; 0x80
 80046c2:	00d2      	lsls	r2, r2, #3
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d802      	bhi.n	80046ce <UART_SetConfig+0x1ee>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d009      	beq.n	80046e0 <UART_SetConfig+0x200>
 80046cc:	e028      	b.n	8004720 <UART_SetConfig+0x240>
 80046ce:	2280      	movs	r2, #128	; 0x80
 80046d0:	0112      	lsls	r2, r2, #4
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00c      	beq.n	80046f0 <UART_SetConfig+0x210>
 80046d6:	22c0      	movs	r2, #192	; 0xc0
 80046d8:	0112      	lsls	r2, r2, #4
 80046da:	4293      	cmp	r3, r2
 80046dc:	d018      	beq.n	8004710 <UART_SetConfig+0x230>
 80046de:	e01f      	b.n	8004720 <UART_SetConfig+0x240>
 80046e0:	231b      	movs	r3, #27
 80046e2:	2218      	movs	r2, #24
 80046e4:	4694      	mov	ip, r2
 80046e6:	44bc      	add	ip, r7
 80046e8:	4463      	add	r3, ip
 80046ea:	2200      	movs	r2, #0
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	e027      	b.n	8004740 <UART_SetConfig+0x260>
 80046f0:	231b      	movs	r3, #27
 80046f2:	2218      	movs	r2, #24
 80046f4:	4694      	mov	ip, r2
 80046f6:	44bc      	add	ip, r7
 80046f8:	4463      	add	r3, ip
 80046fa:	2202      	movs	r2, #2
 80046fc:	701a      	strb	r2, [r3, #0]
 80046fe:	e01f      	b.n	8004740 <UART_SetConfig+0x260>
 8004700:	231b      	movs	r3, #27
 8004702:	2218      	movs	r2, #24
 8004704:	4694      	mov	ip, r2
 8004706:	44bc      	add	ip, r7
 8004708:	4463      	add	r3, ip
 800470a:	2204      	movs	r2, #4
 800470c:	701a      	strb	r2, [r3, #0]
 800470e:	e017      	b.n	8004740 <UART_SetConfig+0x260>
 8004710:	231b      	movs	r3, #27
 8004712:	2218      	movs	r2, #24
 8004714:	4694      	mov	ip, r2
 8004716:	44bc      	add	ip, r7
 8004718:	4463      	add	r3, ip
 800471a:	2208      	movs	r2, #8
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e00f      	b.n	8004740 <UART_SetConfig+0x260>
 8004720:	231b      	movs	r3, #27
 8004722:	2218      	movs	r2, #24
 8004724:	4694      	mov	ip, r2
 8004726:	44bc      	add	ip, r7
 8004728:	4463      	add	r3, ip
 800472a:	2210      	movs	r2, #16
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	e006      	b.n	8004740 <UART_SetConfig+0x260>
 8004732:	231b      	movs	r3, #27
 8004734:	2218      	movs	r2, #24
 8004736:	4694      	mov	ip, r2
 8004738:	44bc      	add	ip, r7
 800473a:	4463      	add	r3, ip
 800473c:	2210      	movs	r2, #16
 800473e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a45      	ldr	r2, [pc, #276]	; (800485c <UART_SetConfig+0x37c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d000      	beq.n	800474c <UART_SetConfig+0x26c>
 800474a:	e09d      	b.n	8004888 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800474c:	231b      	movs	r3, #27
 800474e:	2218      	movs	r2, #24
 8004750:	4694      	mov	ip, r2
 8004752:	44bc      	add	ip, r7
 8004754:	4463      	add	r3, ip
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d00d      	beq.n	8004778 <UART_SetConfig+0x298>
 800475c:	dc02      	bgt.n	8004764 <UART_SetConfig+0x284>
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <UART_SetConfig+0x28e>
 8004762:	e01d      	b.n	80047a0 <UART_SetConfig+0x2c0>
 8004764:	2b04      	cmp	r3, #4
 8004766:	d012      	beq.n	800478e <UART_SetConfig+0x2ae>
 8004768:	2b08      	cmp	r3, #8
 800476a:	d015      	beq.n	8004798 <UART_SetConfig+0x2b8>
 800476c:	e018      	b.n	80047a0 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800476e:	f7fd ffd1 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8004772:	0003      	movs	r3, r0
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004776:	e01b      	b.n	80047b0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004778:	4b3b      	ldr	r3, [pc, #236]	; (8004868 <UART_SetConfig+0x388>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2210      	movs	r2, #16
 800477e:	4013      	ands	r3, r2
 8004780:	d002      	beq.n	8004788 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8004782:	4b3d      	ldr	r3, [pc, #244]	; (8004878 <UART_SetConfig+0x398>)
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8004786:	e013      	b.n	80047b0 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004788:	4b3c      	ldr	r3, [pc, #240]	; (800487c <UART_SetConfig+0x39c>)
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800478c:	e010      	b.n	80047b0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800478e:	f7fd ff33 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 8004792:	0003      	movs	r3, r0
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004796:	e00b      	b.n	80047b0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004798:	2380      	movs	r3, #128	; 0x80
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800479e:	e007      	b.n	80047b0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80047a0:	2313      	movs	r3, #19
 80047a2:	2218      	movs	r2, #24
 80047a4:	4694      	mov	ip, r2
 80047a6:	44bc      	add	ip, r7
 80047a8:	4463      	add	r3, ip
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
        break;
 80047ae:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d100      	bne.n	80047b8 <UART_SetConfig+0x2d8>
 80047b6:	e1a6      	b.n	8004b06 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	0013      	movs	r3, r2
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	189b      	adds	r3, r3, r2
 80047c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d305      	bcc.n	80047d4 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d907      	bls.n	80047e4 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 80047d4:	2313      	movs	r3, #19
 80047d6:	2218      	movs	r2, #24
 80047d8:	4694      	mov	ip, r2
 80047da:	44bc      	add	ip, r7
 80047dc:	4463      	add	r3, ip
 80047de:	2201      	movs	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	e190      	b.n	8004b06 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	2300      	movs	r3, #0
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	6939      	ldr	r1, [r7, #16]
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	000b      	movs	r3, r1
 80047f2:	0e1b      	lsrs	r3, r3, #24
 80047f4:	0010      	movs	r0, r2
 80047f6:	0205      	lsls	r5, r0, #8
 80047f8:	431d      	orrs	r5, r3
 80047fa:	000b      	movs	r3, r1
 80047fc:	021c      	lsls	r4, r3, #8
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	085b      	lsrs	r3, r3, #1
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	68b8      	ldr	r0, [r7, #8]
 800480c:	68f9      	ldr	r1, [r7, #12]
 800480e:	1900      	adds	r0, r0, r4
 8004810:	4169      	adcs	r1, r5
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	2300      	movs	r3, #0
 800481a:	607b      	str	r3, [r7, #4]
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f7fb fe60 	bl	80004e4 <__aeabi_uldivmod>
 8004824:	0003      	movs	r3, r0
 8004826:	000c      	movs	r4, r1
 8004828:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	4a14      	ldr	r2, [pc, #80]	; (8004880 <UART_SetConfig+0x3a0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d908      	bls.n	8004844 <UART_SetConfig+0x364>
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	4a13      	ldr	r2, [pc, #76]	; (8004884 <UART_SetConfig+0x3a4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d804      	bhi.n	8004844 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004840:	60da      	str	r2, [r3, #12]
 8004842:	e160      	b.n	8004b06 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8004844:	2313      	movs	r3, #19
 8004846:	2218      	movs	r2, #24
 8004848:	4694      	mov	ip, r2
 800484a:	44bc      	add	ip, r7
 800484c:	4463      	add	r3, ip
 800484e:	2201      	movs	r2, #1
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	e158      	b.n	8004b06 <UART_SetConfig+0x626>
 8004854:	efff69f3 	.word	0xefff69f3
 8004858:	ffffcfff 	.word	0xffffcfff
 800485c:	40004800 	.word	0x40004800
 8004860:	fffff4ff 	.word	0xfffff4ff
 8004864:	40013800 	.word	0x40013800
 8004868:	40021000 	.word	0x40021000
 800486c:	40004400 	.word	0x40004400
 8004870:	40004c00 	.word	0x40004c00
 8004874:	40005000 	.word	0x40005000
 8004878:	003d0900 	.word	0x003d0900
 800487c:	00f42400 	.word	0x00f42400
 8004880:	000002ff 	.word	0x000002ff
 8004884:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	429a      	cmp	r2, r3
 8004892:	d000      	beq.n	8004896 <UART_SetConfig+0x3b6>
 8004894:	e0a9      	b.n	80049ea <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8004896:	231b      	movs	r3, #27
 8004898:	2218      	movs	r2, #24
 800489a:	4694      	mov	ip, r2
 800489c:	44bc      	add	ip, r7
 800489e:	4463      	add	r3, ip
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d86d      	bhi.n	8004982 <UART_SetConfig+0x4a2>
 80048a6:	009a      	lsls	r2, r3, #2
 80048a8:	4b9f      	ldr	r3, [pc, #636]	; (8004b28 <UART_SetConfig+0x648>)
 80048aa:	18d3      	adds	r3, r2, r3
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80048b0:	f7fd ff30 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 80048b4:	0003      	movs	r3, r0
 80048b6:	005a      	lsls	r2, r3, #1
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	085b      	lsrs	r3, r3, #1
 80048be:	18d2      	adds	r2, r2, r3
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	0019      	movs	r1, r3
 80048c6:	0010      	movs	r0, r2
 80048c8:	f7fb fc1e 	bl	8000108 <__udivsi3>
 80048cc:	0003      	movs	r3, r0
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048d2:	e05e      	b.n	8004992 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80048d4:	f7fd ff34 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 80048d8:	0003      	movs	r3, r0
 80048da:	005a      	lsls	r2, r3, #1
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	18d2      	adds	r2, r2, r3
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	0019      	movs	r1, r3
 80048ea:	0010      	movs	r0, r2
 80048ec:	f7fb fc0c 	bl	8000108 <__udivsi3>
 80048f0:	0003      	movs	r3, r0
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048f6:	e04c      	b.n	8004992 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048f8:	4b8c      	ldr	r3, [pc, #560]	; (8004b2c <UART_SetConfig+0x64c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2210      	movs	r2, #16
 80048fe:	4013      	ands	r3, r2
 8004900:	d00e      	beq.n	8004920 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	085b      	lsrs	r3, r3, #1
 8004908:	4a89      	ldr	r2, [pc, #548]	; (8004b30 <UART_SetConfig+0x650>)
 800490a:	189a      	adds	r2, r3, r2
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	0019      	movs	r1, r3
 8004912:	0010      	movs	r0, r2
 8004914:	f7fb fbf8 	bl	8000108 <__udivsi3>
 8004918:	0003      	movs	r3, r0
 800491a:	b29b      	uxth	r3, r3
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800491e:	e038      	b.n	8004992 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	4a83      	ldr	r2, [pc, #524]	; (8004b34 <UART_SetConfig+0x654>)
 8004928:	189a      	adds	r2, r3, r2
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	0019      	movs	r1, r3
 8004930:	0010      	movs	r0, r2
 8004932:	f7fb fbe9 	bl	8000108 <__udivsi3>
 8004936:	0003      	movs	r3, r0
 8004938:	b29b      	uxth	r3, r3
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800493c:	e029      	b.n	8004992 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800493e:	f7fd fe5b 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 8004942:	0003      	movs	r3, r0
 8004944:	005a      	lsls	r2, r3, #1
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	18d2      	adds	r2, r2, r3
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	0019      	movs	r1, r3
 8004954:	0010      	movs	r0, r2
 8004956:	f7fb fbd7 	bl	8000108 <__udivsi3>
 800495a:	0003      	movs	r3, r0
 800495c:	b29b      	uxth	r3, r3
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004960:	e017      	b.n	8004992 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	2280      	movs	r2, #128	; 0x80
 800496a:	0252      	lsls	r2, r2, #9
 800496c:	189a      	adds	r2, r3, r2
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	0019      	movs	r1, r3
 8004974:	0010      	movs	r0, r2
 8004976:	f7fb fbc7 	bl	8000108 <__udivsi3>
 800497a:	0003      	movs	r3, r0
 800497c:	b29b      	uxth	r3, r3
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004980:	e007      	b.n	8004992 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004982:	2313      	movs	r3, #19
 8004984:	2218      	movs	r2, #24
 8004986:	4694      	mov	ip, r2
 8004988:	44bc      	add	ip, r7
 800498a:	4463      	add	r3, ip
 800498c:	2201      	movs	r2, #1
 800498e:	701a      	strb	r2, [r3, #0]
        break;
 8004990:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	2b0f      	cmp	r3, #15
 8004996:	d920      	bls.n	80049da <UART_SetConfig+0x4fa>
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499a:	4a67      	ldr	r2, [pc, #412]	; (8004b38 <UART_SetConfig+0x658>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d81c      	bhi.n	80049da <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	200a      	movs	r0, #10
 80049a6:	2418      	movs	r4, #24
 80049a8:	193b      	adds	r3, r7, r4
 80049aa:	181b      	adds	r3, r3, r0
 80049ac:	210f      	movs	r1, #15
 80049ae:	438a      	bics	r2, r1
 80049b0:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b4:	085b      	lsrs	r3, r3, #1
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2207      	movs	r2, #7
 80049ba:	4013      	ands	r3, r2
 80049bc:	b299      	uxth	r1, r3
 80049be:	193b      	adds	r3, r7, r4
 80049c0:	181b      	adds	r3, r3, r0
 80049c2:	193a      	adds	r2, r7, r4
 80049c4:	1812      	adds	r2, r2, r0
 80049c6:	8812      	ldrh	r2, [r2, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	193a      	adds	r2, r7, r4
 80049d2:	1812      	adds	r2, r2, r0
 80049d4:	8812      	ldrh	r2, [r2, #0]
 80049d6:	60da      	str	r2, [r3, #12]
 80049d8:	e095      	b.n	8004b06 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80049da:	2313      	movs	r3, #19
 80049dc:	2218      	movs	r2, #24
 80049de:	4694      	mov	ip, r2
 80049e0:	44bc      	add	ip, r7
 80049e2:	4463      	add	r3, ip
 80049e4:	2201      	movs	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e08d      	b.n	8004b06 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 80049ea:	231b      	movs	r3, #27
 80049ec:	2218      	movs	r2, #24
 80049ee:	4694      	mov	ip, r2
 80049f0:	44bc      	add	ip, r7
 80049f2:	4463      	add	r3, ip
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d86a      	bhi.n	8004ad0 <UART_SetConfig+0x5f0>
 80049fa:	009a      	lsls	r2, r3, #2
 80049fc:	4b4f      	ldr	r3, [pc, #316]	; (8004b3c <UART_SetConfig+0x65c>)
 80049fe:	18d3      	adds	r3, r2, r3
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004a04:	f7fd fe86 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8004a08:	0002      	movs	r2, r0
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	18d2      	adds	r2, r2, r3
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	0019      	movs	r1, r3
 8004a18:	0010      	movs	r0, r2
 8004a1a:	f7fb fb75 	bl	8000108 <__udivsi3>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a24:	e05c      	b.n	8004ae0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004a26:	f7fd fe8b 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 8004a2a:	0002      	movs	r2, r0
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	085b      	lsrs	r3, r3, #1
 8004a32:	18d2      	adds	r2, r2, r3
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	0019      	movs	r1, r3
 8004a3a:	0010      	movs	r0, r2
 8004a3c:	f7fb fb64 	bl	8000108 <__udivsi3>
 8004a40:	0003      	movs	r3, r0
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a46:	e04b      	b.n	8004ae0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a48:	4b38      	ldr	r3, [pc, #224]	; (8004b2c <UART_SetConfig+0x64c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2210      	movs	r2, #16
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d00e      	beq.n	8004a70 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	085b      	lsrs	r3, r3, #1
 8004a58:	4a39      	ldr	r2, [pc, #228]	; (8004b40 <UART_SetConfig+0x660>)
 8004a5a:	189a      	adds	r2, r3, r2
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	0019      	movs	r1, r3
 8004a62:	0010      	movs	r0, r2
 8004a64:	f7fb fb50 	bl	8000108 <__udivsi3>
 8004a68:	0003      	movs	r3, r0
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8004a6e:	e037      	b.n	8004ae0 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	4a33      	ldr	r2, [pc, #204]	; (8004b44 <UART_SetConfig+0x664>)
 8004a78:	189a      	adds	r2, r3, r2
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	0019      	movs	r1, r3
 8004a80:	0010      	movs	r0, r2
 8004a82:	f7fb fb41 	bl	8000108 <__udivsi3>
 8004a86:	0003      	movs	r3, r0
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a8c:	e028      	b.n	8004ae0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004a8e:	f7fd fdb3 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 8004a92:	0002      	movs	r2, r0
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	085b      	lsrs	r3, r3, #1
 8004a9a:	18d2      	adds	r2, r2, r3
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	0019      	movs	r1, r3
 8004aa2:	0010      	movs	r0, r2
 8004aa4:	f7fb fb30 	bl	8000108 <__udivsi3>
 8004aa8:	0003      	movs	r3, r0
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004aae:	e017      	b.n	8004ae0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	2280      	movs	r2, #128	; 0x80
 8004ab8:	0212      	lsls	r2, r2, #8
 8004aba:	189a      	adds	r2, r3, r2
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	0019      	movs	r1, r3
 8004ac2:	0010      	movs	r0, r2
 8004ac4:	f7fb fb20 	bl	8000108 <__udivsi3>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ace:	e007      	b.n	8004ae0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004ad0:	2313      	movs	r3, #19
 8004ad2:	2218      	movs	r2, #24
 8004ad4:	4694      	mov	ip, r2
 8004ad6:	44bc      	add	ip, r7
 8004ad8:	4463      	add	r3, ip
 8004ada:	2201      	movs	r2, #1
 8004adc:	701a      	strb	r2, [r3, #0]
        break;
 8004ade:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae2:	2b0f      	cmp	r3, #15
 8004ae4:	d908      	bls.n	8004af8 <UART_SetConfig+0x618>
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	4a13      	ldr	r2, [pc, #76]	; (8004b38 <UART_SetConfig+0x658>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d804      	bhi.n	8004af8 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004af4:	60da      	str	r2, [r3, #12]
 8004af6:	e006      	b.n	8004b06 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8004af8:	2313      	movs	r3, #19
 8004afa:	2218      	movs	r2, #24
 8004afc:	4694      	mov	ip, r2
 8004afe:	44bc      	add	ip, r7
 8004b00:	4463      	add	r3, ip
 8004b02:	2201      	movs	r2, #1
 8004b04:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004b12:	2313      	movs	r3, #19
 8004b14:	2218      	movs	r2, #24
 8004b16:	4694      	mov	ip, r2
 8004b18:	44bc      	add	ip, r7
 8004b1a:	4463      	add	r3, ip
 8004b1c:	781b      	ldrb	r3, [r3, #0]
}
 8004b1e:	0018      	movs	r0, r3
 8004b20:	46bd      	mov	sp, r7
 8004b22:	b00e      	add	sp, #56	; 0x38
 8004b24:	bdb0      	pop	{r4, r5, r7, pc}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	080080d8 	.word	0x080080d8
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	007a1200 	.word	0x007a1200
 8004b34:	01e84800 	.word	0x01e84800
 8004b38:	0000ffff 	.word	0x0000ffff
 8004b3c:	080080fc 	.word	0x080080fc
 8004b40:	003d0900 	.word	0x003d0900
 8004b44:	00f42400 	.word	0x00f42400

08004b48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	2201      	movs	r2, #1
 8004b56:	4013      	ands	r3, r2
 8004b58:	d00b      	beq.n	8004b72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	4a4a      	ldr	r2, [pc, #296]	; (8004c8c <UART_AdvFeatureConfig+0x144>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	0019      	movs	r1, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	2202      	movs	r2, #2
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d00b      	beq.n	8004b94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	4a43      	ldr	r2, [pc, #268]	; (8004c90 <UART_AdvFeatureConfig+0x148>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	0019      	movs	r1, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	2204      	movs	r2, #4
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d00b      	beq.n	8004bb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	4a3b      	ldr	r2, [pc, #236]	; (8004c94 <UART_AdvFeatureConfig+0x14c>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	0019      	movs	r1, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	2208      	movs	r2, #8
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d00b      	beq.n	8004bd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	4a34      	ldr	r2, [pc, #208]	; (8004c98 <UART_AdvFeatureConfig+0x150>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	0019      	movs	r1, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	2210      	movs	r2, #16
 8004bde:	4013      	ands	r3, r2
 8004be0:	d00b      	beq.n	8004bfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4a2c      	ldr	r2, [pc, #176]	; (8004c9c <UART_AdvFeatureConfig+0x154>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	0019      	movs	r1, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	2220      	movs	r2, #32
 8004c00:	4013      	ands	r3, r2
 8004c02:	d00b      	beq.n	8004c1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	4a25      	ldr	r2, [pc, #148]	; (8004ca0 <UART_AdvFeatureConfig+0x158>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	0019      	movs	r1, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2240      	movs	r2, #64	; 0x40
 8004c22:	4013      	ands	r3, r2
 8004c24:	d01d      	beq.n	8004c62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ca4 <UART_AdvFeatureConfig+0x15c>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	0019      	movs	r1, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c42:	2380      	movs	r3, #128	; 0x80
 8004c44:	035b      	lsls	r3, r3, #13
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d10b      	bne.n	8004c62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	4a15      	ldr	r2, [pc, #84]	; (8004ca8 <UART_AdvFeatureConfig+0x160>)
 8004c52:	4013      	ands	r3, r2
 8004c54:	0019      	movs	r1, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	2280      	movs	r2, #128	; 0x80
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d00b      	beq.n	8004c84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	4a0e      	ldr	r2, [pc, #56]	; (8004cac <UART_AdvFeatureConfig+0x164>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	0019      	movs	r1, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	605a      	str	r2, [r3, #4]
  }
}
 8004c84:	46c0      	nop			; (mov r8, r8)
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b002      	add	sp, #8
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	fffdffff 	.word	0xfffdffff
 8004c90:	fffeffff 	.word	0xfffeffff
 8004c94:	fffbffff 	.word	0xfffbffff
 8004c98:	ffff7fff 	.word	0xffff7fff
 8004c9c:	ffffefff 	.word	0xffffefff
 8004ca0:	ffffdfff 	.word	0xffffdfff
 8004ca4:	ffefffff 	.word	0xffefffff
 8004ca8:	ff9fffff 	.word	0xff9fffff
 8004cac:	fff7ffff 	.word	0xfff7ffff

08004cb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004cbe:	f7fc f92d 	bl	8000f1c <HAL_GetTick>
 8004cc2:	0003      	movs	r3, r0
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2208      	movs	r2, #8
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d10d      	bne.n	8004cf0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	2380      	movs	r3, #128	; 0x80
 8004cd8:	0399      	lsls	r1, r3, #14
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	4b16      	ldr	r3, [pc, #88]	; (8004d38 <UART_CheckIdleState+0x88>)
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	0013      	movs	r3, r2
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f000 f82a 	bl	8004d3c <UART_WaitOnFlagUntilTimeout>
 8004ce8:	1e03      	subs	r3, r0, #0
 8004cea:	d001      	beq.n	8004cf0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e01f      	b.n	8004d30 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d10d      	bne.n	8004d1a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	03d9      	lsls	r1, r3, #15
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <UART_CheckIdleState+0x88>)
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	0013      	movs	r3, r2
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f000 f815 	bl	8004d3c <UART_WaitOnFlagUntilTimeout>
 8004d12:	1e03      	subs	r3, r0, #0
 8004d14:	d001      	beq.n	8004d1a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e00a      	b.n	8004d30 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2270      	movs	r2, #112	; 0x70
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	0018      	movs	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b004      	add	sp, #16
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	01ffffff 	.word	0x01ffffff

08004d3c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	1dfb      	adds	r3, r7, #7
 8004d4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4c:	e029      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	3301      	adds	r3, #1
 8004d52:	d026      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d54:	f7fc f8e2 	bl	8000f1c <HAL_GetTick>
 8004d58:	0002      	movs	r2, r0
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d302      	bcc.n	8004d6a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d11b      	bne.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4915      	ldr	r1, [pc, #84]	; (8004dcc <UART_WaitOnFlagUntilTimeout+0x90>)
 8004d76:	400a      	ands	r2, r1
 8004d78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2101      	movs	r1, #1
 8004d86:	438a      	bics	r2, r1
 8004d88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2270      	movs	r2, #112	; 0x70
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e00f      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	4013      	ands	r3, r2
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	425a      	negs	r2, r3
 8004db2:	4153      	adcs	r3, r2
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	001a      	movs	r2, r3
 8004db8:	1dfb      	adds	r3, r7, #7
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d0c6      	beq.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b004      	add	sp, #16
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	fffffe5f 	.word	0xfffffe5f

08004dd0 <init_Left>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

// Enable Left sensor
void init_Left(){
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
	GPIOA->ODR |= GPIO_PIN_4;
 8004dd4:	23a0      	movs	r3, #160	; 0xa0
 8004dd6:	05db      	lsls	r3, r3, #23
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	23a0      	movs	r3, #160	; 0xa0
 8004ddc:	05db      	lsls	r3, r3, #23
 8004dde:	2110      	movs	r1, #16
 8004de0:	430a      	orrs	r2, r1
 8004de2:	615a      	str	r2, [r3, #20]
}
 8004de4:	46c0      	nop			; (mov r8, r8)
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <init_Right>:
void init_Right(){
 8004dea:	b580      	push	{r7, lr}
 8004dec:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~GPIO_PIN_4;
 8004dee:	23a0      	movs	r3, #160	; 0xa0
 8004df0:	05db      	lsls	r3, r3, #23
 8004df2:	695a      	ldr	r2, [r3, #20]
 8004df4:	23a0      	movs	r3, #160	; 0xa0
 8004df6:	05db      	lsls	r3, r3, #23
 8004df8:	2110      	movs	r1, #16
 8004dfa:	438a      	bics	r2, r1
 8004dfc:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= GPIO_PIN_8;
 8004dfe:	23a0      	movs	r3, #160	; 0xa0
 8004e00:	05db      	lsls	r3, r3, #23
 8004e02:	695a      	ldr	r2, [r3, #20]
 8004e04:	23a0      	movs	r3, #160	; 0xa0
 8004e06:	05db      	lsls	r3, r3, #23
 8004e08:	2180      	movs	r1, #128	; 0x80
 8004e0a:	0049      	lsls	r1, r1, #1
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	615a      	str	r2, [r3, #20]
}
 8004e10:	46c0      	nop			; (mov r8, r8)
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <init_Straight>:
void init_Straight(){
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~GPIO_PIN_8;
 8004e1c:	23a0      	movs	r3, #160	; 0xa0
 8004e1e:	05db      	lsls	r3, r3, #23
 8004e20:	695a      	ldr	r2, [r3, #20]
 8004e22:	23a0      	movs	r3, #160	; 0xa0
 8004e24:	05db      	lsls	r3, r3, #23
 8004e26:	4903      	ldr	r1, [pc, #12]	; (8004e34 <init_Straight+0x1c>)
 8004e28:	400a      	ands	r2, r1
 8004e2a:	615a      	str	r2, [r3, #20]
}
 8004e2c:	46c0      	nop			; (mov r8, r8)
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	fffffeff 	.word	0xfffffeff

08004e38 <myTim2Init>:
void myTim2Init(void){
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_IOPAEN;
 8004e3c:	4b2b      	ldr	r3, [pc, #172]	; (8004eec <myTim2Init+0xb4>)
 8004e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e40:	4b2a      	ldr	r3, [pc, #168]	; (8004eec <myTim2Init+0xb4>)
 8004e42:	2101      	movs	r1, #1
 8004e44:	430a      	orrs	r2, r1
 8004e46:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004e48:	4b28      	ldr	r3, [pc, #160]	; (8004eec <myTim2Init+0xb4>)
 8004e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e4c:	4b27      	ldr	r3, [pc, #156]	; (8004eec <myTim2Init+0xb4>)
 8004e4e:	2101      	movs	r1, #1
 8004e50:	430a      	orrs	r2, r1
 8004e52:	639a      	str	r2, [r3, #56]	; 0x38
	GPIOA->MODER |= 2;
 8004e54:	23a0      	movs	r3, #160	; 0xa0
 8004e56:	05db      	lsls	r3, r3, #23
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	23a0      	movs	r3, #160	; 0xa0
 8004e5c:	05db      	lsls	r3, r3, #23
 8004e5e:	2102      	movs	r1, #2
 8004e60:	430a      	orrs	r2, r1
 8004e62:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= 2;
 8004e64:	23a0      	movs	r3, #160	; 0xa0
 8004e66:	05db      	lsls	r3, r3, #23
 8004e68:	6a1a      	ldr	r2, [r3, #32]
 8004e6a:	23a0      	movs	r3, #160	; 0xa0
 8004e6c:	05db      	lsls	r3, r3, #23
 8004e6e:	2102      	movs	r1, #2
 8004e70:	430a      	orrs	r2, r1
 8004e72:	621a      	str	r2, [r3, #32]
	GPIOA->OSPEEDR |= 2;
 8004e74:	23a0      	movs	r3, #160	; 0xa0
 8004e76:	05db      	lsls	r3, r3, #23
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	23a0      	movs	r3, #160	; 0xa0
 8004e7c:	05db      	lsls	r3, r3, #23
 8004e7e:	2102      	movs	r1, #2
 8004e80:	430a      	orrs	r2, r1
 8004e82:	609a      	str	r2, [r3, #8]
	TIM2->PSC = 20;
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	05db      	lsls	r3, r3, #23
 8004e88:	2214      	movs	r2, #20
 8004e8a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 9;
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	05db      	lsls	r3, r3, #23
 8004e90:	2209      	movs	r2, #9
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 8004e94:	2380      	movs	r3, #128	; 0x80
 8004e96:	05db      	lsls	r3, r3, #23
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	2380      	movs	r3, #128	; 0x80
 8004e9c:	05db      	lsls	r3, r3, #23
 8004e9e:	2160      	movs	r1, #96	; 0x60
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	619a      	str	r2, [r3, #24]
	TIM2->CCR1 = 9;
 8004ea4:	2380      	movs	r3, #128	; 0x80
 8004ea6:	05db      	lsls	r3, r3, #23
 8004ea8:	2209      	movs	r2, #9
 8004eaa:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCER |= 1;
 8004eac:	2380      	movs	r3, #128	; 0x80
 8004eae:	05db      	lsls	r3, r3, #23
 8004eb0:	6a1a      	ldr	r2, [r3, #32]
 8004eb2:	2380      	movs	r3, #128	; 0x80
 8004eb4:	05db      	lsls	r3, r3, #23
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	621a      	str	r2, [r3, #32]
	TIM2->CR1 |= 1;
 8004ebc:	2380      	movs	r3, #128	; 0x80
 8004ebe:	05db      	lsls	r3, r3, #23
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	2380      	movs	r3, #128	; 0x80
 8004ec4:	05db      	lsls	r3, r3, #23
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	601a      	str	r2, [r3, #0]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004ecc:	4b07      	ldr	r3, [pc, #28]	; (8004eec <myTim2Init+0xb4>)
 8004ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ed0:	4b06      	ldr	r3, [pc, #24]	; (8004eec <myTim2Init+0xb4>)
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8004ed8:	4b04      	ldr	r3, [pc, #16]	; (8004eec <myTim2Init+0xb4>)
 8004eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <myTim2Init+0xb4>)
 8004ede:	2110      	movs	r1, #16
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004ee4:	46c0      	nop			; (mov r8, r8)
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	40021000 	.word	0x40021000

08004ef0 <myDMAInit>:
void myDMAInit(uint32_t* buffer, uint32_t length){
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8004efa:	4b35      	ldr	r3, [pc, #212]	; (8004fd0 <myDMAInit+0xe0>)
 8004efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004efe:	4b34      	ldr	r3, [pc, #208]	; (8004fd0 <myDMAInit+0xe0>)
 8004f00:	2101      	movs	r1, #1
 8004f02:	430a      	orrs	r2, r1
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
	DMA1_Channel1->CCR &= ~DMA_CCR_MEM2MEM;
 8004f06:	4b33      	ldr	r3, [pc, #204]	; (8004fd4 <myDMAInit+0xe4>)
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	4b32      	ldr	r3, [pc, #200]	; (8004fd4 <myDMAInit+0xe4>)
 8004f0c:	4932      	ldr	r1, [pc, #200]	; (8004fd8 <myDMAInit+0xe8>)
 8004f0e:	400a      	ands	r2, r1
 8004f10:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PL;
 8004f12:	4b30      	ldr	r3, [pc, #192]	; (8004fd4 <myDMAInit+0xe4>)
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4b2f      	ldr	r3, [pc, #188]	; (8004fd4 <myDMAInit+0xe4>)
 8004f18:	4930      	ldr	r1, [pc, #192]	; (8004fdc <myDMAInit+0xec>)
 8004f1a:	400a      	ands	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_PL_1;
 8004f1e:	4b2d      	ldr	r3, [pc, #180]	; (8004fd4 <myDMAInit+0xe4>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b2c      	ldr	r3, [pc, #176]	; (8004fd4 <myDMAInit+0xe4>)
 8004f24:	2180      	movs	r1, #128	; 0x80
 8004f26:	0189      	lsls	r1, r1, #6
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PSIZE;
 8004f2c:	4b29      	ldr	r3, [pc, #164]	; (8004fd4 <myDMAInit+0xe4>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	4b28      	ldr	r3, [pc, #160]	; (8004fd4 <myDMAInit+0xe4>)
 8004f32:	492b      	ldr	r1, [pc, #172]	; (8004fe0 <myDMAInit+0xf0>)
 8004f34:	400a      	ands	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0; // 16bits
 8004f38:	4b26      	ldr	r3, [pc, #152]	; (8004fd4 <myDMAInit+0xe4>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b25      	ldr	r3, [pc, #148]	; (8004fd4 <myDMAInit+0xe4>)
 8004f3e:	2180      	movs	r1, #128	; 0x80
 8004f40:	0049      	lsls	r1, r1, #1
 8004f42:	430a      	orrs	r2, r1
 8004f44:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_MSIZE;
 8004f46:	4b23      	ldr	r3, [pc, #140]	; (8004fd4 <myDMAInit+0xe4>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b22      	ldr	r3, [pc, #136]	; (8004fd4 <myDMAInit+0xe4>)
 8004f4c:	4925      	ldr	r1, [pc, #148]	; (8004fe4 <myDMAInit+0xf4>)
 8004f4e:	400a      	ands	r2, r1
 8004f50:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MSIZE_0; // 16bits
 8004f52:	4b20      	ldr	r3, [pc, #128]	; (8004fd4 <myDMAInit+0xe4>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b1f      	ldr	r3, [pc, #124]	; (8004fd4 <myDMAInit+0xe4>)
 8004f58:	2180      	movs	r1, #128	; 0x80
 8004f5a:	00c9      	lsls	r1, r1, #3
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PINC;
 8004f60:	4b1c      	ldr	r3, [pc, #112]	; (8004fd4 <myDMAInit+0xe4>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	4b1b      	ldr	r3, [pc, #108]	; (8004fd4 <myDMAInit+0xe4>)
 8004f66:	2140      	movs	r1, #64	; 0x40
 8004f68:	438a      	bics	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 8004f6c:	4b19      	ldr	r3, [pc, #100]	; (8004fd4 <myDMAInit+0xe4>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <myDMAInit+0xe4>)
 8004f72:	2180      	movs	r1, #128	; 0x80
 8004f74:	430a      	orrs	r2, r1
 8004f76:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_CIRC;
 8004f78:	4b16      	ldr	r3, [pc, #88]	; (8004fd4 <myDMAInit+0xe4>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <myDMAInit+0xe4>)
 8004f7e:	2120      	movs	r1, #32
 8004f80:	438a      	bics	r2, r1
 8004f82:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8004f84:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <myDMAInit+0xe4>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <myDMAInit+0xe4>)
 8004f8a:	2120      	movs	r1, #32
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_DIR;
 8004f90:	4b10      	ldr	r3, [pc, #64]	; (8004fd4 <myDMAInit+0xe4>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	4b0f      	ldr	r3, [pc, #60]	; (8004fd4 <myDMAInit+0xe4>)
 8004f96:	2110      	movs	r1, #16
 8004f98:	438a      	bics	r2, r1
 8004f9a:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CNDTR = length;
 8004f9c:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <myDMAInit+0xe4>)
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	605a      	str	r2, [r3, #4]

	DMA1_Channel1->CPAR = (uint32_t) &(ADC1->DR);
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <myDMAInit+0xe4>)
 8004fa4:	4a10      	ldr	r2, [pc, #64]	; (8004fe8 <myDMAInit+0xf8>)
 8004fa6:	609a      	str	r2, [r3, #8]

	DMA1_Channel1->CMAR = (uint32_t) buffer;
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <myDMAInit+0xe4>)
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	60da      	str	r2, [r3, #12]

	DMA1_CSELR->CSELR &= ~DMA_CSELR_C1S;
 8004fae:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <myDMAInit+0xfc>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4b0e      	ldr	r3, [pc, #56]	; (8004fec <myDMAInit+0xfc>)
 8004fb4:	210f      	movs	r1, #15
 8004fb6:	438a      	bics	r2, r1
 8004fb8:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_EN;
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <myDMAInit+0xe4>)
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <myDMAInit+0xe4>)
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	601a      	str	r2, [r3, #0]
}
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	b002      	add	sp, #8
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40020008 	.word	0x40020008
 8004fd8:	ffffbfff 	.word	0xffffbfff
 8004fdc:	ffffcfff 	.word	0xffffcfff
 8004fe0:	fffffcff 	.word	0xfffffcff
 8004fe4:	fffff3ff 	.word	0xfffff3ff
 8004fe8:	40012440 	.word	0x40012440
 8004fec:	400200a8 	.word	0x400200a8

08004ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ff6:	f7fb ff3b 	bl	8000e70 <HAL_Init>
//  L_PID.Ki = 0;
//  arm_pid_init_f32(&L_PID, 1);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ffa:	f000 f99b 	bl	8005334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ffe:	f000 fdb1 	bl	8005b64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005002:	f000 fd7f 	bl	8005b04 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8005006:	f000 fb47 	bl	8005698 <MX_TIM2_Init>
  MX_TIM6_Init();
 800500a:	f000 fc6d 	bl	80058e8 <MX_TIM6_Init>
  MX_TIM21_Init();
 800500e:	f000 fca7 	bl	8005960 <MX_TIM21_Init>
  MX_TIM22_Init();
 8005012:	f000 fd01 	bl	8005a18 <MX_TIM22_Init>
  MX_TIM3_Init();
 8005016:	f000 fbdf 	bl	80057d8 <MX_TIM3_Init>
  MX_ADC_Init();
 800501a:	f000 f9fd 	bl	8005418 <MX_ADC_Init>
  MX_RTC_Init();
 800501e:	f000 fa9d 	bl	800555c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  r_enc_setpoint = 0;
 8005022:	4ba4      	ldr	r3, [pc, #656]	; (80052b4 <main+0x2c4>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
  l_enc_setpoint = 0;
 8005028:	4ba3      	ldr	r3, [pc, #652]	; (80052b8 <main+0x2c8>)
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]

  printf("Hello...\r\n");
 800502e:	4ba3      	ldr	r3, [pc, #652]	; (80052bc <main+0x2cc>)
 8005030:	0018      	movs	r0, r3
 8005032:	f002 f9fd 	bl	8007430 <puts>
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8005036:	4ba2      	ldr	r3, [pc, #648]	; (80052c0 <main+0x2d0>)
 8005038:	2100      	movs	r1, #0
 800503a:	0018      	movs	r0, r3
 800503c:	f7fc fa94 	bl	8001568 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005040:	4ba0      	ldr	r3, [pc, #640]	; (80052c4 <main+0x2d4>)
 8005042:	2100      	movs	r1, #0
 8005044:	0018      	movs	r0, r3
 8005046:	f7fe fa22 	bl	800348e <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800504a:	4b9e      	ldr	r3, [pc, #632]	; (80052c4 <main+0x2d4>)
 800504c:	2104      	movs	r1, #4
 800504e:	0018      	movs	r0, r3
 8005050:	f7fe fa1d 	bl	800348e <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8005054:	4b9b      	ldr	r3, [pc, #620]	; (80052c4 <main+0x2d4>)
 8005056:	2108      	movs	r1, #8
 8005058:	0018      	movs	r0, r3
 800505a:	f7fe fa18 	bl	800348e <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800505e:	4b99      	ldr	r3, [pc, #612]	; (80052c4 <main+0x2d4>)
 8005060:	210c      	movs	r1, #12
 8005062:	0018      	movs	r0, r3
 8005064:	f7fe fa13 	bl	800348e <HAL_TIM_PWM_Start>
//  HAL_ADC_Start_DMA(&hadc, (uint32_t*)buffer, 20);
  myTim2Init();
 8005068:	f7ff fee6 	bl	8004e38 <myTim2Init>
  TIM6->CR1 |= 1;
 800506c:	4b96      	ldr	r3, [pc, #600]	; (80052c8 <main+0x2d8>)
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	4b95      	ldr	r3, [pc, #596]	; (80052c8 <main+0x2d8>)
 8005072:	2101      	movs	r1, #1
 8005074:	430a      	orrs	r2, r1
 8005076:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 8005078:	4b94      	ldr	r3, [pc, #592]	; (80052cc <main+0x2dc>)
 800507a:	0018      	movs	r0, r3
 800507c:	f7fe f98d 	bl	800339a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim21);
 8005080:	4b93      	ldr	r3, [pc, #588]	; (80052d0 <main+0x2e0>)
 8005082:	0018      	movs	r0, r3
 8005084:	f7fe f989 	bl	800339a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim22,TIM_CHANNEL_ALL);
 8005088:	4b92      	ldr	r3, [pc, #584]	; (80052d4 <main+0x2e4>)
 800508a:	213c      	movs	r1, #60	; 0x3c
 800508c:	0018      	movs	r0, r3
 800508e:	f7fe fab5 	bl	80035fc <HAL_TIM_Encoder_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim21, TIM_CHANNEL_1, 0);
 8005092:	4b8f      	ldr	r3, [pc, #572]	; (80052d0 <main+0x2e0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2200      	movs	r2, #0
 8005098:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RTC_ALARM_ENABLE_IT(&hrtc, RTC_IT_ALRA);
 800509a:	4b8f      	ldr	r3, [pc, #572]	; (80052d8 <main+0x2e8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	4b8d      	ldr	r3, [pc, #564]	; (80052d8 <main+0x2e8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2180      	movs	r1, #128	; 0x80
 80050a6:	0149      	lsls	r1, r1, #5
 80050a8:	430a      	orrs	r2, r1
 80050aa:	609a      	str	r2, [r3, #8]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int dir = 0;
 80050ac:	2300      	movs	r3, #0
 80050ae:	607b      	str	r3, [r7, #4]
  // ADC DMA Config
  myDMAInit((uint32_t*) buffer, 5);
 80050b0:	4b8a      	ldr	r3, [pc, #552]	; (80052dc <main+0x2ec>)
 80050b2:	2105      	movs	r1, #5
 80050b4:	0018      	movs	r0, r3
 80050b6:	f7ff ff1b 	bl	8004ef0 <myDMAInit>
  ADC1->CFGR1 |= ADC_CFGR1_DMACFG;
 80050ba:	4b89      	ldr	r3, [pc, #548]	; (80052e0 <main+0x2f0>)
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	4b88      	ldr	r3, [pc, #544]	; (80052e0 <main+0x2f0>)
 80050c0:	2102      	movs	r1, #2
 80050c2:	430a      	orrs	r2, r1
 80050c4:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 |= ADC_CFGR1_DMAEN;
 80050c6:	4b86      	ldr	r3, [pc, #536]	; (80052e0 <main+0x2f0>)
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	4b85      	ldr	r3, [pc, #532]	; (80052e0 <main+0x2f0>)
 80050cc:	2101      	movs	r1, #1
 80050ce:	430a      	orrs	r2, r1
 80050d0:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 |= ADC_CFGR1_CONT;
 80050d2:	4b83      	ldr	r3, [pc, #524]	; (80052e0 <main+0x2f0>)
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	4b82      	ldr	r3, [pc, #520]	; (80052e0 <main+0x2f0>)
 80050d8:	2180      	movs	r1, #128	; 0x80
 80050da:	0189      	lsls	r1, r1, #6
 80050dc:	430a      	orrs	r2, r1
 80050de:	60da      	str	r2, [r3, #12]
  ADC1->IER |= ADC_IER_EOSIE;
 80050e0:	4b7f      	ldr	r3, [pc, #508]	; (80052e0 <main+0x2f0>)
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	4b7e      	ldr	r3, [pc, #504]	; (80052e0 <main+0x2f0>)
 80050e6:	2108      	movs	r1, #8
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  ADC1->CR |= ADC_CR_ADEN;
 80050ec:	4b7c      	ldr	r3, [pc, #496]	; (80052e0 <main+0x2f0>)
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	4b7b      	ldr	r3, [pc, #492]	; (80052e0 <main+0x2f0>)
 80050f2:	2101      	movs	r1, #1
 80050f4:	430a      	orrs	r2, r1
 80050f6:	609a      	str	r2, [r3, #8]
  ADC1->CR |= ADC_CR_ADSTART;
 80050f8:	4b79      	ldr	r3, [pc, #484]	; (80052e0 <main+0x2f0>)
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	4b78      	ldr	r3, [pc, #480]	; (80052e0 <main+0x2f0>)
 80050fe:	2104      	movs	r1, #4
 8005100:	430a      	orrs	r2, r1
 8005102:	609a      	str	r2, [r3, #8]
  state = 0;
 8005104:	4b77      	ldr	r3, [pc, #476]	; (80052e4 <main+0x2f4>)
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
  ir_seeking = 0;
 800510a:	4b77      	ldr	r3, [pc, #476]	; (80052e8 <main+0x2f8>)
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]

  // Intialize robot spacial reference
  robot_x = 0;
 8005110:	4b76      	ldr	r3, [pc, #472]	; (80052ec <main+0x2fc>)
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
  robot_y = 0;
 8005116:	4b76      	ldr	r3, [pc, #472]	; (80052f0 <main+0x300>)
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
  robot_theta = 0;
 800511c:	4b75      	ldr	r3, [pc, #468]	; (80052f4 <main+0x304>)
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
    /* USER CODE BEGIN 3 */
//	  RTC_TimeTypeDef sTime;
//	  		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
//	  		printf("Current Time: %2u:%2u:%2u\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);

	if(state==0){
 8005122:	4b70      	ldr	r3, [pc, #448]	; (80052e4 <main+0x2f4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d121      	bne.n	800516e <main+0x17e>
		dir = check_light();
 800512a:	f000 ff59 	bl	8005fe0 <check_light>
 800512e:	0003      	movs	r3, r0
 8005130:	607b      	str	r3, [r7, #4]

			if(dir != -1 && dir != ROBOT_FRONT){
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3301      	adds	r3, #1
 8005136:	d00c      	beq.n	8005152 <main+0x162>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <main+0x162>
				turn_until_light(dir==ROBOT_LEFT?TURN_LEFT:TURN_RIGHT, 0);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3b01      	subs	r3, #1
 8005142:	1e5a      	subs	r2, r3, #1
 8005144:	4193      	sbcs	r3, r2
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2100      	movs	r1, #0
 800514a:	0018      	movs	r0, r3
 800514c:	f000 ffbe 	bl	80060cc <turn_until_light>
 8005150:	e00d      	b.n	800516e <main+0x17e>
			} else {
				if(!obstacle_detected)
 8005152:	4b69      	ldr	r3, [pc, #420]	; (80052f8 <main+0x308>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d105      	bne.n	8005166 <main+0x176>
					forward_until_light(-1);
 800515a:	2301      	movs	r3, #1
 800515c:	425b      	negs	r3, r3
 800515e:	0018      	movs	r0, r3
 8005160:	f000 ffce 	bl	8006100 <forward_until_light>
 8005164:	e003      	b.n	800516e <main+0x17e>
				else
					move_robot(0,0);
 8005166:	2100      	movs	r1, #0
 8005168:	2000      	movs	r0, #0
 800516a:	f000 fea9 	bl	8005ec0 <move_robot>
			}
	}
	if(state==1){
 800516e:	4b5d      	ldr	r3, [pc, #372]	; (80052e4 <main+0x2f4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d121      	bne.n	80051ba <main+0x1ca>
		// ToDo: Ultrasonic Turning Demo next
		if(!obstacle_detected)
 8005176:	4b60      	ldr	r3, [pc, #384]	; (80052f8 <main+0x308>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d105      	bne.n	800518a <main+0x19a>
			move_robot(FORWARD,30000);
 800517e:	4b5f      	ldr	r3, [pc, #380]	; (80052fc <main+0x30c>)
 8005180:	0019      	movs	r1, r3
 8005182:	2002      	movs	r0, #2
 8005184:	f000 fe9c 	bl	8005ec0 <move_robot>
 8005188:	e017      	b.n	80051ba <main+0x1ca>
		else {
			if(move == 1){
 800518a:	4b5d      	ldr	r3, [pc, #372]	; (8005300 <main+0x310>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d105      	bne.n	800519e <main+0x1ae>
				move_robot(TURN_LEFT, 30000);
 8005192:	4b5a      	ldr	r3, [pc, #360]	; (80052fc <main+0x30c>)
 8005194:	0019      	movs	r1, r3
 8005196:	2000      	movs	r0, #0
 8005198:	f000 fe92 	bl	8005ec0 <move_robot>
 800519c:	e00d      	b.n	80051ba <main+0x1ca>
			} else if(move == 2){
 800519e:	4b58      	ldr	r3, [pc, #352]	; (8005300 <main+0x310>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d105      	bne.n	80051b2 <main+0x1c2>
				move_robot(TURN_RIGHT, 30000);
 80051a6:	4b55      	ldr	r3, [pc, #340]	; (80052fc <main+0x30c>)
 80051a8:	0019      	movs	r1, r3
 80051aa:	2001      	movs	r0, #1
 80051ac:	f000 fe88 	bl	8005ec0 <move_robot>
 80051b0:	e003      	b.n	80051ba <main+0x1ca>
			} else
				move_robot(0,0);
 80051b2:	2100      	movs	r1, #0
 80051b4:	2000      	movs	r0, #0
 80051b6:	f000 fe83 	bl	8005ec0 <move_robot>
		}
	}
	if(state == 2 || state == 3){
 80051ba:	4b4a      	ldr	r3, [pc, #296]	; (80052e4 <main+0x2f4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d003      	beq.n	80051ca <main+0x1da>
 80051c2:	4b48      	ldr	r3, [pc, #288]	; (80052e4 <main+0x2f4>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d103      	bne.n	80051d2 <main+0x1e2>
		move_robot(0,0);
 80051ca:	2100      	movs	r1, #0
 80051cc:	2000      	movs	r0, #0
 80051ce:	f000 fe77 	bl	8005ec0 <move_robot>
	}
	if(state==4){
 80051d2:	4b44      	ldr	r3, [pc, #272]	; (80052e4 <main+0x2f4>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d101      	bne.n	80051de <main+0x1ee>
	// IR Seeking Demo
			IR_LOCATE();
 80051da:	f001 f807 	bl	80061ec <IR_LOCATE>
	}
	i = TIM22->CNT;
 80051de:	4b49      	ldr	r3, [pc, #292]	; (8005304 <main+0x314>)
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	001a      	movs	r2, r3
 80051e4:	4b48      	ldr	r3, [pc, #288]	; (8005308 <main+0x318>)
 80051e6:	601a      	str	r2, [r3, #0]
	HAL_Delay(200);
 80051e8:	20c8      	movs	r0, #200	; 0xc8
 80051ea:	f7fb fea1 	bl	8000f30 <HAL_Delay>
	if (hold > i){
 80051ee:	4b47      	ldr	r3, [pc, #284]	; (800530c <main+0x31c>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b45      	ldr	r3, [pc, #276]	; (8005308 <main+0x318>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	dd1f      	ble.n	800523a <main+0x24a>
		if (push) {
 80051fa:	4b45      	ldr	r3, [pc, #276]	; (8005310 <main+0x320>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d012      	beq.n	8005228 <main+0x238>
			LLevel--;
 8005202:	4b44      	ldr	r3, [pc, #272]	; (8005314 <main+0x324>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	1e5a      	subs	r2, r3, #1
 8005208:	4b42      	ldr	r3, [pc, #264]	; (8005314 <main+0x324>)
 800520a:	601a      	str	r2, [r3, #0]
			if (LLevel < 0){
 800520c:	4b41      	ldr	r3, [pc, #260]	; (8005314 <main+0x324>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	da02      	bge.n	800521a <main+0x22a>
				LLevel = 3;
 8005214:	4b3f      	ldr	r3, [pc, #252]	; (8005314 <main+0x324>)
 8005216:	2203      	movs	r2, #3
 8005218:	601a      	str	r2, [r3, #0]
			}
			printf("Current Light level: %d\r\n", LLevel);
 800521a:	4b3e      	ldr	r3, [pc, #248]	; (8005314 <main+0x324>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	4b3e      	ldr	r3, [pc, #248]	; (8005318 <main+0x328>)
 8005220:	0011      	movs	r1, r2
 8005222:	0018      	movs	r0, r3
 8005224:	f002 f88a 	bl	800733c <iprintf>
		}
		printf("turn left\r\n");
 8005228:	4b3c      	ldr	r3, [pc, #240]	; (800531c <main+0x32c>)
 800522a:	0018      	movs	r0, r3
 800522c:	f002 f900 	bl	8007430 <puts>
		hold = i;
 8005230:	4b35      	ldr	r3, [pc, #212]	; (8005308 <main+0x318>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4b35      	ldr	r3, [pc, #212]	; (800530c <main+0x31c>)
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	e02a      	b.n	8005290 <main+0x2a0>
	}
	else if (hold < i) {
 800523a:	4b34      	ldr	r3, [pc, #208]	; (800530c <main+0x31c>)
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	4b32      	ldr	r3, [pc, #200]	; (8005308 <main+0x318>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	da24      	bge.n	8005290 <main+0x2a0>
		if (push){
 8005246:	4b32      	ldr	r3, [pc, #200]	; (8005310 <main+0x320>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d018      	beq.n	8005280 <main+0x290>
			LLevel = ++LLevel % 4;
 800524e:	4b31      	ldr	r3, [pc, #196]	; (8005314 <main+0x324>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	4b2f      	ldr	r3, [pc, #188]	; (8005314 <main+0x324>)
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	4b2e      	ldr	r3, [pc, #184]	; (8005314 <main+0x324>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a30      	ldr	r2, [pc, #192]	; (8005320 <main+0x330>)
 800525e:	4013      	ands	r3, r2
 8005260:	d504      	bpl.n	800526c <main+0x27c>
 8005262:	3b01      	subs	r3, #1
 8005264:	2204      	movs	r2, #4
 8005266:	4252      	negs	r2, r2
 8005268:	4313      	orrs	r3, r2
 800526a:	3301      	adds	r3, #1
 800526c:	001a      	movs	r2, r3
 800526e:	4b29      	ldr	r3, [pc, #164]	; (8005314 <main+0x324>)
 8005270:	601a      	str	r2, [r3, #0]
			printf("Current Light level: %d\r\n", LLevel);
 8005272:	4b28      	ldr	r3, [pc, #160]	; (8005314 <main+0x324>)
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b28      	ldr	r3, [pc, #160]	; (8005318 <main+0x328>)
 8005278:	0011      	movs	r1, r2
 800527a:	0018      	movs	r0, r3
 800527c:	f002 f85e 	bl	800733c <iprintf>
		}
	  printf("turn right\r\n");
 8005280:	4b28      	ldr	r3, [pc, #160]	; (8005324 <main+0x334>)
 8005282:	0018      	movs	r0, r3
 8005284:	f002 f8d4 	bl	8007430 <puts>
	  hold = i;
 8005288:	4b1f      	ldr	r3, [pc, #124]	; (8005308 <main+0x318>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4b1f      	ldr	r3, [pc, #124]	; (800530c <main+0x31c>)
 800528e:	601a      	str	r2, [r3, #0]
	}

	if(checkSoil){
 8005290:	4b25      	ldr	r3, [pc, #148]	; (8005328 <main+0x338>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <main+0x2be>
		printf("soil moisture level %d\r\n", ADC_Values[4]);
 8005298:	4b24      	ldr	r3, [pc, #144]	; (800532c <main+0x33c>)
 800529a:	891b      	ldrh	r3, [r3, #8]
 800529c:	001a      	movs	r2, r3
 800529e:	4b24      	ldr	r3, [pc, #144]	; (8005330 <main+0x340>)
 80052a0:	0011      	movs	r1, r2
 80052a2:	0018      	movs	r0, r3
 80052a4:	f002 f84a 	bl	800733c <iprintf>
		checkSoil = 0;
 80052a8:	4b1f      	ldr	r3, [pc, #124]	; (8005328 <main+0x338>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]
	}
	cliff_sense();
 80052ae:	f001 f9e5 	bl	800667c <cliff_sense>
  {
 80052b2:	e736      	b.n	8005122 <main+0x132>
 80052b4:	20000084 	.word	0x20000084
 80052b8:	2000008c 	.word	0x2000008c
 80052bc:	08007e78 	.word	0x08007e78
 80052c0:	20000290 	.word	0x20000290
 80052c4:	200000e8 	.word	0x200000e8
 80052c8:	40001000 	.word	0x40001000
 80052cc:	20000194 	.word	0x20000194
 80052d0:	200002fc 	.word	0x200002fc
 80052d4:	20000128 	.word	0x20000128
 80052d8:	20000170 	.word	0x20000170
 80052dc:	20000164 	.word	0x20000164
 80052e0:	40012400 	.word	0x40012400
 80052e4:	20000094 	.word	0x20000094
 80052e8:	20000124 	.word	0x20000124
 80052ec:	2000020c 	.word	0x2000020c
 80052f0:	200000e4 	.word	0x200000e4
 80052f4:	200000e0 	.word	0x200000e0
 80052f8:	200000ba 	.word	0x200000ba
 80052fc:	00007530 	.word	0x00007530
 8005300:	200000b4 	.word	0x200000b4
 8005304:	40011400 	.word	0x40011400
 8005308:	20000098 	.word	0x20000098
 800530c:	2000009c 	.word	0x2000009c
 8005310:	200000bc 	.word	0x200000bc
 8005314:	200000c0 	.word	0x200000c0
 8005318:	08007e84 	.word	0x08007e84
 800531c:	08007ea0 	.word	0x08007ea0
 8005320:	80000003 	.word	0x80000003
 8005324:	08007eac 	.word	0x08007eac
 8005328:	200000b8 	.word	0x200000b8
 800532c:	200002ec 	.word	0x200002ec
 8005330:	08007eb8 	.word	0x08007eb8

08005334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005334:	b590      	push	{r4, r7, lr}
 8005336:	b09f      	sub	sp, #124	; 0x7c
 8005338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800533a:	2440      	movs	r4, #64	; 0x40
 800533c:	193b      	adds	r3, r7, r4
 800533e:	0018      	movs	r0, r3
 8005340:	2338      	movs	r3, #56	; 0x38
 8005342:	001a      	movs	r2, r3
 8005344:	2100      	movs	r1, #0
 8005346:	f001 ff49 	bl	80071dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800534a:	232c      	movs	r3, #44	; 0x2c
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	0018      	movs	r0, r3
 8005350:	2314      	movs	r3, #20
 8005352:	001a      	movs	r2, r3
 8005354:	2100      	movs	r1, #0
 8005356:	f001 ff41 	bl	80071dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800535a:	1d3b      	adds	r3, r7, #4
 800535c:	0018      	movs	r0, r3
 800535e:	2328      	movs	r3, #40	; 0x28
 8005360:	001a      	movs	r2, r3
 8005362:	2100      	movs	r1, #0
 8005364:	f001 ff3a 	bl	80071dc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005368:	4b29      	ldr	r3, [pc, #164]	; (8005410 <SystemClock_Config+0xdc>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a29      	ldr	r2, [pc, #164]	; (8005414 <SystemClock_Config+0xe0>)
 800536e:	401a      	ands	r2, r3
 8005370:	4b27      	ldr	r3, [pc, #156]	; (8005410 <SystemClock_Config+0xdc>)
 8005372:	2180      	movs	r1, #128	; 0x80
 8005374:	0109      	lsls	r1, r1, #4
 8005376:	430a      	orrs	r2, r1
 8005378:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800537a:	0021      	movs	r1, r4
 800537c:	187b      	adds	r3, r7, r1
 800537e:	2218      	movs	r2, #24
 8005380:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005382:	187b      	adds	r3, r7, r1
 8005384:	2201      	movs	r2, #1
 8005386:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005388:	187b      	adds	r3, r7, r1
 800538a:	2201      	movs	r2, #1
 800538c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800538e:	187b      	adds	r3, r7, r1
 8005390:	2200      	movs	r2, #0
 8005392:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8005394:	187b      	adds	r3, r7, r1
 8005396:	22a0      	movs	r2, #160	; 0xa0
 8005398:	0212      	lsls	r2, r2, #8
 800539a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800539c:	187b      	adds	r3, r7, r1
 800539e:	2200      	movs	r2, #0
 80053a0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053a2:	187b      	adds	r3, r7, r1
 80053a4:	0018      	movs	r0, r3
 80053a6:	f7fc fc2d 	bl	8001c04 <HAL_RCC_OscConfig>
 80053aa:	1e03      	subs	r3, r0, #0
 80053ac:	d001      	beq.n	80053b2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80053ae:	f001 f9a3 	bl	80066f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053b2:	212c      	movs	r1, #44	; 0x2c
 80053b4:	187b      	adds	r3, r7, r1
 80053b6:	220f      	movs	r2, #15
 80053b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80053ba:	187b      	adds	r3, r7, r1
 80053bc:	2200      	movs	r2, #0
 80053be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053c0:	187b      	adds	r3, r7, r1
 80053c2:	2200      	movs	r2, #0
 80053c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80053c6:	187b      	adds	r3, r7, r1
 80053c8:	2200      	movs	r2, #0
 80053ca:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80053cc:	187b      	adds	r3, r7, r1
 80053ce:	2200      	movs	r2, #0
 80053d0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80053d2:	187b      	adds	r3, r7, r1
 80053d4:	2100      	movs	r1, #0
 80053d6:	0018      	movs	r0, r3
 80053d8:	f7fc ffe4 	bl	80023a4 <HAL_RCC_ClockConfig>
 80053dc:	1e03      	subs	r3, r0, #0
 80053de:	d001      	beq.n	80053e4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80053e0:	f001 f98a 	bl	80066f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 80053e4:	1d3b      	adds	r3, r7, #4
 80053e6:	2222      	movs	r2, #34	; 0x22
 80053e8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80053ea:	1d3b      	adds	r3, r7, #4
 80053ec:	2200      	movs	r2, #0
 80053ee:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80053f0:	1d3b      	adds	r3, r7, #4
 80053f2:	2280      	movs	r2, #128	; 0x80
 80053f4:	0292      	lsls	r2, r2, #10
 80053f6:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80053f8:	1d3b      	adds	r3, r7, #4
 80053fa:	0018      	movs	r0, r3
 80053fc:	f7fd f9b6 	bl	800276c <HAL_RCCEx_PeriphCLKConfig>
 8005400:	1e03      	subs	r3, r0, #0
 8005402:	d001      	beq.n	8005408 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005404:	f001 f978 	bl	80066f8 <Error_Handler>
  }
}
 8005408:	46c0      	nop			; (mov r8, r8)
 800540a:	46bd      	mov	sp, r7
 800540c:	b01f      	add	sp, #124	; 0x7c
 800540e:	bd90      	pop	{r4, r7, pc}
 8005410:	40007000 	.word	0x40007000
 8005414:	ffffe7ff 	.word	0xffffe7ff

08005418 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800541e:	003b      	movs	r3, r7
 8005420:	0018      	movs	r0, r3
 8005422:	2308      	movs	r3, #8
 8005424:	001a      	movs	r2, r3
 8005426:	2100      	movs	r1, #0
 8005428:	f001 fed8 	bl	80071dc <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800542c:	4b44      	ldr	r3, [pc, #272]	; (8005540 <MX_ADC_Init+0x128>)
 800542e:	4a45      	ldr	r2, [pc, #276]	; (8005544 <MX_ADC_Init+0x12c>)
 8005430:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8005432:	4b43      	ldr	r3, [pc, #268]	; (8005540 <MX_ADC_Init+0x128>)
 8005434:	2200      	movs	r2, #0
 8005436:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005438:	4b41      	ldr	r3, [pc, #260]	; (8005540 <MX_ADC_Init+0x128>)
 800543a:	2280      	movs	r2, #128	; 0x80
 800543c:	0612      	lsls	r2, r2, #24
 800543e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8005440:	4b3f      	ldr	r3, [pc, #252]	; (8005540 <MX_ADC_Init+0x128>)
 8005442:	2200      	movs	r2, #0
 8005444:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8005446:	4b3e      	ldr	r3, [pc, #248]	; (8005540 <MX_ADC_Init+0x128>)
 8005448:	2206      	movs	r2, #6
 800544a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800544c:	4b3c      	ldr	r3, [pc, #240]	; (8005540 <MX_ADC_Init+0x128>)
 800544e:	2201      	movs	r2, #1
 8005450:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005452:	4b3b      	ldr	r3, [pc, #236]	; (8005540 <MX_ADC_Init+0x128>)
 8005454:	2200      	movs	r2, #0
 8005456:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8005458:	4b39      	ldr	r3, [pc, #228]	; (8005540 <MX_ADC_Init+0x128>)
 800545a:	2220      	movs	r2, #32
 800545c:	2101      	movs	r1, #1
 800545e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8005460:	4b37      	ldr	r3, [pc, #220]	; (8005540 <MX_ADC_Init+0x128>)
 8005462:	2221      	movs	r2, #33	; 0x21
 8005464:	2100      	movs	r1, #0
 8005466:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005468:	4b35      	ldr	r3, [pc, #212]	; (8005540 <MX_ADC_Init+0x128>)
 800546a:	2200      	movs	r2, #0
 800546c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800546e:	4b34      	ldr	r3, [pc, #208]	; (8005540 <MX_ADC_Init+0x128>)
 8005470:	22c2      	movs	r2, #194	; 0xc2
 8005472:	32ff      	adds	r2, #255	; 0xff
 8005474:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8005476:	4b32      	ldr	r3, [pc, #200]	; (8005540 <MX_ADC_Init+0x128>)
 8005478:	222c      	movs	r2, #44	; 0x2c
 800547a:	2100      	movs	r1, #0
 800547c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800547e:	4b30      	ldr	r3, [pc, #192]	; (8005540 <MX_ADC_Init+0x128>)
 8005480:	2204      	movs	r2, #4
 8005482:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005484:	4b2e      	ldr	r3, [pc, #184]	; (8005540 <MX_ADC_Init+0x128>)
 8005486:	2200      	movs	r2, #0
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800548a:	4b2d      	ldr	r3, [pc, #180]	; (8005540 <MX_ADC_Init+0x128>)
 800548c:	2200      	movs	r2, #0
 800548e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8005490:	4b2b      	ldr	r3, [pc, #172]	; (8005540 <MX_ADC_Init+0x128>)
 8005492:	2200      	movs	r2, #0
 8005494:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8005496:	4b2a      	ldr	r3, [pc, #168]	; (8005540 <MX_ADC_Init+0x128>)
 8005498:	2200      	movs	r2, #0
 800549a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800549c:	4b28      	ldr	r3, [pc, #160]	; (8005540 <MX_ADC_Init+0x128>)
 800549e:	0018      	movs	r0, r3
 80054a0:	f7fb fd64 	bl	8000f6c <HAL_ADC_Init>
 80054a4:	1e03      	subs	r3, r0, #0
 80054a6:	d001      	beq.n	80054ac <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80054a8:	f001 f926 	bl	80066f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80054ac:	003b      	movs	r3, r7
 80054ae:	4a26      	ldr	r2, [pc, #152]	; (8005548 <MX_ADC_Init+0x130>)
 80054b0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80054b2:	003b      	movs	r3, r7
 80054b4:	2280      	movs	r2, #128	; 0x80
 80054b6:	0152      	lsls	r2, r2, #5
 80054b8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80054ba:	003a      	movs	r2, r7
 80054bc:	4b20      	ldr	r3, [pc, #128]	; (8005540 <MX_ADC_Init+0x128>)
 80054be:	0011      	movs	r1, r2
 80054c0:	0018      	movs	r0, r3
 80054c2:	f7fb ff93 	bl	80013ec <HAL_ADC_ConfigChannel>
 80054c6:	1e03      	subs	r3, r0, #0
 80054c8:	d001      	beq.n	80054ce <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80054ca:	f001 f915 	bl	80066f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80054ce:	003b      	movs	r3, r7
 80054d0:	4a1e      	ldr	r2, [pc, #120]	; (800554c <MX_ADC_Init+0x134>)
 80054d2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80054d4:	003a      	movs	r2, r7
 80054d6:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <MX_ADC_Init+0x128>)
 80054d8:	0011      	movs	r1, r2
 80054da:	0018      	movs	r0, r3
 80054dc:	f7fb ff86 	bl	80013ec <HAL_ADC_ConfigChannel>
 80054e0:	1e03      	subs	r3, r0, #0
 80054e2:	d001      	beq.n	80054e8 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80054e4:	f001 f908 	bl	80066f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80054e8:	003b      	movs	r3, r7
 80054ea:	4a19      	ldr	r2, [pc, #100]	; (8005550 <MX_ADC_Init+0x138>)
 80054ec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80054ee:	003a      	movs	r2, r7
 80054f0:	4b13      	ldr	r3, [pc, #76]	; (8005540 <MX_ADC_Init+0x128>)
 80054f2:	0011      	movs	r1, r2
 80054f4:	0018      	movs	r0, r3
 80054f6:	f7fb ff79 	bl	80013ec <HAL_ADC_ConfigChannel>
 80054fa:	1e03      	subs	r3, r0, #0
 80054fc:	d001      	beq.n	8005502 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 80054fe:	f001 f8fb 	bl	80066f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005502:	003b      	movs	r3, r7
 8005504:	4a13      	ldr	r2, [pc, #76]	; (8005554 <MX_ADC_Init+0x13c>)
 8005506:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005508:	003a      	movs	r2, r7
 800550a:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <MX_ADC_Init+0x128>)
 800550c:	0011      	movs	r1, r2
 800550e:	0018      	movs	r0, r3
 8005510:	f7fb ff6c 	bl	80013ec <HAL_ADC_ConfigChannel>
 8005514:	1e03      	subs	r3, r0, #0
 8005516:	d001      	beq.n	800551c <MX_ADC_Init+0x104>
  {
    Error_Handler();
 8005518:	f001 f8ee 	bl	80066f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800551c:	003b      	movs	r3, r7
 800551e:	4a0e      	ldr	r2, [pc, #56]	; (8005558 <MX_ADC_Init+0x140>)
 8005520:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005522:	003a      	movs	r2, r7
 8005524:	4b06      	ldr	r3, [pc, #24]	; (8005540 <MX_ADC_Init+0x128>)
 8005526:	0011      	movs	r1, r2
 8005528:	0018      	movs	r0, r3
 800552a:	f7fb ff5f 	bl	80013ec <HAL_ADC_ConfigChannel>
 800552e:	1e03      	subs	r3, r0, #0
 8005530:	d001      	beq.n	8005536 <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 8005532:	f001 f8e1 	bl	80066f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	46bd      	mov	sp, r7
 800553a:	b002      	add	sp, #8
 800553c:	bd80      	pop	{r7, pc}
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	20000290 	.word	0x20000290
 8005544:	40012400 	.word	0x40012400
 8005548:	28000400 	.word	0x28000400
 800554c:	2c000800 	.word	0x2c000800
 8005550:	30001000 	.word	0x30001000
 8005554:	34002000 	.word	0x34002000
 8005558:	38004000 	.word	0x38004000

0800555c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b090      	sub	sp, #64	; 0x40
 8005560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8005562:	232c      	movs	r3, #44	; 0x2c
 8005564:	18fb      	adds	r3, r7, r3
 8005566:	0018      	movs	r0, r3
 8005568:	2314      	movs	r3, #20
 800556a:	001a      	movs	r2, r3
 800556c:	2100      	movs	r1, #0
 800556e:	f001 fe35 	bl	80071dc <memset>
  RTC_DateTypeDef sDate = {0};
 8005572:	2328      	movs	r3, #40	; 0x28
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800557a:	003b      	movs	r3, r7
 800557c:	0018      	movs	r0, r3
 800557e:	2328      	movs	r3, #40	; 0x28
 8005580:	001a      	movs	r2, r3
 8005582:	2100      	movs	r1, #0
 8005584:	f001 fe2a 	bl	80071dc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8005588:	4b41      	ldr	r3, [pc, #260]	; (8005690 <MX_RTC_Init+0x134>)
 800558a:	4a42      	ldr	r2, [pc, #264]	; (8005694 <MX_RTC_Init+0x138>)
 800558c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800558e:	4b40      	ldr	r3, [pc, #256]	; (8005690 <MX_RTC_Init+0x134>)
 8005590:	2200      	movs	r2, #0
 8005592:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005594:	4b3e      	ldr	r3, [pc, #248]	; (8005690 <MX_RTC_Init+0x134>)
 8005596:	227f      	movs	r2, #127	; 0x7f
 8005598:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800559a:	4b3d      	ldr	r3, [pc, #244]	; (8005690 <MX_RTC_Init+0x134>)
 800559c:	22ff      	movs	r2, #255	; 0xff
 800559e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80055a0:	4b3b      	ldr	r3, [pc, #236]	; (8005690 <MX_RTC_Init+0x134>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80055a6:	4b3a      	ldr	r3, [pc, #232]	; (8005690 <MX_RTC_Init+0x134>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80055ac:	4b38      	ldr	r3, [pc, #224]	; (8005690 <MX_RTC_Init+0x134>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80055b2:	4b37      	ldr	r3, [pc, #220]	; (8005690 <MX_RTC_Init+0x134>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80055b8:	4b35      	ldr	r3, [pc, #212]	; (8005690 <MX_RTC_Init+0x134>)
 80055ba:	0018      	movs	r0, r3
 80055bc:	f7fd fa4a 	bl	8002a54 <HAL_RTC_Init>
 80055c0:	1e03      	subs	r3, r0, #0
 80055c2:	d001      	beq.n	80055c8 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80055c4:	f001 f898 	bl	80066f8 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80055c8:	212c      	movs	r1, #44	; 0x2c
 80055ca:	187b      	adds	r3, r7, r1
 80055cc:	2200      	movs	r2, #0
 80055ce:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80055d0:	187b      	adds	r3, r7, r1
 80055d2:	2200      	movs	r2, #0
 80055d4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80055d6:	187b      	adds	r3, r7, r1
 80055d8:	2200      	movs	r2, #0
 80055da:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80055dc:	187b      	adds	r3, r7, r1
 80055de:	2200      	movs	r2, #0
 80055e0:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80055e2:	187b      	adds	r3, r7, r1
 80055e4:	2200      	movs	r2, #0
 80055e6:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80055e8:	1879      	adds	r1, r7, r1
 80055ea:	4b29      	ldr	r3, [pc, #164]	; (8005690 <MX_RTC_Init+0x134>)
 80055ec:	2201      	movs	r2, #1
 80055ee:	0018      	movs	r0, r3
 80055f0:	f7fd face 	bl	8002b90 <HAL_RTC_SetTime>
 80055f4:	1e03      	subs	r3, r0, #0
 80055f6:	d001      	beq.n	80055fc <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 80055f8:	f001 f87e 	bl	80066f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80055fc:	2128      	movs	r1, #40	; 0x28
 80055fe:	187b      	adds	r3, r7, r1
 8005600:	2201      	movs	r2, #1
 8005602:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8005604:	187b      	adds	r3, r7, r1
 8005606:	2201      	movs	r2, #1
 8005608:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800560a:	187b      	adds	r3, r7, r1
 800560c:	2201      	movs	r2, #1
 800560e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8005610:	187b      	adds	r3, r7, r1
 8005612:	2200      	movs	r2, #0
 8005614:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005616:	1879      	adds	r1, r7, r1
 8005618:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <MX_RTC_Init+0x134>)
 800561a:	2201      	movs	r2, #1
 800561c:	0018      	movs	r0, r3
 800561e:	f7fd fbd7 	bl	8002dd0 <HAL_RTC_SetDate>
 8005622:	1e03      	subs	r3, r0, #0
 8005624:	d001      	beq.n	800562a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8005626:	f001 f867 	bl	80066f8 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800562a:	003b      	movs	r3, r7
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8005630:	003b      	movs	r3, r7
 8005632:	2200      	movs	r2, #0
 8005634:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8005636:	003b      	movs	r3, r7
 8005638:	2200      	movs	r2, #0
 800563a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800563c:	003b      	movs	r3, r7
 800563e:	2200      	movs	r2, #0
 8005640:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005642:	003b      	movs	r3, r7
 8005644:	2200      	movs	r2, #0
 8005646:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005648:	003b      	movs	r3, r7
 800564a:	2200      	movs	r2, #0
 800564c:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 800564e:	003b      	movs	r3, r7
 8005650:	2280      	movs	r2, #128	; 0x80
 8005652:	0612      	lsls	r2, r2, #24
 8005654:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8005656:	003b      	movs	r3, r7
 8005658:	2200      	movs	r2, #0
 800565a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800565c:	003b      	movs	r3, r7
 800565e:	2200      	movs	r2, #0
 8005660:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8005662:	003b      	movs	r3, r7
 8005664:	2220      	movs	r2, #32
 8005666:	2101      	movs	r1, #1
 8005668:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800566a:	003b      	movs	r3, r7
 800566c:	2280      	movs	r2, #128	; 0x80
 800566e:	0052      	lsls	r2, r2, #1
 8005670:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8005672:	0039      	movs	r1, r7
 8005674:	4b06      	ldr	r3, [pc, #24]	; (8005690 <MX_RTC_Init+0x134>)
 8005676:	2201      	movs	r2, #1
 8005678:	0018      	movs	r0, r3
 800567a:	f7fd fca5 	bl	8002fc8 <HAL_RTC_SetAlarm>
 800567e:	1e03      	subs	r3, r0, #0
 8005680:	d001      	beq.n	8005686 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8005682:	f001 f839 	bl	80066f8 <Error_Handler>
//  	  RTC_TimeTypeDef sTime;
//  	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
//  		printf("Current Time: %2u:%2u:%2u\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
  /* USER CODE END RTC_Init 2 */

}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	46bd      	mov	sp, r7
 800568a:	b010      	add	sp, #64	; 0x40
 800568c:	bd80      	pop	{r7, pc}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	20000170 	.word	0x20000170
 8005694:	40002800 	.word	0x40002800

08005698 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b090      	sub	sp, #64	; 0x40
 800569c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800569e:	2330      	movs	r3, #48	; 0x30
 80056a0:	18fb      	adds	r3, r7, r3
 80056a2:	0018      	movs	r0, r3
 80056a4:	2310      	movs	r3, #16
 80056a6:	001a      	movs	r2, r3
 80056a8:	2100      	movs	r1, #0
 80056aa:	f001 fd97 	bl	80071dc <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80056ae:	231c      	movs	r3, #28
 80056b0:	18fb      	adds	r3, r7, r3
 80056b2:	0018      	movs	r0, r3
 80056b4:	2314      	movs	r3, #20
 80056b6:	001a      	movs	r2, r3
 80056b8:	2100      	movs	r1, #0
 80056ba:	f001 fd8f 	bl	80071dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056be:	2314      	movs	r3, #20
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	0018      	movs	r0, r3
 80056c4:	2308      	movs	r3, #8
 80056c6:	001a      	movs	r2, r3
 80056c8:	2100      	movs	r1, #0
 80056ca:	f001 fd87 	bl	80071dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80056ce:	1d3b      	adds	r3, r7, #4
 80056d0:	0018      	movs	r0, r3
 80056d2:	2310      	movs	r3, #16
 80056d4:	001a      	movs	r2, r3
 80056d6:	2100      	movs	r1, #0
 80056d8:	f001 fd80 	bl	80071dc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80056dc:	4b3d      	ldr	r3, [pc, #244]	; (80057d4 <MX_TIM2_Init+0x13c>)
 80056de:	2280      	movs	r2, #128	; 0x80
 80056e0:	05d2      	lsls	r2, r2, #23
 80056e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 80056e4:	4b3b      	ldr	r3, [pc, #236]	; (80057d4 <MX_TIM2_Init+0x13c>)
 80056e6:	2214      	movs	r2, #20
 80056e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056ea:	4b3a      	ldr	r3, [pc, #232]	; (80057d4 <MX_TIM2_Init+0x13c>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80056f0:	4b38      	ldr	r3, [pc, #224]	; (80057d4 <MX_TIM2_Init+0x13c>)
 80056f2:	2209      	movs	r2, #9
 80056f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056f6:	4b37      	ldr	r3, [pc, #220]	; (80057d4 <MX_TIM2_Init+0x13c>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056fc:	4b35      	ldr	r3, [pc, #212]	; (80057d4 <MX_TIM2_Init+0x13c>)
 80056fe:	2200      	movs	r2, #0
 8005700:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005702:	4b34      	ldr	r3, [pc, #208]	; (80057d4 <MX_TIM2_Init+0x13c>)
 8005704:	0018      	movs	r0, r3
 8005706:	f7fd fe1c 	bl	8003342 <HAL_TIM_Base_Init>
 800570a:	1e03      	subs	r3, r0, #0
 800570c:	d001      	beq.n	8005712 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800570e:	f000 fff3 	bl	80066f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005712:	2130      	movs	r1, #48	; 0x30
 8005714:	187b      	adds	r3, r7, r1
 8005716:	2280      	movs	r2, #128	; 0x80
 8005718:	0152      	lsls	r2, r2, #5
 800571a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800571c:	187a      	adds	r2, r7, r1
 800571e:	4b2d      	ldr	r3, [pc, #180]	; (80057d4 <MX_TIM2_Init+0x13c>)
 8005720:	0011      	movs	r1, r2
 8005722:	0018      	movs	r0, r3
 8005724:	f7fe f9b0 	bl	8003a88 <HAL_TIM_ConfigClockSource>
 8005728:	1e03      	subs	r3, r0, #0
 800572a:	d001      	beq.n	8005730 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800572c:	f000 ffe4 	bl	80066f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005730:	4b28      	ldr	r3, [pc, #160]	; (80057d4 <MX_TIM2_Init+0x13c>)
 8005732:	0018      	movs	r0, r3
 8005734:	f7fd fe7f 	bl	8003436 <HAL_TIM_PWM_Init>
 8005738:	1e03      	subs	r3, r0, #0
 800573a:	d001      	beq.n	8005740 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800573c:	f000 ffdc 	bl	80066f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8005740:	211c      	movs	r1, #28
 8005742:	187b      	adds	r3, r7, r1
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8005748:	187b      	adds	r3, r7, r1
 800574a:	2200      	movs	r2, #0
 800574c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800574e:	187a      	adds	r2, r7, r1
 8005750:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <MX_TIM2_Init+0x13c>)
 8005752:	0011      	movs	r1, r2
 8005754:	0018      	movs	r0, r3
 8005756:	f7fe fa55 	bl	8003c04 <HAL_TIM_SlaveConfigSynchro>
 800575a:	1e03      	subs	r3, r0, #0
 800575c:	d001      	beq.n	8005762 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800575e:	f000 ffcb 	bl	80066f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005762:	2114      	movs	r1, #20
 8005764:	187b      	adds	r3, r7, r1
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800576a:	187b      	adds	r3, r7, r1
 800576c:	2200      	movs	r2, #0
 800576e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005770:	187a      	adds	r2, r7, r1
 8005772:	4b18      	ldr	r3, [pc, #96]	; (80057d4 <MX_TIM2_Init+0x13c>)
 8005774:	0011      	movs	r1, r2
 8005776:	0018      	movs	r0, r3
 8005778:	f7fe fd55 	bl	8004226 <HAL_TIMEx_MasterConfigSynchronization>
 800577c:	1e03      	subs	r3, r0, #0
 800577e:	d001      	beq.n	8005784 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8005780:	f000 ffba 	bl	80066f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005784:	1d3b      	adds	r3, r7, #4
 8005786:	2260      	movs	r2, #96	; 0x60
 8005788:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 9;
 800578a:	1d3b      	adds	r3, r7, #4
 800578c:	2209      	movs	r2, #9
 800578e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005790:	1d3b      	adds	r3, r7, #4
 8005792:	2200      	movs	r2, #0
 8005794:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005796:	1d3b      	adds	r3, r7, #4
 8005798:	2200      	movs	r2, #0
 800579a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800579c:	1d39      	adds	r1, r7, #4
 800579e:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <MX_TIM2_Init+0x13c>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	0018      	movs	r0, r3
 80057a4:	f7fe f8b8 	bl	8003918 <HAL_TIM_PWM_ConfigChannel>
 80057a8:	1e03      	subs	r3, r0, #0
 80057aa:	d001      	beq.n	80057b0 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 80057ac:	f000 ffa4 	bl	80066f8 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM3_TI1_GPIO) != HAL_OK)
 80057b0:	4b08      	ldr	r3, [pc, #32]	; (80057d4 <MX_TIM2_Init+0x13c>)
 80057b2:	2104      	movs	r1, #4
 80057b4:	0018      	movs	r0, r3
 80057b6:	f7fe fd79 	bl	80042ac <HAL_TIMEx_RemapConfig>
 80057ba:	1e03      	subs	r3, r0, #0
 80057bc:	d001      	beq.n	80057c2 <MX_TIM2_Init+0x12a>
  {
    Error_Handler();
 80057be:	f000 ff9b 	bl	80066f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80057c2:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <MX_TIM2_Init+0x13c>)
 80057c4:	0018      	movs	r0, r3
 80057c6:	f001 f8c5 	bl	8006954 <HAL_TIM_MspPostInit>

}
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	46bd      	mov	sp, r7
 80057ce:	b010      	add	sp, #64	; 0x40
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	200001d0 	.word	0x200001d0

080057d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057de:	2310      	movs	r3, #16
 80057e0:	18fb      	adds	r3, r7, r3
 80057e2:	0018      	movs	r0, r3
 80057e4:	2308      	movs	r3, #8
 80057e6:	001a      	movs	r2, r3
 80057e8:	2100      	movs	r1, #0
 80057ea:	f001 fcf7 	bl	80071dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80057ee:	003b      	movs	r3, r7
 80057f0:	0018      	movs	r0, r3
 80057f2:	2310      	movs	r3, #16
 80057f4:	001a      	movs	r2, r3
 80057f6:	2100      	movs	r1, #0
 80057f8:	f001 fcf0 	bl	80071dc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80057fc:	4b37      	ldr	r3, [pc, #220]	; (80058dc <MX_TIM3_Init+0x104>)
 80057fe:	4a38      	ldr	r2, [pc, #224]	; (80058e0 <MX_TIM3_Init+0x108>)
 8005800:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005802:	4b36      	ldr	r3, [pc, #216]	; (80058dc <MX_TIM3_Init+0x104>)
 8005804:	2200      	movs	r2, #0
 8005806:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005808:	4b34      	ldr	r3, [pc, #208]	; (80058dc <MX_TIM3_Init+0x104>)
 800580a:	2200      	movs	r2, #0
 800580c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800580e:	4b33      	ldr	r3, [pc, #204]	; (80058dc <MX_TIM3_Init+0x104>)
 8005810:	4a34      	ldr	r2, [pc, #208]	; (80058e4 <MX_TIM3_Init+0x10c>)
 8005812:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005814:	4b31      	ldr	r3, [pc, #196]	; (80058dc <MX_TIM3_Init+0x104>)
 8005816:	2200      	movs	r2, #0
 8005818:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800581a:	4b30      	ldr	r3, [pc, #192]	; (80058dc <MX_TIM3_Init+0x104>)
 800581c:	2200      	movs	r2, #0
 800581e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005820:	4b2e      	ldr	r3, [pc, #184]	; (80058dc <MX_TIM3_Init+0x104>)
 8005822:	0018      	movs	r0, r3
 8005824:	f7fd fe07 	bl	8003436 <HAL_TIM_PWM_Init>
 8005828:	1e03      	subs	r3, r0, #0
 800582a:	d001      	beq.n	8005830 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800582c:	f000 ff64 	bl	80066f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005830:	2110      	movs	r1, #16
 8005832:	187b      	adds	r3, r7, r1
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005838:	187b      	adds	r3, r7, r1
 800583a:	2200      	movs	r2, #0
 800583c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800583e:	187a      	adds	r2, r7, r1
 8005840:	4b26      	ldr	r3, [pc, #152]	; (80058dc <MX_TIM3_Init+0x104>)
 8005842:	0011      	movs	r1, r2
 8005844:	0018      	movs	r0, r3
 8005846:	f7fe fcee 	bl	8004226 <HAL_TIMEx_MasterConfigSynchronization>
 800584a:	1e03      	subs	r3, r0, #0
 800584c:	d001      	beq.n	8005852 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800584e:	f000 ff53 	bl	80066f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005852:	003b      	movs	r3, r7
 8005854:	2260      	movs	r2, #96	; 0x60
 8005856:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005858:	003b      	movs	r3, r7
 800585a:	2200      	movs	r2, #0
 800585c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800585e:	003b      	movs	r3, r7
 8005860:	2200      	movs	r2, #0
 8005862:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005864:	003b      	movs	r3, r7
 8005866:	2200      	movs	r2, #0
 8005868:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800586a:	0039      	movs	r1, r7
 800586c:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <MX_TIM3_Init+0x104>)
 800586e:	2200      	movs	r2, #0
 8005870:	0018      	movs	r0, r3
 8005872:	f7fe f851 	bl	8003918 <HAL_TIM_PWM_ConfigChannel>
 8005876:	1e03      	subs	r3, r0, #0
 8005878:	d001      	beq.n	800587e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800587a:	f000 ff3d 	bl	80066f8 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800587e:	4b17      	ldr	r3, [pc, #92]	; (80058dc <MX_TIM3_Init+0x104>)
 8005880:	2104      	movs	r1, #4
 8005882:	0018      	movs	r0, r3
 8005884:	f7fe fd12 	bl	80042ac <HAL_TIMEx_RemapConfig>
 8005888:	1e03      	subs	r3, r0, #0
 800588a:	d001      	beq.n	8005890 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800588c:	f000 ff34 	bl	80066f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005890:	0039      	movs	r1, r7
 8005892:	4b12      	ldr	r3, [pc, #72]	; (80058dc <MX_TIM3_Init+0x104>)
 8005894:	2204      	movs	r2, #4
 8005896:	0018      	movs	r0, r3
 8005898:	f7fe f83e 	bl	8003918 <HAL_TIM_PWM_ConfigChannel>
 800589c:	1e03      	subs	r3, r0, #0
 800589e:	d001      	beq.n	80058a4 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 80058a0:	f000 ff2a 	bl	80066f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80058a4:	0039      	movs	r1, r7
 80058a6:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <MX_TIM3_Init+0x104>)
 80058a8:	2208      	movs	r2, #8
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7fe f834 	bl	8003918 <HAL_TIM_PWM_ConfigChannel>
 80058b0:	1e03      	subs	r3, r0, #0
 80058b2:	d001      	beq.n	80058b8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80058b4:	f000 ff20 	bl	80066f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80058b8:	0039      	movs	r1, r7
 80058ba:	4b08      	ldr	r3, [pc, #32]	; (80058dc <MX_TIM3_Init+0x104>)
 80058bc:	220c      	movs	r2, #12
 80058be:	0018      	movs	r0, r3
 80058c0:	f7fe f82a 	bl	8003918 <HAL_TIM_PWM_ConfigChannel>
 80058c4:	1e03      	subs	r3, r0, #0
 80058c6:	d001      	beq.n	80058cc <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 80058c8:	f000 ff16 	bl	80066f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80058cc:	4b03      	ldr	r3, [pc, #12]	; (80058dc <MX_TIM3_Init+0x104>)
 80058ce:	0018      	movs	r0, r3
 80058d0:	f001 f840 	bl	8006954 <HAL_TIM_MspPostInit>

}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b006      	add	sp, #24
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	200000e8 	.word	0x200000e8
 80058e0:	40000400 	.word	0x40000400
 80058e4:	0000ffff 	.word	0x0000ffff

080058e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058ee:	003b      	movs	r3, r7
 80058f0:	0018      	movs	r0, r3
 80058f2:	2308      	movs	r3, #8
 80058f4:	001a      	movs	r2, r3
 80058f6:	2100      	movs	r1, #0
 80058f8:	f001 fc70 	bl	80071dc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80058fc:	4b15      	ldr	r3, [pc, #84]	; (8005954 <MX_TIM6_Init+0x6c>)
 80058fe:	4a16      	ldr	r2, [pc, #88]	; (8005958 <MX_TIM6_Init+0x70>)
 8005900:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2099;
 8005902:	4b14      	ldr	r3, [pc, #80]	; (8005954 <MX_TIM6_Init+0x6c>)
 8005904:	4a15      	ldr	r2, [pc, #84]	; (800595c <MX_TIM6_Init+0x74>)
 8005906:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005908:	4b12      	ldr	r3, [pc, #72]	; (8005954 <MX_TIM6_Init+0x6c>)
 800590a:	2200      	movs	r2, #0
 800590c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 800590e:	4b11      	ldr	r3, [pc, #68]	; (8005954 <MX_TIM6_Init+0x6c>)
 8005910:	22f4      	movs	r2, #244	; 0xf4
 8005912:	32ff      	adds	r2, #255	; 0xff
 8005914:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005916:	4b0f      	ldr	r3, [pc, #60]	; (8005954 <MX_TIM6_Init+0x6c>)
 8005918:	2200      	movs	r2, #0
 800591a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800591c:	4b0d      	ldr	r3, [pc, #52]	; (8005954 <MX_TIM6_Init+0x6c>)
 800591e:	0018      	movs	r0, r3
 8005920:	f7fd fd0f 	bl	8003342 <HAL_TIM_Base_Init>
 8005924:	1e03      	subs	r3, r0, #0
 8005926:	d001      	beq.n	800592c <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8005928:	f000 fee6 	bl	80066f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800592c:	003b      	movs	r3, r7
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005932:	003b      	movs	r3, r7
 8005934:	2200      	movs	r2, #0
 8005936:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005938:	003a      	movs	r2, r7
 800593a:	4b06      	ldr	r3, [pc, #24]	; (8005954 <MX_TIM6_Init+0x6c>)
 800593c:	0011      	movs	r1, r2
 800593e:	0018      	movs	r0, r3
 8005940:	f7fe fc71 	bl	8004226 <HAL_TIMEx_MasterConfigSynchronization>
 8005944:	1e03      	subs	r3, r0, #0
 8005946:	d001      	beq.n	800594c <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8005948:	f000 fed6 	bl	80066f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800594c:	46c0      	nop			; (mov r8, r8)
 800594e:	46bd      	mov	sp, r7
 8005950:	b002      	add	sp, #8
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20000194 	.word	0x20000194
 8005958:	40001000 	.word	0x40001000
 800595c:	00000833 	.word	0x00000833

08005960 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005966:	2310      	movs	r3, #16
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	0018      	movs	r0, r3
 800596c:	2308      	movs	r3, #8
 800596e:	001a      	movs	r2, r3
 8005970:	2100      	movs	r1, #0
 8005972:	f001 fc33 	bl	80071dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005976:	003b      	movs	r3, r7
 8005978:	0018      	movs	r0, r3
 800597a:	2310      	movs	r3, #16
 800597c:	001a      	movs	r2, r3
 800597e:	2100      	movs	r1, #0
 8005980:	f001 fc2c 	bl	80071dc <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8005984:	4b22      	ldr	r3, [pc, #136]	; (8005a10 <MX_TIM21_Init+0xb0>)
 8005986:	4a23      	ldr	r2, [pc, #140]	; (8005a14 <MX_TIM21_Init+0xb4>)
 8005988:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 800598a:	4b21      	ldr	r3, [pc, #132]	; (8005a10 <MX_TIM21_Init+0xb0>)
 800598c:	2200      	movs	r2, #0
 800598e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005990:	4b1f      	ldr	r3, [pc, #124]	; (8005a10 <MX_TIM21_Init+0xb0>)
 8005992:	2200      	movs	r2, #0
 8005994:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 209;
 8005996:	4b1e      	ldr	r3, [pc, #120]	; (8005a10 <MX_TIM21_Init+0xb0>)
 8005998:	22d1      	movs	r2, #209	; 0xd1
 800599a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800599c:	4b1c      	ldr	r3, [pc, #112]	; (8005a10 <MX_TIM21_Init+0xb0>)
 800599e:	2200      	movs	r2, #0
 80059a0:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059a2:	4b1b      	ldr	r3, [pc, #108]	; (8005a10 <MX_TIM21_Init+0xb0>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 80059a8:	4b19      	ldr	r3, [pc, #100]	; (8005a10 <MX_TIM21_Init+0xb0>)
 80059aa:	0018      	movs	r0, r3
 80059ac:	f7fd fd17 	bl	80033de <HAL_TIM_OC_Init>
 80059b0:	1e03      	subs	r3, r0, #0
 80059b2:	d001      	beq.n	80059b8 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 80059b4:	f000 fea0 	bl	80066f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059b8:	2110      	movs	r1, #16
 80059ba:	187b      	adds	r3, r7, r1
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059c0:	187b      	adds	r3, r7, r1
 80059c2:	2200      	movs	r2, #0
 80059c4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80059c6:	187a      	adds	r2, r7, r1
 80059c8:	4b11      	ldr	r3, [pc, #68]	; (8005a10 <MX_TIM21_Init+0xb0>)
 80059ca:	0011      	movs	r1, r2
 80059cc:	0018      	movs	r0, r3
 80059ce:	f7fe fc2a 	bl	8004226 <HAL_TIMEx_MasterConfigSynchronization>
 80059d2:	1e03      	subs	r3, r0, #0
 80059d4:	d001      	beq.n	80059da <MX_TIM21_Init+0x7a>
  {
    Error_Handler();
 80059d6:	f000 fe8f 	bl	80066f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80059da:	003b      	movs	r3, r7
 80059dc:	2210      	movs	r2, #16
 80059de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80059e0:	003b      	movs	r3, r7
 80059e2:	2200      	movs	r2, #0
 80059e4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059e6:	003b      	movs	r3, r7
 80059e8:	2200      	movs	r2, #0
 80059ea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80059ec:	003b      	movs	r3, r7
 80059ee:	2200      	movs	r2, #0
 80059f0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80059f2:	0039      	movs	r1, r7
 80059f4:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <MX_TIM21_Init+0xb0>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	0018      	movs	r0, r3
 80059fa:	f7fd ff3e 	bl	800387a <HAL_TIM_OC_ConfigChannel>
 80059fe:	1e03      	subs	r3, r0, #0
 8005a00:	d001      	beq.n	8005a06 <MX_TIM21_Init+0xa6>
  {
    Error_Handler();
 8005a02:	f000 fe79 	bl	80066f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b006      	add	sp, #24
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	200002fc 	.word	0x200002fc
 8005a14:	40010800 	.word	0x40010800

08005a18 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8005a18:	b590      	push	{r4, r7, lr}
 8005a1a:	b08d      	sub	sp, #52	; 0x34
 8005a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005a1e:	240c      	movs	r4, #12
 8005a20:	193b      	adds	r3, r7, r4
 8005a22:	0018      	movs	r0, r3
 8005a24:	2324      	movs	r3, #36	; 0x24
 8005a26:	001a      	movs	r2, r3
 8005a28:	2100      	movs	r1, #0
 8005a2a:	f001 fbd7 	bl	80071dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a2e:	1d3b      	adds	r3, r7, #4
 8005a30:	0018      	movs	r0, r3
 8005a32:	2308      	movs	r3, #8
 8005a34:	001a      	movs	r2, r3
 8005a36:	2100      	movs	r1, #0
 8005a38:	f001 fbd0 	bl	80071dc <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8005a3c:	4b2e      	ldr	r3, [pc, #184]	; (8005af8 <MX_TIM22_Init+0xe0>)
 8005a3e:	4a2f      	ldr	r2, [pc, #188]	; (8005afc <MX_TIM22_Init+0xe4>)
 8005a40:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 8005a42:	4b2d      	ldr	r3, [pc, #180]	; (8005af8 <MX_TIM22_Init+0xe0>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a48:	4b2b      	ldr	r3, [pc, #172]	; (8005af8 <MX_TIM22_Init+0xe0>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 65000;
 8005a4e:	4b2a      	ldr	r3, [pc, #168]	; (8005af8 <MX_TIM22_Init+0xe0>)
 8005a50:	4a2b      	ldr	r2, [pc, #172]	; (8005b00 <MX_TIM22_Init+0xe8>)
 8005a52:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a54:	4b28      	ldr	r3, [pc, #160]	; (8005af8 <MX_TIM22_Init+0xe0>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a5a:	4b27      	ldr	r3, [pc, #156]	; (8005af8 <MX_TIM22_Init+0xe0>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005a60:	0021      	movs	r1, r4
 8005a62:	187b      	adds	r3, r7, r1
 8005a64:	2203      	movs	r2, #3
 8005a66:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005a68:	187b      	adds	r3, r7, r1
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005a6e:	187b      	adds	r3, r7, r1
 8005a70:	2201      	movs	r2, #1
 8005a72:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005a74:	187b      	adds	r3, r7, r1
 8005a76:	2200      	movs	r2, #0
 8005a78:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 10;
 8005a7a:	187b      	adds	r3, r7, r1
 8005a7c:	220a      	movs	r2, #10
 8005a7e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8005a80:	187b      	adds	r3, r7, r1
 8005a82:	2202      	movs	r2, #2
 8005a84:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005a86:	187b      	adds	r3, r7, r1
 8005a88:	2201      	movs	r2, #1
 8005a8a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005a8c:	187b      	adds	r3, r7, r1
 8005a8e:	2200      	movs	r2, #0
 8005a90:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 10;
 8005a92:	187b      	adds	r3, r7, r1
 8005a94:	220a      	movs	r2, #10
 8005a96:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim22, &sConfig) != HAL_OK)
 8005a98:	187a      	adds	r2, r7, r1
 8005a9a:	4b17      	ldr	r3, [pc, #92]	; (8005af8 <MX_TIM22_Init+0xe0>)
 8005a9c:	0011      	movs	r1, r2
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f7fd fd18 	bl	80034d4 <HAL_TIM_Encoder_Init>
 8005aa4:	1e03      	subs	r3, r0, #0
 8005aa6:	d001      	beq.n	8005aac <MX_TIM22_Init+0x94>
  {
    Error_Handler();
 8005aa8:	f000 fe26 	bl	80066f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005aac:	1d3b      	adds	r3, r7, #4
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ab2:	1d3b      	adds	r3, r7, #4
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8005ab8:	1d3a      	adds	r2, r7, #4
 8005aba:	4b0f      	ldr	r3, [pc, #60]	; (8005af8 <MX_TIM22_Init+0xe0>)
 8005abc:	0011      	movs	r1, r2
 8005abe:	0018      	movs	r0, r3
 8005ac0:	f7fe fbb1 	bl	8004226 <HAL_TIMEx_MasterConfigSynchronization>
 8005ac4:	1e03      	subs	r3, r0, #0
 8005ac6:	d001      	beq.n	8005acc <MX_TIM22_Init+0xb4>
  {
    Error_Handler();
 8005ac8:	f000 fe16 	bl	80066f8 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM3_TI1_GPIO) != HAL_OK)
 8005acc:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <MX_TIM22_Init+0xe0>)
 8005ace:	2104      	movs	r1, #4
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f7fe fbeb 	bl	80042ac <HAL_TIMEx_RemapConfig>
 8005ad6:	1e03      	subs	r3, r0, #0
 8005ad8:	d001      	beq.n	8005ade <MX_TIM22_Init+0xc6>
  {
    Error_Handler();
 8005ada:	f000 fe0d 	bl	80066f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_TI1_GPIO) != HAL_OK)
 8005ade:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <MX_TIM22_Init+0xe0>)
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	f7fe fbe2 	bl	80042ac <HAL_TIMEx_RemapConfig>
 8005ae8:	1e03      	subs	r3, r0, #0
 8005aea:	d001      	beq.n	8005af0 <MX_TIM22_Init+0xd8>
    {
      Error_Handler();
 8005aec:	f000 fe04 	bl	80066f8 <Error_Handler>
    }
  /* USER CODE END TIM22_Init 2 */

}
 8005af0:	46c0      	nop			; (mov r8, r8)
 8005af2:	46bd      	mov	sp, r7
 8005af4:	b00d      	add	sp, #52	; 0x34
 8005af6:	bd90      	pop	{r4, r7, pc}
 8005af8:	20000128 	.word	0x20000128
 8005afc:	40011400 	.word	0x40011400
 8005b00:	0000fde8 	.word	0x0000fde8

08005b04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005b08:	4b14      	ldr	r3, [pc, #80]	; (8005b5c <MX_USART2_UART_Init+0x58>)
 8005b0a:	4a15      	ldr	r2, [pc, #84]	; (8005b60 <MX_USART2_UART_Init+0x5c>)
 8005b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005b0e:	4b13      	ldr	r3, [pc, #76]	; (8005b5c <MX_USART2_UART_Init+0x58>)
 8005b10:	22e1      	movs	r2, #225	; 0xe1
 8005b12:	0252      	lsls	r2, r2, #9
 8005b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b16:	4b11      	ldr	r3, [pc, #68]	; (8005b5c <MX_USART2_UART_Init+0x58>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b1c:	4b0f      	ldr	r3, [pc, #60]	; (8005b5c <MX_USART2_UART_Init+0x58>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b22:	4b0e      	ldr	r3, [pc, #56]	; (8005b5c <MX_USART2_UART_Init+0x58>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b28:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <MX_USART2_UART_Init+0x58>)
 8005b2a:	220c      	movs	r2, #12
 8005b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b2e:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <MX_USART2_UART_Init+0x58>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b34:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <MX_USART2_UART_Init+0x58>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b3a:	4b08      	ldr	r3, [pc, #32]	; (8005b5c <MX_USART2_UART_Init+0x58>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b40:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <MX_USART2_UART_Init+0x58>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005b46:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <MX_USART2_UART_Init+0x58>)
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f7fe fbcd 	bl	80042e8 <HAL_UART_Init>
 8005b4e:	1e03      	subs	r3, r0, #0
 8005b50:	d001      	beq.n	8005b56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005b52:	f000 fdd1 	bl	80066f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20000210 	.word	0x20000210
 8005b60:	40004400 	.word	0x40004400

08005b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005b64:	b590      	push	{r4, r7, lr}
 8005b66:	b08b      	sub	sp, #44	; 0x2c
 8005b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b6a:	2414      	movs	r4, #20
 8005b6c:	193b      	adds	r3, r7, r4
 8005b6e:	0018      	movs	r0, r3
 8005b70:	2314      	movs	r3, #20
 8005b72:	001a      	movs	r2, r3
 8005b74:	2100      	movs	r1, #0
 8005b76:	f001 fb31 	bl	80071dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b7a:	4b66      	ldr	r3, [pc, #408]	; (8005d14 <MX_GPIO_Init+0x1b0>)
 8005b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7e:	4b65      	ldr	r3, [pc, #404]	; (8005d14 <MX_GPIO_Init+0x1b0>)
 8005b80:	2104      	movs	r1, #4
 8005b82:	430a      	orrs	r2, r1
 8005b84:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b86:	4b63      	ldr	r3, [pc, #396]	; (8005d14 <MX_GPIO_Init+0x1b0>)
 8005b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
 8005b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005b92:	4b60      	ldr	r3, [pc, #384]	; (8005d14 <MX_GPIO_Init+0x1b0>)
 8005b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b96:	4b5f      	ldr	r3, [pc, #380]	; (8005d14 <MX_GPIO_Init+0x1b0>)
 8005b98:	2180      	movs	r1, #128	; 0x80
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b9e:	4b5d      	ldr	r3, [pc, #372]	; (8005d14 <MX_GPIO_Init+0x1b0>)
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	2280      	movs	r2, #128	; 0x80
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005baa:	4b5a      	ldr	r3, [pc, #360]	; (8005d14 <MX_GPIO_Init+0x1b0>)
 8005bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bae:	4b59      	ldr	r3, [pc, #356]	; (8005d14 <MX_GPIO_Init+0x1b0>)
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bb6:	4b57      	ldr	r3, [pc, #348]	; (8005d14 <MX_GPIO_Init+0x1b0>)
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	2201      	movs	r2, #1
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	60bb      	str	r3, [r7, #8]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bc2:	4b54      	ldr	r3, [pc, #336]	; (8005d14 <MX_GPIO_Init+0x1b0>)
 8005bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc6:	4b53      	ldr	r3, [pc, #332]	; (8005d14 <MX_GPIO_Init+0x1b0>)
 8005bc8:	2102      	movs	r1, #2
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bce:	4b51      	ldr	r3, [pc, #324]	; (8005d14 <MX_GPIO_Init+0x1b0>)
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	607b      	str	r3, [r7, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8005bda:	2398      	movs	r3, #152	; 0x98
 8005bdc:	0059      	lsls	r1, r3, #1
 8005bde:	23a0      	movs	r3, #160	; 0xa0
 8005be0:	05db      	lsls	r3, r3, #23
 8005be2:	2200      	movs	r2, #0
 8005be4:	0018      	movs	r0, r3
 8005be6:	f7fb ffca 	bl	8001b7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(soil_meter_power_GPIO_Port, soil_meter_power_Pin, GPIO_PIN_SET);
 8005bea:	4b4b      	ldr	r3, [pc, #300]	; (8005d18 <MX_GPIO_Init+0x1b4>)
 8005bec:	2201      	movs	r2, #1
 8005bee:	2120      	movs	r1, #32
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f7fb ffc4 	bl	8001b7e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 8005bf6:	193b      	adds	r3, r7, r4
 8005bf8:	22e0      	movs	r2, #224	; 0xe0
 8005bfa:	0192      	lsls	r2, r2, #6
 8005bfc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005bfe:	193b      	adds	r3, r7, r4
 8005c00:	4a46      	ldr	r2, [pc, #280]	; (8005d1c <MX_GPIO_Init+0x1b8>)
 8005c02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c04:	193b      	adds	r3, r7, r4
 8005c06:	2200      	movs	r2, #0
 8005c08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c0a:	193b      	adds	r3, r7, r4
 8005c0c:	4a42      	ldr	r2, [pc, #264]	; (8005d18 <MX_GPIO_Init+0x1b4>)
 8005c0e:	0019      	movs	r1, r3
 8005c10:	0010      	movs	r0, r2
 8005c12:	f7fb fe19 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005c16:	0021      	movs	r1, r4
 8005c18:	187b      	adds	r3, r7, r1
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005c1e:	187b      	adds	r3, r7, r1
 8005c20:	4a3e      	ldr	r2, [pc, #248]	; (8005d1c <MX_GPIO_Init+0x1b8>)
 8005c22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c24:	187b      	adds	r3, r7, r1
 8005c26:	2200      	movs	r2, #0
 8005c28:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c2a:	000c      	movs	r4, r1
 8005c2c:	187a      	adds	r2, r7, r1
 8005c2e:	23a0      	movs	r3, #160	; 0xa0
 8005c30:	05db      	lsls	r3, r3, #23
 8005c32:	0011      	movs	r1, r2
 8005c34:	0018      	movs	r0, r3
 8005c36:	f7fb fe07 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 8005c3a:	0021      	movs	r1, r4
 8005c3c:	187b      	adds	r3, r7, r1
 8005c3e:	2298      	movs	r2, #152	; 0x98
 8005c40:	0052      	lsls	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c44:	187b      	adds	r3, r7, r1
 8005c46:	2201      	movs	r2, #1
 8005c48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c4a:	187b      	adds	r3, r7, r1
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c50:	187b      	adds	r3, r7, r1
 8005c52:	2200      	movs	r2, #0
 8005c54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c56:	000c      	movs	r4, r1
 8005c58:	187a      	adds	r2, r7, r1
 8005c5a:	23a0      	movs	r3, #160	; 0xa0
 8005c5c:	05db      	lsls	r3, r3, #23
 8005c5e:	0011      	movs	r1, r2
 8005c60:	0018      	movs	r0, r3
 8005c62:	f7fb fdf1 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : soil_meter_power_Pin */
  GPIO_InitStruct.Pin = soil_meter_power_Pin;
 8005c66:	193b      	adds	r3, r7, r4
 8005c68:	2220      	movs	r2, #32
 8005c6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c6c:	193b      	adds	r3, r7, r4
 8005c6e:	2201      	movs	r2, #1
 8005c70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c72:	193b      	adds	r3, r7, r4
 8005c74:	2200      	movs	r2, #0
 8005c76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c78:	193b      	adds	r3, r7, r4
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(soil_meter_power_GPIO_Port, &GPIO_InitStruct);
 8005c7e:	193b      	adds	r3, r7, r4
 8005c80:	4a25      	ldr	r2, [pc, #148]	; (8005d18 <MX_GPIO_Init+0x1b4>)
 8005c82:	0019      	movs	r1, r3
 8005c84:	0010      	movs	r0, r2
 8005c86:	f7fb fddf 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_CLIFF_SENSOR_Pin */
  GPIO_InitStruct.Pin = IR_CLIFF_SENSOR_Pin;
 8005c8a:	193b      	adds	r3, r7, r4
 8005c8c:	2280      	movs	r2, #128	; 0x80
 8005c8e:	0092      	lsls	r2, r2, #2
 8005c90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005c92:	193b      	adds	r3, r7, r4
 8005c94:	4a22      	ldr	r2, [pc, #136]	; (8005d20 <MX_GPIO_Init+0x1bc>)
 8005c96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c98:	193b      	adds	r3, r7, r4
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IR_CLIFF_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8005c9e:	193a      	adds	r2, r7, r4
 8005ca0:	23a0      	movs	r3, #160	; 0xa0
 8005ca2:	05db      	lsls	r3, r3, #23
 8005ca4:	0011      	movs	r1, r2
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f7fb fdce 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_FORWARD_Pin IR_LEFT_Pin IR_RIGHT_Pin */
  GPIO_InitStruct.Pin = IR_FORWARD_Pin|IR_LEFT_Pin|IR_RIGHT_Pin;
 8005cac:	193b      	adds	r3, r7, r4
 8005cae:	22e0      	movs	r2, #224	; 0xe0
 8005cb0:	0152      	lsls	r2, r2, #5
 8005cb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cb4:	193b      	adds	r3, r7, r4
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cba:	193b      	adds	r3, r7, r4
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cc0:	193a      	adds	r2, r7, r4
 8005cc2:	23a0      	movs	r3, #160	; 0xa0
 8005cc4:	05db      	lsls	r3, r3, #23
 8005cc6:	0011      	movs	r1, r2
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f7fb fdbd 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary_Encoder_PushButton_Pin */
  GPIO_InitStruct.Pin = Rotary_Encoder_PushButton_Pin;
 8005cce:	193b      	adds	r3, r7, r4
 8005cd0:	2240      	movs	r2, #64	; 0x40
 8005cd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005cd4:	193b      	adds	r3, r7, r4
 8005cd6:	4a11      	ldr	r2, [pc, #68]	; (8005d1c <MX_GPIO_Init+0x1b8>)
 8005cd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cda:	193b      	adds	r3, r7, r4
 8005cdc:	2200      	movs	r2, #0
 8005cde:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Rotary_Encoder_PushButton_GPIO_Port, &GPIO_InitStruct);
 8005ce0:	193b      	adds	r3, r7, r4
 8005ce2:	4a10      	ldr	r2, [pc, #64]	; (8005d24 <MX_GPIO_Init+0x1c0>)
 8005ce4:	0019      	movs	r1, r3
 8005ce6:	0010      	movs	r0, r2
 8005ce8:	f7fb fdae 	bl	8001848 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8005cec:	2200      	movs	r2, #0
 8005cee:	2100      	movs	r1, #0
 8005cf0:	2005      	movs	r0, #5
 8005cf2:	f7fb fd77 	bl	80017e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8005cf6:	2005      	movs	r0, #5
 8005cf8:	f7fb fd89 	bl	800180e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	2100      	movs	r1, #0
 8005d00:	2007      	movs	r0, #7
 8005d02:	f7fb fd6f 	bl	80017e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8005d06:	2007      	movs	r0, #7
 8005d08:	f7fb fd81 	bl	800180e <HAL_NVIC_EnableIRQ>

}
 8005d0c:	46c0      	nop			; (mov r8, r8)
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	b00b      	add	sp, #44	; 0x2c
 8005d12:	bd90      	pop	{r4, r7, pc}
 8005d14:	40021000 	.word	0x40021000
 8005d18:	50000800 	.word	0x50000800
 8005d1c:	10110000 	.word	0x10110000
 8005d20:	10310000 	.word	0x10310000
 8005d24:	50000400 	.word	0x50000400

08005d28 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8005d30:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <__io_putchar+0x20>)
 8005d32:	1d39      	adds	r1, r7, #4
 8005d34:	4805      	ldr	r0, [pc, #20]	; (8005d4c <__io_putchar+0x24>)
 8005d36:	2201      	movs	r2, #1
 8005d38:	f7fe fb2a 	bl	8004390 <HAL_UART_Transmit>

return ch;
 8005d3c:	687b      	ldr	r3, [r7, #4]
}
 8005d3e:	0018      	movs	r0, r3
 8005d40:	46bd      	mov	sp, r7
 8005d42:	b002      	add	sp, #8
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	0000ffff 	.word	0x0000ffff
 8005d4c:	20000210 	.word	0x20000210

08005d50 <Right_Encoder_Interrupt_Handler>:

void Right_Encoder_Interrupt_Handler(void){
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
//	r_enc_cnt++;
	if(r_dir==1)
 8005d54:	4b08      	ldr	r3, [pc, #32]	; (8005d78 <Right_Encoder_Interrupt_Handler+0x28>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d105      	bne.n	8005d68 <Right_Encoder_Interrupt_Handler+0x18>
		r_enc_currentPos++;
 8005d5c:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <Right_Encoder_Interrupt_Handler+0x2c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <Right_Encoder_Interrupt_Handler+0x2c>)
 8005d64:	601a      	str	r2, [r3, #0]
	else
		r_enc_currentPos--;
}
 8005d66:	e004      	b.n	8005d72 <Right_Encoder_Interrupt_Handler+0x22>
		r_enc_currentPos--;
 8005d68:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <Right_Encoder_Interrupt_Handler+0x2c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	1e5a      	subs	r2, r3, #1
 8005d6e:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <Right_Encoder_Interrupt_Handler+0x2c>)
 8005d70:	601a      	str	r2, [r3, #0]
}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	200000dc 	.word	0x200000dc
 8005d7c:	20000088 	.word	0x20000088

08005d80 <Left_Encoder_Interrupt_Handler>:

void Left_Encoder_Interrupt_Handler(void){
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
	if(l_dir==1)
 8005d84:	4b08      	ldr	r3, [pc, #32]	; (8005da8 <Left_Encoder_Interrupt_Handler+0x28>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d105      	bne.n	8005d98 <Left_Encoder_Interrupt_Handler+0x18>
		l_enc_currentPos++;
 8005d8c:	4b07      	ldr	r3, [pc, #28]	; (8005dac <Left_Encoder_Interrupt_Handler+0x2c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	4b06      	ldr	r3, [pc, #24]	; (8005dac <Left_Encoder_Interrupt_Handler+0x2c>)
 8005d94:	601a      	str	r2, [r3, #0]
	else
		l_enc_currentPos--;
}
 8005d96:	e004      	b.n	8005da2 <Left_Encoder_Interrupt_Handler+0x22>
		l_enc_currentPos--;
 8005d98:	4b04      	ldr	r3, [pc, #16]	; (8005dac <Left_Encoder_Interrupt_Handler+0x2c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	1e5a      	subs	r2, r3, #1
 8005d9e:	4b03      	ldr	r3, [pc, #12]	; (8005dac <Left_Encoder_Interrupt_Handler+0x2c>)
 8005da0:	601a      	str	r2, [r3, #0]
}
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	200002f8 	.word	0x200002f8
 8005dac:	20000090 	.word	0x20000090

08005db0 <Right_Motor_PWM_Gen>:



void Right_Motor_PWM_Gen(int speed, int brake){
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
	// if brake is true, brake and ignore speed setting
	if (brake){
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d008      	beq.n	8005dd2 <Right_Motor_PWM_Gen+0x22>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, MOTOR_MAX_SPEED);
 8005dc0:	4b1a      	ldr	r3, [pc, #104]	; (8005e2c <Right_Motor_PWM_Gen+0x7c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1a      	ldr	r2, [pc, #104]	; (8005e30 <Right_Motor_PWM_Gen+0x80>)
 8005dc6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MOTOR_MAX_SPEED);
 8005dc8:	4b18      	ldr	r3, [pc, #96]	; (8005e2c <Right_Motor_PWM_Gen+0x7c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a18      	ldr	r2, [pc, #96]	; (8005e30 <Right_Motor_PWM_Gen+0x80>)
 8005dce:	639a      	str	r2, [r3, #56]	; 0x38
		} else {
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
		}
	}
}
 8005dd0:	e027      	b.n	8005e22 <Right_Motor_PWM_Gen+0x72>
		if(speed < 0){
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	da06      	bge.n	8005de6 <Right_Motor_PWM_Gen+0x36>
			r_dir = 0;
 8005dd8:	4b16      	ldr	r3, [pc, #88]	; (8005e34 <Right_Motor_PWM_Gen+0x84>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
			speed = -speed;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	425b      	negs	r3, r3
 8005de2:	607b      	str	r3, [r7, #4]
 8005de4:	e002      	b.n	8005dec <Right_Motor_PWM_Gen+0x3c>
			r_dir = 1;
 8005de6:	4b13      	ldr	r3, [pc, #76]	; (8005e34 <Right_Motor_PWM_Gen+0x84>)
 8005de8:	2201      	movs	r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
		if(speed > MOTOR_MAX_SPEED)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a10      	ldr	r2, [pc, #64]	; (8005e30 <Right_Motor_PWM_Gen+0x80>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	dd01      	ble.n	8005df8 <Right_Motor_PWM_Gen+0x48>
			speed = MOTOR_MAX_SPEED;
 8005df4:	4b0e      	ldr	r3, [pc, #56]	; (8005e30 <Right_Motor_PWM_Gen+0x80>)
 8005df6:	607b      	str	r3, [r7, #4]
		if(r_dir==1){
 8005df8:	4b0e      	ldr	r3, [pc, #56]	; (8005e34 <Right_Motor_PWM_Gen+0x84>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d108      	bne.n	8005e12 <Right_Motor_PWM_Gen+0x62>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 8005e00:	4b0a      	ldr	r3, [pc, #40]	; (8005e2c <Right_Motor_PWM_Gen+0x7c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8005e08:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <Right_Motor_PWM_Gen+0x7c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005e10:	e007      	b.n	8005e22 <Right_Motor_PWM_Gen+0x72>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8005e12:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <Right_Motor_PWM_Gen+0x7c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2200      	movs	r2, #0
 8005e18:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8005e1a:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <Right_Motor_PWM_Gen+0x7c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005e22:	46c0      	nop			; (mov r8, r8)
 8005e24:	46bd      	mov	sp, r7
 8005e26:	b002      	add	sp, #8
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	46c0      	nop			; (mov r8, r8)
 8005e2c:	200000e8 	.word	0x200000e8
 8005e30:	0000ffff 	.word	0x0000ffff
 8005e34:	200000dc 	.word	0x200000dc

08005e38 <Left_Motor_PWM_Gen>:

void Left_Motor_PWM_Gen(int speed, int brake){
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
	// if brake is true, brake and ignore speed setting
	if (brake){
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d008      	beq.n	8005e5a <Left_Motor_PWM_Gen+0x22>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, MOTOR_MAX_SPEED);
 8005e48:	4b1a      	ldr	r3, [pc, #104]	; (8005eb4 <Left_Motor_PWM_Gen+0x7c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1a      	ldr	r2, [pc, #104]	; (8005eb8 <Left_Motor_PWM_Gen+0x80>)
 8005e4e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, MOTOR_MAX_SPEED);
 8005e50:	4b18      	ldr	r3, [pc, #96]	; (8005eb4 <Left_Motor_PWM_Gen+0x7c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <Left_Motor_PWM_Gen+0x80>)
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40
		} else {
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, speed);
		}
	}
}
 8005e58:	e027      	b.n	8005eaa <Left_Motor_PWM_Gen+0x72>
		if(speed < 0){
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	da06      	bge.n	8005e6e <Left_Motor_PWM_Gen+0x36>
			l_dir = 0;
 8005e60:	4b16      	ldr	r3, [pc, #88]	; (8005ebc <Left_Motor_PWM_Gen+0x84>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]
			speed = -speed;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	425b      	negs	r3, r3
 8005e6a:	607b      	str	r3, [r7, #4]
 8005e6c:	e002      	b.n	8005e74 <Left_Motor_PWM_Gen+0x3c>
			l_dir = 1;
 8005e6e:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <Left_Motor_PWM_Gen+0x84>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
		if(speed > MOTOR_MAX_SPEED)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a10      	ldr	r2, [pc, #64]	; (8005eb8 <Left_Motor_PWM_Gen+0x80>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	dd01      	ble.n	8005e80 <Left_Motor_PWM_Gen+0x48>
			speed = MOTOR_MAX_SPEED;
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <Left_Motor_PWM_Gen+0x80>)
 8005e7e:	607b      	str	r3, [r7, #4]
		if(l_dir==1){
 8005e80:	4b0e      	ldr	r3, [pc, #56]	; (8005ebc <Left_Motor_PWM_Gen+0x84>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d108      	bne.n	8005e9a <Left_Motor_PWM_Gen+0x62>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, speed);
 8005e88:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <Left_Motor_PWM_Gen+0x7c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8005e90:	4b08      	ldr	r3, [pc, #32]	; (8005eb4 <Left_Motor_PWM_Gen+0x7c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2200      	movs	r2, #0
 8005e96:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005e98:	e007      	b.n	8005eaa <Left_Motor_PWM_Gen+0x72>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8005e9a:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <Left_Motor_PWM_Gen+0x7c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, speed);
 8005ea2:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <Left_Motor_PWM_Gen+0x7c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	46bd      	mov	sp, r7
 8005eae:	b002      	add	sp, #8
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	46c0      	nop			; (mov r8, r8)
 8005eb4:	200000e8 	.word	0x200000e8
 8005eb8:	0000ffff 	.word	0x0000ffff
 8005ebc:	200002f8 	.word	0x200002f8

08005ec0 <move_robot>:
  	}

}

// MOVE ROBOT
void move_robot(short dir, int speed){
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	0002      	movs	r2, r0
 8005ec8:	6039      	str	r1, [r7, #0]
 8005eca:	1dbb      	adds	r3, r7, #6
 8005ecc:	801a      	strh	r2, [r3, #0]
	if(speed <= 0 || cliff_detected){
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	dd03      	ble.n	8005edc <move_robot+0x1c>
 8005ed4:	4b29      	ldr	r3, [pc, #164]	; (8005f7c <move_robot+0xbc>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d008      	beq.n	8005eee <move_robot+0x2e>
		Right_Motor_PWM_Gen(0,1);
 8005edc:	2101      	movs	r1, #1
 8005ede:	2000      	movs	r0, #0
 8005ee0:	f7ff ff66 	bl	8005db0 <Right_Motor_PWM_Gen>
		Left_Motor_PWM_Gen(0,1);
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	f7ff ffa6 	bl	8005e38 <Left_Motor_PWM_Gen>
	} else if(dir == REVERSE){
		Right_Motor_PWM_Gen(-speed,0);
		Left_Motor_PWM_Gen(-speed,0);
	}
	}
}
 8005eec:	e042      	b.n	8005f74 <move_robot+0xb4>
		if(dir == TURN_LEFT){
 8005eee:	1dbb      	adds	r3, r7, #6
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	5e9b      	ldrsh	r3, [r3, r2]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10b      	bne.n	8005f10 <move_robot+0x50>
			Right_Motor_PWM_Gen(speed,0);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2100      	movs	r1, #0
 8005efc:	0018      	movs	r0, r3
 8005efe:	f7ff ff57 	bl	8005db0 <Right_Motor_PWM_Gen>
			Left_Motor_PWM_Gen(-speed,0);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	425b      	negs	r3, r3
 8005f06:	2100      	movs	r1, #0
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f7ff ff95 	bl	8005e38 <Left_Motor_PWM_Gen>
}
 8005f0e:	e031      	b.n	8005f74 <move_robot+0xb4>
	} else if(dir == TURN_RIGHT){
 8005f10:	1dbb      	adds	r3, r7, #6
 8005f12:	2200      	movs	r2, #0
 8005f14:	5e9b      	ldrsh	r3, [r3, r2]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d10b      	bne.n	8005f32 <move_robot+0x72>
			Right_Motor_PWM_Gen(-speed,0);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	425b      	negs	r3, r3
 8005f1e:	2100      	movs	r1, #0
 8005f20:	0018      	movs	r0, r3
 8005f22:	f7ff ff45 	bl	8005db0 <Right_Motor_PWM_Gen>
			Left_Motor_PWM_Gen(speed,0);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2100      	movs	r1, #0
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	f7ff ff84 	bl	8005e38 <Left_Motor_PWM_Gen>
}
 8005f30:	e020      	b.n	8005f74 <move_robot+0xb4>
	} else if(dir == FORWARD){
 8005f32:	1dbb      	adds	r3, r7, #6
 8005f34:	2200      	movs	r2, #0
 8005f36:	5e9b      	ldrsh	r3, [r3, r2]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d10a      	bne.n	8005f52 <move_robot+0x92>
		Right_Motor_PWM_Gen(speed,0);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2100      	movs	r1, #0
 8005f40:	0018      	movs	r0, r3
 8005f42:	f7ff ff35 	bl	8005db0 <Right_Motor_PWM_Gen>
		Left_Motor_PWM_Gen(speed,0);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2100      	movs	r1, #0
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	f7ff ff74 	bl	8005e38 <Left_Motor_PWM_Gen>
}
 8005f50:	e010      	b.n	8005f74 <move_robot+0xb4>
	} else if(dir == REVERSE){
 8005f52:	1dbb      	adds	r3, r7, #6
 8005f54:	2200      	movs	r2, #0
 8005f56:	5e9b      	ldrsh	r3, [r3, r2]
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d10b      	bne.n	8005f74 <move_robot+0xb4>
		Right_Motor_PWM_Gen(-speed,0);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	425b      	negs	r3, r3
 8005f60:	2100      	movs	r1, #0
 8005f62:	0018      	movs	r0, r3
 8005f64:	f7ff ff24 	bl	8005db0 <Right_Motor_PWM_Gen>
		Left_Motor_PWM_Gen(-speed,0);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	425b      	negs	r3, r3
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f7ff ff62 	bl	8005e38 <Left_Motor_PWM_Gen>
}
 8005f74:	46c0      	nop			; (mov r8, r8)
 8005f76:	46bd      	mov	sp, r7
 8005f78:	b002      	add	sp, #8
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	200000b9 	.word	0x200000b9

08005f80 <TEN_KHZ_TIM_Interrupt_Handler>:

void TEN_KHZ_TIM_Interrupt_Handler(void){
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
//	ten_hz_counter++;
//	// Check 10 times per second
//	if(ten_hz_counter >= 1000){
//		ten_hz_counter = 0;
//	}
}
 8005f84:	46c0      	nop			; (mov r8, r8)
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <ADC_ConvCpltCallback>:
	fflush(stdout);
//	r_enc_currentPos = 0;
}

void ADC_ConvCpltCallback(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
	for(int i = 0; i < 5; i++){
 8005f92:	2300      	movs	r3, #0
 8005f94:	607b      	str	r3, [r7, #4]
 8005f96:	e00a      	b.n	8005fae <ADC_ConvCpltCallback+0x22>
		ADC_Values[i] = buffer[i];
 8005f98:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <ADC_ConvCpltCallback+0x30>)
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	0052      	lsls	r2, r2, #1
 8005f9e:	5ad1      	ldrh	r1, [r2, r3]
 8005fa0:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <ADC_ConvCpltCallback+0x34>)
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	0052      	lsls	r2, r2, #1
 8005fa6:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < 5; i++){
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3301      	adds	r3, #1
 8005fac:	607b      	str	r3, [r7, #4]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	ddf1      	ble.n	8005f98 <ADC_ConvCpltCallback+0xc>
	}
//	printf("%u, %u, %u, %u\r\n", ADC_Values[0], ADC_Values[1],ADC_Values[2], ADC_Values[3]);
}
 8005fb4:	46c0      	nop			; (mov r8, r8)
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b002      	add	sp, #8
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	20000164 	.word	0x20000164
 8005fc0:	200002ec 	.word	0x200002ec

08005fc4 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
	printf("ERROR\r\n");
 8005fcc:	4b03      	ldr	r3, [pc, #12]	; (8005fdc <HAL_ADC_ErrorCallback+0x18>)
 8005fce:	0018      	movs	r0, r3
 8005fd0:	f001 fa2e 	bl	8007430 <puts>
}
 8005fd4:	46c0      	nop			; (mov r8, r8)
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	b002      	add	sp, #8
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	08007ef0 	.word	0x08007ef0

08005fe0 <check_light>:

/**
 *  @brief This function computes the optimal light direction if 1 direction is 5% brighter than the other 3, otherwise returns -1
 */
int check_light(void){
 8005fe0:	b5b0      	push	{r4, r5, r7, lr}
 8005fe2:	b08a      	sub	sp, #40	; 0x28
 8005fe4:	af00      	add	r7, sp, #0
//	return 0;
	int front = (int)ADC_Values[0];
 8005fe6:	4b38      	ldr	r3, [pc, #224]	; (80060c8 <check_light+0xe8>)
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
	int left = (int)ADC_Values[1];
 8005fec:	4b36      	ldr	r3, [pc, #216]	; (80060c8 <check_light+0xe8>)
 8005fee:	885b      	ldrh	r3, [r3, #2]
 8005ff0:	623b      	str	r3, [r7, #32]
	int rear = (int)ADC_Values[2];
 8005ff2:	4b35      	ldr	r3, [pc, #212]	; (80060c8 <check_light+0xe8>)
 8005ff4:	889b      	ldrh	r3, [r3, #4]
 8005ff6:	61fb      	str	r3, [r7, #28]
	int right = (int)ADC_Values[3];
 8005ff8:	4b33      	ldr	r3, [pc, #204]	; (80060c8 <check_light+0xe8>)
 8005ffa:	88db      	ldrh	r3, [r3, #6]
 8005ffc:	61bb      	str	r3, [r7, #24]

	int sum = front+left+rear+right;
 8005ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	18d2      	adds	r2, r2, r3
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	18d3      	adds	r3, r2, r3
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	18d3      	adds	r3, r2, r3
 800600c:	617b      	str	r3, [r7, #20]
	int avg =  (float)sum / 4;
 800600e:	6978      	ldr	r0, [r7, #20]
 8006010:	f7fa fd42 	bl	8000a98 <__aeabi_i2f>
 8006014:	1c03      	adds	r3, r0, #0
 8006016:	2181      	movs	r1, #129	; 0x81
 8006018:	05c9      	lsls	r1, r1, #23
 800601a:	1c18      	adds	r0, r3, #0
 800601c:	f7fa fb44 	bl	80006a8 <__aeabi_fdiv>
 8006020:	1c03      	adds	r3, r0, #0
 8006022:	1c18      	adds	r0, r3, #0
 8006024:	f7fa fd18 	bl	8000a58 <__aeabi_f2iz>
 8006028:	0003      	movs	r3, r0
 800602a:	613b      	str	r3, [r7, #16]

	int max = fmax(fmax(front, left), fmax(rear, right));
 800602c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800602e:	f7fa febb 	bl	8000da8 <__aeabi_i2d>
 8006032:	0004      	movs	r4, r0
 8006034:	000d      	movs	r5, r1
 8006036:	6a38      	ldr	r0, [r7, #32]
 8006038:	f7fa feb6 	bl	8000da8 <__aeabi_i2d>
 800603c:	0002      	movs	r2, r0
 800603e:	000b      	movs	r3, r1
 8006040:	0020      	movs	r0, r4
 8006042:	0029      	movs	r1, r5
 8006044:	f001 fec7 	bl	8007dd6 <fmax>
 8006048:	0004      	movs	r4, r0
 800604a:	000d      	movs	r5, r1
 800604c:	69f8      	ldr	r0, [r7, #28]
 800604e:	f7fa feab 	bl	8000da8 <__aeabi_i2d>
 8006052:	6038      	str	r0, [r7, #0]
 8006054:	6079      	str	r1, [r7, #4]
 8006056:	69b8      	ldr	r0, [r7, #24]
 8006058:	f7fa fea6 	bl	8000da8 <__aeabi_i2d>
 800605c:	0002      	movs	r2, r0
 800605e:	000b      	movs	r3, r1
 8006060:	6838      	ldr	r0, [r7, #0]
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	f001 feb7 	bl	8007dd6 <fmax>
 8006068:	0002      	movs	r2, r0
 800606a:	000b      	movs	r3, r1
 800606c:	0020      	movs	r0, r4
 800606e:	0029      	movs	r1, r5
 8006070:	f001 feb1 	bl	8007dd6 <fmax>
 8006074:	0003      	movs	r3, r0
 8006076:	000c      	movs	r4, r1
 8006078:	0018      	movs	r0, r3
 800607a:	0021      	movs	r1, r4
 800607c:	f7fa fe5e 	bl	8000d3c <__aeabi_d2iz>
 8006080:	0003      	movs	r3, r0
 8006082:	60fb      	str	r3, [r7, #12]

	float deviation = (float) (max-avg) / avg;
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	0018      	movs	r0, r3
 800608c:	f7fa fd04 	bl	8000a98 <__aeabi_i2f>
 8006090:	1c04      	adds	r4, r0, #0
 8006092:	6938      	ldr	r0, [r7, #16]
 8006094:	f7fa fd00 	bl	8000a98 <__aeabi_i2f>
 8006098:	1c03      	adds	r3, r0, #0
 800609a:	1c19      	adds	r1, r3, #0
 800609c:	1c20      	adds	r0, r4, #0
 800609e:	f7fa fb03 	bl	80006a8 <__aeabi_fdiv>
 80060a2:	1c03      	adds	r3, r0, #0
 80060a4:	60bb      	str	r3, [r7, #8]
	if(deviation < 0.25)
 80060a6:	21fa      	movs	r1, #250	; 0xfa
 80060a8:	0589      	lsls	r1, r1, #22
 80060aa:	68b8      	ldr	r0, [r7, #8]
 80060ac:	f7fa f9f2 	bl	8000494 <__aeabi_fcmplt>
 80060b0:	1e03      	subs	r3, r0, #0
 80060b2:	d002      	beq.n	80060ba <check_light+0xda>
		return -1;
 80060b4:	2301      	movs	r3, #1
 80060b6:	425b      	negs	r3, r3
 80060b8:	e002      	b.n	80060c0 <check_light+0xe0>
	return light_direction();
 80060ba:	f000 f847 	bl	800614c <light_direction>
 80060be:	0003      	movs	r3, r0
}
 80060c0:	0018      	movs	r0, r3
 80060c2:	46bd      	mov	sp, r7
 80060c4:	b00a      	add	sp, #40	; 0x28
 80060c6:	bdb0      	pop	{r4, r5, r7, pc}
 80060c8:	200002ec 	.word	0x200002ec

080060cc <turn_until_light>:

/**
 * @brief Turn the robot until eval_fun returns a value equal to compare_value
 * @param dir: direction to turn, 0 = LEFT, 1 = RIGHT
 */
void turn_until_light(int dir, int compare_value){
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
//	move_robot(0,0);
//	int setpoint = 800;
	if(dir){
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <turn_until_light+0x1c>
		move_robot(TURN_LEFT, 30000);
 80060dc:	4b07      	ldr	r3, [pc, #28]	; (80060fc <turn_until_light+0x30>)
 80060de:	0019      	movs	r1, r3
 80060e0:	2000      	movs	r0, #0
 80060e2:	f7ff feed 	bl	8005ec0 <move_robot>
	} else {
		move_robot(TURN_RIGHT, 30000);
	}
}
 80060e6:	e004      	b.n	80060f2 <turn_until_light+0x26>
		move_robot(TURN_RIGHT, 30000);
 80060e8:	4b04      	ldr	r3, [pc, #16]	; (80060fc <turn_until_light+0x30>)
 80060ea:	0019      	movs	r1, r3
 80060ec:	2001      	movs	r0, #1
 80060ee:	f7ff fee7 	bl	8005ec0 <move_robot>
}
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b002      	add	sp, #8
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	00007530 	.word	0x00007530

08006100 <forward_until_light>:

/**
 * @brief This function moves the robot forward until eval_fun returns a value equal to compare_value
 */
void forward_until_light(int compare_value){
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
//	r_enc_currentPos = 0;
//	l_enc_currentPos = 0;
//	int setpoint = 800;
	if(cliff_detected)
 8006108:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <forward_until_light+0x44>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <forward_until_light+0x1a>
		move_robot(0, 0);
 8006110:	2100      	movs	r1, #0
 8006112:	2000      	movs	r0, #0
 8006114:	f7ff fed4 	bl	8005ec0 <move_robot>
			move_robot(0, 0);
		} else {
			move_robot(FORWARD, 30000);
		}
	}
}
 8006118:	e00f      	b.n	800613a <forward_until_light+0x3a>
		if(check_light() == compare_value){
 800611a:	f7ff ff61 	bl	8005fe0 <check_light>
 800611e:	0002      	movs	r2, r0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4293      	cmp	r3, r2
 8006124:	d104      	bne.n	8006130 <forward_until_light+0x30>
			move_robot(0, 0);
 8006126:	2100      	movs	r1, #0
 8006128:	2000      	movs	r0, #0
 800612a:	f7ff fec9 	bl	8005ec0 <move_robot>
}
 800612e:	e004      	b.n	800613a <forward_until_light+0x3a>
			move_robot(FORWARD, 30000);
 8006130:	4b05      	ldr	r3, [pc, #20]	; (8006148 <forward_until_light+0x48>)
 8006132:	0019      	movs	r1, r3
 8006134:	2002      	movs	r0, #2
 8006136:	f7ff fec3 	bl	8005ec0 <move_robot>
}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	46bd      	mov	sp, r7
 800613e:	b002      	add	sp, #8
 8006140:	bd80      	pop	{r7, pc}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	200000b9 	.word	0x200000b9
 8006148:	00007530 	.word	0x00007530

0800614c <light_direction>:

int light_direction(void){
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
	uint16_t max = 0;
 8006152:	230e      	movs	r3, #14
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	2200      	movs	r2, #0
 8006158:	801a      	strh	r2, [r3, #0]
	int maxIndex = 0;
 800615a:	2300      	movs	r3, #0
 800615c:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i <= 3; i++){
 800615e:	2300      	movs	r3, #0
 8006160:	607b      	str	r3, [r7, #4]
 8006162:	e014      	b.n	800618e <light_direction+0x42>
		if(ADC_Values[i] > max){
 8006164:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <light_direction+0x54>)
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	0052      	lsls	r2, r2, #1
 800616a:	5ad3      	ldrh	r3, [r2, r3]
 800616c:	220e      	movs	r2, #14
 800616e:	18ba      	adds	r2, r7, r2
 8006170:	8812      	ldrh	r2, [r2, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d208      	bcs.n	8006188 <light_direction+0x3c>
			max = ADC_Values[i];
 8006176:	230e      	movs	r3, #14
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	4a09      	ldr	r2, [pc, #36]	; (80061a0 <light_direction+0x54>)
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	0049      	lsls	r1, r1, #1
 8006180:	5a8a      	ldrh	r2, [r1, r2]
 8006182:	801a      	strh	r2, [r3, #0]
			maxIndex = i;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i <= 3; i++){
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3301      	adds	r3, #1
 800618c:	607b      	str	r3, [r7, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b03      	cmp	r3, #3
 8006192:	dde7      	ble.n	8006164 <light_direction+0x18>
		}
	}
	return maxIndex;
 8006194:	68bb      	ldr	r3, [r7, #8]
}
 8006196:	0018      	movs	r0, r3
 8006198:	46bd      	mov	sp, r7
 800619a:	b004      	add	sp, #16
 800619c:	bd80      	pop	{r7, pc}
 800619e:	46c0      	nop			; (mov r8, r8)
 80061a0:	200002ec 	.word	0x200002ec

080061a4 <Print_RENC_Reading>:
//
//	RTC->ISR &= ~RTC_ISR_INIT;
//	RTC->WPR = 0xFF;
}

void Print_RENC_Reading(void){
 80061a4:	b580      	push	{r7, lr}
 80061a6:	af00      	add	r7, sp, #0
}
 80061a8:	46c0      	nop			; (mov r8, r8)
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <check_soil>:

void check_soil(void){
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
	if(!checkSoil){
 80061b4:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <check_soil+0x34>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <check_soil+0x20>
		GPIOC->ODR |= (1<<5);
 80061bc:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <check_soil+0x38>)
 80061be:	695a      	ldr	r2, [r3, #20]
 80061c0:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <check_soil+0x38>)
 80061c2:	2120      	movs	r1, #32
 80061c4:	430a      	orrs	r2, r1
 80061c6:	615a      	str	r2, [r3, #20]
		checkSoil = 1;
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <check_soil+0x34>)
 80061ca:	2201      	movs	r2, #1
 80061cc:	701a      	strb	r2, [r3, #0]
	} else {
		GPIOC->ODR &= ~(1<<5);
	}
}
 80061ce:	e005      	b.n	80061dc <check_soil+0x2c>
		GPIOC->ODR &= ~(1<<5);
 80061d0:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <check_soil+0x38>)
 80061d2:	695a      	ldr	r2, [r3, #20]
 80061d4:	4b04      	ldr	r3, [pc, #16]	; (80061e8 <check_soil+0x38>)
 80061d6:	2120      	movs	r1, #32
 80061d8:	438a      	bics	r2, r1
 80061da:	615a      	str	r2, [r3, #20]
}
 80061dc:	46c0      	nop			; (mov r8, r8)
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	200000b8 	.word	0x200000b8
 80061e8:	50000800 	.word	0x50000800

080061ec <IR_LOCATE>:

void IR_LOCATE(void){
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
	int pins = ((GPIOA->IDR>>10) & 7);
 80061f2:	23a0      	movs	r3, #160	; 0xa0
 80061f4:	05db      	lsls	r3, r3, #23
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	0a9b      	lsrs	r3, r3, #10
 80061fa:	001a      	movs	r2, r3
 80061fc:	2307      	movs	r3, #7
 80061fe:	4013      	ands	r3, r2
 8006200:	607b      	str	r3, [r7, #4]
	if(pins == 0){
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d107      	bne.n	8006218 <IR_LOCATE+0x2c>
		move_robot(0,0);
 8006208:	2100      	movs	r1, #0
 800620a:	2000      	movs	r0, #0
 800620c:	f7ff fe58 	bl	8005ec0 <move_robot>
		printf("NO IR\r\n");
 8006210:	4b2d      	ldr	r3, [pc, #180]	; (80062c8 <IR_LOCATE+0xdc>)
 8006212:	0018      	movs	r0, r3
 8006214:	f001 f90c 	bl	8007430 <puts>
	}
	if(pins == 1){
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d108      	bne.n	8006230 <IR_LOCATE+0x44>
		printf("Hard Left\r\n");
 800621e:	4b2b      	ldr	r3, [pc, #172]	; (80062cc <IR_LOCATE+0xe0>)
 8006220:	0018      	movs	r0, r3
 8006222:	f001 f905 	bl	8007430 <puts>
		move_robot(TURN_LEFT, 20000);
 8006226:	4b2a      	ldr	r3, [pc, #168]	; (80062d0 <IR_LOCATE+0xe4>)
 8006228:	0019      	movs	r1, r3
 800622a:	2000      	movs	r0, #0
 800622c:	f7ff fe48 	bl	8005ec0 <move_robot>
	}
	if(pins == 2){
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d108      	bne.n	8006248 <IR_LOCATE+0x5c>
		printf("Hard Right\r\n");
 8006236:	4b27      	ldr	r3, [pc, #156]	; (80062d4 <IR_LOCATE+0xe8>)
 8006238:	0018      	movs	r0, r3
 800623a:	f001 f8f9 	bl	8007430 <puts>
		move_robot(TURN_RIGHT, 20000);
 800623e:	4b24      	ldr	r3, [pc, #144]	; (80062d0 <IR_LOCATE+0xe4>)
 8006240:	0019      	movs	r1, r3
 8006242:	2001      	movs	r0, #1
 8006244:	f7ff fe3c 	bl	8005ec0 <move_robot>
	}
	if(pins == 3){
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b03      	cmp	r3, #3
 800624c:	d108      	bne.n	8006260 <IR_LOCATE+0x74>
		printf("Forward\r\n");
 800624e:	4b22      	ldr	r3, [pc, #136]	; (80062d8 <IR_LOCATE+0xec>)
 8006250:	0018      	movs	r0, r3
 8006252:	f001 f8ed 	bl	8007430 <puts>
		move_robot(FORWARD, 20000);
 8006256:	4b1e      	ldr	r3, [pc, #120]	; (80062d0 <IR_LOCATE+0xe4>)
 8006258:	0019      	movs	r1, r3
 800625a:	2002      	movs	r0, #2
 800625c:	f7ff fe30 	bl	8005ec0 <move_robot>
	}
	if(pins == 4){
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b04      	cmp	r3, #4
 8006264:	d108      	bne.n	8006278 <IR_LOCATE+0x8c>
		printf("Forward\r\n");
 8006266:	4b1c      	ldr	r3, [pc, #112]	; (80062d8 <IR_LOCATE+0xec>)
 8006268:	0018      	movs	r0, r3
 800626a:	f001 f8e1 	bl	8007430 <puts>
		move_robot(FORWARD, 20000);
 800626e:	4b18      	ldr	r3, [pc, #96]	; (80062d0 <IR_LOCATE+0xe4>)
 8006270:	0019      	movs	r1, r3
 8006272:	2002      	movs	r0, #2
 8006274:	f7ff fe24 	bl	8005ec0 <move_robot>
	}
	if(pins == 5){
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b05      	cmp	r3, #5
 800627c:	d108      	bne.n	8006290 <IR_LOCATE+0xa4>
		printf("Soft Left\r\n");
 800627e:	4b17      	ldr	r3, [pc, #92]	; (80062dc <IR_LOCATE+0xf0>)
 8006280:	0018      	movs	r0, r3
 8006282:	f001 f8d5 	bl	8007430 <puts>
		move_robot(TURN_LEFT, 10000);
 8006286:	4b16      	ldr	r3, [pc, #88]	; (80062e0 <IR_LOCATE+0xf4>)
 8006288:	0019      	movs	r1, r3
 800628a:	2000      	movs	r0, #0
 800628c:	f7ff fe18 	bl	8005ec0 <move_robot>
	}
	if(pins == 6){
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b06      	cmp	r3, #6
 8006294:	d108      	bne.n	80062a8 <IR_LOCATE+0xbc>
		printf("Soft Right\r\n");
 8006296:	4b13      	ldr	r3, [pc, #76]	; (80062e4 <IR_LOCATE+0xf8>)
 8006298:	0018      	movs	r0, r3
 800629a:	f001 f8c9 	bl	8007430 <puts>
		move_robot(TURN_RIGHT, 10000);
 800629e:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <IR_LOCATE+0xf4>)
 80062a0:	0019      	movs	r1, r3
 80062a2:	2001      	movs	r0, #1
 80062a4:	f7ff fe0c 	bl	8005ec0 <move_robot>
	}
	if(pins == 7){
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b07      	cmp	r3, #7
 80062ac:	d108      	bne.n	80062c0 <IR_LOCATE+0xd4>
		printf("Forward\r\n");
 80062ae:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <IR_LOCATE+0xec>)
 80062b0:	0018      	movs	r0, r3
 80062b2:	f001 f8bd 	bl	8007430 <puts>
		move_robot(FORWARD, 20000);
 80062b6:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <IR_LOCATE+0xe4>)
 80062b8:	0019      	movs	r1, r3
 80062ba:	2002      	movs	r0, #2
 80062bc:	f7ff fe00 	bl	8005ec0 <move_robot>
	}
}
 80062c0:	46c0      	nop			; (mov r8, r8)
 80062c2:	46bd      	mov	sp, r7
 80062c4:	b002      	add	sp, #8
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	08007ef8 	.word	0x08007ef8
 80062cc:	08007f00 	.word	0x08007f00
 80062d0:	00004e20 	.word	0x00004e20
 80062d4:	08007f0c 	.word	0x08007f0c
 80062d8:	08007f18 	.word	0x08007f18
 80062dc:	08007f24 	.word	0x08007f24
 80062e0:	00002710 	.word	0x00002710
 80062e4:	08007f30 	.word	0x08007f30

080062e8 <checkTurn>:

void checkTurn(void){
 80062e8:	b580      	push	{r7, lr}
 80062ea:	af00      	add	r7, sp, #0
	if ((move == 1) && (count > 600)){
 80062ec:	4b13      	ldr	r3, [pc, #76]	; (800633c <checkTurn+0x54>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d10a      	bne.n	800630a <checkTurn+0x22>
 80062f4:	4b12      	ldr	r3, [pc, #72]	; (8006340 <checkTurn+0x58>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	2396      	movs	r3, #150	; 0x96
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	429a      	cmp	r2, r3
 80062fe:	dd04      	ble.n	800630a <checkTurn+0x22>
		printf("Keep turning left\r\n");
 8006300:	4b10      	ldr	r3, [pc, #64]	; (8006344 <checkTurn+0x5c>)
 8006302:	0018      	movs	r0, r3
 8006304:	f001 f894 	bl	8007430 <puts>
 8006308:	e015      	b.n	8006336 <checkTurn+0x4e>
	}
	else if ((move == 2) && (count > 600)){
 800630a:	4b0c      	ldr	r3, [pc, #48]	; (800633c <checkTurn+0x54>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d10a      	bne.n	8006328 <checkTurn+0x40>
 8006312:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <checkTurn+0x58>)
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	2396      	movs	r3, #150	; 0x96
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	429a      	cmp	r2, r3
 800631c:	dd04      	ble.n	8006328 <checkTurn+0x40>
		printf("Keep turning right\r\n");
 800631e:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <checkTurn+0x60>)
 8006320:	0018      	movs	r0, r3
 8006322:	f001 f885 	bl	8007430 <puts>
 8006326:	e006      	b.n	8006336 <checkTurn+0x4e>
	}
	else {
		printf("Good to go Forward\r\n");
 8006328:	4b08      	ldr	r3, [pc, #32]	; (800634c <checkTurn+0x64>)
 800632a:	0018      	movs	r0, r3
 800632c:	f001 f880 	bl	8007430 <puts>
		move = 0;
 8006330:	4b02      	ldr	r3, [pc, #8]	; (800633c <checkTurn+0x54>)
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
	}
}
 8006336:	46c0      	nop			; (mov r8, r8)
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	200000b4 	.word	0x200000b4
 8006340:	200000a0 	.word	0x200000a0
 8006344:	08007f3c 	.word	0x08007f3c
 8006348:	08007f50 	.word	0x08007f50
 800634c:	08007f64 	.word	0x08007f64

08006350 <checkStraight>:
void checkStraight(void){
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
	if (count > 600){
 8006354:	4b10      	ldr	r3, [pc, #64]	; (8006398 <checkStraight+0x48>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	2396      	movs	r3, #150	; 0x96
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	429a      	cmp	r2, r3
 800635e:	dd15      	ble.n	800638c <checkStraight+0x3c>
		obstacle_detected = 1;
 8006360:	4b0e      	ldr	r3, [pc, #56]	; (800639c <checkStraight+0x4c>)
 8006362:	2201      	movs	r2, #1
 8006364:	701a      	strb	r2, [r3, #0]
		if(state==0){
 8006366:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <checkStraight+0x50>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d104      	bne.n	8006378 <checkStraight+0x28>
//			obstacle_detected = 1;
			printf("Stop\r\n");
 800636e:	4b0d      	ldr	r3, [pc, #52]	; (80063a4 <checkStraight+0x54>)
 8006370:	0018      	movs	r0, r3
 8006372:	f001 f85d 	bl	8007430 <puts>
		}
	} else {
		obstacle_detected = 0;
	}

}
 8006376:	e00c      	b.n	8006392 <checkStraight+0x42>
			printf("checkDirection\r\n");
 8006378:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <checkStraight+0x58>)
 800637a:	0018      	movs	r0, r3
 800637c:	f001 f858 	bl	8007430 <puts>
			left = 1;
 8006380:	4b0a      	ldr	r3, [pc, #40]	; (80063ac <checkStraight+0x5c>)
 8006382:	2201      	movs	r2, #1
 8006384:	601a      	str	r2, [r3, #0]
			init_Left();
 8006386:	f7fe fd23 	bl	8004dd0 <init_Left>
}
 800638a:	e002      	b.n	8006392 <checkStraight+0x42>
		obstacle_detected = 0;
 800638c:	4b03      	ldr	r3, [pc, #12]	; (800639c <checkStraight+0x4c>)
 800638e:	2200      	movs	r2, #0
 8006390:	701a      	strb	r2, [r3, #0]
}
 8006392:	46c0      	nop			; (mov r8, r8)
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	200000a0 	.word	0x200000a0
 800639c:	200000ba 	.word	0x200000ba
 80063a0:	20000094 	.word	0x20000094
 80063a4:	08007f78 	.word	0x08007f78
 80063a8:	08007f80 	.word	0x08007f80
 80063ac:	200000a4 	.word	0x200000a4

080063b0 <checkLeft>:
void checkLeft(void){
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
	left++;
 80063b4:	4b12      	ldr	r3, [pc, #72]	; (8006400 <checkLeft+0x50>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	4b11      	ldr	r3, [pc, #68]	; (8006400 <checkLeft+0x50>)
 80063bc:	601a      	str	r2, [r3, #0]
	if (count > 600){
 80063be:	4b11      	ldr	r3, [pc, #68]	; (8006404 <checkLeft+0x54>)
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	2396      	movs	r3, #150	; 0x96
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	429a      	cmp	r2, r3
 80063c8:	dd03      	ble.n	80063d2 <checkLeft+0x22>
		printf("Left Not good\r\n");
 80063ca:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <checkLeft+0x58>)
 80063cc:	0018      	movs	r0, r3
 80063ce:	f001 f82f 	bl	8007430 <puts>
	}
	if (left > 3){
 80063d2:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <checkLeft+0x50>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	dd07      	ble.n	80063ea <checkLeft+0x3a>
		left = 0;
 80063da:	4b09      	ldr	r3, [pc, #36]	; (8006400 <checkLeft+0x50>)
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]
		right = 1;
 80063e0:	4b0a      	ldr	r3, [pc, #40]	; (800640c <checkLeft+0x5c>)
 80063e2:	2201      	movs	r2, #1
 80063e4:	601a      	str	r2, [r3, #0]
		init_Right();
 80063e6:	f7fe fd00 	bl	8004dea <init_Right>
	}
	LCheck += count;
 80063ea:	4b09      	ldr	r3, [pc, #36]	; (8006410 <checkLeft+0x60>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	4b05      	ldr	r3, [pc, #20]	; (8006404 <checkLeft+0x54>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	18d2      	adds	r2, r2, r3
 80063f4:	4b06      	ldr	r3, [pc, #24]	; (8006410 <checkLeft+0x60>)
 80063f6:	601a      	str	r2, [r3, #0]
}
 80063f8:	46c0      	nop			; (mov r8, r8)
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	46c0      	nop			; (mov r8, r8)
 8006400:	200000a4 	.word	0x200000a4
 8006404:	200000a0 	.word	0x200000a0
 8006408:	08007f90 	.word	0x08007f90
 800640c:	200000a8 	.word	0x200000a8
 8006410:	200000ac 	.word	0x200000ac

08006414 <checkRight>:
void checkRight(void){
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
	right++;
 8006418:	4b11      	ldr	r3, [pc, #68]	; (8006460 <checkRight+0x4c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	4b10      	ldr	r3, [pc, #64]	; (8006460 <checkRight+0x4c>)
 8006420:	601a      	str	r2, [r3, #0]
	if (count > 600){
 8006422:	4b10      	ldr	r3, [pc, #64]	; (8006464 <checkRight+0x50>)
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	2396      	movs	r3, #150	; 0x96
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	429a      	cmp	r2, r3
 800642c:	dd03      	ble.n	8006436 <checkRight+0x22>
		printf("Right Not Good\r\n");
 800642e:	4b0e      	ldr	r3, [pc, #56]	; (8006468 <checkRight+0x54>)
 8006430:	0018      	movs	r0, r3
 8006432:	f000 fffd 	bl	8007430 <puts>

	}
	if (right > 3){
 8006436:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <checkRight+0x4c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b03      	cmp	r3, #3
 800643c:	dd05      	ble.n	800644a <checkRight+0x36>
		left = 0;
 800643e:	4b0b      	ldr	r3, [pc, #44]	; (800646c <checkRight+0x58>)
 8006440:	2200      	movs	r2, #0
 8006442:	601a      	str	r2, [r3, #0]
		right = 0;
 8006444:	4b06      	ldr	r3, [pc, #24]	; (8006460 <checkRight+0x4c>)
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
	}
	RCheck += count;
 800644a:	4b09      	ldr	r3, [pc, #36]	; (8006470 <checkRight+0x5c>)
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	4b05      	ldr	r3, [pc, #20]	; (8006464 <checkRight+0x50>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	18d2      	adds	r2, r2, r3
 8006454:	4b06      	ldr	r3, [pc, #24]	; (8006470 <checkRight+0x5c>)
 8006456:	601a      	str	r2, [r3, #0]
}
 8006458:	46c0      	nop			; (mov r8, r8)
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	200000a8 	.word	0x200000a8
 8006464:	200000a0 	.word	0x200000a0
 8006468:	08007fa0 	.word	0x08007fa0
 800646c:	200000a4 	.word	0x200000a4
 8006470:	200000b0 	.word	0x200000b0

08006474 <determineDir>:
void determineDir(void){
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
	if (LCheck < RCheck){
 8006478:	4b0f      	ldr	r3, [pc, #60]	; (80064b8 <determineDir+0x44>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <determineDir+0x48>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	da07      	bge.n	8006494 <determineDir+0x20>
		printf("Turn Left\r\n");
 8006484:	4b0e      	ldr	r3, [pc, #56]	; (80064c0 <determineDir+0x4c>)
 8006486:	0018      	movs	r0, r3
 8006488:	f000 ffd2 	bl	8007430 <puts>
		move = 1;
 800648c:	4b0d      	ldr	r3, [pc, #52]	; (80064c4 <determineDir+0x50>)
 800648e:	2201      	movs	r2, #1
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	e006      	b.n	80064a2 <determineDir+0x2e>
	}
	else {
		printf("Turn Right\r\n");
 8006494:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <determineDir+0x54>)
 8006496:	0018      	movs	r0, r3
 8006498:	f000 ffca 	bl	8007430 <puts>
		move = 2;
 800649c:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <determineDir+0x50>)
 800649e:	2202      	movs	r2, #2
 80064a0:	601a      	str	r2, [r3, #0]
	}
	init_Straight();
 80064a2:	f7fe fcb9 	bl	8004e18 <init_Straight>
	LCheck = 0;
 80064a6:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <determineDir+0x44>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
	RCheck = 0;
 80064ac:	4b03      	ldr	r3, [pc, #12]	; (80064bc <determineDir+0x48>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
}
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	200000ac 	.word	0x200000ac
 80064bc:	200000b0 	.word	0x200000b0
 80064c0:	08007fb0 	.word	0x08007fb0
 80064c4:	200000b4 	.word	0x200000b4
 80064c8:	08007fbc 	.word	0x08007fbc

080064cc <countUp>:
void countUp(void){
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
	count++;
 80064d0:	4b03      	ldr	r3, [pc, #12]	; (80064e0 <countUp+0x14>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	4b02      	ldr	r3, [pc, #8]	; (80064e0 <countUp+0x14>)
 80064d8:	601a      	str	r2, [r3, #0]
}
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	200000a0 	.word	0x200000a0

080064e4 <TIM6_UltraSonic_Handler>:
void TIM6_UltraSonic_Handler(void){
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
	if(state==2){
 80064ea:	4b28      	ldr	r3, [pc, #160]	; (800658c <TIM6_UltraSonic_Handler+0xa8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d116      	bne.n	8006520 <TIM6_UltraSonic_Handler+0x3c>
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80064f2:	1d39      	adds	r1, r7, #4
 80064f4:	4b26      	ldr	r3, [pc, #152]	; (8006590 <TIM6_UltraSonic_Handler+0xac>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	0018      	movs	r0, r3
 80064fa:	f7fc fc0d 	bl	8002d18 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80064fe:	0039      	movs	r1, r7
 8006500:	4b23      	ldr	r3, [pc, #140]	; (8006590 <TIM6_UltraSonic_Handler+0xac>)
 8006502:	2201      	movs	r2, #1
 8006504:	0018      	movs	r0, r3
 8006506:	f7fc fd11 	bl	8002f2c <HAL_RTC_GetDate>
		printf("Current Time: %2u:%2u:%2u\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800650a:	1d3b      	adds	r3, r7, #4
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	0019      	movs	r1, r3
 8006510:	1d3b      	adds	r3, r7, #4
 8006512:	785b      	ldrb	r3, [r3, #1]
 8006514:	001a      	movs	r2, r3
 8006516:	1d3b      	adds	r3, r7, #4
 8006518:	789b      	ldrb	r3, [r3, #2]
 800651a:	481e      	ldr	r0, [pc, #120]	; (8006594 <TIM6_UltraSonic_Handler+0xb0>)
 800651c:	f000 ff0e 	bl	800733c <iprintf>
//	RTC_TimeTypeDef sTime;
//	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
//	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
////	uint8_t next_second = sTime.Seconds+5;
//	printf("Current Time is: %u/%u/%u, %u L %u : %u\r\n", sDate.Month, sDate.Date, sDate.Year, sTime.Hours, sTime.Minutes, sTime.Seconds);
	if (move > 0){
 8006520:	4b1d      	ldr	r3, [pc, #116]	; (8006598 <TIM6_UltraSonic_Handler+0xb4>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	dd02      	ble.n	800652e <TIM6_UltraSonic_Handler+0x4a>
		checkTurn();
 8006528:	f7ff fede 	bl	80062e8 <checkTurn>
 800652c:	e026      	b.n	800657c <TIM6_UltraSonic_Handler+0x98>
	}
	else if ((left == right) && (LCheck == RCheck)){
 800652e:	4b1b      	ldr	r3, [pc, #108]	; (800659c <TIM6_UltraSonic_Handler+0xb8>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b1b      	ldr	r3, [pc, #108]	; (80065a0 <TIM6_UltraSonic_Handler+0xbc>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d108      	bne.n	800654c <TIM6_UltraSonic_Handler+0x68>
 800653a:	4b1a      	ldr	r3, [pc, #104]	; (80065a4 <TIM6_UltraSonic_Handler+0xc0>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4b1a      	ldr	r3, [pc, #104]	; (80065a8 <TIM6_UltraSonic_Handler+0xc4>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	429a      	cmp	r2, r3
 8006544:	d102      	bne.n	800654c <TIM6_UltraSonic_Handler+0x68>
		checkStraight();
 8006546:	f7ff ff03 	bl	8006350 <checkStraight>
 800654a:	e017      	b.n	800657c <TIM6_UltraSonic_Handler+0x98>
	}
	else if(left > 0){
 800654c:	4b13      	ldr	r3, [pc, #76]	; (800659c <TIM6_UltraSonic_Handler+0xb8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	dd02      	ble.n	800655a <TIM6_UltraSonic_Handler+0x76>
		checkLeft();
 8006554:	f7ff ff2c 	bl	80063b0 <checkLeft>
 8006558:	e010      	b.n	800657c <TIM6_UltraSonic_Handler+0x98>
	}
	else if(right > 0){
 800655a:	4b11      	ldr	r3, [pc, #68]	; (80065a0 <TIM6_UltraSonic_Handler+0xbc>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	dd02      	ble.n	8006568 <TIM6_UltraSonic_Handler+0x84>
		checkRight();
 8006562:	f7ff ff57 	bl	8006414 <checkRight>
 8006566:	e009      	b.n	800657c <TIM6_UltraSonic_Handler+0x98>
	}
	else if ((RCheck > 0) && (LCheck > 0)){
 8006568:	4b0f      	ldr	r3, [pc, #60]	; (80065a8 <TIM6_UltraSonic_Handler+0xc4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	dd05      	ble.n	800657c <TIM6_UltraSonic_Handler+0x98>
 8006570:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <TIM6_UltraSonic_Handler+0xc0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	dd01      	ble.n	800657c <TIM6_UltraSonic_Handler+0x98>
		determineDir();
 8006578:	f7ff ff7c 	bl	8006474 <determineDir>
	}
	count = 0;
 800657c:	4b0b      	ldr	r3, [pc, #44]	; (80065ac <TIM6_UltraSonic_Handler+0xc8>)
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]
}
 8006582:	46c0      	nop			; (mov r8, r8)
 8006584:	46bd      	mov	sp, r7
 8006586:	b006      	add	sp, #24
 8006588:	bd80      	pop	{r7, pc}
 800658a:	46c0      	nop			; (mov r8, r8)
 800658c:	20000094 	.word	0x20000094
 8006590:	20000170 	.word	0x20000170
 8006594:	08007fc8 	.word	0x08007fc8
 8006598:	200000b4 	.word	0x200000b4
 800659c:	200000a4 	.word	0x200000a4
 80065a0:	200000a8 	.word	0x200000a8
 80065a4:	200000ac 	.word	0x200000ac
 80065a8:	200000b0 	.word	0x200000b0
 80065ac:	200000a0 	.word	0x200000a0

080065b0 <nextState>:
//    sAlarm.AlarmDateWeekDay = 0x1;
//    sAlarm.Alarm = RTC_ALARM_A;
//	HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BCD);
//	RTC_AlarmTypeDef sAlarm = {0};
}
void nextState(void){
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
	state = (++state) % 5;
 80065b6:	4b2d      	ldr	r3, [pc, #180]	; (800666c <nextState+0xbc>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	4b2b      	ldr	r3, [pc, #172]	; (800666c <nextState+0xbc>)
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	4b2a      	ldr	r3, [pc, #168]	; (800666c <nextState+0xbc>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2105      	movs	r1, #5
 80065c6:	0018      	movs	r0, r3
 80065c8:	f7f9 ff0e 	bl	80003e8 <__aeabi_idivmod>
 80065cc:	000b      	movs	r3, r1
 80065ce:	001a      	movs	r2, r3
 80065d0:	4b26      	ldr	r3, [pc, #152]	; (800666c <nextState+0xbc>)
 80065d2:	601a      	str	r2, [r3, #0]
	if(state == 2 ){
 80065d4:	4b25      	ldr	r3, [pc, #148]	; (800666c <nextState+0xbc>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d13b      	bne.n	8006654 <nextState+0xa4>
		RTC_TimeTypeDef sTime = {0};
 80065dc:	1d3b      	adds	r3, r7, #4
 80065de:	0018      	movs	r0, r3
 80065e0:	2314      	movs	r3, #20
 80065e2:	001a      	movs	r2, r3
 80065e4:	2100      	movs	r1, #0
 80065e6:	f000 fdf9 	bl	80071dc <memset>
		sTime.Hours = RTC_ByteToBcd2(20);
 80065ea:	2014      	movs	r0, #20
 80065ec:	f7fc fe63 	bl	80032b6 <RTC_ByteToBcd2>
 80065f0:	0003      	movs	r3, r0
 80065f2:	001a      	movs	r2, r3
 80065f4:	1d3b      	adds	r3, r7, #4
 80065f6:	701a      	strb	r2, [r3, #0]
		sTime.Minutes = RTC_ByteToBcd2(59);
 80065f8:	203b      	movs	r0, #59	; 0x3b
 80065fa:	f7fc fe5c 	bl	80032b6 <RTC_ByteToBcd2>
 80065fe:	0003      	movs	r3, r0
 8006600:	001a      	movs	r2, r3
 8006602:	1d3b      	adds	r3, r7, #4
 8006604:	705a      	strb	r2, [r3, #1]
		sTime.Seconds = RTC_ByteToBcd2(50);
 8006606:	2032      	movs	r0, #50	; 0x32
 8006608:	f7fc fe55 	bl	80032b6 <RTC_ByteToBcd2>
 800660c:	0003      	movs	r3, r0
 800660e:	001a      	movs	r2, r3
 8006610:	1d3b      	adds	r3, r7, #4
 8006612:	709a      	strb	r2, [r3, #2]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006614:	1d3b      	adds	r3, r7, #4
 8006616:	2200      	movs	r2, #0
 8006618:	60da      	str	r2, [r3, #12]
		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800661a:	1d39      	adds	r1, r7, #4
 800661c:	4b14      	ldr	r3, [pc, #80]	; (8006670 <nextState+0xc0>)
 800661e:	2201      	movs	r2, #1
 8006620:	0018      	movs	r0, r3
 8006622:	f7fc fab5 	bl	8002b90 <HAL_RTC_SetTime>
//		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8006626:	1d39      	adds	r1, r7, #4
 8006628:	4b11      	ldr	r3, [pc, #68]	; (8006670 <nextState+0xc0>)
 800662a:	2200      	movs	r2, #0
 800662c:	0018      	movs	r0, r3
 800662e:	f7fc fb73 	bl	8002d18 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8006632:	0039      	movs	r1, r7
 8006634:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <nextState+0xc0>)
 8006636:	2201      	movs	r2, #1
 8006638:	0018      	movs	r0, r3
 800663a:	f7fc fc77 	bl	8002f2c <HAL_RTC_GetDate>
		printf("Current Time: %2u:%2u:%2u\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800663e:	1d3b      	adds	r3, r7, #4
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	0019      	movs	r1, r3
 8006644:	1d3b      	adds	r3, r7, #4
 8006646:	785b      	ldrb	r3, [r3, #1]
 8006648:	001a      	movs	r2, r3
 800664a:	1d3b      	adds	r3, r7, #4
 800664c:	789b      	ldrb	r3, [r3, #2]
 800664e:	4809      	ldr	r0, [pc, #36]	; (8006674 <nextState+0xc4>)
 8006650:	f000 fe74 	bl	800733c <iprintf>
	}
	printf("State: %d\r\n", state);
 8006654:	4b05      	ldr	r3, [pc, #20]	; (800666c <nextState+0xbc>)
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	4b07      	ldr	r3, [pc, #28]	; (8006678 <nextState+0xc8>)
 800665a:	0011      	movs	r1, r2
 800665c:	0018      	movs	r0, r3
 800665e:	f000 fe6d 	bl	800733c <iprintf>
}
 8006662:	46c0      	nop			; (mov r8, r8)
 8006664:	46bd      	mov	sp, r7
 8006666:	b006      	add	sp, #24
 8006668:	bd80      	pop	{r7, pc}
 800666a:	46c0      	nop			; (mov r8, r8)
 800666c:	20000094 	.word	0x20000094
 8006670:	20000170 	.word	0x20000170
 8006674:	08007fc8 	.word	0x08007fc8
 8006678:	08008000 	.word	0x08008000

0800667c <cliff_sense>:

void cliff_sense(void){
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))
 8006680:	2380      	movs	r3, #128	; 0x80
 8006682:	009a      	lsls	r2, r3, #2
 8006684:	23a0      	movs	r3, #160	; 0xa0
 8006686:	05db      	lsls	r3, r3, #23
 8006688:	0011      	movs	r1, r2
 800668a:	0018      	movs	r0, r3
 800668c:	f7fb fa5a 	bl	8001b44 <HAL_GPIO_ReadPin>
 8006690:	1e03      	subs	r3, r0, #0
 8006692:	d103      	bne.n	800669c <cliff_sense+0x20>
		cliff_detected = 1;
 8006694:	4b04      	ldr	r3, [pc, #16]	; (80066a8 <cliff_sense+0x2c>)
 8006696:	2201      	movs	r2, #1
 8006698:	701a      	strb	r2, [r3, #0]
	else
		cliff_detected = 0;
}
 800669a:	e002      	b.n	80066a2 <cliff_sense+0x26>
		cliff_detected = 0;
 800669c:	4b02      	ldr	r3, [pc, #8]	; (80066a8 <cliff_sense+0x2c>)
 800669e:	2200      	movs	r2, #0
 80066a0:	701a      	strb	r2, [r3, #0]
}
 80066a2:	46c0      	nop			; (mov r8, r8)
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	200000b9 	.word	0x200000b9

080066ac <push_button>:
void push_button(void){
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
	if (push){
 80066b0:	4b0d      	ldr	r3, [pc, #52]	; (80066e8 <push_button+0x3c>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <push_button+0x1c>
		printf("New light level %d\n\r", LLevel);
 80066b8:	4b0c      	ldr	r3, [pc, #48]	; (80066ec <push_button+0x40>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <push_button+0x44>)
 80066be:	0011      	movs	r1, r2
 80066c0:	0018      	movs	r0, r3
 80066c2:	f000 fe3b 	bl	800733c <iprintf>
 80066c6:	e006      	b.n	80066d6 <push_button+0x2a>

	}
	else {
		printf("Current light level %d\n\r", LLevel);
 80066c8:	4b08      	ldr	r3, [pc, #32]	; (80066ec <push_button+0x40>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <push_button+0x48>)
 80066ce:	0011      	movs	r1, r2
 80066d0:	0018      	movs	r0, r3
 80066d2:	f000 fe33 	bl	800733c <iprintf>
	}
	push ^= 1;
 80066d6:	4b04      	ldr	r3, [pc, #16]	; (80066e8 <push_button+0x3c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2201      	movs	r2, #1
 80066dc:	405a      	eors	r2, r3
 80066de:	4b02      	ldr	r3, [pc, #8]	; (80066e8 <push_button+0x3c>)
 80066e0:	601a      	str	r2, [r3, #0]

}
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	200000bc 	.word	0x200000bc
 80066ec:	200000c0 	.word	0x200000c0
 80066f0:	0800800c 	.word	0x0800800c
 80066f4:	08008024 	.word	0x08008024

080066f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("ERRORRRRRR\r\n");
 80066fc:	4b03      	ldr	r3, [pc, #12]	; (800670c <Error_Handler+0x14>)
 80066fe:	0018      	movs	r0, r3
 8006700:	f000 fe96 	bl	8007430 <puts>
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006704:	46c0      	nop			; (mov r8, r8)
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	46c0      	nop			; (mov r8, r8)
 800670c:	08008040 	.word	0x08008040

08006710 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006714:	4b07      	ldr	r3, [pc, #28]	; (8006734 <HAL_MspInit+0x24>)
 8006716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006718:	4b06      	ldr	r3, [pc, #24]	; (8006734 <HAL_MspInit+0x24>)
 800671a:	2101      	movs	r1, #1
 800671c:	430a      	orrs	r2, r1
 800671e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8006720:	4b04      	ldr	r3, [pc, #16]	; (8006734 <HAL_MspInit+0x24>)
 8006722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006724:	4b03      	ldr	r3, [pc, #12]	; (8006734 <HAL_MspInit+0x24>)
 8006726:	2180      	movs	r1, #128	; 0x80
 8006728:	0549      	lsls	r1, r1, #21
 800672a:	430a      	orrs	r2, r1
 800672c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	40021000 	.word	0x40021000

08006738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006740:	230c      	movs	r3, #12
 8006742:	18fb      	adds	r3, r7, r3
 8006744:	0018      	movs	r0, r3
 8006746:	2314      	movs	r3, #20
 8006748:	001a      	movs	r2, r3
 800674a:	2100      	movs	r1, #0
 800674c:	f000 fd46 	bl	80071dc <memset>
  if(hadc->Instance==ADC1)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a18      	ldr	r2, [pc, #96]	; (80067b8 <HAL_ADC_MspInit+0x80>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d12a      	bne.n	80067b0 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800675a:	4b18      	ldr	r3, [pc, #96]	; (80067bc <HAL_ADC_MspInit+0x84>)
 800675c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800675e:	4b17      	ldr	r3, [pc, #92]	; (80067bc <HAL_ADC_MspInit+0x84>)
 8006760:	2180      	movs	r1, #128	; 0x80
 8006762:	0089      	lsls	r1, r1, #2
 8006764:	430a      	orrs	r2, r1
 8006766:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006768:	4b14      	ldr	r3, [pc, #80]	; (80067bc <HAL_ADC_MspInit+0x84>)
 800676a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676c:	4b13      	ldr	r3, [pc, #76]	; (80067bc <HAL_ADC_MspInit+0x84>)
 800676e:	2104      	movs	r1, #4
 8006770:	430a      	orrs	r2, r1
 8006772:	62da      	str	r2, [r3, #44]	; 0x2c
 8006774:	4b11      	ldr	r3, [pc, #68]	; (80067bc <HAL_ADC_MspInit+0x84>)
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	2204      	movs	r2, #4
 800677a:	4013      	ands	r3, r2
 800677c:	60bb      	str	r3, [r7, #8]
 800677e:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC_IN11
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14 
    */
    GPIO_InitStruct.Pin = Front_Light_Sensor_Pin|Right_Light_Sensor_Pin|Rear_Light_Sensor_Pin|Left_Light_Sensor_Pin 
 8006780:	210c      	movs	r1, #12
 8006782:	187b      	adds	r3, r7, r1
 8006784:	221f      	movs	r2, #31
 8006786:	601a      	str	r2, [r3, #0]
                          |Soil_Moisture_Sensor_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006788:	187b      	adds	r3, r7, r1
 800678a:	2203      	movs	r2, #3
 800678c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800678e:	187b      	adds	r3, r7, r1
 8006790:	2200      	movs	r2, #0
 8006792:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006794:	187b      	adds	r3, r7, r1
 8006796:	4a0a      	ldr	r2, [pc, #40]	; (80067c0 <HAL_ADC_MspInit+0x88>)
 8006798:	0019      	movs	r1, r3
 800679a:	0010      	movs	r0, r2
 800679c:	f7fb f854 	bl	8001848 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80067a0:	2200      	movs	r2, #0
 80067a2:	2100      	movs	r1, #0
 80067a4:	200c      	movs	r0, #12
 80067a6:	f7fb f81d 	bl	80017e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80067aa:	200c      	movs	r0, #12
 80067ac:	f7fb f82f 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80067b0:	46c0      	nop			; (mov r8, r8)
 80067b2:	46bd      	mov	sp, r7
 80067b4:	b008      	add	sp, #32
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	40012400 	.word	0x40012400
 80067bc:	40021000 	.word	0x40021000
 80067c0:	50000800 	.word	0x50000800

080067c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a06      	ldr	r2, [pc, #24]	; (80067ec <HAL_RTC_MspInit+0x28>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d106      	bne.n	80067e4 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80067d6:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <HAL_RTC_MspInit+0x2c>)
 80067d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067da:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <HAL_RTC_MspInit+0x2c>)
 80067dc:	2180      	movs	r1, #128	; 0x80
 80067de:	02c9      	lsls	r1, r1, #11
 80067e0:	430a      	orrs	r2, r1
 80067e2:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80067e4:	46c0      	nop			; (mov r8, r8)
 80067e6:	46bd      	mov	sp, r7
 80067e8:	b002      	add	sp, #8
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	40002800 	.word	0x40002800
 80067f0:	40021000 	.word	0x40021000

080067f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	2380      	movs	r3, #128	; 0x80
 8006802:	05db      	lsls	r3, r3, #23
 8006804:	429a      	cmp	r2, r3
 8006806:	d106      	bne.n	8006816 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006808:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <HAL_TIM_Base_MspInit+0x50>)
 800680a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800680c:	4b0d      	ldr	r3, [pc, #52]	; (8006844 <HAL_TIM_Base_MspInit+0x50>)
 800680e:	2101      	movs	r1, #1
 8006810:	430a      	orrs	r2, r1
 8006812:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8006814:	e012      	b.n	800683c <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM6)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a0b      	ldr	r2, [pc, #44]	; (8006848 <HAL_TIM_Base_MspInit+0x54>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d10d      	bne.n	800683c <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006820:	4b08      	ldr	r3, [pc, #32]	; (8006844 <HAL_TIM_Base_MspInit+0x50>)
 8006822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006824:	4b07      	ldr	r3, [pc, #28]	; (8006844 <HAL_TIM_Base_MspInit+0x50>)
 8006826:	2110      	movs	r1, #16
 8006828:	430a      	orrs	r2, r1
 800682a:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800682c:	2200      	movs	r2, #0
 800682e:	2100      	movs	r1, #0
 8006830:	2011      	movs	r0, #17
 8006832:	f7fa ffd7 	bl	80017e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006836:	2011      	movs	r0, #17
 8006838:	f7fa ffe9 	bl	800180e <HAL_NVIC_EnableIRQ>
}
 800683c:	46c0      	nop			; (mov r8, r8)
 800683e:	46bd      	mov	sp, r7
 8006840:	b002      	add	sp, #8
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40021000 	.word	0x40021000
 8006848:	40001000 	.word	0x40001000

0800684c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a06      	ldr	r2, [pc, #24]	; (8006874 <HAL_TIM_PWM_MspInit+0x28>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d105      	bne.n	800686a <HAL_TIM_PWM_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800685e:	4b06      	ldr	r3, [pc, #24]	; (8006878 <HAL_TIM_PWM_MspInit+0x2c>)
 8006860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006862:	4b05      	ldr	r3, [pc, #20]	; (8006878 <HAL_TIM_PWM_MspInit+0x2c>)
 8006864:	2102      	movs	r1, #2
 8006866:	430a      	orrs	r2, r1
 8006868:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	46bd      	mov	sp, r7
 800686e:	b002      	add	sp, #8
 8006870:	bd80      	pop	{r7, pc}
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	40000400 	.word	0x40000400
 8006878:	40021000 	.word	0x40021000

0800687c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM21)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a0a      	ldr	r2, [pc, #40]	; (80068b4 <HAL_TIM_OC_MspInit+0x38>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d10d      	bne.n	80068aa <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 800688e:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <HAL_TIM_OC_MspInit+0x3c>)
 8006890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <HAL_TIM_OC_MspInit+0x3c>)
 8006894:	2104      	movs	r1, #4
 8006896:	430a      	orrs	r2, r1
 8006898:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 800689a:	2200      	movs	r2, #0
 800689c:	2100      	movs	r1, #0
 800689e:	2014      	movs	r0, #20
 80068a0:	f7fa ffa0 	bl	80017e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80068a4:	2014      	movs	r0, #20
 80068a6:	f7fa ffb2 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	46bd      	mov	sp, r7
 80068ae:	b002      	add	sp, #8
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	46c0      	nop			; (mov r8, r8)
 80068b4:	40010800 	.word	0x40010800
 80068b8:	40021000 	.word	0x40021000

080068bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068c4:	230c      	movs	r3, #12
 80068c6:	18fb      	adds	r3, r7, r3
 80068c8:	0018      	movs	r0, r3
 80068ca:	2314      	movs	r3, #20
 80068cc:	001a      	movs	r2, r3
 80068ce:	2100      	movs	r1, #0
 80068d0:	f000 fc84 	bl	80071dc <memset>
  if(htim_encoder->Instance==TIM22)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a1b      	ldr	r2, [pc, #108]	; (8006948 <HAL_TIM_Encoder_MspInit+0x8c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d12f      	bne.n	800693e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM22_MspInit 0 */

  /* USER CODE END TIM22_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM22_CLK_ENABLE();
 80068de:	4b1b      	ldr	r3, [pc, #108]	; (800694c <HAL_TIM_Encoder_MspInit+0x90>)
 80068e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e2:	4b1a      	ldr	r3, [pc, #104]	; (800694c <HAL_TIM_Encoder_MspInit+0x90>)
 80068e4:	2120      	movs	r1, #32
 80068e6:	430a      	orrs	r2, r1
 80068e8:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068ea:	4b18      	ldr	r3, [pc, #96]	; (800694c <HAL_TIM_Encoder_MspInit+0x90>)
 80068ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ee:	4b17      	ldr	r3, [pc, #92]	; (800694c <HAL_TIM_Encoder_MspInit+0x90>)
 80068f0:	2104      	movs	r1, #4
 80068f2:	430a      	orrs	r2, r1
 80068f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80068f6:	4b15      	ldr	r3, [pc, #84]	; (800694c <HAL_TIM_Encoder_MspInit+0x90>)
 80068f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fa:	2204      	movs	r2, #4
 80068fc:	4013      	ands	r3, r2
 80068fe:	60bb      	str	r3, [r7, #8]
 8006900:	68bb      	ldr	r3, [r7, #8]
    /**TIM22 GPIO Configuration    
    PC6     ------> TIM22_CH1
    PC7     ------> TIM22_CH2 
    */
    GPIO_InitStruct.Pin = Rotary_Encoder_Pin_1_Pin|Rotary_Encoder_Pin_2_Pin;
 8006902:	210c      	movs	r1, #12
 8006904:	187b      	adds	r3, r7, r1
 8006906:	22c0      	movs	r2, #192	; 0xc0
 8006908:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800690a:	187b      	adds	r3, r7, r1
 800690c:	2202      	movs	r2, #2
 800690e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006910:	187b      	adds	r3, r7, r1
 8006912:	2200      	movs	r2, #0
 8006914:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006916:	187b      	adds	r3, r7, r1
 8006918:	2200      	movs	r2, #0
 800691a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM22;
 800691c:	187b      	adds	r3, r7, r1
 800691e:	2200      	movs	r2, #0
 8006920:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006922:	187b      	adds	r3, r7, r1
 8006924:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <HAL_TIM_Encoder_MspInit+0x94>)
 8006926:	0019      	movs	r1, r3
 8006928:	0010      	movs	r0, r2
 800692a:	f7fa ff8d 	bl	8001848 <HAL_GPIO_Init>

    /* TIM22 interrupt Init */
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 800692e:	2200      	movs	r2, #0
 8006930:	2100      	movs	r1, #0
 8006932:	2016      	movs	r0, #22
 8006934:	f7fa ff56 	bl	80017e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8006938:	2016      	movs	r0, #22
 800693a:	f7fa ff68 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	46bd      	mov	sp, r7
 8006942:	b008      	add	sp, #32
 8006944:	bd80      	pop	{r7, pc}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	40011400 	.word	0x40011400
 800694c:	40021000 	.word	0x40021000
 8006950:	50000800 	.word	0x50000800

08006954 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006954:	b590      	push	{r4, r7, lr}
 8006956:	b08b      	sub	sp, #44	; 0x2c
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800695c:	2314      	movs	r3, #20
 800695e:	18fb      	adds	r3, r7, r3
 8006960:	0018      	movs	r0, r3
 8006962:	2314      	movs	r3, #20
 8006964:	001a      	movs	r2, r3
 8006966:	2100      	movs	r1, #0
 8006968:	f000 fc38 	bl	80071dc <memset>
  if(htim->Instance==TIM2)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	2380      	movs	r3, #128	; 0x80
 8006972:	05db      	lsls	r3, r3, #23
 8006974:	429a      	cmp	r2, r3
 8006976:	d123      	bne.n	80069c0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006978:	4b38      	ldr	r3, [pc, #224]	; (8006a5c <HAL_TIM_MspPostInit+0x108>)
 800697a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697c:	4b37      	ldr	r3, [pc, #220]	; (8006a5c <HAL_TIM_MspPostInit+0x108>)
 800697e:	2101      	movs	r1, #1
 8006980:	430a      	orrs	r2, r1
 8006982:	62da      	str	r2, [r3, #44]	; 0x2c
 8006984:	4b35      	ldr	r3, [pc, #212]	; (8006a5c <HAL_TIM_MspPostInit+0x108>)
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006988:	2201      	movs	r2, #1
 800698a:	4013      	ands	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
 800698e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006990:	2114      	movs	r1, #20
 8006992:	187b      	adds	r3, r7, r1
 8006994:	2201      	movs	r2, #1
 8006996:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006998:	187b      	adds	r3, r7, r1
 800699a:	2202      	movs	r2, #2
 800699c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800699e:	187b      	adds	r3, r7, r1
 80069a0:	2200      	movs	r2, #0
 80069a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069a4:	187b      	adds	r3, r7, r1
 80069a6:	2200      	movs	r2, #0
 80069a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80069aa:	187b      	adds	r3, r7, r1
 80069ac:	2202      	movs	r2, #2
 80069ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069b0:	187a      	adds	r2, r7, r1
 80069b2:	23a0      	movs	r3, #160	; 0xa0
 80069b4:	05db      	lsls	r3, r3, #23
 80069b6:	0011      	movs	r1, r2
 80069b8:	0018      	movs	r0, r3
 80069ba:	f7fa ff45 	bl	8001848 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80069be:	e049      	b.n	8006a54 <HAL_TIM_MspPostInit+0x100>
  else if(htim->Instance==TIM3)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a26      	ldr	r2, [pc, #152]	; (8006a60 <HAL_TIM_MspPostInit+0x10c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d144      	bne.n	8006a54 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069ca:	4b24      	ldr	r3, [pc, #144]	; (8006a5c <HAL_TIM_MspPostInit+0x108>)
 80069cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ce:	4b23      	ldr	r3, [pc, #140]	; (8006a5c <HAL_TIM_MspPostInit+0x108>)
 80069d0:	2101      	movs	r1, #1
 80069d2:	430a      	orrs	r2, r1
 80069d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80069d6:	4b21      	ldr	r3, [pc, #132]	; (8006a5c <HAL_TIM_MspPostInit+0x108>)
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	2201      	movs	r2, #1
 80069dc:	4013      	ands	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069e2:	4b1e      	ldr	r3, [pc, #120]	; (8006a5c <HAL_TIM_MspPostInit+0x108>)
 80069e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e6:	4b1d      	ldr	r3, [pc, #116]	; (8006a5c <HAL_TIM_MspPostInit+0x108>)
 80069e8:	2102      	movs	r1, #2
 80069ea:	430a      	orrs	r2, r1
 80069ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80069ee:	4b1b      	ldr	r3, [pc, #108]	; (8006a5c <HAL_TIM_MspPostInit+0x108>)
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	2202      	movs	r2, #2
 80069f4:	4013      	ands	r3, r2
 80069f6:	60bb      	str	r3, [r7, #8]
 80069f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Right_Motor_PWM_1_Pin|Right_Motor_PWM_2_Pin;
 80069fa:	2414      	movs	r4, #20
 80069fc:	193b      	adds	r3, r7, r4
 80069fe:	22c0      	movs	r2, #192	; 0xc0
 8006a00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a02:	193b      	adds	r3, r7, r4
 8006a04:	2202      	movs	r2, #2
 8006a06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a08:	193b      	adds	r3, r7, r4
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a0e:	193b      	adds	r3, r7, r4
 8006a10:	2200      	movs	r2, #0
 8006a12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a14:	193b      	adds	r3, r7, r4
 8006a16:	2202      	movs	r2, #2
 8006a18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a1a:	193a      	adds	r2, r7, r4
 8006a1c:	23a0      	movs	r3, #160	; 0xa0
 8006a1e:	05db      	lsls	r3, r3, #23
 8006a20:	0011      	movs	r1, r2
 8006a22:	0018      	movs	r0, r3
 8006a24:	f7fa ff10 	bl	8001848 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Left_Motor_PWM_1_Pin|Left_Motor_PWM_2_Pin;
 8006a28:	0021      	movs	r1, r4
 8006a2a:	187b      	adds	r3, r7, r1
 8006a2c:	2203      	movs	r2, #3
 8006a2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a30:	187b      	adds	r3, r7, r1
 8006a32:	2202      	movs	r2, #2
 8006a34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a36:	187b      	adds	r3, r7, r1
 8006a38:	2200      	movs	r2, #0
 8006a3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a3c:	187b      	adds	r3, r7, r1
 8006a3e:	2200      	movs	r2, #0
 8006a40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a42:	187b      	adds	r3, r7, r1
 8006a44:	2202      	movs	r2, #2
 8006a46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a48:	187b      	adds	r3, r7, r1
 8006a4a:	4a06      	ldr	r2, [pc, #24]	; (8006a64 <HAL_TIM_MspPostInit+0x110>)
 8006a4c:	0019      	movs	r1, r3
 8006a4e:	0010      	movs	r0, r2
 8006a50:	f7fa fefa 	bl	8001848 <HAL_GPIO_Init>
}
 8006a54:	46c0      	nop			; (mov r8, r8)
 8006a56:	46bd      	mov	sp, r7
 8006a58:	b00b      	add	sp, #44	; 0x2c
 8006a5a:	bd90      	pop	{r4, r7, pc}
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	40000400 	.word	0x40000400
 8006a64:	50000400 	.word	0x50000400

08006a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a70:	230c      	movs	r3, #12
 8006a72:	18fb      	adds	r3, r7, r3
 8006a74:	0018      	movs	r0, r3
 8006a76:	2314      	movs	r3, #20
 8006a78:	001a      	movs	r2, r3
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	f000 fbae 	bl	80071dc <memset>
  if(huart->Instance==USART2)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a18      	ldr	r2, [pc, #96]	; (8006ae8 <HAL_UART_MspInit+0x80>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d129      	bne.n	8006ade <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006a8a:	4b18      	ldr	r3, [pc, #96]	; (8006aec <HAL_UART_MspInit+0x84>)
 8006a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a8e:	4b17      	ldr	r3, [pc, #92]	; (8006aec <HAL_UART_MspInit+0x84>)
 8006a90:	2180      	movs	r1, #128	; 0x80
 8006a92:	0289      	lsls	r1, r1, #10
 8006a94:	430a      	orrs	r2, r1
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a98:	4b14      	ldr	r3, [pc, #80]	; (8006aec <HAL_UART_MspInit+0x84>)
 8006a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9c:	4b13      	ldr	r3, [pc, #76]	; (8006aec <HAL_UART_MspInit+0x84>)
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	62da      	str	r2, [r3, #44]	; 0x2c
 8006aa4:	4b11      	ldr	r3, [pc, #68]	; (8006aec <HAL_UART_MspInit+0x84>)
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	4013      	ands	r3, r2
 8006aac:	60bb      	str	r3, [r7, #8]
 8006aae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006ab0:	210c      	movs	r1, #12
 8006ab2:	187b      	adds	r3, r7, r1
 8006ab4:	220c      	movs	r2, #12
 8006ab6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ab8:	187b      	adds	r3, r7, r1
 8006aba:	2202      	movs	r2, #2
 8006abc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006abe:	187b      	adds	r3, r7, r1
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ac4:	187b      	adds	r3, r7, r1
 8006ac6:	2203      	movs	r2, #3
 8006ac8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8006aca:	187b      	adds	r3, r7, r1
 8006acc:	2204      	movs	r2, #4
 8006ace:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ad0:	187a      	adds	r2, r7, r1
 8006ad2:	23a0      	movs	r3, #160	; 0xa0
 8006ad4:	05db      	lsls	r3, r3, #23
 8006ad6:	0011      	movs	r1, r2
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f7fa feb5 	bl	8001848 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	b008      	add	sp, #32
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	40004400 	.word	0x40004400
 8006aec:	40021000 	.word	0x40021000

08006af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006af4:	46c0      	nop			; (mov r8, r8)
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
	...

08006afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HARD FAULT\r\n");
 8006b00:	4b02      	ldr	r3, [pc, #8]	; (8006b0c <HardFault_Handler+0x10>)
 8006b02:	0018      	movs	r0, r3
 8006b04:	f000 fc94 	bl	8007430 <puts>
 8006b08:	e7fa      	b.n	8006b00 <HardFault_Handler+0x4>
 8006b0a:	46c0      	nop			; (mov r8, r8)
 8006b0c:	0800804c 	.word	0x0800804c

08006b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006b14:	46c0      	nop			; (mov r8, r8)
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b28:	f7fa f9ec 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b2c:	46c0      	nop			; (mov r8, r8)
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_1)){
 8006b38:	4b08      	ldr	r3, [pc, #32]	; (8006b5c <EXTI0_1_IRQHandler+0x28>)
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	4013      	ands	r3, r2
 8006b40:	d006      	beq.n	8006b50 <EXTI0_1_IRQHandler+0x1c>
		if (((GPIOA->IDR) > 1) & 1){
 8006b42:	23a0      	movs	r3, #160	; 0xa0
 8006b44:	05db      	lsls	r3, r3, #23
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d901      	bls.n	8006b50 <EXTI0_1_IRQHandler+0x1c>
			countUp();
 8006b4c:	f7ff fcbe 	bl	80064cc <countUp>
		}
	}
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8006b50:	2002      	movs	r0, #2
 8006b52:	f7fb f831 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8006b56:	46c0      	nop			; (mov r8, r8)
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	40010400 	.word	0x40010400

08006b60 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	// PIN 7
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6)){
 8006b64:	4b1d      	ldr	r3, [pc, #116]	; (8006bdc <EXTI4_15_IRQHandler+0x7c>)
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	2240      	movs	r2, #64	; 0x40
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	d001      	beq.n	8006b72 <EXTI4_15_IRQHandler+0x12>
		push_button();
 8006b6e:	f7ff fd9d 	bl	80066ac <push_button>
	}

	//PIN 9
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_9)){
 8006b72:	4b1a      	ldr	r3, [pc, #104]	; (8006bdc <EXTI4_15_IRQHandler+0x7c>)
 8006b74:	695b      	ldr	r3, [r3, #20]
//			cliff_sense();
		//do something here to stop motors
	}

	// PIN 11
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11)){
 8006b76:	4b19      	ldr	r3, [pc, #100]	; (8006bdc <EXTI4_15_IRQHandler+0x7c>)
 8006b78:	695a      	ldr	r2, [r3, #20]
 8006b7a:	2380      	movs	r3, #128	; 0x80
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	4013      	ands	r3, r2
 8006b80:	d001      	beq.n	8006b86 <EXTI4_15_IRQHandler+0x26>
		Left_Encoder_Interrupt_Handler();
 8006b82:	f7ff f8fd 	bl	8005d80 <Left_Encoder_Interrupt_Handler>
	}
	// PIN 12
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_12))
 8006b86:	4b15      	ldr	r3, [pc, #84]	; (8006bdc <EXTI4_15_IRQHandler+0x7c>)
 8006b88:	695a      	ldr	r2, [r3, #20]
 8006b8a:	2380      	movs	r3, #128	; 0x80
 8006b8c:	015b      	lsls	r3, r3, #5
 8006b8e:	4013      	ands	r3, r2
 8006b90:	d001      	beq.n	8006b96 <EXTI4_15_IRQHandler+0x36>
	{
		Right_Encoder_Interrupt_Handler();
 8006b92:	f7ff f8dd 	bl	8005d50 <Right_Encoder_Interrupt_Handler>
	}

	// PIN 13

	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 8006b96:	4b11      	ldr	r3, [pc, #68]	; (8006bdc <EXTI4_15_IRQHandler+0x7c>)
 8006b98:	695a      	ldr	r2, [r3, #20]
 8006b9a:	2380      	movs	r3, #128	; 0x80
 8006b9c:	019b      	lsls	r3, r3, #6
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	d001      	beq.n	8006ba6 <EXTI4_15_IRQHandler+0x46>
		nextState();
 8006ba2:	f7ff fd05 	bl	80065b0 <nextState>
	}
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8006ba6:	2040      	movs	r0, #64	; 0x40
 8006ba8:	f7fb f806 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8006bac:	2380      	movs	r3, #128	; 0x80
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f7fb f801 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8006bb6:	2380      	movs	r3, #128	; 0x80
 8006bb8:	011b      	lsls	r3, r3, #4
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f7fa fffc 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8006bc0:	2380      	movs	r3, #128	; 0x80
 8006bc2:	015b      	lsls	r3, r3, #5
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	f7fa fff7 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006bca:	2380      	movs	r3, #128	; 0x80
 8006bcc:	019b      	lsls	r3, r3, #6
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f7fa fff2 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8006bd4:	46c0      	nop			; (mov r8, r8)
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	40010400 	.word	0x40010400

08006be0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */
	if(ADC1->ISR & ADC_ISR_EOS){
 8006be4:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <ADC1_COMP_IRQHandler+0x20>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2208      	movs	r2, #8
 8006bea:	4013      	ands	r3, r2
 8006bec:	d001      	beq.n	8006bf2 <ADC1_COMP_IRQHandler+0x12>
		ADC_ConvCpltCallback();
 8006bee:	f7ff f9cd 	bl	8005f8c <ADC_ConvCpltCallback>
	}
  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8006bf2:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <ADC1_COMP_IRQHandler+0x24>)
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	f7fa fb2d 	bl	8001254 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	40012400 	.word	0x40012400
 8006c04:	20000290 	.word	0x20000290

08006c08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	TIM6_UltraSonic_Handler();
 8006c0c:	f7ff fc6a 	bl	80064e4 <TIM6_UltraSonic_Handler>

	soil_count++;
 8006c10:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <TIM6_DAC_IRQHandler+0x34>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <TIM6_DAC_IRQHandler+0x34>)
 8006c18:	601a      	str	r2, [r3, #0]
	if(soil_count == 60){
 8006c1a:	4b08      	ldr	r3, [pc, #32]	; (8006c3c <TIM6_DAC_IRQHandler+0x34>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b3c      	cmp	r3, #60	; 0x3c
 8006c20:	d104      	bne.n	8006c2c <TIM6_DAC_IRQHandler+0x24>
		check_soil();
 8006c22:	f7ff fac5 	bl	80061b0 <check_soil>
		soil_count = 0;
 8006c26:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <TIM6_DAC_IRQHandler+0x34>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006c2c:	4b04      	ldr	r3, [pc, #16]	; (8006c40 <TIM6_DAC_IRQHandler+0x38>)
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f7fc fd3b 	bl	80036aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006c34:	46c0      	nop			; (mov r8, r8)
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	46c0      	nop			; (mov r8, r8)
 8006c3c:	200000c4 	.word	0x200000c4
 8006c40:	20000194 	.word	0x20000194

08006c44 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */
	TEN_KHZ_TIM_Interrupt_Handler();
 8006c48:	f7ff f99a 	bl	8005f80 <TEN_KHZ_TIM_Interrupt_Handler>
  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8006c4c:	4b03      	ldr	r3, [pc, #12]	; (8006c5c <TIM21_IRQHandler+0x18>)
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f7fc fd2b 	bl	80036aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8006c54:	46c0      	nop			; (mov r8, r8)
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	46c0      	nop			; (mov r8, r8)
 8006c5c:	200002fc 	.word	0x200002fc

08006c60 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */
	Print_RENC_Reading();
 8006c64:	f7ff fa9e 	bl	80061a4 <Print_RENC_Reading>
  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8006c68:	4b03      	ldr	r3, [pc, #12]	; (8006c78 <TIM22_IRQHandler+0x18>)
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f7fc fd1d 	bl	80036aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8006c70:	46c0      	nop			; (mov r8, r8)
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	46c0      	nop			; (mov r8, r8)
 8006c78:	20000128 	.word	0x20000128

08006c7c <_read>:
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	617b      	str	r3, [r7, #20]
 8006c8c:	e00a      	b.n	8006ca4 <_read+0x28>
 8006c8e:	e000      	b.n	8006c92 <_read+0x16>
 8006c90:	bf00      	nop
 8006c92:	0001      	movs	r1, r0
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	60ba      	str	r2, [r7, #8]
 8006c9a:	b2ca      	uxtb	r2, r1
 8006c9c:	701a      	strb	r2, [r3, #0]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	dbf0      	blt.n	8006c8e <_read+0x12>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	0018      	movs	r0, r3
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	b006      	add	sp, #24
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <_write>:
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b086      	sub	sp, #24
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	607a      	str	r2, [r7, #4]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	617b      	str	r3, [r7, #20]
 8006cc6:	e009      	b.n	8006cdc <_write+0x26>
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	60ba      	str	r2, [r7, #8]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	f7ff f829 	bl	8005d28 <__io_putchar>
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	dbf1      	blt.n	8006cc8 <_write+0x12>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	b006      	add	sp, #24
 8006cec:	bd80      	pop	{r7, pc}

08006cee <_close>:
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b082      	sub	sp, #8
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	425b      	negs	r3, r3
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	b002      	add	sp, #8
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <_fstat>:
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2280      	movs	r2, #128	; 0x80
 8006d10:	0192      	lsls	r2, r2, #6
 8006d12:	605a      	str	r2, [r3, #4]
 8006d14:	2300      	movs	r3, #0
 8006d16:	0018      	movs	r0, r3
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	b002      	add	sp, #8
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <_isatty>:
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	2301      	movs	r3, #1
 8006d28:	0018      	movs	r0, r3
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	b002      	add	sp, #8
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <_lseek>:
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	0018      	movs	r0, r3
 8006d40:	46bd      	mov	sp, r7
 8006d42:	b004      	add	sp, #16
 8006d44:	bd80      	pop	{r7, pc}
	...

08006d48 <_sbrk>:
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	4b11      	ldr	r3, [pc, #68]	; (8006d98 <_sbrk+0x50>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d102      	bne.n	8006d5e <_sbrk+0x16>
 8006d58:	4b0f      	ldr	r3, [pc, #60]	; (8006d98 <_sbrk+0x50>)
 8006d5a:	4a10      	ldr	r2, [pc, #64]	; (8006d9c <_sbrk+0x54>)
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	4b0e      	ldr	r3, [pc, #56]	; (8006d98 <_sbrk+0x50>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <_sbrk+0x50>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	18d3      	adds	r3, r2, r3
 8006d6c:	466a      	mov	r2, sp
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d907      	bls.n	8006d82 <_sbrk+0x3a>
 8006d72:	f000 f87d 	bl	8006e70 <__errno>
 8006d76:	0003      	movs	r3, r0
 8006d78:	220c      	movs	r2, #12
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	425b      	negs	r3, r3
 8006d80:	e006      	b.n	8006d90 <_sbrk+0x48>
 8006d82:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <_sbrk+0x50>)
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	18d2      	adds	r2, r2, r3
 8006d8a:	4b03      	ldr	r3, [pc, #12]	; (8006d98 <_sbrk+0x50>)
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	0018      	movs	r0, r3
 8006d92:	46bd      	mov	sp, r7
 8006d94:	b004      	add	sp, #16
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	200000c8 	.word	0x200000c8
 8006d9c:	20000340 	.word	0x20000340

08006da0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8006da4:	4b17      	ldr	r3, [pc, #92]	; (8006e04 <SystemInit+0x64>)
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	4b16      	ldr	r3, [pc, #88]	; (8006e04 <SystemInit+0x64>)
 8006daa:	2180      	movs	r1, #128	; 0x80
 8006dac:	0049      	lsls	r1, r1, #1
 8006dae:	430a      	orrs	r2, r1
 8006db0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8006db2:	4b14      	ldr	r3, [pc, #80]	; (8006e04 <SystemInit+0x64>)
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	4b13      	ldr	r3, [pc, #76]	; (8006e04 <SystemInit+0x64>)
 8006db8:	4913      	ldr	r1, [pc, #76]	; (8006e08 <SystemInit+0x68>)
 8006dba:	400a      	ands	r2, r1
 8006dbc:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8006dbe:	4b11      	ldr	r3, [pc, #68]	; (8006e04 <SystemInit+0x64>)
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	4b10      	ldr	r3, [pc, #64]	; (8006e04 <SystemInit+0x64>)
 8006dc4:	4911      	ldr	r1, [pc, #68]	; (8006e0c <SystemInit+0x6c>)
 8006dc6:	400a      	ands	r2, r1
 8006dc8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006dca:	4b0e      	ldr	r3, [pc, #56]	; (8006e04 <SystemInit+0x64>)
 8006dcc:	689a      	ldr	r2, [r3, #8]
 8006dce:	4b0d      	ldr	r3, [pc, #52]	; (8006e04 <SystemInit+0x64>)
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	438a      	bics	r2, r1
 8006dd4:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006dd6:	4b0b      	ldr	r3, [pc, #44]	; (8006e04 <SystemInit+0x64>)
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	4b0a      	ldr	r3, [pc, #40]	; (8006e04 <SystemInit+0x64>)
 8006ddc:	490c      	ldr	r1, [pc, #48]	; (8006e10 <SystemInit+0x70>)
 8006dde:	400a      	ands	r2, r1
 8006de0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8006de2:	4b08      	ldr	r3, [pc, #32]	; (8006e04 <SystemInit+0x64>)
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	4b07      	ldr	r3, [pc, #28]	; (8006e04 <SystemInit+0x64>)
 8006de8:	490a      	ldr	r1, [pc, #40]	; (8006e14 <SystemInit+0x74>)
 8006dea:	400a      	ands	r2, r1
 8006dec:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006dee:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <SystemInit+0x64>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006df4:	4b08      	ldr	r3, [pc, #32]	; (8006e18 <SystemInit+0x78>)
 8006df6:	2280      	movs	r2, #128	; 0x80
 8006df8:	0512      	lsls	r2, r2, #20
 8006dfa:	609a      	str	r2, [r3, #8]
#endif
}
 8006dfc:	46c0      	nop			; (mov r8, r8)
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	40021000 	.word	0x40021000
 8006e08:	88ff400c 	.word	0x88ff400c
 8006e0c:	fef6fff6 	.word	0xfef6fff6
 8006e10:	fffbffff 	.word	0xfffbffff
 8006e14:	ff02ffff 	.word	0xff02ffff
 8006e18:	e000ed00 	.word	0xe000ed00

08006e1c <Reset_Handler>:
 8006e1c:	480d      	ldr	r0, [pc, #52]	; (8006e54 <LoopForever+0x2>)
 8006e1e:	4685      	mov	sp, r0
 8006e20:	2100      	movs	r1, #0
 8006e22:	e003      	b.n	8006e2c <LoopCopyDataInit>

08006e24 <CopyDataInit>:
 8006e24:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <LoopForever+0x6>)
 8006e26:	585b      	ldr	r3, [r3, r1]
 8006e28:	5043      	str	r3, [r0, r1]
 8006e2a:	3104      	adds	r1, #4

08006e2c <LoopCopyDataInit>:
 8006e2c:	480b      	ldr	r0, [pc, #44]	; (8006e5c <LoopForever+0xa>)
 8006e2e:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <LoopForever+0xe>)
 8006e30:	1842      	adds	r2, r0, r1
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d3f6      	bcc.n	8006e24 <CopyDataInit>
 8006e36:	4a0b      	ldr	r2, [pc, #44]	; (8006e64 <LoopForever+0x12>)
 8006e38:	e002      	b.n	8006e40 <LoopFillZerobss>

08006e3a <FillZerobss>:
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	3204      	adds	r2, #4

08006e40 <LoopFillZerobss>:
 8006e40:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <LoopForever+0x16>)
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d3f9      	bcc.n	8006e3a <FillZerobss>
 8006e46:	f7ff ffab 	bl	8006da0 <SystemInit>
 8006e4a:	f000 f9a3 	bl	8007194 <__libc_init_array>
 8006e4e:	f7fe f8cf 	bl	8004ff0 <main>

08006e52 <LoopForever>:
 8006e52:	e7fe      	b.n	8006e52 <LoopForever>
 8006e54:	20005000 	.word	0x20005000
 8006e58:	080081ec 	.word	0x080081ec
 8006e5c:	20000000 	.word	0x20000000
 8006e60:	20000068 	.word	0x20000068
 8006e64:	20000068 	.word	0x20000068
 8006e68:	2000033c 	.word	0x2000033c

08006e6c <DMA1_Channel1_IRQHandler>:
 8006e6c:	e7fe      	b.n	8006e6c <DMA1_Channel1_IRQHandler>
	...

08006e70 <__errno>:
 8006e70:	4b01      	ldr	r3, [pc, #4]	; (8006e78 <__errno+0x8>)
 8006e72:	6818      	ldr	r0, [r3, #0]
 8006e74:	4770      	bx	lr
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	20000004 	.word	0x20000004

08006e7c <__sflush_r>:
 8006e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e7e:	898a      	ldrh	r2, [r1, #12]
 8006e80:	0005      	movs	r5, r0
 8006e82:	000c      	movs	r4, r1
 8006e84:	0713      	lsls	r3, r2, #28
 8006e86:	d460      	bmi.n	8006f4a <__sflush_r+0xce>
 8006e88:	684b      	ldr	r3, [r1, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	dc04      	bgt.n	8006e98 <__sflush_r+0x1c>
 8006e8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	dc01      	bgt.n	8006e98 <__sflush_r+0x1c>
 8006e94:	2000      	movs	r0, #0
 8006e96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e98:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006e9a:	2f00      	cmp	r7, #0
 8006e9c:	d0fa      	beq.n	8006e94 <__sflush_r+0x18>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	682e      	ldr	r6, [r5, #0]
 8006ea2:	602b      	str	r3, [r5, #0]
 8006ea4:	2380      	movs	r3, #128	; 0x80
 8006ea6:	015b      	lsls	r3, r3, #5
 8006ea8:	6a21      	ldr	r1, [r4, #32]
 8006eaa:	401a      	ands	r2, r3
 8006eac:	d034      	beq.n	8006f18 <__sflush_r+0x9c>
 8006eae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	075b      	lsls	r3, r3, #29
 8006eb4:	d506      	bpl.n	8006ec4 <__sflush_r+0x48>
 8006eb6:	6863      	ldr	r3, [r4, #4]
 8006eb8:	1ac0      	subs	r0, r0, r3
 8006eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <__sflush_r+0x48>
 8006ec0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ec2:	1ac0      	subs	r0, r0, r3
 8006ec4:	0002      	movs	r2, r0
 8006ec6:	6a21      	ldr	r1, [r4, #32]
 8006ec8:	2300      	movs	r3, #0
 8006eca:	0028      	movs	r0, r5
 8006ecc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006ece:	47b8      	blx	r7
 8006ed0:	89a1      	ldrh	r1, [r4, #12]
 8006ed2:	1c43      	adds	r3, r0, #1
 8006ed4:	d106      	bne.n	8006ee4 <__sflush_r+0x68>
 8006ed6:	682b      	ldr	r3, [r5, #0]
 8006ed8:	2b1d      	cmp	r3, #29
 8006eda:	d830      	bhi.n	8006f3e <__sflush_r+0xc2>
 8006edc:	4a2b      	ldr	r2, [pc, #172]	; (8006f8c <__sflush_r+0x110>)
 8006ede:	40da      	lsrs	r2, r3
 8006ee0:	07d3      	lsls	r3, r2, #31
 8006ee2:	d52c      	bpl.n	8006f3e <__sflush_r+0xc2>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	6063      	str	r3, [r4, #4]
 8006ee8:	6923      	ldr	r3, [r4, #16]
 8006eea:	6023      	str	r3, [r4, #0]
 8006eec:	04cb      	lsls	r3, r1, #19
 8006eee:	d505      	bpl.n	8006efc <__sflush_r+0x80>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d102      	bne.n	8006efa <__sflush_r+0x7e>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d100      	bne.n	8006efc <__sflush_r+0x80>
 8006efa:	6560      	str	r0, [r4, #84]	; 0x54
 8006efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006efe:	602e      	str	r6, [r5, #0]
 8006f00:	2900      	cmp	r1, #0
 8006f02:	d0c7      	beq.n	8006e94 <__sflush_r+0x18>
 8006f04:	0023      	movs	r3, r4
 8006f06:	3344      	adds	r3, #68	; 0x44
 8006f08:	4299      	cmp	r1, r3
 8006f0a:	d002      	beq.n	8006f12 <__sflush_r+0x96>
 8006f0c:	0028      	movs	r0, r5
 8006f0e:	f000 f96d 	bl	80071ec <_free_r>
 8006f12:	2000      	movs	r0, #0
 8006f14:	6360      	str	r0, [r4, #52]	; 0x34
 8006f16:	e7be      	b.n	8006e96 <__sflush_r+0x1a>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	0028      	movs	r0, r5
 8006f1c:	47b8      	blx	r7
 8006f1e:	1c43      	adds	r3, r0, #1
 8006f20:	d1c6      	bne.n	8006eb0 <__sflush_r+0x34>
 8006f22:	682b      	ldr	r3, [r5, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0c3      	beq.n	8006eb0 <__sflush_r+0x34>
 8006f28:	2b1d      	cmp	r3, #29
 8006f2a:	d001      	beq.n	8006f30 <__sflush_r+0xb4>
 8006f2c:	2b16      	cmp	r3, #22
 8006f2e:	d101      	bne.n	8006f34 <__sflush_r+0xb8>
 8006f30:	602e      	str	r6, [r5, #0]
 8006f32:	e7af      	b.n	8006e94 <__sflush_r+0x18>
 8006f34:	2340      	movs	r3, #64	; 0x40
 8006f36:	89a2      	ldrh	r2, [r4, #12]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	81a3      	strh	r3, [r4, #12]
 8006f3c:	e7ab      	b.n	8006e96 <__sflush_r+0x1a>
 8006f3e:	2340      	movs	r3, #64	; 0x40
 8006f40:	430b      	orrs	r3, r1
 8006f42:	2001      	movs	r0, #1
 8006f44:	81a3      	strh	r3, [r4, #12]
 8006f46:	4240      	negs	r0, r0
 8006f48:	e7a5      	b.n	8006e96 <__sflush_r+0x1a>
 8006f4a:	690f      	ldr	r7, [r1, #16]
 8006f4c:	2f00      	cmp	r7, #0
 8006f4e:	d0a1      	beq.n	8006e94 <__sflush_r+0x18>
 8006f50:	680b      	ldr	r3, [r1, #0]
 8006f52:	600f      	str	r7, [r1, #0]
 8006f54:	1bdb      	subs	r3, r3, r7
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	2300      	movs	r3, #0
 8006f5a:	0792      	lsls	r2, r2, #30
 8006f5c:	d100      	bne.n	8006f60 <__sflush_r+0xe4>
 8006f5e:	694b      	ldr	r3, [r1, #20]
 8006f60:	60a3      	str	r3, [r4, #8]
 8006f62:	9b01      	ldr	r3, [sp, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	dc00      	bgt.n	8006f6a <__sflush_r+0xee>
 8006f68:	e794      	b.n	8006e94 <__sflush_r+0x18>
 8006f6a:	9b01      	ldr	r3, [sp, #4]
 8006f6c:	003a      	movs	r2, r7
 8006f6e:	6a21      	ldr	r1, [r4, #32]
 8006f70:	0028      	movs	r0, r5
 8006f72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f74:	47b0      	blx	r6
 8006f76:	2800      	cmp	r0, #0
 8006f78:	dc03      	bgt.n	8006f82 <__sflush_r+0x106>
 8006f7a:	2340      	movs	r3, #64	; 0x40
 8006f7c:	89a2      	ldrh	r2, [r4, #12]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	e7df      	b.n	8006f42 <__sflush_r+0xc6>
 8006f82:	9b01      	ldr	r3, [sp, #4]
 8006f84:	183f      	adds	r7, r7, r0
 8006f86:	1a1b      	subs	r3, r3, r0
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	e7ea      	b.n	8006f62 <__sflush_r+0xe6>
 8006f8c:	20400001 	.word	0x20400001

08006f90 <_fflush_r>:
 8006f90:	690b      	ldr	r3, [r1, #16]
 8006f92:	b570      	push	{r4, r5, r6, lr}
 8006f94:	0005      	movs	r5, r0
 8006f96:	000c      	movs	r4, r1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <_fflush_r+0x10>
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d004      	beq.n	8006fae <_fflush_r+0x1e>
 8006fa4:	6983      	ldr	r3, [r0, #24]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <_fflush_r+0x1e>
 8006faa:	f000 f85f 	bl	800706c <__sinit>
 8006fae:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <_fflush_r+0x4c>)
 8006fb0:	429c      	cmp	r4, r3
 8006fb2:	d109      	bne.n	8006fc8 <_fflush_r+0x38>
 8006fb4:	686c      	ldr	r4, [r5, #4]
 8006fb6:	220c      	movs	r2, #12
 8006fb8:	5ea3      	ldrsh	r3, [r4, r2]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d0ee      	beq.n	8006f9c <_fflush_r+0xc>
 8006fbe:	0021      	movs	r1, r4
 8006fc0:	0028      	movs	r0, r5
 8006fc2:	f7ff ff5b 	bl	8006e7c <__sflush_r>
 8006fc6:	e7ea      	b.n	8006f9e <_fflush_r+0xe>
 8006fc8:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <_fflush_r+0x50>)
 8006fca:	429c      	cmp	r4, r3
 8006fcc:	d101      	bne.n	8006fd2 <_fflush_r+0x42>
 8006fce:	68ac      	ldr	r4, [r5, #8]
 8006fd0:	e7f1      	b.n	8006fb6 <_fflush_r+0x26>
 8006fd2:	4b04      	ldr	r3, [pc, #16]	; (8006fe4 <_fflush_r+0x54>)
 8006fd4:	429c      	cmp	r4, r3
 8006fd6:	d1ee      	bne.n	8006fb6 <_fflush_r+0x26>
 8006fd8:	68ec      	ldr	r4, [r5, #12]
 8006fda:	e7ec      	b.n	8006fb6 <_fflush_r+0x26>
 8006fdc:	08008164 	.word	0x08008164
 8006fe0:	08008184 	.word	0x08008184
 8006fe4:	08008144 	.word	0x08008144

08006fe8 <std>:
 8006fe8:	2300      	movs	r3, #0
 8006fea:	b510      	push	{r4, lr}
 8006fec:	0004      	movs	r4, r0
 8006fee:	6003      	str	r3, [r0, #0]
 8006ff0:	6043      	str	r3, [r0, #4]
 8006ff2:	6083      	str	r3, [r0, #8]
 8006ff4:	8181      	strh	r1, [r0, #12]
 8006ff6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ff8:	81c2      	strh	r2, [r0, #14]
 8006ffa:	6103      	str	r3, [r0, #16]
 8006ffc:	6143      	str	r3, [r0, #20]
 8006ffe:	6183      	str	r3, [r0, #24]
 8007000:	0019      	movs	r1, r3
 8007002:	2208      	movs	r2, #8
 8007004:	305c      	adds	r0, #92	; 0x5c
 8007006:	f000 f8e9 	bl	80071dc <memset>
 800700a:	4b05      	ldr	r3, [pc, #20]	; (8007020 <std+0x38>)
 800700c:	6224      	str	r4, [r4, #32]
 800700e:	6263      	str	r3, [r4, #36]	; 0x24
 8007010:	4b04      	ldr	r3, [pc, #16]	; (8007024 <std+0x3c>)
 8007012:	62a3      	str	r3, [r4, #40]	; 0x28
 8007014:	4b04      	ldr	r3, [pc, #16]	; (8007028 <std+0x40>)
 8007016:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007018:	4b04      	ldr	r3, [pc, #16]	; (800702c <std+0x44>)
 800701a:	6323      	str	r3, [r4, #48]	; 0x30
 800701c:	bd10      	pop	{r4, pc}
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	08007469 	.word	0x08007469
 8007024:	08007491 	.word	0x08007491
 8007028:	080074c9 	.word	0x080074c9
 800702c:	080074f5 	.word	0x080074f5

08007030 <_cleanup_r>:
 8007030:	b510      	push	{r4, lr}
 8007032:	4902      	ldr	r1, [pc, #8]	; (800703c <_cleanup_r+0xc>)
 8007034:	f000 f88c 	bl	8007150 <_fwalk_reent>
 8007038:	bd10      	pop	{r4, pc}
 800703a:	46c0      	nop			; (mov r8, r8)
 800703c:	08006f91 	.word	0x08006f91

08007040 <__sfmoreglue>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	2568      	movs	r5, #104	; 0x68
 8007044:	1e4a      	subs	r2, r1, #1
 8007046:	4355      	muls	r5, r2
 8007048:	000e      	movs	r6, r1
 800704a:	0029      	movs	r1, r5
 800704c:	3174      	adds	r1, #116	; 0x74
 800704e:	f000 f917 	bl	8007280 <_malloc_r>
 8007052:	1e04      	subs	r4, r0, #0
 8007054:	d008      	beq.n	8007068 <__sfmoreglue+0x28>
 8007056:	2100      	movs	r1, #0
 8007058:	002a      	movs	r2, r5
 800705a:	6001      	str	r1, [r0, #0]
 800705c:	6046      	str	r6, [r0, #4]
 800705e:	300c      	adds	r0, #12
 8007060:	60a0      	str	r0, [r4, #8]
 8007062:	3268      	adds	r2, #104	; 0x68
 8007064:	f000 f8ba 	bl	80071dc <memset>
 8007068:	0020      	movs	r0, r4
 800706a:	bd70      	pop	{r4, r5, r6, pc}

0800706c <__sinit>:
 800706c:	6983      	ldr	r3, [r0, #24]
 800706e:	b513      	push	{r0, r1, r4, lr}
 8007070:	0004      	movs	r4, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d128      	bne.n	80070c8 <__sinit+0x5c>
 8007076:	6483      	str	r3, [r0, #72]	; 0x48
 8007078:	64c3      	str	r3, [r0, #76]	; 0x4c
 800707a:	6503      	str	r3, [r0, #80]	; 0x50
 800707c:	4b13      	ldr	r3, [pc, #76]	; (80070cc <__sinit+0x60>)
 800707e:	4a14      	ldr	r2, [pc, #80]	; (80070d0 <__sinit+0x64>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6282      	str	r2, [r0, #40]	; 0x28
 8007084:	9301      	str	r3, [sp, #4]
 8007086:	4298      	cmp	r0, r3
 8007088:	d101      	bne.n	800708e <__sinit+0x22>
 800708a:	2301      	movs	r3, #1
 800708c:	6183      	str	r3, [r0, #24]
 800708e:	0020      	movs	r0, r4
 8007090:	f000 f820 	bl	80070d4 <__sfp>
 8007094:	6060      	str	r0, [r4, #4]
 8007096:	0020      	movs	r0, r4
 8007098:	f000 f81c 	bl	80070d4 <__sfp>
 800709c:	60a0      	str	r0, [r4, #8]
 800709e:	0020      	movs	r0, r4
 80070a0:	f000 f818 	bl	80070d4 <__sfp>
 80070a4:	2200      	movs	r2, #0
 80070a6:	60e0      	str	r0, [r4, #12]
 80070a8:	2104      	movs	r1, #4
 80070aa:	6860      	ldr	r0, [r4, #4]
 80070ac:	f7ff ff9c 	bl	8006fe8 <std>
 80070b0:	2201      	movs	r2, #1
 80070b2:	2109      	movs	r1, #9
 80070b4:	68a0      	ldr	r0, [r4, #8]
 80070b6:	f7ff ff97 	bl	8006fe8 <std>
 80070ba:	2202      	movs	r2, #2
 80070bc:	2112      	movs	r1, #18
 80070be:	68e0      	ldr	r0, [r4, #12]
 80070c0:	f7ff ff92 	bl	8006fe8 <std>
 80070c4:	2301      	movs	r3, #1
 80070c6:	61a3      	str	r3, [r4, #24]
 80070c8:	bd13      	pop	{r0, r1, r4, pc}
 80070ca:	46c0      	nop			; (mov r8, r8)
 80070cc:	080081a4 	.word	0x080081a4
 80070d0:	08007031 	.word	0x08007031

080070d4 <__sfp>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	4b1c      	ldr	r3, [pc, #112]	; (8007148 <__sfp+0x74>)
 80070d8:	0007      	movs	r7, r0
 80070da:	681e      	ldr	r6, [r3, #0]
 80070dc:	69b3      	ldr	r3, [r6, #24]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d102      	bne.n	80070e8 <__sfp+0x14>
 80070e2:	0030      	movs	r0, r6
 80070e4:	f7ff ffc2 	bl	800706c <__sinit>
 80070e8:	3648      	adds	r6, #72	; 0x48
 80070ea:	68b4      	ldr	r4, [r6, #8]
 80070ec:	6873      	ldr	r3, [r6, #4]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	d504      	bpl.n	80070fc <__sfp+0x28>
 80070f2:	6833      	ldr	r3, [r6, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d007      	beq.n	8007108 <__sfp+0x34>
 80070f8:	6836      	ldr	r6, [r6, #0]
 80070fa:	e7f6      	b.n	80070ea <__sfp+0x16>
 80070fc:	220c      	movs	r2, #12
 80070fe:	5ea5      	ldrsh	r5, [r4, r2]
 8007100:	2d00      	cmp	r5, #0
 8007102:	d00d      	beq.n	8007120 <__sfp+0x4c>
 8007104:	3468      	adds	r4, #104	; 0x68
 8007106:	e7f2      	b.n	80070ee <__sfp+0x1a>
 8007108:	2104      	movs	r1, #4
 800710a:	0038      	movs	r0, r7
 800710c:	f7ff ff98 	bl	8007040 <__sfmoreglue>
 8007110:	6030      	str	r0, [r6, #0]
 8007112:	2800      	cmp	r0, #0
 8007114:	d1f0      	bne.n	80070f8 <__sfp+0x24>
 8007116:	230c      	movs	r3, #12
 8007118:	0004      	movs	r4, r0
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	0020      	movs	r0, r4
 800711e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007120:	0020      	movs	r0, r4
 8007122:	4b0a      	ldr	r3, [pc, #40]	; (800714c <__sfp+0x78>)
 8007124:	6665      	str	r5, [r4, #100]	; 0x64
 8007126:	6025      	str	r5, [r4, #0]
 8007128:	6065      	str	r5, [r4, #4]
 800712a:	60a5      	str	r5, [r4, #8]
 800712c:	60e3      	str	r3, [r4, #12]
 800712e:	6125      	str	r5, [r4, #16]
 8007130:	6165      	str	r5, [r4, #20]
 8007132:	61a5      	str	r5, [r4, #24]
 8007134:	2208      	movs	r2, #8
 8007136:	0029      	movs	r1, r5
 8007138:	305c      	adds	r0, #92	; 0x5c
 800713a:	f000 f84f 	bl	80071dc <memset>
 800713e:	6365      	str	r5, [r4, #52]	; 0x34
 8007140:	63a5      	str	r5, [r4, #56]	; 0x38
 8007142:	64a5      	str	r5, [r4, #72]	; 0x48
 8007144:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007146:	e7e9      	b.n	800711c <__sfp+0x48>
 8007148:	080081a4 	.word	0x080081a4
 800714c:	ffff0001 	.word	0xffff0001

08007150 <_fwalk_reent>:
 8007150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007152:	0004      	movs	r4, r0
 8007154:	0007      	movs	r7, r0
 8007156:	2600      	movs	r6, #0
 8007158:	9101      	str	r1, [sp, #4]
 800715a:	3448      	adds	r4, #72	; 0x48
 800715c:	2c00      	cmp	r4, #0
 800715e:	d101      	bne.n	8007164 <_fwalk_reent+0x14>
 8007160:	0030      	movs	r0, r6
 8007162:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007164:	6863      	ldr	r3, [r4, #4]
 8007166:	68a5      	ldr	r5, [r4, #8]
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	9b00      	ldr	r3, [sp, #0]
 800716c:	3b01      	subs	r3, #1
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	d501      	bpl.n	8007176 <_fwalk_reent+0x26>
 8007172:	6824      	ldr	r4, [r4, #0]
 8007174:	e7f2      	b.n	800715c <_fwalk_reent+0xc>
 8007176:	89ab      	ldrh	r3, [r5, #12]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d908      	bls.n	800718e <_fwalk_reent+0x3e>
 800717c:	220e      	movs	r2, #14
 800717e:	5eab      	ldrsh	r3, [r5, r2]
 8007180:	3301      	adds	r3, #1
 8007182:	d004      	beq.n	800718e <_fwalk_reent+0x3e>
 8007184:	0029      	movs	r1, r5
 8007186:	0038      	movs	r0, r7
 8007188:	9b01      	ldr	r3, [sp, #4]
 800718a:	4798      	blx	r3
 800718c:	4306      	orrs	r6, r0
 800718e:	3568      	adds	r5, #104	; 0x68
 8007190:	e7eb      	b.n	800716a <_fwalk_reent+0x1a>
	...

08007194 <__libc_init_array>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	2600      	movs	r6, #0
 8007198:	4d0c      	ldr	r5, [pc, #48]	; (80071cc <__libc_init_array+0x38>)
 800719a:	4c0d      	ldr	r4, [pc, #52]	; (80071d0 <__libc_init_array+0x3c>)
 800719c:	1b64      	subs	r4, r4, r5
 800719e:	10a4      	asrs	r4, r4, #2
 80071a0:	42a6      	cmp	r6, r4
 80071a2:	d109      	bne.n	80071b8 <__libc_init_array+0x24>
 80071a4:	2600      	movs	r6, #0
 80071a6:	f000 fe5b 	bl	8007e60 <_init>
 80071aa:	4d0a      	ldr	r5, [pc, #40]	; (80071d4 <__libc_init_array+0x40>)
 80071ac:	4c0a      	ldr	r4, [pc, #40]	; (80071d8 <__libc_init_array+0x44>)
 80071ae:	1b64      	subs	r4, r4, r5
 80071b0:	10a4      	asrs	r4, r4, #2
 80071b2:	42a6      	cmp	r6, r4
 80071b4:	d105      	bne.n	80071c2 <__libc_init_array+0x2e>
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
 80071b8:	00b3      	lsls	r3, r6, #2
 80071ba:	58eb      	ldr	r3, [r5, r3]
 80071bc:	4798      	blx	r3
 80071be:	3601      	adds	r6, #1
 80071c0:	e7ee      	b.n	80071a0 <__libc_init_array+0xc>
 80071c2:	00b3      	lsls	r3, r6, #2
 80071c4:	58eb      	ldr	r3, [r5, r3]
 80071c6:	4798      	blx	r3
 80071c8:	3601      	adds	r6, #1
 80071ca:	e7f2      	b.n	80071b2 <__libc_init_array+0x1e>
 80071cc:	080081e4 	.word	0x080081e4
 80071d0:	080081e4 	.word	0x080081e4
 80071d4:	080081e4 	.word	0x080081e4
 80071d8:	080081e8 	.word	0x080081e8

080071dc <memset>:
 80071dc:	0003      	movs	r3, r0
 80071de:	1812      	adds	r2, r2, r0
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d100      	bne.n	80071e6 <memset+0xa>
 80071e4:	4770      	bx	lr
 80071e6:	7019      	strb	r1, [r3, #0]
 80071e8:	3301      	adds	r3, #1
 80071ea:	e7f9      	b.n	80071e0 <memset+0x4>

080071ec <_free_r>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	0005      	movs	r5, r0
 80071f0:	2900      	cmp	r1, #0
 80071f2:	d010      	beq.n	8007216 <_free_r+0x2a>
 80071f4:	1f0c      	subs	r4, r1, #4
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	da00      	bge.n	80071fe <_free_r+0x12>
 80071fc:	18e4      	adds	r4, r4, r3
 80071fe:	0028      	movs	r0, r5
 8007200:	f000 faf0 	bl	80077e4 <__malloc_lock>
 8007204:	4a1d      	ldr	r2, [pc, #116]	; (800727c <_free_r+0x90>)
 8007206:	6813      	ldr	r3, [r2, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d105      	bne.n	8007218 <_free_r+0x2c>
 800720c:	6063      	str	r3, [r4, #4]
 800720e:	6014      	str	r4, [r2, #0]
 8007210:	0028      	movs	r0, r5
 8007212:	f000 fae8 	bl	80077e6 <__malloc_unlock>
 8007216:	bd70      	pop	{r4, r5, r6, pc}
 8007218:	42a3      	cmp	r3, r4
 800721a:	d909      	bls.n	8007230 <_free_r+0x44>
 800721c:	6821      	ldr	r1, [r4, #0]
 800721e:	1860      	adds	r0, r4, r1
 8007220:	4283      	cmp	r3, r0
 8007222:	d1f3      	bne.n	800720c <_free_r+0x20>
 8007224:	6818      	ldr	r0, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	1841      	adds	r1, r0, r1
 800722a:	6021      	str	r1, [r4, #0]
 800722c:	e7ee      	b.n	800720c <_free_r+0x20>
 800722e:	0013      	movs	r3, r2
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	2a00      	cmp	r2, #0
 8007234:	d001      	beq.n	800723a <_free_r+0x4e>
 8007236:	42a2      	cmp	r2, r4
 8007238:	d9f9      	bls.n	800722e <_free_r+0x42>
 800723a:	6819      	ldr	r1, [r3, #0]
 800723c:	1858      	adds	r0, r3, r1
 800723e:	42a0      	cmp	r0, r4
 8007240:	d10b      	bne.n	800725a <_free_r+0x6e>
 8007242:	6820      	ldr	r0, [r4, #0]
 8007244:	1809      	adds	r1, r1, r0
 8007246:	1858      	adds	r0, r3, r1
 8007248:	6019      	str	r1, [r3, #0]
 800724a:	4282      	cmp	r2, r0
 800724c:	d1e0      	bne.n	8007210 <_free_r+0x24>
 800724e:	6810      	ldr	r0, [r2, #0]
 8007250:	6852      	ldr	r2, [r2, #4]
 8007252:	1841      	adds	r1, r0, r1
 8007254:	6019      	str	r1, [r3, #0]
 8007256:	605a      	str	r2, [r3, #4]
 8007258:	e7da      	b.n	8007210 <_free_r+0x24>
 800725a:	42a0      	cmp	r0, r4
 800725c:	d902      	bls.n	8007264 <_free_r+0x78>
 800725e:	230c      	movs	r3, #12
 8007260:	602b      	str	r3, [r5, #0]
 8007262:	e7d5      	b.n	8007210 <_free_r+0x24>
 8007264:	6821      	ldr	r1, [r4, #0]
 8007266:	1860      	adds	r0, r4, r1
 8007268:	4282      	cmp	r2, r0
 800726a:	d103      	bne.n	8007274 <_free_r+0x88>
 800726c:	6810      	ldr	r0, [r2, #0]
 800726e:	6852      	ldr	r2, [r2, #4]
 8007270:	1841      	adds	r1, r0, r1
 8007272:	6021      	str	r1, [r4, #0]
 8007274:	6062      	str	r2, [r4, #4]
 8007276:	605c      	str	r4, [r3, #4]
 8007278:	e7ca      	b.n	8007210 <_free_r+0x24>
 800727a:	46c0      	nop			; (mov r8, r8)
 800727c:	200000cc 	.word	0x200000cc

08007280 <_malloc_r>:
 8007280:	2303      	movs	r3, #3
 8007282:	b570      	push	{r4, r5, r6, lr}
 8007284:	1ccd      	adds	r5, r1, #3
 8007286:	439d      	bics	r5, r3
 8007288:	3508      	adds	r5, #8
 800728a:	0006      	movs	r6, r0
 800728c:	2d0c      	cmp	r5, #12
 800728e:	d21e      	bcs.n	80072ce <_malloc_r+0x4e>
 8007290:	250c      	movs	r5, #12
 8007292:	42a9      	cmp	r1, r5
 8007294:	d81d      	bhi.n	80072d2 <_malloc_r+0x52>
 8007296:	0030      	movs	r0, r6
 8007298:	f000 faa4 	bl	80077e4 <__malloc_lock>
 800729c:	4a25      	ldr	r2, [pc, #148]	; (8007334 <_malloc_r+0xb4>)
 800729e:	6814      	ldr	r4, [r2, #0]
 80072a0:	0021      	movs	r1, r4
 80072a2:	2900      	cmp	r1, #0
 80072a4:	d119      	bne.n	80072da <_malloc_r+0x5a>
 80072a6:	4c24      	ldr	r4, [pc, #144]	; (8007338 <_malloc_r+0xb8>)
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d103      	bne.n	80072b6 <_malloc_r+0x36>
 80072ae:	0030      	movs	r0, r6
 80072b0:	f000 f8c8 	bl	8007444 <_sbrk_r>
 80072b4:	6020      	str	r0, [r4, #0]
 80072b6:	0029      	movs	r1, r5
 80072b8:	0030      	movs	r0, r6
 80072ba:	f000 f8c3 	bl	8007444 <_sbrk_r>
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	d12b      	bne.n	800731a <_malloc_r+0x9a>
 80072c2:	230c      	movs	r3, #12
 80072c4:	0030      	movs	r0, r6
 80072c6:	6033      	str	r3, [r6, #0]
 80072c8:	f000 fa8d 	bl	80077e6 <__malloc_unlock>
 80072cc:	e003      	b.n	80072d6 <_malloc_r+0x56>
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	dadf      	bge.n	8007292 <_malloc_r+0x12>
 80072d2:	230c      	movs	r3, #12
 80072d4:	6033      	str	r3, [r6, #0]
 80072d6:	2000      	movs	r0, #0
 80072d8:	bd70      	pop	{r4, r5, r6, pc}
 80072da:	680b      	ldr	r3, [r1, #0]
 80072dc:	1b5b      	subs	r3, r3, r5
 80072de:	d419      	bmi.n	8007314 <_malloc_r+0x94>
 80072e0:	2b0b      	cmp	r3, #11
 80072e2:	d903      	bls.n	80072ec <_malloc_r+0x6c>
 80072e4:	600b      	str	r3, [r1, #0]
 80072e6:	18cc      	adds	r4, r1, r3
 80072e8:	6025      	str	r5, [r4, #0]
 80072ea:	e003      	b.n	80072f4 <_malloc_r+0x74>
 80072ec:	684b      	ldr	r3, [r1, #4]
 80072ee:	428c      	cmp	r4, r1
 80072f0:	d10d      	bne.n	800730e <_malloc_r+0x8e>
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	0030      	movs	r0, r6
 80072f6:	f000 fa76 	bl	80077e6 <__malloc_unlock>
 80072fa:	0020      	movs	r0, r4
 80072fc:	2207      	movs	r2, #7
 80072fe:	300b      	adds	r0, #11
 8007300:	1d23      	adds	r3, r4, #4
 8007302:	4390      	bics	r0, r2
 8007304:	1ac3      	subs	r3, r0, r3
 8007306:	d0e7      	beq.n	80072d8 <_malloc_r+0x58>
 8007308:	425a      	negs	r2, r3
 800730a:	50e2      	str	r2, [r4, r3]
 800730c:	e7e4      	b.n	80072d8 <_malloc_r+0x58>
 800730e:	6063      	str	r3, [r4, #4]
 8007310:	000c      	movs	r4, r1
 8007312:	e7ef      	b.n	80072f4 <_malloc_r+0x74>
 8007314:	000c      	movs	r4, r1
 8007316:	6849      	ldr	r1, [r1, #4]
 8007318:	e7c3      	b.n	80072a2 <_malloc_r+0x22>
 800731a:	2303      	movs	r3, #3
 800731c:	1cc4      	adds	r4, r0, #3
 800731e:	439c      	bics	r4, r3
 8007320:	42a0      	cmp	r0, r4
 8007322:	d0e1      	beq.n	80072e8 <_malloc_r+0x68>
 8007324:	1a21      	subs	r1, r4, r0
 8007326:	0030      	movs	r0, r6
 8007328:	f000 f88c 	bl	8007444 <_sbrk_r>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d1db      	bne.n	80072e8 <_malloc_r+0x68>
 8007330:	e7c7      	b.n	80072c2 <_malloc_r+0x42>
 8007332:	46c0      	nop			; (mov r8, r8)
 8007334:	200000cc 	.word	0x200000cc
 8007338:	200000d0 	.word	0x200000d0

0800733c <iprintf>:
 800733c:	b40f      	push	{r0, r1, r2, r3}
 800733e:	4b0b      	ldr	r3, [pc, #44]	; (800736c <iprintf+0x30>)
 8007340:	b513      	push	{r0, r1, r4, lr}
 8007342:	681c      	ldr	r4, [r3, #0]
 8007344:	2c00      	cmp	r4, #0
 8007346:	d005      	beq.n	8007354 <iprintf+0x18>
 8007348:	69a3      	ldr	r3, [r4, #24]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d102      	bne.n	8007354 <iprintf+0x18>
 800734e:	0020      	movs	r0, r4
 8007350:	f7ff fe8c 	bl	800706c <__sinit>
 8007354:	ab05      	add	r3, sp, #20
 8007356:	9a04      	ldr	r2, [sp, #16]
 8007358:	68a1      	ldr	r1, [r4, #8]
 800735a:	0020      	movs	r0, r4
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	f000 fa6b 	bl	8007838 <_vfiprintf_r>
 8007362:	bc16      	pop	{r1, r2, r4}
 8007364:	bc08      	pop	{r3}
 8007366:	b004      	add	sp, #16
 8007368:	4718      	bx	r3
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	20000004 	.word	0x20000004

08007370 <_puts_r>:
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	0005      	movs	r5, r0
 8007374:	000e      	movs	r6, r1
 8007376:	2800      	cmp	r0, #0
 8007378:	d004      	beq.n	8007384 <_puts_r+0x14>
 800737a:	6983      	ldr	r3, [r0, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <_puts_r+0x14>
 8007380:	f7ff fe74 	bl	800706c <__sinit>
 8007384:	69ab      	ldr	r3, [r5, #24]
 8007386:	68ac      	ldr	r4, [r5, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d102      	bne.n	8007392 <_puts_r+0x22>
 800738c:	0028      	movs	r0, r5
 800738e:	f7ff fe6d 	bl	800706c <__sinit>
 8007392:	4b24      	ldr	r3, [pc, #144]	; (8007424 <_puts_r+0xb4>)
 8007394:	429c      	cmp	r4, r3
 8007396:	d10f      	bne.n	80073b8 <_puts_r+0x48>
 8007398:	686c      	ldr	r4, [r5, #4]
 800739a:	89a3      	ldrh	r3, [r4, #12]
 800739c:	071b      	lsls	r3, r3, #28
 800739e:	d502      	bpl.n	80073a6 <_puts_r+0x36>
 80073a0:	6923      	ldr	r3, [r4, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d11f      	bne.n	80073e6 <_puts_r+0x76>
 80073a6:	0021      	movs	r1, r4
 80073a8:	0028      	movs	r0, r5
 80073aa:	f000 f913 	bl	80075d4 <__swsetup_r>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d019      	beq.n	80073e6 <_puts_r+0x76>
 80073b2:	2001      	movs	r0, #1
 80073b4:	4240      	negs	r0, r0
 80073b6:	bd70      	pop	{r4, r5, r6, pc}
 80073b8:	4b1b      	ldr	r3, [pc, #108]	; (8007428 <_puts_r+0xb8>)
 80073ba:	429c      	cmp	r4, r3
 80073bc:	d101      	bne.n	80073c2 <_puts_r+0x52>
 80073be:	68ac      	ldr	r4, [r5, #8]
 80073c0:	e7eb      	b.n	800739a <_puts_r+0x2a>
 80073c2:	4b1a      	ldr	r3, [pc, #104]	; (800742c <_puts_r+0xbc>)
 80073c4:	429c      	cmp	r4, r3
 80073c6:	d1e8      	bne.n	800739a <_puts_r+0x2a>
 80073c8:	68ec      	ldr	r4, [r5, #12]
 80073ca:	e7e6      	b.n	800739a <_puts_r+0x2a>
 80073cc:	3601      	adds	r6, #1
 80073ce:	60a3      	str	r3, [r4, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	da04      	bge.n	80073de <_puts_r+0x6e>
 80073d4:	69a2      	ldr	r2, [r4, #24]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	dc16      	bgt.n	8007408 <_puts_r+0x98>
 80073da:	290a      	cmp	r1, #10
 80073dc:	d014      	beq.n	8007408 <_puts_r+0x98>
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	6022      	str	r2, [r4, #0]
 80073e4:	7019      	strb	r1, [r3, #0]
 80073e6:	68a3      	ldr	r3, [r4, #8]
 80073e8:	7831      	ldrb	r1, [r6, #0]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	2900      	cmp	r1, #0
 80073ee:	d1ed      	bne.n	80073cc <_puts_r+0x5c>
 80073f0:	60a3      	str	r3, [r4, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	da0f      	bge.n	8007416 <_puts_r+0xa6>
 80073f6:	0022      	movs	r2, r4
 80073f8:	310a      	adds	r1, #10
 80073fa:	0028      	movs	r0, r5
 80073fc:	f000 f880 	bl	8007500 <__swbuf_r>
 8007400:	1c43      	adds	r3, r0, #1
 8007402:	d0d6      	beq.n	80073b2 <_puts_r+0x42>
 8007404:	200a      	movs	r0, #10
 8007406:	e7d6      	b.n	80073b6 <_puts_r+0x46>
 8007408:	0022      	movs	r2, r4
 800740a:	0028      	movs	r0, r5
 800740c:	f000 f878 	bl	8007500 <__swbuf_r>
 8007410:	1c43      	adds	r3, r0, #1
 8007412:	d1e8      	bne.n	80073e6 <_puts_r+0x76>
 8007414:	e7cd      	b.n	80073b2 <_puts_r+0x42>
 8007416:	200a      	movs	r0, #10
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	6022      	str	r2, [r4, #0]
 800741e:	7018      	strb	r0, [r3, #0]
 8007420:	e7c9      	b.n	80073b6 <_puts_r+0x46>
 8007422:	46c0      	nop			; (mov r8, r8)
 8007424:	08008164 	.word	0x08008164
 8007428:	08008184 	.word	0x08008184
 800742c:	08008144 	.word	0x08008144

08007430 <puts>:
 8007430:	b510      	push	{r4, lr}
 8007432:	4b03      	ldr	r3, [pc, #12]	; (8007440 <puts+0x10>)
 8007434:	0001      	movs	r1, r0
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	f7ff ff9a 	bl	8007370 <_puts_r>
 800743c:	bd10      	pop	{r4, pc}
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	20000004 	.word	0x20000004

08007444 <_sbrk_r>:
 8007444:	2300      	movs	r3, #0
 8007446:	b570      	push	{r4, r5, r6, lr}
 8007448:	4c06      	ldr	r4, [pc, #24]	; (8007464 <_sbrk_r+0x20>)
 800744a:	0005      	movs	r5, r0
 800744c:	0008      	movs	r0, r1
 800744e:	6023      	str	r3, [r4, #0]
 8007450:	f7ff fc7a 	bl	8006d48 <_sbrk>
 8007454:	1c43      	adds	r3, r0, #1
 8007456:	d103      	bne.n	8007460 <_sbrk_r+0x1c>
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d000      	beq.n	8007460 <_sbrk_r+0x1c>
 800745e:	602b      	str	r3, [r5, #0]
 8007460:	bd70      	pop	{r4, r5, r6, pc}
 8007462:	46c0      	nop			; (mov r8, r8)
 8007464:	20000338 	.word	0x20000338

08007468 <__sread>:
 8007468:	b570      	push	{r4, r5, r6, lr}
 800746a:	000c      	movs	r4, r1
 800746c:	250e      	movs	r5, #14
 800746e:	5f49      	ldrsh	r1, [r1, r5]
 8007470:	f000 fc6e 	bl	8007d50 <_read_r>
 8007474:	2800      	cmp	r0, #0
 8007476:	db03      	blt.n	8007480 <__sread+0x18>
 8007478:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800747a:	181b      	adds	r3, r3, r0
 800747c:	6563      	str	r3, [r4, #84]	; 0x54
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	4a02      	ldr	r2, [pc, #8]	; (800748c <__sread+0x24>)
 8007484:	4013      	ands	r3, r2
 8007486:	81a3      	strh	r3, [r4, #12]
 8007488:	e7f9      	b.n	800747e <__sread+0x16>
 800748a:	46c0      	nop			; (mov r8, r8)
 800748c:	ffffefff 	.word	0xffffefff

08007490 <__swrite>:
 8007490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007492:	001f      	movs	r7, r3
 8007494:	898b      	ldrh	r3, [r1, #12]
 8007496:	0005      	movs	r5, r0
 8007498:	000c      	movs	r4, r1
 800749a:	0016      	movs	r6, r2
 800749c:	05db      	lsls	r3, r3, #23
 800749e:	d505      	bpl.n	80074ac <__swrite+0x1c>
 80074a0:	230e      	movs	r3, #14
 80074a2:	5ec9      	ldrsh	r1, [r1, r3]
 80074a4:	2200      	movs	r2, #0
 80074a6:	2302      	movs	r3, #2
 80074a8:	f000 f91c 	bl	80076e4 <_lseek_r>
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	4a05      	ldr	r2, [pc, #20]	; (80074c4 <__swrite+0x34>)
 80074b0:	0028      	movs	r0, r5
 80074b2:	4013      	ands	r3, r2
 80074b4:	81a3      	strh	r3, [r4, #12]
 80074b6:	0032      	movs	r2, r6
 80074b8:	230e      	movs	r3, #14
 80074ba:	5ee1      	ldrsh	r1, [r4, r3]
 80074bc:	003b      	movs	r3, r7
 80074be:	f000 f875 	bl	80075ac <_write_r>
 80074c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074c4:	ffffefff 	.word	0xffffefff

080074c8 <__sseek>:
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	000c      	movs	r4, r1
 80074cc:	250e      	movs	r5, #14
 80074ce:	5f49      	ldrsh	r1, [r1, r5]
 80074d0:	f000 f908 	bl	80076e4 <_lseek_r>
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	1c42      	adds	r2, r0, #1
 80074d8:	d103      	bne.n	80074e2 <__sseek+0x1a>
 80074da:	4a05      	ldr	r2, [pc, #20]	; (80074f0 <__sseek+0x28>)
 80074dc:	4013      	ands	r3, r2
 80074de:	81a3      	strh	r3, [r4, #12]
 80074e0:	bd70      	pop	{r4, r5, r6, pc}
 80074e2:	2280      	movs	r2, #128	; 0x80
 80074e4:	0152      	lsls	r2, r2, #5
 80074e6:	4313      	orrs	r3, r2
 80074e8:	81a3      	strh	r3, [r4, #12]
 80074ea:	6560      	str	r0, [r4, #84]	; 0x54
 80074ec:	e7f8      	b.n	80074e0 <__sseek+0x18>
 80074ee:	46c0      	nop			; (mov r8, r8)
 80074f0:	ffffefff 	.word	0xffffefff

080074f4 <__sclose>:
 80074f4:	b510      	push	{r4, lr}
 80074f6:	230e      	movs	r3, #14
 80074f8:	5ec9      	ldrsh	r1, [r1, r3]
 80074fa:	f000 f8e1 	bl	80076c0 <_close_r>
 80074fe:	bd10      	pop	{r4, pc}

08007500 <__swbuf_r>:
 8007500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007502:	0005      	movs	r5, r0
 8007504:	000e      	movs	r6, r1
 8007506:	0014      	movs	r4, r2
 8007508:	2800      	cmp	r0, #0
 800750a:	d004      	beq.n	8007516 <__swbuf_r+0x16>
 800750c:	6983      	ldr	r3, [r0, #24]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <__swbuf_r+0x16>
 8007512:	f7ff fdab 	bl	800706c <__sinit>
 8007516:	4b22      	ldr	r3, [pc, #136]	; (80075a0 <__swbuf_r+0xa0>)
 8007518:	429c      	cmp	r4, r3
 800751a:	d12d      	bne.n	8007578 <__swbuf_r+0x78>
 800751c:	686c      	ldr	r4, [r5, #4]
 800751e:	69a3      	ldr	r3, [r4, #24]
 8007520:	60a3      	str	r3, [r4, #8]
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	071b      	lsls	r3, r3, #28
 8007526:	d531      	bpl.n	800758c <__swbuf_r+0x8c>
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d02e      	beq.n	800758c <__swbuf_r+0x8c>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	6922      	ldr	r2, [r4, #16]
 8007532:	b2f7      	uxtb	r7, r6
 8007534:	1a98      	subs	r0, r3, r2
 8007536:	6963      	ldr	r3, [r4, #20]
 8007538:	b2f6      	uxtb	r6, r6
 800753a:	4283      	cmp	r3, r0
 800753c:	dc05      	bgt.n	800754a <__swbuf_r+0x4a>
 800753e:	0021      	movs	r1, r4
 8007540:	0028      	movs	r0, r5
 8007542:	f7ff fd25 	bl	8006f90 <_fflush_r>
 8007546:	2800      	cmp	r0, #0
 8007548:	d126      	bne.n	8007598 <__swbuf_r+0x98>
 800754a:	68a3      	ldr	r3, [r4, #8]
 800754c:	3001      	adds	r0, #1
 800754e:	3b01      	subs	r3, #1
 8007550:	60a3      	str	r3, [r4, #8]
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	6022      	str	r2, [r4, #0]
 8007558:	701f      	strb	r7, [r3, #0]
 800755a:	6963      	ldr	r3, [r4, #20]
 800755c:	4283      	cmp	r3, r0
 800755e:	d004      	beq.n	800756a <__swbuf_r+0x6a>
 8007560:	89a3      	ldrh	r3, [r4, #12]
 8007562:	07db      	lsls	r3, r3, #31
 8007564:	d51a      	bpl.n	800759c <__swbuf_r+0x9c>
 8007566:	2e0a      	cmp	r6, #10
 8007568:	d118      	bne.n	800759c <__swbuf_r+0x9c>
 800756a:	0021      	movs	r1, r4
 800756c:	0028      	movs	r0, r5
 800756e:	f7ff fd0f 	bl	8006f90 <_fflush_r>
 8007572:	2800      	cmp	r0, #0
 8007574:	d012      	beq.n	800759c <__swbuf_r+0x9c>
 8007576:	e00f      	b.n	8007598 <__swbuf_r+0x98>
 8007578:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <__swbuf_r+0xa4>)
 800757a:	429c      	cmp	r4, r3
 800757c:	d101      	bne.n	8007582 <__swbuf_r+0x82>
 800757e:	68ac      	ldr	r4, [r5, #8]
 8007580:	e7cd      	b.n	800751e <__swbuf_r+0x1e>
 8007582:	4b09      	ldr	r3, [pc, #36]	; (80075a8 <__swbuf_r+0xa8>)
 8007584:	429c      	cmp	r4, r3
 8007586:	d1ca      	bne.n	800751e <__swbuf_r+0x1e>
 8007588:	68ec      	ldr	r4, [r5, #12]
 800758a:	e7c8      	b.n	800751e <__swbuf_r+0x1e>
 800758c:	0021      	movs	r1, r4
 800758e:	0028      	movs	r0, r5
 8007590:	f000 f820 	bl	80075d4 <__swsetup_r>
 8007594:	2800      	cmp	r0, #0
 8007596:	d0ca      	beq.n	800752e <__swbuf_r+0x2e>
 8007598:	2601      	movs	r6, #1
 800759a:	4276      	negs	r6, r6
 800759c:	0030      	movs	r0, r6
 800759e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a0:	08008164 	.word	0x08008164
 80075a4:	08008184 	.word	0x08008184
 80075a8:	08008144 	.word	0x08008144

080075ac <_write_r>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	0005      	movs	r5, r0
 80075b0:	0008      	movs	r0, r1
 80075b2:	0011      	movs	r1, r2
 80075b4:	2200      	movs	r2, #0
 80075b6:	4c06      	ldr	r4, [pc, #24]	; (80075d0 <_write_r+0x24>)
 80075b8:	6022      	str	r2, [r4, #0]
 80075ba:	001a      	movs	r2, r3
 80075bc:	f7ff fb7b 	bl	8006cb6 <_write>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d103      	bne.n	80075cc <_write_r+0x20>
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d000      	beq.n	80075cc <_write_r+0x20>
 80075ca:	602b      	str	r3, [r5, #0]
 80075cc:	bd70      	pop	{r4, r5, r6, pc}
 80075ce:	46c0      	nop			; (mov r8, r8)
 80075d0:	20000338 	.word	0x20000338

080075d4 <__swsetup_r>:
 80075d4:	4b36      	ldr	r3, [pc, #216]	; (80076b0 <__swsetup_r+0xdc>)
 80075d6:	b570      	push	{r4, r5, r6, lr}
 80075d8:	681d      	ldr	r5, [r3, #0]
 80075da:	0006      	movs	r6, r0
 80075dc:	000c      	movs	r4, r1
 80075de:	2d00      	cmp	r5, #0
 80075e0:	d005      	beq.n	80075ee <__swsetup_r+0x1a>
 80075e2:	69ab      	ldr	r3, [r5, #24]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <__swsetup_r+0x1a>
 80075e8:	0028      	movs	r0, r5
 80075ea:	f7ff fd3f 	bl	800706c <__sinit>
 80075ee:	4b31      	ldr	r3, [pc, #196]	; (80076b4 <__swsetup_r+0xe0>)
 80075f0:	429c      	cmp	r4, r3
 80075f2:	d10f      	bne.n	8007614 <__swsetup_r+0x40>
 80075f4:	686c      	ldr	r4, [r5, #4]
 80075f6:	230c      	movs	r3, #12
 80075f8:	5ee2      	ldrsh	r2, [r4, r3]
 80075fa:	b293      	uxth	r3, r2
 80075fc:	0719      	lsls	r1, r3, #28
 80075fe:	d42d      	bmi.n	800765c <__swsetup_r+0x88>
 8007600:	06d9      	lsls	r1, r3, #27
 8007602:	d411      	bmi.n	8007628 <__swsetup_r+0x54>
 8007604:	2309      	movs	r3, #9
 8007606:	2001      	movs	r0, #1
 8007608:	6033      	str	r3, [r6, #0]
 800760a:	3337      	adds	r3, #55	; 0x37
 800760c:	4313      	orrs	r3, r2
 800760e:	81a3      	strh	r3, [r4, #12]
 8007610:	4240      	negs	r0, r0
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	4b28      	ldr	r3, [pc, #160]	; (80076b8 <__swsetup_r+0xe4>)
 8007616:	429c      	cmp	r4, r3
 8007618:	d101      	bne.n	800761e <__swsetup_r+0x4a>
 800761a:	68ac      	ldr	r4, [r5, #8]
 800761c:	e7eb      	b.n	80075f6 <__swsetup_r+0x22>
 800761e:	4b27      	ldr	r3, [pc, #156]	; (80076bc <__swsetup_r+0xe8>)
 8007620:	429c      	cmp	r4, r3
 8007622:	d1e8      	bne.n	80075f6 <__swsetup_r+0x22>
 8007624:	68ec      	ldr	r4, [r5, #12]
 8007626:	e7e6      	b.n	80075f6 <__swsetup_r+0x22>
 8007628:	075b      	lsls	r3, r3, #29
 800762a:	d513      	bpl.n	8007654 <__swsetup_r+0x80>
 800762c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800762e:	2900      	cmp	r1, #0
 8007630:	d008      	beq.n	8007644 <__swsetup_r+0x70>
 8007632:	0023      	movs	r3, r4
 8007634:	3344      	adds	r3, #68	; 0x44
 8007636:	4299      	cmp	r1, r3
 8007638:	d002      	beq.n	8007640 <__swsetup_r+0x6c>
 800763a:	0030      	movs	r0, r6
 800763c:	f7ff fdd6 	bl	80071ec <_free_r>
 8007640:	2300      	movs	r3, #0
 8007642:	6363      	str	r3, [r4, #52]	; 0x34
 8007644:	2224      	movs	r2, #36	; 0x24
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	4393      	bics	r3, r2
 800764a:	81a3      	strh	r3, [r4, #12]
 800764c:	2300      	movs	r3, #0
 800764e:	6063      	str	r3, [r4, #4]
 8007650:	6923      	ldr	r3, [r4, #16]
 8007652:	6023      	str	r3, [r4, #0]
 8007654:	2308      	movs	r3, #8
 8007656:	89a2      	ldrh	r2, [r4, #12]
 8007658:	4313      	orrs	r3, r2
 800765a:	81a3      	strh	r3, [r4, #12]
 800765c:	6923      	ldr	r3, [r4, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10b      	bne.n	800767a <__swsetup_r+0xa6>
 8007662:	21a0      	movs	r1, #160	; 0xa0
 8007664:	2280      	movs	r2, #128	; 0x80
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	0089      	lsls	r1, r1, #2
 800766a:	0092      	lsls	r2, r2, #2
 800766c:	400b      	ands	r3, r1
 800766e:	4293      	cmp	r3, r2
 8007670:	d003      	beq.n	800767a <__swsetup_r+0xa6>
 8007672:	0021      	movs	r1, r4
 8007674:	0030      	movs	r0, r6
 8007676:	f000 f871 	bl	800775c <__smakebuf_r>
 800767a:	2301      	movs	r3, #1
 800767c:	89a2      	ldrh	r2, [r4, #12]
 800767e:	4013      	ands	r3, r2
 8007680:	d011      	beq.n	80076a6 <__swsetup_r+0xd2>
 8007682:	2300      	movs	r3, #0
 8007684:	60a3      	str	r3, [r4, #8]
 8007686:	6963      	ldr	r3, [r4, #20]
 8007688:	425b      	negs	r3, r3
 800768a:	61a3      	str	r3, [r4, #24]
 800768c:	2000      	movs	r0, #0
 800768e:	6923      	ldr	r3, [r4, #16]
 8007690:	4283      	cmp	r3, r0
 8007692:	d1be      	bne.n	8007612 <__swsetup_r+0x3e>
 8007694:	230c      	movs	r3, #12
 8007696:	5ee2      	ldrsh	r2, [r4, r3]
 8007698:	0613      	lsls	r3, r2, #24
 800769a:	d5ba      	bpl.n	8007612 <__swsetup_r+0x3e>
 800769c:	2340      	movs	r3, #64	; 0x40
 800769e:	4313      	orrs	r3, r2
 80076a0:	81a3      	strh	r3, [r4, #12]
 80076a2:	3801      	subs	r0, #1
 80076a4:	e7b5      	b.n	8007612 <__swsetup_r+0x3e>
 80076a6:	0792      	lsls	r2, r2, #30
 80076a8:	d400      	bmi.n	80076ac <__swsetup_r+0xd8>
 80076aa:	6963      	ldr	r3, [r4, #20]
 80076ac:	60a3      	str	r3, [r4, #8]
 80076ae:	e7ed      	b.n	800768c <__swsetup_r+0xb8>
 80076b0:	20000004 	.word	0x20000004
 80076b4:	08008164 	.word	0x08008164
 80076b8:	08008184 	.word	0x08008184
 80076bc:	08008144 	.word	0x08008144

080076c0 <_close_r>:
 80076c0:	2300      	movs	r3, #0
 80076c2:	b570      	push	{r4, r5, r6, lr}
 80076c4:	4c06      	ldr	r4, [pc, #24]	; (80076e0 <_close_r+0x20>)
 80076c6:	0005      	movs	r5, r0
 80076c8:	0008      	movs	r0, r1
 80076ca:	6023      	str	r3, [r4, #0]
 80076cc:	f7ff fb0f 	bl	8006cee <_close>
 80076d0:	1c43      	adds	r3, r0, #1
 80076d2:	d103      	bne.n	80076dc <_close_r+0x1c>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d000      	beq.n	80076dc <_close_r+0x1c>
 80076da:	602b      	str	r3, [r5, #0]
 80076dc:	bd70      	pop	{r4, r5, r6, pc}
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	20000338 	.word	0x20000338

080076e4 <_lseek_r>:
 80076e4:	b570      	push	{r4, r5, r6, lr}
 80076e6:	0005      	movs	r5, r0
 80076e8:	0008      	movs	r0, r1
 80076ea:	0011      	movs	r1, r2
 80076ec:	2200      	movs	r2, #0
 80076ee:	4c06      	ldr	r4, [pc, #24]	; (8007708 <_lseek_r+0x24>)
 80076f0:	6022      	str	r2, [r4, #0]
 80076f2:	001a      	movs	r2, r3
 80076f4:	f7ff fb1c 	bl	8006d30 <_lseek>
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d103      	bne.n	8007704 <_lseek_r+0x20>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d000      	beq.n	8007704 <_lseek_r+0x20>
 8007702:	602b      	str	r3, [r5, #0]
 8007704:	bd70      	pop	{r4, r5, r6, pc}
 8007706:	46c0      	nop			; (mov r8, r8)
 8007708:	20000338 	.word	0x20000338

0800770c <__swhatbuf_r>:
 800770c:	b570      	push	{r4, r5, r6, lr}
 800770e:	000e      	movs	r6, r1
 8007710:	001d      	movs	r5, r3
 8007712:	230e      	movs	r3, #14
 8007714:	5ec9      	ldrsh	r1, [r1, r3]
 8007716:	b096      	sub	sp, #88	; 0x58
 8007718:	0014      	movs	r4, r2
 800771a:	2900      	cmp	r1, #0
 800771c:	da07      	bge.n	800772e <__swhatbuf_r+0x22>
 800771e:	2300      	movs	r3, #0
 8007720:	602b      	str	r3, [r5, #0]
 8007722:	89b3      	ldrh	r3, [r6, #12]
 8007724:	061b      	lsls	r3, r3, #24
 8007726:	d411      	bmi.n	800774c <__swhatbuf_r+0x40>
 8007728:	2380      	movs	r3, #128	; 0x80
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	e00f      	b.n	800774e <__swhatbuf_r+0x42>
 800772e:	466a      	mov	r2, sp
 8007730:	f000 fb22 	bl	8007d78 <_fstat_r>
 8007734:	2800      	cmp	r0, #0
 8007736:	dbf2      	blt.n	800771e <__swhatbuf_r+0x12>
 8007738:	22f0      	movs	r2, #240	; 0xf0
 800773a:	9b01      	ldr	r3, [sp, #4]
 800773c:	0212      	lsls	r2, r2, #8
 800773e:	4013      	ands	r3, r2
 8007740:	4a05      	ldr	r2, [pc, #20]	; (8007758 <__swhatbuf_r+0x4c>)
 8007742:	189b      	adds	r3, r3, r2
 8007744:	425a      	negs	r2, r3
 8007746:	4153      	adcs	r3, r2
 8007748:	602b      	str	r3, [r5, #0]
 800774a:	e7ed      	b.n	8007728 <__swhatbuf_r+0x1c>
 800774c:	2340      	movs	r3, #64	; 0x40
 800774e:	2000      	movs	r0, #0
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	b016      	add	sp, #88	; 0x58
 8007754:	bd70      	pop	{r4, r5, r6, pc}
 8007756:	46c0      	nop			; (mov r8, r8)
 8007758:	ffffe000 	.word	0xffffe000

0800775c <__smakebuf_r>:
 800775c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800775e:	2602      	movs	r6, #2
 8007760:	898b      	ldrh	r3, [r1, #12]
 8007762:	0005      	movs	r5, r0
 8007764:	000c      	movs	r4, r1
 8007766:	4233      	tst	r3, r6
 8007768:	d006      	beq.n	8007778 <__smakebuf_r+0x1c>
 800776a:	0023      	movs	r3, r4
 800776c:	3347      	adds	r3, #71	; 0x47
 800776e:	6023      	str	r3, [r4, #0]
 8007770:	6123      	str	r3, [r4, #16]
 8007772:	2301      	movs	r3, #1
 8007774:	6163      	str	r3, [r4, #20]
 8007776:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007778:	ab01      	add	r3, sp, #4
 800777a:	466a      	mov	r2, sp
 800777c:	f7ff ffc6 	bl	800770c <__swhatbuf_r>
 8007780:	9900      	ldr	r1, [sp, #0]
 8007782:	0007      	movs	r7, r0
 8007784:	0028      	movs	r0, r5
 8007786:	f7ff fd7b 	bl	8007280 <_malloc_r>
 800778a:	2800      	cmp	r0, #0
 800778c:	d108      	bne.n	80077a0 <__smakebuf_r+0x44>
 800778e:	220c      	movs	r2, #12
 8007790:	5ea3      	ldrsh	r3, [r4, r2]
 8007792:	059a      	lsls	r2, r3, #22
 8007794:	d4ef      	bmi.n	8007776 <__smakebuf_r+0x1a>
 8007796:	2203      	movs	r2, #3
 8007798:	4393      	bics	r3, r2
 800779a:	431e      	orrs	r6, r3
 800779c:	81a6      	strh	r6, [r4, #12]
 800779e:	e7e4      	b.n	800776a <__smakebuf_r+0xe>
 80077a0:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <__smakebuf_r+0x84>)
 80077a2:	62ab      	str	r3, [r5, #40]	; 0x28
 80077a4:	2380      	movs	r3, #128	; 0x80
 80077a6:	89a2      	ldrh	r2, [r4, #12]
 80077a8:	6020      	str	r0, [r4, #0]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	81a3      	strh	r3, [r4, #12]
 80077ae:	9b00      	ldr	r3, [sp, #0]
 80077b0:	6120      	str	r0, [r4, #16]
 80077b2:	6163      	str	r3, [r4, #20]
 80077b4:	9b01      	ldr	r3, [sp, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00d      	beq.n	80077d6 <__smakebuf_r+0x7a>
 80077ba:	230e      	movs	r3, #14
 80077bc:	5ee1      	ldrsh	r1, [r4, r3]
 80077be:	0028      	movs	r0, r5
 80077c0:	f000 faec 	bl	8007d9c <_isatty_r>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d006      	beq.n	80077d6 <__smakebuf_r+0x7a>
 80077c8:	2203      	movs	r2, #3
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	4393      	bics	r3, r2
 80077ce:	001a      	movs	r2, r3
 80077d0:	2301      	movs	r3, #1
 80077d2:	4313      	orrs	r3, r2
 80077d4:	81a3      	strh	r3, [r4, #12]
 80077d6:	89a0      	ldrh	r0, [r4, #12]
 80077d8:	4338      	orrs	r0, r7
 80077da:	81a0      	strh	r0, [r4, #12]
 80077dc:	e7cb      	b.n	8007776 <__smakebuf_r+0x1a>
 80077de:	46c0      	nop			; (mov r8, r8)
 80077e0:	08007031 	.word	0x08007031

080077e4 <__malloc_lock>:
 80077e4:	4770      	bx	lr

080077e6 <__malloc_unlock>:
 80077e6:	4770      	bx	lr

080077e8 <__sfputc_r>:
 80077e8:	6893      	ldr	r3, [r2, #8]
 80077ea:	b510      	push	{r4, lr}
 80077ec:	3b01      	subs	r3, #1
 80077ee:	6093      	str	r3, [r2, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	da04      	bge.n	80077fe <__sfputc_r+0x16>
 80077f4:	6994      	ldr	r4, [r2, #24]
 80077f6:	42a3      	cmp	r3, r4
 80077f8:	db07      	blt.n	800780a <__sfputc_r+0x22>
 80077fa:	290a      	cmp	r1, #10
 80077fc:	d005      	beq.n	800780a <__sfputc_r+0x22>
 80077fe:	6813      	ldr	r3, [r2, #0]
 8007800:	1c58      	adds	r0, r3, #1
 8007802:	6010      	str	r0, [r2, #0]
 8007804:	7019      	strb	r1, [r3, #0]
 8007806:	0008      	movs	r0, r1
 8007808:	bd10      	pop	{r4, pc}
 800780a:	f7ff fe79 	bl	8007500 <__swbuf_r>
 800780e:	0001      	movs	r1, r0
 8007810:	e7f9      	b.n	8007806 <__sfputc_r+0x1e>

08007812 <__sfputs_r>:
 8007812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007814:	0006      	movs	r6, r0
 8007816:	000f      	movs	r7, r1
 8007818:	0014      	movs	r4, r2
 800781a:	18d5      	adds	r5, r2, r3
 800781c:	42ac      	cmp	r4, r5
 800781e:	d101      	bne.n	8007824 <__sfputs_r+0x12>
 8007820:	2000      	movs	r0, #0
 8007822:	e007      	b.n	8007834 <__sfputs_r+0x22>
 8007824:	7821      	ldrb	r1, [r4, #0]
 8007826:	003a      	movs	r2, r7
 8007828:	0030      	movs	r0, r6
 800782a:	f7ff ffdd 	bl	80077e8 <__sfputc_r>
 800782e:	3401      	adds	r4, #1
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d1f3      	bne.n	800781c <__sfputs_r+0xa>
 8007834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007838 <_vfiprintf_r>:
 8007838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800783a:	b0a1      	sub	sp, #132	; 0x84
 800783c:	9003      	str	r0, [sp, #12]
 800783e:	000f      	movs	r7, r1
 8007840:	0016      	movs	r6, r2
 8007842:	001d      	movs	r5, r3
 8007844:	2800      	cmp	r0, #0
 8007846:	d005      	beq.n	8007854 <_vfiprintf_r+0x1c>
 8007848:	6983      	ldr	r3, [r0, #24]
 800784a:	9305      	str	r3, [sp, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <_vfiprintf_r+0x1c>
 8007850:	f7ff fc0c 	bl	800706c <__sinit>
 8007854:	4b7b      	ldr	r3, [pc, #492]	; (8007a44 <_vfiprintf_r+0x20c>)
 8007856:	429f      	cmp	r7, r3
 8007858:	d15c      	bne.n	8007914 <_vfiprintf_r+0xdc>
 800785a:	9b03      	ldr	r3, [sp, #12]
 800785c:	685f      	ldr	r7, [r3, #4]
 800785e:	89bb      	ldrh	r3, [r7, #12]
 8007860:	071b      	lsls	r3, r3, #28
 8007862:	d563      	bpl.n	800792c <_vfiprintf_r+0xf4>
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d060      	beq.n	800792c <_vfiprintf_r+0xf4>
 800786a:	2300      	movs	r3, #0
 800786c:	ac08      	add	r4, sp, #32
 800786e:	6163      	str	r3, [r4, #20]
 8007870:	3320      	adds	r3, #32
 8007872:	7663      	strb	r3, [r4, #25]
 8007874:	3310      	adds	r3, #16
 8007876:	76a3      	strb	r3, [r4, #26]
 8007878:	9507      	str	r5, [sp, #28]
 800787a:	0035      	movs	r5, r6
 800787c:	782b      	ldrb	r3, [r5, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <_vfiprintf_r+0x4e>
 8007882:	2b25      	cmp	r3, #37	; 0x25
 8007884:	d15c      	bne.n	8007940 <_vfiprintf_r+0x108>
 8007886:	1bab      	subs	r3, r5, r6
 8007888:	9305      	str	r3, [sp, #20]
 800788a:	d00c      	beq.n	80078a6 <_vfiprintf_r+0x6e>
 800788c:	0032      	movs	r2, r6
 800788e:	0039      	movs	r1, r7
 8007890:	9803      	ldr	r0, [sp, #12]
 8007892:	f7ff ffbe 	bl	8007812 <__sfputs_r>
 8007896:	1c43      	adds	r3, r0, #1
 8007898:	d100      	bne.n	800789c <_vfiprintf_r+0x64>
 800789a:	e0c4      	b.n	8007a26 <_vfiprintf_r+0x1ee>
 800789c:	6962      	ldr	r2, [r4, #20]
 800789e:	9b05      	ldr	r3, [sp, #20]
 80078a0:	4694      	mov	ip, r2
 80078a2:	4463      	add	r3, ip
 80078a4:	6163      	str	r3, [r4, #20]
 80078a6:	782b      	ldrb	r3, [r5, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d100      	bne.n	80078ae <_vfiprintf_r+0x76>
 80078ac:	e0bb      	b.n	8007a26 <_vfiprintf_r+0x1ee>
 80078ae:	2201      	movs	r2, #1
 80078b0:	2300      	movs	r3, #0
 80078b2:	4252      	negs	r2, r2
 80078b4:	6062      	str	r2, [r4, #4]
 80078b6:	a904      	add	r1, sp, #16
 80078b8:	3254      	adds	r2, #84	; 0x54
 80078ba:	1852      	adds	r2, r2, r1
 80078bc:	1c6e      	adds	r6, r5, #1
 80078be:	6023      	str	r3, [r4, #0]
 80078c0:	60e3      	str	r3, [r4, #12]
 80078c2:	60a3      	str	r3, [r4, #8]
 80078c4:	7013      	strb	r3, [r2, #0]
 80078c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80078c8:	7831      	ldrb	r1, [r6, #0]
 80078ca:	2205      	movs	r2, #5
 80078cc:	485e      	ldr	r0, [pc, #376]	; (8007a48 <_vfiprintf_r+0x210>)
 80078ce:	f000 fa77 	bl	8007dc0 <memchr>
 80078d2:	1c75      	adds	r5, r6, #1
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d135      	bne.n	8007944 <_vfiprintf_r+0x10c>
 80078d8:	6822      	ldr	r2, [r4, #0]
 80078da:	06d3      	lsls	r3, r2, #27
 80078dc:	d504      	bpl.n	80078e8 <_vfiprintf_r+0xb0>
 80078de:	2353      	movs	r3, #83	; 0x53
 80078e0:	a904      	add	r1, sp, #16
 80078e2:	185b      	adds	r3, r3, r1
 80078e4:	2120      	movs	r1, #32
 80078e6:	7019      	strb	r1, [r3, #0]
 80078e8:	0713      	lsls	r3, r2, #28
 80078ea:	d504      	bpl.n	80078f6 <_vfiprintf_r+0xbe>
 80078ec:	2353      	movs	r3, #83	; 0x53
 80078ee:	a904      	add	r1, sp, #16
 80078f0:	185b      	adds	r3, r3, r1
 80078f2:	212b      	movs	r1, #43	; 0x2b
 80078f4:	7019      	strb	r1, [r3, #0]
 80078f6:	7833      	ldrb	r3, [r6, #0]
 80078f8:	2b2a      	cmp	r3, #42	; 0x2a
 80078fa:	d02c      	beq.n	8007956 <_vfiprintf_r+0x11e>
 80078fc:	0035      	movs	r5, r6
 80078fe:	2100      	movs	r1, #0
 8007900:	200a      	movs	r0, #10
 8007902:	68e3      	ldr	r3, [r4, #12]
 8007904:	782a      	ldrb	r2, [r5, #0]
 8007906:	1c6e      	adds	r6, r5, #1
 8007908:	3a30      	subs	r2, #48	; 0x30
 800790a:	2a09      	cmp	r2, #9
 800790c:	d964      	bls.n	80079d8 <_vfiprintf_r+0x1a0>
 800790e:	2900      	cmp	r1, #0
 8007910:	d02e      	beq.n	8007970 <_vfiprintf_r+0x138>
 8007912:	e026      	b.n	8007962 <_vfiprintf_r+0x12a>
 8007914:	4b4d      	ldr	r3, [pc, #308]	; (8007a4c <_vfiprintf_r+0x214>)
 8007916:	429f      	cmp	r7, r3
 8007918:	d102      	bne.n	8007920 <_vfiprintf_r+0xe8>
 800791a:	9b03      	ldr	r3, [sp, #12]
 800791c:	689f      	ldr	r7, [r3, #8]
 800791e:	e79e      	b.n	800785e <_vfiprintf_r+0x26>
 8007920:	4b4b      	ldr	r3, [pc, #300]	; (8007a50 <_vfiprintf_r+0x218>)
 8007922:	429f      	cmp	r7, r3
 8007924:	d19b      	bne.n	800785e <_vfiprintf_r+0x26>
 8007926:	9b03      	ldr	r3, [sp, #12]
 8007928:	68df      	ldr	r7, [r3, #12]
 800792a:	e798      	b.n	800785e <_vfiprintf_r+0x26>
 800792c:	0039      	movs	r1, r7
 800792e:	9803      	ldr	r0, [sp, #12]
 8007930:	f7ff fe50 	bl	80075d4 <__swsetup_r>
 8007934:	2800      	cmp	r0, #0
 8007936:	d098      	beq.n	800786a <_vfiprintf_r+0x32>
 8007938:	2001      	movs	r0, #1
 800793a:	4240      	negs	r0, r0
 800793c:	b021      	add	sp, #132	; 0x84
 800793e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007940:	3501      	adds	r5, #1
 8007942:	e79b      	b.n	800787c <_vfiprintf_r+0x44>
 8007944:	4b40      	ldr	r3, [pc, #256]	; (8007a48 <_vfiprintf_r+0x210>)
 8007946:	6822      	ldr	r2, [r4, #0]
 8007948:	1ac0      	subs	r0, r0, r3
 800794a:	2301      	movs	r3, #1
 800794c:	4083      	lsls	r3, r0
 800794e:	4313      	orrs	r3, r2
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	002e      	movs	r6, r5
 8007954:	e7b8      	b.n	80078c8 <_vfiprintf_r+0x90>
 8007956:	9b07      	ldr	r3, [sp, #28]
 8007958:	1d19      	adds	r1, r3, #4
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	9107      	str	r1, [sp, #28]
 800795e:	2b00      	cmp	r3, #0
 8007960:	db01      	blt.n	8007966 <_vfiprintf_r+0x12e>
 8007962:	930b      	str	r3, [sp, #44]	; 0x2c
 8007964:	e004      	b.n	8007970 <_vfiprintf_r+0x138>
 8007966:	425b      	negs	r3, r3
 8007968:	60e3      	str	r3, [r4, #12]
 800796a:	2302      	movs	r3, #2
 800796c:	4313      	orrs	r3, r2
 800796e:	6023      	str	r3, [r4, #0]
 8007970:	782b      	ldrb	r3, [r5, #0]
 8007972:	2b2e      	cmp	r3, #46	; 0x2e
 8007974:	d10a      	bne.n	800798c <_vfiprintf_r+0x154>
 8007976:	786b      	ldrb	r3, [r5, #1]
 8007978:	2b2a      	cmp	r3, #42	; 0x2a
 800797a:	d135      	bne.n	80079e8 <_vfiprintf_r+0x1b0>
 800797c:	9b07      	ldr	r3, [sp, #28]
 800797e:	3502      	adds	r5, #2
 8007980:	1d1a      	adds	r2, r3, #4
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	9207      	str	r2, [sp, #28]
 8007986:	2b00      	cmp	r3, #0
 8007988:	db2b      	blt.n	80079e2 <_vfiprintf_r+0x1aa>
 800798a:	9309      	str	r3, [sp, #36]	; 0x24
 800798c:	4e31      	ldr	r6, [pc, #196]	; (8007a54 <_vfiprintf_r+0x21c>)
 800798e:	7829      	ldrb	r1, [r5, #0]
 8007990:	2203      	movs	r2, #3
 8007992:	0030      	movs	r0, r6
 8007994:	f000 fa14 	bl	8007dc0 <memchr>
 8007998:	2800      	cmp	r0, #0
 800799a:	d006      	beq.n	80079aa <_vfiprintf_r+0x172>
 800799c:	2340      	movs	r3, #64	; 0x40
 800799e:	1b80      	subs	r0, r0, r6
 80079a0:	4083      	lsls	r3, r0
 80079a2:	6822      	ldr	r2, [r4, #0]
 80079a4:	3501      	adds	r5, #1
 80079a6:	4313      	orrs	r3, r2
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	7829      	ldrb	r1, [r5, #0]
 80079ac:	2206      	movs	r2, #6
 80079ae:	482a      	ldr	r0, [pc, #168]	; (8007a58 <_vfiprintf_r+0x220>)
 80079b0:	1c6e      	adds	r6, r5, #1
 80079b2:	7621      	strb	r1, [r4, #24]
 80079b4:	f000 fa04 	bl	8007dc0 <memchr>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d03a      	beq.n	8007a32 <_vfiprintf_r+0x1fa>
 80079bc:	4b27      	ldr	r3, [pc, #156]	; (8007a5c <_vfiprintf_r+0x224>)
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d125      	bne.n	8007a0e <_vfiprintf_r+0x1d6>
 80079c2:	2207      	movs	r2, #7
 80079c4:	9b07      	ldr	r3, [sp, #28]
 80079c6:	3307      	adds	r3, #7
 80079c8:	4393      	bics	r3, r2
 80079ca:	3308      	adds	r3, #8
 80079cc:	9307      	str	r3, [sp, #28]
 80079ce:	6963      	ldr	r3, [r4, #20]
 80079d0:	9a04      	ldr	r2, [sp, #16]
 80079d2:	189b      	adds	r3, r3, r2
 80079d4:	6163      	str	r3, [r4, #20]
 80079d6:	e750      	b.n	800787a <_vfiprintf_r+0x42>
 80079d8:	4343      	muls	r3, r0
 80079da:	2101      	movs	r1, #1
 80079dc:	189b      	adds	r3, r3, r2
 80079de:	0035      	movs	r5, r6
 80079e0:	e790      	b.n	8007904 <_vfiprintf_r+0xcc>
 80079e2:	2301      	movs	r3, #1
 80079e4:	425b      	negs	r3, r3
 80079e6:	e7d0      	b.n	800798a <_vfiprintf_r+0x152>
 80079e8:	2300      	movs	r3, #0
 80079ea:	200a      	movs	r0, #10
 80079ec:	001a      	movs	r2, r3
 80079ee:	3501      	adds	r5, #1
 80079f0:	6063      	str	r3, [r4, #4]
 80079f2:	7829      	ldrb	r1, [r5, #0]
 80079f4:	1c6e      	adds	r6, r5, #1
 80079f6:	3930      	subs	r1, #48	; 0x30
 80079f8:	2909      	cmp	r1, #9
 80079fa:	d903      	bls.n	8007a04 <_vfiprintf_r+0x1cc>
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d0c5      	beq.n	800798c <_vfiprintf_r+0x154>
 8007a00:	9209      	str	r2, [sp, #36]	; 0x24
 8007a02:	e7c3      	b.n	800798c <_vfiprintf_r+0x154>
 8007a04:	4342      	muls	r2, r0
 8007a06:	2301      	movs	r3, #1
 8007a08:	1852      	adds	r2, r2, r1
 8007a0a:	0035      	movs	r5, r6
 8007a0c:	e7f1      	b.n	80079f2 <_vfiprintf_r+0x1ba>
 8007a0e:	ab07      	add	r3, sp, #28
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	003a      	movs	r2, r7
 8007a14:	4b12      	ldr	r3, [pc, #72]	; (8007a60 <_vfiprintf_r+0x228>)
 8007a16:	0021      	movs	r1, r4
 8007a18:	9803      	ldr	r0, [sp, #12]
 8007a1a:	e000      	b.n	8007a1e <_vfiprintf_r+0x1e6>
 8007a1c:	bf00      	nop
 8007a1e:	9004      	str	r0, [sp, #16]
 8007a20:	9b04      	ldr	r3, [sp, #16]
 8007a22:	3301      	adds	r3, #1
 8007a24:	d1d3      	bne.n	80079ce <_vfiprintf_r+0x196>
 8007a26:	89bb      	ldrh	r3, [r7, #12]
 8007a28:	065b      	lsls	r3, r3, #25
 8007a2a:	d500      	bpl.n	8007a2e <_vfiprintf_r+0x1f6>
 8007a2c:	e784      	b.n	8007938 <_vfiprintf_r+0x100>
 8007a2e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007a30:	e784      	b.n	800793c <_vfiprintf_r+0x104>
 8007a32:	ab07      	add	r3, sp, #28
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	003a      	movs	r2, r7
 8007a38:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <_vfiprintf_r+0x228>)
 8007a3a:	0021      	movs	r1, r4
 8007a3c:	9803      	ldr	r0, [sp, #12]
 8007a3e:	f000 f87f 	bl	8007b40 <_printf_i>
 8007a42:	e7ec      	b.n	8007a1e <_vfiprintf_r+0x1e6>
 8007a44:	08008164 	.word	0x08008164
 8007a48:	080081a8 	.word	0x080081a8
 8007a4c:	08008184 	.word	0x08008184
 8007a50:	08008144 	.word	0x08008144
 8007a54:	080081ae 	.word	0x080081ae
 8007a58:	080081b2 	.word	0x080081b2
 8007a5c:	00000000 	.word	0x00000000
 8007a60:	08007813 	.word	0x08007813

08007a64 <_printf_common>:
 8007a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a66:	0015      	movs	r5, r2
 8007a68:	9301      	str	r3, [sp, #4]
 8007a6a:	688a      	ldr	r2, [r1, #8]
 8007a6c:	690b      	ldr	r3, [r1, #16]
 8007a6e:	9000      	str	r0, [sp, #0]
 8007a70:	000c      	movs	r4, r1
 8007a72:	4293      	cmp	r3, r2
 8007a74:	da00      	bge.n	8007a78 <_printf_common+0x14>
 8007a76:	0013      	movs	r3, r2
 8007a78:	0022      	movs	r2, r4
 8007a7a:	602b      	str	r3, [r5, #0]
 8007a7c:	3243      	adds	r2, #67	; 0x43
 8007a7e:	7812      	ldrb	r2, [r2, #0]
 8007a80:	2a00      	cmp	r2, #0
 8007a82:	d001      	beq.n	8007a88 <_printf_common+0x24>
 8007a84:	3301      	adds	r3, #1
 8007a86:	602b      	str	r3, [r5, #0]
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	069b      	lsls	r3, r3, #26
 8007a8c:	d502      	bpl.n	8007a94 <_printf_common+0x30>
 8007a8e:	682b      	ldr	r3, [r5, #0]
 8007a90:	3302      	adds	r3, #2
 8007a92:	602b      	str	r3, [r5, #0]
 8007a94:	2706      	movs	r7, #6
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	401f      	ands	r7, r3
 8007a9a:	d027      	beq.n	8007aec <_printf_common+0x88>
 8007a9c:	0023      	movs	r3, r4
 8007a9e:	3343      	adds	r3, #67	; 0x43
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	1e5a      	subs	r2, r3, #1
 8007aa4:	4193      	sbcs	r3, r2
 8007aa6:	6822      	ldr	r2, [r4, #0]
 8007aa8:	0692      	lsls	r2, r2, #26
 8007aaa:	d430      	bmi.n	8007b0e <_printf_common+0xaa>
 8007aac:	0022      	movs	r2, r4
 8007aae:	9901      	ldr	r1, [sp, #4]
 8007ab0:	3243      	adds	r2, #67	; 0x43
 8007ab2:	9800      	ldr	r0, [sp, #0]
 8007ab4:	9e08      	ldr	r6, [sp, #32]
 8007ab6:	47b0      	blx	r6
 8007ab8:	1c43      	adds	r3, r0, #1
 8007aba:	d025      	beq.n	8007b08 <_printf_common+0xa4>
 8007abc:	2306      	movs	r3, #6
 8007abe:	6820      	ldr	r0, [r4, #0]
 8007ac0:	682a      	ldr	r2, [r5, #0]
 8007ac2:	68e1      	ldr	r1, [r4, #12]
 8007ac4:	4003      	ands	r3, r0
 8007ac6:	2500      	movs	r5, #0
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	d103      	bne.n	8007ad4 <_printf_common+0x70>
 8007acc:	1a8d      	subs	r5, r1, r2
 8007ace:	43eb      	mvns	r3, r5
 8007ad0:	17db      	asrs	r3, r3, #31
 8007ad2:	401d      	ands	r5, r3
 8007ad4:	68a3      	ldr	r3, [r4, #8]
 8007ad6:	6922      	ldr	r2, [r4, #16]
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	dd01      	ble.n	8007ae0 <_printf_common+0x7c>
 8007adc:	1a9b      	subs	r3, r3, r2
 8007ade:	18ed      	adds	r5, r5, r3
 8007ae0:	2700      	movs	r7, #0
 8007ae2:	42bd      	cmp	r5, r7
 8007ae4:	d120      	bne.n	8007b28 <_printf_common+0xc4>
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	e010      	b.n	8007b0c <_printf_common+0xa8>
 8007aea:	3701      	adds	r7, #1
 8007aec:	68e3      	ldr	r3, [r4, #12]
 8007aee:	682a      	ldr	r2, [r5, #0]
 8007af0:	1a9b      	subs	r3, r3, r2
 8007af2:	42bb      	cmp	r3, r7
 8007af4:	ddd2      	ble.n	8007a9c <_printf_common+0x38>
 8007af6:	0022      	movs	r2, r4
 8007af8:	2301      	movs	r3, #1
 8007afa:	3219      	adds	r2, #25
 8007afc:	9901      	ldr	r1, [sp, #4]
 8007afe:	9800      	ldr	r0, [sp, #0]
 8007b00:	9e08      	ldr	r6, [sp, #32]
 8007b02:	47b0      	blx	r6
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	d1f0      	bne.n	8007aea <_printf_common+0x86>
 8007b08:	2001      	movs	r0, #1
 8007b0a:	4240      	negs	r0, r0
 8007b0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b0e:	2030      	movs	r0, #48	; 0x30
 8007b10:	18e1      	adds	r1, r4, r3
 8007b12:	3143      	adds	r1, #67	; 0x43
 8007b14:	7008      	strb	r0, [r1, #0]
 8007b16:	0021      	movs	r1, r4
 8007b18:	1c5a      	adds	r2, r3, #1
 8007b1a:	3145      	adds	r1, #69	; 0x45
 8007b1c:	7809      	ldrb	r1, [r1, #0]
 8007b1e:	18a2      	adds	r2, r4, r2
 8007b20:	3243      	adds	r2, #67	; 0x43
 8007b22:	3302      	adds	r3, #2
 8007b24:	7011      	strb	r1, [r2, #0]
 8007b26:	e7c1      	b.n	8007aac <_printf_common+0x48>
 8007b28:	0022      	movs	r2, r4
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	321a      	adds	r2, #26
 8007b2e:	9901      	ldr	r1, [sp, #4]
 8007b30:	9800      	ldr	r0, [sp, #0]
 8007b32:	9e08      	ldr	r6, [sp, #32]
 8007b34:	47b0      	blx	r6
 8007b36:	1c43      	adds	r3, r0, #1
 8007b38:	d0e6      	beq.n	8007b08 <_printf_common+0xa4>
 8007b3a:	3701      	adds	r7, #1
 8007b3c:	e7d1      	b.n	8007ae2 <_printf_common+0x7e>
	...

08007b40 <_printf_i>:
 8007b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b42:	b089      	sub	sp, #36	; 0x24
 8007b44:	9204      	str	r2, [sp, #16]
 8007b46:	000a      	movs	r2, r1
 8007b48:	3243      	adds	r2, #67	; 0x43
 8007b4a:	9305      	str	r3, [sp, #20]
 8007b4c:	9003      	str	r0, [sp, #12]
 8007b4e:	9202      	str	r2, [sp, #8]
 8007b50:	7e0a      	ldrb	r2, [r1, #24]
 8007b52:	000c      	movs	r4, r1
 8007b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b56:	2a6e      	cmp	r2, #110	; 0x6e
 8007b58:	d100      	bne.n	8007b5c <_printf_i+0x1c>
 8007b5a:	e086      	b.n	8007c6a <_printf_i+0x12a>
 8007b5c:	d81f      	bhi.n	8007b9e <_printf_i+0x5e>
 8007b5e:	2a63      	cmp	r2, #99	; 0x63
 8007b60:	d033      	beq.n	8007bca <_printf_i+0x8a>
 8007b62:	d808      	bhi.n	8007b76 <_printf_i+0x36>
 8007b64:	2a00      	cmp	r2, #0
 8007b66:	d100      	bne.n	8007b6a <_printf_i+0x2a>
 8007b68:	e08c      	b.n	8007c84 <_printf_i+0x144>
 8007b6a:	2a58      	cmp	r2, #88	; 0x58
 8007b6c:	d04d      	beq.n	8007c0a <_printf_i+0xca>
 8007b6e:	0025      	movs	r5, r4
 8007b70:	3542      	adds	r5, #66	; 0x42
 8007b72:	702a      	strb	r2, [r5, #0]
 8007b74:	e030      	b.n	8007bd8 <_printf_i+0x98>
 8007b76:	2a64      	cmp	r2, #100	; 0x64
 8007b78:	d001      	beq.n	8007b7e <_printf_i+0x3e>
 8007b7a:	2a69      	cmp	r2, #105	; 0x69
 8007b7c:	d1f7      	bne.n	8007b6e <_printf_i+0x2e>
 8007b7e:	6819      	ldr	r1, [r3, #0]
 8007b80:	6825      	ldr	r5, [r4, #0]
 8007b82:	1d0a      	adds	r2, r1, #4
 8007b84:	0628      	lsls	r0, r5, #24
 8007b86:	d529      	bpl.n	8007bdc <_printf_i+0x9c>
 8007b88:	6808      	ldr	r0, [r1, #0]
 8007b8a:	601a      	str	r2, [r3, #0]
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	da03      	bge.n	8007b98 <_printf_i+0x58>
 8007b90:	232d      	movs	r3, #45	; 0x2d
 8007b92:	9a02      	ldr	r2, [sp, #8]
 8007b94:	4240      	negs	r0, r0
 8007b96:	7013      	strb	r3, [r2, #0]
 8007b98:	4e6b      	ldr	r6, [pc, #428]	; (8007d48 <_printf_i+0x208>)
 8007b9a:	270a      	movs	r7, #10
 8007b9c:	e04f      	b.n	8007c3e <_printf_i+0xfe>
 8007b9e:	2a73      	cmp	r2, #115	; 0x73
 8007ba0:	d074      	beq.n	8007c8c <_printf_i+0x14c>
 8007ba2:	d808      	bhi.n	8007bb6 <_printf_i+0x76>
 8007ba4:	2a6f      	cmp	r2, #111	; 0x6f
 8007ba6:	d01f      	beq.n	8007be8 <_printf_i+0xa8>
 8007ba8:	2a70      	cmp	r2, #112	; 0x70
 8007baa:	d1e0      	bne.n	8007b6e <_printf_i+0x2e>
 8007bac:	2220      	movs	r2, #32
 8007bae:	6809      	ldr	r1, [r1, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	6022      	str	r2, [r4, #0]
 8007bb4:	e003      	b.n	8007bbe <_printf_i+0x7e>
 8007bb6:	2a75      	cmp	r2, #117	; 0x75
 8007bb8:	d016      	beq.n	8007be8 <_printf_i+0xa8>
 8007bba:	2a78      	cmp	r2, #120	; 0x78
 8007bbc:	d1d7      	bne.n	8007b6e <_printf_i+0x2e>
 8007bbe:	0022      	movs	r2, r4
 8007bc0:	2178      	movs	r1, #120	; 0x78
 8007bc2:	3245      	adds	r2, #69	; 0x45
 8007bc4:	7011      	strb	r1, [r2, #0]
 8007bc6:	4e61      	ldr	r6, [pc, #388]	; (8007d4c <_printf_i+0x20c>)
 8007bc8:	e022      	b.n	8007c10 <_printf_i+0xd0>
 8007bca:	0025      	movs	r5, r4
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	3542      	adds	r5, #66	; 0x42
 8007bd0:	1d11      	adds	r1, r2, #4
 8007bd2:	6019      	str	r1, [r3, #0]
 8007bd4:	6813      	ldr	r3, [r2, #0]
 8007bd6:	702b      	strb	r3, [r5, #0]
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e065      	b.n	8007ca8 <_printf_i+0x168>
 8007bdc:	6808      	ldr	r0, [r1, #0]
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	0669      	lsls	r1, r5, #25
 8007be2:	d5d3      	bpl.n	8007b8c <_printf_i+0x4c>
 8007be4:	b200      	sxth	r0, r0
 8007be6:	e7d1      	b.n	8007b8c <_printf_i+0x4c>
 8007be8:	6819      	ldr	r1, [r3, #0]
 8007bea:	6825      	ldr	r5, [r4, #0]
 8007bec:	1d08      	adds	r0, r1, #4
 8007bee:	6018      	str	r0, [r3, #0]
 8007bf0:	6808      	ldr	r0, [r1, #0]
 8007bf2:	062e      	lsls	r6, r5, #24
 8007bf4:	d505      	bpl.n	8007c02 <_printf_i+0xc2>
 8007bf6:	4e54      	ldr	r6, [pc, #336]	; (8007d48 <_printf_i+0x208>)
 8007bf8:	2708      	movs	r7, #8
 8007bfa:	2a6f      	cmp	r2, #111	; 0x6f
 8007bfc:	d01b      	beq.n	8007c36 <_printf_i+0xf6>
 8007bfe:	270a      	movs	r7, #10
 8007c00:	e019      	b.n	8007c36 <_printf_i+0xf6>
 8007c02:	066d      	lsls	r5, r5, #25
 8007c04:	d5f7      	bpl.n	8007bf6 <_printf_i+0xb6>
 8007c06:	b280      	uxth	r0, r0
 8007c08:	e7f5      	b.n	8007bf6 <_printf_i+0xb6>
 8007c0a:	3145      	adds	r1, #69	; 0x45
 8007c0c:	4e4e      	ldr	r6, [pc, #312]	; (8007d48 <_printf_i+0x208>)
 8007c0e:	700a      	strb	r2, [r1, #0]
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	6822      	ldr	r2, [r4, #0]
 8007c14:	1d01      	adds	r1, r0, #4
 8007c16:	6800      	ldr	r0, [r0, #0]
 8007c18:	6019      	str	r1, [r3, #0]
 8007c1a:	0615      	lsls	r5, r2, #24
 8007c1c:	d521      	bpl.n	8007c62 <_printf_i+0x122>
 8007c1e:	07d3      	lsls	r3, r2, #31
 8007c20:	d502      	bpl.n	8007c28 <_printf_i+0xe8>
 8007c22:	2320      	movs	r3, #32
 8007c24:	431a      	orrs	r2, r3
 8007c26:	6022      	str	r2, [r4, #0]
 8007c28:	2710      	movs	r7, #16
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	d103      	bne.n	8007c36 <_printf_i+0xf6>
 8007c2e:	2320      	movs	r3, #32
 8007c30:	6822      	ldr	r2, [r4, #0]
 8007c32:	439a      	bics	r2, r3
 8007c34:	6022      	str	r2, [r4, #0]
 8007c36:	0023      	movs	r3, r4
 8007c38:	2200      	movs	r2, #0
 8007c3a:	3343      	adds	r3, #67	; 0x43
 8007c3c:	701a      	strb	r2, [r3, #0]
 8007c3e:	6863      	ldr	r3, [r4, #4]
 8007c40:	60a3      	str	r3, [r4, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	db58      	blt.n	8007cf8 <_printf_i+0x1b8>
 8007c46:	2204      	movs	r2, #4
 8007c48:	6821      	ldr	r1, [r4, #0]
 8007c4a:	4391      	bics	r1, r2
 8007c4c:	6021      	str	r1, [r4, #0]
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d154      	bne.n	8007cfc <_printf_i+0x1bc>
 8007c52:	9d02      	ldr	r5, [sp, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d05a      	beq.n	8007d0e <_printf_i+0x1ce>
 8007c58:	0025      	movs	r5, r4
 8007c5a:	7833      	ldrb	r3, [r6, #0]
 8007c5c:	3542      	adds	r5, #66	; 0x42
 8007c5e:	702b      	strb	r3, [r5, #0]
 8007c60:	e055      	b.n	8007d0e <_printf_i+0x1ce>
 8007c62:	0655      	lsls	r5, r2, #25
 8007c64:	d5db      	bpl.n	8007c1e <_printf_i+0xde>
 8007c66:	b280      	uxth	r0, r0
 8007c68:	e7d9      	b.n	8007c1e <_printf_i+0xde>
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	680d      	ldr	r5, [r1, #0]
 8007c6e:	1d10      	adds	r0, r2, #4
 8007c70:	6949      	ldr	r1, [r1, #20]
 8007c72:	6018      	str	r0, [r3, #0]
 8007c74:	6813      	ldr	r3, [r2, #0]
 8007c76:	062e      	lsls	r6, r5, #24
 8007c78:	d501      	bpl.n	8007c7e <_printf_i+0x13e>
 8007c7a:	6019      	str	r1, [r3, #0]
 8007c7c:	e002      	b.n	8007c84 <_printf_i+0x144>
 8007c7e:	066d      	lsls	r5, r5, #25
 8007c80:	d5fb      	bpl.n	8007c7a <_printf_i+0x13a>
 8007c82:	8019      	strh	r1, [r3, #0]
 8007c84:	2300      	movs	r3, #0
 8007c86:	9d02      	ldr	r5, [sp, #8]
 8007c88:	6123      	str	r3, [r4, #16]
 8007c8a:	e04f      	b.n	8007d2c <_printf_i+0x1ec>
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	1d11      	adds	r1, r2, #4
 8007c90:	6019      	str	r1, [r3, #0]
 8007c92:	6815      	ldr	r5, [r2, #0]
 8007c94:	2100      	movs	r1, #0
 8007c96:	6862      	ldr	r2, [r4, #4]
 8007c98:	0028      	movs	r0, r5
 8007c9a:	f000 f891 	bl	8007dc0 <memchr>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d001      	beq.n	8007ca6 <_printf_i+0x166>
 8007ca2:	1b40      	subs	r0, r0, r5
 8007ca4:	6060      	str	r0, [r4, #4]
 8007ca6:	6863      	ldr	r3, [r4, #4]
 8007ca8:	6123      	str	r3, [r4, #16]
 8007caa:	2300      	movs	r3, #0
 8007cac:	9a02      	ldr	r2, [sp, #8]
 8007cae:	7013      	strb	r3, [r2, #0]
 8007cb0:	e03c      	b.n	8007d2c <_printf_i+0x1ec>
 8007cb2:	6923      	ldr	r3, [r4, #16]
 8007cb4:	002a      	movs	r2, r5
 8007cb6:	9904      	ldr	r1, [sp, #16]
 8007cb8:	9803      	ldr	r0, [sp, #12]
 8007cba:	9d05      	ldr	r5, [sp, #20]
 8007cbc:	47a8      	blx	r5
 8007cbe:	1c43      	adds	r3, r0, #1
 8007cc0:	d03e      	beq.n	8007d40 <_printf_i+0x200>
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	079b      	lsls	r3, r3, #30
 8007cc6:	d415      	bmi.n	8007cf4 <_printf_i+0x1b4>
 8007cc8:	9b07      	ldr	r3, [sp, #28]
 8007cca:	68e0      	ldr	r0, [r4, #12]
 8007ccc:	4298      	cmp	r0, r3
 8007cce:	da39      	bge.n	8007d44 <_printf_i+0x204>
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	e037      	b.n	8007d44 <_printf_i+0x204>
 8007cd4:	0022      	movs	r2, r4
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	3219      	adds	r2, #25
 8007cda:	9904      	ldr	r1, [sp, #16]
 8007cdc:	9803      	ldr	r0, [sp, #12]
 8007cde:	9e05      	ldr	r6, [sp, #20]
 8007ce0:	47b0      	blx	r6
 8007ce2:	1c43      	adds	r3, r0, #1
 8007ce4:	d02c      	beq.n	8007d40 <_printf_i+0x200>
 8007ce6:	3501      	adds	r5, #1
 8007ce8:	68e3      	ldr	r3, [r4, #12]
 8007cea:	9a07      	ldr	r2, [sp, #28]
 8007cec:	1a9b      	subs	r3, r3, r2
 8007cee:	42ab      	cmp	r3, r5
 8007cf0:	dcf0      	bgt.n	8007cd4 <_printf_i+0x194>
 8007cf2:	e7e9      	b.n	8007cc8 <_printf_i+0x188>
 8007cf4:	2500      	movs	r5, #0
 8007cf6:	e7f7      	b.n	8007ce8 <_printf_i+0x1a8>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d0ad      	beq.n	8007c58 <_printf_i+0x118>
 8007cfc:	9d02      	ldr	r5, [sp, #8]
 8007cfe:	0039      	movs	r1, r7
 8007d00:	f7f8 fa88 	bl	8000214 <__aeabi_uidivmod>
 8007d04:	5c73      	ldrb	r3, [r6, r1]
 8007d06:	3d01      	subs	r5, #1
 8007d08:	702b      	strb	r3, [r5, #0]
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	d1f7      	bne.n	8007cfe <_printf_i+0x1be>
 8007d0e:	2f08      	cmp	r7, #8
 8007d10:	d109      	bne.n	8007d26 <_printf_i+0x1e6>
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	07db      	lsls	r3, r3, #31
 8007d16:	d506      	bpl.n	8007d26 <_printf_i+0x1e6>
 8007d18:	6863      	ldr	r3, [r4, #4]
 8007d1a:	6922      	ldr	r2, [r4, #16]
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	dc02      	bgt.n	8007d26 <_printf_i+0x1e6>
 8007d20:	2330      	movs	r3, #48	; 0x30
 8007d22:	3d01      	subs	r5, #1
 8007d24:	702b      	strb	r3, [r5, #0]
 8007d26:	9b02      	ldr	r3, [sp, #8]
 8007d28:	1b5b      	subs	r3, r3, r5
 8007d2a:	6123      	str	r3, [r4, #16]
 8007d2c:	9b05      	ldr	r3, [sp, #20]
 8007d2e:	aa07      	add	r2, sp, #28
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	0021      	movs	r1, r4
 8007d34:	9b04      	ldr	r3, [sp, #16]
 8007d36:	9803      	ldr	r0, [sp, #12]
 8007d38:	f7ff fe94 	bl	8007a64 <_printf_common>
 8007d3c:	1c43      	adds	r3, r0, #1
 8007d3e:	d1b8      	bne.n	8007cb2 <_printf_i+0x172>
 8007d40:	2001      	movs	r0, #1
 8007d42:	4240      	negs	r0, r0
 8007d44:	b009      	add	sp, #36	; 0x24
 8007d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d48:	080081b9 	.word	0x080081b9
 8007d4c:	080081ca 	.word	0x080081ca

08007d50 <_read_r>:
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	0005      	movs	r5, r0
 8007d54:	0008      	movs	r0, r1
 8007d56:	0011      	movs	r1, r2
 8007d58:	2200      	movs	r2, #0
 8007d5a:	4c06      	ldr	r4, [pc, #24]	; (8007d74 <_read_r+0x24>)
 8007d5c:	6022      	str	r2, [r4, #0]
 8007d5e:	001a      	movs	r2, r3
 8007d60:	f7fe ff8c 	bl	8006c7c <_read>
 8007d64:	1c43      	adds	r3, r0, #1
 8007d66:	d103      	bne.n	8007d70 <_read_r+0x20>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d000      	beq.n	8007d70 <_read_r+0x20>
 8007d6e:	602b      	str	r3, [r5, #0]
 8007d70:	bd70      	pop	{r4, r5, r6, pc}
 8007d72:	46c0      	nop			; (mov r8, r8)
 8007d74:	20000338 	.word	0x20000338

08007d78 <_fstat_r>:
 8007d78:	2300      	movs	r3, #0
 8007d7a:	b570      	push	{r4, r5, r6, lr}
 8007d7c:	4c06      	ldr	r4, [pc, #24]	; (8007d98 <_fstat_r+0x20>)
 8007d7e:	0005      	movs	r5, r0
 8007d80:	0008      	movs	r0, r1
 8007d82:	0011      	movs	r1, r2
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	f7fe ffbc 	bl	8006d02 <_fstat>
 8007d8a:	1c43      	adds	r3, r0, #1
 8007d8c:	d103      	bne.n	8007d96 <_fstat_r+0x1e>
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d000      	beq.n	8007d96 <_fstat_r+0x1e>
 8007d94:	602b      	str	r3, [r5, #0]
 8007d96:	bd70      	pop	{r4, r5, r6, pc}
 8007d98:	20000338 	.word	0x20000338

08007d9c <_isatty_r>:
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	b570      	push	{r4, r5, r6, lr}
 8007da0:	4c06      	ldr	r4, [pc, #24]	; (8007dbc <_isatty_r+0x20>)
 8007da2:	0005      	movs	r5, r0
 8007da4:	0008      	movs	r0, r1
 8007da6:	6023      	str	r3, [r4, #0]
 8007da8:	f7fe ffb9 	bl	8006d1e <_isatty>
 8007dac:	1c43      	adds	r3, r0, #1
 8007dae:	d103      	bne.n	8007db8 <_isatty_r+0x1c>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d000      	beq.n	8007db8 <_isatty_r+0x1c>
 8007db6:	602b      	str	r3, [r5, #0]
 8007db8:	bd70      	pop	{r4, r5, r6, pc}
 8007dba:	46c0      	nop			; (mov r8, r8)
 8007dbc:	20000338 	.word	0x20000338

08007dc0 <memchr>:
 8007dc0:	b2c9      	uxtb	r1, r1
 8007dc2:	1882      	adds	r2, r0, r2
 8007dc4:	4290      	cmp	r0, r2
 8007dc6:	d101      	bne.n	8007dcc <memchr+0xc>
 8007dc8:	2000      	movs	r0, #0
 8007dca:	4770      	bx	lr
 8007dcc:	7803      	ldrb	r3, [r0, #0]
 8007dce:	428b      	cmp	r3, r1
 8007dd0:	d0fb      	beq.n	8007dca <memchr+0xa>
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	e7f6      	b.n	8007dc4 <memchr+0x4>

08007dd6 <fmax>:
 8007dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd8:	0004      	movs	r4, r0
 8007dda:	000d      	movs	r5, r1
 8007ddc:	0016      	movs	r6, r2
 8007dde:	001f      	movs	r7, r3
 8007de0:	f000 f816 	bl	8007e10 <__fpclassifyd>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d00d      	beq.n	8007e04 <fmax+0x2e>
 8007de8:	0030      	movs	r0, r6
 8007dea:	0039      	movs	r1, r7
 8007dec:	f000 f810 	bl	8007e10 <__fpclassifyd>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d009      	beq.n	8007e08 <fmax+0x32>
 8007df4:	0032      	movs	r2, r6
 8007df6:	003b      	movs	r3, r7
 8007df8:	0020      	movs	r0, r4
 8007dfa:	0029      	movs	r1, r5
 8007dfc:	f7f8 fb24 	bl	8000448 <__aeabi_dcmpgt>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d101      	bne.n	8007e08 <fmax+0x32>
 8007e04:	0034      	movs	r4, r6
 8007e06:	003d      	movs	r5, r7
 8007e08:	0029      	movs	r1, r5
 8007e0a:	0020      	movs	r0, r4
 8007e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e10 <__fpclassifyd>:
 8007e10:	b530      	push	{r4, r5, lr}
 8007e12:	0005      	movs	r5, r0
 8007e14:	2302      	movs	r3, #2
 8007e16:	430d      	orrs	r5, r1
 8007e18:	d018      	beq.n	8007e4c <__fpclassifyd+0x3c>
 8007e1a:	2380      	movs	r3, #128	; 0x80
 8007e1c:	061b      	lsls	r3, r3, #24
 8007e1e:	4299      	cmp	r1, r3
 8007e20:	d102      	bne.n	8007e28 <__fpclassifyd+0x18>
 8007e22:	2302      	movs	r3, #2
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d011      	beq.n	8007e4c <__fpclassifyd+0x3c>
 8007e28:	4b09      	ldr	r3, [pc, #36]	; (8007e50 <__fpclassifyd+0x40>)
 8007e2a:	0049      	lsls	r1, r1, #1
 8007e2c:	0849      	lsrs	r1, r1, #1
 8007e2e:	4a09      	ldr	r2, [pc, #36]	; (8007e54 <__fpclassifyd+0x44>)
 8007e30:	18cc      	adds	r4, r1, r3
 8007e32:	2304      	movs	r3, #4
 8007e34:	4294      	cmp	r4, r2
 8007e36:	d909      	bls.n	8007e4c <__fpclassifyd+0x3c>
 8007e38:	4a07      	ldr	r2, [pc, #28]	; (8007e58 <__fpclassifyd+0x48>)
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	4291      	cmp	r1, r2
 8007e3e:	d905      	bls.n	8007e4c <__fpclassifyd+0x3c>
 8007e40:	4a06      	ldr	r2, [pc, #24]	; (8007e5c <__fpclassifyd+0x4c>)
 8007e42:	2300      	movs	r3, #0
 8007e44:	4291      	cmp	r1, r2
 8007e46:	d101      	bne.n	8007e4c <__fpclassifyd+0x3c>
 8007e48:	4243      	negs	r3, r0
 8007e4a:	4143      	adcs	r3, r0
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	bd30      	pop	{r4, r5, pc}
 8007e50:	fff00000 	.word	0xfff00000
 8007e54:	7fdfffff 	.word	0x7fdfffff
 8007e58:	000fffff 	.word	0x000fffff
 8007e5c:	7ff00000 	.word	0x7ff00000

08007e60 <_init>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	46c0      	nop			; (mov r8, r8)
 8007e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e66:	bc08      	pop	{r3}
 8007e68:	469e      	mov	lr, r3
 8007e6a:	4770      	bx	lr

08007e6c <_fini>:
 8007e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6e:	46c0      	nop			; (mov r8, r8)
 8007e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e72:	bc08      	pop	{r3}
 8007e74:	469e      	mov	lr, r3
 8007e76:	4770      	bx	lr
