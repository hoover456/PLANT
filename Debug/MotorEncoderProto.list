
MotorEncoderProto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a5c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08005b1c  08005b1c  00015b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d08  08005d08  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005d08  08005d08  00015d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d10  08005d10  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d14  08005d14  00015d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000068  08005d80  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08005d80  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002c  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3dc  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ceb  00000000  00000000  0002c470  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b80  00000000  00000000  0002e160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0002ece0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015c2f  00000000  00000000  0002f778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008fac  00000000  00000000  000453a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084564  00000000  00000000  0004e353  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000b2  00000000  00000000  000d28b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003234  00000000  00000000  000d296c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000003c  00000000  00000000  000d5ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macinfo 00000001  00000000  00000000  000d5bdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005b04 	.word	0x08005b04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005b04 	.word	0x08005b04

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 ffc1 	bl	800138c <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 ff19 	bl	800124c <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 ffb3 	bl	800138c <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ffa9 	bl	800138c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff3b 	bl	80012c4 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ff31 	bl	80012c4 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_uldivmod>:
 8000470:	2b00      	cmp	r3, #0
 8000472:	d111      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000474:	2a00      	cmp	r2, #0
 8000476:	d10f      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000478:	2900      	cmp	r1, #0
 800047a:	d100      	bne.n	800047e <__aeabi_uldivmod+0xe>
 800047c:	2800      	cmp	r0, #0
 800047e:	d002      	beq.n	8000486 <__aeabi_uldivmod+0x16>
 8000480:	2100      	movs	r1, #0
 8000482:	43c9      	mvns	r1, r1
 8000484:	1c08      	adds	r0, r1, #0
 8000486:	b407      	push	{r0, r1, r2}
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <__aeabi_uldivmod+0x24>)
 800048a:	a102      	add	r1, pc, #8	; (adr r1, 8000494 <__aeabi_uldivmod+0x24>)
 800048c:	1840      	adds	r0, r0, r1
 800048e:	9002      	str	r0, [sp, #8]
 8000490:	bd03      	pop	{r0, r1, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	ffffff5d 	.word	0xffffff5d
 8000498:	b403      	push	{r0, r1}
 800049a:	4668      	mov	r0, sp
 800049c:	b501      	push	{r0, lr}
 800049e:	9802      	ldr	r0, [sp, #8]
 80004a0:	f000 f806 	bl	80004b0 <__udivmoddi4>
 80004a4:	9b01      	ldr	r3, [sp, #4]
 80004a6:	469e      	mov	lr, r3
 80004a8:	b002      	add	sp, #8
 80004aa:	bc0c      	pop	{r2, r3}
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)

080004b0 <__udivmoddi4>:
 80004b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b2:	464f      	mov	r7, r9
 80004b4:	4646      	mov	r6, r8
 80004b6:	46d6      	mov	lr, sl
 80004b8:	b5c0      	push	{r6, r7, lr}
 80004ba:	0004      	movs	r4, r0
 80004bc:	b082      	sub	sp, #8
 80004be:	000d      	movs	r5, r1
 80004c0:	4691      	mov	r9, r2
 80004c2:	4698      	mov	r8, r3
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d82f      	bhi.n	8000528 <__udivmoddi4+0x78>
 80004c8:	d02c      	beq.n	8000524 <__udivmoddi4+0x74>
 80004ca:	4641      	mov	r1, r8
 80004cc:	4648      	mov	r0, r9
 80004ce:	f001 f835 	bl	800153c <__clzdi2>
 80004d2:	0029      	movs	r1, r5
 80004d4:	0006      	movs	r6, r0
 80004d6:	0020      	movs	r0, r4
 80004d8:	f001 f830 	bl	800153c <__clzdi2>
 80004dc:	1a33      	subs	r3, r6, r0
 80004de:	469c      	mov	ip, r3
 80004e0:	3b20      	subs	r3, #32
 80004e2:	469a      	mov	sl, r3
 80004e4:	d500      	bpl.n	80004e8 <__udivmoddi4+0x38>
 80004e6:	e076      	b.n	80005d6 <__udivmoddi4+0x126>
 80004e8:	464b      	mov	r3, r9
 80004ea:	4652      	mov	r2, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001f      	movs	r7, r3
 80004f0:	464b      	mov	r3, r9
 80004f2:	4662      	mov	r2, ip
 80004f4:	4093      	lsls	r3, r2
 80004f6:	001e      	movs	r6, r3
 80004f8:	42af      	cmp	r7, r5
 80004fa:	d828      	bhi.n	800054e <__udivmoddi4+0x9e>
 80004fc:	d025      	beq.n	800054a <__udivmoddi4+0x9a>
 80004fe:	4653      	mov	r3, sl
 8000500:	1ba4      	subs	r4, r4, r6
 8000502:	41bd      	sbcs	r5, r7
 8000504:	2b00      	cmp	r3, #0
 8000506:	da00      	bge.n	800050a <__udivmoddi4+0x5a>
 8000508:	e07b      	b.n	8000602 <__udivmoddi4+0x152>
 800050a:	2200      	movs	r2, #0
 800050c:	2300      	movs	r3, #0
 800050e:	9200      	str	r2, [sp, #0]
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4652      	mov	r2, sl
 8000516:	4093      	lsls	r3, r2
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	4662      	mov	r2, ip
 800051e:	4093      	lsls	r3, r2
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	e018      	b.n	8000556 <__udivmoddi4+0xa6>
 8000524:	4282      	cmp	r2, r0
 8000526:	d9d0      	bls.n	80004ca <__udivmoddi4+0x1a>
 8000528:	2200      	movs	r2, #0
 800052a:	2300      	movs	r3, #0
 800052c:	9200      	str	r2, [sp, #0]
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <__udivmoddi4+0x8a>
 8000536:	601c      	str	r4, [r3, #0]
 8000538:	605d      	str	r5, [r3, #4]
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	b002      	add	sp, #8
 8000540:	bc1c      	pop	{r2, r3, r4}
 8000542:	4690      	mov	r8, r2
 8000544:	4699      	mov	r9, r3
 8000546:	46a2      	mov	sl, r4
 8000548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800054a:	42a3      	cmp	r3, r4
 800054c:	d9d7      	bls.n	80004fe <__udivmoddi4+0x4e>
 800054e:	2200      	movs	r2, #0
 8000550:	2300      	movs	r3, #0
 8000552:	9200      	str	r2, [sp, #0]
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	4663      	mov	r3, ip
 8000558:	2b00      	cmp	r3, #0
 800055a:	d0e9      	beq.n	8000530 <__udivmoddi4+0x80>
 800055c:	07fb      	lsls	r3, r7, #31
 800055e:	4698      	mov	r8, r3
 8000560:	4641      	mov	r1, r8
 8000562:	0872      	lsrs	r2, r6, #1
 8000564:	430a      	orrs	r2, r1
 8000566:	087b      	lsrs	r3, r7, #1
 8000568:	4666      	mov	r6, ip
 800056a:	e00e      	b.n	800058a <__udivmoddi4+0xda>
 800056c:	42ab      	cmp	r3, r5
 800056e:	d101      	bne.n	8000574 <__udivmoddi4+0xc4>
 8000570:	42a2      	cmp	r2, r4
 8000572:	d80c      	bhi.n	800058e <__udivmoddi4+0xde>
 8000574:	1aa4      	subs	r4, r4, r2
 8000576:	419d      	sbcs	r5, r3
 8000578:	2001      	movs	r0, #1
 800057a:	1924      	adds	r4, r4, r4
 800057c:	416d      	adcs	r5, r5
 800057e:	2100      	movs	r1, #0
 8000580:	3e01      	subs	r6, #1
 8000582:	1824      	adds	r4, r4, r0
 8000584:	414d      	adcs	r5, r1
 8000586:	2e00      	cmp	r6, #0
 8000588:	d006      	beq.n	8000598 <__udivmoddi4+0xe8>
 800058a:	42ab      	cmp	r3, r5
 800058c:	d9ee      	bls.n	800056c <__udivmoddi4+0xbc>
 800058e:	3e01      	subs	r6, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2e00      	cmp	r6, #0
 8000596:	d1f8      	bne.n	800058a <__udivmoddi4+0xda>
 8000598:	9800      	ldr	r0, [sp, #0]
 800059a:	9901      	ldr	r1, [sp, #4]
 800059c:	4653      	mov	r3, sl
 800059e:	1900      	adds	r0, r0, r4
 80005a0:	4169      	adcs	r1, r5
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	db23      	blt.n	80005ee <__udivmoddi4+0x13e>
 80005a6:	002b      	movs	r3, r5
 80005a8:	4652      	mov	r2, sl
 80005aa:	40d3      	lsrs	r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4664      	mov	r4, ip
 80005b0:	40e2      	lsrs	r2, r4
 80005b2:	001c      	movs	r4, r3
 80005b4:	4653      	mov	r3, sl
 80005b6:	0015      	movs	r5, r2
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db2d      	blt.n	8000618 <__udivmoddi4+0x168>
 80005bc:	0026      	movs	r6, r4
 80005be:	4657      	mov	r7, sl
 80005c0:	40be      	lsls	r6, r7
 80005c2:	0033      	movs	r3, r6
 80005c4:	0026      	movs	r6, r4
 80005c6:	4667      	mov	r7, ip
 80005c8:	40be      	lsls	r6, r7
 80005ca:	0032      	movs	r2, r6
 80005cc:	1a80      	subs	r0, r0, r2
 80005ce:	4199      	sbcs	r1, r3
 80005d0:	9000      	str	r0, [sp, #0]
 80005d2:	9101      	str	r1, [sp, #4]
 80005d4:	e7ac      	b.n	8000530 <__udivmoddi4+0x80>
 80005d6:	4662      	mov	r2, ip
 80005d8:	2320      	movs	r3, #32
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	464a      	mov	r2, r9
 80005de:	40da      	lsrs	r2, r3
 80005e0:	4661      	mov	r1, ip
 80005e2:	0013      	movs	r3, r2
 80005e4:	4642      	mov	r2, r8
 80005e6:	408a      	lsls	r2, r1
 80005e8:	0017      	movs	r7, r2
 80005ea:	431f      	orrs	r7, r3
 80005ec:	e780      	b.n	80004f0 <__udivmoddi4+0x40>
 80005ee:	4662      	mov	r2, ip
 80005f0:	2320      	movs	r3, #32
 80005f2:	1a9b      	subs	r3, r3, r2
 80005f4:	002a      	movs	r2, r5
 80005f6:	4666      	mov	r6, ip
 80005f8:	409a      	lsls	r2, r3
 80005fa:	0023      	movs	r3, r4
 80005fc:	40f3      	lsrs	r3, r6
 80005fe:	4313      	orrs	r3, r2
 8000600:	e7d4      	b.n	80005ac <__udivmoddi4+0xfc>
 8000602:	4662      	mov	r2, ip
 8000604:	2320      	movs	r3, #32
 8000606:	2100      	movs	r1, #0
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	2200      	movs	r2, #0
 800060c:	9100      	str	r1, [sp, #0]
 800060e:	9201      	str	r2, [sp, #4]
 8000610:	2201      	movs	r2, #1
 8000612:	40da      	lsrs	r2, r3
 8000614:	9201      	str	r2, [sp, #4]
 8000616:	e780      	b.n	800051a <__udivmoddi4+0x6a>
 8000618:	2320      	movs	r3, #32
 800061a:	4662      	mov	r2, ip
 800061c:	0026      	movs	r6, r4
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	40de      	lsrs	r6, r3
 8000622:	002f      	movs	r7, r5
 8000624:	46b0      	mov	r8, r6
 8000626:	4666      	mov	r6, ip
 8000628:	40b7      	lsls	r7, r6
 800062a:	4646      	mov	r6, r8
 800062c:	003b      	movs	r3, r7
 800062e:	4333      	orrs	r3, r6
 8000630:	e7c8      	b.n	80005c4 <__udivmoddi4+0x114>
 8000632:	46c0      	nop			; (mov r8, r8)

08000634 <__aeabi_fadd>:
 8000634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000636:	4647      	mov	r7, r8
 8000638:	46ce      	mov	lr, r9
 800063a:	0243      	lsls	r3, r0, #9
 800063c:	0a5b      	lsrs	r3, r3, #9
 800063e:	0044      	lsls	r4, r0, #1
 8000640:	0fc2      	lsrs	r2, r0, #31
 8000642:	469c      	mov	ip, r3
 8000644:	0048      	lsls	r0, r1, #1
 8000646:	00dd      	lsls	r5, r3, #3
 8000648:	024b      	lsls	r3, r1, #9
 800064a:	0e24      	lsrs	r4, r4, #24
 800064c:	0a5b      	lsrs	r3, r3, #9
 800064e:	0e00      	lsrs	r0, r0, #24
 8000650:	b580      	push	{r7, lr}
 8000652:	4698      	mov	r8, r3
 8000654:	0026      	movs	r6, r4
 8000656:	4691      	mov	r9, r2
 8000658:	0fc9      	lsrs	r1, r1, #31
 800065a:	00db      	lsls	r3, r3, #3
 800065c:	1a27      	subs	r7, r4, r0
 800065e:	428a      	cmp	r2, r1
 8000660:	d029      	beq.n	80006b6 <__aeabi_fadd+0x82>
 8000662:	2f00      	cmp	r7, #0
 8000664:	dd15      	ble.n	8000692 <__aeabi_fadd+0x5e>
 8000666:	2800      	cmp	r0, #0
 8000668:	d14a      	bne.n	8000700 <__aeabi_fadd+0xcc>
 800066a:	2b00      	cmp	r3, #0
 800066c:	d000      	beq.n	8000670 <__aeabi_fadd+0x3c>
 800066e:	e095      	b.n	800079c <__aeabi_fadd+0x168>
 8000670:	08ed      	lsrs	r5, r5, #3
 8000672:	2cff      	cmp	r4, #255	; 0xff
 8000674:	d100      	bne.n	8000678 <__aeabi_fadd+0x44>
 8000676:	e088      	b.n	800078a <__aeabi_fadd+0x156>
 8000678:	026b      	lsls	r3, r5, #9
 800067a:	0a5b      	lsrs	r3, r3, #9
 800067c:	b2e6      	uxtb	r6, r4
 800067e:	025b      	lsls	r3, r3, #9
 8000680:	05f6      	lsls	r6, r6, #23
 8000682:	0a58      	lsrs	r0, r3, #9
 8000684:	4330      	orrs	r0, r6
 8000686:	07d2      	lsls	r2, r2, #31
 8000688:	4310      	orrs	r0, r2
 800068a:	bc0c      	pop	{r2, r3}
 800068c:	4690      	mov	r8, r2
 800068e:	4699      	mov	r9, r3
 8000690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000692:	2f00      	cmp	r7, #0
 8000694:	d000      	beq.n	8000698 <__aeabi_fadd+0x64>
 8000696:	e087      	b.n	80007a8 <__aeabi_fadd+0x174>
 8000698:	1c60      	adds	r0, r4, #1
 800069a:	b2c0      	uxtb	r0, r0
 800069c:	2801      	cmp	r0, #1
 800069e:	dc00      	bgt.n	80006a2 <__aeabi_fadd+0x6e>
 80006a0:	e0b6      	b.n	8000810 <__aeabi_fadd+0x1dc>
 80006a2:	1aee      	subs	r6, r5, r3
 80006a4:	0172      	lsls	r2, r6, #5
 80006a6:	d500      	bpl.n	80006aa <__aeabi_fadd+0x76>
 80006a8:	e0c5      	b.n	8000836 <__aeabi_fadd+0x202>
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d13d      	bne.n	800072a <__aeabi_fadd+0xf6>
 80006ae:	2200      	movs	r2, #0
 80006b0:	2600      	movs	r6, #0
 80006b2:	2300      	movs	r3, #0
 80006b4:	e7e3      	b.n	800067e <__aeabi_fadd+0x4a>
 80006b6:	2f00      	cmp	r7, #0
 80006b8:	dc00      	bgt.n	80006bc <__aeabi_fadd+0x88>
 80006ba:	e096      	b.n	80007ea <__aeabi_fadd+0x1b6>
 80006bc:	2800      	cmp	r0, #0
 80006be:	d05d      	beq.n	800077c <__aeabi_fadd+0x148>
 80006c0:	2cff      	cmp	r4, #255	; 0xff
 80006c2:	d060      	beq.n	8000786 <__aeabi_fadd+0x152>
 80006c4:	2280      	movs	r2, #128	; 0x80
 80006c6:	04d2      	lsls	r2, r2, #19
 80006c8:	4313      	orrs	r3, r2
 80006ca:	2f1b      	cmp	r7, #27
 80006cc:	dd00      	ble.n	80006d0 <__aeabi_fadd+0x9c>
 80006ce:	e0ec      	b.n	80008aa <__aeabi_fadd+0x276>
 80006d0:	2220      	movs	r2, #32
 80006d2:	1bd2      	subs	r2, r2, r7
 80006d4:	0018      	movs	r0, r3
 80006d6:	4093      	lsls	r3, r2
 80006d8:	40f8      	lsrs	r0, r7
 80006da:	1e5a      	subs	r2, r3, #1
 80006dc:	4193      	sbcs	r3, r2
 80006de:	4303      	orrs	r3, r0
 80006e0:	18ed      	adds	r5, r5, r3
 80006e2:	016b      	lsls	r3, r5, #5
 80006e4:	d57b      	bpl.n	80007de <__aeabi_fadd+0x1aa>
 80006e6:	3401      	adds	r4, #1
 80006e8:	2cff      	cmp	r4, #255	; 0xff
 80006ea:	d100      	bne.n	80006ee <__aeabi_fadd+0xba>
 80006ec:	e0b7      	b.n	800085e <__aeabi_fadd+0x22a>
 80006ee:	2201      	movs	r2, #1
 80006f0:	2607      	movs	r6, #7
 80006f2:	402a      	ands	r2, r5
 80006f4:	086b      	lsrs	r3, r5, #1
 80006f6:	4d9a      	ldr	r5, [pc, #616]	; (8000960 <__aeabi_fadd+0x32c>)
 80006f8:	401d      	ands	r5, r3
 80006fa:	4315      	orrs	r5, r2
 80006fc:	402e      	ands	r6, r5
 80006fe:	e029      	b.n	8000754 <__aeabi_fadd+0x120>
 8000700:	2cff      	cmp	r4, #255	; 0xff
 8000702:	d0b5      	beq.n	8000670 <__aeabi_fadd+0x3c>
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	04d2      	lsls	r2, r2, #19
 8000708:	4313      	orrs	r3, r2
 800070a:	2f1b      	cmp	r7, #27
 800070c:	dd00      	ble.n	8000710 <__aeabi_fadd+0xdc>
 800070e:	e0b2      	b.n	8000876 <__aeabi_fadd+0x242>
 8000710:	2220      	movs	r2, #32
 8000712:	1bd2      	subs	r2, r2, r7
 8000714:	0019      	movs	r1, r3
 8000716:	4093      	lsls	r3, r2
 8000718:	40f9      	lsrs	r1, r7
 800071a:	1e5a      	subs	r2, r3, #1
 800071c:	4193      	sbcs	r3, r2
 800071e:	430b      	orrs	r3, r1
 8000720:	1aed      	subs	r5, r5, r3
 8000722:	016b      	lsls	r3, r5, #5
 8000724:	d55b      	bpl.n	80007de <__aeabi_fadd+0x1aa>
 8000726:	01ad      	lsls	r5, r5, #6
 8000728:	09ae      	lsrs	r6, r5, #6
 800072a:	0030      	movs	r0, r6
 800072c:	f000 fee8 	bl	8001500 <__clzsi2>
 8000730:	3805      	subs	r0, #5
 8000732:	4086      	lsls	r6, r0
 8000734:	4284      	cmp	r4, r0
 8000736:	dc65      	bgt.n	8000804 <__aeabi_fadd+0x1d0>
 8000738:	1b04      	subs	r4, r0, r4
 800073a:	0033      	movs	r3, r6
 800073c:	2020      	movs	r0, #32
 800073e:	3401      	adds	r4, #1
 8000740:	40e3      	lsrs	r3, r4
 8000742:	1b04      	subs	r4, r0, r4
 8000744:	40a6      	lsls	r6, r4
 8000746:	1e75      	subs	r5, r6, #1
 8000748:	41ae      	sbcs	r6, r5
 800074a:	4333      	orrs	r3, r6
 800074c:	2607      	movs	r6, #7
 800074e:	001d      	movs	r5, r3
 8000750:	2400      	movs	r4, #0
 8000752:	401e      	ands	r6, r3
 8000754:	2201      	movs	r2, #1
 8000756:	464b      	mov	r3, r9
 8000758:	401a      	ands	r2, r3
 800075a:	2e00      	cmp	r6, #0
 800075c:	d004      	beq.n	8000768 <__aeabi_fadd+0x134>
 800075e:	230f      	movs	r3, #15
 8000760:	402b      	ands	r3, r5
 8000762:	2b04      	cmp	r3, #4
 8000764:	d000      	beq.n	8000768 <__aeabi_fadd+0x134>
 8000766:	3504      	adds	r5, #4
 8000768:	016b      	lsls	r3, r5, #5
 800076a:	d400      	bmi.n	800076e <__aeabi_fadd+0x13a>
 800076c:	e780      	b.n	8000670 <__aeabi_fadd+0x3c>
 800076e:	3401      	adds	r4, #1
 8000770:	b2e6      	uxtb	r6, r4
 8000772:	2cff      	cmp	r4, #255	; 0xff
 8000774:	d12f      	bne.n	80007d6 <__aeabi_fadd+0x1a2>
 8000776:	26ff      	movs	r6, #255	; 0xff
 8000778:	2300      	movs	r3, #0
 800077a:	e780      	b.n	800067e <__aeabi_fadd+0x4a>
 800077c:	2b00      	cmp	r3, #0
 800077e:	d152      	bne.n	8000826 <__aeabi_fadd+0x1f2>
 8000780:	2cff      	cmp	r4, #255	; 0xff
 8000782:	d000      	beq.n	8000786 <__aeabi_fadd+0x152>
 8000784:	e774      	b.n	8000670 <__aeabi_fadd+0x3c>
 8000786:	000a      	movs	r2, r1
 8000788:	08ed      	lsrs	r5, r5, #3
 800078a:	2d00      	cmp	r5, #0
 800078c:	d0f3      	beq.n	8000776 <__aeabi_fadd+0x142>
 800078e:	2380      	movs	r3, #128	; 0x80
 8000790:	03db      	lsls	r3, r3, #15
 8000792:	432b      	orrs	r3, r5
 8000794:	025b      	lsls	r3, r3, #9
 8000796:	0a5b      	lsrs	r3, r3, #9
 8000798:	26ff      	movs	r6, #255	; 0xff
 800079a:	e770      	b.n	800067e <__aeabi_fadd+0x4a>
 800079c:	3f01      	subs	r7, #1
 800079e:	2f00      	cmp	r7, #0
 80007a0:	d0be      	beq.n	8000720 <__aeabi_fadd+0xec>
 80007a2:	2cff      	cmp	r4, #255	; 0xff
 80007a4:	d1b1      	bne.n	800070a <__aeabi_fadd+0xd6>
 80007a6:	e763      	b.n	8000670 <__aeabi_fadd+0x3c>
 80007a8:	2c00      	cmp	r4, #0
 80007aa:	d047      	beq.n	800083c <__aeabi_fadd+0x208>
 80007ac:	28ff      	cmp	r0, #255	; 0xff
 80007ae:	d069      	beq.n	8000884 <__aeabi_fadd+0x250>
 80007b0:	2480      	movs	r4, #128	; 0x80
 80007b2:	04e4      	lsls	r4, r4, #19
 80007b4:	427a      	negs	r2, r7
 80007b6:	4325      	orrs	r5, r4
 80007b8:	2a1b      	cmp	r2, #27
 80007ba:	dd00      	ble.n	80007be <__aeabi_fadd+0x18a>
 80007bc:	e0c5      	b.n	800094a <__aeabi_fadd+0x316>
 80007be:	002c      	movs	r4, r5
 80007c0:	2620      	movs	r6, #32
 80007c2:	40d4      	lsrs	r4, r2
 80007c4:	1ab2      	subs	r2, r6, r2
 80007c6:	4095      	lsls	r5, r2
 80007c8:	1e6a      	subs	r2, r5, #1
 80007ca:	4195      	sbcs	r5, r2
 80007cc:	4325      	orrs	r5, r4
 80007ce:	1b5d      	subs	r5, r3, r5
 80007d0:	0004      	movs	r4, r0
 80007d2:	4689      	mov	r9, r1
 80007d4:	e7a5      	b.n	8000722 <__aeabi_fadd+0xee>
 80007d6:	01ab      	lsls	r3, r5, #6
 80007d8:	0a5b      	lsrs	r3, r3, #9
 80007da:	e750      	b.n	800067e <__aeabi_fadd+0x4a>
 80007dc:	2400      	movs	r4, #0
 80007de:	2201      	movs	r2, #1
 80007e0:	464b      	mov	r3, r9
 80007e2:	401a      	ands	r2, r3
 80007e4:	076b      	lsls	r3, r5, #29
 80007e6:	d1ba      	bne.n	800075e <__aeabi_fadd+0x12a>
 80007e8:	e742      	b.n	8000670 <__aeabi_fadd+0x3c>
 80007ea:	2f00      	cmp	r7, #0
 80007ec:	d13b      	bne.n	8000866 <__aeabi_fadd+0x232>
 80007ee:	3401      	adds	r4, #1
 80007f0:	b2e0      	uxtb	r0, r4
 80007f2:	2801      	cmp	r0, #1
 80007f4:	dd4a      	ble.n	800088c <__aeabi_fadd+0x258>
 80007f6:	2cff      	cmp	r4, #255	; 0xff
 80007f8:	d0bd      	beq.n	8000776 <__aeabi_fadd+0x142>
 80007fa:	2607      	movs	r6, #7
 80007fc:	18ed      	adds	r5, r5, r3
 80007fe:	086d      	lsrs	r5, r5, #1
 8000800:	402e      	ands	r6, r5
 8000802:	e7a7      	b.n	8000754 <__aeabi_fadd+0x120>
 8000804:	2307      	movs	r3, #7
 8000806:	4d57      	ldr	r5, [pc, #348]	; (8000964 <__aeabi_fadd+0x330>)
 8000808:	1a24      	subs	r4, r4, r0
 800080a:	4035      	ands	r5, r6
 800080c:	401e      	ands	r6, r3
 800080e:	e7a1      	b.n	8000754 <__aeabi_fadd+0x120>
 8000810:	2c00      	cmp	r4, #0
 8000812:	d11b      	bne.n	800084c <__aeabi_fadd+0x218>
 8000814:	2d00      	cmp	r5, #0
 8000816:	d16e      	bne.n	80008f6 <__aeabi_fadd+0x2c2>
 8000818:	2b00      	cmp	r3, #0
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x1ea>
 800081c:	e09a      	b.n	8000954 <__aeabi_fadd+0x320>
 800081e:	000a      	movs	r2, r1
 8000820:	001d      	movs	r5, r3
 8000822:	003c      	movs	r4, r7
 8000824:	e724      	b.n	8000670 <__aeabi_fadd+0x3c>
 8000826:	3f01      	subs	r7, #1
 8000828:	2f00      	cmp	r7, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fadd+0x1fa>
 800082c:	e758      	b.n	80006e0 <__aeabi_fadd+0xac>
 800082e:	2cff      	cmp	r4, #255	; 0xff
 8000830:	d000      	beq.n	8000834 <__aeabi_fadd+0x200>
 8000832:	e74a      	b.n	80006ca <__aeabi_fadd+0x96>
 8000834:	e7a7      	b.n	8000786 <__aeabi_fadd+0x152>
 8000836:	1b5e      	subs	r6, r3, r5
 8000838:	4689      	mov	r9, r1
 800083a:	e776      	b.n	800072a <__aeabi_fadd+0xf6>
 800083c:	2d00      	cmp	r5, #0
 800083e:	d11c      	bne.n	800087a <__aeabi_fadd+0x246>
 8000840:	000a      	movs	r2, r1
 8000842:	28ff      	cmp	r0, #255	; 0xff
 8000844:	d01f      	beq.n	8000886 <__aeabi_fadd+0x252>
 8000846:	0004      	movs	r4, r0
 8000848:	001d      	movs	r5, r3
 800084a:	e711      	b.n	8000670 <__aeabi_fadd+0x3c>
 800084c:	2d00      	cmp	r5, #0
 800084e:	d15d      	bne.n	800090c <__aeabi_fadd+0x2d8>
 8000850:	2b00      	cmp	r3, #0
 8000852:	d117      	bne.n	8000884 <__aeabi_fadd+0x250>
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	2200      	movs	r2, #0
 8000858:	03db      	lsls	r3, r3, #15
 800085a:	26ff      	movs	r6, #255	; 0xff
 800085c:	e70f      	b.n	800067e <__aeabi_fadd+0x4a>
 800085e:	000a      	movs	r2, r1
 8000860:	26ff      	movs	r6, #255	; 0xff
 8000862:	2300      	movs	r3, #0
 8000864:	e70b      	b.n	800067e <__aeabi_fadd+0x4a>
 8000866:	2c00      	cmp	r4, #0
 8000868:	d121      	bne.n	80008ae <__aeabi_fadd+0x27a>
 800086a:	2d00      	cmp	r5, #0
 800086c:	d166      	bne.n	800093c <__aeabi_fadd+0x308>
 800086e:	28ff      	cmp	r0, #255	; 0xff
 8000870:	d1e9      	bne.n	8000846 <__aeabi_fadd+0x212>
 8000872:	001d      	movs	r5, r3
 8000874:	e787      	b.n	8000786 <__aeabi_fadd+0x152>
 8000876:	2301      	movs	r3, #1
 8000878:	e752      	b.n	8000720 <__aeabi_fadd+0xec>
 800087a:	1c7a      	adds	r2, r7, #1
 800087c:	d0a7      	beq.n	80007ce <__aeabi_fadd+0x19a>
 800087e:	43fa      	mvns	r2, r7
 8000880:	28ff      	cmp	r0, #255	; 0xff
 8000882:	d199      	bne.n	80007b8 <__aeabi_fadd+0x184>
 8000884:	000a      	movs	r2, r1
 8000886:	001d      	movs	r5, r3
 8000888:	24ff      	movs	r4, #255	; 0xff
 800088a:	e6f1      	b.n	8000670 <__aeabi_fadd+0x3c>
 800088c:	2e00      	cmp	r6, #0
 800088e:	d121      	bne.n	80008d4 <__aeabi_fadd+0x2a0>
 8000890:	2d00      	cmp	r5, #0
 8000892:	d04f      	beq.n	8000934 <__aeabi_fadd+0x300>
 8000894:	2b00      	cmp	r3, #0
 8000896:	d04c      	beq.n	8000932 <__aeabi_fadd+0x2fe>
 8000898:	18ed      	adds	r5, r5, r3
 800089a:	016b      	lsls	r3, r5, #5
 800089c:	d59e      	bpl.n	80007dc <__aeabi_fadd+0x1a8>
 800089e:	4b31      	ldr	r3, [pc, #196]	; (8000964 <__aeabi_fadd+0x330>)
 80008a0:	3607      	adds	r6, #7
 80008a2:	402e      	ands	r6, r5
 80008a4:	2401      	movs	r4, #1
 80008a6:	401d      	ands	r5, r3
 80008a8:	e754      	b.n	8000754 <__aeabi_fadd+0x120>
 80008aa:	2301      	movs	r3, #1
 80008ac:	e718      	b.n	80006e0 <__aeabi_fadd+0xac>
 80008ae:	28ff      	cmp	r0, #255	; 0xff
 80008b0:	d0df      	beq.n	8000872 <__aeabi_fadd+0x23e>
 80008b2:	2480      	movs	r4, #128	; 0x80
 80008b4:	04e4      	lsls	r4, r4, #19
 80008b6:	427f      	negs	r7, r7
 80008b8:	4325      	orrs	r5, r4
 80008ba:	2f1b      	cmp	r7, #27
 80008bc:	dc4d      	bgt.n	800095a <__aeabi_fadd+0x326>
 80008be:	2620      	movs	r6, #32
 80008c0:	1bf6      	subs	r6, r6, r7
 80008c2:	002c      	movs	r4, r5
 80008c4:	40b5      	lsls	r5, r6
 80008c6:	40fc      	lsrs	r4, r7
 80008c8:	1e6a      	subs	r2, r5, #1
 80008ca:	4195      	sbcs	r5, r2
 80008cc:	4325      	orrs	r5, r4
 80008ce:	18ed      	adds	r5, r5, r3
 80008d0:	0004      	movs	r4, r0
 80008d2:	e706      	b.n	80006e2 <__aeabi_fadd+0xae>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0cc      	beq.n	8000872 <__aeabi_fadd+0x23e>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_fadd+0x2aa>
 80008dc:	e753      	b.n	8000786 <__aeabi_fadd+0x152>
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	4660      	mov	r0, ip
 80008e2:	03c9      	lsls	r1, r1, #15
 80008e4:	4208      	tst	r0, r1
 80008e6:	d003      	beq.n	80008f0 <__aeabi_fadd+0x2bc>
 80008e8:	4640      	mov	r0, r8
 80008ea:	4208      	tst	r0, r1
 80008ec:	d100      	bne.n	80008f0 <__aeabi_fadd+0x2bc>
 80008ee:	001d      	movs	r5, r3
 80008f0:	2101      	movs	r1, #1
 80008f2:	4011      	ands	r1, r2
 80008f4:	e747      	b.n	8000786 <__aeabi_fadd+0x152>
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x2c8>
 80008fa:	e6b9      	b.n	8000670 <__aeabi_fadd+0x3c>
 80008fc:	1aea      	subs	r2, r5, r3
 80008fe:	0150      	lsls	r0, r2, #5
 8000900:	d525      	bpl.n	800094e <__aeabi_fadd+0x31a>
 8000902:	2607      	movs	r6, #7
 8000904:	1b5d      	subs	r5, r3, r5
 8000906:	402e      	ands	r6, r5
 8000908:	4689      	mov	r9, r1
 800090a:	e723      	b.n	8000754 <__aeabi_fadd+0x120>
 800090c:	24ff      	movs	r4, #255	; 0xff
 800090e:	2b00      	cmp	r3, #0
 8000910:	d100      	bne.n	8000914 <__aeabi_fadd+0x2e0>
 8000912:	e6ad      	b.n	8000670 <__aeabi_fadd+0x3c>
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	4660      	mov	r0, ip
 8000918:	03d2      	lsls	r2, r2, #15
 800091a:	4210      	tst	r0, r2
 800091c:	d004      	beq.n	8000928 <__aeabi_fadd+0x2f4>
 800091e:	4640      	mov	r0, r8
 8000920:	4210      	tst	r0, r2
 8000922:	d101      	bne.n	8000928 <__aeabi_fadd+0x2f4>
 8000924:	001d      	movs	r5, r3
 8000926:	4689      	mov	r9, r1
 8000928:	2201      	movs	r2, #1
 800092a:	464b      	mov	r3, r9
 800092c:	24ff      	movs	r4, #255	; 0xff
 800092e:	401a      	ands	r2, r3
 8000930:	e69e      	b.n	8000670 <__aeabi_fadd+0x3c>
 8000932:	002b      	movs	r3, r5
 8000934:	08dd      	lsrs	r5, r3, #3
 8000936:	000a      	movs	r2, r1
 8000938:	2400      	movs	r4, #0
 800093a:	e69d      	b.n	8000678 <__aeabi_fadd+0x44>
 800093c:	1c7a      	adds	r2, r7, #1
 800093e:	d0c6      	beq.n	80008ce <__aeabi_fadd+0x29a>
 8000940:	43ff      	mvns	r7, r7
 8000942:	28ff      	cmp	r0, #255	; 0xff
 8000944:	d1b9      	bne.n	80008ba <__aeabi_fadd+0x286>
 8000946:	001d      	movs	r5, r3
 8000948:	e71d      	b.n	8000786 <__aeabi_fadd+0x152>
 800094a:	2501      	movs	r5, #1
 800094c:	e73f      	b.n	80007ce <__aeabi_fadd+0x19a>
 800094e:	1e15      	subs	r5, r2, #0
 8000950:	d000      	beq.n	8000954 <__aeabi_fadd+0x320>
 8000952:	e744      	b.n	80007de <__aeabi_fadd+0x1aa>
 8000954:	2200      	movs	r2, #0
 8000956:	2300      	movs	r3, #0
 8000958:	e691      	b.n	800067e <__aeabi_fadd+0x4a>
 800095a:	2501      	movs	r5, #1
 800095c:	e7b7      	b.n	80008ce <__aeabi_fadd+0x29a>
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	7dffffff 	.word	0x7dffffff
 8000964:	fbffffff 	.word	0xfbffffff

08000968 <__aeabi_fdiv>:
 8000968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800096a:	4657      	mov	r7, sl
 800096c:	464e      	mov	r6, r9
 800096e:	4645      	mov	r5, r8
 8000970:	46de      	mov	lr, fp
 8000972:	0244      	lsls	r4, r0, #9
 8000974:	b5e0      	push	{r5, r6, r7, lr}
 8000976:	0046      	lsls	r6, r0, #1
 8000978:	4688      	mov	r8, r1
 800097a:	0a64      	lsrs	r4, r4, #9
 800097c:	0e36      	lsrs	r6, r6, #24
 800097e:	0fc7      	lsrs	r7, r0, #31
 8000980:	2e00      	cmp	r6, #0
 8000982:	d063      	beq.n	8000a4c <__aeabi_fdiv+0xe4>
 8000984:	2eff      	cmp	r6, #255	; 0xff
 8000986:	d024      	beq.n	80009d2 <__aeabi_fdiv+0x6a>
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	00e4      	lsls	r4, r4, #3
 800098c:	04db      	lsls	r3, r3, #19
 800098e:	431c      	orrs	r4, r3
 8000990:	2300      	movs	r3, #0
 8000992:	4699      	mov	r9, r3
 8000994:	469b      	mov	fp, r3
 8000996:	3e7f      	subs	r6, #127	; 0x7f
 8000998:	4643      	mov	r3, r8
 800099a:	4642      	mov	r2, r8
 800099c:	025d      	lsls	r5, r3, #9
 800099e:	0fd2      	lsrs	r2, r2, #31
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	0a6d      	lsrs	r5, r5, #9
 80009a4:	0e1b      	lsrs	r3, r3, #24
 80009a6:	4690      	mov	r8, r2
 80009a8:	4692      	mov	sl, r2
 80009aa:	d065      	beq.n	8000a78 <__aeabi_fdiv+0x110>
 80009ac:	2bff      	cmp	r3, #255	; 0xff
 80009ae:	d055      	beq.n	8000a5c <__aeabi_fdiv+0xf4>
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	2100      	movs	r1, #0
 80009b4:	00ed      	lsls	r5, r5, #3
 80009b6:	04d2      	lsls	r2, r2, #19
 80009b8:	3b7f      	subs	r3, #127	; 0x7f
 80009ba:	4315      	orrs	r5, r2
 80009bc:	1af6      	subs	r6, r6, r3
 80009be:	4643      	mov	r3, r8
 80009c0:	464a      	mov	r2, r9
 80009c2:	407b      	eors	r3, r7
 80009c4:	2a0f      	cmp	r2, #15
 80009c6:	d900      	bls.n	80009ca <__aeabi_fdiv+0x62>
 80009c8:	e08d      	b.n	8000ae6 <__aeabi_fdiv+0x17e>
 80009ca:	486d      	ldr	r0, [pc, #436]	; (8000b80 <__aeabi_fdiv+0x218>)
 80009cc:	0092      	lsls	r2, r2, #2
 80009ce:	5882      	ldr	r2, [r0, r2]
 80009d0:	4697      	mov	pc, r2
 80009d2:	2c00      	cmp	r4, #0
 80009d4:	d154      	bne.n	8000a80 <__aeabi_fdiv+0x118>
 80009d6:	2308      	movs	r3, #8
 80009d8:	4699      	mov	r9, r3
 80009da:	3b06      	subs	r3, #6
 80009dc:	26ff      	movs	r6, #255	; 0xff
 80009de:	469b      	mov	fp, r3
 80009e0:	e7da      	b.n	8000998 <__aeabi_fdiv+0x30>
 80009e2:	2500      	movs	r5, #0
 80009e4:	4653      	mov	r3, sl
 80009e6:	2902      	cmp	r1, #2
 80009e8:	d01b      	beq.n	8000a22 <__aeabi_fdiv+0xba>
 80009ea:	2903      	cmp	r1, #3
 80009ec:	d100      	bne.n	80009f0 <__aeabi_fdiv+0x88>
 80009ee:	e0bf      	b.n	8000b70 <__aeabi_fdiv+0x208>
 80009f0:	2901      	cmp	r1, #1
 80009f2:	d028      	beq.n	8000a46 <__aeabi_fdiv+0xde>
 80009f4:	0030      	movs	r0, r6
 80009f6:	307f      	adds	r0, #127	; 0x7f
 80009f8:	2800      	cmp	r0, #0
 80009fa:	dd20      	ble.n	8000a3e <__aeabi_fdiv+0xd6>
 80009fc:	076a      	lsls	r2, r5, #29
 80009fe:	d004      	beq.n	8000a0a <__aeabi_fdiv+0xa2>
 8000a00:	220f      	movs	r2, #15
 8000a02:	402a      	ands	r2, r5
 8000a04:	2a04      	cmp	r2, #4
 8000a06:	d000      	beq.n	8000a0a <__aeabi_fdiv+0xa2>
 8000a08:	3504      	adds	r5, #4
 8000a0a:	012a      	lsls	r2, r5, #4
 8000a0c:	d503      	bpl.n	8000a16 <__aeabi_fdiv+0xae>
 8000a0e:	0030      	movs	r0, r6
 8000a10:	4a5c      	ldr	r2, [pc, #368]	; (8000b84 <__aeabi_fdiv+0x21c>)
 8000a12:	3080      	adds	r0, #128	; 0x80
 8000a14:	4015      	ands	r5, r2
 8000a16:	28fe      	cmp	r0, #254	; 0xfe
 8000a18:	dc03      	bgt.n	8000a22 <__aeabi_fdiv+0xba>
 8000a1a:	01ac      	lsls	r4, r5, #6
 8000a1c:	0a64      	lsrs	r4, r4, #9
 8000a1e:	b2c2      	uxtb	r2, r0
 8000a20:	e001      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000a22:	22ff      	movs	r2, #255	; 0xff
 8000a24:	2400      	movs	r4, #0
 8000a26:	0264      	lsls	r4, r4, #9
 8000a28:	05d2      	lsls	r2, r2, #23
 8000a2a:	0a60      	lsrs	r0, r4, #9
 8000a2c:	07db      	lsls	r3, r3, #31
 8000a2e:	4310      	orrs	r0, r2
 8000a30:	4318      	orrs	r0, r3
 8000a32:	bc3c      	pop	{r2, r3, r4, r5}
 8000a34:	4690      	mov	r8, r2
 8000a36:	4699      	mov	r9, r3
 8000a38:	46a2      	mov	sl, r4
 8000a3a:	46ab      	mov	fp, r5
 8000a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a3e:	2201      	movs	r2, #1
 8000a40:	1a10      	subs	r0, r2, r0
 8000a42:	281b      	cmp	r0, #27
 8000a44:	dd7c      	ble.n	8000b40 <__aeabi_fdiv+0x1d8>
 8000a46:	2200      	movs	r2, #0
 8000a48:	2400      	movs	r4, #0
 8000a4a:	e7ec      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000a4c:	2c00      	cmp	r4, #0
 8000a4e:	d11d      	bne.n	8000a8c <__aeabi_fdiv+0x124>
 8000a50:	2304      	movs	r3, #4
 8000a52:	4699      	mov	r9, r3
 8000a54:	3b03      	subs	r3, #3
 8000a56:	2600      	movs	r6, #0
 8000a58:	469b      	mov	fp, r3
 8000a5a:	e79d      	b.n	8000998 <__aeabi_fdiv+0x30>
 8000a5c:	3eff      	subs	r6, #255	; 0xff
 8000a5e:	2d00      	cmp	r5, #0
 8000a60:	d120      	bne.n	8000aa4 <__aeabi_fdiv+0x13c>
 8000a62:	2102      	movs	r1, #2
 8000a64:	4643      	mov	r3, r8
 8000a66:	464a      	mov	r2, r9
 8000a68:	407b      	eors	r3, r7
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	2a0f      	cmp	r2, #15
 8000a6e:	d8d8      	bhi.n	8000a22 <__aeabi_fdiv+0xba>
 8000a70:	4845      	ldr	r0, [pc, #276]	; (8000b88 <__aeabi_fdiv+0x220>)
 8000a72:	0092      	lsls	r2, r2, #2
 8000a74:	5882      	ldr	r2, [r0, r2]
 8000a76:	4697      	mov	pc, r2
 8000a78:	2d00      	cmp	r5, #0
 8000a7a:	d119      	bne.n	8000ab0 <__aeabi_fdiv+0x148>
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	e7f1      	b.n	8000a64 <__aeabi_fdiv+0xfc>
 8000a80:	230c      	movs	r3, #12
 8000a82:	4699      	mov	r9, r3
 8000a84:	3b09      	subs	r3, #9
 8000a86:	26ff      	movs	r6, #255	; 0xff
 8000a88:	469b      	mov	fp, r3
 8000a8a:	e785      	b.n	8000998 <__aeabi_fdiv+0x30>
 8000a8c:	0020      	movs	r0, r4
 8000a8e:	f000 fd37 	bl	8001500 <__clzsi2>
 8000a92:	2676      	movs	r6, #118	; 0x76
 8000a94:	1f43      	subs	r3, r0, #5
 8000a96:	409c      	lsls	r4, r3
 8000a98:	2300      	movs	r3, #0
 8000a9a:	4276      	negs	r6, r6
 8000a9c:	1a36      	subs	r6, r6, r0
 8000a9e:	4699      	mov	r9, r3
 8000aa0:	469b      	mov	fp, r3
 8000aa2:	e779      	b.n	8000998 <__aeabi_fdiv+0x30>
 8000aa4:	464a      	mov	r2, r9
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	431a      	orrs	r2, r3
 8000aaa:	4691      	mov	r9, r2
 8000aac:	2103      	movs	r1, #3
 8000aae:	e786      	b.n	80009be <__aeabi_fdiv+0x56>
 8000ab0:	0028      	movs	r0, r5
 8000ab2:	f000 fd25 	bl	8001500 <__clzsi2>
 8000ab6:	1f43      	subs	r3, r0, #5
 8000ab8:	1836      	adds	r6, r6, r0
 8000aba:	409d      	lsls	r5, r3
 8000abc:	3676      	adds	r6, #118	; 0x76
 8000abe:	2100      	movs	r1, #0
 8000ac0:	e77d      	b.n	80009be <__aeabi_fdiv+0x56>
 8000ac2:	2480      	movs	r4, #128	; 0x80
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	03e4      	lsls	r4, r4, #15
 8000ac8:	22ff      	movs	r2, #255	; 0xff
 8000aca:	e7ac      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000acc:	2500      	movs	r5, #0
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	03db      	lsls	r3, r3, #15
 8000ad2:	421c      	tst	r4, r3
 8000ad4:	d028      	beq.n	8000b28 <__aeabi_fdiv+0x1c0>
 8000ad6:	421d      	tst	r5, r3
 8000ad8:	d126      	bne.n	8000b28 <__aeabi_fdiv+0x1c0>
 8000ada:	432b      	orrs	r3, r5
 8000adc:	025c      	lsls	r4, r3, #9
 8000ade:	0a64      	lsrs	r4, r4, #9
 8000ae0:	4643      	mov	r3, r8
 8000ae2:	22ff      	movs	r2, #255	; 0xff
 8000ae4:	e79f      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000ae6:	0162      	lsls	r2, r4, #5
 8000ae8:	016c      	lsls	r4, r5, #5
 8000aea:	42a2      	cmp	r2, r4
 8000aec:	d224      	bcs.n	8000b38 <__aeabi_fdiv+0x1d0>
 8000aee:	211b      	movs	r1, #27
 8000af0:	2500      	movs	r5, #0
 8000af2:	3e01      	subs	r6, #1
 8000af4:	2701      	movs	r7, #1
 8000af6:	0010      	movs	r0, r2
 8000af8:	006d      	lsls	r5, r5, #1
 8000afa:	0052      	lsls	r2, r2, #1
 8000afc:	2800      	cmp	r0, #0
 8000afe:	db01      	blt.n	8000b04 <__aeabi_fdiv+0x19c>
 8000b00:	4294      	cmp	r4, r2
 8000b02:	d801      	bhi.n	8000b08 <__aeabi_fdiv+0x1a0>
 8000b04:	1b12      	subs	r2, r2, r4
 8000b06:	433d      	orrs	r5, r7
 8000b08:	3901      	subs	r1, #1
 8000b0a:	2900      	cmp	r1, #0
 8000b0c:	d1f3      	bne.n	8000af6 <__aeabi_fdiv+0x18e>
 8000b0e:	0014      	movs	r4, r2
 8000b10:	1e62      	subs	r2, r4, #1
 8000b12:	4194      	sbcs	r4, r2
 8000b14:	4325      	orrs	r5, r4
 8000b16:	e76d      	b.n	80009f4 <__aeabi_fdiv+0x8c>
 8000b18:	46ba      	mov	sl, r7
 8000b1a:	4659      	mov	r1, fp
 8000b1c:	0025      	movs	r5, r4
 8000b1e:	4653      	mov	r3, sl
 8000b20:	2902      	cmp	r1, #2
 8000b22:	d000      	beq.n	8000b26 <__aeabi_fdiv+0x1be>
 8000b24:	e761      	b.n	80009ea <__aeabi_fdiv+0x82>
 8000b26:	e77c      	b.n	8000a22 <__aeabi_fdiv+0xba>
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	03db      	lsls	r3, r3, #15
 8000b2c:	431c      	orrs	r4, r3
 8000b2e:	0264      	lsls	r4, r4, #9
 8000b30:	0a64      	lsrs	r4, r4, #9
 8000b32:	003b      	movs	r3, r7
 8000b34:	22ff      	movs	r2, #255	; 0xff
 8000b36:	e776      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000b38:	1b12      	subs	r2, r2, r4
 8000b3a:	211a      	movs	r1, #26
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	e7d9      	b.n	8000af4 <__aeabi_fdiv+0x18c>
 8000b40:	369e      	adds	r6, #158	; 0x9e
 8000b42:	002a      	movs	r2, r5
 8000b44:	40b5      	lsls	r5, r6
 8000b46:	002c      	movs	r4, r5
 8000b48:	40c2      	lsrs	r2, r0
 8000b4a:	1e65      	subs	r5, r4, #1
 8000b4c:	41ac      	sbcs	r4, r5
 8000b4e:	4314      	orrs	r4, r2
 8000b50:	0762      	lsls	r2, r4, #29
 8000b52:	d004      	beq.n	8000b5e <__aeabi_fdiv+0x1f6>
 8000b54:	220f      	movs	r2, #15
 8000b56:	4022      	ands	r2, r4
 8000b58:	2a04      	cmp	r2, #4
 8000b5a:	d000      	beq.n	8000b5e <__aeabi_fdiv+0x1f6>
 8000b5c:	3404      	adds	r4, #4
 8000b5e:	0162      	lsls	r2, r4, #5
 8000b60:	d403      	bmi.n	8000b6a <__aeabi_fdiv+0x202>
 8000b62:	01a4      	lsls	r4, r4, #6
 8000b64:	0a64      	lsrs	r4, r4, #9
 8000b66:	2200      	movs	r2, #0
 8000b68:	e75d      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2400      	movs	r4, #0
 8000b6e:	e75a      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000b70:	2480      	movs	r4, #128	; 0x80
 8000b72:	03e4      	lsls	r4, r4, #15
 8000b74:	432c      	orrs	r4, r5
 8000b76:	0264      	lsls	r4, r4, #9
 8000b78:	0a64      	lsrs	r4, r4, #9
 8000b7a:	22ff      	movs	r2, #255	; 0xff
 8000b7c:	e753      	b.n	8000a26 <__aeabi_fdiv+0xbe>
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	08005b44 	.word	0x08005b44
 8000b84:	f7ffffff 	.word	0xf7ffffff
 8000b88:	08005b84 	.word	0x08005b84

08000b8c <__aeabi_fmul>:
 8000b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8e:	464e      	mov	r6, r9
 8000b90:	4657      	mov	r7, sl
 8000b92:	4645      	mov	r5, r8
 8000b94:	46de      	mov	lr, fp
 8000b96:	b5e0      	push	{r5, r6, r7, lr}
 8000b98:	0243      	lsls	r3, r0, #9
 8000b9a:	0a5b      	lsrs	r3, r3, #9
 8000b9c:	0045      	lsls	r5, r0, #1
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	1c0f      	adds	r7, r1, #0
 8000ba2:	4699      	mov	r9, r3
 8000ba4:	0e2d      	lsrs	r5, r5, #24
 8000ba6:	0fc6      	lsrs	r6, r0, #31
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d057      	beq.n	8000c5c <__aeabi_fmul+0xd0>
 8000bac:	2dff      	cmp	r5, #255	; 0xff
 8000bae:	d024      	beq.n	8000bfa <__aeabi_fmul+0x6e>
 8000bb0:	2080      	movs	r0, #128	; 0x80
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	04c0      	lsls	r0, r0, #19
 8000bb6:	4318      	orrs	r0, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	4681      	mov	r9, r0
 8000bbc:	469a      	mov	sl, r3
 8000bbe:	469b      	mov	fp, r3
 8000bc0:	3d7f      	subs	r5, #127	; 0x7f
 8000bc2:	027c      	lsls	r4, r7, #9
 8000bc4:	007a      	lsls	r2, r7, #1
 8000bc6:	0ffb      	lsrs	r3, r7, #31
 8000bc8:	0a64      	lsrs	r4, r4, #9
 8000bca:	0e12      	lsrs	r2, r2, #24
 8000bcc:	4698      	mov	r8, r3
 8000bce:	d023      	beq.n	8000c18 <__aeabi_fmul+0x8c>
 8000bd0:	2aff      	cmp	r2, #255	; 0xff
 8000bd2:	d04b      	beq.n	8000c6c <__aeabi_fmul+0xe0>
 8000bd4:	00e3      	lsls	r3, r4, #3
 8000bd6:	2480      	movs	r4, #128	; 0x80
 8000bd8:	2000      	movs	r0, #0
 8000bda:	04e4      	lsls	r4, r4, #19
 8000bdc:	3a7f      	subs	r2, #127	; 0x7f
 8000bde:	431c      	orrs	r4, r3
 8000be0:	18ad      	adds	r5, r5, r2
 8000be2:	1c6b      	adds	r3, r5, #1
 8000be4:	4647      	mov	r7, r8
 8000be6:	9301      	str	r3, [sp, #4]
 8000be8:	4653      	mov	r3, sl
 8000bea:	4077      	eors	r7, r6
 8000bec:	003a      	movs	r2, r7
 8000bee:	2b0f      	cmp	r3, #15
 8000bf0:	d848      	bhi.n	8000c84 <__aeabi_fmul+0xf8>
 8000bf2:	497d      	ldr	r1, [pc, #500]	; (8000de8 <__aeabi_fmul+0x25c>)
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	58cb      	ldr	r3, [r1, r3]
 8000bf8:	469f      	mov	pc, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d000      	beq.n	8000c00 <__aeabi_fmul+0x74>
 8000bfe:	e085      	b.n	8000d0c <__aeabi_fmul+0x180>
 8000c00:	3308      	adds	r3, #8
 8000c02:	469a      	mov	sl, r3
 8000c04:	3b06      	subs	r3, #6
 8000c06:	469b      	mov	fp, r3
 8000c08:	027c      	lsls	r4, r7, #9
 8000c0a:	007a      	lsls	r2, r7, #1
 8000c0c:	0ffb      	lsrs	r3, r7, #31
 8000c0e:	25ff      	movs	r5, #255	; 0xff
 8000c10:	0a64      	lsrs	r4, r4, #9
 8000c12:	0e12      	lsrs	r2, r2, #24
 8000c14:	4698      	mov	r8, r3
 8000c16:	d1db      	bne.n	8000bd0 <__aeabi_fmul+0x44>
 8000c18:	2c00      	cmp	r4, #0
 8000c1a:	d000      	beq.n	8000c1e <__aeabi_fmul+0x92>
 8000c1c:	e090      	b.n	8000d40 <__aeabi_fmul+0x1b4>
 8000c1e:	4652      	mov	r2, sl
 8000c20:	2301      	movs	r3, #1
 8000c22:	431a      	orrs	r2, r3
 8000c24:	4692      	mov	sl, r2
 8000c26:	2001      	movs	r0, #1
 8000c28:	e7db      	b.n	8000be2 <__aeabi_fmul+0x56>
 8000c2a:	464c      	mov	r4, r9
 8000c2c:	4658      	mov	r0, fp
 8000c2e:	0017      	movs	r7, r2
 8000c30:	2802      	cmp	r0, #2
 8000c32:	d024      	beq.n	8000c7e <__aeabi_fmul+0xf2>
 8000c34:	2803      	cmp	r0, #3
 8000c36:	d100      	bne.n	8000c3a <__aeabi_fmul+0xae>
 8000c38:	e0cf      	b.n	8000dda <__aeabi_fmul+0x24e>
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	2801      	cmp	r0, #1
 8000c40:	d14d      	bne.n	8000cde <__aeabi_fmul+0x152>
 8000c42:	0258      	lsls	r0, r3, #9
 8000c44:	05d2      	lsls	r2, r2, #23
 8000c46:	0a40      	lsrs	r0, r0, #9
 8000c48:	07ff      	lsls	r7, r7, #31
 8000c4a:	4310      	orrs	r0, r2
 8000c4c:	4338      	orrs	r0, r7
 8000c4e:	b003      	add	sp, #12
 8000c50:	bc3c      	pop	{r2, r3, r4, r5}
 8000c52:	4690      	mov	r8, r2
 8000c54:	4699      	mov	r9, r3
 8000c56:	46a2      	mov	sl, r4
 8000c58:	46ab      	mov	fp, r5
 8000c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d15b      	bne.n	8000d18 <__aeabi_fmul+0x18c>
 8000c60:	2304      	movs	r3, #4
 8000c62:	469a      	mov	sl, r3
 8000c64:	3b03      	subs	r3, #3
 8000c66:	2500      	movs	r5, #0
 8000c68:	469b      	mov	fp, r3
 8000c6a:	e7aa      	b.n	8000bc2 <__aeabi_fmul+0x36>
 8000c6c:	35ff      	adds	r5, #255	; 0xff
 8000c6e:	2c00      	cmp	r4, #0
 8000c70:	d160      	bne.n	8000d34 <__aeabi_fmul+0x1a8>
 8000c72:	4652      	mov	r2, sl
 8000c74:	2302      	movs	r3, #2
 8000c76:	431a      	orrs	r2, r3
 8000c78:	4692      	mov	sl, r2
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	e7b1      	b.n	8000be2 <__aeabi_fmul+0x56>
 8000c7e:	22ff      	movs	r2, #255	; 0xff
 8000c80:	2300      	movs	r3, #0
 8000c82:	e7de      	b.n	8000c42 <__aeabi_fmul+0xb6>
 8000c84:	464b      	mov	r3, r9
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	469c      	mov	ip, r3
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	0426      	lsls	r6, r4, #16
 8000c8e:	0c36      	lsrs	r6, r6, #16
 8000c90:	0418      	lsls	r0, r3, #16
 8000c92:	4661      	mov	r1, ip
 8000c94:	0033      	movs	r3, r6
 8000c96:	0c22      	lsrs	r2, r4, #16
 8000c98:	4664      	mov	r4, ip
 8000c9a:	0c00      	lsrs	r0, r0, #16
 8000c9c:	4343      	muls	r3, r0
 8000c9e:	434e      	muls	r6, r1
 8000ca0:	4350      	muls	r0, r2
 8000ca2:	4354      	muls	r4, r2
 8000ca4:	1980      	adds	r0, r0, r6
 8000ca6:	0c1a      	lsrs	r2, r3, #16
 8000ca8:	1812      	adds	r2, r2, r0
 8000caa:	4296      	cmp	r6, r2
 8000cac:	d903      	bls.n	8000cb6 <__aeabi_fmul+0x12a>
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	468c      	mov	ip, r1
 8000cb4:	4464      	add	r4, ip
 8000cb6:	041b      	lsls	r3, r3, #16
 8000cb8:	0c1b      	lsrs	r3, r3, #16
 8000cba:	0410      	lsls	r0, r2, #16
 8000cbc:	18c0      	adds	r0, r0, r3
 8000cbe:	0183      	lsls	r3, r0, #6
 8000cc0:	1e5e      	subs	r6, r3, #1
 8000cc2:	41b3      	sbcs	r3, r6
 8000cc4:	0e80      	lsrs	r0, r0, #26
 8000cc6:	4318      	orrs	r0, r3
 8000cc8:	0c13      	lsrs	r3, r2, #16
 8000cca:	191b      	adds	r3, r3, r4
 8000ccc:	019b      	lsls	r3, r3, #6
 8000cce:	4303      	orrs	r3, r0
 8000cd0:	001c      	movs	r4, r3
 8000cd2:	0123      	lsls	r3, r4, #4
 8000cd4:	d579      	bpl.n	8000dca <__aeabi_fmul+0x23e>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	0862      	lsrs	r2, r4, #1
 8000cda:	401c      	ands	r4, r3
 8000cdc:	4314      	orrs	r4, r2
 8000cde:	9a01      	ldr	r2, [sp, #4]
 8000ce0:	327f      	adds	r2, #127	; 0x7f
 8000ce2:	2a00      	cmp	r2, #0
 8000ce4:	dd4d      	ble.n	8000d82 <__aeabi_fmul+0x1f6>
 8000ce6:	0763      	lsls	r3, r4, #29
 8000ce8:	d004      	beq.n	8000cf4 <__aeabi_fmul+0x168>
 8000cea:	230f      	movs	r3, #15
 8000cec:	4023      	ands	r3, r4
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	d000      	beq.n	8000cf4 <__aeabi_fmul+0x168>
 8000cf2:	3404      	adds	r4, #4
 8000cf4:	0123      	lsls	r3, r4, #4
 8000cf6:	d503      	bpl.n	8000d00 <__aeabi_fmul+0x174>
 8000cf8:	4b3c      	ldr	r3, [pc, #240]	; (8000dec <__aeabi_fmul+0x260>)
 8000cfa:	9a01      	ldr	r2, [sp, #4]
 8000cfc:	401c      	ands	r4, r3
 8000cfe:	3280      	adds	r2, #128	; 0x80
 8000d00:	2afe      	cmp	r2, #254	; 0xfe
 8000d02:	dcbc      	bgt.n	8000c7e <__aeabi_fmul+0xf2>
 8000d04:	01a3      	lsls	r3, r4, #6
 8000d06:	0a5b      	lsrs	r3, r3, #9
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	e79a      	b.n	8000c42 <__aeabi_fmul+0xb6>
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	469a      	mov	sl, r3
 8000d10:	3b09      	subs	r3, #9
 8000d12:	25ff      	movs	r5, #255	; 0xff
 8000d14:	469b      	mov	fp, r3
 8000d16:	e754      	b.n	8000bc2 <__aeabi_fmul+0x36>
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 fbf1 	bl	8001500 <__clzsi2>
 8000d1e:	464a      	mov	r2, r9
 8000d20:	1f43      	subs	r3, r0, #5
 8000d22:	2576      	movs	r5, #118	; 0x76
 8000d24:	409a      	lsls	r2, r3
 8000d26:	2300      	movs	r3, #0
 8000d28:	426d      	negs	r5, r5
 8000d2a:	4691      	mov	r9, r2
 8000d2c:	1a2d      	subs	r5, r5, r0
 8000d2e:	469a      	mov	sl, r3
 8000d30:	469b      	mov	fp, r3
 8000d32:	e746      	b.n	8000bc2 <__aeabi_fmul+0x36>
 8000d34:	4652      	mov	r2, sl
 8000d36:	2303      	movs	r3, #3
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	4692      	mov	sl, r2
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	e750      	b.n	8000be2 <__aeabi_fmul+0x56>
 8000d40:	0020      	movs	r0, r4
 8000d42:	f000 fbdd 	bl	8001500 <__clzsi2>
 8000d46:	1f43      	subs	r3, r0, #5
 8000d48:	1a2d      	subs	r5, r5, r0
 8000d4a:	409c      	lsls	r4, r3
 8000d4c:	3d76      	subs	r5, #118	; 0x76
 8000d4e:	2000      	movs	r0, #0
 8000d50:	e747      	b.n	8000be2 <__aeabi_fmul+0x56>
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	2700      	movs	r7, #0
 8000d56:	03db      	lsls	r3, r3, #15
 8000d58:	22ff      	movs	r2, #255	; 0xff
 8000d5a:	e772      	b.n	8000c42 <__aeabi_fmul+0xb6>
 8000d5c:	4642      	mov	r2, r8
 8000d5e:	e766      	b.n	8000c2e <__aeabi_fmul+0xa2>
 8000d60:	464c      	mov	r4, r9
 8000d62:	0032      	movs	r2, r6
 8000d64:	4658      	mov	r0, fp
 8000d66:	e762      	b.n	8000c2e <__aeabi_fmul+0xa2>
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	464a      	mov	r2, r9
 8000d6c:	03db      	lsls	r3, r3, #15
 8000d6e:	421a      	tst	r2, r3
 8000d70:	d022      	beq.n	8000db8 <__aeabi_fmul+0x22c>
 8000d72:	421c      	tst	r4, r3
 8000d74:	d120      	bne.n	8000db8 <__aeabi_fmul+0x22c>
 8000d76:	4323      	orrs	r3, r4
 8000d78:	025b      	lsls	r3, r3, #9
 8000d7a:	0a5b      	lsrs	r3, r3, #9
 8000d7c:	4647      	mov	r7, r8
 8000d7e:	22ff      	movs	r2, #255	; 0xff
 8000d80:	e75f      	b.n	8000c42 <__aeabi_fmul+0xb6>
 8000d82:	2301      	movs	r3, #1
 8000d84:	1a9a      	subs	r2, r3, r2
 8000d86:	2a1b      	cmp	r2, #27
 8000d88:	dc21      	bgt.n	8000dce <__aeabi_fmul+0x242>
 8000d8a:	0023      	movs	r3, r4
 8000d8c:	9901      	ldr	r1, [sp, #4]
 8000d8e:	40d3      	lsrs	r3, r2
 8000d90:	319e      	adds	r1, #158	; 0x9e
 8000d92:	408c      	lsls	r4, r1
 8000d94:	001a      	movs	r2, r3
 8000d96:	0023      	movs	r3, r4
 8000d98:	1e5c      	subs	r4, r3, #1
 8000d9a:	41a3      	sbcs	r3, r4
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	075a      	lsls	r2, r3, #29
 8000da0:	d004      	beq.n	8000dac <__aeabi_fmul+0x220>
 8000da2:	220f      	movs	r2, #15
 8000da4:	401a      	ands	r2, r3
 8000da6:	2a04      	cmp	r2, #4
 8000da8:	d000      	beq.n	8000dac <__aeabi_fmul+0x220>
 8000daa:	3304      	adds	r3, #4
 8000dac:	015a      	lsls	r2, r3, #5
 8000dae:	d411      	bmi.n	8000dd4 <__aeabi_fmul+0x248>
 8000db0:	019b      	lsls	r3, r3, #6
 8000db2:	0a5b      	lsrs	r3, r3, #9
 8000db4:	2200      	movs	r2, #0
 8000db6:	e744      	b.n	8000c42 <__aeabi_fmul+0xb6>
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	464a      	mov	r2, r9
 8000dbc:	03db      	lsls	r3, r3, #15
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	025b      	lsls	r3, r3, #9
 8000dc2:	0a5b      	lsrs	r3, r3, #9
 8000dc4:	0037      	movs	r7, r6
 8000dc6:	22ff      	movs	r2, #255	; 0xff
 8000dc8:	e73b      	b.n	8000c42 <__aeabi_fmul+0xb6>
 8000dca:	9501      	str	r5, [sp, #4]
 8000dcc:	e787      	b.n	8000cde <__aeabi_fmul+0x152>
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e736      	b.n	8000c42 <__aeabi_fmul+0xb6>
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e733      	b.n	8000c42 <__aeabi_fmul+0xb6>
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	03db      	lsls	r3, r3, #15
 8000dde:	4323      	orrs	r3, r4
 8000de0:	025b      	lsls	r3, r3, #9
 8000de2:	0a5b      	lsrs	r3, r3, #9
 8000de4:	22ff      	movs	r2, #255	; 0xff
 8000de6:	e72c      	b.n	8000c42 <__aeabi_fmul+0xb6>
 8000de8:	08005bc4 	.word	0x08005bc4
 8000dec:	f7ffffff 	.word	0xf7ffffff

08000df0 <__aeabi_fsub>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	4647      	mov	r7, r8
 8000df4:	46ce      	mov	lr, r9
 8000df6:	0044      	lsls	r4, r0, #1
 8000df8:	0fc2      	lsrs	r2, r0, #31
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	0247      	lsls	r7, r0, #9
 8000dfe:	0248      	lsls	r0, r1, #9
 8000e00:	0a40      	lsrs	r0, r0, #9
 8000e02:	4684      	mov	ip, r0
 8000e04:	4666      	mov	r6, ip
 8000e06:	0048      	lsls	r0, r1, #1
 8000e08:	0a7f      	lsrs	r7, r7, #9
 8000e0a:	0e24      	lsrs	r4, r4, #24
 8000e0c:	00f6      	lsls	r6, r6, #3
 8000e0e:	0025      	movs	r5, r4
 8000e10:	4690      	mov	r8, r2
 8000e12:	00fb      	lsls	r3, r7, #3
 8000e14:	0e00      	lsrs	r0, r0, #24
 8000e16:	0fc9      	lsrs	r1, r1, #31
 8000e18:	46b1      	mov	r9, r6
 8000e1a:	28ff      	cmp	r0, #255	; 0xff
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_fsub+0x30>
 8000e1e:	e085      	b.n	8000f2c <__aeabi_fsub+0x13c>
 8000e20:	2601      	movs	r6, #1
 8000e22:	4071      	eors	r1, r6
 8000e24:	1a26      	subs	r6, r4, r0
 8000e26:	4291      	cmp	r1, r2
 8000e28:	d057      	beq.n	8000eda <__aeabi_fsub+0xea>
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	dd43      	ble.n	8000eb6 <__aeabi_fsub+0xc6>
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	d000      	beq.n	8000e34 <__aeabi_fsub+0x44>
 8000e32:	e07f      	b.n	8000f34 <__aeabi_fsub+0x144>
 8000e34:	4649      	mov	r1, r9
 8000e36:	2900      	cmp	r1, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_fsub+0x4c>
 8000e3a:	e0aa      	b.n	8000f92 <__aeabi_fsub+0x1a2>
 8000e3c:	3e01      	subs	r6, #1
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	d000      	beq.n	8000e44 <__aeabi_fsub+0x54>
 8000e42:	e0f7      	b.n	8001034 <__aeabi_fsub+0x244>
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	015a      	lsls	r2, r3, #5
 8000e48:	d400      	bmi.n	8000e4c <__aeabi_fsub+0x5c>
 8000e4a:	e08b      	b.n	8000f64 <__aeabi_fsub+0x174>
 8000e4c:	019b      	lsls	r3, r3, #6
 8000e4e:	099c      	lsrs	r4, r3, #6
 8000e50:	0020      	movs	r0, r4
 8000e52:	f000 fb55 	bl	8001500 <__clzsi2>
 8000e56:	3805      	subs	r0, #5
 8000e58:	4084      	lsls	r4, r0
 8000e5a:	4285      	cmp	r5, r0
 8000e5c:	dd00      	ble.n	8000e60 <__aeabi_fsub+0x70>
 8000e5e:	e0d3      	b.n	8001008 <__aeabi_fsub+0x218>
 8000e60:	1b45      	subs	r5, r0, r5
 8000e62:	0023      	movs	r3, r4
 8000e64:	2020      	movs	r0, #32
 8000e66:	3501      	adds	r5, #1
 8000e68:	40eb      	lsrs	r3, r5
 8000e6a:	1b45      	subs	r5, r0, r5
 8000e6c:	40ac      	lsls	r4, r5
 8000e6e:	1e62      	subs	r2, r4, #1
 8000e70:	4194      	sbcs	r4, r2
 8000e72:	4323      	orrs	r3, r4
 8000e74:	2407      	movs	r4, #7
 8000e76:	2500      	movs	r5, #0
 8000e78:	401c      	ands	r4, r3
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4641      	mov	r1, r8
 8000e7e:	400a      	ands	r2, r1
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d004      	beq.n	8000e8e <__aeabi_fsub+0x9e>
 8000e84:	210f      	movs	r1, #15
 8000e86:	4019      	ands	r1, r3
 8000e88:	2904      	cmp	r1, #4
 8000e8a:	d000      	beq.n	8000e8e <__aeabi_fsub+0x9e>
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	0159      	lsls	r1, r3, #5
 8000e90:	d400      	bmi.n	8000e94 <__aeabi_fsub+0xa4>
 8000e92:	e080      	b.n	8000f96 <__aeabi_fsub+0x1a6>
 8000e94:	3501      	adds	r5, #1
 8000e96:	b2ec      	uxtb	r4, r5
 8000e98:	2dff      	cmp	r5, #255	; 0xff
 8000e9a:	d000      	beq.n	8000e9e <__aeabi_fsub+0xae>
 8000e9c:	e0a3      	b.n	8000fe6 <__aeabi_fsub+0x1f6>
 8000e9e:	24ff      	movs	r4, #255	; 0xff
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	025b      	lsls	r3, r3, #9
 8000ea4:	05e4      	lsls	r4, r4, #23
 8000ea6:	0a58      	lsrs	r0, r3, #9
 8000ea8:	07d2      	lsls	r2, r2, #31
 8000eaa:	4320      	orrs	r0, r4
 8000eac:	4310      	orrs	r0, r2
 8000eae:	bc0c      	pop	{r2, r3}
 8000eb0:	4690      	mov	r8, r2
 8000eb2:	4699      	mov	r9, r3
 8000eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d174      	bne.n	8000fa4 <__aeabi_fsub+0x1b4>
 8000eba:	1c60      	adds	r0, r4, #1
 8000ebc:	b2c0      	uxtb	r0, r0
 8000ebe:	2801      	cmp	r0, #1
 8000ec0:	dc00      	bgt.n	8000ec4 <__aeabi_fsub+0xd4>
 8000ec2:	e0a7      	b.n	8001014 <__aeabi_fsub+0x224>
 8000ec4:	464a      	mov	r2, r9
 8000ec6:	1a9c      	subs	r4, r3, r2
 8000ec8:	0162      	lsls	r2, r4, #5
 8000eca:	d500      	bpl.n	8000ece <__aeabi_fsub+0xde>
 8000ecc:	e0b6      	b.n	800103c <__aeabi_fsub+0x24c>
 8000ece:	2c00      	cmp	r4, #0
 8000ed0:	d1be      	bne.n	8000e50 <__aeabi_fsub+0x60>
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2400      	movs	r4, #0
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e7e3      	b.n	8000ea2 <__aeabi_fsub+0xb2>
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	dc00      	bgt.n	8000ee0 <__aeabi_fsub+0xf0>
 8000ede:	e085      	b.n	8000fec <__aeabi_fsub+0x1fc>
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d046      	beq.n	8000f72 <__aeabi_fsub+0x182>
 8000ee4:	2cff      	cmp	r4, #255	; 0xff
 8000ee6:	d049      	beq.n	8000f7c <__aeabi_fsub+0x18c>
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	4648      	mov	r0, r9
 8000eec:	04d2      	lsls	r2, r2, #19
 8000eee:	4310      	orrs	r0, r2
 8000ef0:	4681      	mov	r9, r0
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2e1b      	cmp	r6, #27
 8000ef6:	dc09      	bgt.n	8000f0c <__aeabi_fsub+0x11c>
 8000ef8:	2020      	movs	r0, #32
 8000efa:	464c      	mov	r4, r9
 8000efc:	1b80      	subs	r0, r0, r6
 8000efe:	4084      	lsls	r4, r0
 8000f00:	464a      	mov	r2, r9
 8000f02:	0020      	movs	r0, r4
 8000f04:	40f2      	lsrs	r2, r6
 8000f06:	1e44      	subs	r4, r0, #1
 8000f08:	41a0      	sbcs	r0, r4
 8000f0a:	4302      	orrs	r2, r0
 8000f0c:	189b      	adds	r3, r3, r2
 8000f0e:	015a      	lsls	r2, r3, #5
 8000f10:	d528      	bpl.n	8000f64 <__aeabi_fsub+0x174>
 8000f12:	3501      	adds	r5, #1
 8000f14:	2dff      	cmp	r5, #255	; 0xff
 8000f16:	d100      	bne.n	8000f1a <__aeabi_fsub+0x12a>
 8000f18:	e0a8      	b.n	800106c <__aeabi_fsub+0x27c>
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2407      	movs	r4, #7
 8000f1e:	4994      	ldr	r1, [pc, #592]	; (8001170 <__aeabi_fsub+0x380>)
 8000f20:	401a      	ands	r2, r3
 8000f22:	085b      	lsrs	r3, r3, #1
 8000f24:	400b      	ands	r3, r1
 8000f26:	4313      	orrs	r3, r2
 8000f28:	401c      	ands	r4, r3
 8000f2a:	e7a6      	b.n	8000e7a <__aeabi_fsub+0x8a>
 8000f2c:	2e00      	cmp	r6, #0
 8000f2e:	d000      	beq.n	8000f32 <__aeabi_fsub+0x142>
 8000f30:	e778      	b.n	8000e24 <__aeabi_fsub+0x34>
 8000f32:	e775      	b.n	8000e20 <__aeabi_fsub+0x30>
 8000f34:	2cff      	cmp	r4, #255	; 0xff
 8000f36:	d054      	beq.n	8000fe2 <__aeabi_fsub+0x1f2>
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	4649      	mov	r1, r9
 8000f3c:	04d2      	lsls	r2, r2, #19
 8000f3e:	4311      	orrs	r1, r2
 8000f40:	4689      	mov	r9, r1
 8000f42:	2201      	movs	r2, #1
 8000f44:	2e1b      	cmp	r6, #27
 8000f46:	dc09      	bgt.n	8000f5c <__aeabi_fsub+0x16c>
 8000f48:	2120      	movs	r1, #32
 8000f4a:	4648      	mov	r0, r9
 8000f4c:	1b89      	subs	r1, r1, r6
 8000f4e:	4088      	lsls	r0, r1
 8000f50:	464a      	mov	r2, r9
 8000f52:	0001      	movs	r1, r0
 8000f54:	40f2      	lsrs	r2, r6
 8000f56:	1e48      	subs	r0, r1, #1
 8000f58:	4181      	sbcs	r1, r0
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	1a9b      	subs	r3, r3, r2
 8000f5e:	015a      	lsls	r2, r3, #5
 8000f60:	d500      	bpl.n	8000f64 <__aeabi_fsub+0x174>
 8000f62:	e773      	b.n	8000e4c <__aeabi_fsub+0x5c>
 8000f64:	2201      	movs	r2, #1
 8000f66:	4641      	mov	r1, r8
 8000f68:	400a      	ands	r2, r1
 8000f6a:	0759      	lsls	r1, r3, #29
 8000f6c:	d000      	beq.n	8000f70 <__aeabi_fsub+0x180>
 8000f6e:	e789      	b.n	8000e84 <__aeabi_fsub+0x94>
 8000f70:	e011      	b.n	8000f96 <__aeabi_fsub+0x1a6>
 8000f72:	4648      	mov	r0, r9
 8000f74:	2800      	cmp	r0, #0
 8000f76:	d158      	bne.n	800102a <__aeabi_fsub+0x23a>
 8000f78:	2cff      	cmp	r4, #255	; 0xff
 8000f7a:	d10c      	bne.n	8000f96 <__aeabi_fsub+0x1a6>
 8000f7c:	08db      	lsrs	r3, r3, #3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d100      	bne.n	8000f84 <__aeabi_fsub+0x194>
 8000f82:	e78c      	b.n	8000e9e <__aeabi_fsub+0xae>
 8000f84:	2080      	movs	r0, #128	; 0x80
 8000f86:	03c0      	lsls	r0, r0, #15
 8000f88:	4303      	orrs	r3, r0
 8000f8a:	025b      	lsls	r3, r3, #9
 8000f8c:	0a5b      	lsrs	r3, r3, #9
 8000f8e:	24ff      	movs	r4, #255	; 0xff
 8000f90:	e787      	b.n	8000ea2 <__aeabi_fsub+0xb2>
 8000f92:	2cff      	cmp	r4, #255	; 0xff
 8000f94:	d025      	beq.n	8000fe2 <__aeabi_fsub+0x1f2>
 8000f96:	08db      	lsrs	r3, r3, #3
 8000f98:	2dff      	cmp	r5, #255	; 0xff
 8000f9a:	d0f0      	beq.n	8000f7e <__aeabi_fsub+0x18e>
 8000f9c:	025b      	lsls	r3, r3, #9
 8000f9e:	0a5b      	lsrs	r3, r3, #9
 8000fa0:	b2ec      	uxtb	r4, r5
 8000fa2:	e77e      	b.n	8000ea2 <__aeabi_fsub+0xb2>
 8000fa4:	2c00      	cmp	r4, #0
 8000fa6:	d04d      	beq.n	8001044 <__aeabi_fsub+0x254>
 8000fa8:	28ff      	cmp	r0, #255	; 0xff
 8000faa:	d018      	beq.n	8000fde <__aeabi_fsub+0x1ee>
 8000fac:	2480      	movs	r4, #128	; 0x80
 8000fae:	04e4      	lsls	r4, r4, #19
 8000fb0:	4272      	negs	r2, r6
 8000fb2:	4323      	orrs	r3, r4
 8000fb4:	2a1b      	cmp	r2, #27
 8000fb6:	dd00      	ble.n	8000fba <__aeabi_fsub+0x1ca>
 8000fb8:	e0c4      	b.n	8001144 <__aeabi_fsub+0x354>
 8000fba:	001c      	movs	r4, r3
 8000fbc:	2520      	movs	r5, #32
 8000fbe:	40d4      	lsrs	r4, r2
 8000fc0:	1aaa      	subs	r2, r5, r2
 8000fc2:	4093      	lsls	r3, r2
 8000fc4:	1e5a      	subs	r2, r3, #1
 8000fc6:	4193      	sbcs	r3, r2
 8000fc8:	4323      	orrs	r3, r4
 8000fca:	464a      	mov	r2, r9
 8000fcc:	0005      	movs	r5, r0
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	4688      	mov	r8, r1
 8000fd2:	e738      	b.n	8000e46 <__aeabi_fsub+0x56>
 8000fd4:	1c72      	adds	r2, r6, #1
 8000fd6:	d0f8      	beq.n	8000fca <__aeabi_fsub+0x1da>
 8000fd8:	43f2      	mvns	r2, r6
 8000fda:	28ff      	cmp	r0, #255	; 0xff
 8000fdc:	d1ea      	bne.n	8000fb4 <__aeabi_fsub+0x1c4>
 8000fde:	000a      	movs	r2, r1
 8000fe0:	464b      	mov	r3, r9
 8000fe2:	25ff      	movs	r5, #255	; 0xff
 8000fe4:	e7d7      	b.n	8000f96 <__aeabi_fsub+0x1a6>
 8000fe6:	019b      	lsls	r3, r3, #6
 8000fe8:	0a5b      	lsrs	r3, r3, #9
 8000fea:	e75a      	b.n	8000ea2 <__aeabi_fsub+0xb2>
 8000fec:	2e00      	cmp	r6, #0
 8000fee:	d141      	bne.n	8001074 <__aeabi_fsub+0x284>
 8000ff0:	1c65      	adds	r5, r4, #1
 8000ff2:	b2e9      	uxtb	r1, r5
 8000ff4:	2901      	cmp	r1, #1
 8000ff6:	dd45      	ble.n	8001084 <__aeabi_fsub+0x294>
 8000ff8:	2dff      	cmp	r5, #255	; 0xff
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_fsub+0x20e>
 8000ffc:	e74f      	b.n	8000e9e <__aeabi_fsub+0xae>
 8000ffe:	2407      	movs	r4, #7
 8001000:	444b      	add	r3, r9
 8001002:	085b      	lsrs	r3, r3, #1
 8001004:	401c      	ands	r4, r3
 8001006:	e738      	b.n	8000e7a <__aeabi_fsub+0x8a>
 8001008:	2207      	movs	r2, #7
 800100a:	4b5a      	ldr	r3, [pc, #360]	; (8001174 <__aeabi_fsub+0x384>)
 800100c:	1a2d      	subs	r5, r5, r0
 800100e:	4023      	ands	r3, r4
 8001010:	4014      	ands	r4, r2
 8001012:	e732      	b.n	8000e7a <__aeabi_fsub+0x8a>
 8001014:	2c00      	cmp	r4, #0
 8001016:	d11d      	bne.n	8001054 <__aeabi_fsub+0x264>
 8001018:	2b00      	cmp	r3, #0
 800101a:	d17a      	bne.n	8001112 <__aeabi_fsub+0x322>
 800101c:	464b      	mov	r3, r9
 800101e:	2b00      	cmp	r3, #0
 8001020:	d100      	bne.n	8001024 <__aeabi_fsub+0x234>
 8001022:	e091      	b.n	8001148 <__aeabi_fsub+0x358>
 8001024:	000a      	movs	r2, r1
 8001026:	2500      	movs	r5, #0
 8001028:	e7b5      	b.n	8000f96 <__aeabi_fsub+0x1a6>
 800102a:	3e01      	subs	r6, #1
 800102c:	2e00      	cmp	r6, #0
 800102e:	d119      	bne.n	8001064 <__aeabi_fsub+0x274>
 8001030:	444b      	add	r3, r9
 8001032:	e76c      	b.n	8000f0e <__aeabi_fsub+0x11e>
 8001034:	2cff      	cmp	r4, #255	; 0xff
 8001036:	d184      	bne.n	8000f42 <__aeabi_fsub+0x152>
 8001038:	25ff      	movs	r5, #255	; 0xff
 800103a:	e7ac      	b.n	8000f96 <__aeabi_fsub+0x1a6>
 800103c:	464a      	mov	r2, r9
 800103e:	4688      	mov	r8, r1
 8001040:	1ad4      	subs	r4, r2, r3
 8001042:	e705      	b.n	8000e50 <__aeabi_fsub+0x60>
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1c5      	bne.n	8000fd4 <__aeabi_fsub+0x1e4>
 8001048:	000a      	movs	r2, r1
 800104a:	28ff      	cmp	r0, #255	; 0xff
 800104c:	d0c8      	beq.n	8000fe0 <__aeabi_fsub+0x1f0>
 800104e:	0005      	movs	r5, r0
 8001050:	464b      	mov	r3, r9
 8001052:	e7a0      	b.n	8000f96 <__aeabi_fsub+0x1a6>
 8001054:	2b00      	cmp	r3, #0
 8001056:	d149      	bne.n	80010ec <__aeabi_fsub+0x2fc>
 8001058:	464b      	mov	r3, r9
 800105a:	2b00      	cmp	r3, #0
 800105c:	d077      	beq.n	800114e <__aeabi_fsub+0x35e>
 800105e:	000a      	movs	r2, r1
 8001060:	25ff      	movs	r5, #255	; 0xff
 8001062:	e798      	b.n	8000f96 <__aeabi_fsub+0x1a6>
 8001064:	2cff      	cmp	r4, #255	; 0xff
 8001066:	d000      	beq.n	800106a <__aeabi_fsub+0x27a>
 8001068:	e743      	b.n	8000ef2 <__aeabi_fsub+0x102>
 800106a:	e787      	b.n	8000f7c <__aeabi_fsub+0x18c>
 800106c:	000a      	movs	r2, r1
 800106e:	24ff      	movs	r4, #255	; 0xff
 8001070:	2300      	movs	r3, #0
 8001072:	e716      	b.n	8000ea2 <__aeabi_fsub+0xb2>
 8001074:	2c00      	cmp	r4, #0
 8001076:	d115      	bne.n	80010a4 <__aeabi_fsub+0x2b4>
 8001078:	2b00      	cmp	r3, #0
 800107a:	d157      	bne.n	800112c <__aeabi_fsub+0x33c>
 800107c:	28ff      	cmp	r0, #255	; 0xff
 800107e:	d1e6      	bne.n	800104e <__aeabi_fsub+0x25e>
 8001080:	464b      	mov	r3, r9
 8001082:	e77b      	b.n	8000f7c <__aeabi_fsub+0x18c>
 8001084:	2c00      	cmp	r4, #0
 8001086:	d120      	bne.n	80010ca <__aeabi_fsub+0x2da>
 8001088:	2b00      	cmp	r3, #0
 800108a:	d057      	beq.n	800113c <__aeabi_fsub+0x34c>
 800108c:	4649      	mov	r1, r9
 800108e:	2900      	cmp	r1, #0
 8001090:	d053      	beq.n	800113a <__aeabi_fsub+0x34a>
 8001092:	444b      	add	r3, r9
 8001094:	015a      	lsls	r2, r3, #5
 8001096:	d568      	bpl.n	800116a <__aeabi_fsub+0x37a>
 8001098:	2407      	movs	r4, #7
 800109a:	4a36      	ldr	r2, [pc, #216]	; (8001174 <__aeabi_fsub+0x384>)
 800109c:	401c      	ands	r4, r3
 800109e:	2501      	movs	r5, #1
 80010a0:	4013      	ands	r3, r2
 80010a2:	e6ea      	b.n	8000e7a <__aeabi_fsub+0x8a>
 80010a4:	28ff      	cmp	r0, #255	; 0xff
 80010a6:	d0eb      	beq.n	8001080 <__aeabi_fsub+0x290>
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	04d2      	lsls	r2, r2, #19
 80010ac:	4276      	negs	r6, r6
 80010ae:	4313      	orrs	r3, r2
 80010b0:	2e1b      	cmp	r6, #27
 80010b2:	dc53      	bgt.n	800115c <__aeabi_fsub+0x36c>
 80010b4:	2520      	movs	r5, #32
 80010b6:	1bad      	subs	r5, r5, r6
 80010b8:	001a      	movs	r2, r3
 80010ba:	40ab      	lsls	r3, r5
 80010bc:	40f2      	lsrs	r2, r6
 80010be:	1e5c      	subs	r4, r3, #1
 80010c0:	41a3      	sbcs	r3, r4
 80010c2:	4313      	orrs	r3, r2
 80010c4:	444b      	add	r3, r9
 80010c6:	0005      	movs	r5, r0
 80010c8:	e721      	b.n	8000f0e <__aeabi_fsub+0x11e>
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0d8      	beq.n	8001080 <__aeabi_fsub+0x290>
 80010ce:	4649      	mov	r1, r9
 80010d0:	2900      	cmp	r1, #0
 80010d2:	d100      	bne.n	80010d6 <__aeabi_fsub+0x2e6>
 80010d4:	e752      	b.n	8000f7c <__aeabi_fsub+0x18c>
 80010d6:	2180      	movs	r1, #128	; 0x80
 80010d8:	03c9      	lsls	r1, r1, #15
 80010da:	420f      	tst	r7, r1
 80010dc:	d100      	bne.n	80010e0 <__aeabi_fsub+0x2f0>
 80010de:	e74d      	b.n	8000f7c <__aeabi_fsub+0x18c>
 80010e0:	4660      	mov	r0, ip
 80010e2:	4208      	tst	r0, r1
 80010e4:	d000      	beq.n	80010e8 <__aeabi_fsub+0x2f8>
 80010e6:	e749      	b.n	8000f7c <__aeabi_fsub+0x18c>
 80010e8:	464b      	mov	r3, r9
 80010ea:	e747      	b.n	8000f7c <__aeabi_fsub+0x18c>
 80010ec:	4648      	mov	r0, r9
 80010ee:	25ff      	movs	r5, #255	; 0xff
 80010f0:	2800      	cmp	r0, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_fsub+0x306>
 80010f4:	e74f      	b.n	8000f96 <__aeabi_fsub+0x1a6>
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	03d2      	lsls	r2, r2, #15
 80010fa:	4217      	tst	r7, r2
 80010fc:	d004      	beq.n	8001108 <__aeabi_fsub+0x318>
 80010fe:	4660      	mov	r0, ip
 8001100:	4210      	tst	r0, r2
 8001102:	d101      	bne.n	8001108 <__aeabi_fsub+0x318>
 8001104:	464b      	mov	r3, r9
 8001106:	4688      	mov	r8, r1
 8001108:	2201      	movs	r2, #1
 800110a:	4641      	mov	r1, r8
 800110c:	25ff      	movs	r5, #255	; 0xff
 800110e:	400a      	ands	r2, r1
 8001110:	e741      	b.n	8000f96 <__aeabi_fsub+0x1a6>
 8001112:	4648      	mov	r0, r9
 8001114:	2800      	cmp	r0, #0
 8001116:	d01f      	beq.n	8001158 <__aeabi_fsub+0x368>
 8001118:	1a1a      	subs	r2, r3, r0
 800111a:	0150      	lsls	r0, r2, #5
 800111c:	d520      	bpl.n	8001160 <__aeabi_fsub+0x370>
 800111e:	464a      	mov	r2, r9
 8001120:	2407      	movs	r4, #7
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	401c      	ands	r4, r3
 8001126:	4688      	mov	r8, r1
 8001128:	2500      	movs	r5, #0
 800112a:	e6a6      	b.n	8000e7a <__aeabi_fsub+0x8a>
 800112c:	1c74      	adds	r4, r6, #1
 800112e:	d0c9      	beq.n	80010c4 <__aeabi_fsub+0x2d4>
 8001130:	43f6      	mvns	r6, r6
 8001132:	28ff      	cmp	r0, #255	; 0xff
 8001134:	d1bc      	bne.n	80010b0 <__aeabi_fsub+0x2c0>
 8001136:	464b      	mov	r3, r9
 8001138:	e720      	b.n	8000f7c <__aeabi_fsub+0x18c>
 800113a:	4699      	mov	r9, r3
 800113c:	464b      	mov	r3, r9
 800113e:	2500      	movs	r5, #0
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	e72b      	b.n	8000f9c <__aeabi_fsub+0x1ac>
 8001144:	2301      	movs	r3, #1
 8001146:	e740      	b.n	8000fca <__aeabi_fsub+0x1da>
 8001148:	2200      	movs	r2, #0
 800114a:	2300      	movs	r3, #0
 800114c:	e6a9      	b.n	8000ea2 <__aeabi_fsub+0xb2>
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	2200      	movs	r2, #0
 8001152:	03db      	lsls	r3, r3, #15
 8001154:	24ff      	movs	r4, #255	; 0xff
 8001156:	e6a4      	b.n	8000ea2 <__aeabi_fsub+0xb2>
 8001158:	2500      	movs	r5, #0
 800115a:	e71c      	b.n	8000f96 <__aeabi_fsub+0x1a6>
 800115c:	2301      	movs	r3, #1
 800115e:	e7b1      	b.n	80010c4 <__aeabi_fsub+0x2d4>
 8001160:	2a00      	cmp	r2, #0
 8001162:	d0f1      	beq.n	8001148 <__aeabi_fsub+0x358>
 8001164:	0013      	movs	r3, r2
 8001166:	2500      	movs	r5, #0
 8001168:	e6fc      	b.n	8000f64 <__aeabi_fsub+0x174>
 800116a:	2500      	movs	r5, #0
 800116c:	e6fa      	b.n	8000f64 <__aeabi_fsub+0x174>
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	7dffffff 	.word	0x7dffffff
 8001174:	fbffffff 	.word	0xfbffffff

08001178 <__aeabi_f2iz>:
 8001178:	0241      	lsls	r1, r0, #9
 800117a:	0042      	lsls	r2, r0, #1
 800117c:	0fc3      	lsrs	r3, r0, #31
 800117e:	0a49      	lsrs	r1, r1, #9
 8001180:	0e12      	lsrs	r2, r2, #24
 8001182:	2000      	movs	r0, #0
 8001184:	2a7e      	cmp	r2, #126	; 0x7e
 8001186:	d90d      	bls.n	80011a4 <__aeabi_f2iz+0x2c>
 8001188:	2a9d      	cmp	r2, #157	; 0x9d
 800118a:	d80c      	bhi.n	80011a6 <__aeabi_f2iz+0x2e>
 800118c:	2080      	movs	r0, #128	; 0x80
 800118e:	0400      	lsls	r0, r0, #16
 8001190:	4301      	orrs	r1, r0
 8001192:	2a95      	cmp	r2, #149	; 0x95
 8001194:	dc0a      	bgt.n	80011ac <__aeabi_f2iz+0x34>
 8001196:	2096      	movs	r0, #150	; 0x96
 8001198:	1a82      	subs	r2, r0, r2
 800119a:	40d1      	lsrs	r1, r2
 800119c:	4248      	negs	r0, r1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_f2iz+0x2c>
 80011a2:	0008      	movs	r0, r1
 80011a4:	4770      	bx	lr
 80011a6:	4a03      	ldr	r2, [pc, #12]	; (80011b4 <__aeabi_f2iz+0x3c>)
 80011a8:	1898      	adds	r0, r3, r2
 80011aa:	e7fb      	b.n	80011a4 <__aeabi_f2iz+0x2c>
 80011ac:	3a96      	subs	r2, #150	; 0x96
 80011ae:	4091      	lsls	r1, r2
 80011b0:	e7f4      	b.n	800119c <__aeabi_f2iz+0x24>
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	7fffffff 	.word	0x7fffffff

080011b8 <__aeabi_i2f>:
 80011b8:	b570      	push	{r4, r5, r6, lr}
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d03d      	beq.n	800123a <__aeabi_i2f+0x82>
 80011be:	17c3      	asrs	r3, r0, #31
 80011c0:	18c5      	adds	r5, r0, r3
 80011c2:	405d      	eors	r5, r3
 80011c4:	0fc4      	lsrs	r4, r0, #31
 80011c6:	0028      	movs	r0, r5
 80011c8:	f000 f99a 	bl	8001500 <__clzsi2>
 80011cc:	229e      	movs	r2, #158	; 0x9e
 80011ce:	1a12      	subs	r2, r2, r0
 80011d0:	2a96      	cmp	r2, #150	; 0x96
 80011d2:	dc07      	bgt.n	80011e4 <__aeabi_i2f+0x2c>
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	2808      	cmp	r0, #8
 80011d8:	dd33      	ble.n	8001242 <__aeabi_i2f+0x8a>
 80011da:	3808      	subs	r0, #8
 80011dc:	4085      	lsls	r5, r0
 80011de:	0268      	lsls	r0, r5, #9
 80011e0:	0a40      	lsrs	r0, r0, #9
 80011e2:	e023      	b.n	800122c <__aeabi_i2f+0x74>
 80011e4:	2a99      	cmp	r2, #153	; 0x99
 80011e6:	dd0b      	ble.n	8001200 <__aeabi_i2f+0x48>
 80011e8:	2305      	movs	r3, #5
 80011ea:	0029      	movs	r1, r5
 80011ec:	1a1b      	subs	r3, r3, r0
 80011ee:	40d9      	lsrs	r1, r3
 80011f0:	0003      	movs	r3, r0
 80011f2:	331b      	adds	r3, #27
 80011f4:	409d      	lsls	r5, r3
 80011f6:	002b      	movs	r3, r5
 80011f8:	1e5d      	subs	r5, r3, #1
 80011fa:	41ab      	sbcs	r3, r5
 80011fc:	4319      	orrs	r1, r3
 80011fe:	000d      	movs	r5, r1
 8001200:	2805      	cmp	r0, #5
 8001202:	dd01      	ble.n	8001208 <__aeabi_i2f+0x50>
 8001204:	1f43      	subs	r3, r0, #5
 8001206:	409d      	lsls	r5, r3
 8001208:	002b      	movs	r3, r5
 800120a:	490f      	ldr	r1, [pc, #60]	; (8001248 <__aeabi_i2f+0x90>)
 800120c:	400b      	ands	r3, r1
 800120e:	076e      	lsls	r6, r5, #29
 8001210:	d009      	beq.n	8001226 <__aeabi_i2f+0x6e>
 8001212:	260f      	movs	r6, #15
 8001214:	4035      	ands	r5, r6
 8001216:	2d04      	cmp	r5, #4
 8001218:	d005      	beq.n	8001226 <__aeabi_i2f+0x6e>
 800121a:	3304      	adds	r3, #4
 800121c:	015d      	lsls	r5, r3, #5
 800121e:	d502      	bpl.n	8001226 <__aeabi_i2f+0x6e>
 8001220:	229f      	movs	r2, #159	; 0x9f
 8001222:	400b      	ands	r3, r1
 8001224:	1a12      	subs	r2, r2, r0
 8001226:	019b      	lsls	r3, r3, #6
 8001228:	0a58      	lsrs	r0, r3, #9
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	0240      	lsls	r0, r0, #9
 800122e:	05d2      	lsls	r2, r2, #23
 8001230:	0a40      	lsrs	r0, r0, #9
 8001232:	07e4      	lsls	r4, r4, #31
 8001234:	4310      	orrs	r0, r2
 8001236:	4320      	orrs	r0, r4
 8001238:	bd70      	pop	{r4, r5, r6, pc}
 800123a:	2400      	movs	r4, #0
 800123c:	2200      	movs	r2, #0
 800123e:	2000      	movs	r0, #0
 8001240:	e7f4      	b.n	800122c <__aeabi_i2f+0x74>
 8001242:	0268      	lsls	r0, r5, #9
 8001244:	0a40      	lsrs	r0, r0, #9
 8001246:	e7f1      	b.n	800122c <__aeabi_i2f+0x74>
 8001248:	fbffffff 	.word	0xfbffffff

0800124c <__eqdf2>:
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124e:	464f      	mov	r7, r9
 8001250:	4646      	mov	r6, r8
 8001252:	46d6      	mov	lr, sl
 8001254:	4684      	mov	ip, r0
 8001256:	b5c0      	push	{r6, r7, lr}
 8001258:	4680      	mov	r8, r0
 800125a:	4e19      	ldr	r6, [pc, #100]	; (80012c0 <__eqdf2+0x74>)
 800125c:	0318      	lsls	r0, r3, #12
 800125e:	030f      	lsls	r7, r1, #12
 8001260:	004d      	lsls	r5, r1, #1
 8001262:	0b00      	lsrs	r0, r0, #12
 8001264:	005c      	lsls	r4, r3, #1
 8001266:	4682      	mov	sl, r0
 8001268:	0b3f      	lsrs	r7, r7, #12
 800126a:	0d6d      	lsrs	r5, r5, #21
 800126c:	0fc9      	lsrs	r1, r1, #31
 800126e:	4691      	mov	r9, r2
 8001270:	0d64      	lsrs	r4, r4, #21
 8001272:	0fdb      	lsrs	r3, r3, #31
 8001274:	2001      	movs	r0, #1
 8001276:	42b5      	cmp	r5, r6
 8001278:	d00a      	beq.n	8001290 <__eqdf2+0x44>
 800127a:	42b4      	cmp	r4, r6
 800127c:	d003      	beq.n	8001286 <__eqdf2+0x3a>
 800127e:	42a5      	cmp	r5, r4
 8001280:	d101      	bne.n	8001286 <__eqdf2+0x3a>
 8001282:	4557      	cmp	r7, sl
 8001284:	d00c      	beq.n	80012a0 <__eqdf2+0x54>
 8001286:	bc1c      	pop	{r2, r3, r4}
 8001288:	4690      	mov	r8, r2
 800128a:	4699      	mov	r9, r3
 800128c:	46a2      	mov	sl, r4
 800128e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001290:	4666      	mov	r6, ip
 8001292:	433e      	orrs	r6, r7
 8001294:	d1f7      	bne.n	8001286 <__eqdf2+0x3a>
 8001296:	42ac      	cmp	r4, r5
 8001298:	d1f5      	bne.n	8001286 <__eqdf2+0x3a>
 800129a:	4654      	mov	r4, sl
 800129c:	4314      	orrs	r4, r2
 800129e:	d1f2      	bne.n	8001286 <__eqdf2+0x3a>
 80012a0:	2001      	movs	r0, #1
 80012a2:	45c8      	cmp	r8, r9
 80012a4:	d1ef      	bne.n	8001286 <__eqdf2+0x3a>
 80012a6:	4299      	cmp	r1, r3
 80012a8:	d007      	beq.n	80012ba <__eqdf2+0x6e>
 80012aa:	2d00      	cmp	r5, #0
 80012ac:	d1eb      	bne.n	8001286 <__eqdf2+0x3a>
 80012ae:	4663      	mov	r3, ip
 80012b0:	431f      	orrs	r7, r3
 80012b2:	0038      	movs	r0, r7
 80012b4:	1e47      	subs	r7, r0, #1
 80012b6:	41b8      	sbcs	r0, r7
 80012b8:	e7e5      	b.n	8001286 <__eqdf2+0x3a>
 80012ba:	2000      	movs	r0, #0
 80012bc:	e7e3      	b.n	8001286 <__eqdf2+0x3a>
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	000007ff 	.word	0x000007ff

080012c4 <__gedf2>:
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c6:	464f      	mov	r7, r9
 80012c8:	4646      	mov	r6, r8
 80012ca:	46d6      	mov	lr, sl
 80012cc:	004d      	lsls	r5, r1, #1
 80012ce:	b5c0      	push	{r6, r7, lr}
 80012d0:	030e      	lsls	r6, r1, #12
 80012d2:	0fc9      	lsrs	r1, r1, #31
 80012d4:	468a      	mov	sl, r1
 80012d6:	492c      	ldr	r1, [pc, #176]	; (8001388 <__gedf2+0xc4>)
 80012d8:	031f      	lsls	r7, r3, #12
 80012da:	005c      	lsls	r4, r3, #1
 80012dc:	4680      	mov	r8, r0
 80012de:	0b36      	lsrs	r6, r6, #12
 80012e0:	0d6d      	lsrs	r5, r5, #21
 80012e2:	4691      	mov	r9, r2
 80012e4:	0b3f      	lsrs	r7, r7, #12
 80012e6:	0d64      	lsrs	r4, r4, #21
 80012e8:	0fdb      	lsrs	r3, r3, #31
 80012ea:	428d      	cmp	r5, r1
 80012ec:	d01e      	beq.n	800132c <__gedf2+0x68>
 80012ee:	428c      	cmp	r4, r1
 80012f0:	d016      	beq.n	8001320 <__gedf2+0x5c>
 80012f2:	2d00      	cmp	r5, #0
 80012f4:	d11e      	bne.n	8001334 <__gedf2+0x70>
 80012f6:	4330      	orrs	r0, r6
 80012f8:	4684      	mov	ip, r0
 80012fa:	2c00      	cmp	r4, #0
 80012fc:	d101      	bne.n	8001302 <__gedf2+0x3e>
 80012fe:	433a      	orrs	r2, r7
 8001300:	d023      	beq.n	800134a <__gedf2+0x86>
 8001302:	4662      	mov	r2, ip
 8001304:	2a00      	cmp	r2, #0
 8001306:	d01a      	beq.n	800133e <__gedf2+0x7a>
 8001308:	459a      	cmp	sl, r3
 800130a:	d029      	beq.n	8001360 <__gedf2+0x9c>
 800130c:	4651      	mov	r1, sl
 800130e:	2002      	movs	r0, #2
 8001310:	3901      	subs	r1, #1
 8001312:	4008      	ands	r0, r1
 8001314:	3801      	subs	r0, #1
 8001316:	bc1c      	pop	{r2, r3, r4}
 8001318:	4690      	mov	r8, r2
 800131a:	4699      	mov	r9, r3
 800131c:	46a2      	mov	sl, r4
 800131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001320:	0039      	movs	r1, r7
 8001322:	4311      	orrs	r1, r2
 8001324:	d0e5      	beq.n	80012f2 <__gedf2+0x2e>
 8001326:	2002      	movs	r0, #2
 8001328:	4240      	negs	r0, r0
 800132a:	e7f4      	b.n	8001316 <__gedf2+0x52>
 800132c:	4330      	orrs	r0, r6
 800132e:	d1fa      	bne.n	8001326 <__gedf2+0x62>
 8001330:	42ac      	cmp	r4, r5
 8001332:	d00f      	beq.n	8001354 <__gedf2+0x90>
 8001334:	2c00      	cmp	r4, #0
 8001336:	d10f      	bne.n	8001358 <__gedf2+0x94>
 8001338:	433a      	orrs	r2, r7
 800133a:	d0e7      	beq.n	800130c <__gedf2+0x48>
 800133c:	e00c      	b.n	8001358 <__gedf2+0x94>
 800133e:	2201      	movs	r2, #1
 8001340:	3b01      	subs	r3, #1
 8001342:	4393      	bics	r3, r2
 8001344:	0018      	movs	r0, r3
 8001346:	3001      	adds	r0, #1
 8001348:	e7e5      	b.n	8001316 <__gedf2+0x52>
 800134a:	4663      	mov	r3, ip
 800134c:	2000      	movs	r0, #0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0e1      	beq.n	8001316 <__gedf2+0x52>
 8001352:	e7db      	b.n	800130c <__gedf2+0x48>
 8001354:	433a      	orrs	r2, r7
 8001356:	d1e6      	bne.n	8001326 <__gedf2+0x62>
 8001358:	459a      	cmp	sl, r3
 800135a:	d1d7      	bne.n	800130c <__gedf2+0x48>
 800135c:	42a5      	cmp	r5, r4
 800135e:	dcd5      	bgt.n	800130c <__gedf2+0x48>
 8001360:	42a5      	cmp	r5, r4
 8001362:	db05      	blt.n	8001370 <__gedf2+0xac>
 8001364:	42be      	cmp	r6, r7
 8001366:	d8d1      	bhi.n	800130c <__gedf2+0x48>
 8001368:	d008      	beq.n	800137c <__gedf2+0xb8>
 800136a:	2000      	movs	r0, #0
 800136c:	42be      	cmp	r6, r7
 800136e:	d2d2      	bcs.n	8001316 <__gedf2+0x52>
 8001370:	4650      	mov	r0, sl
 8001372:	2301      	movs	r3, #1
 8001374:	3801      	subs	r0, #1
 8001376:	4398      	bics	r0, r3
 8001378:	3001      	adds	r0, #1
 800137a:	e7cc      	b.n	8001316 <__gedf2+0x52>
 800137c:	45c8      	cmp	r8, r9
 800137e:	d8c5      	bhi.n	800130c <__gedf2+0x48>
 8001380:	2000      	movs	r0, #0
 8001382:	45c8      	cmp	r8, r9
 8001384:	d3f4      	bcc.n	8001370 <__gedf2+0xac>
 8001386:	e7c6      	b.n	8001316 <__gedf2+0x52>
 8001388:	000007ff 	.word	0x000007ff

0800138c <__ledf2>:
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	464f      	mov	r7, r9
 8001390:	4646      	mov	r6, r8
 8001392:	46d6      	mov	lr, sl
 8001394:	004d      	lsls	r5, r1, #1
 8001396:	b5c0      	push	{r6, r7, lr}
 8001398:	030e      	lsls	r6, r1, #12
 800139a:	0fc9      	lsrs	r1, r1, #31
 800139c:	468a      	mov	sl, r1
 800139e:	492e      	ldr	r1, [pc, #184]	; (8001458 <__ledf2+0xcc>)
 80013a0:	031f      	lsls	r7, r3, #12
 80013a2:	005c      	lsls	r4, r3, #1
 80013a4:	4680      	mov	r8, r0
 80013a6:	0b36      	lsrs	r6, r6, #12
 80013a8:	0d6d      	lsrs	r5, r5, #21
 80013aa:	4691      	mov	r9, r2
 80013ac:	0b3f      	lsrs	r7, r7, #12
 80013ae:	0d64      	lsrs	r4, r4, #21
 80013b0:	0fdb      	lsrs	r3, r3, #31
 80013b2:	428d      	cmp	r5, r1
 80013b4:	d018      	beq.n	80013e8 <__ledf2+0x5c>
 80013b6:	428c      	cmp	r4, r1
 80013b8:	d011      	beq.n	80013de <__ledf2+0x52>
 80013ba:	2d00      	cmp	r5, #0
 80013bc:	d118      	bne.n	80013f0 <__ledf2+0x64>
 80013be:	4330      	orrs	r0, r6
 80013c0:	4684      	mov	ip, r0
 80013c2:	2c00      	cmp	r4, #0
 80013c4:	d11e      	bne.n	8001404 <__ledf2+0x78>
 80013c6:	433a      	orrs	r2, r7
 80013c8:	d11c      	bne.n	8001404 <__ledf2+0x78>
 80013ca:	4663      	mov	r3, ip
 80013cc:	2000      	movs	r0, #0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d030      	beq.n	8001434 <__ledf2+0xa8>
 80013d2:	4651      	mov	r1, sl
 80013d4:	2002      	movs	r0, #2
 80013d6:	3901      	subs	r1, #1
 80013d8:	4008      	ands	r0, r1
 80013da:	3801      	subs	r0, #1
 80013dc:	e02a      	b.n	8001434 <__ledf2+0xa8>
 80013de:	0039      	movs	r1, r7
 80013e0:	4311      	orrs	r1, r2
 80013e2:	d0ea      	beq.n	80013ba <__ledf2+0x2e>
 80013e4:	2002      	movs	r0, #2
 80013e6:	e025      	b.n	8001434 <__ledf2+0xa8>
 80013e8:	4330      	orrs	r0, r6
 80013ea:	d1fb      	bne.n	80013e4 <__ledf2+0x58>
 80013ec:	42ac      	cmp	r4, r5
 80013ee:	d026      	beq.n	800143e <__ledf2+0xb2>
 80013f0:	2c00      	cmp	r4, #0
 80013f2:	d126      	bne.n	8001442 <__ledf2+0xb6>
 80013f4:	433a      	orrs	r2, r7
 80013f6:	d124      	bne.n	8001442 <__ledf2+0xb6>
 80013f8:	4651      	mov	r1, sl
 80013fa:	2002      	movs	r0, #2
 80013fc:	3901      	subs	r1, #1
 80013fe:	4008      	ands	r0, r1
 8001400:	3801      	subs	r0, #1
 8001402:	e017      	b.n	8001434 <__ledf2+0xa8>
 8001404:	4662      	mov	r2, ip
 8001406:	2a00      	cmp	r2, #0
 8001408:	d00f      	beq.n	800142a <__ledf2+0x9e>
 800140a:	459a      	cmp	sl, r3
 800140c:	d1e1      	bne.n	80013d2 <__ledf2+0x46>
 800140e:	42a5      	cmp	r5, r4
 8001410:	db05      	blt.n	800141e <__ledf2+0x92>
 8001412:	42be      	cmp	r6, r7
 8001414:	d8dd      	bhi.n	80013d2 <__ledf2+0x46>
 8001416:	d019      	beq.n	800144c <__ledf2+0xc0>
 8001418:	2000      	movs	r0, #0
 800141a:	42be      	cmp	r6, r7
 800141c:	d20a      	bcs.n	8001434 <__ledf2+0xa8>
 800141e:	4650      	mov	r0, sl
 8001420:	2301      	movs	r3, #1
 8001422:	3801      	subs	r0, #1
 8001424:	4398      	bics	r0, r3
 8001426:	3001      	adds	r0, #1
 8001428:	e004      	b.n	8001434 <__ledf2+0xa8>
 800142a:	2201      	movs	r2, #1
 800142c:	3b01      	subs	r3, #1
 800142e:	4393      	bics	r3, r2
 8001430:	0018      	movs	r0, r3
 8001432:	3001      	adds	r0, #1
 8001434:	bc1c      	pop	{r2, r3, r4}
 8001436:	4690      	mov	r8, r2
 8001438:	4699      	mov	r9, r3
 800143a:	46a2      	mov	sl, r4
 800143c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800143e:	433a      	orrs	r2, r7
 8001440:	d1d0      	bne.n	80013e4 <__ledf2+0x58>
 8001442:	459a      	cmp	sl, r3
 8001444:	d1c5      	bne.n	80013d2 <__ledf2+0x46>
 8001446:	42a5      	cmp	r5, r4
 8001448:	dcc3      	bgt.n	80013d2 <__ledf2+0x46>
 800144a:	e7e0      	b.n	800140e <__ledf2+0x82>
 800144c:	45c8      	cmp	r8, r9
 800144e:	d8c0      	bhi.n	80013d2 <__ledf2+0x46>
 8001450:	2000      	movs	r0, #0
 8001452:	45c8      	cmp	r8, r9
 8001454:	d3e3      	bcc.n	800141e <__ledf2+0x92>
 8001456:	e7ed      	b.n	8001434 <__ledf2+0xa8>
 8001458:	000007ff 	.word	0x000007ff

0800145c <__aeabi_f2d>:
 800145c:	0041      	lsls	r1, r0, #1
 800145e:	0e09      	lsrs	r1, r1, #24
 8001460:	1c4b      	adds	r3, r1, #1
 8001462:	b570      	push	{r4, r5, r6, lr}
 8001464:	b2db      	uxtb	r3, r3
 8001466:	0246      	lsls	r6, r0, #9
 8001468:	0a75      	lsrs	r5, r6, #9
 800146a:	0fc4      	lsrs	r4, r0, #31
 800146c:	2b01      	cmp	r3, #1
 800146e:	dd14      	ble.n	800149a <__aeabi_f2d+0x3e>
 8001470:	23e0      	movs	r3, #224	; 0xe0
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	076d      	lsls	r5, r5, #29
 8001476:	0b36      	lsrs	r6, r6, #12
 8001478:	18cb      	adds	r3, r1, r3
 800147a:	2100      	movs	r1, #0
 800147c:	0d0a      	lsrs	r2, r1, #20
 800147e:	0028      	movs	r0, r5
 8001480:	0512      	lsls	r2, r2, #20
 8001482:	4d1c      	ldr	r5, [pc, #112]	; (80014f4 <__aeabi_f2d+0x98>)
 8001484:	4332      	orrs	r2, r6
 8001486:	055b      	lsls	r3, r3, #21
 8001488:	402a      	ands	r2, r5
 800148a:	085b      	lsrs	r3, r3, #1
 800148c:	4313      	orrs	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	07e4      	lsls	r4, r4, #31
 8001492:	085b      	lsrs	r3, r3, #1
 8001494:	4323      	orrs	r3, r4
 8001496:	0019      	movs	r1, r3
 8001498:	bd70      	pop	{r4, r5, r6, pc}
 800149a:	2900      	cmp	r1, #0
 800149c:	d114      	bne.n	80014c8 <__aeabi_f2d+0x6c>
 800149e:	2d00      	cmp	r5, #0
 80014a0:	d01e      	beq.n	80014e0 <__aeabi_f2d+0x84>
 80014a2:	0028      	movs	r0, r5
 80014a4:	f000 f82c 	bl	8001500 <__clzsi2>
 80014a8:	280a      	cmp	r0, #10
 80014aa:	dc1c      	bgt.n	80014e6 <__aeabi_f2d+0x8a>
 80014ac:	230b      	movs	r3, #11
 80014ae:	002a      	movs	r2, r5
 80014b0:	1a1b      	subs	r3, r3, r0
 80014b2:	40da      	lsrs	r2, r3
 80014b4:	0003      	movs	r3, r0
 80014b6:	3315      	adds	r3, #21
 80014b8:	409d      	lsls	r5, r3
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <__aeabi_f2d+0x9c>)
 80014bc:	0312      	lsls	r2, r2, #12
 80014be:	1a1b      	subs	r3, r3, r0
 80014c0:	055b      	lsls	r3, r3, #21
 80014c2:	0b16      	lsrs	r6, r2, #12
 80014c4:	0d5b      	lsrs	r3, r3, #21
 80014c6:	e7d8      	b.n	800147a <__aeabi_f2d+0x1e>
 80014c8:	2d00      	cmp	r5, #0
 80014ca:	d006      	beq.n	80014da <__aeabi_f2d+0x7e>
 80014cc:	0b32      	lsrs	r2, r6, #12
 80014ce:	2680      	movs	r6, #128	; 0x80
 80014d0:	0336      	lsls	r6, r6, #12
 80014d2:	076d      	lsls	r5, r5, #29
 80014d4:	4316      	orrs	r6, r2
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <__aeabi_f2d+0xa0>)
 80014d8:	e7cf      	b.n	800147a <__aeabi_f2d+0x1e>
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <__aeabi_f2d+0xa0>)
 80014dc:	2600      	movs	r6, #0
 80014de:	e7cc      	b.n	800147a <__aeabi_f2d+0x1e>
 80014e0:	2300      	movs	r3, #0
 80014e2:	2600      	movs	r6, #0
 80014e4:	e7c9      	b.n	800147a <__aeabi_f2d+0x1e>
 80014e6:	0003      	movs	r3, r0
 80014e8:	002a      	movs	r2, r5
 80014ea:	3b0b      	subs	r3, #11
 80014ec:	409a      	lsls	r2, r3
 80014ee:	2500      	movs	r5, #0
 80014f0:	e7e3      	b.n	80014ba <__aeabi_f2d+0x5e>
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	800fffff 	.word	0x800fffff
 80014f8:	00000389 	.word	0x00000389
 80014fc:	000007ff 	.word	0x000007ff

08001500 <__clzsi2>:
 8001500:	211c      	movs	r1, #28
 8001502:	2301      	movs	r3, #1
 8001504:	041b      	lsls	r3, r3, #16
 8001506:	4298      	cmp	r0, r3
 8001508:	d301      	bcc.n	800150e <__clzsi2+0xe>
 800150a:	0c00      	lsrs	r0, r0, #16
 800150c:	3910      	subs	r1, #16
 800150e:	0a1b      	lsrs	r3, r3, #8
 8001510:	4298      	cmp	r0, r3
 8001512:	d301      	bcc.n	8001518 <__clzsi2+0x18>
 8001514:	0a00      	lsrs	r0, r0, #8
 8001516:	3908      	subs	r1, #8
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	4298      	cmp	r0, r3
 800151c:	d301      	bcc.n	8001522 <__clzsi2+0x22>
 800151e:	0900      	lsrs	r0, r0, #4
 8001520:	3904      	subs	r1, #4
 8001522:	a202      	add	r2, pc, #8	; (adr r2, 800152c <__clzsi2+0x2c>)
 8001524:	5c10      	ldrb	r0, [r2, r0]
 8001526:	1840      	adds	r0, r0, r1
 8001528:	4770      	bx	lr
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	02020304 	.word	0x02020304
 8001530:	01010101 	.word	0x01010101
	...

0800153c <__clzdi2>:
 800153c:	b510      	push	{r4, lr}
 800153e:	2900      	cmp	r1, #0
 8001540:	d103      	bne.n	800154a <__clzdi2+0xe>
 8001542:	f7ff ffdd 	bl	8001500 <__clzsi2>
 8001546:	3020      	adds	r0, #32
 8001548:	e002      	b.n	8001550 <__clzdi2+0x14>
 800154a:	1c08      	adds	r0, r1, #0
 800154c:	f7ff ffd8 	bl	8001500 <__clzsi2>
 8001550:	bd10      	pop	{r4, pc}
 8001552:	46c0      	nop			; (mov r8, r8)

08001554 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_Init+0x3c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_Init+0x3c>)
 8001566:	2140      	movs	r1, #64	; 0x40
 8001568:	430a      	orrs	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800156c:	2000      	movs	r0, #0
 800156e:	f000 f811 	bl	8001594 <HAL_InitTick>
 8001572:	1e03      	subs	r3, r0, #0
 8001574:	d003      	beq.n	800157e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001576:	1dfb      	adds	r3, r7, #7
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e001      	b.n	8001582 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800157e:	f003 f897 	bl	80046b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001582:	1dfb      	adds	r3, r7, #7
 8001584:	781b      	ldrb	r3, [r3, #0]
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b002      	add	sp, #8
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	40022000 	.word	0x40022000

08001594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800159c:	230f      	movs	r3, #15
 800159e:	18fb      	adds	r3, r7, r3
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_InitTick+0x50>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	23fa      	movs	r3, #250	; 0xfa
 80015aa:	0099      	lsls	r1, r3, #2
 80015ac:	0010      	movs	r0, r2
 80015ae:	f7fe fdab 	bl	8000108 <__udivsi3>
 80015b2:	0003      	movs	r3, r0
 80015b4:	0018      	movs	r0, r3
 80015b6:	f000 f8fa 	bl	80017ae <HAL_SYSTICK_Config>
 80015ba:	1e03      	subs	r3, r0, #0
 80015bc:	d004      	beq.n	80015c8 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80015be:	230f      	movs	r3, #15
 80015c0:	18fb      	adds	r3, r7, r3
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	e006      	b.n	80015d6 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	2301      	movs	r3, #1
 80015cc:	425b      	negs	r3, r3
 80015ce:	2200      	movs	r2, #0
 80015d0:	0018      	movs	r0, r3
 80015d2:	f000 f8c7 	bl	8001764 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80015d6:	230f      	movs	r3, #15
 80015d8:	18fb      	adds	r3, r7, r3
 80015da:	781b      	ldrb	r3, [r3, #0]
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b004      	add	sp, #16
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000000 	.word	0x20000000

080015e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  uwTick++;
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <HAL_IncTick+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	4b02      	ldr	r3, [pc, #8]	; (80015fc <HAL_IncTick+0x14>)
 80015f4:	601a      	str	r2, [r3, #0]
}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200000a8 	.word	0x200000a8

08001600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b02      	ldr	r3, [pc, #8]	; (8001610 <HAL_GetTick+0x10>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	200000a8 	.word	0x200000a8

08001614 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	0002      	movs	r2, r0
 800161c:	1dfb      	adds	r3, r7, #7
 800161e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	001a      	movs	r2, r3
 8001626:	231f      	movs	r3, #31
 8001628:	401a      	ands	r2, r3
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <NVIC_EnableIRQ+0x28>)
 800162c:	2101      	movs	r1, #1
 800162e:	4091      	lsls	r1, r2
 8001630:	000a      	movs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
}
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b002      	add	sp, #8
 800163a:	bd80      	pop	{r7, pc}
 800163c:	e000e100 	.word	0xe000e100

08001640 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	0002      	movs	r2, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b7f      	cmp	r3, #127	; 0x7f
 8001654:	d932      	bls.n	80016bc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001656:	4a2f      	ldr	r2, [pc, #188]	; (8001714 <NVIC_SetPriority+0xd4>)
 8001658:	1dfb      	adds	r3, r7, #7
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	0019      	movs	r1, r3
 800165e:	230f      	movs	r3, #15
 8001660:	400b      	ands	r3, r1
 8001662:	3b08      	subs	r3, #8
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3306      	adds	r3, #6
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	18d3      	adds	r3, r2, r3
 800166c:	3304      	adds	r3, #4
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	1dfa      	adds	r2, r7, #7
 8001672:	7812      	ldrb	r2, [r2, #0]
 8001674:	0011      	movs	r1, r2
 8001676:	2203      	movs	r2, #3
 8001678:	400a      	ands	r2, r1
 800167a:	00d2      	lsls	r2, r2, #3
 800167c:	21ff      	movs	r1, #255	; 0xff
 800167e:	4091      	lsls	r1, r2
 8001680:	000a      	movs	r2, r1
 8001682:	43d2      	mvns	r2, r2
 8001684:	401a      	ands	r2, r3
 8001686:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	019b      	lsls	r3, r3, #6
 800168c:	22ff      	movs	r2, #255	; 0xff
 800168e:	401a      	ands	r2, r3
 8001690:	1dfb      	adds	r3, r7, #7
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	0018      	movs	r0, r3
 8001696:	2303      	movs	r3, #3
 8001698:	4003      	ands	r3, r0
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800169e:	481d      	ldr	r0, [pc, #116]	; (8001714 <NVIC_SetPriority+0xd4>)
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	001c      	movs	r4, r3
 80016a6:	230f      	movs	r3, #15
 80016a8:	4023      	ands	r3, r4
 80016aa:	3b08      	subs	r3, #8
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	430a      	orrs	r2, r1
 80016b0:	3306      	adds	r3, #6
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	18c3      	adds	r3, r0, r3
 80016b6:	3304      	adds	r3, #4
 80016b8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016ba:	e027      	b.n	800170c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016bc:	4a16      	ldr	r2, [pc, #88]	; (8001718 <NVIC_SetPriority+0xd8>)
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	33c0      	adds	r3, #192	; 0xc0
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	589b      	ldr	r3, [r3, r2]
 80016cc:	1dfa      	adds	r2, r7, #7
 80016ce:	7812      	ldrb	r2, [r2, #0]
 80016d0:	0011      	movs	r1, r2
 80016d2:	2203      	movs	r2, #3
 80016d4:	400a      	ands	r2, r1
 80016d6:	00d2      	lsls	r2, r2, #3
 80016d8:	21ff      	movs	r1, #255	; 0xff
 80016da:	4091      	lsls	r1, r2
 80016dc:	000a      	movs	r2, r1
 80016de:	43d2      	mvns	r2, r2
 80016e0:	401a      	ands	r2, r3
 80016e2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	019b      	lsls	r3, r3, #6
 80016e8:	22ff      	movs	r2, #255	; 0xff
 80016ea:	401a      	ands	r2, r3
 80016ec:	1dfb      	adds	r3, r7, #7
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	0018      	movs	r0, r3
 80016f2:	2303      	movs	r3, #3
 80016f4:	4003      	ands	r3, r0
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016fa:	4807      	ldr	r0, [pc, #28]	; (8001718 <NVIC_SetPriority+0xd8>)
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b25b      	sxtb	r3, r3
 8001702:	089b      	lsrs	r3, r3, #2
 8001704:	430a      	orrs	r2, r1
 8001706:	33c0      	adds	r3, #192	; 0xc0
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	501a      	str	r2, [r3, r0]
}
 800170c:	46c0      	nop			; (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b003      	add	sp, #12
 8001712:	bd90      	pop	{r4, r7, pc}
 8001714:	e000ed00 	.word	0xe000ed00
 8001718:	e000e100 	.word	0xe000e100

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	4a0c      	ldr	r2, [pc, #48]	; (800175c <SysTick_Config+0x40>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172e:	2301      	movs	r3, #1
 8001730:	e010      	b.n	8001754 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <SysTick_Config+0x44>)
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	3a01      	subs	r2, #1
 8001738:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173a:	2301      	movs	r3, #1
 800173c:	425b      	negs	r3, r3
 800173e:	2103      	movs	r1, #3
 8001740:	0018      	movs	r0, r3
 8001742:	f7ff ff7d 	bl	8001640 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <SysTick_Config+0x44>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SysTick_Config+0x44>)
 800174e:	2207      	movs	r2, #7
 8001750:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001752:	2300      	movs	r3, #0
}
 8001754:	0018      	movs	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	b002      	add	sp, #8
 800175a:	bd80      	pop	{r7, pc}
 800175c:	00ffffff 	.word	0x00ffffff
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	210f      	movs	r1, #15
 8001770:	187b      	adds	r3, r7, r1
 8001772:	1c02      	adds	r2, r0, #0
 8001774:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	187b      	adds	r3, r7, r1
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b25b      	sxtb	r3, r3
 800177e:	0011      	movs	r1, r2
 8001780:	0018      	movs	r0, r3
 8001782:	f7ff ff5d 	bl	8001640 <NVIC_SetPriority>
}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b004      	add	sp, #16
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	0002      	movs	r2, r0
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff ff37 	bl	8001614 <NVIC_EnableIRQ>
}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b002      	add	sp, #8
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff ffaf 	bl	800171c <SysTick_Config>
 80017be:	0003      	movs	r3, r0
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b002      	add	sp, #8
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80017de:	e155      	b.n	8001a8c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2101      	movs	r1, #1
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	4091      	lsls	r1, r2
 80017ea:	000a      	movs	r2, r1
 80017ec:	4013      	ands	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <HAL_GPIO_Init+0x30>
 80017f6:	e146      	b.n	8001a86 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x40>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b12      	cmp	r3, #18
 8001806:	d123      	bne.n	8001850 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	0092      	lsls	r2, r2, #2
 8001812:	58d3      	ldr	r3, [r2, r3]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	2207      	movs	r2, #7
 800181a:	4013      	ands	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	409a      	lsls	r2, r3
 8001822:	0013      	movs	r3, r2
 8001824:	43da      	mvns	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2107      	movs	r1, #7
 8001834:	400b      	ands	r3, r1
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	409a      	lsls	r2, r3
 800183a:	0013      	movs	r3, r2
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	0092      	lsls	r2, r2, #2
 800184c:	6939      	ldr	r1, [r7, #16]
 800184e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d00b      	beq.n	8001870 <HAL_GPIO_Init+0xa8>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d007      	beq.n	8001870 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001864:	2b11      	cmp	r3, #17
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b12      	cmp	r3, #18
 800186e:	d130      	bne.n	80018d2 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	409a      	lsls	r2, r3
 800187e:	0013      	movs	r3, r2
 8001880:	43da      	mvns	r2, r3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	409a      	lsls	r2, r3
 8001892:	0013      	movs	r3, r2
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a6:	2201      	movs	r2, #1
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
 80018ac:	0013      	movs	r3, r2
 80018ae:	43da      	mvns	r2, r3
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	2201      	movs	r2, #1
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
 80018c4:	0013      	movs	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	409a      	lsls	r2, r3
 80018e0:	0013      	movs	r3, r2
 80018e2:	43da      	mvns	r2, r3
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2203      	movs	r2, #3
 80018f0:	401a      	ands	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	409a      	lsls	r2, r3
 80018f8:	0013      	movs	r3, r2
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	409a      	lsls	r2, r3
 8001914:	0013      	movs	r3, r2
 8001916:	43da      	mvns	r2, r3
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	409a      	lsls	r2, r3
 8001928:	0013      	movs	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	055b      	lsls	r3, r3, #21
 800193e:	4013      	ands	r3, r2
 8001940:	d100      	bne.n	8001944 <HAL_GPIO_Init+0x17c>
 8001942:	e0a0      	b.n	8001a86 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001944:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <HAL_GPIO_Init+0x2dc>)
 8001946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001948:	4b56      	ldr	r3, [pc, #344]	; (8001aa4 <HAL_GPIO_Init+0x2dc>)
 800194a:	2101      	movs	r1, #1
 800194c:	430a      	orrs	r2, r1
 800194e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001950:	4a55      	ldr	r2, [pc, #340]	; (8001aa8 <HAL_GPIO_Init+0x2e0>)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	589b      	ldr	r3, [r3, r2]
 800195c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2203      	movs	r2, #3
 8001962:	4013      	ands	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	409a      	lsls	r2, r3
 800196a:	0013      	movs	r3, r2
 800196c:	43da      	mvns	r2, r3
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	23a0      	movs	r3, #160	; 0xa0
 8001978:	05db      	lsls	r3, r3, #23
 800197a:	429a      	cmp	r2, r3
 800197c:	d01f      	beq.n	80019be <HAL_GPIO_Init+0x1f6>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4a      	ldr	r2, [pc, #296]	; (8001aac <HAL_GPIO_Init+0x2e4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d019      	beq.n	80019ba <HAL_GPIO_Init+0x1f2>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a49      	ldr	r2, [pc, #292]	; (8001ab0 <HAL_GPIO_Init+0x2e8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0x1ee>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a48      	ldr	r2, [pc, #288]	; (8001ab4 <HAL_GPIO_Init+0x2ec>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00d      	beq.n	80019b2 <HAL_GPIO_Init+0x1ea>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a47      	ldr	r2, [pc, #284]	; (8001ab8 <HAL_GPIO_Init+0x2f0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d007      	beq.n	80019ae <HAL_GPIO_Init+0x1e6>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a46      	ldr	r2, [pc, #280]	; (8001abc <HAL_GPIO_Init+0x2f4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_GPIO_Init+0x1e2>
 80019a6:	2305      	movs	r3, #5
 80019a8:	e00a      	b.n	80019c0 <HAL_GPIO_Init+0x1f8>
 80019aa:	2306      	movs	r3, #6
 80019ac:	e008      	b.n	80019c0 <HAL_GPIO_Init+0x1f8>
 80019ae:	2304      	movs	r3, #4
 80019b0:	e006      	b.n	80019c0 <HAL_GPIO_Init+0x1f8>
 80019b2:	2303      	movs	r3, #3
 80019b4:	e004      	b.n	80019c0 <HAL_GPIO_Init+0x1f8>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e002      	b.n	80019c0 <HAL_GPIO_Init+0x1f8>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_GPIO_Init+0x1f8>
 80019be:	2300      	movs	r3, #0
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	2103      	movs	r1, #3
 80019c4:	400a      	ands	r2, r1
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	4093      	lsls	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d0:	4935      	ldr	r1, [pc, #212]	; (8001aa8 <HAL_GPIO_Init+0x2e0>)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019de:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <HAL_GPIO_Init+0x2f8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43da      	mvns	r2, r3
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	025b      	lsls	r3, r3, #9
 80019f6:	4013      	ands	r3, r2
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a02:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <HAL_GPIO_Init+0x2f8>)
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a08:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_GPIO_Init+0x2f8>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43da      	mvns	r2, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	029b      	lsls	r3, r3, #10
 8001a20:	4013      	ands	r3, r2
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a2c:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_GPIO_Init+0x2f8>)
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a32:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <HAL_GPIO_Init+0x2f8>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	035b      	lsls	r3, r3, #13
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <HAL_GPIO_Init+0x2f8>)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_GPIO_Init+0x2f8>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43da      	mvns	r2, r3
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	039b      	lsls	r3, r3, #14
 8001a74:	4013      	ands	r3, r2
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_GPIO_Init+0x2f8>)
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	40da      	lsrs	r2, r3
 8001a94:	1e13      	subs	r3, r2, #0
 8001a96:	d000      	beq.n	8001a9a <HAL_GPIO_Init+0x2d2>
 8001a98:	e6a2      	b.n	80017e0 <HAL_GPIO_Init+0x18>
  }
}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b006      	add	sp, #24
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010000 	.word	0x40010000
 8001aac:	50000400 	.word	0x50000400
 8001ab0:	50000800 	.word	0x50000800
 8001ab4:	50000c00 	.word	0x50000c00
 8001ab8:	50001000 	.word	0x50001000
 8001abc:	50001c00 	.word	0x50001c00
 8001ac0:	40010400 	.word	0x40010400

08001ac4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	0008      	movs	r0, r1
 8001ace:	0011      	movs	r1, r2
 8001ad0:	1cbb      	adds	r3, r7, #2
 8001ad2:	1c02      	adds	r2, r0, #0
 8001ad4:	801a      	strh	r2, [r3, #0]
 8001ad6:	1c7b      	adds	r3, r7, #1
 8001ad8:	1c0a      	adds	r2, r1, #0
 8001ada:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001adc:	1c7b      	adds	r3, r7, #1
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d004      	beq.n	8001aee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae4:	1cbb      	adds	r3, r7, #2
 8001ae6:	881a      	ldrh	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001aec:	e003      	b.n	8001af6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001aee:	1cbb      	adds	r3, r7, #2
 8001af0:	881a      	ldrh	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b002      	add	sp, #8
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	0002      	movs	r2, r0
 8001b08:	1dbb      	adds	r3, r7, #6
 8001b0a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	1dba      	adds	r2, r7, #6
 8001b12:	8812      	ldrh	r2, [r2, #0]
 8001b14:	4013      	ands	r3, r2
 8001b16:	d008      	beq.n	8001b2a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001b1a:	1dba      	adds	r2, r7, #6
 8001b1c:	8812      	ldrh	r2, [r2, #0]
 8001b1e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b20:	1dbb      	adds	r3, r7, #6
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f000 f807 	bl	8001b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b002      	add	sp, #8
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	0002      	movs	r2, r0
 8001b40:	1dbb      	adds	r3, r7, #6
 8001b42:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001b44:	46c0      	nop			; (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b002      	add	sp, #8
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b4c:	b5b0      	push	{r4, r5, r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f000 fbbc 	bl	80022d8 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b60:	4bc8      	ldr	r3, [pc, #800]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	220c      	movs	r2, #12
 8001b66:	4013      	ands	r3, r2
 8001b68:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b6a:	4bc6      	ldr	r3, [pc, #792]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	025b      	lsls	r3, r3, #9
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d100      	bne.n	8001b82 <HAL_RCC_OscConfig+0x36>
 8001b80:	e07e      	b.n	8001c80 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d007      	beq.n	8001b98 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d112      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x68>
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	025b      	lsls	r3, r3, #9
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d10d      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b98:	4bba      	ldr	r3, [pc, #744]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	029b      	lsls	r3, r3, #10
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d100      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x5a>
 8001ba4:	e06b      	b.n	8001c7e <HAL_RCC_OscConfig+0x132>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d167      	bne.n	8001c7e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f000 fb92 	bl	80022d8 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	025b      	lsls	r3, r3, #9
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x84>
 8001bc0:	4bb0      	ldr	r3, [pc, #704]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4baf      	ldr	r3, [pc, #700]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	0249      	lsls	r1, r1, #9
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e027      	b.n	8001c20 <HAL_RCC_OscConfig+0xd4>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	23a0      	movs	r3, #160	; 0xa0
 8001bd6:	02db      	lsls	r3, r3, #11
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d10e      	bne.n	8001bfa <HAL_RCC_OscConfig+0xae>
 8001bdc:	4ba9      	ldr	r3, [pc, #676]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4ba8      	ldr	r3, [pc, #672]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001be2:	2180      	movs	r1, #128	; 0x80
 8001be4:	02c9      	lsls	r1, r1, #11
 8001be6:	430a      	orrs	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	4ba6      	ldr	r3, [pc, #664]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4ba5      	ldr	r3, [pc, #660]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001bf0:	2180      	movs	r1, #128	; 0x80
 8001bf2:	0249      	lsls	r1, r1, #9
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	e012      	b.n	8001c20 <HAL_RCC_OscConfig+0xd4>
 8001bfa:	4ba2      	ldr	r3, [pc, #648]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4ba1      	ldr	r3, [pc, #644]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001c00:	49a1      	ldr	r1, [pc, #644]	; (8001e88 <HAL_RCC_OscConfig+0x33c>)
 8001c02:	400a      	ands	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	4b9f      	ldr	r3, [pc, #636]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	025b      	lsls	r3, r3, #9
 8001c0e:	4013      	ands	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	4b9b      	ldr	r3, [pc, #620]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b9a      	ldr	r3, [pc, #616]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001c1a:	499c      	ldr	r1, [pc, #624]	; (8001e8c <HAL_RCC_OscConfig+0x340>)
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d015      	beq.n	8001c54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff fcea 	bl	8001600 <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c30:	e009      	b.n	8001c46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c32:	f7ff fce5 	bl	8001600 <HAL_GetTick>
 8001c36:	0002      	movs	r2, r0
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b64      	cmp	r3, #100	; 0x64
 8001c3e:	d902      	bls.n	8001c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	f000 fb49 	bl	80022d8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c46:	4b8f      	ldr	r3, [pc, #572]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	029b      	lsls	r3, r3, #10
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d0ef      	beq.n	8001c32 <HAL_RCC_OscConfig+0xe6>
 8001c52:	e015      	b.n	8001c80 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fcd4 	bl	8001600 <HAL_GetTick>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c5e:	f7ff fccf 	bl	8001600 <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b64      	cmp	r3, #100	; 0x64
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e333      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c70:	4b84      	ldr	r3, [pc, #528]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	029b      	lsls	r3, r3, #10
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d1f0      	bne.n	8001c5e <HAL_RCC_OscConfig+0x112>
 8001c7c:	e000      	b.n	8001c80 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2202      	movs	r2, #2
 8001c86:	4013      	ands	r3, r2
 8001c88:	d100      	bne.n	8001c8c <HAL_RCC_OscConfig+0x140>
 8001c8a:	e098      	b.n	8001dbe <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	2220      	movs	r2, #32
 8001c96:	4013      	ands	r3, r2
 8001c98:	d009      	beq.n	8001cae <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001c9a:	4b7a      	ldr	r3, [pc, #488]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4b79      	ldr	r3, [pc, #484]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001ca0:	2120      	movs	r1, #32
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	2220      	movs	r2, #32
 8001caa:	4393      	bics	r3, r2
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d13d      	bne.n	8001d36 <HAL_RCC_OscConfig+0x1ea>
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d13a      	bne.n	8001d36 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001cc0:	4b70      	ldr	r3, [pc, #448]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d004      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x188>
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e301      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	4b6b      	ldr	r3, [pc, #428]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4a6d      	ldr	r2, [pc, #436]	; (8001e90 <HAL_RCC_OscConfig+0x344>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	0019      	movs	r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	021a      	lsls	r2, r3, #8
 8001ce4:	4b67      	ldr	r3, [pc, #412]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001cea:	4b66      	ldr	r3, [pc, #408]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2209      	movs	r2, #9
 8001cf0:	4393      	bics	r3, r2
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	4b63      	ldr	r3, [pc, #396]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cfc:	f000 fc20 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 8001d00:	0001      	movs	r1, r0
 8001d02:	4b60      	ldr	r3, [pc, #384]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	220f      	movs	r2, #15
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	4a61      	ldr	r2, [pc, #388]	; (8001e94 <HAL_RCC_OscConfig+0x348>)
 8001d0e:	5cd3      	ldrb	r3, [r2, r3]
 8001d10:	000a      	movs	r2, r1
 8001d12:	40da      	lsrs	r2, r3
 8001d14:	4b60      	ldr	r3, [pc, #384]	; (8001e98 <HAL_RCC_OscConfig+0x34c>)
 8001d16:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001d18:	2513      	movs	r5, #19
 8001d1a:	197c      	adds	r4, r7, r5
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f7ff fc39 	bl	8001594 <HAL_InitTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001d26:	197b      	adds	r3, r7, r5
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d047      	beq.n	8001dbe <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001d2e:	2313      	movs	r3, #19
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	e2d0      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d027      	beq.n	8001d8c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d3c:	4b51      	ldr	r3, [pc, #324]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2209      	movs	r2, #9
 8001d42:	4393      	bics	r3, r2
 8001d44:	0019      	movs	r1, r3
 8001d46:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff fc57 	bl	8001600 <HAL_GetTick>
 8001d52:	0003      	movs	r3, r0
 8001d54:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff fc52 	bl	8001600 <HAL_GetTick>
 8001d5c:	0002      	movs	r2, r0
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e2b6      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d6a:	4b46      	ldr	r3, [pc, #280]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2204      	movs	r2, #4
 8001d70:	4013      	ands	r3, r2
 8001d72:	d0f1      	beq.n	8001d58 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d74:	4b43      	ldr	r3, [pc, #268]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a45      	ldr	r2, [pc, #276]	; (8001e90 <HAL_RCC_OscConfig+0x344>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	021a      	lsls	r2, r3, #8
 8001d84:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001d86:	430a      	orrs	r2, r1
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	e018      	b.n	8001dbe <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8c:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b3c      	ldr	r3, [pc, #240]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001d92:	2101      	movs	r1, #1
 8001d94:	438a      	bics	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff fc32 	bl	8001600 <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da2:	f7ff fc2d 	bl	8001600 <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e291      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001db4:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2204      	movs	r2, #4
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d1f1      	bne.n	8001da2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d100      	bne.n	8001dca <HAL_RCC_OscConfig+0x27e>
 8001dc8:	e09f      	b.n	8001f0a <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d13f      	bne.n	8001e50 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dd0:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_OscConfig+0x29c>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e277      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de8:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a2b      	ldr	r2, [pc, #172]	; (8001e9c <HAL_RCC_OscConfig+0x350>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	0a19      	lsrs	r1, r3, #8
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	061a      	lsls	r2, r3, #24
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	0b5b      	lsrs	r3, r3, #13
 8001e16:	3301      	adds	r3, #1
 8001e18:	2280      	movs	r2, #128	; 0x80
 8001e1a:	0212      	lsls	r2, r2, #8
 8001e1c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	210f      	movs	r1, #15
 8001e26:	400b      	ands	r3, r1
 8001e28:	491a      	ldr	r1, [pc, #104]	; (8001e94 <HAL_RCC_OscConfig+0x348>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <HAL_RCC_OscConfig+0x34c>)
 8001e30:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001e32:	2513      	movs	r5, #19
 8001e34:	197c      	adds	r4, r7, r5
 8001e36:	2000      	movs	r0, #0
 8001e38:	f7ff fbac 	bl	8001594 <HAL_InitTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001e40:	197b      	adds	r3, r7, r5
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d060      	beq.n	8001f0a <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001e48:	2313      	movs	r3, #19
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	e243      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d03e      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_RCC_OscConfig+0x338>)
 8001e5e:	2180      	movs	r1, #128	; 0x80
 8001e60:	0049      	lsls	r1, r1, #1
 8001e62:	430a      	orrs	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff fbcb 	bl	8001600 <HAL_GetTick>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e6e:	e017      	b.n	8001ea0 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e70:	f7ff fbc6 	bl	8001600 <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d910      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e22a      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	40021000 	.word	0x40021000
 8001e88:	fffeffff 	.word	0xfffeffff
 8001e8c:	fffbffff 	.word	0xfffbffff
 8001e90:	ffffe0ff 	.word	0xffffe0ff
 8001e94:	08005c4c 	.word	0x08005c4c
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ea0:	4bc6      	ldr	r3, [pc, #792]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d0e1      	beq.n	8001e70 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eac:	4bc3      	ldr	r3, [pc, #780]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4ac3      	ldr	r2, [pc, #780]	; (80021c0 <HAL_RCC_OscConfig+0x674>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eba:	4bc0      	ldr	r3, [pc, #768]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ec0:	4bbe      	ldr	r3, [pc, #760]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	0a19      	lsrs	r1, r3, #8
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	061a      	lsls	r2, r3, #24
 8001ece:	4bbb      	ldr	r3, [pc, #748]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	e019      	b.n	8001f0a <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ed6:	4bb9      	ldr	r3, [pc, #740]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4bb8      	ldr	r3, [pc, #736]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001edc:	49b9      	ldr	r1, [pc, #740]	; (80021c4 <HAL_RCC_OscConfig+0x678>)
 8001ede:	400a      	ands	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7ff fb8d 	bl	8001600 <HAL_GetTick>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eec:	f7ff fb88 	bl	8001600 <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1ec      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001efe:	4baf      	ldr	r3, [pc, #700]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4013      	ands	r3, r2
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2208      	movs	r2, #8
 8001f10:	4013      	ands	r3, r2
 8001f12:	d036      	beq.n	8001f82 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d019      	beq.n	8001f50 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1c:	4ba7      	ldr	r3, [pc, #668]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001f1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f20:	4ba6      	ldr	r3, [pc, #664]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001f22:	2101      	movs	r1, #1
 8001f24:	430a      	orrs	r2, r1
 8001f26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f28:	f7ff fb6a 	bl	8001600 <HAL_GetTick>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f32:	f7ff fb65 	bl	8001600 <HAL_GetTick>
 8001f36:	0002      	movs	r2, r0
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e1c9      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f44:	4b9d      	ldr	r3, [pc, #628]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f48:	2202      	movs	r2, #2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d0f1      	beq.n	8001f32 <HAL_RCC_OscConfig+0x3e6>
 8001f4e:	e018      	b.n	8001f82 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f50:	4b9a      	ldr	r3, [pc, #616]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001f52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f54:	4b99      	ldr	r3, [pc, #612]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001f56:	2101      	movs	r1, #1
 8001f58:	438a      	bics	r2, r1
 8001f5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5c:	f7ff fb50 	bl	8001600 <HAL_GetTick>
 8001f60:	0003      	movs	r3, r0
 8001f62:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f66:	f7ff fb4b 	bl	8001600 <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e1af      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f78:	4b90      	ldr	r3, [pc, #576]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d1f1      	bne.n	8001f66 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2204      	movs	r2, #4
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d100      	bne.n	8001f8e <HAL_RCC_OscConfig+0x442>
 8001f8c:	e0af      	b.n	80020ee <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8e:	2323      	movs	r3, #35	; 0x23
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f96:	4b89      	ldr	r3, [pc, #548]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	055b      	lsls	r3, r3, #21
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	4b86      	ldr	r3, [pc, #536]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fa6:	4b85      	ldr	r3, [pc, #532]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8001fa8:	2180      	movs	r1, #128	; 0x80
 8001faa:	0549      	lsls	r1, r1, #21
 8001fac:	430a      	orrs	r2, r1
 8001fae:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001fb0:	2323      	movs	r3, #35	; 0x23
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	4b83      	ldr	r3, [pc, #524]	; (80021c8 <HAL_RCC_OscConfig+0x67c>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d11a      	bne.n	8001ffa <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc4:	4b80      	ldr	r3, [pc, #512]	; (80021c8 <HAL_RCC_OscConfig+0x67c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b7f      	ldr	r3, [pc, #508]	; (80021c8 <HAL_RCC_OscConfig+0x67c>)
 8001fca:	2180      	movs	r1, #128	; 0x80
 8001fcc:	0049      	lsls	r1, r1, #1
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd2:	f7ff fb15 	bl	8001600 <HAL_GetTick>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fdc:	f7ff fb10 	bl	8001600 <HAL_GetTick>
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e174      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	4b76      	ldr	r3, [pc, #472]	; (80021c8 <HAL_RCC_OscConfig+0x67c>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	429a      	cmp	r2, r3
 8002004:	d107      	bne.n	8002016 <HAL_RCC_OscConfig+0x4ca>
 8002006:	4b6d      	ldr	r3, [pc, #436]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002008:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800200a:	4b6c      	ldr	r3, [pc, #432]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 800200c:	2180      	movs	r1, #128	; 0x80
 800200e:	0049      	lsls	r1, r1, #1
 8002010:	430a      	orrs	r2, r1
 8002012:	651a      	str	r2, [r3, #80]	; 0x50
 8002014:	e031      	b.n	800207a <HAL_RCC_OscConfig+0x52e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x4ec>
 800201e:	4b67      	ldr	r3, [pc, #412]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002022:	4b66      	ldr	r3, [pc, #408]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002024:	4967      	ldr	r1, [pc, #412]	; (80021c4 <HAL_RCC_OscConfig+0x678>)
 8002026:	400a      	ands	r2, r1
 8002028:	651a      	str	r2, [r3, #80]	; 0x50
 800202a:	4b64      	ldr	r3, [pc, #400]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 800202c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800202e:	4b63      	ldr	r3, [pc, #396]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002030:	4966      	ldr	r1, [pc, #408]	; (80021cc <HAL_RCC_OscConfig+0x680>)
 8002032:	400a      	ands	r2, r1
 8002034:	651a      	str	r2, [r3, #80]	; 0x50
 8002036:	e020      	b.n	800207a <HAL_RCC_OscConfig+0x52e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	23a0      	movs	r3, #160	; 0xa0
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	429a      	cmp	r2, r3
 8002042:	d10e      	bne.n	8002062 <HAL_RCC_OscConfig+0x516>
 8002044:	4b5d      	ldr	r3, [pc, #372]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002048:	4b5c      	ldr	r3, [pc, #368]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	00c9      	lsls	r1, r1, #3
 800204e:	430a      	orrs	r2, r1
 8002050:	651a      	str	r2, [r3, #80]	; 0x50
 8002052:	4b5a      	ldr	r3, [pc, #360]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002054:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002056:	4b59      	ldr	r3, [pc, #356]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0049      	lsls	r1, r1, #1
 800205c:	430a      	orrs	r2, r1
 800205e:	651a      	str	r2, [r3, #80]	; 0x50
 8002060:	e00b      	b.n	800207a <HAL_RCC_OscConfig+0x52e>
 8002062:	4b56      	ldr	r3, [pc, #344]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002064:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002066:	4b55      	ldr	r3, [pc, #340]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002068:	4956      	ldr	r1, [pc, #344]	; (80021c4 <HAL_RCC_OscConfig+0x678>)
 800206a:	400a      	ands	r2, r1
 800206c:	651a      	str	r2, [r3, #80]	; 0x50
 800206e:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002070:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002072:	4b52      	ldr	r3, [pc, #328]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002074:	4955      	ldr	r1, [pc, #340]	; (80021cc <HAL_RCC_OscConfig+0x680>)
 8002076:	400a      	ands	r2, r1
 8002078:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d015      	beq.n	80020ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002082:	f7ff fabd 	bl	8001600 <HAL_GetTick>
 8002086:	0003      	movs	r3, r0
 8002088:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800208a:	e009      	b.n	80020a0 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800208c:	f7ff fab8 	bl	8001600 <HAL_GetTick>
 8002090:	0002      	movs	r2, r0
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	4a4e      	ldr	r2, [pc, #312]	; (80021d0 <HAL_RCC_OscConfig+0x684>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e11b      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020a0:	4b46      	ldr	r3, [pc, #280]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 80020a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4013      	ands	r3, r2
 80020aa:	d0ef      	beq.n	800208c <HAL_RCC_OscConfig+0x540>
 80020ac:	e014      	b.n	80020d8 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ae:	f7ff faa7 	bl	8001600 <HAL_GetTick>
 80020b2:	0003      	movs	r3, r0
 80020b4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020b6:	e009      	b.n	80020cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7ff faa2 	bl	8001600 <HAL_GetTick>
 80020bc:	0002      	movs	r2, r0
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	4a43      	ldr	r2, [pc, #268]	; (80021d0 <HAL_RCC_OscConfig+0x684>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e105      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020cc:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 80020ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	d1ef      	bne.n	80020b8 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020d8:	2323      	movs	r3, #35	; 0x23
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d105      	bne.n	80020ee <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e2:	4b36      	ldr	r3, [pc, #216]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 80020e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020e6:	4b35      	ldr	r3, [pc, #212]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 80020e8:	493a      	ldr	r1, [pc, #232]	; (80021d4 <HAL_RCC_OscConfig+0x688>)
 80020ea:	400a      	ands	r2, r1
 80020ec:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2220      	movs	r2, #32
 80020f4:	4013      	ands	r3, r2
 80020f6:	d049      	beq.n	800218c <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d026      	beq.n	800214e <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002106:	2101      	movs	r1, #1
 8002108:	430a      	orrs	r2, r1
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 800210e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002110:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002112:	2101      	movs	r1, #1
 8002114:	430a      	orrs	r2, r1
 8002116:	635a      	str	r2, [r3, #52]	; 0x34
 8002118:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <HAL_RCC_OscConfig+0x68c>)
 800211a:	6a1a      	ldr	r2, [r3, #32]
 800211c:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <HAL_RCC_OscConfig+0x68c>)
 800211e:	2180      	movs	r1, #128	; 0x80
 8002120:	0189      	lsls	r1, r1, #6
 8002122:	430a      	orrs	r2, r1
 8002124:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7ff fa6b 	bl	8001600 <HAL_GetTick>
 800212a:	0003      	movs	r3, r0
 800212c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002130:	f7ff fa66 	bl	8001600 <HAL_GetTick>
 8002134:	0002      	movs	r2, r0
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0ca      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2202      	movs	r2, #2
 8002148:	4013      	ands	r3, r2
 800214a:	d0f1      	beq.n	8002130 <HAL_RCC_OscConfig+0x5e4>
 800214c:	e01e      	b.n	800218c <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002154:	2101      	movs	r1, #1
 8002156:	438a      	bics	r2, r1
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <HAL_RCC_OscConfig+0x68c>)
 800215c:	6a1a      	ldr	r2, [r3, #32]
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <HAL_RCC_OscConfig+0x68c>)
 8002160:	491e      	ldr	r1, [pc, #120]	; (80021dc <HAL_RCC_OscConfig+0x690>)
 8002162:	400a      	ands	r2, r1
 8002164:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff fa4b 	bl	8001600 <HAL_GetTick>
 800216a:	0003      	movs	r3, r0
 800216c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002170:	f7ff fa46 	bl	8001600 <HAL_GetTick>
 8002174:	0002      	movs	r2, r0
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0aa      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2202      	movs	r2, #2
 8002188:	4013      	ands	r3, r2
 800218a:	d1f1      	bne.n	8002170 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	2b00      	cmp	r3, #0
 8002192:	d100      	bne.n	8002196 <HAL_RCC_OscConfig+0x64a>
 8002194:	e09f      	b.n	80022d6 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	2b0c      	cmp	r3, #12
 800219a:	d100      	bne.n	800219e <HAL_RCC_OscConfig+0x652>
 800219c:	e078      	b.n	8002290 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d159      	bne.n	800225a <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <HAL_RCC_OscConfig+0x670>)
 80021ac:	490c      	ldr	r1, [pc, #48]	; (80021e0 <HAL_RCC_OscConfig+0x694>)
 80021ae:	400a      	ands	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7ff fa25 	bl	8001600 <HAL_GetTick>
 80021b6:	0003      	movs	r3, r0
 80021b8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021ba:	e01c      	b.n	80021f6 <HAL_RCC_OscConfig+0x6aa>
 80021bc:	40021000 	.word	0x40021000
 80021c0:	ffff1fff 	.word	0xffff1fff
 80021c4:	fffffeff 	.word	0xfffffeff
 80021c8:	40007000 	.word	0x40007000
 80021cc:	fffffbff 	.word	0xfffffbff
 80021d0:	00001388 	.word	0x00001388
 80021d4:	efffffff 	.word	0xefffffff
 80021d8:	40010000 	.word	0x40010000
 80021dc:	ffffdfff 	.word	0xffffdfff
 80021e0:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e4:	f7ff fa0c 	bl	8001600 <HAL_GetTick>
 80021e8:	0002      	movs	r2, r0
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e070      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021f6:	4b3a      	ldr	r3, [pc, #232]	; (80022e0 <HAL_RCC_OscConfig+0x794>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	049b      	lsls	r3, r3, #18
 80021fe:	4013      	ands	r3, r2
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002202:	4b37      	ldr	r3, [pc, #220]	; (80022e0 <HAL_RCC_OscConfig+0x794>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	4a37      	ldr	r2, [pc, #220]	; (80022e4 <HAL_RCC_OscConfig+0x798>)
 8002208:	4013      	ands	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221a:	431a      	orrs	r2, r3
 800221c:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_RCC_OscConfig+0x794>)
 800221e:	430a      	orrs	r2, r1
 8002220:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002222:	4b2f      	ldr	r3, [pc, #188]	; (80022e0 <HAL_RCC_OscConfig+0x794>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	4b2e      	ldr	r3, [pc, #184]	; (80022e0 <HAL_RCC_OscConfig+0x794>)
 8002228:	2180      	movs	r1, #128	; 0x80
 800222a:	0449      	lsls	r1, r1, #17
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff f9e6 	bl	8001600 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223a:	f7ff f9e1 	bl	8001600 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e045      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800224c:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_RCC_OscConfig+0x794>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	049b      	lsls	r3, r3, #18
 8002254:	4013      	ands	r3, r2
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x6ee>
 8002258:	e03d      	b.n	80022d6 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <HAL_RCC_OscConfig+0x794>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_RCC_OscConfig+0x794>)
 8002260:	4921      	ldr	r1, [pc, #132]	; (80022e8 <HAL_RCC_OscConfig+0x79c>)
 8002262:	400a      	ands	r2, r1
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7ff f9cb 	bl	8001600 <HAL_GetTick>
 800226a:	0003      	movs	r3, r0
 800226c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002270:	f7ff f9c6 	bl	8001600 <HAL_GetTick>
 8002274:	0002      	movs	r2, r0
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e02a      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <HAL_RCC_OscConfig+0x794>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	049b      	lsls	r3, r3, #18
 800228a:	4013      	ands	r3, r2
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x724>
 800228e:	e022      	b.n	80022d6 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e01d      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800229c:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <HAL_RCC_OscConfig+0x794>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	025b      	lsls	r3, r3, #9
 80022a8:	401a      	ands	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d10f      	bne.n	80022d2 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	23f0      	movs	r3, #240	; 0xf0
 80022b6:	039b      	lsls	r3, r3, #14
 80022b8:	401a      	ands	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	23c0      	movs	r3, #192	; 0xc0
 80022c6:	041b      	lsls	r3, r3, #16
 80022c8:	401a      	ands	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d001      	beq.n	80022d6 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b00a      	add	sp, #40	; 0x28
 80022de:	bdb0      	pop	{r4, r5, r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	ff02ffff 	.word	0xff02ffff
 80022e8:	feffffff 	.word	0xfeffffff

080022ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ec:	b5b0      	push	{r4, r5, r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e10d      	b.n	800251c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b88      	ldr	r3, [pc, #544]	; (8002524 <HAL_RCC_ClockConfig+0x238>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2201      	movs	r2, #1
 8002306:	4013      	ands	r3, r2
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d911      	bls.n	8002332 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b85      	ldr	r3, [pc, #532]	; (8002524 <HAL_RCC_ClockConfig+0x238>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2201      	movs	r2, #1
 8002314:	4393      	bics	r3, r2
 8002316:	0019      	movs	r1, r3
 8002318:	4b82      	ldr	r3, [pc, #520]	; (8002524 <HAL_RCC_ClockConfig+0x238>)
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002320:	4b80      	ldr	r3, [pc, #512]	; (8002524 <HAL_RCC_ClockConfig+0x238>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2201      	movs	r2, #1
 8002326:	4013      	ands	r3, r2
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d001      	beq.n	8002332 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0f4      	b.n	800251c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2202      	movs	r2, #2
 8002338:	4013      	ands	r3, r2
 800233a:	d009      	beq.n	8002350 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800233c:	4b7a      	ldr	r3, [pc, #488]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	22f0      	movs	r2, #240	; 0xf0
 8002342:	4393      	bics	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	4b77      	ldr	r3, [pc, #476]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 800234c:	430a      	orrs	r2, r1
 800234e:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2201      	movs	r2, #1
 8002356:	4013      	ands	r3, r2
 8002358:	d100      	bne.n	800235c <HAL_RCC_ClockConfig+0x70>
 800235a:	e089      	b.n	8002470 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d107      	bne.n	8002374 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002364:	4b70      	ldr	r3, [pc, #448]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	029b      	lsls	r3, r3, #10
 800236c:	4013      	ands	r3, r2
 800236e:	d120      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0d3      	b.n	800251c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d107      	bne.n	800238c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800237c:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	049b      	lsls	r3, r3, #18
 8002384:	4013      	ands	r3, r2
 8002386:	d114      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0c7      	b.n	800251c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002394:	4b64      	ldr	r3, [pc, #400]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2204      	movs	r2, #4
 800239a:	4013      	ands	r3, r2
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e0bc      	b.n	800251c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023a2:	4b61      	ldr	r3, [pc, #388]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4013      	ands	r3, r2
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0b4      	b.n	800251c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b2:	4b5d      	ldr	r3, [pc, #372]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2203      	movs	r2, #3
 80023b8:	4393      	bics	r3, r2
 80023ba:	0019      	movs	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	4b59      	ldr	r3, [pc, #356]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 80023c2:	430a      	orrs	r2, r1
 80023c4:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c6:	f7ff f91b 	bl	8001600 <HAL_GetTick>
 80023ca:	0003      	movs	r3, r0
 80023cc:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d111      	bne.n	80023fa <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023d6:	e009      	b.n	80023ec <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d8:	f7ff f912 	bl	8001600 <HAL_GetTick>
 80023dc:	0002      	movs	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	4a52      	ldr	r2, [pc, #328]	; (800252c <HAL_RCC_ClockConfig+0x240>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e097      	b.n	800251c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ec:	4b4e      	ldr	r3, [pc, #312]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	220c      	movs	r2, #12
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d1ef      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xec>
 80023f8:	e03a      	b.n	8002470 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d111      	bne.n	8002426 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002402:	e009      	b.n	8002418 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7ff f8fc 	bl	8001600 <HAL_GetTick>
 8002408:	0002      	movs	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	4a47      	ldr	r2, [pc, #284]	; (800252c <HAL_RCC_ClockConfig+0x240>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e081      	b.n	800251c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002418:	4b43      	ldr	r3, [pc, #268]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	220c      	movs	r2, #12
 800241e:	4013      	ands	r3, r2
 8002420:	2b0c      	cmp	r3, #12
 8002422:	d1ef      	bne.n	8002404 <HAL_RCC_ClockConfig+0x118>
 8002424:	e024      	b.n	8002470 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d11b      	bne.n	8002466 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800242e:	e009      	b.n	8002444 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7ff f8e6 	bl	8001600 <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	4a3c      	ldr	r2, [pc, #240]	; (800252c <HAL_RCC_ClockConfig+0x240>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e06b      	b.n	800251c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002444:	4b38      	ldr	r3, [pc, #224]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	220c      	movs	r2, #12
 800244a:	4013      	ands	r3, r2
 800244c:	2b04      	cmp	r3, #4
 800244e:	d1ef      	bne.n	8002430 <HAL_RCC_ClockConfig+0x144>
 8002450:	e00e      	b.n	8002470 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002452:	f7ff f8d5 	bl	8001600 <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	4a33      	ldr	r2, [pc, #204]	; (800252c <HAL_RCC_ClockConfig+0x240>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e05a      	b.n	800251c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002466:	4b30      	ldr	r3, [pc, #192]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	220c      	movs	r2, #12
 800246c:	4013      	ands	r3, r2
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002470:	4b2c      	ldr	r3, [pc, #176]	; (8002524 <HAL_RCC_ClockConfig+0x238>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2201      	movs	r2, #1
 8002476:	4013      	ands	r3, r2
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d211      	bcs.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_RCC_ClockConfig+0x238>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2201      	movs	r2, #1
 8002484:	4393      	bics	r3, r2
 8002486:	0019      	movs	r1, r3
 8002488:	4b26      	ldr	r3, [pc, #152]	; (8002524 <HAL_RCC_ClockConfig+0x238>)
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002490:	4b24      	ldr	r3, [pc, #144]	; (8002524 <HAL_RCC_ClockConfig+0x238>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2201      	movs	r2, #1
 8002496:	4013      	ands	r3, r2
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e03c      	b.n	800251c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2204      	movs	r2, #4
 80024a8:	4013      	ands	r3, r2
 80024aa:	d009      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4a1f      	ldr	r2, [pc, #124]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2208      	movs	r2, #8
 80024c6:	4013      	ands	r3, r2
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	4a19      	ldr	r2, [pc, #100]	; (8002534 <HAL_RCC_ClockConfig+0x248>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	0019      	movs	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	00da      	lsls	r2, r3, #3
 80024da:	4b13      	ldr	r3, [pc, #76]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 80024dc:	430a      	orrs	r2, r1
 80024de:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024e0:	f000 f82e 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 80024e4:	0001      	movs	r1, r0
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_RCC_ClockConfig+0x23c>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	220f      	movs	r2, #15
 80024ee:	4013      	ands	r3, r2
 80024f0:	4a11      	ldr	r2, [pc, #68]	; (8002538 <HAL_RCC_ClockConfig+0x24c>)
 80024f2:	5cd3      	ldrb	r3, [r2, r3]
 80024f4:	000a      	movs	r2, r1
 80024f6:	40da      	lsrs	r2, r3
 80024f8:	4b10      	ldr	r3, [pc, #64]	; (800253c <HAL_RCC_ClockConfig+0x250>)
 80024fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80024fc:	250b      	movs	r5, #11
 80024fe:	197c      	adds	r4, r7, r5
 8002500:	2000      	movs	r0, #0
 8002502:	f7ff f847 	bl	8001594 <HAL_InitTick>
 8002506:	0003      	movs	r3, r0
 8002508:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800250a:	197b      	adds	r3, r7, r5
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002512:	230b      	movs	r3, #11
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	e000      	b.n	800251c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	0018      	movs	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	b004      	add	sp, #16
 8002522:	bdb0      	pop	{r4, r5, r7, pc}
 8002524:	40022000 	.word	0x40022000
 8002528:	40021000 	.word	0x40021000
 800252c:	00001388 	.word	0x00001388
 8002530:	fffff8ff 	.word	0xfffff8ff
 8002534:	ffffc7ff 	.word	0xffffc7ff
 8002538:	08005c4c 	.word	0x08005c4c
 800253c:	20000000 	.word	0x20000000

08002540 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002546:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	220c      	movs	r2, #12
 8002550:	4013      	ands	r3, r2
 8002552:	2b08      	cmp	r3, #8
 8002554:	d00e      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x34>
 8002556:	2b0c      	cmp	r3, #12
 8002558:	d00f      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x3a>
 800255a:	2b04      	cmp	r3, #4
 800255c:	d157      	bne.n	800260e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800255e:	4b35      	ldr	r3, [pc, #212]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2210      	movs	r2, #16
 8002564:	4013      	ands	r3, r2
 8002566:	d002      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002568:	4b33      	ldr	r3, [pc, #204]	; (8002638 <HAL_RCC_GetSysClockFreq+0xf8>)
 800256a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800256c:	e05d      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800256e:	4b33      	ldr	r3, [pc, #204]	; (800263c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002570:	613b      	str	r3, [r7, #16]
      break;
 8002572:	e05a      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002574:	4b32      	ldr	r3, [pc, #200]	; (8002640 <HAL_RCC_GetSysClockFreq+0x100>)
 8002576:	613b      	str	r3, [r7, #16]
      break;
 8002578:	e057      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	0c9b      	lsrs	r3, r3, #18
 800257e:	220f      	movs	r2, #15
 8002580:	4013      	ands	r3, r2
 8002582:	4a30      	ldr	r2, [pc, #192]	; (8002644 <HAL_RCC_GetSysClockFreq+0x104>)
 8002584:	5cd3      	ldrb	r3, [r2, r3]
 8002586:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	0d9b      	lsrs	r3, r3, #22
 800258c:	2203      	movs	r2, #3
 800258e:	4013      	ands	r3, r2
 8002590:	3301      	adds	r3, #1
 8002592:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002594:	4b27      	ldr	r3, [pc, #156]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	025b      	lsls	r3, r3, #9
 800259c:	4013      	ands	r3, r2
 800259e:	d00f      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	000a      	movs	r2, r1
 80025a4:	0152      	lsls	r2, r2, #5
 80025a6:	1a52      	subs	r2, r2, r1
 80025a8:	0193      	lsls	r3, r2, #6
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	185b      	adds	r3, r3, r1
 80025b0:	025b      	lsls	r3, r3, #9
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7fd fda7 	bl	8000108 <__udivsi3>
 80025ba:	0003      	movs	r3, r0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e023      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025c0:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2210      	movs	r2, #16
 80025c6:	4013      	ands	r3, r2
 80025c8:	d00f      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	000a      	movs	r2, r1
 80025ce:	0152      	lsls	r2, r2, #5
 80025d0:	1a52      	subs	r2, r2, r1
 80025d2:	0193      	lsls	r3, r2, #6
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	185b      	adds	r3, r3, r1
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	0018      	movs	r0, r3
 80025e0:	f7fd fd92 	bl	8000108 <__udivsi3>
 80025e4:	0003      	movs	r3, r0
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	e00e      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	000a      	movs	r2, r1
 80025ee:	0152      	lsls	r2, r2, #5
 80025f0:	1a52      	subs	r2, r2, r1
 80025f2:	0193      	lsls	r3, r2, #6
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	185b      	adds	r3, r3, r1
 80025fa:	029b      	lsls	r3, r3, #10
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	0018      	movs	r0, r3
 8002600:	f7fd fd82 	bl	8000108 <__udivsi3>
 8002604:	0003      	movs	r3, r0
 8002606:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	613b      	str	r3, [r7, #16]
      break;
 800260c:	e00d      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	0b5b      	lsrs	r3, r3, #13
 8002614:	2207      	movs	r2, #7
 8002616:	4013      	ands	r3, r2
 8002618:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	3301      	adds	r3, #1
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	0212      	lsls	r2, r2, #8
 8002622:	409a      	lsls	r2, r3
 8002624:	0013      	movs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
      break;
 8002628:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800262a:	693b      	ldr	r3, [r7, #16]
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b006      	add	sp, #24
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	003d0900 	.word	0x003d0900
 800263c:	00f42400 	.word	0x00f42400
 8002640:	007a1200 	.word	0x007a1200
 8002644:	08005c64 	.word	0x08005c64

08002648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800264c:	4b02      	ldr	r3, [pc, #8]	; (8002658 <HAL_RCC_GetHCLKFreq+0x10>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	20000000 	.word	0x20000000

0800265c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002660:	f7ff fff2 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8002664:	0001      	movs	r1, r0
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	2207      	movs	r2, #7
 800266e:	4013      	ands	r3, r2
 8002670:	4a04      	ldr	r2, [pc, #16]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002672:	5cd3      	ldrb	r3, [r2, r3]
 8002674:	40d9      	lsrs	r1, r3
 8002676:	000b      	movs	r3, r1
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	40021000 	.word	0x40021000
 8002684:	08005c5c 	.word	0x08005c5c

08002688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800268c:	f7ff ffdc 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8002690:	0001      	movs	r1, r0
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	0adb      	lsrs	r3, r3, #11
 8002698:	2207      	movs	r2, #7
 800269a:	4013      	ands	r3, r2
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800269e:	5cd3      	ldrb	r3, [r2, r3]
 80026a0:	40d9      	lsrs	r1, r3
 80026a2:	000b      	movs	r3, r1
}
 80026a4:	0018      	movs	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	40021000 	.word	0x40021000
 80026b0:	08005c5c 	.word	0x08005c5c

080026b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2220      	movs	r2, #32
 80026c2:	4013      	ands	r3, r2
 80026c4:	d106      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	4013      	ands	r3, r2
 80026d0:	d100      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80026d2:	e0dd      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80026d4:	2317      	movs	r3, #23
 80026d6:	18fb      	adds	r3, r7, r3
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026dc:	4ba4      	ldr	r3, [pc, #656]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	055b      	lsls	r3, r3, #21
 80026e4:	4013      	ands	r3, r2
 80026e6:	d10a      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e8:	4ba1      	ldr	r3, [pc, #644]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ec:	4ba0      	ldr	r3, [pc, #640]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80026ee:	2180      	movs	r1, #128	; 0x80
 80026f0:	0549      	lsls	r1, r1, #21
 80026f2:	430a      	orrs	r2, r1
 80026f4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80026f6:	2317      	movs	r3, #23
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	4b9d      	ldr	r3, [pc, #628]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4013      	ands	r3, r2
 8002708:	d11a      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270a:	4b9a      	ldr	r3, [pc, #616]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4b99      	ldr	r3, [pc, #612]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002710:	2180      	movs	r1, #128	; 0x80
 8002712:	0049      	lsls	r1, r1, #1
 8002714:	430a      	orrs	r2, r1
 8002716:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002718:	f7fe ff72 	bl	8001600 <HAL_GetTick>
 800271c:	0003      	movs	r3, r0
 800271e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002720:	e008      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002722:	f7fe ff6d 	bl	8001600 <HAL_GetTick>
 8002726:	0002      	movs	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b64      	cmp	r3, #100	; 0x64
 800272e:	d901      	bls.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e118      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	4b8f      	ldr	r3, [pc, #572]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4013      	ands	r3, r2
 800273e:	d0f0      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002740:	4b8b      	ldr	r3, [pc, #556]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	23c0      	movs	r3, #192	; 0xc0
 8002746:	039b      	lsls	r3, r3, #14
 8002748:	4013      	ands	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	23c0      	movs	r3, #192	; 0xc0
 8002752:	039b      	lsls	r3, r3, #14
 8002754:	4013      	ands	r3, r2
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	429a      	cmp	r2, r3
 800275a:	d107      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	23c0      	movs	r3, #192	; 0xc0
 8002762:	039b      	lsls	r3, r3, #14
 8002764:	4013      	ands	r3, r2
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	429a      	cmp	r2, r3
 800276a:	d013      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	23c0      	movs	r3, #192	; 0xc0
 8002772:	029b      	lsls	r3, r3, #10
 8002774:	401a      	ands	r2, r3
 8002776:	23c0      	movs	r3, #192	; 0xc0
 8002778:	029b      	lsls	r3, r3, #10
 800277a:	429a      	cmp	r2, r3
 800277c:	d10a      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800277e:	4b7c      	ldr	r3, [pc, #496]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	029b      	lsls	r3, r3, #10
 8002786:	401a      	ands	r2, r3
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	429a      	cmp	r2, r3
 800278e:	d101      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0e8      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002794:	4b76      	ldr	r3, [pc, #472]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002798:	23c0      	movs	r3, #192	; 0xc0
 800279a:	029b      	lsls	r3, r3, #10
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d049      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	23c0      	movs	r3, #192	; 0xc0
 80027ac:	029b      	lsls	r3, r3, #10
 80027ae:	4013      	ands	r3, r2
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d004      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2220      	movs	r2, #32
 80027bc:	4013      	ands	r3, r2
 80027be:	d10d      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	23c0      	movs	r3, #192	; 0xc0
 80027c6:	029b      	lsls	r3, r3, #10
 80027c8:	4013      	ands	r3, r2
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d034      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	4013      	ands	r3, r2
 80027da:	d02e      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027dc:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e0:	4a65      	ldr	r2, [pc, #404]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027e6:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027ea:	4b61      	ldr	r3, [pc, #388]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027ec:	2180      	movs	r1, #128	; 0x80
 80027ee:	0309      	lsls	r1, r1, #12
 80027f0:	430a      	orrs	r2, r1
 80027f2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027f4:	4b5e      	ldr	r3, [pc, #376]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027f8:	4b5d      	ldr	r3, [pc, #372]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80027fa:	4960      	ldr	r1, [pc, #384]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80027fc:	400a      	ands	r2, r1
 80027fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002800:	4b5b      	ldr	r3, [pc, #364]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4013      	ands	r3, r2
 800280e:	d014      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7fe fef6 	bl	8001600 <HAL_GetTick>
 8002814:	0003      	movs	r3, r0
 8002816:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002818:	e009      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7fe fef1 	bl	8001600 <HAL_GetTick>
 800281e:	0002      	movs	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	4a56      	ldr	r2, [pc, #344]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e09b      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800282e:	4b50      	ldr	r3, [pc, #320]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002830:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4013      	ands	r3, r2
 8002838:	d0ef      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	23c0      	movs	r3, #192	; 0xc0
 8002840:	029b      	lsls	r3, r3, #10
 8002842:	401a      	ands	r2, r3
 8002844:	23c0      	movs	r3, #192	; 0xc0
 8002846:	029b      	lsls	r3, r3, #10
 8002848:	429a      	cmp	r2, r3
 800284a:	d10c      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800284c:	4b48      	ldr	r3, [pc, #288]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a4c      	ldr	r2, [pc, #304]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002852:	4013      	ands	r3, r2
 8002854:	0019      	movs	r1, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	23c0      	movs	r3, #192	; 0xc0
 800285c:	039b      	lsls	r3, r3, #14
 800285e:	401a      	ands	r2, r3
 8002860:	4b43      	ldr	r3, [pc, #268]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002862:	430a      	orrs	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	4b42      	ldr	r3, [pc, #264]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002868:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	23c0      	movs	r3, #192	; 0xc0
 8002870:	029b      	lsls	r3, r3, #10
 8002872:	401a      	ands	r2, r3
 8002874:	4b3e      	ldr	r3, [pc, #248]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002876:	430a      	orrs	r2, r1
 8002878:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800287a:	2317      	movs	r3, #23
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d105      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002884:	4b3a      	ldr	r3, [pc, #232]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002888:	4b39      	ldr	r3, [pc, #228]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800288a:	493f      	ldr	r1, [pc, #252]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800288c:	400a      	ands	r2, r1
 800288e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2201      	movs	r2, #1
 8002896:	4013      	ands	r3, r2
 8002898:	d009      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800289a:	4b35      	ldr	r3, [pc, #212]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289e:	2203      	movs	r2, #3
 80028a0:	4393      	bics	r3, r2
 80028a2:	0019      	movs	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	4b31      	ldr	r3, [pc, #196]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028aa:	430a      	orrs	r2, r1
 80028ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2202      	movs	r2, #2
 80028b4:	4013      	ands	r3, r2
 80028b6:	d009      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028b8:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028bc:	220c      	movs	r2, #12
 80028be:	4393      	bics	r3, r2
 80028c0:	0019      	movs	r1, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028c8:	430a      	orrs	r2, r1
 80028ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2204      	movs	r2, #4
 80028d2:	4013      	ands	r3, r2
 80028d4:	d009      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028d6:	4b26      	ldr	r3, [pc, #152]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028da:	4a2c      	ldr	r2, [pc, #176]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80028dc:	4013      	ands	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	4b22      	ldr	r3, [pc, #136]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028e6:	430a      	orrs	r2, r1
 80028e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2208      	movs	r2, #8
 80028f0:	4013      	ands	r3, r2
 80028f2:	d009      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028f4:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	4a25      	ldr	r2, [pc, #148]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	0019      	movs	r1, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002904:	430a      	orrs	r2, r1
 8002906:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4013      	ands	r3, r2
 8002912:	d009      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002914:	4b16      	ldr	r3, [pc, #88]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002918:	4a17      	ldr	r2, [pc, #92]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800291a:	4013      	ands	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69da      	ldr	r2, [r3, #28]
 8002922:	4b13      	ldr	r3, [pc, #76]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002924:	430a      	orrs	r2, r1
 8002926:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2240      	movs	r2, #64	; 0x40
 800292e:	4013      	ands	r3, r2
 8002930:	d009      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002932:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	4a17      	ldr	r2, [pc, #92]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002938:	4013      	ands	r3, r2
 800293a:	0019      	movs	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002942:	430a      	orrs	r2, r1
 8002944:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2280      	movs	r2, #128	; 0x80
 800294c:	4013      	ands	r3, r2
 800294e:	d009      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002954:	4a10      	ldr	r2, [pc, #64]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002956:	4013      	ands	r3, r2
 8002958:	0019      	movs	r1, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1a      	ldr	r2, [r3, #32]
 800295e:	4b04      	ldr	r3, [pc, #16]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002960:	430a      	orrs	r2, r1
 8002962:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	0018      	movs	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	b006      	add	sp, #24
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	40021000 	.word	0x40021000
 8002974:	40007000 	.word	0x40007000
 8002978:	fffcffff 	.word	0xfffcffff
 800297c:	fff7ffff 	.word	0xfff7ffff
 8002980:	00001388 	.word	0x00001388
 8002984:	ffcfffff 	.word	0xffcfffff
 8002988:	efffffff 	.word	0xefffffff
 800298c:	fffff3ff 	.word	0xfffff3ff
 8002990:	ffffcfff 	.word	0xffffcfff
 8002994:	fbffffff 	.word	0xfbffffff
 8002998:	fff3ffff 	.word	0xfff3ffff

0800299c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e01e      	b.n	80029ec <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2239      	movs	r2, #57	; 0x39
 80029b2:	5c9b      	ldrb	r3, [r3, r2]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d107      	bne.n	80029ca <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2238      	movs	r2, #56	; 0x38
 80029be:	2100      	movs	r1, #0
 80029c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	0018      	movs	r0, r3
 80029c6:	f001 fe9f 	bl	8004708 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2239      	movs	r2, #57	; 0x39
 80029ce:	2102      	movs	r1, #2
 80029d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3304      	adds	r3, #4
 80029da:	0019      	movs	r1, r3
 80029dc:	0010      	movs	r0, r2
 80029de:	f000 fabf 	bl	8002f60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2239      	movs	r2, #57	; 0x39
 80029e6:	2101      	movs	r1, #1
 80029e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b002      	add	sp, #8
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d011      	beq.n	8002a28 <HAL_TIM_OC_Start_IT+0x34>
 8002a04:	d802      	bhi.n	8002a0c <HAL_TIM_OC_Start_IT+0x18>
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8002a0a:	e028      	b.n	8002a5e <HAL_TIM_OC_Start_IT+0x6a>
  switch (Channel)
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d014      	beq.n	8002a3a <HAL_TIM_OC_Start_IT+0x46>
 8002a10:	2b0c      	cmp	r3, #12
 8002a12:	d01b      	beq.n	8002a4c <HAL_TIM_OC_Start_IT+0x58>
      break;
 8002a14:	e023      	b.n	8002a5e <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2102      	movs	r1, #2
 8002a22:	430a      	orrs	r2, r1
 8002a24:	60da      	str	r2, [r3, #12]
      break;
 8002a26:	e01a      	b.n	8002a5e <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2104      	movs	r1, #4
 8002a34:	430a      	orrs	r2, r1
 8002a36:	60da      	str	r2, [r3, #12]
      break;
 8002a38:	e011      	b.n	8002a5e <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2108      	movs	r1, #8
 8002a46:	430a      	orrs	r2, r1
 8002a48:	60da      	str	r2, [r3, #12]
      break;
 8002a4a:	e008      	b.n	8002a5e <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2110      	movs	r1, #16
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	60da      	str	r2, [r3, #12]
      break;
 8002a5c:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6839      	ldr	r1, [r7, #0]
 8002a64:	2201      	movs	r2, #1
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 fbdc 	bl	8003224 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2207      	movs	r2, #7
 8002a74:	4013      	ands	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2b06      	cmp	r3, #6
 8002a7c:	d007      	beq.n	8002a8e <HAL_TIM_OC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2101      	movs	r1, #1
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	0018      	movs	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b004      	add	sp, #16
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e01e      	b.n	8002ae8 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2239      	movs	r2, #57	; 0x39
 8002aae:	5c9b      	ldrb	r3, [r3, r2]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d107      	bne.n	8002ac6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2238      	movs	r2, #56	; 0x38
 8002aba:	2100      	movs	r1, #0
 8002abc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f001 fe09 	bl	80046d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2239      	movs	r2, #57	; 0x39
 8002aca:	2102      	movs	r1, #2
 8002acc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	0010      	movs	r0, r2
 8002ada:	f000 fa41 	bl	8002f60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2239      	movs	r2, #57	; 0x39
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b002      	add	sp, #8
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6839      	ldr	r1, [r7, #0]
 8002b00:	2201      	movs	r2, #1
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 fb8e 	bl	8003224 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2207      	movs	r2, #7
 8002b10:	4013      	ands	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b06      	cmp	r3, #6
 8002b18:	d007      	beq.n	8002b2a <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2101      	movs	r1, #1
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b004      	add	sp, #16
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d124      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2202      	movs	r2, #2
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d11d      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	4252      	negs	r2, r2
 8002b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2203      	movs	r2, #3
 8002b70:	4013      	ands	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f000 f9da 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e007      	b.n	8002b8e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 f9cd 	bl	8002f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 f9d9 	bl	8002f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d125      	bne.n	8002bee <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2204      	movs	r2, #4
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d11e      	bne.n	8002bee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2205      	movs	r2, #5
 8002bb6:	4252      	negs	r2, r2
 8002bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	23c0      	movs	r3, #192	; 0xc0
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 f9ad 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8002bd6:	e007      	b.n	8002be8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 f9a0 	bl	8002f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 f9ac 	bl	8002f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d124      	bne.n	8002c46 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2208      	movs	r2, #8
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d11d      	bne.n	8002c46 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2209      	movs	r2, #9
 8002c10:	4252      	negs	r2, r2
 8002c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2204      	movs	r2, #4
 8002c18:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2203      	movs	r2, #3
 8002c22:	4013      	ands	r3, r2
 8002c24:	d004      	beq.n	8002c30 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f000 f981 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8002c2e:	e007      	b.n	8002c40 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f000 f974 	bl	8002f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f000 f980 	bl	8002f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	d125      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2210      	movs	r2, #16
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b10      	cmp	r3, #16
 8002c60:	d11e      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2211      	movs	r2, #17
 8002c68:	4252      	negs	r2, r2
 8002c6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2208      	movs	r2, #8
 8002c70:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	23c0      	movs	r3, #192	; 0xc0
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d004      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f000 f954 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8002c88:	e007      	b.n	8002c9a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f000 f947 	bl	8002f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	0018      	movs	r0, r3
 8002c96:	f000 f953 	bl	8002f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d10f      	bne.n	8002cce <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d108      	bne.n	8002cce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	4252      	negs	r2, r2
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 f921 	bl	8002f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2240      	movs	r2, #64	; 0x40
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d10f      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2240      	movs	r2, #64	; 0x40
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b40      	cmp	r3, #64	; 0x40
 8002ce8:	d108      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2241      	movs	r2, #65	; 0x41
 8002cf0:	4252      	negs	r2, r2
 8002cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f000 f92a 	bl	8002f50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b002      	add	sp, #8
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2238      	movs	r2, #56	; 0x38
 8002d14:	5c9b      	ldrb	r3, [r3, r2]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_TIM_OC_ConfigChannel+0x1a>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e03c      	b.n	8002d98 <HAL_TIM_OC_ConfigChannel+0x94>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2238      	movs	r2, #56	; 0x38
 8002d22:	2101      	movs	r1, #1
 8002d24:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2239      	movs	r2, #57	; 0x39
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d010      	beq.n	8002d56 <HAL_TIM_OC_ConfigChannel+0x52>
 8002d34:	d802      	bhi.n	8002d3c <HAL_TIM_OC_ConfigChannel+0x38>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8002d3a:	e024      	b.n	8002d86 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d012      	beq.n	8002d66 <HAL_TIM_OC_ConfigChannel+0x62>
 8002d40:	2b0c      	cmp	r3, #12
 8002d42:	d018      	beq.n	8002d76 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8002d44:	e01f      	b.n	8002d86 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	0011      	movs	r1, r2
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f000 f964 	bl	800301c <TIM_OC1_SetConfig>
      break;
 8002d54:	e017      	b.n	8002d86 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	0011      	movs	r1, r2
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f000 f998 	bl	8003094 <TIM_OC2_SetConfig>
      break;
 8002d64:	e00f      	b.n	8002d86 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	0011      	movs	r1, r2
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f000 f9d2 	bl	8003118 <TIM_OC3_SetConfig>
      break;
 8002d74:	e007      	b.n	8002d86 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	0011      	movs	r1, r2
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f000 fa0a 	bl	8003198 <TIM_OC4_SetConfig>
      break;
 8002d84:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2239      	movs	r2, #57	; 0x39
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2238      	movs	r2, #56	; 0x38
 8002d92:	2100      	movs	r1, #0
 8002d94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	0018      	movs	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b004      	add	sp, #16
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2238      	movs	r2, #56	; 0x38
 8002db0:	5c9b      	ldrb	r3, [r3, r2]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e0a4      	b.n	8002f04 <HAL_TIM_PWM_ConfigChannel+0x164>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2238      	movs	r2, #56	; 0x38
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2239      	movs	r2, #57	; 0x39
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d029      	beq.n	8002e24 <HAL_TIM_PWM_ConfigChannel+0x84>
 8002dd0:	d802      	bhi.n	8002dd8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002dd6:	e08c      	b.n	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d046      	beq.n	8002e6a <HAL_TIM_PWM_ConfigChannel+0xca>
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	d065      	beq.n	8002eac <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002de0:	e087      	b.n	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	0011      	movs	r1, r2
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 f916 	bl	800301c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2108      	movs	r1, #8
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699a      	ldr	r2, [r3, #24]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	438a      	bics	r2, r1
 8002e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6999      	ldr	r1, [r3, #24]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	619a      	str	r2, [r3, #24]
      break;
 8002e22:	e066      	b.n	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	0011      	movs	r1, r2
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f000 f931 	bl	8003094 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699a      	ldr	r2, [r3, #24]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2180      	movs	r1, #128	; 0x80
 8002e3e:	0109      	lsls	r1, r1, #4
 8002e40:	430a      	orrs	r2, r1
 8002e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	492f      	ldr	r1, [pc, #188]	; (8002f0c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002e50:	400a      	ands	r2, r1
 8002e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6999      	ldr	r1, [r3, #24]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	021a      	lsls	r2, r3, #8
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	619a      	str	r2, [r3, #24]
      break;
 8002e68:	e043      	b.n	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	0011      	movs	r1, r2
 8002e72:	0018      	movs	r0, r3
 8002e74:	f000 f950 	bl	8003118 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69da      	ldr	r2, [r3, #28]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2108      	movs	r1, #8
 8002e84:	430a      	orrs	r2, r1
 8002e86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	69da      	ldr	r2, [r3, #28]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2104      	movs	r1, #4
 8002e94:	438a      	bics	r2, r1
 8002e96:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69d9      	ldr	r1, [r3, #28]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	61da      	str	r2, [r3, #28]
      break;
 8002eaa:	e022      	b.n	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	0011      	movs	r1, r2
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f000 f96f 	bl	8003198 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2180      	movs	r1, #128	; 0x80
 8002ec6:	0109      	lsls	r1, r1, #4
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69da      	ldr	r2, [r3, #28]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	490d      	ldr	r1, [pc, #52]	; (8002f0c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002ed8:	400a      	ands	r2, r1
 8002eda:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69d9      	ldr	r1, [r3, #28]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	021a      	lsls	r2, r3, #8
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	61da      	str	r2, [r3, #28]
      break;
 8002ef0:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2239      	movs	r2, #57	; 0x39
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2238      	movs	r2, #56	; 0x38
 8002efe:	2100      	movs	r1, #0
 8002f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b004      	add	sp, #16
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	fffffbff 	.word	0xfffffbff

08002f10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b002      	add	sp, #8
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b002      	add	sp, #8
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f58:	46c0      	nop			; (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b002      	add	sp, #8
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	05db      	lsls	r3, r3, #23
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d00b      	beq.n	8002f92 <TIM_Base_SetConfig+0x32>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a23      	ldr	r2, [pc, #140]	; (800300c <TIM_Base_SetConfig+0xac>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d007      	beq.n	8002f92 <TIM_Base_SetConfig+0x32>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a22      	ldr	r2, [pc, #136]	; (8003010 <TIM_Base_SetConfig+0xb0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d003      	beq.n	8002f92 <TIM_Base_SetConfig+0x32>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a21      	ldr	r2, [pc, #132]	; (8003014 <TIM_Base_SetConfig+0xb4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d108      	bne.n	8002fa4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2270      	movs	r2, #112	; 0x70
 8002f96:	4393      	bics	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	05db      	lsls	r3, r3, #23
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d00b      	beq.n	8002fc6 <TIM_Base_SetConfig+0x66>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a16      	ldr	r2, [pc, #88]	; (800300c <TIM_Base_SetConfig+0xac>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <TIM_Base_SetConfig+0x66>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a15      	ldr	r2, [pc, #84]	; (8003010 <TIM_Base_SetConfig+0xb0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d003      	beq.n	8002fc6 <TIM_Base_SetConfig+0x66>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a14      	ldr	r2, [pc, #80]	; (8003014 <TIM_Base_SetConfig+0xb4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d108      	bne.n	8002fd8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4a13      	ldr	r2, [pc, #76]	; (8003018 <TIM_Base_SetConfig+0xb8>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2280      	movs	r2, #128	; 0x80
 8002fdc:	4393      	bics	r3, r2
 8002fde:	001a      	movs	r2, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	615a      	str	r2, [r3, #20]
}
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b004      	add	sp, #16
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40000400 	.word	0x40000400
 8003010:	40010800 	.word	0x40010800
 8003014:	40011400 	.word	0x40011400
 8003018:	fffffcff 	.word	0xfffffcff

0800301c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	2201      	movs	r2, #1
 800302c:	4393      	bics	r3, r2
 800302e:	001a      	movs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2270      	movs	r2, #112	; 0x70
 800304a:	4393      	bics	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2203      	movs	r2, #3
 8003052:	4393      	bics	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2202      	movs	r2, #2
 8003064:	4393      	bics	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	621a      	str	r2, [r3, #32]
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b006      	add	sp, #24
 8003092:	bd80      	pop	{r7, pc}

08003094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	2210      	movs	r2, #16
 80030a4:	4393      	bics	r3, r2
 80030a6:	001a      	movs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4a13      	ldr	r2, [pc, #76]	; (8003110 <TIM_OC2_SetConfig+0x7c>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a12      	ldr	r2, [pc, #72]	; (8003114 <TIM_OC2_SetConfig+0x80>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2220      	movs	r2, #32
 80030de:	4393      	bics	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	621a      	str	r2, [r3, #32]
}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	b006      	add	sp, #24
 800310e:	bd80      	pop	{r7, pc}
 8003110:	ffff8fff 	.word	0xffff8fff
 8003114:	fffffcff 	.word	0xfffffcff

08003118 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4a1a      	ldr	r2, [pc, #104]	; (8003190 <TIM_OC3_SetConfig+0x78>)
 8003128:	401a      	ands	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2270      	movs	r2, #112	; 0x70
 8003144:	4393      	bics	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2203      	movs	r2, #3
 800314c:	4393      	bics	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	4a0d      	ldr	r2, [pc, #52]	; (8003194 <TIM_OC3_SetConfig+0x7c>)
 800315e:	4013      	ands	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	621a      	str	r2, [r3, #32]
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b006      	add	sp, #24
 800318e:	bd80      	pop	{r7, pc}
 8003190:	fffffeff 	.word	0xfffffeff
 8003194:	fffffdff 	.word	0xfffffdff

08003198 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4a1b      	ldr	r2, [pc, #108]	; (8003214 <TIM_OC4_SetConfig+0x7c>)
 80031a8:	401a      	ands	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4a15      	ldr	r2, [pc, #84]	; (8003218 <TIM_OC4_SetConfig+0x80>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a14      	ldr	r2, [pc, #80]	; (800321c <TIM_OC4_SetConfig+0x84>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	021b      	lsls	r3, r3, #8
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	4a10      	ldr	r2, [pc, #64]	; (8003220 <TIM_OC4_SetConfig+0x88>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	031b      	lsls	r3, r3, #12
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	621a      	str	r2, [r3, #32]
}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b006      	add	sp, #24
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	ffffefff 	.word	0xffffefff
 8003218:	ffff8fff 	.word	0xffff8fff
 800321c:	fffffcff 	.word	0xfffffcff
 8003220:	ffffdfff 	.word	0xffffdfff

08003224 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	221f      	movs	r2, #31
 8003234:	4013      	ands	r3, r2
 8003236:	2201      	movs	r2, #1
 8003238:	409a      	lsls	r2, r3
 800323a:	0013      	movs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	43d2      	mvns	r2, r2
 8003246:	401a      	ands	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a1a      	ldr	r2, [r3, #32]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	211f      	movs	r1, #31
 8003254:	400b      	ands	r3, r1
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4099      	lsls	r1, r3
 800325a:	000b      	movs	r3, r1
 800325c:	431a      	orrs	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	b006      	add	sp, #24
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2238      	movs	r2, #56	; 0x38
 8003278:	5c9b      	ldrb	r3, [r3, r2]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800327e:	2302      	movs	r3, #2
 8003280:	e032      	b.n	80032e8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2238      	movs	r2, #56	; 0x38
 8003286:	2101      	movs	r1, #1
 8003288:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2239      	movs	r2, #57	; 0x39
 800328e:	2102      	movs	r1, #2
 8003290:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2270      	movs	r2, #112	; 0x70
 80032a6:	4393      	bics	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2280      	movs	r2, #128	; 0x80
 80032b8:	4393      	bics	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2239      	movs	r2, #57	; 0x39
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2238      	movs	r2, #56	; 0x38
 80032e2:	2100      	movs	r1, #0
 80032e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b004      	add	sp, #16
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2238      	movs	r2, #56	; 0x38
 80032fe:	5c9b      	ldrb	r3, [r3, r2]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_TIMEx_RemapConfig+0x18>
 8003304:	2302      	movs	r3, #2
 8003306:	e00c      	b.n	8003322 <HAL_TIMEx_RemapConfig+0x32>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2238      	movs	r2, #56	; 0x38
 800330c:	2101      	movs	r1, #1
 800330e:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2238      	movs	r2, #56	; 0x38
 800331c:	2100      	movs	r1, #0
 800331e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	0018      	movs	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	b002      	add	sp, #8
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e044      	b.n	80033c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	2b00      	cmp	r3, #0
 8003344:	d107      	bne.n	8003356 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2270      	movs	r2, #112	; 0x70
 800334a:	2100      	movs	r1, #0
 800334c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	0018      	movs	r0, r3
 8003352:	f001 fa5b 	bl	800480c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2224      	movs	r2, #36	; 0x24
 800335a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2101      	movs	r1, #1
 8003368:	438a      	bics	r2, r1
 800336a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	0018      	movs	r0, r3
 8003370:	f000 f8d8 	bl	8003524 <UART_SetConfig>
 8003374:	0003      	movs	r3, r0
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e024      	b.n	80033c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	0018      	movs	r0, r3
 800338a:	f000 fbff 	bl	8003b8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	490d      	ldr	r1, [pc, #52]	; (80033d0 <HAL_UART_Init+0xa4>)
 800339a:	400a      	ands	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	212a      	movs	r1, #42	; 0x2a
 80033aa:	438a      	bics	r2, r1
 80033ac:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2101      	movs	r1, #1
 80033ba:	430a      	orrs	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	0018      	movs	r0, r3
 80033c2:	f000 fc97 	bl	8003cf4 <UART_CheckIdleState>
 80033c6:	0003      	movs	r3, r0
}
 80033c8:	0018      	movs	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b002      	add	sp, #8
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	ffffb7ff 	.word	0xffffb7ff

080033d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af02      	add	r7, sp, #8
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	1dbb      	adds	r3, r7, #6
 80033e2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d000      	beq.n	80033ee <HAL_UART_Transmit+0x1a>
 80033ec:	e094      	b.n	8003518 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_UART_Transmit+0x28>
 80033f4:	1dbb      	adds	r3, r7, #6
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e08c      	b.n	800351a <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	015b      	lsls	r3, r3, #5
 8003408:	429a      	cmp	r2, r3
 800340a:	d109      	bne.n	8003420 <HAL_UART_Transmit+0x4c>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d105      	bne.n	8003420 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2201      	movs	r2, #1
 8003418:	4013      	ands	r3, r2
 800341a:	d001      	beq.n	8003420 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e07c      	b.n	800351a <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2270      	movs	r2, #112	; 0x70
 8003424:	5c9b      	ldrb	r3, [r3, r2]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_UART_Transmit+0x5a>
 800342a:	2302      	movs	r3, #2
 800342c:	e075      	b.n	800351a <HAL_UART_Transmit+0x146>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2270      	movs	r2, #112	; 0x70
 8003432:	2101      	movs	r1, #1
 8003434:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2221      	movs	r2, #33	; 0x21
 8003440:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003442:	f7fe f8dd 	bl	8001600 <HAL_GetTick>
 8003446:	0003      	movs	r3, r0
 8003448:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1dba      	adds	r2, r7, #6
 800344e:	2150      	movs	r1, #80	; 0x50
 8003450:	8812      	ldrh	r2, [r2, #0]
 8003452:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1dba      	adds	r2, r7, #6
 8003458:	2152      	movs	r1, #82	; 0x52
 800345a:	8812      	ldrh	r2, [r2, #0]
 800345c:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	2380      	movs	r3, #128	; 0x80
 8003464:	015b      	lsls	r3, r3, #5
 8003466:	429a      	cmp	r2, r3
 8003468:	d108      	bne.n	800347c <HAL_UART_Transmit+0xa8>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d104      	bne.n	800347c <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	e003      	b.n	8003484 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003480:	2300      	movs	r3, #0
 8003482:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003484:	e02c      	b.n	80034e0 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	0013      	movs	r3, r2
 8003490:	2200      	movs	r2, #0
 8003492:	2180      	movs	r1, #128	; 0x80
 8003494:	f000 fc74 	bl	8003d80 <UART_WaitOnFlagUntilTimeout>
 8003498:	1e03      	subs	r3, r0, #0
 800349a:	d001      	beq.n	80034a0 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e03c      	b.n	800351a <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10b      	bne.n	80034be <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	001a      	movs	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	05d2      	lsls	r2, r2, #23
 80034b2:	0dd2      	lsrs	r2, r2, #23
 80034b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	3302      	adds	r3, #2
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	e007      	b.n	80034ce <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	781a      	ldrb	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	3301      	adds	r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2252      	movs	r2, #82	; 0x52
 80034d2:	5a9b      	ldrh	r3, [r3, r2]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b299      	uxth	r1, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2252      	movs	r2, #82	; 0x52
 80034de:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2252      	movs	r2, #82	; 0x52
 80034e4:	5a9b      	ldrh	r3, [r3, r2]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1cc      	bne.n	8003486 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	0013      	movs	r3, r2
 80034f6:	2200      	movs	r2, #0
 80034f8:	2140      	movs	r1, #64	; 0x40
 80034fa:	f000 fc41 	bl	8003d80 <UART_WaitOnFlagUntilTimeout>
 80034fe:	1e03      	subs	r3, r0, #0
 8003500:	d001      	beq.n	8003506 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e009      	b.n	800351a <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2270      	movs	r2, #112	; 0x70
 8003510:	2100      	movs	r1, #0
 8003512:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	e000      	b.n	800351a <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8003518:	2302      	movs	r3, #2
  }
}
 800351a:	0018      	movs	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	b008      	add	sp, #32
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003524:	b5b0      	push	{r4, r5, r7, lr}
 8003526:	b08e      	sub	sp, #56	; 0x38
 8003528:	af00      	add	r7, sp, #0
 800352a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800352c:	231b      	movs	r3, #27
 800352e:	2218      	movs	r2, #24
 8003530:	4694      	mov	ip, r2
 8003532:	44bc      	add	ip, r7
 8003534:	4463      	add	r3, ip
 8003536:	2210      	movs	r2, #16
 8003538:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800353a:	2300      	movs	r3, #0
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800353e:	2313      	movs	r3, #19
 8003540:	2218      	movs	r2, #24
 8003542:	4694      	mov	ip, r2
 8003544:	44bc      	add	ip, r7
 8003546:	4463      	add	r3, ip
 8003548:	2200      	movs	r2, #0
 800354a:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800354c:	2300      	movs	r3, #0
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	431a      	orrs	r2, r3
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	431a      	orrs	r2, r3
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	4313      	orrs	r3, r2
 8003566:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4aca      	ldr	r2, [pc, #808]	; (8003898 <UART_SetConfig+0x374>)
 8003570:	4013      	ands	r3, r2
 8003572:	0019      	movs	r1, r3
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800357a:	430a      	orrs	r2, r1
 800357c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4ac5      	ldr	r2, [pc, #788]	; (800389c <UART_SetConfig+0x378>)
 8003586:	4013      	ands	r3, r2
 8003588:	0019      	movs	r1, r3
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4abf      	ldr	r2, [pc, #764]	; (80038a0 <UART_SetConfig+0x37c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d004      	beq.n	80035b0 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ac:	4313      	orrs	r3, r2
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4abb      	ldr	r2, [pc, #748]	; (80038a4 <UART_SetConfig+0x380>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	0019      	movs	r1, r3
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035c2:	430a      	orrs	r2, r1
 80035c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4ab7      	ldr	r2, [pc, #732]	; (80038a8 <UART_SetConfig+0x384>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d134      	bne.n	800363a <UART_SetConfig+0x116>
 80035d0:	4bb6      	ldr	r3, [pc, #728]	; (80038ac <UART_SetConfig+0x388>)
 80035d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d4:	2203      	movs	r2, #3
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d015      	beq.n	8003608 <UART_SetConfig+0xe4>
 80035dc:	d304      	bcc.n	80035e8 <UART_SetConfig+0xc4>
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d00a      	beq.n	80035f8 <UART_SetConfig+0xd4>
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d018      	beq.n	8003618 <UART_SetConfig+0xf4>
 80035e6:	e01f      	b.n	8003628 <UART_SetConfig+0x104>
 80035e8:	231b      	movs	r3, #27
 80035ea:	2218      	movs	r2, #24
 80035ec:	4694      	mov	ip, r2
 80035ee:	44bc      	add	ip, r7
 80035f0:	4463      	add	r3, ip
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	e0c5      	b.n	8003784 <UART_SetConfig+0x260>
 80035f8:	231b      	movs	r3, #27
 80035fa:	2218      	movs	r2, #24
 80035fc:	4694      	mov	ip, r2
 80035fe:	44bc      	add	ip, r7
 8003600:	4463      	add	r3, ip
 8003602:	2202      	movs	r2, #2
 8003604:	701a      	strb	r2, [r3, #0]
 8003606:	e0bd      	b.n	8003784 <UART_SetConfig+0x260>
 8003608:	231b      	movs	r3, #27
 800360a:	2218      	movs	r2, #24
 800360c:	4694      	mov	ip, r2
 800360e:	44bc      	add	ip, r7
 8003610:	4463      	add	r3, ip
 8003612:	2204      	movs	r2, #4
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e0b5      	b.n	8003784 <UART_SetConfig+0x260>
 8003618:	231b      	movs	r3, #27
 800361a:	2218      	movs	r2, #24
 800361c:	4694      	mov	ip, r2
 800361e:	44bc      	add	ip, r7
 8003620:	4463      	add	r3, ip
 8003622:	2208      	movs	r2, #8
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	e0ad      	b.n	8003784 <UART_SetConfig+0x260>
 8003628:	231b      	movs	r3, #27
 800362a:	2218      	movs	r2, #24
 800362c:	4694      	mov	ip, r2
 800362e:	44bc      	add	ip, r7
 8003630:	4463      	add	r3, ip
 8003632:	2210      	movs	r2, #16
 8003634:	701a      	strb	r2, [r3, #0]
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	e0a4      	b.n	8003784 <UART_SetConfig+0x260>
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a9c      	ldr	r2, [pc, #624]	; (80038b0 <UART_SetConfig+0x38c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d137      	bne.n	80036b4 <UART_SetConfig+0x190>
 8003644:	4b99      	ldr	r3, [pc, #612]	; (80038ac <UART_SetConfig+0x388>)
 8003646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003648:	220c      	movs	r2, #12
 800364a:	4013      	ands	r3, r2
 800364c:	2b04      	cmp	r3, #4
 800364e:	d018      	beq.n	8003682 <UART_SetConfig+0x15e>
 8003650:	d802      	bhi.n	8003658 <UART_SetConfig+0x134>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <UART_SetConfig+0x13e>
 8003656:	e024      	b.n	80036a2 <UART_SetConfig+0x17e>
 8003658:	2b08      	cmp	r3, #8
 800365a:	d00a      	beq.n	8003672 <UART_SetConfig+0x14e>
 800365c:	2b0c      	cmp	r3, #12
 800365e:	d018      	beq.n	8003692 <UART_SetConfig+0x16e>
 8003660:	e01f      	b.n	80036a2 <UART_SetConfig+0x17e>
 8003662:	231b      	movs	r3, #27
 8003664:	2218      	movs	r2, #24
 8003666:	4694      	mov	ip, r2
 8003668:	44bc      	add	ip, r7
 800366a:	4463      	add	r3, ip
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
 8003670:	e088      	b.n	8003784 <UART_SetConfig+0x260>
 8003672:	231b      	movs	r3, #27
 8003674:	2218      	movs	r2, #24
 8003676:	4694      	mov	ip, r2
 8003678:	44bc      	add	ip, r7
 800367a:	4463      	add	r3, ip
 800367c:	2202      	movs	r2, #2
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	e080      	b.n	8003784 <UART_SetConfig+0x260>
 8003682:	231b      	movs	r3, #27
 8003684:	2218      	movs	r2, #24
 8003686:	4694      	mov	ip, r2
 8003688:	44bc      	add	ip, r7
 800368a:	4463      	add	r3, ip
 800368c:	2204      	movs	r2, #4
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	e078      	b.n	8003784 <UART_SetConfig+0x260>
 8003692:	231b      	movs	r3, #27
 8003694:	2218      	movs	r2, #24
 8003696:	4694      	mov	ip, r2
 8003698:	44bc      	add	ip, r7
 800369a:	4463      	add	r3, ip
 800369c:	2208      	movs	r2, #8
 800369e:	701a      	strb	r2, [r3, #0]
 80036a0:	e070      	b.n	8003784 <UART_SetConfig+0x260>
 80036a2:	231b      	movs	r3, #27
 80036a4:	2218      	movs	r2, #24
 80036a6:	4694      	mov	ip, r2
 80036a8:	44bc      	add	ip, r7
 80036aa:	4463      	add	r3, ip
 80036ac:	2210      	movs	r2, #16
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	e067      	b.n	8003784 <UART_SetConfig+0x260>
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a7e      	ldr	r2, [pc, #504]	; (80038b4 <UART_SetConfig+0x390>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d107      	bne.n	80036ce <UART_SetConfig+0x1aa>
 80036be:	231b      	movs	r3, #27
 80036c0:	2218      	movs	r2, #24
 80036c2:	4694      	mov	ip, r2
 80036c4:	44bc      	add	ip, r7
 80036c6:	4463      	add	r3, ip
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
 80036cc:	e05a      	b.n	8003784 <UART_SetConfig+0x260>
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a79      	ldr	r2, [pc, #484]	; (80038b8 <UART_SetConfig+0x394>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d107      	bne.n	80036e8 <UART_SetConfig+0x1c4>
 80036d8:	231b      	movs	r3, #27
 80036da:	2218      	movs	r2, #24
 80036dc:	4694      	mov	ip, r2
 80036de:	44bc      	add	ip, r7
 80036e0:	4463      	add	r3, ip
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	e04d      	b.n	8003784 <UART_SetConfig+0x260>
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a6c      	ldr	r2, [pc, #432]	; (80038a0 <UART_SetConfig+0x37c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d141      	bne.n	8003776 <UART_SetConfig+0x252>
 80036f2:	4b6e      	ldr	r3, [pc, #440]	; (80038ac <UART_SetConfig+0x388>)
 80036f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036f6:	23c0      	movs	r3, #192	; 0xc0
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	4013      	ands	r3, r2
 80036fc:	2280      	movs	r2, #128	; 0x80
 80036fe:	00d2      	lsls	r2, r2, #3
 8003700:	4293      	cmp	r3, r2
 8003702:	d01f      	beq.n	8003744 <UART_SetConfig+0x220>
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	00d2      	lsls	r2, r2, #3
 8003708:	4293      	cmp	r3, r2
 800370a:	d802      	bhi.n	8003712 <UART_SetConfig+0x1ee>
 800370c:	2b00      	cmp	r3, #0
 800370e:	d009      	beq.n	8003724 <UART_SetConfig+0x200>
 8003710:	e028      	b.n	8003764 <UART_SetConfig+0x240>
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	0112      	lsls	r2, r2, #4
 8003716:	4293      	cmp	r3, r2
 8003718:	d00c      	beq.n	8003734 <UART_SetConfig+0x210>
 800371a:	22c0      	movs	r2, #192	; 0xc0
 800371c:	0112      	lsls	r2, r2, #4
 800371e:	4293      	cmp	r3, r2
 8003720:	d018      	beq.n	8003754 <UART_SetConfig+0x230>
 8003722:	e01f      	b.n	8003764 <UART_SetConfig+0x240>
 8003724:	231b      	movs	r3, #27
 8003726:	2218      	movs	r2, #24
 8003728:	4694      	mov	ip, r2
 800372a:	44bc      	add	ip, r7
 800372c:	4463      	add	r3, ip
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e027      	b.n	8003784 <UART_SetConfig+0x260>
 8003734:	231b      	movs	r3, #27
 8003736:	2218      	movs	r2, #24
 8003738:	4694      	mov	ip, r2
 800373a:	44bc      	add	ip, r7
 800373c:	4463      	add	r3, ip
 800373e:	2202      	movs	r2, #2
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	e01f      	b.n	8003784 <UART_SetConfig+0x260>
 8003744:	231b      	movs	r3, #27
 8003746:	2218      	movs	r2, #24
 8003748:	4694      	mov	ip, r2
 800374a:	44bc      	add	ip, r7
 800374c:	4463      	add	r3, ip
 800374e:	2204      	movs	r2, #4
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	e017      	b.n	8003784 <UART_SetConfig+0x260>
 8003754:	231b      	movs	r3, #27
 8003756:	2218      	movs	r2, #24
 8003758:	4694      	mov	ip, r2
 800375a:	44bc      	add	ip, r7
 800375c:	4463      	add	r3, ip
 800375e:	2208      	movs	r2, #8
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	e00f      	b.n	8003784 <UART_SetConfig+0x260>
 8003764:	231b      	movs	r3, #27
 8003766:	2218      	movs	r2, #24
 8003768:	4694      	mov	ip, r2
 800376a:	44bc      	add	ip, r7
 800376c:	4463      	add	r3, ip
 800376e:	2210      	movs	r2, #16
 8003770:	701a      	strb	r2, [r3, #0]
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	e006      	b.n	8003784 <UART_SetConfig+0x260>
 8003776:	231b      	movs	r3, #27
 8003778:	2218      	movs	r2, #24
 800377a:	4694      	mov	ip, r2
 800377c:	44bc      	add	ip, r7
 800377e:	4463      	add	r3, ip
 8003780:	2210      	movs	r2, #16
 8003782:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a45      	ldr	r2, [pc, #276]	; (80038a0 <UART_SetConfig+0x37c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d000      	beq.n	8003790 <UART_SetConfig+0x26c>
 800378e:	e09d      	b.n	80038cc <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003790:	231b      	movs	r3, #27
 8003792:	2218      	movs	r2, #24
 8003794:	4694      	mov	ip, r2
 8003796:	44bc      	add	ip, r7
 8003798:	4463      	add	r3, ip
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d00d      	beq.n	80037bc <UART_SetConfig+0x298>
 80037a0:	dc02      	bgt.n	80037a8 <UART_SetConfig+0x284>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <UART_SetConfig+0x28e>
 80037a6:	e01d      	b.n	80037e4 <UART_SetConfig+0x2c0>
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d012      	beq.n	80037d2 <UART_SetConfig+0x2ae>
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d015      	beq.n	80037dc <UART_SetConfig+0x2b8>
 80037b0:	e018      	b.n	80037e4 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80037b2:	f7fe ff53 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 80037b6:	0003      	movs	r3, r0
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037ba:	e01b      	b.n	80037f4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037bc:	4b3b      	ldr	r3, [pc, #236]	; (80038ac <UART_SetConfig+0x388>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2210      	movs	r2, #16
 80037c2:	4013      	ands	r3, r2
 80037c4:	d002      	beq.n	80037cc <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80037c6:	4b3d      	ldr	r3, [pc, #244]	; (80038bc <UART_SetConfig+0x398>)
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80037ca:	e013      	b.n	80037f4 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80037cc:	4b3c      	ldr	r3, [pc, #240]	; (80038c0 <UART_SetConfig+0x39c>)
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037d0:	e010      	b.n	80037f4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80037d2:	f7fe feb5 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 80037d6:	0003      	movs	r3, r0
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037da:	e00b      	b.n	80037f4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037e2:	e007      	b.n	80037f4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80037e4:	2313      	movs	r3, #19
 80037e6:	2218      	movs	r2, #24
 80037e8:	4694      	mov	ip, r2
 80037ea:	44bc      	add	ip, r7
 80037ec:	4463      	add	r3, ip
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
        break;
 80037f2:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d100      	bne.n	80037fc <UART_SetConfig+0x2d8>
 80037fa:	e1a6      	b.n	8003b4a <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	0013      	movs	r3, r2
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	189b      	adds	r3, r3, r2
 8003806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003808:	429a      	cmp	r2, r3
 800380a:	d305      	bcc.n	8003818 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003814:	429a      	cmp	r2, r3
 8003816:	d907      	bls.n	8003828 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8003818:	2313      	movs	r3, #19
 800381a:	2218      	movs	r2, #24
 800381c:	4694      	mov	ip, r2
 800381e:	44bc      	add	ip, r7
 8003820:	4463      	add	r3, ip
 8003822:	2201      	movs	r2, #1
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	e190      	b.n	8003b4a <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	6939      	ldr	r1, [r7, #16]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	000b      	movs	r3, r1
 8003836:	0e1b      	lsrs	r3, r3, #24
 8003838:	0010      	movs	r0, r2
 800383a:	0205      	lsls	r5, r0, #8
 800383c:	431d      	orrs	r5, r3
 800383e:	000b      	movs	r3, r1
 8003840:	021c      	lsls	r4, r3, #8
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	68b8      	ldr	r0, [r7, #8]
 8003850:	68f9      	ldr	r1, [r7, #12]
 8003852:	1900      	adds	r0, r0, r4
 8003854:	4169      	adcs	r1, r5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	2300      	movs	r3, #0
 800385e:	607b      	str	r3, [r7, #4]
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f7fc fe04 	bl	8000470 <__aeabi_uldivmod>
 8003868:	0003      	movs	r3, r0
 800386a:	000c      	movs	r4, r1
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <UART_SetConfig+0x3a0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d908      	bls.n	8003888 <UART_SetConfig+0x364>
 8003876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003878:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <UART_SetConfig+0x3a4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d804      	bhi.n	8003888 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	e160      	b.n	8003b4a <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8003888:	2313      	movs	r3, #19
 800388a:	2218      	movs	r2, #24
 800388c:	4694      	mov	ip, r2
 800388e:	44bc      	add	ip, r7
 8003890:	4463      	add	r3, ip
 8003892:	2201      	movs	r2, #1
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	e158      	b.n	8003b4a <UART_SetConfig+0x626>
 8003898:	efff69f3 	.word	0xefff69f3
 800389c:	ffffcfff 	.word	0xffffcfff
 80038a0:	40004800 	.word	0x40004800
 80038a4:	fffff4ff 	.word	0xfffff4ff
 80038a8:	40013800 	.word	0x40013800
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40004400 	.word	0x40004400
 80038b4:	40004c00 	.word	0x40004c00
 80038b8:	40005000 	.word	0x40005000
 80038bc:	003d0900 	.word	0x003d0900
 80038c0:	00f42400 	.word	0x00f42400
 80038c4:	000002ff 	.word	0x000002ff
 80038c8:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d000      	beq.n	80038da <UART_SetConfig+0x3b6>
 80038d8:	e0a9      	b.n	8003a2e <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 80038da:	231b      	movs	r3, #27
 80038dc:	2218      	movs	r2, #24
 80038de:	4694      	mov	ip, r2
 80038e0:	44bc      	add	ip, r7
 80038e2:	4463      	add	r3, ip
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d86d      	bhi.n	80039c6 <UART_SetConfig+0x4a2>
 80038ea:	009a      	lsls	r2, r3, #2
 80038ec:	4b9f      	ldr	r3, [pc, #636]	; (8003b6c <UART_SetConfig+0x648>)
 80038ee:	18d3      	adds	r3, r2, r3
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80038f4:	f7fe feb2 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 80038f8:	0003      	movs	r3, r0
 80038fa:	005a      	lsls	r2, r3, #1
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	18d2      	adds	r2, r2, r3
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	0019      	movs	r1, r3
 800390a:	0010      	movs	r0, r2
 800390c:	f7fc fbfc 	bl	8000108 <__udivsi3>
 8003910:	0003      	movs	r3, r0
 8003912:	b29b      	uxth	r3, r3
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003916:	e05e      	b.n	80039d6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003918:	f7fe feb6 	bl	8002688 <HAL_RCC_GetPCLK2Freq>
 800391c:	0003      	movs	r3, r0
 800391e:	005a      	lsls	r2, r3, #1
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	18d2      	adds	r2, r2, r3
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	0019      	movs	r1, r3
 800392e:	0010      	movs	r0, r2
 8003930:	f7fc fbea 	bl	8000108 <__udivsi3>
 8003934:	0003      	movs	r3, r0
 8003936:	b29b      	uxth	r3, r3
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800393a:	e04c      	b.n	80039d6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800393c:	4b8c      	ldr	r3, [pc, #560]	; (8003b70 <UART_SetConfig+0x64c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2210      	movs	r2, #16
 8003942:	4013      	ands	r3, r2
 8003944:	d00e      	beq.n	8003964 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	4a89      	ldr	r2, [pc, #548]	; (8003b74 <UART_SetConfig+0x650>)
 800394e:	189a      	adds	r2, r3, r2
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	0019      	movs	r1, r3
 8003956:	0010      	movs	r0, r2
 8003958:	f7fc fbd6 	bl	8000108 <__udivsi3>
 800395c:	0003      	movs	r3, r0
 800395e:	b29b      	uxth	r3, r3
 8003960:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003962:	e038      	b.n	80039d6 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	4a83      	ldr	r2, [pc, #524]	; (8003b78 <UART_SetConfig+0x654>)
 800396c:	189a      	adds	r2, r3, r2
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	0019      	movs	r1, r3
 8003974:	0010      	movs	r0, r2
 8003976:	f7fc fbc7 	bl	8000108 <__udivsi3>
 800397a:	0003      	movs	r3, r0
 800397c:	b29b      	uxth	r3, r3
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003980:	e029      	b.n	80039d6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003982:	f7fe fddd 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 8003986:	0003      	movs	r3, r0
 8003988:	005a      	lsls	r2, r3, #1
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	085b      	lsrs	r3, r3, #1
 8003990:	18d2      	adds	r2, r2, r3
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	0019      	movs	r1, r3
 8003998:	0010      	movs	r0, r2
 800399a:	f7fc fbb5 	bl	8000108 <__udivsi3>
 800399e:	0003      	movs	r3, r0
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039a4:	e017      	b.n	80039d6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	2280      	movs	r2, #128	; 0x80
 80039ae:	0252      	lsls	r2, r2, #9
 80039b0:	189a      	adds	r2, r3, r2
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	0019      	movs	r1, r3
 80039b8:	0010      	movs	r0, r2
 80039ba:	f7fc fba5 	bl	8000108 <__udivsi3>
 80039be:	0003      	movs	r3, r0
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039c4:	e007      	b.n	80039d6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80039c6:	2313      	movs	r3, #19
 80039c8:	2218      	movs	r2, #24
 80039ca:	4694      	mov	ip, r2
 80039cc:	44bc      	add	ip, r7
 80039ce:	4463      	add	r3, ip
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
        break;
 80039d4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d8:	2b0f      	cmp	r3, #15
 80039da:	d920      	bls.n	8003a1e <UART_SetConfig+0x4fa>
 80039dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039de:	4a67      	ldr	r2, [pc, #412]	; (8003b7c <UART_SetConfig+0x658>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d81c      	bhi.n	8003a1e <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	200a      	movs	r0, #10
 80039ea:	2418      	movs	r4, #24
 80039ec:	193b      	adds	r3, r7, r4
 80039ee:	181b      	adds	r3, r3, r0
 80039f0:	210f      	movs	r1, #15
 80039f2:	438a      	bics	r2, r1
 80039f4:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	085b      	lsrs	r3, r3, #1
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2207      	movs	r2, #7
 80039fe:	4013      	ands	r3, r2
 8003a00:	b299      	uxth	r1, r3
 8003a02:	193b      	adds	r3, r7, r4
 8003a04:	181b      	adds	r3, r3, r0
 8003a06:	193a      	adds	r2, r7, r4
 8003a08:	1812      	adds	r2, r2, r0
 8003a0a:	8812      	ldrh	r2, [r2, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	193a      	adds	r2, r7, r4
 8003a16:	1812      	adds	r2, r2, r0
 8003a18:	8812      	ldrh	r2, [r2, #0]
 8003a1a:	60da      	str	r2, [r3, #12]
 8003a1c:	e095      	b.n	8003b4a <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8003a1e:	2313      	movs	r3, #19
 8003a20:	2218      	movs	r2, #24
 8003a22:	4694      	mov	ip, r2
 8003a24:	44bc      	add	ip, r7
 8003a26:	4463      	add	r3, ip
 8003a28:	2201      	movs	r2, #1
 8003a2a:	701a      	strb	r2, [r3, #0]
 8003a2c:	e08d      	b.n	8003b4a <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8003a2e:	231b      	movs	r3, #27
 8003a30:	2218      	movs	r2, #24
 8003a32:	4694      	mov	ip, r2
 8003a34:	44bc      	add	ip, r7
 8003a36:	4463      	add	r3, ip
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d86a      	bhi.n	8003b14 <UART_SetConfig+0x5f0>
 8003a3e:	009a      	lsls	r2, r3, #2
 8003a40:	4b4f      	ldr	r3, [pc, #316]	; (8003b80 <UART_SetConfig+0x65c>)
 8003a42:	18d3      	adds	r3, r2, r3
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003a48:	f7fe fe08 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 8003a4c:	0002      	movs	r2, r0
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	085b      	lsrs	r3, r3, #1
 8003a54:	18d2      	adds	r2, r2, r3
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	0010      	movs	r0, r2
 8003a5e:	f7fc fb53 	bl	8000108 <__udivsi3>
 8003a62:	0003      	movs	r3, r0
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a68:	e05c      	b.n	8003b24 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003a6a:	f7fe fe0d 	bl	8002688 <HAL_RCC_GetPCLK2Freq>
 8003a6e:	0002      	movs	r2, r0
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	18d2      	adds	r2, r2, r3
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	0010      	movs	r0, r2
 8003a80:	f7fc fb42 	bl	8000108 <__udivsi3>
 8003a84:	0003      	movs	r3, r0
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a8a:	e04b      	b.n	8003b24 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a8c:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <UART_SetConfig+0x64c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2210      	movs	r2, #16
 8003a92:	4013      	ands	r3, r2
 8003a94:	d00e      	beq.n	8003ab4 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	085b      	lsrs	r3, r3, #1
 8003a9c:	4a39      	ldr	r2, [pc, #228]	; (8003b84 <UART_SetConfig+0x660>)
 8003a9e:	189a      	adds	r2, r3, r2
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	0010      	movs	r0, r2
 8003aa8:	f7fc fb2e 	bl	8000108 <__udivsi3>
 8003aac:	0003      	movs	r3, r0
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003ab2:	e037      	b.n	8003b24 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	085b      	lsrs	r3, r3, #1
 8003aba:	4a33      	ldr	r2, [pc, #204]	; (8003b88 <UART_SetConfig+0x664>)
 8003abc:	189a      	adds	r2, r3, r2
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	0010      	movs	r0, r2
 8003ac6:	f7fc fb1f 	bl	8000108 <__udivsi3>
 8003aca:	0003      	movs	r3, r0
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ad0:	e028      	b.n	8003b24 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003ad2:	f7fe fd35 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 8003ad6:	0002      	movs	r2, r0
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	18d2      	adds	r2, r2, r3
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	0010      	movs	r0, r2
 8003ae8:	f7fc fb0e 	bl	8000108 <__udivsi3>
 8003aec:	0003      	movs	r3, r0
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003af2:	e017      	b.n	8003b24 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	2280      	movs	r2, #128	; 0x80
 8003afc:	0212      	lsls	r2, r2, #8
 8003afe:	189a      	adds	r2, r3, r2
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	0019      	movs	r1, r3
 8003b06:	0010      	movs	r0, r2
 8003b08:	f7fc fafe 	bl	8000108 <__udivsi3>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b12:	e007      	b.n	8003b24 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003b14:	2313      	movs	r3, #19
 8003b16:	2218      	movs	r2, #24
 8003b18:	4694      	mov	ip, r2
 8003b1a:	44bc      	add	ip, r7
 8003b1c:	4463      	add	r3, ip
 8003b1e:	2201      	movs	r2, #1
 8003b20:	701a      	strb	r2, [r3, #0]
        break;
 8003b22:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b26:	2b0f      	cmp	r3, #15
 8003b28:	d908      	bls.n	8003b3c <UART_SetConfig+0x618>
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	4a13      	ldr	r2, [pc, #76]	; (8003b7c <UART_SetConfig+0x658>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d804      	bhi.n	8003b3c <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	e006      	b.n	8003b4a <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8003b3c:	2313      	movs	r3, #19
 8003b3e:	2218      	movs	r2, #24
 8003b40:	4694      	mov	ip, r2
 8003b42:	44bc      	add	ip, r7
 8003b44:	4463      	add	r3, ip
 8003b46:	2201      	movs	r2, #1
 8003b48:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2200      	movs	r2, #0
 8003b54:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003b56:	2313      	movs	r3, #19
 8003b58:	2218      	movs	r2, #24
 8003b5a:	4694      	mov	ip, r2
 8003b5c:	44bc      	add	ip, r7
 8003b5e:	4463      	add	r3, ip
 8003b60:	781b      	ldrb	r3, [r3, #0]
}
 8003b62:	0018      	movs	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b00e      	add	sp, #56	; 0x38
 8003b68:	bdb0      	pop	{r4, r5, r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	08005c04 	.word	0x08005c04
 8003b70:	40021000 	.word	0x40021000
 8003b74:	007a1200 	.word	0x007a1200
 8003b78:	01e84800 	.word	0x01e84800
 8003b7c:	0000ffff 	.word	0x0000ffff
 8003b80:	08005c28 	.word	0x08005c28
 8003b84:	003d0900 	.word	0x003d0900
 8003b88:	00f42400 	.word	0x00f42400

08003b8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	2201      	movs	r2, #1
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d00b      	beq.n	8003bb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4a4a      	ldr	r2, [pc, #296]	; (8003cd0 <UART_AdvFeatureConfig+0x144>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	0019      	movs	r1, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	2202      	movs	r2, #2
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d00b      	beq.n	8003bd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4a43      	ldr	r2, [pc, #268]	; (8003cd4 <UART_AdvFeatureConfig+0x148>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	0019      	movs	r1, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	2204      	movs	r2, #4
 8003bde:	4013      	ands	r3, r2
 8003be0:	d00b      	beq.n	8003bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	4a3b      	ldr	r2, [pc, #236]	; (8003cd8 <UART_AdvFeatureConfig+0x14c>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	0019      	movs	r1, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	2208      	movs	r2, #8
 8003c00:	4013      	ands	r3, r2
 8003c02:	d00b      	beq.n	8003c1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4a34      	ldr	r2, [pc, #208]	; (8003cdc <UART_AdvFeatureConfig+0x150>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	0019      	movs	r1, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	2210      	movs	r2, #16
 8003c22:	4013      	ands	r3, r2
 8003c24:	d00b      	beq.n	8003c3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4a2c      	ldr	r2, [pc, #176]	; (8003ce0 <UART_AdvFeatureConfig+0x154>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	0019      	movs	r1, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	2220      	movs	r2, #32
 8003c44:	4013      	ands	r3, r2
 8003c46:	d00b      	beq.n	8003c60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	4a25      	ldr	r2, [pc, #148]	; (8003ce4 <UART_AdvFeatureConfig+0x158>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	0019      	movs	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	2240      	movs	r2, #64	; 0x40
 8003c66:	4013      	ands	r3, r2
 8003c68:	d01d      	beq.n	8003ca6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4a1d      	ldr	r2, [pc, #116]	; (8003ce8 <UART_AdvFeatureConfig+0x15c>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	0019      	movs	r1, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	035b      	lsls	r3, r3, #13
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d10b      	bne.n	8003ca6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	4a15      	ldr	r2, [pc, #84]	; (8003cec <UART_AdvFeatureConfig+0x160>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	0019      	movs	r1, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	2280      	movs	r2, #128	; 0x80
 8003cac:	4013      	ands	r3, r2
 8003cae:	d00b      	beq.n	8003cc8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <UART_AdvFeatureConfig+0x164>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	0019      	movs	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	605a      	str	r2, [r3, #4]
  }
}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b002      	add	sp, #8
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	fffdffff 	.word	0xfffdffff
 8003cd4:	fffeffff 	.word	0xfffeffff
 8003cd8:	fffbffff 	.word	0xfffbffff
 8003cdc:	ffff7fff 	.word	0xffff7fff
 8003ce0:	ffffefff 	.word	0xffffefff
 8003ce4:	ffffdfff 	.word	0xffffdfff
 8003ce8:	ffefffff 	.word	0xffefffff
 8003cec:	ff9fffff 	.word	0xff9fffff
 8003cf0:	fff7ffff 	.word	0xfff7ffff

08003cf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003d02:	f7fd fc7d 	bl	8001600 <HAL_GetTick>
 8003d06:	0003      	movs	r3, r0
 8003d08:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2208      	movs	r2, #8
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d10d      	bne.n	8003d34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	0399      	lsls	r1, r3, #14
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	4b16      	ldr	r3, [pc, #88]	; (8003d7c <UART_CheckIdleState+0x88>)
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	0013      	movs	r3, r2
 8003d26:	2200      	movs	r2, #0
 8003d28:	f000 f82a 	bl	8003d80 <UART_WaitOnFlagUntilTimeout>
 8003d2c:	1e03      	subs	r3, r0, #0
 8003d2e:	d001      	beq.n	8003d34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e01f      	b.n	8003d74 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2204      	movs	r2, #4
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d10d      	bne.n	8003d5e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	03d9      	lsls	r1, r3, #15
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <UART_CheckIdleState+0x88>)
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	0013      	movs	r3, r2
 8003d50:	2200      	movs	r2, #0
 8003d52:	f000 f815 	bl	8003d80 <UART_WaitOnFlagUntilTimeout>
 8003d56:	1e03      	subs	r3, r0, #0
 8003d58:	d001      	beq.n	8003d5e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e00a      	b.n	8003d74 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2270      	movs	r2, #112	; 0x70
 8003d6e:	2100      	movs	r1, #0
 8003d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b004      	add	sp, #16
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	01ffffff 	.word	0x01ffffff

08003d80 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	1dfb      	adds	r3, r7, #7
 8003d8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d90:	e029      	b.n	8003de6 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	3301      	adds	r3, #1
 8003d96:	d026      	beq.n	8003de6 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d98:	f7fd fc32 	bl	8001600 <HAL_GetTick>
 8003d9c:	0002      	movs	r2, r0
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d302      	bcc.n	8003dae <UART_WaitOnFlagUntilTimeout+0x2e>
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d11b      	bne.n	8003de6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4915      	ldr	r1, [pc, #84]	; (8003e10 <UART_WaitOnFlagUntilTimeout+0x90>)
 8003dba:	400a      	ands	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2101      	movs	r1, #1
 8003dca:	438a      	bics	r2, r1
 8003dcc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2270      	movs	r2, #112	; 0x70
 8003dde:	2100      	movs	r1, #0
 8003de0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e00f      	b.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	4013      	ands	r3, r2
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	425a      	negs	r2, r3
 8003df6:	4153      	adcs	r3, r2
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	1dfb      	adds	r3, r7, #7
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d0c6      	beq.n	8003d92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b004      	add	sp, #16
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	fffffe5f 	.word	0xfffffe5f

08003e14 <arm_pid_f32>:
   * @return out processed output sample.
   */
  static __INLINE float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6839      	ldr	r1, [r7, #0]
 8003e24:	1c18      	adds	r0, r3, #0
 8003e26:	f7fc feb1 	bl	8000b8c <__aeabi_fmul>
 8003e2a:	1c03      	adds	r3, r0, #0
 8003e2c:	1c1c      	adds	r4, r3, #0
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	1c19      	adds	r1, r3, #0
 8003e38:	1c10      	adds	r0, r2, #0
 8003e3a:	f7fc fea7 	bl	8000b8c <__aeabi_fmul>
 8003e3e:	1c03      	adds	r3, r0, #0
    out = (S->A0 * in) +
 8003e40:	1c19      	adds	r1, r3, #0
 8003e42:	1c20      	adds	r0, r4, #0
 8003e44:	f7fc fbf6 	bl	8000634 <__aeabi_fadd>
 8003e48:	1c03      	adds	r3, r0, #0
 8003e4a:	1c1c      	adds	r4, r3, #0
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	1c19      	adds	r1, r3, #0
 8003e56:	1c10      	adds	r0, r2, #0
 8003e58:	f7fc fe98 	bl	8000b8c <__aeabi_fmul>
 8003e5c:	1c03      	adds	r3, r0, #0
 8003e5e:	1c19      	adds	r1, r3, #0
 8003e60:	1c20      	adds	r0, r4, #0
 8003e62:	f7fc fbe7 	bl	8000634 <__aeabi_fadd>
 8003e66:	1c03      	adds	r3, r0, #0
 8003e68:	1c1a      	adds	r2, r3, #0
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
    out = (S->A0 * in) +
 8003e6e:	1c19      	adds	r1, r3, #0
 8003e70:	1c10      	adds	r0, r2, #0
 8003e72:	f7fc fbdf 	bl	8000634 <__aeabi_fadd>
 8003e76:	1c03      	adds	r3, r0, #0
 8003e78:	60fb      	str	r3, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8003e8e:	68fb      	ldr	r3, [r7, #12]

  }
 8003e90:	1c18      	adds	r0, r3, #0
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b005      	add	sp, #20
 8003e96:	bd90      	pop	{r4, r7, pc}

08003e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e9c:	f7fd fb5a 	bl	8001554 <HAL_Init>

  /* USER CODE BEGIN Init */
  R_PID.Kp = 500;
 8003ea0:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <main+0xb0>)
 8003ea2:	4a2a      	ldr	r2, [pc, #168]	; (8003f4c <main+0xb4>)
 8003ea4:	619a      	str	r2, [r3, #24]
  R_PID.Kd = 0;
 8003ea6:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <main+0xb0>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	621a      	str	r2, [r3, #32]
  R_PID.Ki = 0;
 8003eac:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <main+0xb0>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	61da      	str	r2, [r3, #28]
  arm_pid_init_f32(&R_PID, 1);
 8003eb2:	4b25      	ldr	r3, [pc, #148]	; (8003f48 <main+0xb0>)
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f000 fe3b 	bl	8004b32 <arm_pid_init_f32>
  L_PID.Kp = 500;
 8003ebc:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <main+0xb8>)
 8003ebe:	4a23      	ldr	r2, [pc, #140]	; (8003f4c <main+0xb4>)
 8003ec0:	619a      	str	r2, [r3, #24]
  L_PID.Kd = 0;
 8003ec2:	4b23      	ldr	r3, [pc, #140]	; (8003f50 <main+0xb8>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	621a      	str	r2, [r3, #32]
  L_PID.Ki = 0;
 8003ec8:	4b21      	ldr	r3, [pc, #132]	; (8003f50 <main+0xb8>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	61da      	str	r2, [r3, #28]
  arm_pid_init_f32(&L_PID, 1);
 8003ece:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <main+0xb8>)
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f000 fe2d 	bl	8004b32 <arm_pid_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ed8:	f000 f848 	bl	8003f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003edc:	f000 f9c8 	bl	8004270 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003ee0:	f000 f996 	bl	8004210 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8003ee4:	f000 f8ae 	bl	8004044 <MX_TIM3_Init>
  MX_TIM21_Init();
 8003ee8:	f000 f934 	bl	8004154 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  r_enc_setpoint = -800;
 8003eec:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <main+0xbc>)
 8003eee:	4a1a      	ldr	r2, [pc, #104]	; (8003f58 <main+0xc0>)
 8003ef0:	601a      	str	r2, [r3, #0]
//  r_dir = 1;
  l_enc_setpoint = 800;
 8003ef2:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <main+0xc4>)
 8003ef4:	22c8      	movs	r2, #200	; 0xc8
 8003ef6:	0092      	lsls	r2, r2, #2
 8003ef8:	601a      	str	r2, [r3, #0]
//  l_dir = 1;
  printf("Hello...\r\n");
 8003efa:	4b19      	ldr	r3, [pc, #100]	; (8003f60 <main+0xc8>)
 8003efc:	0018      	movs	r0, r3
 8003efe:	f001 f92d 	bl	800515c <puts>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003f02:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <main+0xcc>)
 8003f04:	2100      	movs	r1, #0
 8003f06:	0018      	movs	r0, r3
 8003f08:	f7fe fdf2 	bl	8002af0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003f0c:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <main+0xcc>)
 8003f0e:	2104      	movs	r1, #4
 8003f10:	0018      	movs	r0, r3
 8003f12:	f7fe fded 	bl	8002af0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003f16:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <main+0xcc>)
 8003f18:	2108      	movs	r1, #8
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7fe fde8 	bl	8002af0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003f20:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <main+0xcc>)
 8003f22:	210c      	movs	r1, #12
 8003f24:	0018      	movs	r0, r3
 8003f26:	f7fe fde3 	bl	8002af0 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start_IT(&htim21, TIM_CHANNEL_1);
 8003f2a:	4b0f      	ldr	r3, [pc, #60]	; (8003f68 <main+0xd0>)
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f7fe fd60 	bl	80029f4 <HAL_TIM_OC_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim21, TIM_CHANNEL_1, 0);
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <main+0xd0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	635a      	str	r2, [r3, #52]	; 0x34
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Right_Motor_Controller();
 8003f3c:	f000 fae6 	bl	800450c <Right_Motor_Controller>
	Left_Motor_Controller();
 8003f40:	f000 fb2e 	bl	80045a0 <Left_Motor_Controller>
	Right_Motor_Controller();
 8003f44:	e7fa      	b.n	8003f3c <main+0xa4>
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	20000110 	.word	0x20000110
 8003f4c:	43fa0000 	.word	0x43fa0000
 8003f50:	200000ac 	.word	0x200000ac
 8003f54:	2000008c 	.word	0x2000008c
 8003f58:	fffffce0 	.word	0xfffffce0
 8003f5c:	20000094 	.word	0x20000094
 8003f60:	08005b1c 	.word	0x08005b1c
 8003f64:	200000d4 	.word	0x200000d4
 8003f68:	200001b8 	.word	0x200001b8

08003f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b09f      	sub	sp, #124	; 0x7c
 8003f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f72:	2440      	movs	r4, #64	; 0x40
 8003f74:	193b      	adds	r3, r7, r4
 8003f76:	0018      	movs	r0, r3
 8003f78:	2338      	movs	r3, #56	; 0x38
 8003f7a:	001a      	movs	r2, r3
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	f000 ffc3 	bl	8004f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f82:	232c      	movs	r3, #44	; 0x2c
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	0018      	movs	r0, r3
 8003f88:	2314      	movs	r3, #20
 8003f8a:	001a      	movs	r2, r3
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	f000 ffbb 	bl	8004f08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f92:	1d3b      	adds	r3, r7, #4
 8003f94:	0018      	movs	r0, r3
 8003f96:	2328      	movs	r3, #40	; 0x28
 8003f98:	001a      	movs	r2, r3
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	f000 ffb4 	bl	8004f08 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fa0:	4b26      	ldr	r3, [pc, #152]	; (800403c <SystemClock_Config+0xd0>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a26      	ldr	r2, [pc, #152]	; (8004040 <SystemClock_Config+0xd4>)
 8003fa6:	401a      	ands	r2, r3
 8003fa8:	4b24      	ldr	r3, [pc, #144]	; (800403c <SystemClock_Config+0xd0>)
 8003faa:	2180      	movs	r1, #128	; 0x80
 8003fac:	0109      	lsls	r1, r1, #4
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003fb2:	0021      	movs	r1, r4
 8003fb4:	187b      	adds	r3, r7, r1
 8003fb6:	2210      	movs	r2, #16
 8003fb8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003fc6:	187b      	adds	r3, r7, r1
 8003fc8:	22a0      	movs	r2, #160	; 0xa0
 8003fca:	0212      	lsls	r2, r2, #8
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003fce:	187b      	adds	r3, r7, r1
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f7fd fdb8 	bl	8001b4c <HAL_RCC_OscConfig>
 8003fdc:	1e03      	subs	r3, r0, #0
 8003fde:	d001      	beq.n	8003fe4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003fe0:	f000 fb60 	bl	80046a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fe4:	212c      	movs	r1, #44	; 0x2c
 8003fe6:	187b      	adds	r3, r7, r1
 8003fe8:	220f      	movs	r2, #15
 8003fea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	2200      	movs	r2, #0
 8003ff0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ff2:	187b      	adds	r3, r7, r1
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ff8:	187b      	adds	r3, r7, r1
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ffe:	187b      	adds	r3, r7, r1
 8004000:	2200      	movs	r2, #0
 8004002:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004004:	187b      	adds	r3, r7, r1
 8004006:	2100      	movs	r1, #0
 8004008:	0018      	movs	r0, r3
 800400a:	f7fe f96f 	bl	80022ec <HAL_RCC_ClockConfig>
 800400e:	1e03      	subs	r3, r0, #0
 8004010:	d001      	beq.n	8004016 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004012:	f000 fb47 	bl	80046a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004016:	1d3b      	adds	r3, r7, #4
 8004018:	2202      	movs	r2, #2
 800401a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800401c:	1d3b      	adds	r3, r7, #4
 800401e:	2200      	movs	r2, #0
 8004020:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004022:	1d3b      	adds	r3, r7, #4
 8004024:	0018      	movs	r0, r3
 8004026:	f7fe fb45 	bl	80026b4 <HAL_RCCEx_PeriphCLKConfig>
 800402a:	1e03      	subs	r3, r0, #0
 800402c:	d001      	beq.n	8004032 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800402e:	f000 fb39 	bl	80046a4 <Error_Handler>
  }
}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	46bd      	mov	sp, r7
 8004036:	b01f      	add	sp, #124	; 0x7c
 8004038:	bd90      	pop	{r4, r7, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	40007000 	.word	0x40007000
 8004040:	ffffe7ff 	.word	0xffffe7ff

08004044 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800404a:	2310      	movs	r3, #16
 800404c:	18fb      	adds	r3, r7, r3
 800404e:	0018      	movs	r0, r3
 8004050:	2308      	movs	r3, #8
 8004052:	001a      	movs	r2, r3
 8004054:	2100      	movs	r1, #0
 8004056:	f000 ff57 	bl	8004f08 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800405a:	003b      	movs	r3, r7
 800405c:	0018      	movs	r0, r3
 800405e:	2310      	movs	r3, #16
 8004060:	001a      	movs	r2, r3
 8004062:	2100      	movs	r1, #0
 8004064:	f000 ff50 	bl	8004f08 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004068:	4b37      	ldr	r3, [pc, #220]	; (8004148 <MX_TIM3_Init+0x104>)
 800406a:	4a38      	ldr	r2, [pc, #224]	; (800414c <MX_TIM3_Init+0x108>)
 800406c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800406e:	4b36      	ldr	r3, [pc, #216]	; (8004148 <MX_TIM3_Init+0x104>)
 8004070:	2200      	movs	r2, #0
 8004072:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004074:	4b34      	ldr	r3, [pc, #208]	; (8004148 <MX_TIM3_Init+0x104>)
 8004076:	2200      	movs	r2, #0
 8004078:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800407a:	4b33      	ldr	r3, [pc, #204]	; (8004148 <MX_TIM3_Init+0x104>)
 800407c:	4a34      	ldr	r2, [pc, #208]	; (8004150 <MX_TIM3_Init+0x10c>)
 800407e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004080:	4b31      	ldr	r3, [pc, #196]	; (8004148 <MX_TIM3_Init+0x104>)
 8004082:	2200      	movs	r2, #0
 8004084:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004086:	4b30      	ldr	r3, [pc, #192]	; (8004148 <MX_TIM3_Init+0x104>)
 8004088:	2200      	movs	r2, #0
 800408a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800408c:	4b2e      	ldr	r3, [pc, #184]	; (8004148 <MX_TIM3_Init+0x104>)
 800408e:	0018      	movs	r0, r3
 8004090:	f7fe fd02 	bl	8002a98 <HAL_TIM_PWM_Init>
 8004094:	1e03      	subs	r3, r0, #0
 8004096:	d001      	beq.n	800409c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004098:	f000 fb04 	bl	80046a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800409c:	2110      	movs	r1, #16
 800409e:	187b      	adds	r3, r7, r1
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040a4:	187b      	adds	r3, r7, r1
 80040a6:	2200      	movs	r2, #0
 80040a8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040aa:	187a      	adds	r2, r7, r1
 80040ac:	4b26      	ldr	r3, [pc, #152]	; (8004148 <MX_TIM3_Init+0x104>)
 80040ae:	0011      	movs	r1, r2
 80040b0:	0018      	movs	r0, r3
 80040b2:	f7ff f8da 	bl	800326a <HAL_TIMEx_MasterConfigSynchronization>
 80040b6:	1e03      	subs	r3, r0, #0
 80040b8:	d001      	beq.n	80040be <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80040ba:	f000 faf3 	bl	80046a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040be:	003b      	movs	r3, r7
 80040c0:	2260      	movs	r2, #96	; 0x60
 80040c2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80040c4:	003b      	movs	r3, r7
 80040c6:	2200      	movs	r2, #0
 80040c8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040ca:	003b      	movs	r3, r7
 80040cc:	2200      	movs	r2, #0
 80040ce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040d0:	003b      	movs	r3, r7
 80040d2:	2200      	movs	r2, #0
 80040d4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040d6:	0039      	movs	r1, r7
 80040d8:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <MX_TIM3_Init+0x104>)
 80040da:	2200      	movs	r2, #0
 80040dc:	0018      	movs	r0, r3
 80040de:	f7fe fe5f 	bl	8002da0 <HAL_TIM_PWM_ConfigChannel>
 80040e2:	1e03      	subs	r3, r0, #0
 80040e4:	d001      	beq.n	80040ea <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80040e6:	f000 fadd 	bl	80046a4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO|TIM3_TI4_GPIOC9_AF2) != HAL_OK)
 80040ea:	4b17      	ldr	r3, [pc, #92]	; (8004148 <MX_TIM3_Init+0x104>)
 80040ec:	2114      	movs	r1, #20
 80040ee:	0018      	movs	r0, r3
 80040f0:	f7ff f8fe 	bl	80032f0 <HAL_TIMEx_RemapConfig>
 80040f4:	1e03      	subs	r3, r0, #0
 80040f6:	d001      	beq.n	80040fc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80040f8:	f000 fad4 	bl	80046a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80040fc:	0039      	movs	r1, r7
 80040fe:	4b12      	ldr	r3, [pc, #72]	; (8004148 <MX_TIM3_Init+0x104>)
 8004100:	2204      	movs	r2, #4
 8004102:	0018      	movs	r0, r3
 8004104:	f7fe fe4c 	bl	8002da0 <HAL_TIM_PWM_ConfigChannel>
 8004108:	1e03      	subs	r3, r0, #0
 800410a:	d001      	beq.n	8004110 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800410c:	f000 faca 	bl	80046a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004110:	0039      	movs	r1, r7
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <MX_TIM3_Init+0x104>)
 8004114:	2208      	movs	r2, #8
 8004116:	0018      	movs	r0, r3
 8004118:	f7fe fe42 	bl	8002da0 <HAL_TIM_PWM_ConfigChannel>
 800411c:	1e03      	subs	r3, r0, #0
 800411e:	d001      	beq.n	8004124 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8004120:	f000 fac0 	bl	80046a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004124:	0039      	movs	r1, r7
 8004126:	4b08      	ldr	r3, [pc, #32]	; (8004148 <MX_TIM3_Init+0x104>)
 8004128:	220c      	movs	r2, #12
 800412a:	0018      	movs	r0, r3
 800412c:	f7fe fe38 	bl	8002da0 <HAL_TIM_PWM_ConfigChannel>
 8004130:	1e03      	subs	r3, r0, #0
 8004132:	d001      	beq.n	8004138 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8004134:	f000 fab6 	bl	80046a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <MX_TIM3_Init+0x104>)
 800413a:	0018      	movs	r0, r3
 800413c:	f000 fb04 	bl	8004748 <HAL_TIM_MspPostInit>

}
 8004140:	46c0      	nop			; (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	b006      	add	sp, #24
 8004146:	bd80      	pop	{r7, pc}
 8004148:	200000d4 	.word	0x200000d4
 800414c:	40000400 	.word	0x40000400
 8004150:	0000ffff 	.word	0x0000ffff

08004154 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800415a:	2310      	movs	r3, #16
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	0018      	movs	r0, r3
 8004160:	2308      	movs	r3, #8
 8004162:	001a      	movs	r2, r3
 8004164:	2100      	movs	r1, #0
 8004166:	f000 fecf 	bl	8004f08 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800416a:	003b      	movs	r3, r7
 800416c:	0018      	movs	r0, r3
 800416e:	2310      	movs	r3, #16
 8004170:	001a      	movs	r2, r3
 8004172:	2100      	movs	r1, #0
 8004174:	f000 fec8 	bl	8004f08 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8004178:	4b22      	ldr	r3, [pc, #136]	; (8004204 <MX_TIM21_Init+0xb0>)
 800417a:	4a23      	ldr	r2, [pc, #140]	; (8004208 <MX_TIM21_Init+0xb4>)
 800417c:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 2099;
 800417e:	4b21      	ldr	r3, [pc, #132]	; (8004204 <MX_TIM21_Init+0xb0>)
 8004180:	4a22      	ldr	r2, [pc, #136]	; (800420c <MX_TIM21_Init+0xb8>)
 8004182:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004184:	4b1f      	ldr	r3, [pc, #124]	; (8004204 <MX_TIM21_Init+0xb0>)
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 99;
 800418a:	4b1e      	ldr	r3, [pc, #120]	; (8004204 <MX_TIM21_Init+0xb0>)
 800418c:	2263      	movs	r2, #99	; 0x63
 800418e:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004190:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <MX_TIM21_Init+0xb0>)
 8004192:	2200      	movs	r2, #0
 8004194:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004196:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <MX_TIM21_Init+0xb0>)
 8004198:	2200      	movs	r2, #0
 800419a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 800419c:	4b19      	ldr	r3, [pc, #100]	; (8004204 <MX_TIM21_Init+0xb0>)
 800419e:	0018      	movs	r0, r3
 80041a0:	f7fe fbfc 	bl	800299c <HAL_TIM_OC_Init>
 80041a4:	1e03      	subs	r3, r0, #0
 80041a6:	d001      	beq.n	80041ac <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 80041a8:	f000 fa7c 	bl	80046a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ac:	2110      	movs	r1, #16
 80041ae:	187b      	adds	r3, r7, r1
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041b4:	187b      	adds	r3, r7, r1
 80041b6:	2200      	movs	r2, #0
 80041b8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80041ba:	187a      	adds	r2, r7, r1
 80041bc:	4b11      	ldr	r3, [pc, #68]	; (8004204 <MX_TIM21_Init+0xb0>)
 80041be:	0011      	movs	r1, r2
 80041c0:	0018      	movs	r0, r3
 80041c2:	f7ff f852 	bl	800326a <HAL_TIMEx_MasterConfigSynchronization>
 80041c6:	1e03      	subs	r3, r0, #0
 80041c8:	d001      	beq.n	80041ce <MX_TIM21_Init+0x7a>
  {
    Error_Handler();
 80041ca:	f000 fa6b 	bl	80046a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80041ce:	003b      	movs	r3, r7
 80041d0:	2230      	movs	r2, #48	; 0x30
 80041d2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80041d4:	003b      	movs	r3, r7
 80041d6:	2200      	movs	r2, #0
 80041d8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041da:	003b      	movs	r3, r7
 80041dc:	2200      	movs	r2, #0
 80041de:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041e0:	003b      	movs	r3, r7
 80041e2:	2200      	movs	r2, #0
 80041e4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041e6:	0039      	movs	r1, r7
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <MX_TIM21_Init+0xb0>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	0018      	movs	r0, r3
 80041ee:	f7fe fd89 	bl	8002d04 <HAL_TIM_OC_ConfigChannel>
 80041f2:	1e03      	subs	r3, r0, #0
 80041f4:	d001      	beq.n	80041fa <MX_TIM21_Init+0xa6>
  {
    Error_Handler();
 80041f6:	f000 fa55 	bl	80046a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b006      	add	sp, #24
 8004200:	bd80      	pop	{r7, pc}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	200001b8 	.word	0x200001b8
 8004208:	40010800 	.word	0x40010800
 800420c:	00000833 	.word	0x00000833

08004210 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004214:	4b14      	ldr	r3, [pc, #80]	; (8004268 <MX_USART2_UART_Init+0x58>)
 8004216:	4a15      	ldr	r2, [pc, #84]	; (800426c <MX_USART2_UART_Init+0x5c>)
 8004218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800421a:	4b13      	ldr	r3, [pc, #76]	; (8004268 <MX_USART2_UART_Init+0x58>)
 800421c:	22e1      	movs	r2, #225	; 0xe1
 800421e:	0252      	lsls	r2, r2, #9
 8004220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004222:	4b11      	ldr	r3, [pc, #68]	; (8004268 <MX_USART2_UART_Init+0x58>)
 8004224:	2200      	movs	r2, #0
 8004226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004228:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <MX_USART2_UART_Init+0x58>)
 800422a:	2200      	movs	r2, #0
 800422c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800422e:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <MX_USART2_UART_Init+0x58>)
 8004230:	2200      	movs	r2, #0
 8004232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <MX_USART2_UART_Init+0x58>)
 8004236:	220c      	movs	r2, #12
 8004238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800423a:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <MX_USART2_UART_Init+0x58>)
 800423c:	2200      	movs	r2, #0
 800423e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <MX_USART2_UART_Init+0x58>)
 8004242:	2200      	movs	r2, #0
 8004244:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004246:	4b08      	ldr	r3, [pc, #32]	; (8004268 <MX_USART2_UART_Init+0x58>)
 8004248:	2200      	movs	r2, #0
 800424a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <MX_USART2_UART_Init+0x58>)
 800424e:	2200      	movs	r2, #0
 8004250:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004252:	4b05      	ldr	r3, [pc, #20]	; (8004268 <MX_USART2_UART_Init+0x58>)
 8004254:	0018      	movs	r0, r3
 8004256:	f7ff f869 	bl	800332c <HAL_UART_Init>
 800425a:	1e03      	subs	r3, r0, #0
 800425c:	d001      	beq.n	8004262 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800425e:	f000 fa21 	bl	80046a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20000134 	.word	0x20000134
 800426c:	40004400 	.word	0x40004400

08004270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004270:	b590      	push	{r4, r7, lr}
 8004272:	b089      	sub	sp, #36	; 0x24
 8004274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004276:	240c      	movs	r4, #12
 8004278:	193b      	adds	r3, r7, r4
 800427a:	0018      	movs	r0, r3
 800427c:	2314      	movs	r3, #20
 800427e:	001a      	movs	r2, r3
 8004280:	2100      	movs	r1, #0
 8004282:	f000 fe41 	bl	8004f08 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004286:	4b37      	ldr	r3, [pc, #220]	; (8004364 <MX_GPIO_Init+0xf4>)
 8004288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428a:	4b36      	ldr	r3, [pc, #216]	; (8004364 <MX_GPIO_Init+0xf4>)
 800428c:	2104      	movs	r1, #4
 800428e:	430a      	orrs	r2, r1
 8004290:	62da      	str	r2, [r3, #44]	; 0x2c
 8004292:	4b34      	ldr	r3, [pc, #208]	; (8004364 <MX_GPIO_Init+0xf4>)
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	2204      	movs	r2, #4
 8004298:	4013      	ands	r3, r2
 800429a:	60bb      	str	r3, [r7, #8]
 800429c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800429e:	4b31      	ldr	r3, [pc, #196]	; (8004364 <MX_GPIO_Init+0xf4>)
 80042a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a2:	4b30      	ldr	r3, [pc, #192]	; (8004364 <MX_GPIO_Init+0xf4>)
 80042a4:	2180      	movs	r1, #128	; 0x80
 80042a6:	430a      	orrs	r2, r1
 80042a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80042aa:	4b2e      	ldr	r3, [pc, #184]	; (8004364 <MX_GPIO_Init+0xf4>)
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	2280      	movs	r2, #128	; 0x80
 80042b0:	4013      	ands	r3, r2
 80042b2:	607b      	str	r3, [r7, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b6:	4b2b      	ldr	r3, [pc, #172]	; (8004364 <MX_GPIO_Init+0xf4>)
 80042b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ba:	4b2a      	ldr	r3, [pc, #168]	; (8004364 <MX_GPIO_Init+0xf4>)
 80042bc:	2101      	movs	r1, #1
 80042be:	430a      	orrs	r2, r1
 80042c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80042c2:	4b28      	ldr	r3, [pc, #160]	; (8004364 <MX_GPIO_Init+0xf4>)
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	2201      	movs	r2, #1
 80042c8:	4013      	ands	r3, r2
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80042ce:	23a0      	movs	r3, #160	; 0xa0
 80042d0:	05db      	lsls	r3, r3, #23
 80042d2:	2200      	movs	r2, #0
 80042d4:	2120      	movs	r1, #32
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7fd fbf4 	bl	8001ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80042dc:	193b      	adds	r3, r7, r4
 80042de:	2280      	movs	r2, #128	; 0x80
 80042e0:	0192      	lsls	r2, r2, #6
 80042e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80042e4:	193b      	adds	r3, r7, r4
 80042e6:	4a20      	ldr	r2, [pc, #128]	; (8004368 <MX_GPIO_Init+0xf8>)
 80042e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ea:	193b      	adds	r3, r7, r4
 80042ec:	2200      	movs	r2, #0
 80042ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80042f0:	193b      	adds	r3, r7, r4
 80042f2:	4a1e      	ldr	r2, [pc, #120]	; (800436c <MX_GPIO_Init+0xfc>)
 80042f4:	0019      	movs	r1, r3
 80042f6:	0010      	movs	r0, r2
 80042f8:	f7fd fa66 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80042fc:	0021      	movs	r1, r4
 80042fe:	187b      	adds	r3, r7, r1
 8004300:	2220      	movs	r2, #32
 8004302:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004304:	187b      	adds	r3, r7, r1
 8004306:	2201      	movs	r2, #1
 8004308:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430a:	187b      	adds	r3, r7, r1
 800430c:	2200      	movs	r2, #0
 800430e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004310:	187b      	adds	r3, r7, r1
 8004312:	2200      	movs	r2, #0
 8004314:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004316:	000c      	movs	r4, r1
 8004318:	187a      	adds	r2, r7, r1
 800431a:	23a0      	movs	r3, #160	; 0xa0
 800431c:	05db      	lsls	r3, r3, #23
 800431e:	0011      	movs	r1, r2
 8004320:	0018      	movs	r0, r3
 8004322:	f7fd fa51 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004326:	0021      	movs	r1, r4
 8004328:	187b      	adds	r3, r7, r1
 800432a:	22c0      	movs	r2, #192	; 0xc0
 800432c:	0152      	lsls	r2, r2, #5
 800432e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004330:	187b      	adds	r3, r7, r1
 8004332:	4a0f      	ldr	r2, [pc, #60]	; (8004370 <MX_GPIO_Init+0x100>)
 8004334:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004336:	187b      	adds	r3, r7, r1
 8004338:	2200      	movs	r2, #0
 800433a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800433c:	187a      	adds	r2, r7, r1
 800433e:	23a0      	movs	r3, #160	; 0xa0
 8004340:	05db      	lsls	r3, r3, #23
 8004342:	0011      	movs	r1, r2
 8004344:	0018      	movs	r0, r3
 8004346:	f7fd fa3f 	bl	80017c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800434a:	2200      	movs	r2, #0
 800434c:	2100      	movs	r1, #0
 800434e:	2007      	movs	r0, #7
 8004350:	f7fd fa08 	bl	8001764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004354:	2007      	movs	r0, #7
 8004356:	f7fd fa1a 	bl	800178e <HAL_NVIC_EnableIRQ>

}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	46bd      	mov	sp, r7
 800435e:	b009      	add	sp, #36	; 0x24
 8004360:	bd90      	pop	{r4, r7, pc}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	40021000 	.word	0x40021000
 8004368:	10210000 	.word	0x10210000
 800436c:	50000800 	.word	0x50000800
 8004370:	10110000 	.word	0x10110000

08004374 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <__io_putchar+0x20>)
 800437e:	1d39      	adds	r1, r7, #4
 8004380:	4805      	ldr	r0, [pc, #20]	; (8004398 <__io_putchar+0x24>)
 8004382:	2201      	movs	r2, #1
 8004384:	f7ff f826 	bl	80033d4 <HAL_UART_Transmit>

return ch;
 8004388:	687b      	ldr	r3, [r7, #4]
}
 800438a:	0018      	movs	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	b002      	add	sp, #8
 8004390:	bd80      	pop	{r7, pc}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	0000ffff 	.word	0x0000ffff
 8004398:	20000134 	.word	0x20000134

0800439c <Right_Encoder_Interrupt_Handler>:

void Right_Encoder_Interrupt_Handler(void){
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
//	r_enc_cnt++;
	if(r_dir==1)
 80043a0:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <Right_Encoder_Interrupt_Handler+0x28>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <Right_Encoder_Interrupt_Handler+0x18>
		r_enc_currentPos++;
 80043a8:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <Right_Encoder_Interrupt_Handler+0x2c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <Right_Encoder_Interrupt_Handler+0x2c>)
 80043b0:	601a      	str	r2, [r3, #0]
	else
		r_enc_currentPos--;
}
 80043b2:	e004      	b.n	80043be <Right_Encoder_Interrupt_Handler+0x22>
		r_enc_currentPos--;
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <Right_Encoder_Interrupt_Handler+0x2c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	1e5a      	subs	r2, r3, #1
 80043ba:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <Right_Encoder_Interrupt_Handler+0x2c>)
 80043bc:	601a      	str	r2, [r3, #0]
}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	200000d0 	.word	0x200000d0
 80043c8:	20000090 	.word	0x20000090

080043cc <Left_Encoder_Interrupt_Handler>:

void Left_Encoder_Interrupt_Handler(void){
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
	if(l_dir==1)
 80043d0:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <Left_Encoder_Interrupt_Handler+0x28>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d105      	bne.n	80043e4 <Left_Encoder_Interrupt_Handler+0x18>
		l_enc_currentPos++;
 80043d8:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <Left_Encoder_Interrupt_Handler+0x2c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <Left_Encoder_Interrupt_Handler+0x2c>)
 80043e0:	601a      	str	r2, [r3, #0]
	else
		l_enc_currentPos--;
}
 80043e2:	e004      	b.n	80043ee <Left_Encoder_Interrupt_Handler+0x22>
		l_enc_currentPos--;
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <Left_Encoder_Interrupt_Handler+0x2c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	1e5a      	subs	r2, r3, #1
 80043ea:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <Left_Encoder_Interrupt_Handler+0x2c>)
 80043ec:	601a      	str	r2, [r3, #0]
}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	200001b4 	.word	0x200001b4
 80043f8:	20000098 	.word	0x20000098

080043fc <Right_Motor_PWM_Gen>:

void Right_Motor_PWM_Gen(int speed, int brake){
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
	// if brake is true, brake and ignore speed setting
	if (brake){
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <Right_Motor_PWM_Gen+0x22>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, MOTOR_MAX_SPEED);
 800440c:	4b1a      	ldr	r3, [pc, #104]	; (8004478 <Right_Motor_PWM_Gen+0x7c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1a      	ldr	r2, [pc, #104]	; (800447c <Right_Motor_PWM_Gen+0x80>)
 8004412:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, MOTOR_MAX_SPEED);
 8004414:	4b18      	ldr	r3, [pc, #96]	; (8004478 <Right_Motor_PWM_Gen+0x7c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a18      	ldr	r2, [pc, #96]	; (800447c <Right_Motor_PWM_Gen+0x80>)
 800441a:	639a      	str	r2, [r3, #56]	; 0x38
		} else {
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
		}
	}
}
 800441c:	e027      	b.n	800446e <Right_Motor_PWM_Gen+0x72>
		if(speed < 0){
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	da06      	bge.n	8004432 <Right_Motor_PWM_Gen+0x36>
			r_dir = 0;
 8004424:	4b16      	ldr	r3, [pc, #88]	; (8004480 <Right_Motor_PWM_Gen+0x84>)
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
			speed = -speed;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	425b      	negs	r3, r3
 800442e:	607b      	str	r3, [r7, #4]
 8004430:	e002      	b.n	8004438 <Right_Motor_PWM_Gen+0x3c>
			r_dir = 1;
 8004432:	4b13      	ldr	r3, [pc, #76]	; (8004480 <Right_Motor_PWM_Gen+0x84>)
 8004434:	2201      	movs	r2, #1
 8004436:	601a      	str	r2, [r3, #0]
		if(speed > MOTOR_MAX_SPEED)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a10      	ldr	r2, [pc, #64]	; (800447c <Right_Motor_PWM_Gen+0x80>)
 800443c:	4293      	cmp	r3, r2
 800443e:	dd01      	ble.n	8004444 <Right_Motor_PWM_Gen+0x48>
			speed = MOTOR_MAX_SPEED;
 8004440:	4b0e      	ldr	r3, [pc, #56]	; (800447c <Right_Motor_PWM_Gen+0x80>)
 8004442:	607b      	str	r3, [r7, #4]
		if(r_dir==1){
 8004444:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <Right_Motor_PWM_Gen+0x84>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d108      	bne.n	800445e <Right_Motor_PWM_Gen+0x62>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <Right_Motor_PWM_Gen+0x7c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8004454:	4b08      	ldr	r3, [pc, #32]	; (8004478 <Right_Motor_PWM_Gen+0x7c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2200      	movs	r2, #0
 800445a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800445c:	e007      	b.n	800446e <Right_Motor_PWM_Gen+0x72>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800445e:	4b06      	ldr	r3, [pc, #24]	; (8004478 <Right_Motor_PWM_Gen+0x7c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8004466:	4b04      	ldr	r3, [pc, #16]	; (8004478 <Right_Motor_PWM_Gen+0x7c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	46bd      	mov	sp, r7
 8004472:	b002      	add	sp, #8
 8004474:	bd80      	pop	{r7, pc}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	200000d4 	.word	0x200000d4
 800447c:	0000ffff 	.word	0x0000ffff
 8004480:	200000d0 	.word	0x200000d0

08004484 <Left_Motor_PWM_Gen>:

void Left_Motor_PWM_Gen(int speed, int brake){
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
	// if brake is true, brake and ignore speed setting
	if (brake){
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <Left_Motor_PWM_Gen+0x22>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, MOTOR_MAX_SPEED);
 8004494:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <Left_Motor_PWM_Gen+0x7c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1a      	ldr	r2, [pc, #104]	; (8004504 <Left_Motor_PWM_Gen+0x80>)
 800449a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, MOTOR_MAX_SPEED);
 800449c:	4b18      	ldr	r3, [pc, #96]	; (8004500 <Left_Motor_PWM_Gen+0x7c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a18      	ldr	r2, [pc, #96]	; (8004504 <Left_Motor_PWM_Gen+0x80>)
 80044a2:	641a      	str	r2, [r3, #64]	; 0x40
		} else {
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, speed);
		}
	}
}
 80044a4:	e027      	b.n	80044f6 <Left_Motor_PWM_Gen+0x72>
		if(speed < 0){
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	da06      	bge.n	80044ba <Left_Motor_PWM_Gen+0x36>
			l_dir = 0;
 80044ac:	4b16      	ldr	r3, [pc, #88]	; (8004508 <Left_Motor_PWM_Gen+0x84>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
			speed = -speed;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	425b      	negs	r3, r3
 80044b6:	607b      	str	r3, [r7, #4]
 80044b8:	e002      	b.n	80044c0 <Left_Motor_PWM_Gen+0x3c>
			l_dir = 1;
 80044ba:	4b13      	ldr	r3, [pc, #76]	; (8004508 <Left_Motor_PWM_Gen+0x84>)
 80044bc:	2201      	movs	r2, #1
 80044be:	601a      	str	r2, [r3, #0]
		if(speed > MOTOR_MAX_SPEED)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a10      	ldr	r2, [pc, #64]	; (8004504 <Left_Motor_PWM_Gen+0x80>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	dd01      	ble.n	80044cc <Left_Motor_PWM_Gen+0x48>
			speed = MOTOR_MAX_SPEED;
 80044c8:	4b0e      	ldr	r3, [pc, #56]	; (8004504 <Left_Motor_PWM_Gen+0x80>)
 80044ca:	607b      	str	r3, [r7, #4]
		if(l_dir==1){
 80044cc:	4b0e      	ldr	r3, [pc, #56]	; (8004508 <Left_Motor_PWM_Gen+0x84>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d108      	bne.n	80044e6 <Left_Motor_PWM_Gen+0x62>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, speed);
 80044d4:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <Left_Motor_PWM_Gen+0x7c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80044dc:	4b08      	ldr	r3, [pc, #32]	; (8004500 <Left_Motor_PWM_Gen+0x7c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2200      	movs	r2, #0
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80044e4:	e007      	b.n	80044f6 <Left_Motor_PWM_Gen+0x72>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <Left_Motor_PWM_Gen+0x7c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2200      	movs	r2, #0
 80044ec:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, speed);
 80044ee:	4b04      	ldr	r3, [pc, #16]	; (8004500 <Left_Motor_PWM_Gen+0x7c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	46bd      	mov	sp, r7
 80044fa:	b002      	add	sp, #8
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	200000d4 	.word	0x200000d4
 8004504:	0000ffff 	.word	0x0000ffff
 8004508:	200001b4 	.word	0x200001b4

0800450c <Right_Motor_Controller>:

void Right_Motor_Controller(void){
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
//		r_enc_setpoint = -r_enc_setpoint;
//		r_dir = 0;
//	} else {
//		r_dir = 1;
//	}
  	int r_pid_error = r_enc_setpoint - r_enc_currentPos; // Compute error
 8004512:	4b1e      	ldr	r3, [pc, #120]	; (800458c <Right_Motor_Controller+0x80>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4b1e      	ldr	r3, [pc, #120]	; (8004590 <Right_Motor_Controller+0x84>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	607b      	str	r3, [r7, #4]
  	int duty = (int)arm_pid_f32(&R_PID, r_pid_error); // Compute PID controller output
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fc fe4a 	bl	80011b8 <__aeabi_i2f>
 8004524:	1c02      	adds	r2, r0, #0
 8004526:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <Right_Motor_Controller+0x88>)
 8004528:	1c11      	adds	r1, r2, #0
 800452a:	0018      	movs	r0, r3
 800452c:	f7ff fc72 	bl	8003e14 <arm_pid_f32>
 8004530:	1c03      	adds	r3, r0, #0
 8004532:	1c18      	adds	r0, r3, #0
 8004534:	f7fc fe20 	bl	8001178 <__aeabi_f2iz>
 8004538:	0003      	movs	r3, r0
 800453a:	603b      	str	r3, [r7, #0]
  	if(fabs((float)r_pid_error  / r_enc_setpoint) < 0.005)
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7fc fe3b 	bl	80011b8 <__aeabi_i2f>
 8004542:	1c04      	adds	r4, r0, #0
 8004544:	4b11      	ldr	r3, [pc, #68]	; (800458c <Right_Motor_Controller+0x80>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	0018      	movs	r0, r3
 800454a:	f7fc fe35 	bl	80011b8 <__aeabi_i2f>
 800454e:	1c03      	adds	r3, r0, #0
 8004550:	1c19      	adds	r1, r3, #0
 8004552:	1c20      	adds	r0, r4, #0
 8004554:	f7fc fa08 	bl	8000968 <__aeabi_fdiv>
 8004558:	1c03      	adds	r3, r0, #0
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	1c18      	adds	r0, r3, #0
 8004560:	f7fc ff7c 	bl	800145c <__aeabi_f2d>
 8004564:	4a0c      	ldr	r2, [pc, #48]	; (8004598 <Right_Motor_Controller+0x8c>)
 8004566:	4b0d      	ldr	r3, [pc, #52]	; (800459c <Right_Motor_Controller+0x90>)
 8004568:	f7fb ff5a 	bl	8000420 <__aeabi_dcmplt>
 800456c:	1e03      	subs	r3, r0, #0
 800456e:	d004      	beq.n	800457a <Right_Motor_Controller+0x6e>
  		Right_Motor_PWM_Gen(0, 1); // Switch to brake mode if within 0.5% off setpoint
 8004570:	2101      	movs	r1, #1
 8004572:	2000      	movs	r0, #0
 8004574:	f7ff ff42 	bl	80043fc <Right_Motor_PWM_Gen>
  	else
  		Right_Motor_PWM_Gen(duty, 0);
}
 8004578:	e004      	b.n	8004584 <Right_Motor_Controller+0x78>
  		Right_Motor_PWM_Gen(duty, 0);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2100      	movs	r1, #0
 800457e:	0018      	movs	r0, r3
 8004580:	f7ff ff3c 	bl	80043fc <Right_Motor_PWM_Gen>
}
 8004584:	46c0      	nop			; (mov r8, r8)
 8004586:	46bd      	mov	sp, r7
 8004588:	b003      	add	sp, #12
 800458a:	bd90      	pop	{r4, r7, pc}
 800458c:	2000008c 	.word	0x2000008c
 8004590:	20000090 	.word	0x20000090
 8004594:	20000110 	.word	0x20000110
 8004598:	47ae147b 	.word	0x47ae147b
 800459c:	3f747ae1 	.word	0x3f747ae1

080045a0 <Left_Motor_Controller>:

void Left_Motor_Controller(void){
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
//			l_enc_setpoint = -l_enc_setpoint;
//			l_dir = 0;
//	} else {
//			l_dir = 1;
//	}
  	int l_pid_error = l_enc_setpoint - l_enc_currentPos; // Compute error
 80045a6:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <Left_Motor_Controller+0x80>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <Left_Motor_Controller+0x84>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	607b      	str	r3, [r7, #4]
  	int duty = (int)arm_pid_f32(&L_PID, l_pid_error); // Compute PID controller output
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fc fe00 	bl	80011b8 <__aeabi_i2f>
 80045b8:	1c02      	adds	r2, r0, #0
 80045ba:	4b1b      	ldr	r3, [pc, #108]	; (8004628 <Left_Motor_Controller+0x88>)
 80045bc:	1c11      	adds	r1, r2, #0
 80045be:	0018      	movs	r0, r3
 80045c0:	f7ff fc28 	bl	8003e14 <arm_pid_f32>
 80045c4:	1c03      	adds	r3, r0, #0
 80045c6:	1c18      	adds	r0, r3, #0
 80045c8:	f7fc fdd6 	bl	8001178 <__aeabi_f2iz>
 80045cc:	0003      	movs	r3, r0
 80045ce:	603b      	str	r3, [r7, #0]
  	if(fabs((float)l_pid_error  / l_enc_setpoint) < 0.005)
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7fc fdf1 	bl	80011b8 <__aeabi_i2f>
 80045d6:	1c04      	adds	r4, r0, #0
 80045d8:	4b11      	ldr	r3, [pc, #68]	; (8004620 <Left_Motor_Controller+0x80>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	0018      	movs	r0, r3
 80045de:	f7fc fdeb 	bl	80011b8 <__aeabi_i2f>
 80045e2:	1c03      	adds	r3, r0, #0
 80045e4:	1c19      	adds	r1, r3, #0
 80045e6:	1c20      	adds	r0, r4, #0
 80045e8:	f7fc f9be 	bl	8000968 <__aeabi_fdiv>
 80045ec:	1c03      	adds	r3, r0, #0
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	1c18      	adds	r0, r3, #0
 80045f4:	f7fc ff32 	bl	800145c <__aeabi_f2d>
 80045f8:	4a0c      	ldr	r2, [pc, #48]	; (800462c <Left_Motor_Controller+0x8c>)
 80045fa:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <Left_Motor_Controller+0x90>)
 80045fc:	f7fb ff10 	bl	8000420 <__aeabi_dcmplt>
 8004600:	1e03      	subs	r3, r0, #0
 8004602:	d004      	beq.n	800460e <Left_Motor_Controller+0x6e>
  		Left_Motor_PWM_Gen(0, 1); // Switch to brake mode if within 0.5% off setpoint
 8004604:	2101      	movs	r1, #1
 8004606:	2000      	movs	r0, #0
 8004608:	f7ff ff3c 	bl	8004484 <Left_Motor_PWM_Gen>
  	else
  		Left_Motor_PWM_Gen(duty, 0);
}
 800460c:	e004      	b.n	8004618 <Left_Motor_Controller+0x78>
  		Left_Motor_PWM_Gen(duty, 0);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2100      	movs	r1, #0
 8004612:	0018      	movs	r0, r3
 8004614:	f7ff ff36 	bl	8004484 <Left_Motor_PWM_Gen>
}
 8004618:	46c0      	nop			; (mov r8, r8)
 800461a:	46bd      	mov	sp, r7
 800461c:	b003      	add	sp, #12
 800461e:	bd90      	pop	{r4, r7, pc}
 8004620:	20000094 	.word	0x20000094
 8004624:	20000098 	.word	0x20000098
 8004628:	200000ac 	.word	0x200000ac
 800462c:	47ae147b 	.word	0x47ae147b
 8004630:	3f747ae1 	.word	0x3f747ae1

08004634 <HUNDRED_MS_TIM_INT_HANDLER>:

// Timer that ticks every 100ms for general timing purposes
void HUNDRED_MS_TIM_INT_HANDLER(void){
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
	cms++;
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <HUNDRED_MS_TIM_INT_HANDLER+0x38>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HUNDRED_MS_TIM_INT_HANDLER+0x38>)
 8004640:	601a      	str	r2, [r3, #0]
	if(cms % 10 == 0){
 8004642:	4b0a      	ldr	r3, [pc, #40]	; (800466c <HUNDRED_MS_TIM_INT_HANDLER+0x38>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	210a      	movs	r1, #10
 8004648:	0018      	movs	r0, r3
 800464a:	f7fb fecd 	bl	80003e8 <__aeabi_idivmod>
 800464e:	1e0b      	subs	r3, r1, #0
 8004650:	d108      	bne.n	8004664 <HUNDRED_MS_TIM_INT_HANDLER+0x30>
		cms = 0;
 8004652:	4b06      	ldr	r3, [pc, #24]	; (800466c <HUNDRED_MS_TIM_INT_HANDLER+0x38>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
		seconds++;
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <HUNDRED_MS_TIM_INT_HANDLER+0x3c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	4b04      	ldr	r3, [pc, #16]	; (8004670 <HUNDRED_MS_TIM_INT_HANDLER+0x3c>)
 8004660:	601a      	str	r2, [r3, #0]
	}
	return;
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	46c0      	nop			; (mov r8, r8)
}
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	20000084 	.word	0x20000084
 8004670:	20000088 	.word	0x20000088

08004674 <Print_Encoder_Reading>:

// Debugging function - prints the right motor encoder reading when the blue button is pushed
void Print_Encoder_Reading(void){
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
	printf("Rotations: %d          \r", r_enc_currentPos);
 8004678:	4b07      	ldr	r3, [pc, #28]	; (8004698 <Print_Encoder_Reading+0x24>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4b07      	ldr	r3, [pc, #28]	; (800469c <Print_Encoder_Reading+0x28>)
 800467e:	0011      	movs	r1, r2
 8004680:	0018      	movs	r0, r3
 8004682:	f000 fcf1 	bl	8005068 <iprintf>
	fflush(stdout);
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <Print_Encoder_Reading+0x2c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	0018      	movs	r0, r3
 800468e:	f000 fb2d 	bl	8004cec <fflush>
//	r_enc_currentPos = 0;
}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	20000090 	.word	0x20000090
 800469c:	08005b28 	.word	0x08005b28
 80046a0:	20000004 	.word	0x20000004

080046a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b4:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <HAL_MspInit+0x24>)
 80046b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <HAL_MspInit+0x24>)
 80046ba:	2101      	movs	r1, #1
 80046bc:	430a      	orrs	r2, r1
 80046be:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80046c0:	4b04      	ldr	r3, [pc, #16]	; (80046d4 <HAL_MspInit+0x24>)
 80046c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046c4:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <HAL_MspInit+0x24>)
 80046c6:	2180      	movs	r1, #128	; 0x80
 80046c8:	0549      	lsls	r1, r1, #21
 80046ca:	430a      	orrs	r2, r1
 80046cc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40021000 	.word	0x40021000

080046d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a06      	ldr	r2, [pc, #24]	; (8004700 <HAL_TIM_PWM_MspInit+0x28>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d105      	bne.n	80046f6 <HAL_TIM_PWM_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <HAL_TIM_PWM_MspInit+0x2c>)
 80046ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ee:	4b05      	ldr	r3, [pc, #20]	; (8004704 <HAL_TIM_PWM_MspInit+0x2c>)
 80046f0:	2102      	movs	r1, #2
 80046f2:	430a      	orrs	r2, r1
 80046f4:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	46bd      	mov	sp, r7
 80046fa:	b002      	add	sp, #8
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	40000400 	.word	0x40000400
 8004704:	40021000 	.word	0x40021000

08004708 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM21)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a0a      	ldr	r2, [pc, #40]	; (8004740 <HAL_TIM_OC_MspInit+0x38>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d10d      	bne.n	8004736 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 800471a:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <HAL_TIM_OC_MspInit+0x3c>)
 800471c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800471e:	4b09      	ldr	r3, [pc, #36]	; (8004744 <HAL_TIM_OC_MspInit+0x3c>)
 8004720:	2104      	movs	r1, #4
 8004722:	430a      	orrs	r2, r1
 8004724:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8004726:	2200      	movs	r2, #0
 8004728:	2100      	movs	r1, #0
 800472a:	2014      	movs	r0, #20
 800472c:	f7fd f81a 	bl	8001764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8004730:	2014      	movs	r0, #20
 8004732:	f7fd f82c 	bl	800178e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	46bd      	mov	sp, r7
 800473a:	b002      	add	sp, #8
 800473c:	bd80      	pop	{r7, pc}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	40010800 	.word	0x40010800
 8004744:	40021000 	.word	0x40021000

08004748 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b08b      	sub	sp, #44	; 0x2c
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004750:	2314      	movs	r3, #20
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	0018      	movs	r0, r3
 8004756:	2314      	movs	r3, #20
 8004758:	001a      	movs	r2, r3
 800475a:	2100      	movs	r1, #0
 800475c:	f000 fbd4 	bl	8004f08 <memset>
  if(htim->Instance==TIM3)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a26      	ldr	r2, [pc, #152]	; (8004800 <HAL_TIM_MspPostInit+0xb8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d146      	bne.n	80047f8 <HAL_TIM_MspPostInit+0xb0>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800476a:	4b26      	ldr	r3, [pc, #152]	; (8004804 <HAL_TIM_MspPostInit+0xbc>)
 800476c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476e:	4b25      	ldr	r3, [pc, #148]	; (8004804 <HAL_TIM_MspPostInit+0xbc>)
 8004770:	2101      	movs	r1, #1
 8004772:	430a      	orrs	r2, r1
 8004774:	62da      	str	r2, [r3, #44]	; 0x2c
 8004776:	4b23      	ldr	r3, [pc, #140]	; (8004804 <HAL_TIM_MspPostInit+0xbc>)
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	2201      	movs	r2, #1
 800477c:	4013      	ands	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004782:	4b20      	ldr	r3, [pc, #128]	; (8004804 <HAL_TIM_MspPostInit+0xbc>)
 8004784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004786:	4b1f      	ldr	r3, [pc, #124]	; (8004804 <HAL_TIM_MspPostInit+0xbc>)
 8004788:	2104      	movs	r1, #4
 800478a:	430a      	orrs	r2, r1
 800478c:	62da      	str	r2, [r3, #44]	; 0x2c
 800478e:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <HAL_TIM_MspPostInit+0xbc>)
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	2204      	movs	r2, #4
 8004794:	4013      	ands	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800479a:	2114      	movs	r1, #20
 800479c:	187b      	adds	r3, r7, r1
 800479e:	22c0      	movs	r2, #192	; 0xc0
 80047a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a2:	187b      	adds	r3, r7, r1
 80047a4:	2202      	movs	r2, #2
 80047a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a8:	187b      	adds	r3, r7, r1
 80047aa:	2200      	movs	r2, #0
 80047ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ae:	187b      	adds	r3, r7, r1
 80047b0:	2200      	movs	r2, #0
 80047b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047b4:	187b      	adds	r3, r7, r1
 80047b6:	2202      	movs	r2, #2
 80047b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ba:	000c      	movs	r4, r1
 80047bc:	187a      	adds	r2, r7, r1
 80047be:	23a0      	movs	r3, #160	; 0xa0
 80047c0:	05db      	lsls	r3, r3, #23
 80047c2:	0011      	movs	r1, r2
 80047c4:	0018      	movs	r0, r3
 80047c6:	f7fc ffff 	bl	80017c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80047ca:	0021      	movs	r1, r4
 80047cc:	187b      	adds	r3, r7, r1
 80047ce:	22c0      	movs	r2, #192	; 0xc0
 80047d0:	0092      	lsls	r2, r2, #2
 80047d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d4:	187b      	adds	r3, r7, r1
 80047d6:	2202      	movs	r2, #2
 80047d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047da:	187b      	adds	r3, r7, r1
 80047dc:	2200      	movs	r2, #0
 80047de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e0:	187b      	adds	r3, r7, r1
 80047e2:	2200      	movs	r2, #0
 80047e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047e6:	187b      	adds	r3, r7, r1
 80047e8:	2202      	movs	r2, #2
 80047ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047ec:	187b      	adds	r3, r7, r1
 80047ee:	4a06      	ldr	r2, [pc, #24]	; (8004808 <HAL_TIM_MspPostInit+0xc0>)
 80047f0:	0019      	movs	r1, r3
 80047f2:	0010      	movs	r0, r2
 80047f4:	f7fc ffe8 	bl	80017c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80047f8:	46c0      	nop			; (mov r8, r8)
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b00b      	add	sp, #44	; 0x2c
 80047fe:	bd90      	pop	{r4, r7, pc}
 8004800:	40000400 	.word	0x40000400
 8004804:	40021000 	.word	0x40021000
 8004808:	50000800 	.word	0x50000800

0800480c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004814:	230c      	movs	r3, #12
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	0018      	movs	r0, r3
 800481a:	2314      	movs	r3, #20
 800481c:	001a      	movs	r2, r3
 800481e:	2100      	movs	r1, #0
 8004820:	f000 fb72 	bl	8004f08 <memset>
  if(huart->Instance==USART2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a18      	ldr	r2, [pc, #96]	; (800488c <HAL_UART_MspInit+0x80>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d129      	bne.n	8004882 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800482e:	4b18      	ldr	r3, [pc, #96]	; (8004890 <HAL_UART_MspInit+0x84>)
 8004830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004832:	4b17      	ldr	r3, [pc, #92]	; (8004890 <HAL_UART_MspInit+0x84>)
 8004834:	2180      	movs	r1, #128	; 0x80
 8004836:	0289      	lsls	r1, r1, #10
 8004838:	430a      	orrs	r2, r1
 800483a:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800483c:	4b14      	ldr	r3, [pc, #80]	; (8004890 <HAL_UART_MspInit+0x84>)
 800483e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004840:	4b13      	ldr	r3, [pc, #76]	; (8004890 <HAL_UART_MspInit+0x84>)
 8004842:	2101      	movs	r1, #1
 8004844:	430a      	orrs	r2, r1
 8004846:	62da      	str	r2, [r3, #44]	; 0x2c
 8004848:	4b11      	ldr	r3, [pc, #68]	; (8004890 <HAL_UART_MspInit+0x84>)
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	2201      	movs	r2, #1
 800484e:	4013      	ands	r3, r2
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004854:	210c      	movs	r1, #12
 8004856:	187b      	adds	r3, r7, r1
 8004858:	220c      	movs	r2, #12
 800485a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800485c:	187b      	adds	r3, r7, r1
 800485e:	2202      	movs	r2, #2
 8004860:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004862:	187b      	adds	r3, r7, r1
 8004864:	2200      	movs	r2, #0
 8004866:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004868:	187b      	adds	r3, r7, r1
 800486a:	2203      	movs	r2, #3
 800486c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800486e:	187b      	adds	r3, r7, r1
 8004870:	2204      	movs	r2, #4
 8004872:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004874:	187a      	adds	r2, r7, r1
 8004876:	23a0      	movs	r3, #160	; 0xa0
 8004878:	05db      	lsls	r3, r3, #23
 800487a:	0011      	movs	r1, r2
 800487c:	0018      	movs	r0, r3
 800487e:	f7fc ffa3 	bl	80017c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	46bd      	mov	sp, r7
 8004886:	b008      	add	sp, #32
 8004888:	bd80      	pop	{r7, pc}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	40004400 	.word	0x40004400
 8004890:	40021000 	.word	0x40021000

08004894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048a2:	e7fe      	b.n	80048a2 <HardFault_Handler+0x4>

080048a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80048a8:	46c0      	nop			; (mov r8, r8)
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048bc:	f7fc fe94 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	// PIN 11
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11)){
 80048cc:	4b14      	ldr	r3, [pc, #80]	; (8004920 <EXTI4_15_IRQHandler+0x58>)
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	2380      	movs	r3, #128	; 0x80
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	4013      	ands	r3, r2
 80048d6:	d001      	beq.n	80048dc <EXTI4_15_IRQHandler+0x14>
		Left_Encoder_Interrupt_Handler();
 80048d8:	f7ff fd78 	bl	80043cc <Left_Encoder_Interrupt_Handler>
	}
	// PIN 12
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_12))
 80048dc:	4b10      	ldr	r3, [pc, #64]	; (8004920 <EXTI4_15_IRQHandler+0x58>)
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	2380      	movs	r3, #128	; 0x80
 80048e2:	015b      	lsls	r3, r3, #5
 80048e4:	4013      	ands	r3, r2
 80048e6:	d001      	beq.n	80048ec <EXTI4_15_IRQHandler+0x24>
	{
		Right_Encoder_Interrupt_Handler();
 80048e8:	f7ff fd58 	bl	800439c <Right_Encoder_Interrupt_Handler>
	}

	// PIN 13

	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 80048ec:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <EXTI4_15_IRQHandler+0x58>)
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	019b      	lsls	r3, r3, #6
 80048f4:	4013      	ands	r3, r2
 80048f6:	d001      	beq.n	80048fc <EXTI4_15_IRQHandler+0x34>
		Print_Encoder_Reading();
 80048f8:	f7ff febc 	bl	8004674 <Print_Encoder_Reading>
	}
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80048fc:	2380      	movs	r3, #128	; 0x80
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	0018      	movs	r0, r3
 8004902:	f7fd f8fd 	bl	8001b00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004906:	2380      	movs	r3, #128	; 0x80
 8004908:	015b      	lsls	r3, r3, #5
 800490a:	0018      	movs	r0, r3
 800490c:	f7fd f8f8 	bl	8001b00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	019b      	lsls	r3, r3, #6
 8004914:	0018      	movs	r0, r3
 8004916:	f7fd f8f3 	bl	8001b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40010400 	.word	0x40010400

08004924 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */
	HUNDRED_MS_TIM_INT_HANDLER();
 8004928:	f7ff fe84 	bl	8004634 <HUNDRED_MS_TIM_INT_HANDLER>

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <TIM21_IRQHandler+0x18>)
 800492e:	0018      	movs	r0, r3
 8004930:	f7fe f900 	bl	8002b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8004934:	46c0      	nop			; (mov r8, r8)
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	200001b8 	.word	0x200001b8

08004940 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e00a      	b.n	8004968 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004952:	e000      	b.n	8004956 <_read+0x16>
 8004954:	bf00      	nop
 8004956:	0001      	movs	r1, r0
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	60ba      	str	r2, [r7, #8]
 800495e:	b2ca      	uxtb	r2, r1
 8004960:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	3301      	adds	r3, #1
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	429a      	cmp	r2, r3
 800496e:	dbf0      	blt.n	8004952 <_read+0x12>
	}

return len;
 8004970:	687b      	ldr	r3, [r7, #4]
}
 8004972:	0018      	movs	r0, r3
 8004974:	46bd      	mov	sp, r7
 8004976:	b006      	add	sp, #24
 8004978:	bd80      	pop	{r7, pc}

0800497a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b086      	sub	sp, #24
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	e009      	b.n	80049a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	60ba      	str	r2, [r7, #8]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	0018      	movs	r0, r3
 8004996:	f7ff fced 	bl	8004374 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	3301      	adds	r3, #1
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	dbf1      	blt.n	800498c <_write+0x12>
	}
	return len;
 80049a8:	687b      	ldr	r3, [r7, #4]
}
 80049aa:	0018      	movs	r0, r3
 80049ac:	46bd      	mov	sp, r7
 80049ae:	b006      	add	sp, #24
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <_close>:

int _close(int file)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
	return -1;
 80049ba:	2301      	movs	r3, #1
 80049bc:	425b      	negs	r3, r3
}
 80049be:	0018      	movs	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b002      	add	sp, #8
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2280      	movs	r2, #128	; 0x80
 80049d4:	0192      	lsls	r2, r2, #6
 80049d6:	605a      	str	r2, [r3, #4]
	return 0;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	0018      	movs	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	b002      	add	sp, #8
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <_isatty>:

int _isatty(int file)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
	return 1;
 80049ea:	2301      	movs	r3, #1
}
 80049ec:	0018      	movs	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b002      	add	sp, #8
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
	return 0;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	0018      	movs	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b004      	add	sp, #16
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004a14:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <_sbrk+0x50>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <_sbrk+0x16>
		heap_end = &end;
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <_sbrk+0x50>)
 8004a1e:	4a10      	ldr	r2, [pc, #64]	; (8004a60 <_sbrk+0x54>)
 8004a20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004a22:	4b0e      	ldr	r3, [pc, #56]	; (8004a5c <_sbrk+0x50>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004a28:	4b0c      	ldr	r3, [pc, #48]	; (8004a5c <_sbrk+0x50>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	18d3      	adds	r3, r2, r3
 8004a30:	466a      	mov	r2, sp
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d907      	bls.n	8004a46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004a36:	f000 f89d 	bl	8004b74 <__errno>
 8004a3a:	0003      	movs	r3, r0
 8004a3c:	220c      	movs	r2, #12
 8004a3e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004a40:	2301      	movs	r3, #1
 8004a42:	425b      	negs	r3, r3
 8004a44:	e006      	b.n	8004a54 <_sbrk+0x48>
	}

	heap_end += incr;
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <_sbrk+0x50>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	18d2      	adds	r2, r2, r3
 8004a4e:	4b03      	ldr	r3, [pc, #12]	; (8004a5c <_sbrk+0x50>)
 8004a50:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8004a52:	68fb      	ldr	r3, [r7, #12]
}
 8004a54:	0018      	movs	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b004      	add	sp, #16
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	2000009c 	.word	0x2000009c
 8004a60:	200001f8 	.word	0x200001f8

08004a64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004a68:	4b17      	ldr	r3, [pc, #92]	; (8004ac8 <SystemInit+0x64>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	4b16      	ldr	r3, [pc, #88]	; (8004ac8 <SystemInit+0x64>)
 8004a6e:	2180      	movs	r1, #128	; 0x80
 8004a70:	0049      	lsls	r1, r1, #1
 8004a72:	430a      	orrs	r2, r1
 8004a74:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004a76:	4b14      	ldr	r3, [pc, #80]	; (8004ac8 <SystemInit+0x64>)
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <SystemInit+0x64>)
 8004a7c:	4913      	ldr	r1, [pc, #76]	; (8004acc <SystemInit+0x68>)
 8004a7e:	400a      	ands	r2, r1
 8004a80:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004a82:	4b11      	ldr	r3, [pc, #68]	; (8004ac8 <SystemInit+0x64>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <SystemInit+0x64>)
 8004a88:	4911      	ldr	r1, [pc, #68]	; (8004ad0 <SystemInit+0x6c>)
 8004a8a:	400a      	ands	r2, r1
 8004a8c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004a8e:	4b0e      	ldr	r3, [pc, #56]	; (8004ac8 <SystemInit+0x64>)
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	4b0d      	ldr	r3, [pc, #52]	; (8004ac8 <SystemInit+0x64>)
 8004a94:	2101      	movs	r1, #1
 8004a96:	438a      	bics	r2, r1
 8004a98:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <SystemInit+0x64>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <SystemInit+0x64>)
 8004aa0:	490c      	ldr	r1, [pc, #48]	; (8004ad4 <SystemInit+0x70>)
 8004aa2:	400a      	ands	r2, r1
 8004aa4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004aa6:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <SystemInit+0x64>)
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <SystemInit+0x64>)
 8004aac:	490a      	ldr	r1, [pc, #40]	; (8004ad8 <SystemInit+0x74>)
 8004aae:	400a      	ands	r2, r1
 8004ab0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <SystemInit+0x64>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ab8:	4b08      	ldr	r3, [pc, #32]	; (8004adc <SystemInit+0x78>)
 8004aba:	2280      	movs	r2, #128	; 0x80
 8004abc:	0512      	lsls	r2, r2, #20
 8004abe:	609a      	str	r2, [r3, #8]
#endif
}
 8004ac0:	46c0      	nop			; (mov r8, r8)
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	88ff400c 	.word	0x88ff400c
 8004ad0:	fef6fff6 	.word	0xfef6fff6
 8004ad4:	fffbffff 	.word	0xfffbffff
 8004ad8:	ff02ffff 	.word	0xff02ffff
 8004adc:	e000ed00 	.word	0xe000ed00

08004ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004ae0:	480d      	ldr	r0, [pc, #52]	; (8004b18 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004ae2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004ae4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004ae6:	e003      	b.n	8004af0 <LoopCopyDataInit>

08004ae8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004ae8:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8004aea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004aec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004aee:	3104      	adds	r1, #4

08004af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004af0:	480b      	ldr	r0, [pc, #44]	; (8004b20 <LoopForever+0xa>)
  ldr  r3, =_edata
 8004af2:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <LoopForever+0xe>)
  adds  r2, r0, r1
 8004af4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004af6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004af8:	d3f6      	bcc.n	8004ae8 <CopyDataInit>
  ldr  r2, =_sbss
 8004afa:	4a0b      	ldr	r2, [pc, #44]	; (8004b28 <LoopForever+0x12>)
  b  LoopFillZerobss
 8004afc:	e002      	b.n	8004b04 <LoopFillZerobss>

08004afe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004afe:	2300      	movs	r3, #0
  str  r3, [r2]
 8004b00:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b02:	3204      	adds	r2, #4

08004b04 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004b04:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <LoopForever+0x16>)
  cmp  r2, r3
 8004b06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004b08:	d3f9      	bcc.n	8004afe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004b0a:	f7ff ffab 	bl	8004a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b0e:	f000 f9d7 	bl	8004ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b12:	f7ff f9c1 	bl	8003e98 <main>

08004b16 <LoopForever>:

LoopForever:
    b LoopForever
 8004b16:	e7fe      	b.n	8004b16 <LoopForever>
   ldr   r0, =_estack
 8004b18:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8004b1c:	08005d18 	.word	0x08005d18
  ldr  r0, =_sdata
 8004b20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004b24:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8004b28:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8004b2c:	200001f8 	.word	0x200001f8

08004b30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b30:	e7fe      	b.n	8004b30 <ADC1_COMP_IRQHandler>

08004b32 <arm_pid_init_f32>:
 8004b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b34:	b081      	sub	sp, #4
 8004b36:	460d      	mov	r5, r1
 8004b38:	4604      	mov	r4, r0
 8004b3a:	6a06      	ldr	r6, [r0, #32]
 8004b3c:	6086      	str	r6, [r0, #8]
 8004b3e:	2003      	movs	r0, #3
 8004b40:	0781      	lsls	r1, r0, #30
 8004b42:	4630      	mov	r0, r6
 8004b44:	f7fc f822 	bl	8000b8c <__aeabi_fmul>
 8004b48:	69a7      	ldr	r7, [r4, #24]
 8004b4a:	4639      	mov	r1, r7
 8004b4c:	f7fc f950 	bl	8000df0 <__aeabi_fsub>
 8004b50:	6060      	str	r0, [r4, #4]
 8004b52:	69e1      	ldr	r1, [r4, #28]
 8004b54:	4638      	mov	r0, r7
 8004b56:	f7fb fd6d 	bl	8000634 <__aeabi_fadd>
 8004b5a:	4631      	mov	r1, r6
 8004b5c:	f7fb fd6a 	bl	8000634 <__aeabi_fadd>
 8004b60:	6020      	str	r0, [r4, #0]
 8004b62:	2d00      	cmp	r5, #0
 8004b64:	d003      	beq.n	8004b6e <arm_pid_init_f32+0x3c>
 8004b66:	2000      	movs	r0, #0
 8004b68:	60e0      	str	r0, [r4, #12]
 8004b6a:	6120      	str	r0, [r4, #16]
 8004b6c:	6160      	str	r0, [r4, #20]
 8004b6e:	b001      	add	sp, #4
 8004b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004b74 <__errno>:
 8004b74:	4b01      	ldr	r3, [pc, #4]	; (8004b7c <__errno+0x8>)
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	4770      	bx	lr
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	20000004 	.word	0x20000004

08004b80 <__sflush_r>:
 8004b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b82:	898a      	ldrh	r2, [r1, #12]
 8004b84:	0005      	movs	r5, r0
 8004b86:	000c      	movs	r4, r1
 8004b88:	0713      	lsls	r3, r2, #28
 8004b8a:	d460      	bmi.n	8004c4e <__sflush_r+0xce>
 8004b8c:	684b      	ldr	r3, [r1, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	dc04      	bgt.n	8004b9c <__sflush_r+0x1c>
 8004b92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	dc01      	bgt.n	8004b9c <__sflush_r+0x1c>
 8004b98:	2000      	movs	r0, #0
 8004b9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b9c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004b9e:	2f00      	cmp	r7, #0
 8004ba0:	d0fa      	beq.n	8004b98 <__sflush_r+0x18>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	682e      	ldr	r6, [r5, #0]
 8004ba6:	602b      	str	r3, [r5, #0]
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	015b      	lsls	r3, r3, #5
 8004bac:	6a21      	ldr	r1, [r4, #32]
 8004bae:	401a      	ands	r2, r3
 8004bb0:	d034      	beq.n	8004c1c <__sflush_r+0x9c>
 8004bb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bb4:	89a3      	ldrh	r3, [r4, #12]
 8004bb6:	075b      	lsls	r3, r3, #29
 8004bb8:	d506      	bpl.n	8004bc8 <__sflush_r+0x48>
 8004bba:	6863      	ldr	r3, [r4, #4]
 8004bbc:	1ac0      	subs	r0, r0, r3
 8004bbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <__sflush_r+0x48>
 8004bc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bc6:	1ac0      	subs	r0, r0, r3
 8004bc8:	0002      	movs	r2, r0
 8004bca:	6a21      	ldr	r1, [r4, #32]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	0028      	movs	r0, r5
 8004bd0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004bd2:	47b8      	blx	r7
 8004bd4:	89a1      	ldrh	r1, [r4, #12]
 8004bd6:	1c43      	adds	r3, r0, #1
 8004bd8:	d106      	bne.n	8004be8 <__sflush_r+0x68>
 8004bda:	682b      	ldr	r3, [r5, #0]
 8004bdc:	2b1d      	cmp	r3, #29
 8004bde:	d830      	bhi.n	8004c42 <__sflush_r+0xc2>
 8004be0:	4a2b      	ldr	r2, [pc, #172]	; (8004c90 <__sflush_r+0x110>)
 8004be2:	40da      	lsrs	r2, r3
 8004be4:	07d3      	lsls	r3, r2, #31
 8004be6:	d52c      	bpl.n	8004c42 <__sflush_r+0xc2>
 8004be8:	2300      	movs	r3, #0
 8004bea:	6063      	str	r3, [r4, #4]
 8004bec:	6923      	ldr	r3, [r4, #16]
 8004bee:	6023      	str	r3, [r4, #0]
 8004bf0:	04cb      	lsls	r3, r1, #19
 8004bf2:	d505      	bpl.n	8004c00 <__sflush_r+0x80>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	d102      	bne.n	8004bfe <__sflush_r+0x7e>
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d100      	bne.n	8004c00 <__sflush_r+0x80>
 8004bfe:	6560      	str	r0, [r4, #84]	; 0x54
 8004c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c02:	602e      	str	r6, [r5, #0]
 8004c04:	2900      	cmp	r1, #0
 8004c06:	d0c7      	beq.n	8004b98 <__sflush_r+0x18>
 8004c08:	0023      	movs	r3, r4
 8004c0a:	3344      	adds	r3, #68	; 0x44
 8004c0c:	4299      	cmp	r1, r3
 8004c0e:	d002      	beq.n	8004c16 <__sflush_r+0x96>
 8004c10:	0028      	movs	r0, r5
 8004c12:	f000 f981 	bl	8004f18 <_free_r>
 8004c16:	2000      	movs	r0, #0
 8004c18:	6360      	str	r0, [r4, #52]	; 0x34
 8004c1a:	e7be      	b.n	8004b9a <__sflush_r+0x1a>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	0028      	movs	r0, r5
 8004c20:	47b8      	blx	r7
 8004c22:	1c43      	adds	r3, r0, #1
 8004c24:	d1c6      	bne.n	8004bb4 <__sflush_r+0x34>
 8004c26:	682b      	ldr	r3, [r5, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0c3      	beq.n	8004bb4 <__sflush_r+0x34>
 8004c2c:	2b1d      	cmp	r3, #29
 8004c2e:	d001      	beq.n	8004c34 <__sflush_r+0xb4>
 8004c30:	2b16      	cmp	r3, #22
 8004c32:	d101      	bne.n	8004c38 <__sflush_r+0xb8>
 8004c34:	602e      	str	r6, [r5, #0]
 8004c36:	e7af      	b.n	8004b98 <__sflush_r+0x18>
 8004c38:	2340      	movs	r3, #64	; 0x40
 8004c3a:	89a2      	ldrh	r2, [r4, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	81a3      	strh	r3, [r4, #12]
 8004c40:	e7ab      	b.n	8004b9a <__sflush_r+0x1a>
 8004c42:	2340      	movs	r3, #64	; 0x40
 8004c44:	430b      	orrs	r3, r1
 8004c46:	2001      	movs	r0, #1
 8004c48:	81a3      	strh	r3, [r4, #12]
 8004c4a:	4240      	negs	r0, r0
 8004c4c:	e7a5      	b.n	8004b9a <__sflush_r+0x1a>
 8004c4e:	690f      	ldr	r7, [r1, #16]
 8004c50:	2f00      	cmp	r7, #0
 8004c52:	d0a1      	beq.n	8004b98 <__sflush_r+0x18>
 8004c54:	680b      	ldr	r3, [r1, #0]
 8004c56:	600f      	str	r7, [r1, #0]
 8004c58:	1bdb      	subs	r3, r3, r7
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	0792      	lsls	r2, r2, #30
 8004c60:	d100      	bne.n	8004c64 <__sflush_r+0xe4>
 8004c62:	694b      	ldr	r3, [r1, #20]
 8004c64:	60a3      	str	r3, [r4, #8]
 8004c66:	9b01      	ldr	r3, [sp, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	dc00      	bgt.n	8004c6e <__sflush_r+0xee>
 8004c6c:	e794      	b.n	8004b98 <__sflush_r+0x18>
 8004c6e:	9b01      	ldr	r3, [sp, #4]
 8004c70:	003a      	movs	r2, r7
 8004c72:	6a21      	ldr	r1, [r4, #32]
 8004c74:	0028      	movs	r0, r5
 8004c76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c78:	47b0      	blx	r6
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	dc03      	bgt.n	8004c86 <__sflush_r+0x106>
 8004c7e:	2340      	movs	r3, #64	; 0x40
 8004c80:	89a2      	ldrh	r2, [r4, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	e7df      	b.n	8004c46 <__sflush_r+0xc6>
 8004c86:	9b01      	ldr	r3, [sp, #4]
 8004c88:	183f      	adds	r7, r7, r0
 8004c8a:	1a1b      	subs	r3, r3, r0
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	e7ea      	b.n	8004c66 <__sflush_r+0xe6>
 8004c90:	20400001 	.word	0x20400001

08004c94 <_fflush_r>:
 8004c94:	690b      	ldr	r3, [r1, #16]
 8004c96:	b570      	push	{r4, r5, r6, lr}
 8004c98:	0005      	movs	r5, r0
 8004c9a:	000c      	movs	r4, r1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <_fflush_r+0x10>
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	d004      	beq.n	8004cb2 <_fflush_r+0x1e>
 8004ca8:	6983      	ldr	r3, [r0, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <_fflush_r+0x1e>
 8004cae:	f000 f873 	bl	8004d98 <__sinit>
 8004cb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <_fflush_r+0x4c>)
 8004cb4:	429c      	cmp	r4, r3
 8004cb6:	d109      	bne.n	8004ccc <_fflush_r+0x38>
 8004cb8:	686c      	ldr	r4, [r5, #4]
 8004cba:	220c      	movs	r2, #12
 8004cbc:	5ea3      	ldrsh	r3, [r4, r2]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0ee      	beq.n	8004ca0 <_fflush_r+0xc>
 8004cc2:	0021      	movs	r1, r4
 8004cc4:	0028      	movs	r0, r5
 8004cc6:	f7ff ff5b 	bl	8004b80 <__sflush_r>
 8004cca:	e7ea      	b.n	8004ca2 <_fflush_r+0xe>
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <_fflush_r+0x50>)
 8004cce:	429c      	cmp	r4, r3
 8004cd0:	d101      	bne.n	8004cd6 <_fflush_r+0x42>
 8004cd2:	68ac      	ldr	r4, [r5, #8]
 8004cd4:	e7f1      	b.n	8004cba <_fflush_r+0x26>
 8004cd6:	4b04      	ldr	r3, [pc, #16]	; (8004ce8 <_fflush_r+0x54>)
 8004cd8:	429c      	cmp	r4, r3
 8004cda:	d1ee      	bne.n	8004cba <_fflush_r+0x26>
 8004cdc:	68ec      	ldr	r4, [r5, #12]
 8004cde:	e7ec      	b.n	8004cba <_fflush_r+0x26>
 8004ce0:	08005c90 	.word	0x08005c90
 8004ce4:	08005cb0 	.word	0x08005cb0
 8004ce8:	08005c70 	.word	0x08005c70

08004cec <fflush>:
 8004cec:	b510      	push	{r4, lr}
 8004cee:	1e01      	subs	r1, r0, #0
 8004cf0:	d105      	bne.n	8004cfe <fflush+0x12>
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <fflush+0x1c>)
 8004cf4:	4905      	ldr	r1, [pc, #20]	; (8004d0c <fflush+0x20>)
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	f000 f8c0 	bl	8004e7c <_fwalk_reent>
 8004cfc:	bd10      	pop	{r4, pc}
 8004cfe:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <fflush+0x24>)
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	f7ff ffc7 	bl	8004c94 <_fflush_r>
 8004d06:	e7f9      	b.n	8004cfc <fflush+0x10>
 8004d08:	08005cd0 	.word	0x08005cd0
 8004d0c:	08004c95 	.word	0x08004c95
 8004d10:	20000004 	.word	0x20000004

08004d14 <std>:
 8004d14:	2300      	movs	r3, #0
 8004d16:	b510      	push	{r4, lr}
 8004d18:	0004      	movs	r4, r0
 8004d1a:	6003      	str	r3, [r0, #0]
 8004d1c:	6043      	str	r3, [r0, #4]
 8004d1e:	6083      	str	r3, [r0, #8]
 8004d20:	8181      	strh	r1, [r0, #12]
 8004d22:	6643      	str	r3, [r0, #100]	; 0x64
 8004d24:	81c2      	strh	r2, [r0, #14]
 8004d26:	6103      	str	r3, [r0, #16]
 8004d28:	6143      	str	r3, [r0, #20]
 8004d2a:	6183      	str	r3, [r0, #24]
 8004d2c:	0019      	movs	r1, r3
 8004d2e:	2208      	movs	r2, #8
 8004d30:	305c      	adds	r0, #92	; 0x5c
 8004d32:	f000 f8e9 	bl	8004f08 <memset>
 8004d36:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <std+0x38>)
 8004d38:	6224      	str	r4, [r4, #32]
 8004d3a:	6263      	str	r3, [r4, #36]	; 0x24
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <std+0x3c>)
 8004d3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d40:	4b04      	ldr	r3, [pc, #16]	; (8004d54 <std+0x40>)
 8004d42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d44:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <std+0x44>)
 8004d46:	6323      	str	r3, [r4, #48]	; 0x30
 8004d48:	bd10      	pop	{r4, pc}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	08005195 	.word	0x08005195
 8004d50:	080051bd 	.word	0x080051bd
 8004d54:	080051f5 	.word	0x080051f5
 8004d58:	08005221 	.word	0x08005221

08004d5c <_cleanup_r>:
 8004d5c:	b510      	push	{r4, lr}
 8004d5e:	4902      	ldr	r1, [pc, #8]	; (8004d68 <_cleanup_r+0xc>)
 8004d60:	f000 f88c 	bl	8004e7c <_fwalk_reent>
 8004d64:	bd10      	pop	{r4, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	08004c95 	.word	0x08004c95

08004d6c <__sfmoreglue>:
 8004d6c:	b570      	push	{r4, r5, r6, lr}
 8004d6e:	2568      	movs	r5, #104	; 0x68
 8004d70:	1e4a      	subs	r2, r1, #1
 8004d72:	4355      	muls	r5, r2
 8004d74:	000e      	movs	r6, r1
 8004d76:	0029      	movs	r1, r5
 8004d78:	3174      	adds	r1, #116	; 0x74
 8004d7a:	f000 f917 	bl	8004fac <_malloc_r>
 8004d7e:	1e04      	subs	r4, r0, #0
 8004d80:	d008      	beq.n	8004d94 <__sfmoreglue+0x28>
 8004d82:	2100      	movs	r1, #0
 8004d84:	002a      	movs	r2, r5
 8004d86:	6001      	str	r1, [r0, #0]
 8004d88:	6046      	str	r6, [r0, #4]
 8004d8a:	300c      	adds	r0, #12
 8004d8c:	60a0      	str	r0, [r4, #8]
 8004d8e:	3268      	adds	r2, #104	; 0x68
 8004d90:	f000 f8ba 	bl	8004f08 <memset>
 8004d94:	0020      	movs	r0, r4
 8004d96:	bd70      	pop	{r4, r5, r6, pc}

08004d98 <__sinit>:
 8004d98:	6983      	ldr	r3, [r0, #24]
 8004d9a:	b513      	push	{r0, r1, r4, lr}
 8004d9c:	0004      	movs	r4, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d128      	bne.n	8004df4 <__sinit+0x5c>
 8004da2:	6483      	str	r3, [r0, #72]	; 0x48
 8004da4:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004da6:	6503      	str	r3, [r0, #80]	; 0x50
 8004da8:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <__sinit+0x60>)
 8004daa:	4a14      	ldr	r2, [pc, #80]	; (8004dfc <__sinit+0x64>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6282      	str	r2, [r0, #40]	; 0x28
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	4298      	cmp	r0, r3
 8004db4:	d101      	bne.n	8004dba <__sinit+0x22>
 8004db6:	2301      	movs	r3, #1
 8004db8:	6183      	str	r3, [r0, #24]
 8004dba:	0020      	movs	r0, r4
 8004dbc:	f000 f820 	bl	8004e00 <__sfp>
 8004dc0:	6060      	str	r0, [r4, #4]
 8004dc2:	0020      	movs	r0, r4
 8004dc4:	f000 f81c 	bl	8004e00 <__sfp>
 8004dc8:	60a0      	str	r0, [r4, #8]
 8004dca:	0020      	movs	r0, r4
 8004dcc:	f000 f818 	bl	8004e00 <__sfp>
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	60e0      	str	r0, [r4, #12]
 8004dd4:	2104      	movs	r1, #4
 8004dd6:	6860      	ldr	r0, [r4, #4]
 8004dd8:	f7ff ff9c 	bl	8004d14 <std>
 8004ddc:	2201      	movs	r2, #1
 8004dde:	2109      	movs	r1, #9
 8004de0:	68a0      	ldr	r0, [r4, #8]
 8004de2:	f7ff ff97 	bl	8004d14 <std>
 8004de6:	2202      	movs	r2, #2
 8004de8:	2112      	movs	r1, #18
 8004dea:	68e0      	ldr	r0, [r4, #12]
 8004dec:	f7ff ff92 	bl	8004d14 <std>
 8004df0:	2301      	movs	r3, #1
 8004df2:	61a3      	str	r3, [r4, #24]
 8004df4:	bd13      	pop	{r0, r1, r4, pc}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	08005cd0 	.word	0x08005cd0
 8004dfc:	08004d5d 	.word	0x08004d5d

08004e00 <__sfp>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	4b1c      	ldr	r3, [pc, #112]	; (8004e74 <__sfp+0x74>)
 8004e04:	0007      	movs	r7, r0
 8004e06:	681e      	ldr	r6, [r3, #0]
 8004e08:	69b3      	ldr	r3, [r6, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <__sfp+0x14>
 8004e0e:	0030      	movs	r0, r6
 8004e10:	f7ff ffc2 	bl	8004d98 <__sinit>
 8004e14:	3648      	adds	r6, #72	; 0x48
 8004e16:	68b4      	ldr	r4, [r6, #8]
 8004e18:	6873      	ldr	r3, [r6, #4]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	d504      	bpl.n	8004e28 <__sfp+0x28>
 8004e1e:	6833      	ldr	r3, [r6, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <__sfp+0x34>
 8004e24:	6836      	ldr	r6, [r6, #0]
 8004e26:	e7f6      	b.n	8004e16 <__sfp+0x16>
 8004e28:	220c      	movs	r2, #12
 8004e2a:	5ea5      	ldrsh	r5, [r4, r2]
 8004e2c:	2d00      	cmp	r5, #0
 8004e2e:	d00d      	beq.n	8004e4c <__sfp+0x4c>
 8004e30:	3468      	adds	r4, #104	; 0x68
 8004e32:	e7f2      	b.n	8004e1a <__sfp+0x1a>
 8004e34:	2104      	movs	r1, #4
 8004e36:	0038      	movs	r0, r7
 8004e38:	f7ff ff98 	bl	8004d6c <__sfmoreglue>
 8004e3c:	6030      	str	r0, [r6, #0]
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	d1f0      	bne.n	8004e24 <__sfp+0x24>
 8004e42:	230c      	movs	r3, #12
 8004e44:	0004      	movs	r4, r0
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	0020      	movs	r0, r4
 8004e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e4c:	0020      	movs	r0, r4
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <__sfp+0x78>)
 8004e50:	6665      	str	r5, [r4, #100]	; 0x64
 8004e52:	6025      	str	r5, [r4, #0]
 8004e54:	6065      	str	r5, [r4, #4]
 8004e56:	60a5      	str	r5, [r4, #8]
 8004e58:	60e3      	str	r3, [r4, #12]
 8004e5a:	6125      	str	r5, [r4, #16]
 8004e5c:	6165      	str	r5, [r4, #20]
 8004e5e:	61a5      	str	r5, [r4, #24]
 8004e60:	2208      	movs	r2, #8
 8004e62:	0029      	movs	r1, r5
 8004e64:	305c      	adds	r0, #92	; 0x5c
 8004e66:	f000 f84f 	bl	8004f08 <memset>
 8004e6a:	6365      	str	r5, [r4, #52]	; 0x34
 8004e6c:	63a5      	str	r5, [r4, #56]	; 0x38
 8004e6e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004e70:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004e72:	e7e9      	b.n	8004e48 <__sfp+0x48>
 8004e74:	08005cd0 	.word	0x08005cd0
 8004e78:	ffff0001 	.word	0xffff0001

08004e7c <_fwalk_reent>:
 8004e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e7e:	0004      	movs	r4, r0
 8004e80:	0007      	movs	r7, r0
 8004e82:	2600      	movs	r6, #0
 8004e84:	9101      	str	r1, [sp, #4]
 8004e86:	3448      	adds	r4, #72	; 0x48
 8004e88:	2c00      	cmp	r4, #0
 8004e8a:	d101      	bne.n	8004e90 <_fwalk_reent+0x14>
 8004e8c:	0030      	movs	r0, r6
 8004e8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e90:	6863      	ldr	r3, [r4, #4]
 8004e92:	68a5      	ldr	r5, [r4, #8]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	9b00      	ldr	r3, [sp, #0]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	d501      	bpl.n	8004ea2 <_fwalk_reent+0x26>
 8004e9e:	6824      	ldr	r4, [r4, #0]
 8004ea0:	e7f2      	b.n	8004e88 <_fwalk_reent+0xc>
 8004ea2:	89ab      	ldrh	r3, [r5, #12]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d908      	bls.n	8004eba <_fwalk_reent+0x3e>
 8004ea8:	220e      	movs	r2, #14
 8004eaa:	5eab      	ldrsh	r3, [r5, r2]
 8004eac:	3301      	adds	r3, #1
 8004eae:	d004      	beq.n	8004eba <_fwalk_reent+0x3e>
 8004eb0:	0029      	movs	r1, r5
 8004eb2:	0038      	movs	r0, r7
 8004eb4:	9b01      	ldr	r3, [sp, #4]
 8004eb6:	4798      	blx	r3
 8004eb8:	4306      	orrs	r6, r0
 8004eba:	3568      	adds	r5, #104	; 0x68
 8004ebc:	e7eb      	b.n	8004e96 <_fwalk_reent+0x1a>
	...

08004ec0 <__libc_init_array>:
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	2600      	movs	r6, #0
 8004ec4:	4d0c      	ldr	r5, [pc, #48]	; (8004ef8 <__libc_init_array+0x38>)
 8004ec6:	4c0d      	ldr	r4, [pc, #52]	; (8004efc <__libc_init_array+0x3c>)
 8004ec8:	1b64      	subs	r4, r4, r5
 8004eca:	10a4      	asrs	r4, r4, #2
 8004ecc:	42a6      	cmp	r6, r4
 8004ece:	d109      	bne.n	8004ee4 <__libc_init_array+0x24>
 8004ed0:	2600      	movs	r6, #0
 8004ed2:	f000 fe17 	bl	8005b04 <_init>
 8004ed6:	4d0a      	ldr	r5, [pc, #40]	; (8004f00 <__libc_init_array+0x40>)
 8004ed8:	4c0a      	ldr	r4, [pc, #40]	; (8004f04 <__libc_init_array+0x44>)
 8004eda:	1b64      	subs	r4, r4, r5
 8004edc:	10a4      	asrs	r4, r4, #2
 8004ede:	42a6      	cmp	r6, r4
 8004ee0:	d105      	bne.n	8004eee <__libc_init_array+0x2e>
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}
 8004ee4:	00b3      	lsls	r3, r6, #2
 8004ee6:	58eb      	ldr	r3, [r5, r3]
 8004ee8:	4798      	blx	r3
 8004eea:	3601      	adds	r6, #1
 8004eec:	e7ee      	b.n	8004ecc <__libc_init_array+0xc>
 8004eee:	00b3      	lsls	r3, r6, #2
 8004ef0:	58eb      	ldr	r3, [r5, r3]
 8004ef2:	4798      	blx	r3
 8004ef4:	3601      	adds	r6, #1
 8004ef6:	e7f2      	b.n	8004ede <__libc_init_array+0x1e>
 8004ef8:	08005d10 	.word	0x08005d10
 8004efc:	08005d10 	.word	0x08005d10
 8004f00:	08005d10 	.word	0x08005d10
 8004f04:	08005d14 	.word	0x08005d14

08004f08 <memset>:
 8004f08:	0003      	movs	r3, r0
 8004f0a:	1812      	adds	r2, r2, r0
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d100      	bne.n	8004f12 <memset+0xa>
 8004f10:	4770      	bx	lr
 8004f12:	7019      	strb	r1, [r3, #0]
 8004f14:	3301      	adds	r3, #1
 8004f16:	e7f9      	b.n	8004f0c <memset+0x4>

08004f18 <_free_r>:
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	0005      	movs	r5, r0
 8004f1c:	2900      	cmp	r1, #0
 8004f1e:	d010      	beq.n	8004f42 <_free_r+0x2a>
 8004f20:	1f0c      	subs	r4, r1, #4
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	da00      	bge.n	8004f2a <_free_r+0x12>
 8004f28:	18e4      	adds	r4, r4, r3
 8004f2a:	0028      	movs	r0, r5
 8004f2c:	f000 faf0 	bl	8005510 <__malloc_lock>
 8004f30:	4a1d      	ldr	r2, [pc, #116]	; (8004fa8 <_free_r+0x90>)
 8004f32:	6813      	ldr	r3, [r2, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d105      	bne.n	8004f44 <_free_r+0x2c>
 8004f38:	6063      	str	r3, [r4, #4]
 8004f3a:	6014      	str	r4, [r2, #0]
 8004f3c:	0028      	movs	r0, r5
 8004f3e:	f000 fae8 	bl	8005512 <__malloc_unlock>
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	42a3      	cmp	r3, r4
 8004f46:	d909      	bls.n	8004f5c <_free_r+0x44>
 8004f48:	6821      	ldr	r1, [r4, #0]
 8004f4a:	1860      	adds	r0, r4, r1
 8004f4c:	4283      	cmp	r3, r0
 8004f4e:	d1f3      	bne.n	8004f38 <_free_r+0x20>
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	1841      	adds	r1, r0, r1
 8004f56:	6021      	str	r1, [r4, #0]
 8004f58:	e7ee      	b.n	8004f38 <_free_r+0x20>
 8004f5a:	0013      	movs	r3, r2
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	2a00      	cmp	r2, #0
 8004f60:	d001      	beq.n	8004f66 <_free_r+0x4e>
 8004f62:	42a2      	cmp	r2, r4
 8004f64:	d9f9      	bls.n	8004f5a <_free_r+0x42>
 8004f66:	6819      	ldr	r1, [r3, #0]
 8004f68:	1858      	adds	r0, r3, r1
 8004f6a:	42a0      	cmp	r0, r4
 8004f6c:	d10b      	bne.n	8004f86 <_free_r+0x6e>
 8004f6e:	6820      	ldr	r0, [r4, #0]
 8004f70:	1809      	adds	r1, r1, r0
 8004f72:	1858      	adds	r0, r3, r1
 8004f74:	6019      	str	r1, [r3, #0]
 8004f76:	4282      	cmp	r2, r0
 8004f78:	d1e0      	bne.n	8004f3c <_free_r+0x24>
 8004f7a:	6810      	ldr	r0, [r2, #0]
 8004f7c:	6852      	ldr	r2, [r2, #4]
 8004f7e:	1841      	adds	r1, r0, r1
 8004f80:	6019      	str	r1, [r3, #0]
 8004f82:	605a      	str	r2, [r3, #4]
 8004f84:	e7da      	b.n	8004f3c <_free_r+0x24>
 8004f86:	42a0      	cmp	r0, r4
 8004f88:	d902      	bls.n	8004f90 <_free_r+0x78>
 8004f8a:	230c      	movs	r3, #12
 8004f8c:	602b      	str	r3, [r5, #0]
 8004f8e:	e7d5      	b.n	8004f3c <_free_r+0x24>
 8004f90:	6821      	ldr	r1, [r4, #0]
 8004f92:	1860      	adds	r0, r4, r1
 8004f94:	4282      	cmp	r2, r0
 8004f96:	d103      	bne.n	8004fa0 <_free_r+0x88>
 8004f98:	6810      	ldr	r0, [r2, #0]
 8004f9a:	6852      	ldr	r2, [r2, #4]
 8004f9c:	1841      	adds	r1, r0, r1
 8004f9e:	6021      	str	r1, [r4, #0]
 8004fa0:	6062      	str	r2, [r4, #4]
 8004fa2:	605c      	str	r4, [r3, #4]
 8004fa4:	e7ca      	b.n	8004f3c <_free_r+0x24>
 8004fa6:	46c0      	nop			; (mov r8, r8)
 8004fa8:	200000a0 	.word	0x200000a0

08004fac <_malloc_r>:
 8004fac:	2303      	movs	r3, #3
 8004fae:	b570      	push	{r4, r5, r6, lr}
 8004fb0:	1ccd      	adds	r5, r1, #3
 8004fb2:	439d      	bics	r5, r3
 8004fb4:	3508      	adds	r5, #8
 8004fb6:	0006      	movs	r6, r0
 8004fb8:	2d0c      	cmp	r5, #12
 8004fba:	d21e      	bcs.n	8004ffa <_malloc_r+0x4e>
 8004fbc:	250c      	movs	r5, #12
 8004fbe:	42a9      	cmp	r1, r5
 8004fc0:	d81d      	bhi.n	8004ffe <_malloc_r+0x52>
 8004fc2:	0030      	movs	r0, r6
 8004fc4:	f000 faa4 	bl	8005510 <__malloc_lock>
 8004fc8:	4a25      	ldr	r2, [pc, #148]	; (8005060 <_malloc_r+0xb4>)
 8004fca:	6814      	ldr	r4, [r2, #0]
 8004fcc:	0021      	movs	r1, r4
 8004fce:	2900      	cmp	r1, #0
 8004fd0:	d119      	bne.n	8005006 <_malloc_r+0x5a>
 8004fd2:	4c24      	ldr	r4, [pc, #144]	; (8005064 <_malloc_r+0xb8>)
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <_malloc_r+0x36>
 8004fda:	0030      	movs	r0, r6
 8004fdc:	f000 f8c8 	bl	8005170 <_sbrk_r>
 8004fe0:	6020      	str	r0, [r4, #0]
 8004fe2:	0029      	movs	r1, r5
 8004fe4:	0030      	movs	r0, r6
 8004fe6:	f000 f8c3 	bl	8005170 <_sbrk_r>
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	d12b      	bne.n	8005046 <_malloc_r+0x9a>
 8004fee:	230c      	movs	r3, #12
 8004ff0:	0030      	movs	r0, r6
 8004ff2:	6033      	str	r3, [r6, #0]
 8004ff4:	f000 fa8d 	bl	8005512 <__malloc_unlock>
 8004ff8:	e003      	b.n	8005002 <_malloc_r+0x56>
 8004ffa:	2d00      	cmp	r5, #0
 8004ffc:	dadf      	bge.n	8004fbe <_malloc_r+0x12>
 8004ffe:	230c      	movs	r3, #12
 8005000:	6033      	str	r3, [r6, #0]
 8005002:	2000      	movs	r0, #0
 8005004:	bd70      	pop	{r4, r5, r6, pc}
 8005006:	680b      	ldr	r3, [r1, #0]
 8005008:	1b5b      	subs	r3, r3, r5
 800500a:	d419      	bmi.n	8005040 <_malloc_r+0x94>
 800500c:	2b0b      	cmp	r3, #11
 800500e:	d903      	bls.n	8005018 <_malloc_r+0x6c>
 8005010:	600b      	str	r3, [r1, #0]
 8005012:	18cc      	adds	r4, r1, r3
 8005014:	6025      	str	r5, [r4, #0]
 8005016:	e003      	b.n	8005020 <_malloc_r+0x74>
 8005018:	684b      	ldr	r3, [r1, #4]
 800501a:	428c      	cmp	r4, r1
 800501c:	d10d      	bne.n	800503a <_malloc_r+0x8e>
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	0030      	movs	r0, r6
 8005022:	f000 fa76 	bl	8005512 <__malloc_unlock>
 8005026:	0020      	movs	r0, r4
 8005028:	2207      	movs	r2, #7
 800502a:	300b      	adds	r0, #11
 800502c:	1d23      	adds	r3, r4, #4
 800502e:	4390      	bics	r0, r2
 8005030:	1ac3      	subs	r3, r0, r3
 8005032:	d0e7      	beq.n	8005004 <_malloc_r+0x58>
 8005034:	425a      	negs	r2, r3
 8005036:	50e2      	str	r2, [r4, r3]
 8005038:	e7e4      	b.n	8005004 <_malloc_r+0x58>
 800503a:	6063      	str	r3, [r4, #4]
 800503c:	000c      	movs	r4, r1
 800503e:	e7ef      	b.n	8005020 <_malloc_r+0x74>
 8005040:	000c      	movs	r4, r1
 8005042:	6849      	ldr	r1, [r1, #4]
 8005044:	e7c3      	b.n	8004fce <_malloc_r+0x22>
 8005046:	2303      	movs	r3, #3
 8005048:	1cc4      	adds	r4, r0, #3
 800504a:	439c      	bics	r4, r3
 800504c:	42a0      	cmp	r0, r4
 800504e:	d0e1      	beq.n	8005014 <_malloc_r+0x68>
 8005050:	1a21      	subs	r1, r4, r0
 8005052:	0030      	movs	r0, r6
 8005054:	f000 f88c 	bl	8005170 <_sbrk_r>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d1db      	bne.n	8005014 <_malloc_r+0x68>
 800505c:	e7c7      	b.n	8004fee <_malloc_r+0x42>
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	200000a0 	.word	0x200000a0
 8005064:	200000a4 	.word	0x200000a4

08005068 <iprintf>:
 8005068:	b40f      	push	{r0, r1, r2, r3}
 800506a:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <iprintf+0x30>)
 800506c:	b513      	push	{r0, r1, r4, lr}
 800506e:	681c      	ldr	r4, [r3, #0]
 8005070:	2c00      	cmp	r4, #0
 8005072:	d005      	beq.n	8005080 <iprintf+0x18>
 8005074:	69a3      	ldr	r3, [r4, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d102      	bne.n	8005080 <iprintf+0x18>
 800507a:	0020      	movs	r0, r4
 800507c:	f7ff fe8c 	bl	8004d98 <__sinit>
 8005080:	ab05      	add	r3, sp, #20
 8005082:	9a04      	ldr	r2, [sp, #16]
 8005084:	68a1      	ldr	r1, [r4, #8]
 8005086:	0020      	movs	r0, r4
 8005088:	9301      	str	r3, [sp, #4]
 800508a:	f000 fa6b 	bl	8005564 <_vfiprintf_r>
 800508e:	bc16      	pop	{r1, r2, r4}
 8005090:	bc08      	pop	{r3}
 8005092:	b004      	add	sp, #16
 8005094:	4718      	bx	r3
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	20000004 	.word	0x20000004

0800509c <_puts_r>:
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	0005      	movs	r5, r0
 80050a0:	000e      	movs	r6, r1
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d004      	beq.n	80050b0 <_puts_r+0x14>
 80050a6:	6983      	ldr	r3, [r0, #24]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <_puts_r+0x14>
 80050ac:	f7ff fe74 	bl	8004d98 <__sinit>
 80050b0:	69ab      	ldr	r3, [r5, #24]
 80050b2:	68ac      	ldr	r4, [r5, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d102      	bne.n	80050be <_puts_r+0x22>
 80050b8:	0028      	movs	r0, r5
 80050ba:	f7ff fe6d 	bl	8004d98 <__sinit>
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <_puts_r+0xb4>)
 80050c0:	429c      	cmp	r4, r3
 80050c2:	d10f      	bne.n	80050e4 <_puts_r+0x48>
 80050c4:	686c      	ldr	r4, [r5, #4]
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	071b      	lsls	r3, r3, #28
 80050ca:	d502      	bpl.n	80050d2 <_puts_r+0x36>
 80050cc:	6923      	ldr	r3, [r4, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d11f      	bne.n	8005112 <_puts_r+0x76>
 80050d2:	0021      	movs	r1, r4
 80050d4:	0028      	movs	r0, r5
 80050d6:	f000 f913 	bl	8005300 <__swsetup_r>
 80050da:	2800      	cmp	r0, #0
 80050dc:	d019      	beq.n	8005112 <_puts_r+0x76>
 80050de:	2001      	movs	r0, #1
 80050e0:	4240      	negs	r0, r0
 80050e2:	bd70      	pop	{r4, r5, r6, pc}
 80050e4:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <_puts_r+0xb8>)
 80050e6:	429c      	cmp	r4, r3
 80050e8:	d101      	bne.n	80050ee <_puts_r+0x52>
 80050ea:	68ac      	ldr	r4, [r5, #8]
 80050ec:	e7eb      	b.n	80050c6 <_puts_r+0x2a>
 80050ee:	4b1a      	ldr	r3, [pc, #104]	; (8005158 <_puts_r+0xbc>)
 80050f0:	429c      	cmp	r4, r3
 80050f2:	d1e8      	bne.n	80050c6 <_puts_r+0x2a>
 80050f4:	68ec      	ldr	r4, [r5, #12]
 80050f6:	e7e6      	b.n	80050c6 <_puts_r+0x2a>
 80050f8:	3601      	adds	r6, #1
 80050fa:	60a3      	str	r3, [r4, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	da04      	bge.n	800510a <_puts_r+0x6e>
 8005100:	69a2      	ldr	r2, [r4, #24]
 8005102:	429a      	cmp	r2, r3
 8005104:	dc16      	bgt.n	8005134 <_puts_r+0x98>
 8005106:	290a      	cmp	r1, #10
 8005108:	d014      	beq.n	8005134 <_puts_r+0x98>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	6022      	str	r2, [r4, #0]
 8005110:	7019      	strb	r1, [r3, #0]
 8005112:	68a3      	ldr	r3, [r4, #8]
 8005114:	7831      	ldrb	r1, [r6, #0]
 8005116:	3b01      	subs	r3, #1
 8005118:	2900      	cmp	r1, #0
 800511a:	d1ed      	bne.n	80050f8 <_puts_r+0x5c>
 800511c:	60a3      	str	r3, [r4, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	da0f      	bge.n	8005142 <_puts_r+0xa6>
 8005122:	0022      	movs	r2, r4
 8005124:	310a      	adds	r1, #10
 8005126:	0028      	movs	r0, r5
 8005128:	f000 f880 	bl	800522c <__swbuf_r>
 800512c:	1c43      	adds	r3, r0, #1
 800512e:	d0d6      	beq.n	80050de <_puts_r+0x42>
 8005130:	200a      	movs	r0, #10
 8005132:	e7d6      	b.n	80050e2 <_puts_r+0x46>
 8005134:	0022      	movs	r2, r4
 8005136:	0028      	movs	r0, r5
 8005138:	f000 f878 	bl	800522c <__swbuf_r>
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d1e8      	bne.n	8005112 <_puts_r+0x76>
 8005140:	e7cd      	b.n	80050de <_puts_r+0x42>
 8005142:	200a      	movs	r0, #10
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	6022      	str	r2, [r4, #0]
 800514a:	7018      	strb	r0, [r3, #0]
 800514c:	e7c9      	b.n	80050e2 <_puts_r+0x46>
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	08005c90 	.word	0x08005c90
 8005154:	08005cb0 	.word	0x08005cb0
 8005158:	08005c70 	.word	0x08005c70

0800515c <puts>:
 800515c:	b510      	push	{r4, lr}
 800515e:	4b03      	ldr	r3, [pc, #12]	; (800516c <puts+0x10>)
 8005160:	0001      	movs	r1, r0
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	f7ff ff9a 	bl	800509c <_puts_r>
 8005168:	bd10      	pop	{r4, pc}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	20000004 	.word	0x20000004

08005170 <_sbrk_r>:
 8005170:	2300      	movs	r3, #0
 8005172:	b570      	push	{r4, r5, r6, lr}
 8005174:	4c06      	ldr	r4, [pc, #24]	; (8005190 <_sbrk_r+0x20>)
 8005176:	0005      	movs	r5, r0
 8005178:	0008      	movs	r0, r1
 800517a:	6023      	str	r3, [r4, #0]
 800517c:	f7ff fc46 	bl	8004a0c <_sbrk>
 8005180:	1c43      	adds	r3, r0, #1
 8005182:	d103      	bne.n	800518c <_sbrk_r+0x1c>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d000      	beq.n	800518c <_sbrk_r+0x1c>
 800518a:	602b      	str	r3, [r5, #0]
 800518c:	bd70      	pop	{r4, r5, r6, pc}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	200001f4 	.word	0x200001f4

08005194 <__sread>:
 8005194:	b570      	push	{r4, r5, r6, lr}
 8005196:	000c      	movs	r4, r1
 8005198:	250e      	movs	r5, #14
 800519a:	5f49      	ldrsh	r1, [r1, r5]
 800519c:	f000 fc6e 	bl	8005a7c <_read_r>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	db03      	blt.n	80051ac <__sread+0x18>
 80051a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051a6:	181b      	adds	r3, r3, r0
 80051a8:	6563      	str	r3, [r4, #84]	; 0x54
 80051aa:	bd70      	pop	{r4, r5, r6, pc}
 80051ac:	89a3      	ldrh	r3, [r4, #12]
 80051ae:	4a02      	ldr	r2, [pc, #8]	; (80051b8 <__sread+0x24>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	81a3      	strh	r3, [r4, #12]
 80051b4:	e7f9      	b.n	80051aa <__sread+0x16>
 80051b6:	46c0      	nop			; (mov r8, r8)
 80051b8:	ffffefff 	.word	0xffffefff

080051bc <__swrite>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	001f      	movs	r7, r3
 80051c0:	898b      	ldrh	r3, [r1, #12]
 80051c2:	0005      	movs	r5, r0
 80051c4:	000c      	movs	r4, r1
 80051c6:	0016      	movs	r6, r2
 80051c8:	05db      	lsls	r3, r3, #23
 80051ca:	d505      	bpl.n	80051d8 <__swrite+0x1c>
 80051cc:	230e      	movs	r3, #14
 80051ce:	5ec9      	ldrsh	r1, [r1, r3]
 80051d0:	2200      	movs	r2, #0
 80051d2:	2302      	movs	r3, #2
 80051d4:	f000 f91c 	bl	8005410 <_lseek_r>
 80051d8:	89a3      	ldrh	r3, [r4, #12]
 80051da:	4a05      	ldr	r2, [pc, #20]	; (80051f0 <__swrite+0x34>)
 80051dc:	0028      	movs	r0, r5
 80051de:	4013      	ands	r3, r2
 80051e0:	81a3      	strh	r3, [r4, #12]
 80051e2:	0032      	movs	r2, r6
 80051e4:	230e      	movs	r3, #14
 80051e6:	5ee1      	ldrsh	r1, [r4, r3]
 80051e8:	003b      	movs	r3, r7
 80051ea:	f000 f875 	bl	80052d8 <_write_r>
 80051ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051f0:	ffffefff 	.word	0xffffefff

080051f4 <__sseek>:
 80051f4:	b570      	push	{r4, r5, r6, lr}
 80051f6:	000c      	movs	r4, r1
 80051f8:	250e      	movs	r5, #14
 80051fa:	5f49      	ldrsh	r1, [r1, r5]
 80051fc:	f000 f908 	bl	8005410 <_lseek_r>
 8005200:	89a3      	ldrh	r3, [r4, #12]
 8005202:	1c42      	adds	r2, r0, #1
 8005204:	d103      	bne.n	800520e <__sseek+0x1a>
 8005206:	4a05      	ldr	r2, [pc, #20]	; (800521c <__sseek+0x28>)
 8005208:	4013      	ands	r3, r2
 800520a:	81a3      	strh	r3, [r4, #12]
 800520c:	bd70      	pop	{r4, r5, r6, pc}
 800520e:	2280      	movs	r2, #128	; 0x80
 8005210:	0152      	lsls	r2, r2, #5
 8005212:	4313      	orrs	r3, r2
 8005214:	81a3      	strh	r3, [r4, #12]
 8005216:	6560      	str	r0, [r4, #84]	; 0x54
 8005218:	e7f8      	b.n	800520c <__sseek+0x18>
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	ffffefff 	.word	0xffffefff

08005220 <__sclose>:
 8005220:	b510      	push	{r4, lr}
 8005222:	230e      	movs	r3, #14
 8005224:	5ec9      	ldrsh	r1, [r1, r3]
 8005226:	f000 f8e1 	bl	80053ec <_close_r>
 800522a:	bd10      	pop	{r4, pc}

0800522c <__swbuf_r>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	0005      	movs	r5, r0
 8005230:	000e      	movs	r6, r1
 8005232:	0014      	movs	r4, r2
 8005234:	2800      	cmp	r0, #0
 8005236:	d004      	beq.n	8005242 <__swbuf_r+0x16>
 8005238:	6983      	ldr	r3, [r0, #24]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <__swbuf_r+0x16>
 800523e:	f7ff fdab 	bl	8004d98 <__sinit>
 8005242:	4b22      	ldr	r3, [pc, #136]	; (80052cc <__swbuf_r+0xa0>)
 8005244:	429c      	cmp	r4, r3
 8005246:	d12d      	bne.n	80052a4 <__swbuf_r+0x78>
 8005248:	686c      	ldr	r4, [r5, #4]
 800524a:	69a3      	ldr	r3, [r4, #24]
 800524c:	60a3      	str	r3, [r4, #8]
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	071b      	lsls	r3, r3, #28
 8005252:	d531      	bpl.n	80052b8 <__swbuf_r+0x8c>
 8005254:	6923      	ldr	r3, [r4, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d02e      	beq.n	80052b8 <__swbuf_r+0x8c>
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	6922      	ldr	r2, [r4, #16]
 800525e:	b2f7      	uxtb	r7, r6
 8005260:	1a98      	subs	r0, r3, r2
 8005262:	6963      	ldr	r3, [r4, #20]
 8005264:	b2f6      	uxtb	r6, r6
 8005266:	4283      	cmp	r3, r0
 8005268:	dc05      	bgt.n	8005276 <__swbuf_r+0x4a>
 800526a:	0021      	movs	r1, r4
 800526c:	0028      	movs	r0, r5
 800526e:	f7ff fd11 	bl	8004c94 <_fflush_r>
 8005272:	2800      	cmp	r0, #0
 8005274:	d126      	bne.n	80052c4 <__swbuf_r+0x98>
 8005276:	68a3      	ldr	r3, [r4, #8]
 8005278:	3001      	adds	r0, #1
 800527a:	3b01      	subs	r3, #1
 800527c:	60a3      	str	r3, [r4, #8]
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	6022      	str	r2, [r4, #0]
 8005284:	701f      	strb	r7, [r3, #0]
 8005286:	6963      	ldr	r3, [r4, #20]
 8005288:	4283      	cmp	r3, r0
 800528a:	d004      	beq.n	8005296 <__swbuf_r+0x6a>
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	07db      	lsls	r3, r3, #31
 8005290:	d51a      	bpl.n	80052c8 <__swbuf_r+0x9c>
 8005292:	2e0a      	cmp	r6, #10
 8005294:	d118      	bne.n	80052c8 <__swbuf_r+0x9c>
 8005296:	0021      	movs	r1, r4
 8005298:	0028      	movs	r0, r5
 800529a:	f7ff fcfb 	bl	8004c94 <_fflush_r>
 800529e:	2800      	cmp	r0, #0
 80052a0:	d012      	beq.n	80052c8 <__swbuf_r+0x9c>
 80052a2:	e00f      	b.n	80052c4 <__swbuf_r+0x98>
 80052a4:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <__swbuf_r+0xa4>)
 80052a6:	429c      	cmp	r4, r3
 80052a8:	d101      	bne.n	80052ae <__swbuf_r+0x82>
 80052aa:	68ac      	ldr	r4, [r5, #8]
 80052ac:	e7cd      	b.n	800524a <__swbuf_r+0x1e>
 80052ae:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <__swbuf_r+0xa8>)
 80052b0:	429c      	cmp	r4, r3
 80052b2:	d1ca      	bne.n	800524a <__swbuf_r+0x1e>
 80052b4:	68ec      	ldr	r4, [r5, #12]
 80052b6:	e7c8      	b.n	800524a <__swbuf_r+0x1e>
 80052b8:	0021      	movs	r1, r4
 80052ba:	0028      	movs	r0, r5
 80052bc:	f000 f820 	bl	8005300 <__swsetup_r>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d0ca      	beq.n	800525a <__swbuf_r+0x2e>
 80052c4:	2601      	movs	r6, #1
 80052c6:	4276      	negs	r6, r6
 80052c8:	0030      	movs	r0, r6
 80052ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052cc:	08005c90 	.word	0x08005c90
 80052d0:	08005cb0 	.word	0x08005cb0
 80052d4:	08005c70 	.word	0x08005c70

080052d8 <_write_r>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	0005      	movs	r5, r0
 80052dc:	0008      	movs	r0, r1
 80052de:	0011      	movs	r1, r2
 80052e0:	2200      	movs	r2, #0
 80052e2:	4c06      	ldr	r4, [pc, #24]	; (80052fc <_write_r+0x24>)
 80052e4:	6022      	str	r2, [r4, #0]
 80052e6:	001a      	movs	r2, r3
 80052e8:	f7ff fb47 	bl	800497a <_write>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d103      	bne.n	80052f8 <_write_r+0x20>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d000      	beq.n	80052f8 <_write_r+0x20>
 80052f6:	602b      	str	r3, [r5, #0]
 80052f8:	bd70      	pop	{r4, r5, r6, pc}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	200001f4 	.word	0x200001f4

08005300 <__swsetup_r>:
 8005300:	4b36      	ldr	r3, [pc, #216]	; (80053dc <__swsetup_r+0xdc>)
 8005302:	b570      	push	{r4, r5, r6, lr}
 8005304:	681d      	ldr	r5, [r3, #0]
 8005306:	0006      	movs	r6, r0
 8005308:	000c      	movs	r4, r1
 800530a:	2d00      	cmp	r5, #0
 800530c:	d005      	beq.n	800531a <__swsetup_r+0x1a>
 800530e:	69ab      	ldr	r3, [r5, #24]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d102      	bne.n	800531a <__swsetup_r+0x1a>
 8005314:	0028      	movs	r0, r5
 8005316:	f7ff fd3f 	bl	8004d98 <__sinit>
 800531a:	4b31      	ldr	r3, [pc, #196]	; (80053e0 <__swsetup_r+0xe0>)
 800531c:	429c      	cmp	r4, r3
 800531e:	d10f      	bne.n	8005340 <__swsetup_r+0x40>
 8005320:	686c      	ldr	r4, [r5, #4]
 8005322:	230c      	movs	r3, #12
 8005324:	5ee2      	ldrsh	r2, [r4, r3]
 8005326:	b293      	uxth	r3, r2
 8005328:	0719      	lsls	r1, r3, #28
 800532a:	d42d      	bmi.n	8005388 <__swsetup_r+0x88>
 800532c:	06d9      	lsls	r1, r3, #27
 800532e:	d411      	bmi.n	8005354 <__swsetup_r+0x54>
 8005330:	2309      	movs	r3, #9
 8005332:	2001      	movs	r0, #1
 8005334:	6033      	str	r3, [r6, #0]
 8005336:	3337      	adds	r3, #55	; 0x37
 8005338:	4313      	orrs	r3, r2
 800533a:	81a3      	strh	r3, [r4, #12]
 800533c:	4240      	negs	r0, r0
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	4b28      	ldr	r3, [pc, #160]	; (80053e4 <__swsetup_r+0xe4>)
 8005342:	429c      	cmp	r4, r3
 8005344:	d101      	bne.n	800534a <__swsetup_r+0x4a>
 8005346:	68ac      	ldr	r4, [r5, #8]
 8005348:	e7eb      	b.n	8005322 <__swsetup_r+0x22>
 800534a:	4b27      	ldr	r3, [pc, #156]	; (80053e8 <__swsetup_r+0xe8>)
 800534c:	429c      	cmp	r4, r3
 800534e:	d1e8      	bne.n	8005322 <__swsetup_r+0x22>
 8005350:	68ec      	ldr	r4, [r5, #12]
 8005352:	e7e6      	b.n	8005322 <__swsetup_r+0x22>
 8005354:	075b      	lsls	r3, r3, #29
 8005356:	d513      	bpl.n	8005380 <__swsetup_r+0x80>
 8005358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800535a:	2900      	cmp	r1, #0
 800535c:	d008      	beq.n	8005370 <__swsetup_r+0x70>
 800535e:	0023      	movs	r3, r4
 8005360:	3344      	adds	r3, #68	; 0x44
 8005362:	4299      	cmp	r1, r3
 8005364:	d002      	beq.n	800536c <__swsetup_r+0x6c>
 8005366:	0030      	movs	r0, r6
 8005368:	f7ff fdd6 	bl	8004f18 <_free_r>
 800536c:	2300      	movs	r3, #0
 800536e:	6363      	str	r3, [r4, #52]	; 0x34
 8005370:	2224      	movs	r2, #36	; 0x24
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	4393      	bics	r3, r2
 8005376:	81a3      	strh	r3, [r4, #12]
 8005378:	2300      	movs	r3, #0
 800537a:	6063      	str	r3, [r4, #4]
 800537c:	6923      	ldr	r3, [r4, #16]
 800537e:	6023      	str	r3, [r4, #0]
 8005380:	2308      	movs	r3, #8
 8005382:	89a2      	ldrh	r2, [r4, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	6923      	ldr	r3, [r4, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10b      	bne.n	80053a6 <__swsetup_r+0xa6>
 800538e:	21a0      	movs	r1, #160	; 0xa0
 8005390:	2280      	movs	r2, #128	; 0x80
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	0089      	lsls	r1, r1, #2
 8005396:	0092      	lsls	r2, r2, #2
 8005398:	400b      	ands	r3, r1
 800539a:	4293      	cmp	r3, r2
 800539c:	d003      	beq.n	80053a6 <__swsetup_r+0xa6>
 800539e:	0021      	movs	r1, r4
 80053a0:	0030      	movs	r0, r6
 80053a2:	f000 f871 	bl	8005488 <__smakebuf_r>
 80053a6:	2301      	movs	r3, #1
 80053a8:	89a2      	ldrh	r2, [r4, #12]
 80053aa:	4013      	ands	r3, r2
 80053ac:	d011      	beq.n	80053d2 <__swsetup_r+0xd2>
 80053ae:	2300      	movs	r3, #0
 80053b0:	60a3      	str	r3, [r4, #8]
 80053b2:	6963      	ldr	r3, [r4, #20]
 80053b4:	425b      	negs	r3, r3
 80053b6:	61a3      	str	r3, [r4, #24]
 80053b8:	2000      	movs	r0, #0
 80053ba:	6923      	ldr	r3, [r4, #16]
 80053bc:	4283      	cmp	r3, r0
 80053be:	d1be      	bne.n	800533e <__swsetup_r+0x3e>
 80053c0:	230c      	movs	r3, #12
 80053c2:	5ee2      	ldrsh	r2, [r4, r3]
 80053c4:	0613      	lsls	r3, r2, #24
 80053c6:	d5ba      	bpl.n	800533e <__swsetup_r+0x3e>
 80053c8:	2340      	movs	r3, #64	; 0x40
 80053ca:	4313      	orrs	r3, r2
 80053cc:	81a3      	strh	r3, [r4, #12]
 80053ce:	3801      	subs	r0, #1
 80053d0:	e7b5      	b.n	800533e <__swsetup_r+0x3e>
 80053d2:	0792      	lsls	r2, r2, #30
 80053d4:	d400      	bmi.n	80053d8 <__swsetup_r+0xd8>
 80053d6:	6963      	ldr	r3, [r4, #20]
 80053d8:	60a3      	str	r3, [r4, #8]
 80053da:	e7ed      	b.n	80053b8 <__swsetup_r+0xb8>
 80053dc:	20000004 	.word	0x20000004
 80053e0:	08005c90 	.word	0x08005c90
 80053e4:	08005cb0 	.word	0x08005cb0
 80053e8:	08005c70 	.word	0x08005c70

080053ec <_close_r>:
 80053ec:	2300      	movs	r3, #0
 80053ee:	b570      	push	{r4, r5, r6, lr}
 80053f0:	4c06      	ldr	r4, [pc, #24]	; (800540c <_close_r+0x20>)
 80053f2:	0005      	movs	r5, r0
 80053f4:	0008      	movs	r0, r1
 80053f6:	6023      	str	r3, [r4, #0]
 80053f8:	f7ff fadb 	bl	80049b2 <_close>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d103      	bne.n	8005408 <_close_r+0x1c>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d000      	beq.n	8005408 <_close_r+0x1c>
 8005406:	602b      	str	r3, [r5, #0]
 8005408:	bd70      	pop	{r4, r5, r6, pc}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	200001f4 	.word	0x200001f4

08005410 <_lseek_r>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	0005      	movs	r5, r0
 8005414:	0008      	movs	r0, r1
 8005416:	0011      	movs	r1, r2
 8005418:	2200      	movs	r2, #0
 800541a:	4c06      	ldr	r4, [pc, #24]	; (8005434 <_lseek_r+0x24>)
 800541c:	6022      	str	r2, [r4, #0]
 800541e:	001a      	movs	r2, r3
 8005420:	f7ff fae8 	bl	80049f4 <_lseek>
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	d103      	bne.n	8005430 <_lseek_r+0x20>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d000      	beq.n	8005430 <_lseek_r+0x20>
 800542e:	602b      	str	r3, [r5, #0]
 8005430:	bd70      	pop	{r4, r5, r6, pc}
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	200001f4 	.word	0x200001f4

08005438 <__swhatbuf_r>:
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	000e      	movs	r6, r1
 800543c:	001d      	movs	r5, r3
 800543e:	230e      	movs	r3, #14
 8005440:	5ec9      	ldrsh	r1, [r1, r3]
 8005442:	b096      	sub	sp, #88	; 0x58
 8005444:	0014      	movs	r4, r2
 8005446:	2900      	cmp	r1, #0
 8005448:	da07      	bge.n	800545a <__swhatbuf_r+0x22>
 800544a:	2300      	movs	r3, #0
 800544c:	602b      	str	r3, [r5, #0]
 800544e:	89b3      	ldrh	r3, [r6, #12]
 8005450:	061b      	lsls	r3, r3, #24
 8005452:	d411      	bmi.n	8005478 <__swhatbuf_r+0x40>
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	e00f      	b.n	800547a <__swhatbuf_r+0x42>
 800545a:	466a      	mov	r2, sp
 800545c:	f000 fb22 	bl	8005aa4 <_fstat_r>
 8005460:	2800      	cmp	r0, #0
 8005462:	dbf2      	blt.n	800544a <__swhatbuf_r+0x12>
 8005464:	22f0      	movs	r2, #240	; 0xf0
 8005466:	9b01      	ldr	r3, [sp, #4]
 8005468:	0212      	lsls	r2, r2, #8
 800546a:	4013      	ands	r3, r2
 800546c:	4a05      	ldr	r2, [pc, #20]	; (8005484 <__swhatbuf_r+0x4c>)
 800546e:	189b      	adds	r3, r3, r2
 8005470:	425a      	negs	r2, r3
 8005472:	4153      	adcs	r3, r2
 8005474:	602b      	str	r3, [r5, #0]
 8005476:	e7ed      	b.n	8005454 <__swhatbuf_r+0x1c>
 8005478:	2340      	movs	r3, #64	; 0x40
 800547a:	2000      	movs	r0, #0
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	b016      	add	sp, #88	; 0x58
 8005480:	bd70      	pop	{r4, r5, r6, pc}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	ffffe000 	.word	0xffffe000

08005488 <__smakebuf_r>:
 8005488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800548a:	2602      	movs	r6, #2
 800548c:	898b      	ldrh	r3, [r1, #12]
 800548e:	0005      	movs	r5, r0
 8005490:	000c      	movs	r4, r1
 8005492:	4233      	tst	r3, r6
 8005494:	d006      	beq.n	80054a4 <__smakebuf_r+0x1c>
 8005496:	0023      	movs	r3, r4
 8005498:	3347      	adds	r3, #71	; 0x47
 800549a:	6023      	str	r3, [r4, #0]
 800549c:	6123      	str	r3, [r4, #16]
 800549e:	2301      	movs	r3, #1
 80054a0:	6163      	str	r3, [r4, #20]
 80054a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80054a4:	ab01      	add	r3, sp, #4
 80054a6:	466a      	mov	r2, sp
 80054a8:	f7ff ffc6 	bl	8005438 <__swhatbuf_r>
 80054ac:	9900      	ldr	r1, [sp, #0]
 80054ae:	0007      	movs	r7, r0
 80054b0:	0028      	movs	r0, r5
 80054b2:	f7ff fd7b 	bl	8004fac <_malloc_r>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d108      	bne.n	80054cc <__smakebuf_r+0x44>
 80054ba:	220c      	movs	r2, #12
 80054bc:	5ea3      	ldrsh	r3, [r4, r2]
 80054be:	059a      	lsls	r2, r3, #22
 80054c0:	d4ef      	bmi.n	80054a2 <__smakebuf_r+0x1a>
 80054c2:	2203      	movs	r2, #3
 80054c4:	4393      	bics	r3, r2
 80054c6:	431e      	orrs	r6, r3
 80054c8:	81a6      	strh	r6, [r4, #12]
 80054ca:	e7e4      	b.n	8005496 <__smakebuf_r+0xe>
 80054cc:	4b0f      	ldr	r3, [pc, #60]	; (800550c <__smakebuf_r+0x84>)
 80054ce:	62ab      	str	r3, [r5, #40]	; 0x28
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	89a2      	ldrh	r2, [r4, #12]
 80054d4:	6020      	str	r0, [r4, #0]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	81a3      	strh	r3, [r4, #12]
 80054da:	9b00      	ldr	r3, [sp, #0]
 80054dc:	6120      	str	r0, [r4, #16]
 80054de:	6163      	str	r3, [r4, #20]
 80054e0:	9b01      	ldr	r3, [sp, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00d      	beq.n	8005502 <__smakebuf_r+0x7a>
 80054e6:	230e      	movs	r3, #14
 80054e8:	5ee1      	ldrsh	r1, [r4, r3]
 80054ea:	0028      	movs	r0, r5
 80054ec:	f000 faec 	bl	8005ac8 <_isatty_r>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d006      	beq.n	8005502 <__smakebuf_r+0x7a>
 80054f4:	2203      	movs	r2, #3
 80054f6:	89a3      	ldrh	r3, [r4, #12]
 80054f8:	4393      	bics	r3, r2
 80054fa:	001a      	movs	r2, r3
 80054fc:	2301      	movs	r3, #1
 80054fe:	4313      	orrs	r3, r2
 8005500:	81a3      	strh	r3, [r4, #12]
 8005502:	89a0      	ldrh	r0, [r4, #12]
 8005504:	4338      	orrs	r0, r7
 8005506:	81a0      	strh	r0, [r4, #12]
 8005508:	e7cb      	b.n	80054a2 <__smakebuf_r+0x1a>
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	08004d5d 	.word	0x08004d5d

08005510 <__malloc_lock>:
 8005510:	4770      	bx	lr

08005512 <__malloc_unlock>:
 8005512:	4770      	bx	lr

08005514 <__sfputc_r>:
 8005514:	6893      	ldr	r3, [r2, #8]
 8005516:	b510      	push	{r4, lr}
 8005518:	3b01      	subs	r3, #1
 800551a:	6093      	str	r3, [r2, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	da04      	bge.n	800552a <__sfputc_r+0x16>
 8005520:	6994      	ldr	r4, [r2, #24]
 8005522:	42a3      	cmp	r3, r4
 8005524:	db07      	blt.n	8005536 <__sfputc_r+0x22>
 8005526:	290a      	cmp	r1, #10
 8005528:	d005      	beq.n	8005536 <__sfputc_r+0x22>
 800552a:	6813      	ldr	r3, [r2, #0]
 800552c:	1c58      	adds	r0, r3, #1
 800552e:	6010      	str	r0, [r2, #0]
 8005530:	7019      	strb	r1, [r3, #0]
 8005532:	0008      	movs	r0, r1
 8005534:	bd10      	pop	{r4, pc}
 8005536:	f7ff fe79 	bl	800522c <__swbuf_r>
 800553a:	0001      	movs	r1, r0
 800553c:	e7f9      	b.n	8005532 <__sfputc_r+0x1e>

0800553e <__sfputs_r>:
 800553e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005540:	0006      	movs	r6, r0
 8005542:	000f      	movs	r7, r1
 8005544:	0014      	movs	r4, r2
 8005546:	18d5      	adds	r5, r2, r3
 8005548:	42ac      	cmp	r4, r5
 800554a:	d101      	bne.n	8005550 <__sfputs_r+0x12>
 800554c:	2000      	movs	r0, #0
 800554e:	e007      	b.n	8005560 <__sfputs_r+0x22>
 8005550:	7821      	ldrb	r1, [r4, #0]
 8005552:	003a      	movs	r2, r7
 8005554:	0030      	movs	r0, r6
 8005556:	f7ff ffdd 	bl	8005514 <__sfputc_r>
 800555a:	3401      	adds	r4, #1
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d1f3      	bne.n	8005548 <__sfputs_r+0xa>
 8005560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005564 <_vfiprintf_r>:
 8005564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005566:	b0a1      	sub	sp, #132	; 0x84
 8005568:	9003      	str	r0, [sp, #12]
 800556a:	000f      	movs	r7, r1
 800556c:	0016      	movs	r6, r2
 800556e:	001d      	movs	r5, r3
 8005570:	2800      	cmp	r0, #0
 8005572:	d005      	beq.n	8005580 <_vfiprintf_r+0x1c>
 8005574:	6983      	ldr	r3, [r0, #24]
 8005576:	9305      	str	r3, [sp, #20]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <_vfiprintf_r+0x1c>
 800557c:	f7ff fc0c 	bl	8004d98 <__sinit>
 8005580:	4b7b      	ldr	r3, [pc, #492]	; (8005770 <_vfiprintf_r+0x20c>)
 8005582:	429f      	cmp	r7, r3
 8005584:	d15c      	bne.n	8005640 <_vfiprintf_r+0xdc>
 8005586:	9b03      	ldr	r3, [sp, #12]
 8005588:	685f      	ldr	r7, [r3, #4]
 800558a:	89bb      	ldrh	r3, [r7, #12]
 800558c:	071b      	lsls	r3, r3, #28
 800558e:	d563      	bpl.n	8005658 <_vfiprintf_r+0xf4>
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d060      	beq.n	8005658 <_vfiprintf_r+0xf4>
 8005596:	2300      	movs	r3, #0
 8005598:	ac08      	add	r4, sp, #32
 800559a:	6163      	str	r3, [r4, #20]
 800559c:	3320      	adds	r3, #32
 800559e:	7663      	strb	r3, [r4, #25]
 80055a0:	3310      	adds	r3, #16
 80055a2:	76a3      	strb	r3, [r4, #26]
 80055a4:	9507      	str	r5, [sp, #28]
 80055a6:	0035      	movs	r5, r6
 80055a8:	782b      	ldrb	r3, [r5, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <_vfiprintf_r+0x4e>
 80055ae:	2b25      	cmp	r3, #37	; 0x25
 80055b0:	d15c      	bne.n	800566c <_vfiprintf_r+0x108>
 80055b2:	1bab      	subs	r3, r5, r6
 80055b4:	9305      	str	r3, [sp, #20]
 80055b6:	d00c      	beq.n	80055d2 <_vfiprintf_r+0x6e>
 80055b8:	0032      	movs	r2, r6
 80055ba:	0039      	movs	r1, r7
 80055bc:	9803      	ldr	r0, [sp, #12]
 80055be:	f7ff ffbe 	bl	800553e <__sfputs_r>
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	d100      	bne.n	80055c8 <_vfiprintf_r+0x64>
 80055c6:	e0c4      	b.n	8005752 <_vfiprintf_r+0x1ee>
 80055c8:	6962      	ldr	r2, [r4, #20]
 80055ca:	9b05      	ldr	r3, [sp, #20]
 80055cc:	4694      	mov	ip, r2
 80055ce:	4463      	add	r3, ip
 80055d0:	6163      	str	r3, [r4, #20]
 80055d2:	782b      	ldrb	r3, [r5, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d100      	bne.n	80055da <_vfiprintf_r+0x76>
 80055d8:	e0bb      	b.n	8005752 <_vfiprintf_r+0x1ee>
 80055da:	2201      	movs	r2, #1
 80055dc:	2300      	movs	r3, #0
 80055de:	4252      	negs	r2, r2
 80055e0:	6062      	str	r2, [r4, #4]
 80055e2:	a904      	add	r1, sp, #16
 80055e4:	3254      	adds	r2, #84	; 0x54
 80055e6:	1852      	adds	r2, r2, r1
 80055e8:	1c6e      	adds	r6, r5, #1
 80055ea:	6023      	str	r3, [r4, #0]
 80055ec:	60e3      	str	r3, [r4, #12]
 80055ee:	60a3      	str	r3, [r4, #8]
 80055f0:	7013      	strb	r3, [r2, #0]
 80055f2:	65a3      	str	r3, [r4, #88]	; 0x58
 80055f4:	7831      	ldrb	r1, [r6, #0]
 80055f6:	2205      	movs	r2, #5
 80055f8:	485e      	ldr	r0, [pc, #376]	; (8005774 <_vfiprintf_r+0x210>)
 80055fa:	f000 fa77 	bl	8005aec <memchr>
 80055fe:	1c75      	adds	r5, r6, #1
 8005600:	2800      	cmp	r0, #0
 8005602:	d135      	bne.n	8005670 <_vfiprintf_r+0x10c>
 8005604:	6822      	ldr	r2, [r4, #0]
 8005606:	06d3      	lsls	r3, r2, #27
 8005608:	d504      	bpl.n	8005614 <_vfiprintf_r+0xb0>
 800560a:	2353      	movs	r3, #83	; 0x53
 800560c:	a904      	add	r1, sp, #16
 800560e:	185b      	adds	r3, r3, r1
 8005610:	2120      	movs	r1, #32
 8005612:	7019      	strb	r1, [r3, #0]
 8005614:	0713      	lsls	r3, r2, #28
 8005616:	d504      	bpl.n	8005622 <_vfiprintf_r+0xbe>
 8005618:	2353      	movs	r3, #83	; 0x53
 800561a:	a904      	add	r1, sp, #16
 800561c:	185b      	adds	r3, r3, r1
 800561e:	212b      	movs	r1, #43	; 0x2b
 8005620:	7019      	strb	r1, [r3, #0]
 8005622:	7833      	ldrb	r3, [r6, #0]
 8005624:	2b2a      	cmp	r3, #42	; 0x2a
 8005626:	d02c      	beq.n	8005682 <_vfiprintf_r+0x11e>
 8005628:	0035      	movs	r5, r6
 800562a:	2100      	movs	r1, #0
 800562c:	200a      	movs	r0, #10
 800562e:	68e3      	ldr	r3, [r4, #12]
 8005630:	782a      	ldrb	r2, [r5, #0]
 8005632:	1c6e      	adds	r6, r5, #1
 8005634:	3a30      	subs	r2, #48	; 0x30
 8005636:	2a09      	cmp	r2, #9
 8005638:	d964      	bls.n	8005704 <_vfiprintf_r+0x1a0>
 800563a:	2900      	cmp	r1, #0
 800563c:	d02e      	beq.n	800569c <_vfiprintf_r+0x138>
 800563e:	e026      	b.n	800568e <_vfiprintf_r+0x12a>
 8005640:	4b4d      	ldr	r3, [pc, #308]	; (8005778 <_vfiprintf_r+0x214>)
 8005642:	429f      	cmp	r7, r3
 8005644:	d102      	bne.n	800564c <_vfiprintf_r+0xe8>
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	689f      	ldr	r7, [r3, #8]
 800564a:	e79e      	b.n	800558a <_vfiprintf_r+0x26>
 800564c:	4b4b      	ldr	r3, [pc, #300]	; (800577c <_vfiprintf_r+0x218>)
 800564e:	429f      	cmp	r7, r3
 8005650:	d19b      	bne.n	800558a <_vfiprintf_r+0x26>
 8005652:	9b03      	ldr	r3, [sp, #12]
 8005654:	68df      	ldr	r7, [r3, #12]
 8005656:	e798      	b.n	800558a <_vfiprintf_r+0x26>
 8005658:	0039      	movs	r1, r7
 800565a:	9803      	ldr	r0, [sp, #12]
 800565c:	f7ff fe50 	bl	8005300 <__swsetup_r>
 8005660:	2800      	cmp	r0, #0
 8005662:	d098      	beq.n	8005596 <_vfiprintf_r+0x32>
 8005664:	2001      	movs	r0, #1
 8005666:	4240      	negs	r0, r0
 8005668:	b021      	add	sp, #132	; 0x84
 800566a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800566c:	3501      	adds	r5, #1
 800566e:	e79b      	b.n	80055a8 <_vfiprintf_r+0x44>
 8005670:	4b40      	ldr	r3, [pc, #256]	; (8005774 <_vfiprintf_r+0x210>)
 8005672:	6822      	ldr	r2, [r4, #0]
 8005674:	1ac0      	subs	r0, r0, r3
 8005676:	2301      	movs	r3, #1
 8005678:	4083      	lsls	r3, r0
 800567a:	4313      	orrs	r3, r2
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	002e      	movs	r6, r5
 8005680:	e7b8      	b.n	80055f4 <_vfiprintf_r+0x90>
 8005682:	9b07      	ldr	r3, [sp, #28]
 8005684:	1d19      	adds	r1, r3, #4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	9107      	str	r1, [sp, #28]
 800568a:	2b00      	cmp	r3, #0
 800568c:	db01      	blt.n	8005692 <_vfiprintf_r+0x12e>
 800568e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005690:	e004      	b.n	800569c <_vfiprintf_r+0x138>
 8005692:	425b      	negs	r3, r3
 8005694:	60e3      	str	r3, [r4, #12]
 8005696:	2302      	movs	r3, #2
 8005698:	4313      	orrs	r3, r2
 800569a:	6023      	str	r3, [r4, #0]
 800569c:	782b      	ldrb	r3, [r5, #0]
 800569e:	2b2e      	cmp	r3, #46	; 0x2e
 80056a0:	d10a      	bne.n	80056b8 <_vfiprintf_r+0x154>
 80056a2:	786b      	ldrb	r3, [r5, #1]
 80056a4:	2b2a      	cmp	r3, #42	; 0x2a
 80056a6:	d135      	bne.n	8005714 <_vfiprintf_r+0x1b0>
 80056a8:	9b07      	ldr	r3, [sp, #28]
 80056aa:	3502      	adds	r5, #2
 80056ac:	1d1a      	adds	r2, r3, #4
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	9207      	str	r2, [sp, #28]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	db2b      	blt.n	800570e <_vfiprintf_r+0x1aa>
 80056b6:	9309      	str	r3, [sp, #36]	; 0x24
 80056b8:	4e31      	ldr	r6, [pc, #196]	; (8005780 <_vfiprintf_r+0x21c>)
 80056ba:	7829      	ldrb	r1, [r5, #0]
 80056bc:	2203      	movs	r2, #3
 80056be:	0030      	movs	r0, r6
 80056c0:	f000 fa14 	bl	8005aec <memchr>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d006      	beq.n	80056d6 <_vfiprintf_r+0x172>
 80056c8:	2340      	movs	r3, #64	; 0x40
 80056ca:	1b80      	subs	r0, r0, r6
 80056cc:	4083      	lsls	r3, r0
 80056ce:	6822      	ldr	r2, [r4, #0]
 80056d0:	3501      	adds	r5, #1
 80056d2:	4313      	orrs	r3, r2
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	7829      	ldrb	r1, [r5, #0]
 80056d8:	2206      	movs	r2, #6
 80056da:	482a      	ldr	r0, [pc, #168]	; (8005784 <_vfiprintf_r+0x220>)
 80056dc:	1c6e      	adds	r6, r5, #1
 80056de:	7621      	strb	r1, [r4, #24]
 80056e0:	f000 fa04 	bl	8005aec <memchr>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d03a      	beq.n	800575e <_vfiprintf_r+0x1fa>
 80056e8:	4b27      	ldr	r3, [pc, #156]	; (8005788 <_vfiprintf_r+0x224>)
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d125      	bne.n	800573a <_vfiprintf_r+0x1d6>
 80056ee:	2207      	movs	r2, #7
 80056f0:	9b07      	ldr	r3, [sp, #28]
 80056f2:	3307      	adds	r3, #7
 80056f4:	4393      	bics	r3, r2
 80056f6:	3308      	adds	r3, #8
 80056f8:	9307      	str	r3, [sp, #28]
 80056fa:	6963      	ldr	r3, [r4, #20]
 80056fc:	9a04      	ldr	r2, [sp, #16]
 80056fe:	189b      	adds	r3, r3, r2
 8005700:	6163      	str	r3, [r4, #20]
 8005702:	e750      	b.n	80055a6 <_vfiprintf_r+0x42>
 8005704:	4343      	muls	r3, r0
 8005706:	2101      	movs	r1, #1
 8005708:	189b      	adds	r3, r3, r2
 800570a:	0035      	movs	r5, r6
 800570c:	e790      	b.n	8005630 <_vfiprintf_r+0xcc>
 800570e:	2301      	movs	r3, #1
 8005710:	425b      	negs	r3, r3
 8005712:	e7d0      	b.n	80056b6 <_vfiprintf_r+0x152>
 8005714:	2300      	movs	r3, #0
 8005716:	200a      	movs	r0, #10
 8005718:	001a      	movs	r2, r3
 800571a:	3501      	adds	r5, #1
 800571c:	6063      	str	r3, [r4, #4]
 800571e:	7829      	ldrb	r1, [r5, #0]
 8005720:	1c6e      	adds	r6, r5, #1
 8005722:	3930      	subs	r1, #48	; 0x30
 8005724:	2909      	cmp	r1, #9
 8005726:	d903      	bls.n	8005730 <_vfiprintf_r+0x1cc>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0c5      	beq.n	80056b8 <_vfiprintf_r+0x154>
 800572c:	9209      	str	r2, [sp, #36]	; 0x24
 800572e:	e7c3      	b.n	80056b8 <_vfiprintf_r+0x154>
 8005730:	4342      	muls	r2, r0
 8005732:	2301      	movs	r3, #1
 8005734:	1852      	adds	r2, r2, r1
 8005736:	0035      	movs	r5, r6
 8005738:	e7f1      	b.n	800571e <_vfiprintf_r+0x1ba>
 800573a:	ab07      	add	r3, sp, #28
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	003a      	movs	r2, r7
 8005740:	4b12      	ldr	r3, [pc, #72]	; (800578c <_vfiprintf_r+0x228>)
 8005742:	0021      	movs	r1, r4
 8005744:	9803      	ldr	r0, [sp, #12]
 8005746:	e000      	b.n	800574a <_vfiprintf_r+0x1e6>
 8005748:	bf00      	nop
 800574a:	9004      	str	r0, [sp, #16]
 800574c:	9b04      	ldr	r3, [sp, #16]
 800574e:	3301      	adds	r3, #1
 8005750:	d1d3      	bne.n	80056fa <_vfiprintf_r+0x196>
 8005752:	89bb      	ldrh	r3, [r7, #12]
 8005754:	065b      	lsls	r3, r3, #25
 8005756:	d500      	bpl.n	800575a <_vfiprintf_r+0x1f6>
 8005758:	e784      	b.n	8005664 <_vfiprintf_r+0x100>
 800575a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800575c:	e784      	b.n	8005668 <_vfiprintf_r+0x104>
 800575e:	ab07      	add	r3, sp, #28
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	003a      	movs	r2, r7
 8005764:	4b09      	ldr	r3, [pc, #36]	; (800578c <_vfiprintf_r+0x228>)
 8005766:	0021      	movs	r1, r4
 8005768:	9803      	ldr	r0, [sp, #12]
 800576a:	f000 f87f 	bl	800586c <_printf_i>
 800576e:	e7ec      	b.n	800574a <_vfiprintf_r+0x1e6>
 8005770:	08005c90 	.word	0x08005c90
 8005774:	08005cd4 	.word	0x08005cd4
 8005778:	08005cb0 	.word	0x08005cb0
 800577c:	08005c70 	.word	0x08005c70
 8005780:	08005cda 	.word	0x08005cda
 8005784:	08005cde 	.word	0x08005cde
 8005788:	00000000 	.word	0x00000000
 800578c:	0800553f 	.word	0x0800553f

08005790 <_printf_common>:
 8005790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005792:	0015      	movs	r5, r2
 8005794:	9301      	str	r3, [sp, #4]
 8005796:	688a      	ldr	r2, [r1, #8]
 8005798:	690b      	ldr	r3, [r1, #16]
 800579a:	9000      	str	r0, [sp, #0]
 800579c:	000c      	movs	r4, r1
 800579e:	4293      	cmp	r3, r2
 80057a0:	da00      	bge.n	80057a4 <_printf_common+0x14>
 80057a2:	0013      	movs	r3, r2
 80057a4:	0022      	movs	r2, r4
 80057a6:	602b      	str	r3, [r5, #0]
 80057a8:	3243      	adds	r2, #67	; 0x43
 80057aa:	7812      	ldrb	r2, [r2, #0]
 80057ac:	2a00      	cmp	r2, #0
 80057ae:	d001      	beq.n	80057b4 <_printf_common+0x24>
 80057b0:	3301      	adds	r3, #1
 80057b2:	602b      	str	r3, [r5, #0]
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	069b      	lsls	r3, r3, #26
 80057b8:	d502      	bpl.n	80057c0 <_printf_common+0x30>
 80057ba:	682b      	ldr	r3, [r5, #0]
 80057bc:	3302      	adds	r3, #2
 80057be:	602b      	str	r3, [r5, #0]
 80057c0:	2706      	movs	r7, #6
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	401f      	ands	r7, r3
 80057c6:	d027      	beq.n	8005818 <_printf_common+0x88>
 80057c8:	0023      	movs	r3, r4
 80057ca:	3343      	adds	r3, #67	; 0x43
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	1e5a      	subs	r2, r3, #1
 80057d0:	4193      	sbcs	r3, r2
 80057d2:	6822      	ldr	r2, [r4, #0]
 80057d4:	0692      	lsls	r2, r2, #26
 80057d6:	d430      	bmi.n	800583a <_printf_common+0xaa>
 80057d8:	0022      	movs	r2, r4
 80057da:	9901      	ldr	r1, [sp, #4]
 80057dc:	3243      	adds	r2, #67	; 0x43
 80057de:	9800      	ldr	r0, [sp, #0]
 80057e0:	9e08      	ldr	r6, [sp, #32]
 80057e2:	47b0      	blx	r6
 80057e4:	1c43      	adds	r3, r0, #1
 80057e6:	d025      	beq.n	8005834 <_printf_common+0xa4>
 80057e8:	2306      	movs	r3, #6
 80057ea:	6820      	ldr	r0, [r4, #0]
 80057ec:	682a      	ldr	r2, [r5, #0]
 80057ee:	68e1      	ldr	r1, [r4, #12]
 80057f0:	4003      	ands	r3, r0
 80057f2:	2500      	movs	r5, #0
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d103      	bne.n	8005800 <_printf_common+0x70>
 80057f8:	1a8d      	subs	r5, r1, r2
 80057fa:	43eb      	mvns	r3, r5
 80057fc:	17db      	asrs	r3, r3, #31
 80057fe:	401d      	ands	r5, r3
 8005800:	68a3      	ldr	r3, [r4, #8]
 8005802:	6922      	ldr	r2, [r4, #16]
 8005804:	4293      	cmp	r3, r2
 8005806:	dd01      	ble.n	800580c <_printf_common+0x7c>
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	18ed      	adds	r5, r5, r3
 800580c:	2700      	movs	r7, #0
 800580e:	42bd      	cmp	r5, r7
 8005810:	d120      	bne.n	8005854 <_printf_common+0xc4>
 8005812:	2000      	movs	r0, #0
 8005814:	e010      	b.n	8005838 <_printf_common+0xa8>
 8005816:	3701      	adds	r7, #1
 8005818:	68e3      	ldr	r3, [r4, #12]
 800581a:	682a      	ldr	r2, [r5, #0]
 800581c:	1a9b      	subs	r3, r3, r2
 800581e:	42bb      	cmp	r3, r7
 8005820:	ddd2      	ble.n	80057c8 <_printf_common+0x38>
 8005822:	0022      	movs	r2, r4
 8005824:	2301      	movs	r3, #1
 8005826:	3219      	adds	r2, #25
 8005828:	9901      	ldr	r1, [sp, #4]
 800582a:	9800      	ldr	r0, [sp, #0]
 800582c:	9e08      	ldr	r6, [sp, #32]
 800582e:	47b0      	blx	r6
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	d1f0      	bne.n	8005816 <_printf_common+0x86>
 8005834:	2001      	movs	r0, #1
 8005836:	4240      	negs	r0, r0
 8005838:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800583a:	2030      	movs	r0, #48	; 0x30
 800583c:	18e1      	adds	r1, r4, r3
 800583e:	3143      	adds	r1, #67	; 0x43
 8005840:	7008      	strb	r0, [r1, #0]
 8005842:	0021      	movs	r1, r4
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	3145      	adds	r1, #69	; 0x45
 8005848:	7809      	ldrb	r1, [r1, #0]
 800584a:	18a2      	adds	r2, r4, r2
 800584c:	3243      	adds	r2, #67	; 0x43
 800584e:	3302      	adds	r3, #2
 8005850:	7011      	strb	r1, [r2, #0]
 8005852:	e7c1      	b.n	80057d8 <_printf_common+0x48>
 8005854:	0022      	movs	r2, r4
 8005856:	2301      	movs	r3, #1
 8005858:	321a      	adds	r2, #26
 800585a:	9901      	ldr	r1, [sp, #4]
 800585c:	9800      	ldr	r0, [sp, #0]
 800585e:	9e08      	ldr	r6, [sp, #32]
 8005860:	47b0      	blx	r6
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	d0e6      	beq.n	8005834 <_printf_common+0xa4>
 8005866:	3701      	adds	r7, #1
 8005868:	e7d1      	b.n	800580e <_printf_common+0x7e>
	...

0800586c <_printf_i>:
 800586c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800586e:	b089      	sub	sp, #36	; 0x24
 8005870:	9204      	str	r2, [sp, #16]
 8005872:	000a      	movs	r2, r1
 8005874:	3243      	adds	r2, #67	; 0x43
 8005876:	9305      	str	r3, [sp, #20]
 8005878:	9003      	str	r0, [sp, #12]
 800587a:	9202      	str	r2, [sp, #8]
 800587c:	7e0a      	ldrb	r2, [r1, #24]
 800587e:	000c      	movs	r4, r1
 8005880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005882:	2a6e      	cmp	r2, #110	; 0x6e
 8005884:	d100      	bne.n	8005888 <_printf_i+0x1c>
 8005886:	e086      	b.n	8005996 <_printf_i+0x12a>
 8005888:	d81f      	bhi.n	80058ca <_printf_i+0x5e>
 800588a:	2a63      	cmp	r2, #99	; 0x63
 800588c:	d033      	beq.n	80058f6 <_printf_i+0x8a>
 800588e:	d808      	bhi.n	80058a2 <_printf_i+0x36>
 8005890:	2a00      	cmp	r2, #0
 8005892:	d100      	bne.n	8005896 <_printf_i+0x2a>
 8005894:	e08c      	b.n	80059b0 <_printf_i+0x144>
 8005896:	2a58      	cmp	r2, #88	; 0x58
 8005898:	d04d      	beq.n	8005936 <_printf_i+0xca>
 800589a:	0025      	movs	r5, r4
 800589c:	3542      	adds	r5, #66	; 0x42
 800589e:	702a      	strb	r2, [r5, #0]
 80058a0:	e030      	b.n	8005904 <_printf_i+0x98>
 80058a2:	2a64      	cmp	r2, #100	; 0x64
 80058a4:	d001      	beq.n	80058aa <_printf_i+0x3e>
 80058a6:	2a69      	cmp	r2, #105	; 0x69
 80058a8:	d1f7      	bne.n	800589a <_printf_i+0x2e>
 80058aa:	6819      	ldr	r1, [r3, #0]
 80058ac:	6825      	ldr	r5, [r4, #0]
 80058ae:	1d0a      	adds	r2, r1, #4
 80058b0:	0628      	lsls	r0, r5, #24
 80058b2:	d529      	bpl.n	8005908 <_printf_i+0x9c>
 80058b4:	6808      	ldr	r0, [r1, #0]
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	2800      	cmp	r0, #0
 80058ba:	da03      	bge.n	80058c4 <_printf_i+0x58>
 80058bc:	232d      	movs	r3, #45	; 0x2d
 80058be:	9a02      	ldr	r2, [sp, #8]
 80058c0:	4240      	negs	r0, r0
 80058c2:	7013      	strb	r3, [r2, #0]
 80058c4:	4e6b      	ldr	r6, [pc, #428]	; (8005a74 <_printf_i+0x208>)
 80058c6:	270a      	movs	r7, #10
 80058c8:	e04f      	b.n	800596a <_printf_i+0xfe>
 80058ca:	2a73      	cmp	r2, #115	; 0x73
 80058cc:	d074      	beq.n	80059b8 <_printf_i+0x14c>
 80058ce:	d808      	bhi.n	80058e2 <_printf_i+0x76>
 80058d0:	2a6f      	cmp	r2, #111	; 0x6f
 80058d2:	d01f      	beq.n	8005914 <_printf_i+0xa8>
 80058d4:	2a70      	cmp	r2, #112	; 0x70
 80058d6:	d1e0      	bne.n	800589a <_printf_i+0x2e>
 80058d8:	2220      	movs	r2, #32
 80058da:	6809      	ldr	r1, [r1, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	6022      	str	r2, [r4, #0]
 80058e0:	e003      	b.n	80058ea <_printf_i+0x7e>
 80058e2:	2a75      	cmp	r2, #117	; 0x75
 80058e4:	d016      	beq.n	8005914 <_printf_i+0xa8>
 80058e6:	2a78      	cmp	r2, #120	; 0x78
 80058e8:	d1d7      	bne.n	800589a <_printf_i+0x2e>
 80058ea:	0022      	movs	r2, r4
 80058ec:	2178      	movs	r1, #120	; 0x78
 80058ee:	3245      	adds	r2, #69	; 0x45
 80058f0:	7011      	strb	r1, [r2, #0]
 80058f2:	4e61      	ldr	r6, [pc, #388]	; (8005a78 <_printf_i+0x20c>)
 80058f4:	e022      	b.n	800593c <_printf_i+0xd0>
 80058f6:	0025      	movs	r5, r4
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	3542      	adds	r5, #66	; 0x42
 80058fc:	1d11      	adds	r1, r2, #4
 80058fe:	6019      	str	r1, [r3, #0]
 8005900:	6813      	ldr	r3, [r2, #0]
 8005902:	702b      	strb	r3, [r5, #0]
 8005904:	2301      	movs	r3, #1
 8005906:	e065      	b.n	80059d4 <_printf_i+0x168>
 8005908:	6808      	ldr	r0, [r1, #0]
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	0669      	lsls	r1, r5, #25
 800590e:	d5d3      	bpl.n	80058b8 <_printf_i+0x4c>
 8005910:	b200      	sxth	r0, r0
 8005912:	e7d1      	b.n	80058b8 <_printf_i+0x4c>
 8005914:	6819      	ldr	r1, [r3, #0]
 8005916:	6825      	ldr	r5, [r4, #0]
 8005918:	1d08      	adds	r0, r1, #4
 800591a:	6018      	str	r0, [r3, #0]
 800591c:	6808      	ldr	r0, [r1, #0]
 800591e:	062e      	lsls	r6, r5, #24
 8005920:	d505      	bpl.n	800592e <_printf_i+0xc2>
 8005922:	4e54      	ldr	r6, [pc, #336]	; (8005a74 <_printf_i+0x208>)
 8005924:	2708      	movs	r7, #8
 8005926:	2a6f      	cmp	r2, #111	; 0x6f
 8005928:	d01b      	beq.n	8005962 <_printf_i+0xf6>
 800592a:	270a      	movs	r7, #10
 800592c:	e019      	b.n	8005962 <_printf_i+0xf6>
 800592e:	066d      	lsls	r5, r5, #25
 8005930:	d5f7      	bpl.n	8005922 <_printf_i+0xb6>
 8005932:	b280      	uxth	r0, r0
 8005934:	e7f5      	b.n	8005922 <_printf_i+0xb6>
 8005936:	3145      	adds	r1, #69	; 0x45
 8005938:	4e4e      	ldr	r6, [pc, #312]	; (8005a74 <_printf_i+0x208>)
 800593a:	700a      	strb	r2, [r1, #0]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	1d01      	adds	r1, r0, #4
 8005942:	6800      	ldr	r0, [r0, #0]
 8005944:	6019      	str	r1, [r3, #0]
 8005946:	0615      	lsls	r5, r2, #24
 8005948:	d521      	bpl.n	800598e <_printf_i+0x122>
 800594a:	07d3      	lsls	r3, r2, #31
 800594c:	d502      	bpl.n	8005954 <_printf_i+0xe8>
 800594e:	2320      	movs	r3, #32
 8005950:	431a      	orrs	r2, r3
 8005952:	6022      	str	r2, [r4, #0]
 8005954:	2710      	movs	r7, #16
 8005956:	2800      	cmp	r0, #0
 8005958:	d103      	bne.n	8005962 <_printf_i+0xf6>
 800595a:	2320      	movs	r3, #32
 800595c:	6822      	ldr	r2, [r4, #0]
 800595e:	439a      	bics	r2, r3
 8005960:	6022      	str	r2, [r4, #0]
 8005962:	0023      	movs	r3, r4
 8005964:	2200      	movs	r2, #0
 8005966:	3343      	adds	r3, #67	; 0x43
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	6863      	ldr	r3, [r4, #4]
 800596c:	60a3      	str	r3, [r4, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	db58      	blt.n	8005a24 <_printf_i+0x1b8>
 8005972:	2204      	movs	r2, #4
 8005974:	6821      	ldr	r1, [r4, #0]
 8005976:	4391      	bics	r1, r2
 8005978:	6021      	str	r1, [r4, #0]
 800597a:	2800      	cmp	r0, #0
 800597c:	d154      	bne.n	8005a28 <_printf_i+0x1bc>
 800597e:	9d02      	ldr	r5, [sp, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d05a      	beq.n	8005a3a <_printf_i+0x1ce>
 8005984:	0025      	movs	r5, r4
 8005986:	7833      	ldrb	r3, [r6, #0]
 8005988:	3542      	adds	r5, #66	; 0x42
 800598a:	702b      	strb	r3, [r5, #0]
 800598c:	e055      	b.n	8005a3a <_printf_i+0x1ce>
 800598e:	0655      	lsls	r5, r2, #25
 8005990:	d5db      	bpl.n	800594a <_printf_i+0xde>
 8005992:	b280      	uxth	r0, r0
 8005994:	e7d9      	b.n	800594a <_printf_i+0xde>
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	680d      	ldr	r5, [r1, #0]
 800599a:	1d10      	adds	r0, r2, #4
 800599c:	6949      	ldr	r1, [r1, #20]
 800599e:	6018      	str	r0, [r3, #0]
 80059a0:	6813      	ldr	r3, [r2, #0]
 80059a2:	062e      	lsls	r6, r5, #24
 80059a4:	d501      	bpl.n	80059aa <_printf_i+0x13e>
 80059a6:	6019      	str	r1, [r3, #0]
 80059a8:	e002      	b.n	80059b0 <_printf_i+0x144>
 80059aa:	066d      	lsls	r5, r5, #25
 80059ac:	d5fb      	bpl.n	80059a6 <_printf_i+0x13a>
 80059ae:	8019      	strh	r1, [r3, #0]
 80059b0:	2300      	movs	r3, #0
 80059b2:	9d02      	ldr	r5, [sp, #8]
 80059b4:	6123      	str	r3, [r4, #16]
 80059b6:	e04f      	b.n	8005a58 <_printf_i+0x1ec>
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	1d11      	adds	r1, r2, #4
 80059bc:	6019      	str	r1, [r3, #0]
 80059be:	6815      	ldr	r5, [r2, #0]
 80059c0:	2100      	movs	r1, #0
 80059c2:	6862      	ldr	r2, [r4, #4]
 80059c4:	0028      	movs	r0, r5
 80059c6:	f000 f891 	bl	8005aec <memchr>
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d001      	beq.n	80059d2 <_printf_i+0x166>
 80059ce:	1b40      	subs	r0, r0, r5
 80059d0:	6060      	str	r0, [r4, #4]
 80059d2:	6863      	ldr	r3, [r4, #4]
 80059d4:	6123      	str	r3, [r4, #16]
 80059d6:	2300      	movs	r3, #0
 80059d8:	9a02      	ldr	r2, [sp, #8]
 80059da:	7013      	strb	r3, [r2, #0]
 80059dc:	e03c      	b.n	8005a58 <_printf_i+0x1ec>
 80059de:	6923      	ldr	r3, [r4, #16]
 80059e0:	002a      	movs	r2, r5
 80059e2:	9904      	ldr	r1, [sp, #16]
 80059e4:	9803      	ldr	r0, [sp, #12]
 80059e6:	9d05      	ldr	r5, [sp, #20]
 80059e8:	47a8      	blx	r5
 80059ea:	1c43      	adds	r3, r0, #1
 80059ec:	d03e      	beq.n	8005a6c <_printf_i+0x200>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	079b      	lsls	r3, r3, #30
 80059f2:	d415      	bmi.n	8005a20 <_printf_i+0x1b4>
 80059f4:	9b07      	ldr	r3, [sp, #28]
 80059f6:	68e0      	ldr	r0, [r4, #12]
 80059f8:	4298      	cmp	r0, r3
 80059fa:	da39      	bge.n	8005a70 <_printf_i+0x204>
 80059fc:	0018      	movs	r0, r3
 80059fe:	e037      	b.n	8005a70 <_printf_i+0x204>
 8005a00:	0022      	movs	r2, r4
 8005a02:	2301      	movs	r3, #1
 8005a04:	3219      	adds	r2, #25
 8005a06:	9904      	ldr	r1, [sp, #16]
 8005a08:	9803      	ldr	r0, [sp, #12]
 8005a0a:	9e05      	ldr	r6, [sp, #20]
 8005a0c:	47b0      	blx	r6
 8005a0e:	1c43      	adds	r3, r0, #1
 8005a10:	d02c      	beq.n	8005a6c <_printf_i+0x200>
 8005a12:	3501      	adds	r5, #1
 8005a14:	68e3      	ldr	r3, [r4, #12]
 8005a16:	9a07      	ldr	r2, [sp, #28]
 8005a18:	1a9b      	subs	r3, r3, r2
 8005a1a:	42ab      	cmp	r3, r5
 8005a1c:	dcf0      	bgt.n	8005a00 <_printf_i+0x194>
 8005a1e:	e7e9      	b.n	80059f4 <_printf_i+0x188>
 8005a20:	2500      	movs	r5, #0
 8005a22:	e7f7      	b.n	8005a14 <_printf_i+0x1a8>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d0ad      	beq.n	8005984 <_printf_i+0x118>
 8005a28:	9d02      	ldr	r5, [sp, #8]
 8005a2a:	0039      	movs	r1, r7
 8005a2c:	f7fa fbf2 	bl	8000214 <__aeabi_uidivmod>
 8005a30:	5c73      	ldrb	r3, [r6, r1]
 8005a32:	3d01      	subs	r5, #1
 8005a34:	702b      	strb	r3, [r5, #0]
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d1f7      	bne.n	8005a2a <_printf_i+0x1be>
 8005a3a:	2f08      	cmp	r7, #8
 8005a3c:	d109      	bne.n	8005a52 <_printf_i+0x1e6>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	07db      	lsls	r3, r3, #31
 8005a42:	d506      	bpl.n	8005a52 <_printf_i+0x1e6>
 8005a44:	6863      	ldr	r3, [r4, #4]
 8005a46:	6922      	ldr	r2, [r4, #16]
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	dc02      	bgt.n	8005a52 <_printf_i+0x1e6>
 8005a4c:	2330      	movs	r3, #48	; 0x30
 8005a4e:	3d01      	subs	r5, #1
 8005a50:	702b      	strb	r3, [r5, #0]
 8005a52:	9b02      	ldr	r3, [sp, #8]
 8005a54:	1b5b      	subs	r3, r3, r5
 8005a56:	6123      	str	r3, [r4, #16]
 8005a58:	9b05      	ldr	r3, [sp, #20]
 8005a5a:	aa07      	add	r2, sp, #28
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	0021      	movs	r1, r4
 8005a60:	9b04      	ldr	r3, [sp, #16]
 8005a62:	9803      	ldr	r0, [sp, #12]
 8005a64:	f7ff fe94 	bl	8005790 <_printf_common>
 8005a68:	1c43      	adds	r3, r0, #1
 8005a6a:	d1b8      	bne.n	80059de <_printf_i+0x172>
 8005a6c:	2001      	movs	r0, #1
 8005a6e:	4240      	negs	r0, r0
 8005a70:	b009      	add	sp, #36	; 0x24
 8005a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a74:	08005ce5 	.word	0x08005ce5
 8005a78:	08005cf6 	.word	0x08005cf6

08005a7c <_read_r>:
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	0005      	movs	r5, r0
 8005a80:	0008      	movs	r0, r1
 8005a82:	0011      	movs	r1, r2
 8005a84:	2200      	movs	r2, #0
 8005a86:	4c06      	ldr	r4, [pc, #24]	; (8005aa0 <_read_r+0x24>)
 8005a88:	6022      	str	r2, [r4, #0]
 8005a8a:	001a      	movs	r2, r3
 8005a8c:	f7fe ff58 	bl	8004940 <_read>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d103      	bne.n	8005a9c <_read_r+0x20>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d000      	beq.n	8005a9c <_read_r+0x20>
 8005a9a:	602b      	str	r3, [r5, #0]
 8005a9c:	bd70      	pop	{r4, r5, r6, pc}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	200001f4 	.word	0x200001f4

08005aa4 <_fstat_r>:
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	b570      	push	{r4, r5, r6, lr}
 8005aa8:	4c06      	ldr	r4, [pc, #24]	; (8005ac4 <_fstat_r+0x20>)
 8005aaa:	0005      	movs	r5, r0
 8005aac:	0008      	movs	r0, r1
 8005aae:	0011      	movs	r1, r2
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	f7fe ff88 	bl	80049c6 <_fstat>
 8005ab6:	1c43      	adds	r3, r0, #1
 8005ab8:	d103      	bne.n	8005ac2 <_fstat_r+0x1e>
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d000      	beq.n	8005ac2 <_fstat_r+0x1e>
 8005ac0:	602b      	str	r3, [r5, #0]
 8005ac2:	bd70      	pop	{r4, r5, r6, pc}
 8005ac4:	200001f4 	.word	0x200001f4

08005ac8 <_isatty_r>:
 8005ac8:	2300      	movs	r3, #0
 8005aca:	b570      	push	{r4, r5, r6, lr}
 8005acc:	4c06      	ldr	r4, [pc, #24]	; (8005ae8 <_isatty_r+0x20>)
 8005ace:	0005      	movs	r5, r0
 8005ad0:	0008      	movs	r0, r1
 8005ad2:	6023      	str	r3, [r4, #0]
 8005ad4:	f7fe ff85 	bl	80049e2 <_isatty>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d103      	bne.n	8005ae4 <_isatty_r+0x1c>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d000      	beq.n	8005ae4 <_isatty_r+0x1c>
 8005ae2:	602b      	str	r3, [r5, #0]
 8005ae4:	bd70      	pop	{r4, r5, r6, pc}
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	200001f4 	.word	0x200001f4

08005aec <memchr>:
 8005aec:	b2c9      	uxtb	r1, r1
 8005aee:	1882      	adds	r2, r0, r2
 8005af0:	4290      	cmp	r0, r2
 8005af2:	d101      	bne.n	8005af8 <memchr+0xc>
 8005af4:	2000      	movs	r0, #0
 8005af6:	4770      	bx	lr
 8005af8:	7803      	ldrb	r3, [r0, #0]
 8005afa:	428b      	cmp	r3, r1
 8005afc:	d0fb      	beq.n	8005af6 <memchr+0xa>
 8005afe:	3001      	adds	r0, #1
 8005b00:	e7f6      	b.n	8005af0 <memchr+0x4>
	...

08005b04 <_init>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0a:	bc08      	pop	{r3}
 8005b0c:	469e      	mov	lr, r3
 8005b0e:	4770      	bx	lr

08005b10 <_fini>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	46c0      	nop			; (mov r8, r8)
 8005b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b16:	bc08      	pop	{r3}
 8005b18:	469e      	mov	lr, r3
 8005b1a:	4770      	bx	lr
