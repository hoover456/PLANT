
MotorEncoderProto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08005464  08005464  00015464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f0  080055f0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055f8  080055f8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f8  080055f8  000155f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055fc  080055fc  000155fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000006c  0800566c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  0800566c  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002c  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c352  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cfc  00000000  00000000  0002c3ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b58  00000000  00000000  0002e0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a70  00000000  00000000  0002ec40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015c2f  00000000  00000000  0002f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008f1d  00000000  00000000  000452df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000844be  00000000  00000000  0004e1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000b2  00000000  00000000  000d26ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003090  00000000  00000000  000d276c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000003c  00000000  00000000  000d57fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macinfo 00000001  00000000  00000000  000d5838  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800544c 	.word	0x0800544c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	0800544c 	.word	0x0800544c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	464f      	mov	r7, r9
 8000438:	4646      	mov	r6, r8
 800043a:	46d6      	mov	lr, sl
 800043c:	b5c0      	push	{r6, r7, lr}
 800043e:	0004      	movs	r4, r0
 8000440:	b082      	sub	sp, #8
 8000442:	000d      	movs	r5, r1
 8000444:	4691      	mov	r9, r2
 8000446:	4698      	mov	r8, r3
 8000448:	428b      	cmp	r3, r1
 800044a:	d82f      	bhi.n	80004ac <__udivmoddi4+0x78>
 800044c:	d02c      	beq.n	80004a8 <__udivmoddi4+0x74>
 800044e:	4641      	mov	r1, r8
 8000450:	4648      	mov	r0, r9
 8000452:	f000 fdc9 	bl	8000fe8 <__clzdi2>
 8000456:	0029      	movs	r1, r5
 8000458:	0006      	movs	r6, r0
 800045a:	0020      	movs	r0, r4
 800045c:	f000 fdc4 	bl	8000fe8 <__clzdi2>
 8000460:	1a33      	subs	r3, r6, r0
 8000462:	469c      	mov	ip, r3
 8000464:	3b20      	subs	r3, #32
 8000466:	469a      	mov	sl, r3
 8000468:	d500      	bpl.n	800046c <__udivmoddi4+0x38>
 800046a:	e076      	b.n	800055a <__udivmoddi4+0x126>
 800046c:	464b      	mov	r3, r9
 800046e:	4652      	mov	r2, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	001f      	movs	r7, r3
 8000474:	464b      	mov	r3, r9
 8000476:	4662      	mov	r2, ip
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d828      	bhi.n	80004d2 <__udivmoddi4+0x9e>
 8000480:	d025      	beq.n	80004ce <__udivmoddi4+0x9a>
 8000482:	4653      	mov	r3, sl
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5a>
 800048c:	e07b      	b.n	8000586 <__udivmoddi4+0x152>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	4652      	mov	r2, sl
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4662      	mov	r2, ip
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e018      	b.n	80004da <__udivmoddi4+0xa6>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9d0      	bls.n	800044e <__udivmoddi4+0x1a>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8a>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b002      	add	sp, #8
 80004c4:	bc1c      	pop	{r2, r3, r4}
 80004c6:	4690      	mov	r8, r2
 80004c8:	4699      	mov	r9, r3
 80004ca:	46a2      	mov	sl, r4
 80004cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d9d7      	bls.n	8000482 <__udivmoddi4+0x4e>
 80004d2:	2200      	movs	r2, #0
 80004d4:	2300      	movs	r3, #0
 80004d6:	9200      	str	r2, [sp, #0]
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	4663      	mov	r3, ip
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d0e9      	beq.n	80004b4 <__udivmoddi4+0x80>
 80004e0:	07fb      	lsls	r3, r7, #31
 80004e2:	4698      	mov	r8, r3
 80004e4:	4641      	mov	r1, r8
 80004e6:	0872      	lsrs	r2, r6, #1
 80004e8:	430a      	orrs	r2, r1
 80004ea:	087b      	lsrs	r3, r7, #1
 80004ec:	4666      	mov	r6, ip
 80004ee:	e00e      	b.n	800050e <__udivmoddi4+0xda>
 80004f0:	42ab      	cmp	r3, r5
 80004f2:	d101      	bne.n	80004f8 <__udivmoddi4+0xc4>
 80004f4:	42a2      	cmp	r2, r4
 80004f6:	d80c      	bhi.n	8000512 <__udivmoddi4+0xde>
 80004f8:	1aa4      	subs	r4, r4, r2
 80004fa:	419d      	sbcs	r5, r3
 80004fc:	2001      	movs	r0, #1
 80004fe:	1924      	adds	r4, r4, r4
 8000500:	416d      	adcs	r5, r5
 8000502:	2100      	movs	r1, #0
 8000504:	3e01      	subs	r6, #1
 8000506:	1824      	adds	r4, r4, r0
 8000508:	414d      	adcs	r5, r1
 800050a:	2e00      	cmp	r6, #0
 800050c:	d006      	beq.n	800051c <__udivmoddi4+0xe8>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d9ee      	bls.n	80004f0 <__udivmoddi4+0xbc>
 8000512:	3e01      	subs	r6, #1
 8000514:	1924      	adds	r4, r4, r4
 8000516:	416d      	adcs	r5, r5
 8000518:	2e00      	cmp	r6, #0
 800051a:	d1f8      	bne.n	800050e <__udivmoddi4+0xda>
 800051c:	9800      	ldr	r0, [sp, #0]
 800051e:	9901      	ldr	r1, [sp, #4]
 8000520:	4653      	mov	r3, sl
 8000522:	1900      	adds	r0, r0, r4
 8000524:	4169      	adcs	r1, r5
 8000526:	2b00      	cmp	r3, #0
 8000528:	db23      	blt.n	8000572 <__udivmoddi4+0x13e>
 800052a:	002b      	movs	r3, r5
 800052c:	4652      	mov	r2, sl
 800052e:	40d3      	lsrs	r3, r2
 8000530:	002a      	movs	r2, r5
 8000532:	4664      	mov	r4, ip
 8000534:	40e2      	lsrs	r2, r4
 8000536:	001c      	movs	r4, r3
 8000538:	4653      	mov	r3, sl
 800053a:	0015      	movs	r5, r2
 800053c:	2b00      	cmp	r3, #0
 800053e:	db2d      	blt.n	800059c <__udivmoddi4+0x168>
 8000540:	0026      	movs	r6, r4
 8000542:	4657      	mov	r7, sl
 8000544:	40be      	lsls	r6, r7
 8000546:	0033      	movs	r3, r6
 8000548:	0026      	movs	r6, r4
 800054a:	4667      	mov	r7, ip
 800054c:	40be      	lsls	r6, r7
 800054e:	0032      	movs	r2, r6
 8000550:	1a80      	subs	r0, r0, r2
 8000552:	4199      	sbcs	r1, r3
 8000554:	9000      	str	r0, [sp, #0]
 8000556:	9101      	str	r1, [sp, #4]
 8000558:	e7ac      	b.n	80004b4 <__udivmoddi4+0x80>
 800055a:	4662      	mov	r2, ip
 800055c:	2320      	movs	r3, #32
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	464a      	mov	r2, r9
 8000562:	40da      	lsrs	r2, r3
 8000564:	4661      	mov	r1, ip
 8000566:	0013      	movs	r3, r2
 8000568:	4642      	mov	r2, r8
 800056a:	408a      	lsls	r2, r1
 800056c:	0017      	movs	r7, r2
 800056e:	431f      	orrs	r7, r3
 8000570:	e780      	b.n	8000474 <__udivmoddi4+0x40>
 8000572:	4662      	mov	r2, ip
 8000574:	2320      	movs	r3, #32
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	4666      	mov	r6, ip
 800057c:	409a      	lsls	r2, r3
 800057e:	0023      	movs	r3, r4
 8000580:	40f3      	lsrs	r3, r6
 8000582:	4313      	orrs	r3, r2
 8000584:	e7d4      	b.n	8000530 <__udivmoddi4+0xfc>
 8000586:	4662      	mov	r2, ip
 8000588:	2320      	movs	r3, #32
 800058a:	2100      	movs	r1, #0
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	2200      	movs	r2, #0
 8000590:	9100      	str	r1, [sp, #0]
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	2201      	movs	r2, #1
 8000596:	40da      	lsrs	r2, r3
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	e780      	b.n	800049e <__udivmoddi4+0x6a>
 800059c:	2320      	movs	r3, #32
 800059e:	4662      	mov	r2, ip
 80005a0:	0026      	movs	r6, r4
 80005a2:	1a9b      	subs	r3, r3, r2
 80005a4:	40de      	lsrs	r6, r3
 80005a6:	002f      	movs	r7, r5
 80005a8:	46b0      	mov	r8, r6
 80005aa:	4666      	mov	r6, ip
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	4646      	mov	r6, r8
 80005b0:	003b      	movs	r3, r7
 80005b2:	4333      	orrs	r3, r6
 80005b4:	e7c8      	b.n	8000548 <__udivmoddi4+0x114>
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__aeabi_fadd>:
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ba:	4647      	mov	r7, r8
 80005bc:	46ce      	mov	lr, r9
 80005be:	0243      	lsls	r3, r0, #9
 80005c0:	0a5b      	lsrs	r3, r3, #9
 80005c2:	0044      	lsls	r4, r0, #1
 80005c4:	0fc2      	lsrs	r2, r0, #31
 80005c6:	469c      	mov	ip, r3
 80005c8:	0048      	lsls	r0, r1, #1
 80005ca:	00dd      	lsls	r5, r3, #3
 80005cc:	024b      	lsls	r3, r1, #9
 80005ce:	0e24      	lsrs	r4, r4, #24
 80005d0:	0a5b      	lsrs	r3, r3, #9
 80005d2:	0e00      	lsrs	r0, r0, #24
 80005d4:	b580      	push	{r7, lr}
 80005d6:	4698      	mov	r8, r3
 80005d8:	0026      	movs	r6, r4
 80005da:	4691      	mov	r9, r2
 80005dc:	0fc9      	lsrs	r1, r1, #31
 80005de:	00db      	lsls	r3, r3, #3
 80005e0:	1a27      	subs	r7, r4, r0
 80005e2:	428a      	cmp	r2, r1
 80005e4:	d029      	beq.n	800063a <__aeabi_fadd+0x82>
 80005e6:	2f00      	cmp	r7, #0
 80005e8:	dd15      	ble.n	8000616 <__aeabi_fadd+0x5e>
 80005ea:	2800      	cmp	r0, #0
 80005ec:	d14a      	bne.n	8000684 <__aeabi_fadd+0xcc>
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d000      	beq.n	80005f4 <__aeabi_fadd+0x3c>
 80005f2:	e095      	b.n	8000720 <__aeabi_fadd+0x168>
 80005f4:	08ed      	lsrs	r5, r5, #3
 80005f6:	2cff      	cmp	r4, #255	; 0xff
 80005f8:	d100      	bne.n	80005fc <__aeabi_fadd+0x44>
 80005fa:	e088      	b.n	800070e <__aeabi_fadd+0x156>
 80005fc:	026b      	lsls	r3, r5, #9
 80005fe:	0a5b      	lsrs	r3, r3, #9
 8000600:	b2e6      	uxtb	r6, r4
 8000602:	025b      	lsls	r3, r3, #9
 8000604:	05f6      	lsls	r6, r6, #23
 8000606:	0a58      	lsrs	r0, r3, #9
 8000608:	4330      	orrs	r0, r6
 800060a:	07d2      	lsls	r2, r2, #31
 800060c:	4310      	orrs	r0, r2
 800060e:	bc0c      	pop	{r2, r3}
 8000610:	4690      	mov	r8, r2
 8000612:	4699      	mov	r9, r3
 8000614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000616:	2f00      	cmp	r7, #0
 8000618:	d000      	beq.n	800061c <__aeabi_fadd+0x64>
 800061a:	e087      	b.n	800072c <__aeabi_fadd+0x174>
 800061c:	1c60      	adds	r0, r4, #1
 800061e:	b2c0      	uxtb	r0, r0
 8000620:	2801      	cmp	r0, #1
 8000622:	dc00      	bgt.n	8000626 <__aeabi_fadd+0x6e>
 8000624:	e0b6      	b.n	8000794 <__aeabi_fadd+0x1dc>
 8000626:	1aee      	subs	r6, r5, r3
 8000628:	0172      	lsls	r2, r6, #5
 800062a:	d500      	bpl.n	800062e <__aeabi_fadd+0x76>
 800062c:	e0c5      	b.n	80007ba <__aeabi_fadd+0x202>
 800062e:	2e00      	cmp	r6, #0
 8000630:	d13d      	bne.n	80006ae <__aeabi_fadd+0xf6>
 8000632:	2200      	movs	r2, #0
 8000634:	2600      	movs	r6, #0
 8000636:	2300      	movs	r3, #0
 8000638:	e7e3      	b.n	8000602 <__aeabi_fadd+0x4a>
 800063a:	2f00      	cmp	r7, #0
 800063c:	dc00      	bgt.n	8000640 <__aeabi_fadd+0x88>
 800063e:	e096      	b.n	800076e <__aeabi_fadd+0x1b6>
 8000640:	2800      	cmp	r0, #0
 8000642:	d05d      	beq.n	8000700 <__aeabi_fadd+0x148>
 8000644:	2cff      	cmp	r4, #255	; 0xff
 8000646:	d060      	beq.n	800070a <__aeabi_fadd+0x152>
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	04d2      	lsls	r2, r2, #19
 800064c:	4313      	orrs	r3, r2
 800064e:	2f1b      	cmp	r7, #27
 8000650:	dd00      	ble.n	8000654 <__aeabi_fadd+0x9c>
 8000652:	e0ec      	b.n	800082e <__aeabi_fadd+0x276>
 8000654:	2220      	movs	r2, #32
 8000656:	1bd2      	subs	r2, r2, r7
 8000658:	0018      	movs	r0, r3
 800065a:	4093      	lsls	r3, r2
 800065c:	40f8      	lsrs	r0, r7
 800065e:	1e5a      	subs	r2, r3, #1
 8000660:	4193      	sbcs	r3, r2
 8000662:	4303      	orrs	r3, r0
 8000664:	18ed      	adds	r5, r5, r3
 8000666:	016b      	lsls	r3, r5, #5
 8000668:	d57b      	bpl.n	8000762 <__aeabi_fadd+0x1aa>
 800066a:	3401      	adds	r4, #1
 800066c:	2cff      	cmp	r4, #255	; 0xff
 800066e:	d100      	bne.n	8000672 <__aeabi_fadd+0xba>
 8000670:	e0b7      	b.n	80007e2 <__aeabi_fadd+0x22a>
 8000672:	2201      	movs	r2, #1
 8000674:	2607      	movs	r6, #7
 8000676:	402a      	ands	r2, r5
 8000678:	086b      	lsrs	r3, r5, #1
 800067a:	4d9a      	ldr	r5, [pc, #616]	; (80008e4 <__aeabi_fadd+0x32c>)
 800067c:	401d      	ands	r5, r3
 800067e:	4315      	orrs	r5, r2
 8000680:	402e      	ands	r6, r5
 8000682:	e029      	b.n	80006d8 <__aeabi_fadd+0x120>
 8000684:	2cff      	cmp	r4, #255	; 0xff
 8000686:	d0b5      	beq.n	80005f4 <__aeabi_fadd+0x3c>
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	04d2      	lsls	r2, r2, #19
 800068c:	4313      	orrs	r3, r2
 800068e:	2f1b      	cmp	r7, #27
 8000690:	dd00      	ble.n	8000694 <__aeabi_fadd+0xdc>
 8000692:	e0b2      	b.n	80007fa <__aeabi_fadd+0x242>
 8000694:	2220      	movs	r2, #32
 8000696:	1bd2      	subs	r2, r2, r7
 8000698:	0019      	movs	r1, r3
 800069a:	4093      	lsls	r3, r2
 800069c:	40f9      	lsrs	r1, r7
 800069e:	1e5a      	subs	r2, r3, #1
 80006a0:	4193      	sbcs	r3, r2
 80006a2:	430b      	orrs	r3, r1
 80006a4:	1aed      	subs	r5, r5, r3
 80006a6:	016b      	lsls	r3, r5, #5
 80006a8:	d55b      	bpl.n	8000762 <__aeabi_fadd+0x1aa>
 80006aa:	01ad      	lsls	r5, r5, #6
 80006ac:	09ae      	lsrs	r6, r5, #6
 80006ae:	0030      	movs	r0, r6
 80006b0:	f000 fc7c 	bl	8000fac <__clzsi2>
 80006b4:	3805      	subs	r0, #5
 80006b6:	4086      	lsls	r6, r0
 80006b8:	4284      	cmp	r4, r0
 80006ba:	dc65      	bgt.n	8000788 <__aeabi_fadd+0x1d0>
 80006bc:	1b04      	subs	r4, r0, r4
 80006be:	0033      	movs	r3, r6
 80006c0:	2020      	movs	r0, #32
 80006c2:	3401      	adds	r4, #1
 80006c4:	40e3      	lsrs	r3, r4
 80006c6:	1b04      	subs	r4, r0, r4
 80006c8:	40a6      	lsls	r6, r4
 80006ca:	1e75      	subs	r5, r6, #1
 80006cc:	41ae      	sbcs	r6, r5
 80006ce:	4333      	orrs	r3, r6
 80006d0:	2607      	movs	r6, #7
 80006d2:	001d      	movs	r5, r3
 80006d4:	2400      	movs	r4, #0
 80006d6:	401e      	ands	r6, r3
 80006d8:	2201      	movs	r2, #1
 80006da:	464b      	mov	r3, r9
 80006dc:	401a      	ands	r2, r3
 80006de:	2e00      	cmp	r6, #0
 80006e0:	d004      	beq.n	80006ec <__aeabi_fadd+0x134>
 80006e2:	230f      	movs	r3, #15
 80006e4:	402b      	ands	r3, r5
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	d000      	beq.n	80006ec <__aeabi_fadd+0x134>
 80006ea:	3504      	adds	r5, #4
 80006ec:	016b      	lsls	r3, r5, #5
 80006ee:	d400      	bmi.n	80006f2 <__aeabi_fadd+0x13a>
 80006f0:	e780      	b.n	80005f4 <__aeabi_fadd+0x3c>
 80006f2:	3401      	adds	r4, #1
 80006f4:	b2e6      	uxtb	r6, r4
 80006f6:	2cff      	cmp	r4, #255	; 0xff
 80006f8:	d12f      	bne.n	800075a <__aeabi_fadd+0x1a2>
 80006fa:	26ff      	movs	r6, #255	; 0xff
 80006fc:	2300      	movs	r3, #0
 80006fe:	e780      	b.n	8000602 <__aeabi_fadd+0x4a>
 8000700:	2b00      	cmp	r3, #0
 8000702:	d152      	bne.n	80007aa <__aeabi_fadd+0x1f2>
 8000704:	2cff      	cmp	r4, #255	; 0xff
 8000706:	d000      	beq.n	800070a <__aeabi_fadd+0x152>
 8000708:	e774      	b.n	80005f4 <__aeabi_fadd+0x3c>
 800070a:	000a      	movs	r2, r1
 800070c:	08ed      	lsrs	r5, r5, #3
 800070e:	2d00      	cmp	r5, #0
 8000710:	d0f3      	beq.n	80006fa <__aeabi_fadd+0x142>
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	03db      	lsls	r3, r3, #15
 8000716:	432b      	orrs	r3, r5
 8000718:	025b      	lsls	r3, r3, #9
 800071a:	0a5b      	lsrs	r3, r3, #9
 800071c:	26ff      	movs	r6, #255	; 0xff
 800071e:	e770      	b.n	8000602 <__aeabi_fadd+0x4a>
 8000720:	3f01      	subs	r7, #1
 8000722:	2f00      	cmp	r7, #0
 8000724:	d0be      	beq.n	80006a4 <__aeabi_fadd+0xec>
 8000726:	2cff      	cmp	r4, #255	; 0xff
 8000728:	d1b1      	bne.n	800068e <__aeabi_fadd+0xd6>
 800072a:	e763      	b.n	80005f4 <__aeabi_fadd+0x3c>
 800072c:	2c00      	cmp	r4, #0
 800072e:	d047      	beq.n	80007c0 <__aeabi_fadd+0x208>
 8000730:	28ff      	cmp	r0, #255	; 0xff
 8000732:	d069      	beq.n	8000808 <__aeabi_fadd+0x250>
 8000734:	2480      	movs	r4, #128	; 0x80
 8000736:	04e4      	lsls	r4, r4, #19
 8000738:	427a      	negs	r2, r7
 800073a:	4325      	orrs	r5, r4
 800073c:	2a1b      	cmp	r2, #27
 800073e:	dd00      	ble.n	8000742 <__aeabi_fadd+0x18a>
 8000740:	e0c5      	b.n	80008ce <__aeabi_fadd+0x316>
 8000742:	002c      	movs	r4, r5
 8000744:	2620      	movs	r6, #32
 8000746:	40d4      	lsrs	r4, r2
 8000748:	1ab2      	subs	r2, r6, r2
 800074a:	4095      	lsls	r5, r2
 800074c:	1e6a      	subs	r2, r5, #1
 800074e:	4195      	sbcs	r5, r2
 8000750:	4325      	orrs	r5, r4
 8000752:	1b5d      	subs	r5, r3, r5
 8000754:	0004      	movs	r4, r0
 8000756:	4689      	mov	r9, r1
 8000758:	e7a5      	b.n	80006a6 <__aeabi_fadd+0xee>
 800075a:	01ab      	lsls	r3, r5, #6
 800075c:	0a5b      	lsrs	r3, r3, #9
 800075e:	e750      	b.n	8000602 <__aeabi_fadd+0x4a>
 8000760:	2400      	movs	r4, #0
 8000762:	2201      	movs	r2, #1
 8000764:	464b      	mov	r3, r9
 8000766:	401a      	ands	r2, r3
 8000768:	076b      	lsls	r3, r5, #29
 800076a:	d1ba      	bne.n	80006e2 <__aeabi_fadd+0x12a>
 800076c:	e742      	b.n	80005f4 <__aeabi_fadd+0x3c>
 800076e:	2f00      	cmp	r7, #0
 8000770:	d13b      	bne.n	80007ea <__aeabi_fadd+0x232>
 8000772:	3401      	adds	r4, #1
 8000774:	b2e0      	uxtb	r0, r4
 8000776:	2801      	cmp	r0, #1
 8000778:	dd4a      	ble.n	8000810 <__aeabi_fadd+0x258>
 800077a:	2cff      	cmp	r4, #255	; 0xff
 800077c:	d0bd      	beq.n	80006fa <__aeabi_fadd+0x142>
 800077e:	2607      	movs	r6, #7
 8000780:	18ed      	adds	r5, r5, r3
 8000782:	086d      	lsrs	r5, r5, #1
 8000784:	402e      	ands	r6, r5
 8000786:	e7a7      	b.n	80006d8 <__aeabi_fadd+0x120>
 8000788:	2307      	movs	r3, #7
 800078a:	4d57      	ldr	r5, [pc, #348]	; (80008e8 <__aeabi_fadd+0x330>)
 800078c:	1a24      	subs	r4, r4, r0
 800078e:	4035      	ands	r5, r6
 8000790:	401e      	ands	r6, r3
 8000792:	e7a1      	b.n	80006d8 <__aeabi_fadd+0x120>
 8000794:	2c00      	cmp	r4, #0
 8000796:	d11b      	bne.n	80007d0 <__aeabi_fadd+0x218>
 8000798:	2d00      	cmp	r5, #0
 800079a:	d16e      	bne.n	800087a <__aeabi_fadd+0x2c2>
 800079c:	2b00      	cmp	r3, #0
 800079e:	d100      	bne.n	80007a2 <__aeabi_fadd+0x1ea>
 80007a0:	e09a      	b.n	80008d8 <__aeabi_fadd+0x320>
 80007a2:	000a      	movs	r2, r1
 80007a4:	001d      	movs	r5, r3
 80007a6:	003c      	movs	r4, r7
 80007a8:	e724      	b.n	80005f4 <__aeabi_fadd+0x3c>
 80007aa:	3f01      	subs	r7, #1
 80007ac:	2f00      	cmp	r7, #0
 80007ae:	d100      	bne.n	80007b2 <__aeabi_fadd+0x1fa>
 80007b0:	e758      	b.n	8000664 <__aeabi_fadd+0xac>
 80007b2:	2cff      	cmp	r4, #255	; 0xff
 80007b4:	d000      	beq.n	80007b8 <__aeabi_fadd+0x200>
 80007b6:	e74a      	b.n	800064e <__aeabi_fadd+0x96>
 80007b8:	e7a7      	b.n	800070a <__aeabi_fadd+0x152>
 80007ba:	1b5e      	subs	r6, r3, r5
 80007bc:	4689      	mov	r9, r1
 80007be:	e776      	b.n	80006ae <__aeabi_fadd+0xf6>
 80007c0:	2d00      	cmp	r5, #0
 80007c2:	d11c      	bne.n	80007fe <__aeabi_fadd+0x246>
 80007c4:	000a      	movs	r2, r1
 80007c6:	28ff      	cmp	r0, #255	; 0xff
 80007c8:	d01f      	beq.n	800080a <__aeabi_fadd+0x252>
 80007ca:	0004      	movs	r4, r0
 80007cc:	001d      	movs	r5, r3
 80007ce:	e711      	b.n	80005f4 <__aeabi_fadd+0x3c>
 80007d0:	2d00      	cmp	r5, #0
 80007d2:	d15d      	bne.n	8000890 <__aeabi_fadd+0x2d8>
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d117      	bne.n	8000808 <__aeabi_fadd+0x250>
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	2200      	movs	r2, #0
 80007dc:	03db      	lsls	r3, r3, #15
 80007de:	26ff      	movs	r6, #255	; 0xff
 80007e0:	e70f      	b.n	8000602 <__aeabi_fadd+0x4a>
 80007e2:	000a      	movs	r2, r1
 80007e4:	26ff      	movs	r6, #255	; 0xff
 80007e6:	2300      	movs	r3, #0
 80007e8:	e70b      	b.n	8000602 <__aeabi_fadd+0x4a>
 80007ea:	2c00      	cmp	r4, #0
 80007ec:	d121      	bne.n	8000832 <__aeabi_fadd+0x27a>
 80007ee:	2d00      	cmp	r5, #0
 80007f0:	d166      	bne.n	80008c0 <__aeabi_fadd+0x308>
 80007f2:	28ff      	cmp	r0, #255	; 0xff
 80007f4:	d1e9      	bne.n	80007ca <__aeabi_fadd+0x212>
 80007f6:	001d      	movs	r5, r3
 80007f8:	e787      	b.n	800070a <__aeabi_fadd+0x152>
 80007fa:	2301      	movs	r3, #1
 80007fc:	e752      	b.n	80006a4 <__aeabi_fadd+0xec>
 80007fe:	1c7a      	adds	r2, r7, #1
 8000800:	d0a7      	beq.n	8000752 <__aeabi_fadd+0x19a>
 8000802:	43fa      	mvns	r2, r7
 8000804:	28ff      	cmp	r0, #255	; 0xff
 8000806:	d199      	bne.n	800073c <__aeabi_fadd+0x184>
 8000808:	000a      	movs	r2, r1
 800080a:	001d      	movs	r5, r3
 800080c:	24ff      	movs	r4, #255	; 0xff
 800080e:	e6f1      	b.n	80005f4 <__aeabi_fadd+0x3c>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d121      	bne.n	8000858 <__aeabi_fadd+0x2a0>
 8000814:	2d00      	cmp	r5, #0
 8000816:	d04f      	beq.n	80008b8 <__aeabi_fadd+0x300>
 8000818:	2b00      	cmp	r3, #0
 800081a:	d04c      	beq.n	80008b6 <__aeabi_fadd+0x2fe>
 800081c:	18ed      	adds	r5, r5, r3
 800081e:	016b      	lsls	r3, r5, #5
 8000820:	d59e      	bpl.n	8000760 <__aeabi_fadd+0x1a8>
 8000822:	4b31      	ldr	r3, [pc, #196]	; (80008e8 <__aeabi_fadd+0x330>)
 8000824:	3607      	adds	r6, #7
 8000826:	402e      	ands	r6, r5
 8000828:	2401      	movs	r4, #1
 800082a:	401d      	ands	r5, r3
 800082c:	e754      	b.n	80006d8 <__aeabi_fadd+0x120>
 800082e:	2301      	movs	r3, #1
 8000830:	e718      	b.n	8000664 <__aeabi_fadd+0xac>
 8000832:	28ff      	cmp	r0, #255	; 0xff
 8000834:	d0df      	beq.n	80007f6 <__aeabi_fadd+0x23e>
 8000836:	2480      	movs	r4, #128	; 0x80
 8000838:	04e4      	lsls	r4, r4, #19
 800083a:	427f      	negs	r7, r7
 800083c:	4325      	orrs	r5, r4
 800083e:	2f1b      	cmp	r7, #27
 8000840:	dc4d      	bgt.n	80008de <__aeabi_fadd+0x326>
 8000842:	2620      	movs	r6, #32
 8000844:	1bf6      	subs	r6, r6, r7
 8000846:	002c      	movs	r4, r5
 8000848:	40b5      	lsls	r5, r6
 800084a:	40fc      	lsrs	r4, r7
 800084c:	1e6a      	subs	r2, r5, #1
 800084e:	4195      	sbcs	r5, r2
 8000850:	4325      	orrs	r5, r4
 8000852:	18ed      	adds	r5, r5, r3
 8000854:	0004      	movs	r4, r0
 8000856:	e706      	b.n	8000666 <__aeabi_fadd+0xae>
 8000858:	2d00      	cmp	r5, #0
 800085a:	d0cc      	beq.n	80007f6 <__aeabi_fadd+0x23e>
 800085c:	2b00      	cmp	r3, #0
 800085e:	d100      	bne.n	8000862 <__aeabi_fadd+0x2aa>
 8000860:	e753      	b.n	800070a <__aeabi_fadd+0x152>
 8000862:	2180      	movs	r1, #128	; 0x80
 8000864:	4660      	mov	r0, ip
 8000866:	03c9      	lsls	r1, r1, #15
 8000868:	4208      	tst	r0, r1
 800086a:	d003      	beq.n	8000874 <__aeabi_fadd+0x2bc>
 800086c:	4640      	mov	r0, r8
 800086e:	4208      	tst	r0, r1
 8000870:	d100      	bne.n	8000874 <__aeabi_fadd+0x2bc>
 8000872:	001d      	movs	r5, r3
 8000874:	2101      	movs	r1, #1
 8000876:	4011      	ands	r1, r2
 8000878:	e747      	b.n	800070a <__aeabi_fadd+0x152>
 800087a:	2b00      	cmp	r3, #0
 800087c:	d100      	bne.n	8000880 <__aeabi_fadd+0x2c8>
 800087e:	e6b9      	b.n	80005f4 <__aeabi_fadd+0x3c>
 8000880:	1aea      	subs	r2, r5, r3
 8000882:	0150      	lsls	r0, r2, #5
 8000884:	d525      	bpl.n	80008d2 <__aeabi_fadd+0x31a>
 8000886:	2607      	movs	r6, #7
 8000888:	1b5d      	subs	r5, r3, r5
 800088a:	402e      	ands	r6, r5
 800088c:	4689      	mov	r9, r1
 800088e:	e723      	b.n	80006d8 <__aeabi_fadd+0x120>
 8000890:	24ff      	movs	r4, #255	; 0xff
 8000892:	2b00      	cmp	r3, #0
 8000894:	d100      	bne.n	8000898 <__aeabi_fadd+0x2e0>
 8000896:	e6ad      	b.n	80005f4 <__aeabi_fadd+0x3c>
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	4660      	mov	r0, ip
 800089c:	03d2      	lsls	r2, r2, #15
 800089e:	4210      	tst	r0, r2
 80008a0:	d004      	beq.n	80008ac <__aeabi_fadd+0x2f4>
 80008a2:	4640      	mov	r0, r8
 80008a4:	4210      	tst	r0, r2
 80008a6:	d101      	bne.n	80008ac <__aeabi_fadd+0x2f4>
 80008a8:	001d      	movs	r5, r3
 80008aa:	4689      	mov	r9, r1
 80008ac:	2201      	movs	r2, #1
 80008ae:	464b      	mov	r3, r9
 80008b0:	24ff      	movs	r4, #255	; 0xff
 80008b2:	401a      	ands	r2, r3
 80008b4:	e69e      	b.n	80005f4 <__aeabi_fadd+0x3c>
 80008b6:	002b      	movs	r3, r5
 80008b8:	08dd      	lsrs	r5, r3, #3
 80008ba:	000a      	movs	r2, r1
 80008bc:	2400      	movs	r4, #0
 80008be:	e69d      	b.n	80005fc <__aeabi_fadd+0x44>
 80008c0:	1c7a      	adds	r2, r7, #1
 80008c2:	d0c6      	beq.n	8000852 <__aeabi_fadd+0x29a>
 80008c4:	43ff      	mvns	r7, r7
 80008c6:	28ff      	cmp	r0, #255	; 0xff
 80008c8:	d1b9      	bne.n	800083e <__aeabi_fadd+0x286>
 80008ca:	001d      	movs	r5, r3
 80008cc:	e71d      	b.n	800070a <__aeabi_fadd+0x152>
 80008ce:	2501      	movs	r5, #1
 80008d0:	e73f      	b.n	8000752 <__aeabi_fadd+0x19a>
 80008d2:	1e15      	subs	r5, r2, #0
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fadd+0x320>
 80008d6:	e744      	b.n	8000762 <__aeabi_fadd+0x1aa>
 80008d8:	2200      	movs	r2, #0
 80008da:	2300      	movs	r3, #0
 80008dc:	e691      	b.n	8000602 <__aeabi_fadd+0x4a>
 80008de:	2501      	movs	r5, #1
 80008e0:	e7b7      	b.n	8000852 <__aeabi_fadd+0x29a>
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	7dffffff 	.word	0x7dffffff
 80008e8:	fbffffff 	.word	0xfbffffff

080008ec <__aeabi_fmul>:
 80008ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ee:	464e      	mov	r6, r9
 80008f0:	4657      	mov	r7, sl
 80008f2:	4645      	mov	r5, r8
 80008f4:	46de      	mov	lr, fp
 80008f6:	b5e0      	push	{r5, r6, r7, lr}
 80008f8:	0243      	lsls	r3, r0, #9
 80008fa:	0a5b      	lsrs	r3, r3, #9
 80008fc:	0045      	lsls	r5, r0, #1
 80008fe:	b083      	sub	sp, #12
 8000900:	1c0f      	adds	r7, r1, #0
 8000902:	4699      	mov	r9, r3
 8000904:	0e2d      	lsrs	r5, r5, #24
 8000906:	0fc6      	lsrs	r6, r0, #31
 8000908:	2d00      	cmp	r5, #0
 800090a:	d057      	beq.n	80009bc <__aeabi_fmul+0xd0>
 800090c:	2dff      	cmp	r5, #255	; 0xff
 800090e:	d024      	beq.n	800095a <__aeabi_fmul+0x6e>
 8000910:	2080      	movs	r0, #128	; 0x80
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	04c0      	lsls	r0, r0, #19
 8000916:	4318      	orrs	r0, r3
 8000918:	2300      	movs	r3, #0
 800091a:	4681      	mov	r9, r0
 800091c:	469a      	mov	sl, r3
 800091e:	469b      	mov	fp, r3
 8000920:	3d7f      	subs	r5, #127	; 0x7f
 8000922:	027c      	lsls	r4, r7, #9
 8000924:	007a      	lsls	r2, r7, #1
 8000926:	0ffb      	lsrs	r3, r7, #31
 8000928:	0a64      	lsrs	r4, r4, #9
 800092a:	0e12      	lsrs	r2, r2, #24
 800092c:	4698      	mov	r8, r3
 800092e:	d023      	beq.n	8000978 <__aeabi_fmul+0x8c>
 8000930:	2aff      	cmp	r2, #255	; 0xff
 8000932:	d04b      	beq.n	80009cc <__aeabi_fmul+0xe0>
 8000934:	00e3      	lsls	r3, r4, #3
 8000936:	2480      	movs	r4, #128	; 0x80
 8000938:	2000      	movs	r0, #0
 800093a:	04e4      	lsls	r4, r4, #19
 800093c:	3a7f      	subs	r2, #127	; 0x7f
 800093e:	431c      	orrs	r4, r3
 8000940:	18ad      	adds	r5, r5, r2
 8000942:	1c6b      	adds	r3, r5, #1
 8000944:	4647      	mov	r7, r8
 8000946:	9301      	str	r3, [sp, #4]
 8000948:	4653      	mov	r3, sl
 800094a:	4077      	eors	r7, r6
 800094c:	003a      	movs	r2, r7
 800094e:	2b0f      	cmp	r3, #15
 8000950:	d848      	bhi.n	80009e4 <__aeabi_fmul+0xf8>
 8000952:	497d      	ldr	r1, [pc, #500]	; (8000b48 <__aeabi_fmul+0x25c>)
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	58cb      	ldr	r3, [r1, r3]
 8000958:	469f      	mov	pc, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d000      	beq.n	8000960 <__aeabi_fmul+0x74>
 800095e:	e085      	b.n	8000a6c <__aeabi_fmul+0x180>
 8000960:	3308      	adds	r3, #8
 8000962:	469a      	mov	sl, r3
 8000964:	3b06      	subs	r3, #6
 8000966:	469b      	mov	fp, r3
 8000968:	027c      	lsls	r4, r7, #9
 800096a:	007a      	lsls	r2, r7, #1
 800096c:	0ffb      	lsrs	r3, r7, #31
 800096e:	25ff      	movs	r5, #255	; 0xff
 8000970:	0a64      	lsrs	r4, r4, #9
 8000972:	0e12      	lsrs	r2, r2, #24
 8000974:	4698      	mov	r8, r3
 8000976:	d1db      	bne.n	8000930 <__aeabi_fmul+0x44>
 8000978:	2c00      	cmp	r4, #0
 800097a:	d000      	beq.n	800097e <__aeabi_fmul+0x92>
 800097c:	e090      	b.n	8000aa0 <__aeabi_fmul+0x1b4>
 800097e:	4652      	mov	r2, sl
 8000980:	2301      	movs	r3, #1
 8000982:	431a      	orrs	r2, r3
 8000984:	4692      	mov	sl, r2
 8000986:	2001      	movs	r0, #1
 8000988:	e7db      	b.n	8000942 <__aeabi_fmul+0x56>
 800098a:	464c      	mov	r4, r9
 800098c:	4658      	mov	r0, fp
 800098e:	0017      	movs	r7, r2
 8000990:	2802      	cmp	r0, #2
 8000992:	d024      	beq.n	80009de <__aeabi_fmul+0xf2>
 8000994:	2803      	cmp	r0, #3
 8000996:	d100      	bne.n	800099a <__aeabi_fmul+0xae>
 8000998:	e0cf      	b.n	8000b3a <__aeabi_fmul+0x24e>
 800099a:	2200      	movs	r2, #0
 800099c:	2300      	movs	r3, #0
 800099e:	2801      	cmp	r0, #1
 80009a0:	d14d      	bne.n	8000a3e <__aeabi_fmul+0x152>
 80009a2:	0258      	lsls	r0, r3, #9
 80009a4:	05d2      	lsls	r2, r2, #23
 80009a6:	0a40      	lsrs	r0, r0, #9
 80009a8:	07ff      	lsls	r7, r7, #31
 80009aa:	4310      	orrs	r0, r2
 80009ac:	4338      	orrs	r0, r7
 80009ae:	b003      	add	sp, #12
 80009b0:	bc3c      	pop	{r2, r3, r4, r5}
 80009b2:	4690      	mov	r8, r2
 80009b4:	4699      	mov	r9, r3
 80009b6:	46a2      	mov	sl, r4
 80009b8:	46ab      	mov	fp, r5
 80009ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d15b      	bne.n	8000a78 <__aeabi_fmul+0x18c>
 80009c0:	2304      	movs	r3, #4
 80009c2:	469a      	mov	sl, r3
 80009c4:	3b03      	subs	r3, #3
 80009c6:	2500      	movs	r5, #0
 80009c8:	469b      	mov	fp, r3
 80009ca:	e7aa      	b.n	8000922 <__aeabi_fmul+0x36>
 80009cc:	35ff      	adds	r5, #255	; 0xff
 80009ce:	2c00      	cmp	r4, #0
 80009d0:	d160      	bne.n	8000a94 <__aeabi_fmul+0x1a8>
 80009d2:	4652      	mov	r2, sl
 80009d4:	2302      	movs	r3, #2
 80009d6:	431a      	orrs	r2, r3
 80009d8:	4692      	mov	sl, r2
 80009da:	2002      	movs	r0, #2
 80009dc:	e7b1      	b.n	8000942 <__aeabi_fmul+0x56>
 80009de:	22ff      	movs	r2, #255	; 0xff
 80009e0:	2300      	movs	r3, #0
 80009e2:	e7de      	b.n	80009a2 <__aeabi_fmul+0xb6>
 80009e4:	464b      	mov	r3, r9
 80009e6:	0c1b      	lsrs	r3, r3, #16
 80009e8:	469c      	mov	ip, r3
 80009ea:	464b      	mov	r3, r9
 80009ec:	0426      	lsls	r6, r4, #16
 80009ee:	0c36      	lsrs	r6, r6, #16
 80009f0:	0418      	lsls	r0, r3, #16
 80009f2:	4661      	mov	r1, ip
 80009f4:	0033      	movs	r3, r6
 80009f6:	0c22      	lsrs	r2, r4, #16
 80009f8:	4664      	mov	r4, ip
 80009fa:	0c00      	lsrs	r0, r0, #16
 80009fc:	4343      	muls	r3, r0
 80009fe:	434e      	muls	r6, r1
 8000a00:	4350      	muls	r0, r2
 8000a02:	4354      	muls	r4, r2
 8000a04:	1980      	adds	r0, r0, r6
 8000a06:	0c1a      	lsrs	r2, r3, #16
 8000a08:	1812      	adds	r2, r2, r0
 8000a0a:	4296      	cmp	r6, r2
 8000a0c:	d903      	bls.n	8000a16 <__aeabi_fmul+0x12a>
 8000a0e:	2180      	movs	r1, #128	; 0x80
 8000a10:	0249      	lsls	r1, r1, #9
 8000a12:	468c      	mov	ip, r1
 8000a14:	4464      	add	r4, ip
 8000a16:	041b      	lsls	r3, r3, #16
 8000a18:	0c1b      	lsrs	r3, r3, #16
 8000a1a:	0410      	lsls	r0, r2, #16
 8000a1c:	18c0      	adds	r0, r0, r3
 8000a1e:	0183      	lsls	r3, r0, #6
 8000a20:	1e5e      	subs	r6, r3, #1
 8000a22:	41b3      	sbcs	r3, r6
 8000a24:	0e80      	lsrs	r0, r0, #26
 8000a26:	4318      	orrs	r0, r3
 8000a28:	0c13      	lsrs	r3, r2, #16
 8000a2a:	191b      	adds	r3, r3, r4
 8000a2c:	019b      	lsls	r3, r3, #6
 8000a2e:	4303      	orrs	r3, r0
 8000a30:	001c      	movs	r4, r3
 8000a32:	0123      	lsls	r3, r4, #4
 8000a34:	d579      	bpl.n	8000b2a <__aeabi_fmul+0x23e>
 8000a36:	2301      	movs	r3, #1
 8000a38:	0862      	lsrs	r2, r4, #1
 8000a3a:	401c      	ands	r4, r3
 8000a3c:	4314      	orrs	r4, r2
 8000a3e:	9a01      	ldr	r2, [sp, #4]
 8000a40:	327f      	adds	r2, #127	; 0x7f
 8000a42:	2a00      	cmp	r2, #0
 8000a44:	dd4d      	ble.n	8000ae2 <__aeabi_fmul+0x1f6>
 8000a46:	0763      	lsls	r3, r4, #29
 8000a48:	d004      	beq.n	8000a54 <__aeabi_fmul+0x168>
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	4023      	ands	r3, r4
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	d000      	beq.n	8000a54 <__aeabi_fmul+0x168>
 8000a52:	3404      	adds	r4, #4
 8000a54:	0123      	lsls	r3, r4, #4
 8000a56:	d503      	bpl.n	8000a60 <__aeabi_fmul+0x174>
 8000a58:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <__aeabi_fmul+0x260>)
 8000a5a:	9a01      	ldr	r2, [sp, #4]
 8000a5c:	401c      	ands	r4, r3
 8000a5e:	3280      	adds	r2, #128	; 0x80
 8000a60:	2afe      	cmp	r2, #254	; 0xfe
 8000a62:	dcbc      	bgt.n	80009de <__aeabi_fmul+0xf2>
 8000a64:	01a3      	lsls	r3, r4, #6
 8000a66:	0a5b      	lsrs	r3, r3, #9
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	e79a      	b.n	80009a2 <__aeabi_fmul+0xb6>
 8000a6c:	230c      	movs	r3, #12
 8000a6e:	469a      	mov	sl, r3
 8000a70:	3b09      	subs	r3, #9
 8000a72:	25ff      	movs	r5, #255	; 0xff
 8000a74:	469b      	mov	fp, r3
 8000a76:	e754      	b.n	8000922 <__aeabi_fmul+0x36>
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 fa97 	bl	8000fac <__clzsi2>
 8000a7e:	464a      	mov	r2, r9
 8000a80:	1f43      	subs	r3, r0, #5
 8000a82:	2576      	movs	r5, #118	; 0x76
 8000a84:	409a      	lsls	r2, r3
 8000a86:	2300      	movs	r3, #0
 8000a88:	426d      	negs	r5, r5
 8000a8a:	4691      	mov	r9, r2
 8000a8c:	1a2d      	subs	r5, r5, r0
 8000a8e:	469a      	mov	sl, r3
 8000a90:	469b      	mov	fp, r3
 8000a92:	e746      	b.n	8000922 <__aeabi_fmul+0x36>
 8000a94:	4652      	mov	r2, sl
 8000a96:	2303      	movs	r3, #3
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	4692      	mov	sl, r2
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	e750      	b.n	8000942 <__aeabi_fmul+0x56>
 8000aa0:	0020      	movs	r0, r4
 8000aa2:	f000 fa83 	bl	8000fac <__clzsi2>
 8000aa6:	1f43      	subs	r3, r0, #5
 8000aa8:	1a2d      	subs	r5, r5, r0
 8000aaa:	409c      	lsls	r4, r3
 8000aac:	3d76      	subs	r5, #118	; 0x76
 8000aae:	2000      	movs	r0, #0
 8000ab0:	e747      	b.n	8000942 <__aeabi_fmul+0x56>
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	2700      	movs	r7, #0
 8000ab6:	03db      	lsls	r3, r3, #15
 8000ab8:	22ff      	movs	r2, #255	; 0xff
 8000aba:	e772      	b.n	80009a2 <__aeabi_fmul+0xb6>
 8000abc:	4642      	mov	r2, r8
 8000abe:	e766      	b.n	800098e <__aeabi_fmul+0xa2>
 8000ac0:	464c      	mov	r4, r9
 8000ac2:	0032      	movs	r2, r6
 8000ac4:	4658      	mov	r0, fp
 8000ac6:	e762      	b.n	800098e <__aeabi_fmul+0xa2>
 8000ac8:	2380      	movs	r3, #128	; 0x80
 8000aca:	464a      	mov	r2, r9
 8000acc:	03db      	lsls	r3, r3, #15
 8000ace:	421a      	tst	r2, r3
 8000ad0:	d022      	beq.n	8000b18 <__aeabi_fmul+0x22c>
 8000ad2:	421c      	tst	r4, r3
 8000ad4:	d120      	bne.n	8000b18 <__aeabi_fmul+0x22c>
 8000ad6:	4323      	orrs	r3, r4
 8000ad8:	025b      	lsls	r3, r3, #9
 8000ada:	0a5b      	lsrs	r3, r3, #9
 8000adc:	4647      	mov	r7, r8
 8000ade:	22ff      	movs	r2, #255	; 0xff
 8000ae0:	e75f      	b.n	80009a2 <__aeabi_fmul+0xb6>
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	1a9a      	subs	r2, r3, r2
 8000ae6:	2a1b      	cmp	r2, #27
 8000ae8:	dc21      	bgt.n	8000b2e <__aeabi_fmul+0x242>
 8000aea:	0023      	movs	r3, r4
 8000aec:	9901      	ldr	r1, [sp, #4]
 8000aee:	40d3      	lsrs	r3, r2
 8000af0:	319e      	adds	r1, #158	; 0x9e
 8000af2:	408c      	lsls	r4, r1
 8000af4:	001a      	movs	r2, r3
 8000af6:	0023      	movs	r3, r4
 8000af8:	1e5c      	subs	r4, r3, #1
 8000afa:	41a3      	sbcs	r3, r4
 8000afc:	4313      	orrs	r3, r2
 8000afe:	075a      	lsls	r2, r3, #29
 8000b00:	d004      	beq.n	8000b0c <__aeabi_fmul+0x220>
 8000b02:	220f      	movs	r2, #15
 8000b04:	401a      	ands	r2, r3
 8000b06:	2a04      	cmp	r2, #4
 8000b08:	d000      	beq.n	8000b0c <__aeabi_fmul+0x220>
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	015a      	lsls	r2, r3, #5
 8000b0e:	d411      	bmi.n	8000b34 <__aeabi_fmul+0x248>
 8000b10:	019b      	lsls	r3, r3, #6
 8000b12:	0a5b      	lsrs	r3, r3, #9
 8000b14:	2200      	movs	r2, #0
 8000b16:	e744      	b.n	80009a2 <__aeabi_fmul+0xb6>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	025b      	lsls	r3, r3, #9
 8000b22:	0a5b      	lsrs	r3, r3, #9
 8000b24:	0037      	movs	r7, r6
 8000b26:	22ff      	movs	r2, #255	; 0xff
 8000b28:	e73b      	b.n	80009a2 <__aeabi_fmul+0xb6>
 8000b2a:	9501      	str	r5, [sp, #4]
 8000b2c:	e787      	b.n	8000a3e <__aeabi_fmul+0x152>
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2300      	movs	r3, #0
 8000b32:	e736      	b.n	80009a2 <__aeabi_fmul+0xb6>
 8000b34:	2201      	movs	r2, #1
 8000b36:	2300      	movs	r3, #0
 8000b38:	e733      	b.n	80009a2 <__aeabi_fmul+0xb6>
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	03db      	lsls	r3, r3, #15
 8000b3e:	4323      	orrs	r3, r4
 8000b40:	025b      	lsls	r3, r3, #9
 8000b42:	0a5b      	lsrs	r3, r3, #9
 8000b44:	22ff      	movs	r2, #255	; 0xff
 8000b46:	e72c      	b.n	80009a2 <__aeabi_fmul+0xb6>
 8000b48:	080054ac 	.word	0x080054ac
 8000b4c:	f7ffffff 	.word	0xf7ffffff

08000b50 <__aeabi_fsub>:
 8000b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b52:	4647      	mov	r7, r8
 8000b54:	46ce      	mov	lr, r9
 8000b56:	0044      	lsls	r4, r0, #1
 8000b58:	0fc2      	lsrs	r2, r0, #31
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	0247      	lsls	r7, r0, #9
 8000b5e:	0248      	lsls	r0, r1, #9
 8000b60:	0a40      	lsrs	r0, r0, #9
 8000b62:	4684      	mov	ip, r0
 8000b64:	4666      	mov	r6, ip
 8000b66:	0048      	lsls	r0, r1, #1
 8000b68:	0a7f      	lsrs	r7, r7, #9
 8000b6a:	0e24      	lsrs	r4, r4, #24
 8000b6c:	00f6      	lsls	r6, r6, #3
 8000b6e:	0025      	movs	r5, r4
 8000b70:	4690      	mov	r8, r2
 8000b72:	00fb      	lsls	r3, r7, #3
 8000b74:	0e00      	lsrs	r0, r0, #24
 8000b76:	0fc9      	lsrs	r1, r1, #31
 8000b78:	46b1      	mov	r9, r6
 8000b7a:	28ff      	cmp	r0, #255	; 0xff
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fsub+0x30>
 8000b7e:	e085      	b.n	8000c8c <__aeabi_fsub+0x13c>
 8000b80:	2601      	movs	r6, #1
 8000b82:	4071      	eors	r1, r6
 8000b84:	1a26      	subs	r6, r4, r0
 8000b86:	4291      	cmp	r1, r2
 8000b88:	d057      	beq.n	8000c3a <__aeabi_fsub+0xea>
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	dd43      	ble.n	8000c16 <__aeabi_fsub+0xc6>
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d000      	beq.n	8000b94 <__aeabi_fsub+0x44>
 8000b92:	e07f      	b.n	8000c94 <__aeabi_fsub+0x144>
 8000b94:	4649      	mov	r1, r9
 8000b96:	2900      	cmp	r1, #0
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fsub+0x4c>
 8000b9a:	e0aa      	b.n	8000cf2 <__aeabi_fsub+0x1a2>
 8000b9c:	3e01      	subs	r6, #1
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d000      	beq.n	8000ba4 <__aeabi_fsub+0x54>
 8000ba2:	e0f7      	b.n	8000d94 <__aeabi_fsub+0x244>
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	015a      	lsls	r2, r3, #5
 8000ba8:	d400      	bmi.n	8000bac <__aeabi_fsub+0x5c>
 8000baa:	e08b      	b.n	8000cc4 <__aeabi_fsub+0x174>
 8000bac:	019b      	lsls	r3, r3, #6
 8000bae:	099c      	lsrs	r4, r3, #6
 8000bb0:	0020      	movs	r0, r4
 8000bb2:	f000 f9fb 	bl	8000fac <__clzsi2>
 8000bb6:	3805      	subs	r0, #5
 8000bb8:	4084      	lsls	r4, r0
 8000bba:	4285      	cmp	r5, r0
 8000bbc:	dd00      	ble.n	8000bc0 <__aeabi_fsub+0x70>
 8000bbe:	e0d3      	b.n	8000d68 <__aeabi_fsub+0x218>
 8000bc0:	1b45      	subs	r5, r0, r5
 8000bc2:	0023      	movs	r3, r4
 8000bc4:	2020      	movs	r0, #32
 8000bc6:	3501      	adds	r5, #1
 8000bc8:	40eb      	lsrs	r3, r5
 8000bca:	1b45      	subs	r5, r0, r5
 8000bcc:	40ac      	lsls	r4, r5
 8000bce:	1e62      	subs	r2, r4, #1
 8000bd0:	4194      	sbcs	r4, r2
 8000bd2:	4323      	orrs	r3, r4
 8000bd4:	2407      	movs	r4, #7
 8000bd6:	2500      	movs	r5, #0
 8000bd8:	401c      	ands	r4, r3
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4641      	mov	r1, r8
 8000bde:	400a      	ands	r2, r1
 8000be0:	2c00      	cmp	r4, #0
 8000be2:	d004      	beq.n	8000bee <__aeabi_fsub+0x9e>
 8000be4:	210f      	movs	r1, #15
 8000be6:	4019      	ands	r1, r3
 8000be8:	2904      	cmp	r1, #4
 8000bea:	d000      	beq.n	8000bee <__aeabi_fsub+0x9e>
 8000bec:	3304      	adds	r3, #4
 8000bee:	0159      	lsls	r1, r3, #5
 8000bf0:	d400      	bmi.n	8000bf4 <__aeabi_fsub+0xa4>
 8000bf2:	e080      	b.n	8000cf6 <__aeabi_fsub+0x1a6>
 8000bf4:	3501      	adds	r5, #1
 8000bf6:	b2ec      	uxtb	r4, r5
 8000bf8:	2dff      	cmp	r5, #255	; 0xff
 8000bfa:	d000      	beq.n	8000bfe <__aeabi_fsub+0xae>
 8000bfc:	e0a3      	b.n	8000d46 <__aeabi_fsub+0x1f6>
 8000bfe:	24ff      	movs	r4, #255	; 0xff
 8000c00:	2300      	movs	r3, #0
 8000c02:	025b      	lsls	r3, r3, #9
 8000c04:	05e4      	lsls	r4, r4, #23
 8000c06:	0a58      	lsrs	r0, r3, #9
 8000c08:	07d2      	lsls	r2, r2, #31
 8000c0a:	4320      	orrs	r0, r4
 8000c0c:	4310      	orrs	r0, r2
 8000c0e:	bc0c      	pop	{r2, r3}
 8000c10:	4690      	mov	r8, r2
 8000c12:	4699      	mov	r9, r3
 8000c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d174      	bne.n	8000d04 <__aeabi_fsub+0x1b4>
 8000c1a:	1c60      	adds	r0, r4, #1
 8000c1c:	b2c0      	uxtb	r0, r0
 8000c1e:	2801      	cmp	r0, #1
 8000c20:	dc00      	bgt.n	8000c24 <__aeabi_fsub+0xd4>
 8000c22:	e0a7      	b.n	8000d74 <__aeabi_fsub+0x224>
 8000c24:	464a      	mov	r2, r9
 8000c26:	1a9c      	subs	r4, r3, r2
 8000c28:	0162      	lsls	r2, r4, #5
 8000c2a:	d500      	bpl.n	8000c2e <__aeabi_fsub+0xde>
 8000c2c:	e0b6      	b.n	8000d9c <__aeabi_fsub+0x24c>
 8000c2e:	2c00      	cmp	r4, #0
 8000c30:	d1be      	bne.n	8000bb0 <__aeabi_fsub+0x60>
 8000c32:	2200      	movs	r2, #0
 8000c34:	2400      	movs	r4, #0
 8000c36:	2300      	movs	r3, #0
 8000c38:	e7e3      	b.n	8000c02 <__aeabi_fsub+0xb2>
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	dc00      	bgt.n	8000c40 <__aeabi_fsub+0xf0>
 8000c3e:	e085      	b.n	8000d4c <__aeabi_fsub+0x1fc>
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d046      	beq.n	8000cd2 <__aeabi_fsub+0x182>
 8000c44:	2cff      	cmp	r4, #255	; 0xff
 8000c46:	d049      	beq.n	8000cdc <__aeabi_fsub+0x18c>
 8000c48:	2280      	movs	r2, #128	; 0x80
 8000c4a:	4648      	mov	r0, r9
 8000c4c:	04d2      	lsls	r2, r2, #19
 8000c4e:	4310      	orrs	r0, r2
 8000c50:	4681      	mov	r9, r0
 8000c52:	2201      	movs	r2, #1
 8000c54:	2e1b      	cmp	r6, #27
 8000c56:	dc09      	bgt.n	8000c6c <__aeabi_fsub+0x11c>
 8000c58:	2020      	movs	r0, #32
 8000c5a:	464c      	mov	r4, r9
 8000c5c:	1b80      	subs	r0, r0, r6
 8000c5e:	4084      	lsls	r4, r0
 8000c60:	464a      	mov	r2, r9
 8000c62:	0020      	movs	r0, r4
 8000c64:	40f2      	lsrs	r2, r6
 8000c66:	1e44      	subs	r4, r0, #1
 8000c68:	41a0      	sbcs	r0, r4
 8000c6a:	4302      	orrs	r2, r0
 8000c6c:	189b      	adds	r3, r3, r2
 8000c6e:	015a      	lsls	r2, r3, #5
 8000c70:	d528      	bpl.n	8000cc4 <__aeabi_fsub+0x174>
 8000c72:	3501      	adds	r5, #1
 8000c74:	2dff      	cmp	r5, #255	; 0xff
 8000c76:	d100      	bne.n	8000c7a <__aeabi_fsub+0x12a>
 8000c78:	e0a8      	b.n	8000dcc <__aeabi_fsub+0x27c>
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2407      	movs	r4, #7
 8000c7e:	4994      	ldr	r1, [pc, #592]	; (8000ed0 <__aeabi_fsub+0x380>)
 8000c80:	401a      	ands	r2, r3
 8000c82:	085b      	lsrs	r3, r3, #1
 8000c84:	400b      	ands	r3, r1
 8000c86:	4313      	orrs	r3, r2
 8000c88:	401c      	ands	r4, r3
 8000c8a:	e7a6      	b.n	8000bda <__aeabi_fsub+0x8a>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_fsub+0x142>
 8000c90:	e778      	b.n	8000b84 <__aeabi_fsub+0x34>
 8000c92:	e775      	b.n	8000b80 <__aeabi_fsub+0x30>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d054      	beq.n	8000d42 <__aeabi_fsub+0x1f2>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4649      	mov	r1, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4311      	orrs	r1, r2
 8000ca0:	4689      	mov	r9, r1
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x16c>
 8000ca8:	2120      	movs	r1, #32
 8000caa:	4648      	mov	r0, r9
 8000cac:	1b89      	subs	r1, r1, r6
 8000cae:	4088      	lsls	r0, r1
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0001      	movs	r1, r0
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e48      	subs	r0, r1, #1
 8000cb8:	4181      	sbcs	r1, r0
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	1a9b      	subs	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d500      	bpl.n	8000cc4 <__aeabi_fsub+0x174>
 8000cc2:	e773      	b.n	8000bac <__aeabi_fsub+0x5c>
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4641      	mov	r1, r8
 8000cc8:	400a      	ands	r2, r1
 8000cca:	0759      	lsls	r1, r3, #29
 8000ccc:	d000      	beq.n	8000cd0 <__aeabi_fsub+0x180>
 8000cce:	e789      	b.n	8000be4 <__aeabi_fsub+0x94>
 8000cd0:	e011      	b.n	8000cf6 <__aeabi_fsub+0x1a6>
 8000cd2:	4648      	mov	r0, r9
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	d158      	bne.n	8000d8a <__aeabi_fsub+0x23a>
 8000cd8:	2cff      	cmp	r4, #255	; 0xff
 8000cda:	d10c      	bne.n	8000cf6 <__aeabi_fsub+0x1a6>
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_fsub+0x194>
 8000ce2:	e78c      	b.n	8000bfe <__aeabi_fsub+0xae>
 8000ce4:	2080      	movs	r0, #128	; 0x80
 8000ce6:	03c0      	lsls	r0, r0, #15
 8000ce8:	4303      	orrs	r3, r0
 8000cea:	025b      	lsls	r3, r3, #9
 8000cec:	0a5b      	lsrs	r3, r3, #9
 8000cee:	24ff      	movs	r4, #255	; 0xff
 8000cf0:	e787      	b.n	8000c02 <__aeabi_fsub+0xb2>
 8000cf2:	2cff      	cmp	r4, #255	; 0xff
 8000cf4:	d025      	beq.n	8000d42 <__aeabi_fsub+0x1f2>
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	2dff      	cmp	r5, #255	; 0xff
 8000cfa:	d0f0      	beq.n	8000cde <__aeabi_fsub+0x18e>
 8000cfc:	025b      	lsls	r3, r3, #9
 8000cfe:	0a5b      	lsrs	r3, r3, #9
 8000d00:	b2ec      	uxtb	r4, r5
 8000d02:	e77e      	b.n	8000c02 <__aeabi_fsub+0xb2>
 8000d04:	2c00      	cmp	r4, #0
 8000d06:	d04d      	beq.n	8000da4 <__aeabi_fsub+0x254>
 8000d08:	28ff      	cmp	r0, #255	; 0xff
 8000d0a:	d018      	beq.n	8000d3e <__aeabi_fsub+0x1ee>
 8000d0c:	2480      	movs	r4, #128	; 0x80
 8000d0e:	04e4      	lsls	r4, r4, #19
 8000d10:	4272      	negs	r2, r6
 8000d12:	4323      	orrs	r3, r4
 8000d14:	2a1b      	cmp	r2, #27
 8000d16:	dd00      	ble.n	8000d1a <__aeabi_fsub+0x1ca>
 8000d18:	e0c4      	b.n	8000ea4 <__aeabi_fsub+0x354>
 8000d1a:	001c      	movs	r4, r3
 8000d1c:	2520      	movs	r5, #32
 8000d1e:	40d4      	lsrs	r4, r2
 8000d20:	1aaa      	subs	r2, r5, r2
 8000d22:	4093      	lsls	r3, r2
 8000d24:	1e5a      	subs	r2, r3, #1
 8000d26:	4193      	sbcs	r3, r2
 8000d28:	4323      	orrs	r3, r4
 8000d2a:	464a      	mov	r2, r9
 8000d2c:	0005      	movs	r5, r0
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	4688      	mov	r8, r1
 8000d32:	e738      	b.n	8000ba6 <__aeabi_fsub+0x56>
 8000d34:	1c72      	adds	r2, r6, #1
 8000d36:	d0f8      	beq.n	8000d2a <__aeabi_fsub+0x1da>
 8000d38:	43f2      	mvns	r2, r6
 8000d3a:	28ff      	cmp	r0, #255	; 0xff
 8000d3c:	d1ea      	bne.n	8000d14 <__aeabi_fsub+0x1c4>
 8000d3e:	000a      	movs	r2, r1
 8000d40:	464b      	mov	r3, r9
 8000d42:	25ff      	movs	r5, #255	; 0xff
 8000d44:	e7d7      	b.n	8000cf6 <__aeabi_fsub+0x1a6>
 8000d46:	019b      	lsls	r3, r3, #6
 8000d48:	0a5b      	lsrs	r3, r3, #9
 8000d4a:	e75a      	b.n	8000c02 <__aeabi_fsub+0xb2>
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	d141      	bne.n	8000dd4 <__aeabi_fsub+0x284>
 8000d50:	1c65      	adds	r5, r4, #1
 8000d52:	b2e9      	uxtb	r1, r5
 8000d54:	2901      	cmp	r1, #1
 8000d56:	dd45      	ble.n	8000de4 <__aeabi_fsub+0x294>
 8000d58:	2dff      	cmp	r5, #255	; 0xff
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_fsub+0x20e>
 8000d5c:	e74f      	b.n	8000bfe <__aeabi_fsub+0xae>
 8000d5e:	2407      	movs	r4, #7
 8000d60:	444b      	add	r3, r9
 8000d62:	085b      	lsrs	r3, r3, #1
 8000d64:	401c      	ands	r4, r3
 8000d66:	e738      	b.n	8000bda <__aeabi_fsub+0x8a>
 8000d68:	2207      	movs	r2, #7
 8000d6a:	4b5a      	ldr	r3, [pc, #360]	; (8000ed4 <__aeabi_fsub+0x384>)
 8000d6c:	1a2d      	subs	r5, r5, r0
 8000d6e:	4023      	ands	r3, r4
 8000d70:	4014      	ands	r4, r2
 8000d72:	e732      	b.n	8000bda <__aeabi_fsub+0x8a>
 8000d74:	2c00      	cmp	r4, #0
 8000d76:	d11d      	bne.n	8000db4 <__aeabi_fsub+0x264>
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d17a      	bne.n	8000e72 <__aeabi_fsub+0x322>
 8000d7c:	464b      	mov	r3, r9
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d100      	bne.n	8000d84 <__aeabi_fsub+0x234>
 8000d82:	e091      	b.n	8000ea8 <__aeabi_fsub+0x358>
 8000d84:	000a      	movs	r2, r1
 8000d86:	2500      	movs	r5, #0
 8000d88:	e7b5      	b.n	8000cf6 <__aeabi_fsub+0x1a6>
 8000d8a:	3e01      	subs	r6, #1
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d119      	bne.n	8000dc4 <__aeabi_fsub+0x274>
 8000d90:	444b      	add	r3, r9
 8000d92:	e76c      	b.n	8000c6e <__aeabi_fsub+0x11e>
 8000d94:	2cff      	cmp	r4, #255	; 0xff
 8000d96:	d184      	bne.n	8000ca2 <__aeabi_fsub+0x152>
 8000d98:	25ff      	movs	r5, #255	; 0xff
 8000d9a:	e7ac      	b.n	8000cf6 <__aeabi_fsub+0x1a6>
 8000d9c:	464a      	mov	r2, r9
 8000d9e:	4688      	mov	r8, r1
 8000da0:	1ad4      	subs	r4, r2, r3
 8000da2:	e705      	b.n	8000bb0 <__aeabi_fsub+0x60>
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1c5      	bne.n	8000d34 <__aeabi_fsub+0x1e4>
 8000da8:	000a      	movs	r2, r1
 8000daa:	28ff      	cmp	r0, #255	; 0xff
 8000dac:	d0c8      	beq.n	8000d40 <__aeabi_fsub+0x1f0>
 8000dae:	0005      	movs	r5, r0
 8000db0:	464b      	mov	r3, r9
 8000db2:	e7a0      	b.n	8000cf6 <__aeabi_fsub+0x1a6>
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d149      	bne.n	8000e4c <__aeabi_fsub+0x2fc>
 8000db8:	464b      	mov	r3, r9
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d077      	beq.n	8000eae <__aeabi_fsub+0x35e>
 8000dbe:	000a      	movs	r2, r1
 8000dc0:	25ff      	movs	r5, #255	; 0xff
 8000dc2:	e798      	b.n	8000cf6 <__aeabi_fsub+0x1a6>
 8000dc4:	2cff      	cmp	r4, #255	; 0xff
 8000dc6:	d000      	beq.n	8000dca <__aeabi_fsub+0x27a>
 8000dc8:	e743      	b.n	8000c52 <__aeabi_fsub+0x102>
 8000dca:	e787      	b.n	8000cdc <__aeabi_fsub+0x18c>
 8000dcc:	000a      	movs	r2, r1
 8000dce:	24ff      	movs	r4, #255	; 0xff
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e716      	b.n	8000c02 <__aeabi_fsub+0xb2>
 8000dd4:	2c00      	cmp	r4, #0
 8000dd6:	d115      	bne.n	8000e04 <__aeabi_fsub+0x2b4>
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d157      	bne.n	8000e8c <__aeabi_fsub+0x33c>
 8000ddc:	28ff      	cmp	r0, #255	; 0xff
 8000dde:	d1e6      	bne.n	8000dae <__aeabi_fsub+0x25e>
 8000de0:	464b      	mov	r3, r9
 8000de2:	e77b      	b.n	8000cdc <__aeabi_fsub+0x18c>
 8000de4:	2c00      	cmp	r4, #0
 8000de6:	d120      	bne.n	8000e2a <__aeabi_fsub+0x2da>
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d057      	beq.n	8000e9c <__aeabi_fsub+0x34c>
 8000dec:	4649      	mov	r1, r9
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d053      	beq.n	8000e9a <__aeabi_fsub+0x34a>
 8000df2:	444b      	add	r3, r9
 8000df4:	015a      	lsls	r2, r3, #5
 8000df6:	d568      	bpl.n	8000eca <__aeabi_fsub+0x37a>
 8000df8:	2407      	movs	r4, #7
 8000dfa:	4a36      	ldr	r2, [pc, #216]	; (8000ed4 <__aeabi_fsub+0x384>)
 8000dfc:	401c      	ands	r4, r3
 8000dfe:	2501      	movs	r5, #1
 8000e00:	4013      	ands	r3, r2
 8000e02:	e6ea      	b.n	8000bda <__aeabi_fsub+0x8a>
 8000e04:	28ff      	cmp	r0, #255	; 0xff
 8000e06:	d0eb      	beq.n	8000de0 <__aeabi_fsub+0x290>
 8000e08:	2280      	movs	r2, #128	; 0x80
 8000e0a:	04d2      	lsls	r2, r2, #19
 8000e0c:	4276      	negs	r6, r6
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	2e1b      	cmp	r6, #27
 8000e12:	dc53      	bgt.n	8000ebc <__aeabi_fsub+0x36c>
 8000e14:	2520      	movs	r5, #32
 8000e16:	1bad      	subs	r5, r5, r6
 8000e18:	001a      	movs	r2, r3
 8000e1a:	40ab      	lsls	r3, r5
 8000e1c:	40f2      	lsrs	r2, r6
 8000e1e:	1e5c      	subs	r4, r3, #1
 8000e20:	41a3      	sbcs	r3, r4
 8000e22:	4313      	orrs	r3, r2
 8000e24:	444b      	add	r3, r9
 8000e26:	0005      	movs	r5, r0
 8000e28:	e721      	b.n	8000c6e <__aeabi_fsub+0x11e>
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0d8      	beq.n	8000de0 <__aeabi_fsub+0x290>
 8000e2e:	4649      	mov	r1, r9
 8000e30:	2900      	cmp	r1, #0
 8000e32:	d100      	bne.n	8000e36 <__aeabi_fsub+0x2e6>
 8000e34:	e752      	b.n	8000cdc <__aeabi_fsub+0x18c>
 8000e36:	2180      	movs	r1, #128	; 0x80
 8000e38:	03c9      	lsls	r1, r1, #15
 8000e3a:	420f      	tst	r7, r1
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_fsub+0x2f0>
 8000e3e:	e74d      	b.n	8000cdc <__aeabi_fsub+0x18c>
 8000e40:	4660      	mov	r0, ip
 8000e42:	4208      	tst	r0, r1
 8000e44:	d000      	beq.n	8000e48 <__aeabi_fsub+0x2f8>
 8000e46:	e749      	b.n	8000cdc <__aeabi_fsub+0x18c>
 8000e48:	464b      	mov	r3, r9
 8000e4a:	e747      	b.n	8000cdc <__aeabi_fsub+0x18c>
 8000e4c:	4648      	mov	r0, r9
 8000e4e:	25ff      	movs	r5, #255	; 0xff
 8000e50:	2800      	cmp	r0, #0
 8000e52:	d100      	bne.n	8000e56 <__aeabi_fsub+0x306>
 8000e54:	e74f      	b.n	8000cf6 <__aeabi_fsub+0x1a6>
 8000e56:	2280      	movs	r2, #128	; 0x80
 8000e58:	03d2      	lsls	r2, r2, #15
 8000e5a:	4217      	tst	r7, r2
 8000e5c:	d004      	beq.n	8000e68 <__aeabi_fsub+0x318>
 8000e5e:	4660      	mov	r0, ip
 8000e60:	4210      	tst	r0, r2
 8000e62:	d101      	bne.n	8000e68 <__aeabi_fsub+0x318>
 8000e64:	464b      	mov	r3, r9
 8000e66:	4688      	mov	r8, r1
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4641      	mov	r1, r8
 8000e6c:	25ff      	movs	r5, #255	; 0xff
 8000e6e:	400a      	ands	r2, r1
 8000e70:	e741      	b.n	8000cf6 <__aeabi_fsub+0x1a6>
 8000e72:	4648      	mov	r0, r9
 8000e74:	2800      	cmp	r0, #0
 8000e76:	d01f      	beq.n	8000eb8 <__aeabi_fsub+0x368>
 8000e78:	1a1a      	subs	r2, r3, r0
 8000e7a:	0150      	lsls	r0, r2, #5
 8000e7c:	d520      	bpl.n	8000ec0 <__aeabi_fsub+0x370>
 8000e7e:	464a      	mov	r2, r9
 8000e80:	2407      	movs	r4, #7
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	401c      	ands	r4, r3
 8000e86:	4688      	mov	r8, r1
 8000e88:	2500      	movs	r5, #0
 8000e8a:	e6a6      	b.n	8000bda <__aeabi_fsub+0x8a>
 8000e8c:	1c74      	adds	r4, r6, #1
 8000e8e:	d0c9      	beq.n	8000e24 <__aeabi_fsub+0x2d4>
 8000e90:	43f6      	mvns	r6, r6
 8000e92:	28ff      	cmp	r0, #255	; 0xff
 8000e94:	d1bc      	bne.n	8000e10 <__aeabi_fsub+0x2c0>
 8000e96:	464b      	mov	r3, r9
 8000e98:	e720      	b.n	8000cdc <__aeabi_fsub+0x18c>
 8000e9a:	4699      	mov	r9, r3
 8000e9c:	464b      	mov	r3, r9
 8000e9e:	2500      	movs	r5, #0
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	e72b      	b.n	8000cfc <__aeabi_fsub+0x1ac>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e740      	b.n	8000d2a <__aeabi_fsub+0x1da>
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e6a9      	b.n	8000c02 <__aeabi_fsub+0xb2>
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	03db      	lsls	r3, r3, #15
 8000eb4:	24ff      	movs	r4, #255	; 0xff
 8000eb6:	e6a4      	b.n	8000c02 <__aeabi_fsub+0xb2>
 8000eb8:	2500      	movs	r5, #0
 8000eba:	e71c      	b.n	8000cf6 <__aeabi_fsub+0x1a6>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e7b1      	b.n	8000e24 <__aeabi_fsub+0x2d4>
 8000ec0:	2a00      	cmp	r2, #0
 8000ec2:	d0f1      	beq.n	8000ea8 <__aeabi_fsub+0x358>
 8000ec4:	0013      	movs	r3, r2
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	e6fc      	b.n	8000cc4 <__aeabi_fsub+0x174>
 8000eca:	2500      	movs	r5, #0
 8000ecc:	e6fa      	b.n	8000cc4 <__aeabi_fsub+0x174>
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	7dffffff 	.word	0x7dffffff
 8000ed4:	fbffffff 	.word	0xfbffffff

08000ed8 <__aeabi_f2iz>:
 8000ed8:	0241      	lsls	r1, r0, #9
 8000eda:	0042      	lsls	r2, r0, #1
 8000edc:	0fc3      	lsrs	r3, r0, #31
 8000ede:	0a49      	lsrs	r1, r1, #9
 8000ee0:	0e12      	lsrs	r2, r2, #24
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	2a7e      	cmp	r2, #126	; 0x7e
 8000ee6:	d90d      	bls.n	8000f04 <__aeabi_f2iz+0x2c>
 8000ee8:	2a9d      	cmp	r2, #157	; 0x9d
 8000eea:	d80c      	bhi.n	8000f06 <__aeabi_f2iz+0x2e>
 8000eec:	2080      	movs	r0, #128	; 0x80
 8000eee:	0400      	lsls	r0, r0, #16
 8000ef0:	4301      	orrs	r1, r0
 8000ef2:	2a95      	cmp	r2, #149	; 0x95
 8000ef4:	dc0a      	bgt.n	8000f0c <__aeabi_f2iz+0x34>
 8000ef6:	2096      	movs	r0, #150	; 0x96
 8000ef8:	1a82      	subs	r2, r0, r2
 8000efa:	40d1      	lsrs	r1, r2
 8000efc:	4248      	negs	r0, r1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d100      	bne.n	8000f04 <__aeabi_f2iz+0x2c>
 8000f02:	0008      	movs	r0, r1
 8000f04:	4770      	bx	lr
 8000f06:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <__aeabi_f2iz+0x3c>)
 8000f08:	1898      	adds	r0, r3, r2
 8000f0a:	e7fb      	b.n	8000f04 <__aeabi_f2iz+0x2c>
 8000f0c:	3a96      	subs	r2, #150	; 0x96
 8000f0e:	4091      	lsls	r1, r2
 8000f10:	e7f4      	b.n	8000efc <__aeabi_f2iz+0x24>
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	7fffffff 	.word	0x7fffffff

08000f18 <__aeabi_i2f>:
 8000f18:	b570      	push	{r4, r5, r6, lr}
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	d03d      	beq.n	8000f9a <__aeabi_i2f+0x82>
 8000f1e:	17c3      	asrs	r3, r0, #31
 8000f20:	18c5      	adds	r5, r0, r3
 8000f22:	405d      	eors	r5, r3
 8000f24:	0fc4      	lsrs	r4, r0, #31
 8000f26:	0028      	movs	r0, r5
 8000f28:	f000 f840 	bl	8000fac <__clzsi2>
 8000f2c:	229e      	movs	r2, #158	; 0x9e
 8000f2e:	1a12      	subs	r2, r2, r0
 8000f30:	2a96      	cmp	r2, #150	; 0x96
 8000f32:	dc07      	bgt.n	8000f44 <__aeabi_i2f+0x2c>
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	2808      	cmp	r0, #8
 8000f38:	dd33      	ble.n	8000fa2 <__aeabi_i2f+0x8a>
 8000f3a:	3808      	subs	r0, #8
 8000f3c:	4085      	lsls	r5, r0
 8000f3e:	0268      	lsls	r0, r5, #9
 8000f40:	0a40      	lsrs	r0, r0, #9
 8000f42:	e023      	b.n	8000f8c <__aeabi_i2f+0x74>
 8000f44:	2a99      	cmp	r2, #153	; 0x99
 8000f46:	dd0b      	ble.n	8000f60 <__aeabi_i2f+0x48>
 8000f48:	2305      	movs	r3, #5
 8000f4a:	0029      	movs	r1, r5
 8000f4c:	1a1b      	subs	r3, r3, r0
 8000f4e:	40d9      	lsrs	r1, r3
 8000f50:	0003      	movs	r3, r0
 8000f52:	331b      	adds	r3, #27
 8000f54:	409d      	lsls	r5, r3
 8000f56:	002b      	movs	r3, r5
 8000f58:	1e5d      	subs	r5, r3, #1
 8000f5a:	41ab      	sbcs	r3, r5
 8000f5c:	4319      	orrs	r1, r3
 8000f5e:	000d      	movs	r5, r1
 8000f60:	2805      	cmp	r0, #5
 8000f62:	dd01      	ble.n	8000f68 <__aeabi_i2f+0x50>
 8000f64:	1f43      	subs	r3, r0, #5
 8000f66:	409d      	lsls	r5, r3
 8000f68:	002b      	movs	r3, r5
 8000f6a:	490f      	ldr	r1, [pc, #60]	; (8000fa8 <__aeabi_i2f+0x90>)
 8000f6c:	400b      	ands	r3, r1
 8000f6e:	076e      	lsls	r6, r5, #29
 8000f70:	d009      	beq.n	8000f86 <__aeabi_i2f+0x6e>
 8000f72:	260f      	movs	r6, #15
 8000f74:	4035      	ands	r5, r6
 8000f76:	2d04      	cmp	r5, #4
 8000f78:	d005      	beq.n	8000f86 <__aeabi_i2f+0x6e>
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	015d      	lsls	r5, r3, #5
 8000f7e:	d502      	bpl.n	8000f86 <__aeabi_i2f+0x6e>
 8000f80:	229f      	movs	r2, #159	; 0x9f
 8000f82:	400b      	ands	r3, r1
 8000f84:	1a12      	subs	r2, r2, r0
 8000f86:	019b      	lsls	r3, r3, #6
 8000f88:	0a58      	lsrs	r0, r3, #9
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	0240      	lsls	r0, r0, #9
 8000f8e:	05d2      	lsls	r2, r2, #23
 8000f90:	0a40      	lsrs	r0, r0, #9
 8000f92:	07e4      	lsls	r4, r4, #31
 8000f94:	4310      	orrs	r0, r2
 8000f96:	4320      	orrs	r0, r4
 8000f98:	bd70      	pop	{r4, r5, r6, pc}
 8000f9a:	2400      	movs	r4, #0
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	e7f4      	b.n	8000f8c <__aeabi_i2f+0x74>
 8000fa2:	0268      	lsls	r0, r5, #9
 8000fa4:	0a40      	lsrs	r0, r0, #9
 8000fa6:	e7f1      	b.n	8000f8c <__aeabi_i2f+0x74>
 8000fa8:	fbffffff 	.word	0xfbffffff

08000fac <__clzsi2>:
 8000fac:	211c      	movs	r1, #28
 8000fae:	2301      	movs	r3, #1
 8000fb0:	041b      	lsls	r3, r3, #16
 8000fb2:	4298      	cmp	r0, r3
 8000fb4:	d301      	bcc.n	8000fba <__clzsi2+0xe>
 8000fb6:	0c00      	lsrs	r0, r0, #16
 8000fb8:	3910      	subs	r1, #16
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	4298      	cmp	r0, r3
 8000fbe:	d301      	bcc.n	8000fc4 <__clzsi2+0x18>
 8000fc0:	0a00      	lsrs	r0, r0, #8
 8000fc2:	3908      	subs	r1, #8
 8000fc4:	091b      	lsrs	r3, r3, #4
 8000fc6:	4298      	cmp	r0, r3
 8000fc8:	d301      	bcc.n	8000fce <__clzsi2+0x22>
 8000fca:	0900      	lsrs	r0, r0, #4
 8000fcc:	3904      	subs	r1, #4
 8000fce:	a202      	add	r2, pc, #8	; (adr r2, 8000fd8 <__clzsi2+0x2c>)
 8000fd0:	5c10      	ldrb	r0, [r2, r0]
 8000fd2:	1840      	adds	r0, r0, r1
 8000fd4:	4770      	bx	lr
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	02020304 	.word	0x02020304
 8000fdc:	01010101 	.word	0x01010101
	...

08000fe8 <__clzdi2>:
 8000fe8:	b510      	push	{r4, lr}
 8000fea:	2900      	cmp	r1, #0
 8000fec:	d103      	bne.n	8000ff6 <__clzdi2+0xe>
 8000fee:	f7ff ffdd 	bl	8000fac <__clzsi2>
 8000ff2:	3020      	adds	r0, #32
 8000ff4:	e002      	b.n	8000ffc <__clzdi2+0x14>
 8000ff6:	1c08      	adds	r0, r1, #0
 8000ff8:	f7ff ffd8 	bl	8000fac <__clzsi2>
 8000ffc:	bd10      	pop	{r4, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)

08001000 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001006:	1dfb      	adds	r3, r7, #7
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_Init+0x3c>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_Init+0x3c>)
 8001012:	2140      	movs	r1, #64	; 0x40
 8001014:	430a      	orrs	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001018:	2000      	movs	r0, #0
 800101a:	f000 f811 	bl	8001040 <HAL_InitTick>
 800101e:	1e03      	subs	r3, r0, #0
 8001020:	d003      	beq.n	800102a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e001      	b.n	800102e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800102a:	f002 ffe9 	bl	8004000 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
}
 8001032:	0018      	movs	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	b002      	add	sp, #8
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	40022000 	.word	0x40022000

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001048:	230f      	movs	r3, #15
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <HAL_InitTick+0x50>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	23fa      	movs	r3, #250	; 0xfa
 8001056:	0099      	lsls	r1, r3, #2
 8001058:	0010      	movs	r0, r2
 800105a:	f7ff f855 	bl	8000108 <__udivsi3>
 800105e:	0003      	movs	r3, r0
 8001060:	0018      	movs	r0, r3
 8001062:	f000 f918 	bl	8001296 <HAL_SYSTICK_Config>
 8001066:	1e03      	subs	r3, r0, #0
 8001068:	d004      	beq.n	8001074 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800106a:	230f      	movs	r3, #15
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e006      	b.n	8001082 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	2301      	movs	r3, #1
 8001078:	425b      	negs	r3, r3
 800107a:	2200      	movs	r2, #0
 800107c:	0018      	movs	r0, r3
 800107e:	f000 f8e5 	bl	800124c <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8001082:	230f      	movs	r3, #15
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	781b      	ldrb	r3, [r3, #0]
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b004      	add	sp, #16
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000004 	.word	0x20000004

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  uwTick++;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_IncTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	4b02      	ldr	r3, [pc, #8]	; (80010a8 <HAL_IncTick+0x14>)
 80010a0:	601a      	str	r2, [r3, #0]
}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200000a4 	.word	0x200000a4

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <HAL_GetTick+0x10>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	200000a4 	.word	0x200000a4

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff fff0 	bl	80010ac <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	d002      	beq.n	80010e0 <HAL_Delay+0x20>
  {
    wait++;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3301      	adds	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	f7ff ffe3 	bl	80010ac <HAL_GetTick>
 80010e6:	0002      	movs	r2, r0
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d8f7      	bhi.n	80010e2 <HAL_Delay+0x22>
  {
  }
}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b004      	add	sp, #16
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	0002      	movs	r2, r0
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	001a      	movs	r2, r3
 800110e:	231f      	movs	r3, #31
 8001110:	401a      	ands	r2, r3
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <NVIC_EnableIRQ+0x28>)
 8001114:	2101      	movs	r1, #1
 8001116:	4091      	lsls	r1, r2
 8001118:	000a      	movs	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}
 8001124:	e000e100 	.word	0xe000e100

08001128 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	0002      	movs	r2, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b7f      	cmp	r3, #127	; 0x7f
 800113c:	d932      	bls.n	80011a4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800113e:	4a2f      	ldr	r2, [pc, #188]	; (80011fc <NVIC_SetPriority+0xd4>)
 8001140:	1dfb      	adds	r3, r7, #7
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	0019      	movs	r1, r3
 8001146:	230f      	movs	r3, #15
 8001148:	400b      	ands	r3, r1
 800114a:	3b08      	subs	r3, #8
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3306      	adds	r3, #6
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	18d3      	adds	r3, r2, r3
 8001154:	3304      	adds	r3, #4
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	1dfa      	adds	r2, r7, #7
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	0011      	movs	r1, r2
 800115e:	2203      	movs	r2, #3
 8001160:	400a      	ands	r2, r1
 8001162:	00d2      	lsls	r2, r2, #3
 8001164:	21ff      	movs	r1, #255	; 0xff
 8001166:	4091      	lsls	r1, r2
 8001168:	000a      	movs	r2, r1
 800116a:	43d2      	mvns	r2, r2
 800116c:	401a      	ands	r2, r3
 800116e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	019b      	lsls	r3, r3, #6
 8001174:	22ff      	movs	r2, #255	; 0xff
 8001176:	401a      	ands	r2, r3
 8001178:	1dfb      	adds	r3, r7, #7
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	0018      	movs	r0, r3
 800117e:	2303      	movs	r3, #3
 8001180:	4003      	ands	r3, r0
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001186:	481d      	ldr	r0, [pc, #116]	; (80011fc <NVIC_SetPriority+0xd4>)
 8001188:	1dfb      	adds	r3, r7, #7
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	001c      	movs	r4, r3
 800118e:	230f      	movs	r3, #15
 8001190:	4023      	ands	r3, r4
 8001192:	3b08      	subs	r3, #8
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	430a      	orrs	r2, r1
 8001198:	3306      	adds	r3, #6
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	18c3      	adds	r3, r0, r3
 800119e:	3304      	adds	r3, #4
 80011a0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011a2:	e027      	b.n	80011f4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a4:	4a16      	ldr	r2, [pc, #88]	; (8001200 <NVIC_SetPriority+0xd8>)
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	33c0      	adds	r3, #192	; 0xc0
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	589b      	ldr	r3, [r3, r2]
 80011b4:	1dfa      	adds	r2, r7, #7
 80011b6:	7812      	ldrb	r2, [r2, #0]
 80011b8:	0011      	movs	r1, r2
 80011ba:	2203      	movs	r2, #3
 80011bc:	400a      	ands	r2, r1
 80011be:	00d2      	lsls	r2, r2, #3
 80011c0:	21ff      	movs	r1, #255	; 0xff
 80011c2:	4091      	lsls	r1, r2
 80011c4:	000a      	movs	r2, r1
 80011c6:	43d2      	mvns	r2, r2
 80011c8:	401a      	ands	r2, r3
 80011ca:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	019b      	lsls	r3, r3, #6
 80011d0:	22ff      	movs	r2, #255	; 0xff
 80011d2:	401a      	ands	r2, r3
 80011d4:	1dfb      	adds	r3, r7, #7
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	0018      	movs	r0, r3
 80011da:	2303      	movs	r3, #3
 80011dc:	4003      	ands	r3, r0
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011e2:	4807      	ldr	r0, [pc, #28]	; (8001200 <NVIC_SetPriority+0xd8>)
 80011e4:	1dfb      	adds	r3, r7, #7
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	430a      	orrs	r2, r1
 80011ee:	33c0      	adds	r3, #192	; 0xc0
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	501a      	str	r2, [r3, r0]
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b003      	add	sp, #12
 80011fa:	bd90      	pop	{r4, r7, pc}
 80011fc:	e000ed00 	.word	0xe000ed00
 8001200:	e000e100 	.word	0xe000e100

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <SysTick_Config+0x40>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d901      	bls.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e010      	b.n	800123c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <SysTick_Config+0x44>)
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	3a01      	subs	r2, #1
 8001220:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	2301      	movs	r3, #1
 8001224:	425b      	negs	r3, r3
 8001226:	2103      	movs	r1, #3
 8001228:	0018      	movs	r0, r3
 800122a:	f7ff ff7d 	bl	8001128 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <SysTick_Config+0x44>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <SysTick_Config+0x44>)
 8001236:	2207      	movs	r2, #7
 8001238:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800123a:	2300      	movs	r3, #0
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b002      	add	sp, #8
 8001242:	bd80      	pop	{r7, pc}
 8001244:	00ffffff 	.word	0x00ffffff
 8001248:	e000e010 	.word	0xe000e010

0800124c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	210f      	movs	r1, #15
 8001258:	187b      	adds	r3, r7, r1
 800125a:	1c02      	adds	r2, r0, #0
 800125c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	187b      	adds	r3, r7, r1
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b25b      	sxtb	r3, r3
 8001266:	0011      	movs	r1, r2
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff ff5d 	bl	8001128 <NVIC_SetPriority>
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b004      	add	sp, #16
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	0002      	movs	r2, r0
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b25b      	sxtb	r3, r3
 8001288:	0018      	movs	r0, r3
 800128a:	f7ff ff37 	bl	80010fc <NVIC_EnableIRQ>
}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7ff ffaf 	bl	8001204 <SysTick_Config>
 80012a6:	0003      	movs	r3, r0
}
 80012a8:	0018      	movs	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b002      	add	sp, #8
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80012c6:	e155      	b.n	8001574 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2101      	movs	r1, #1
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	4091      	lsls	r1, r2
 80012d2:	000a      	movs	r2, r1
 80012d4:	4013      	ands	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d100      	bne.n	80012e0 <HAL_GPIO_Init+0x30>
 80012de:	e146      	b.n	800156e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x40>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b12      	cmp	r3, #18
 80012ee:	d123      	bne.n	8001338 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	08da      	lsrs	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	0092      	lsls	r2, r2, #2
 80012fa:	58d3      	ldr	r3, [r2, r3]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2207      	movs	r2, #7
 8001302:	4013      	ands	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	409a      	lsls	r2, r3
 800130a:	0013      	movs	r3, r2
 800130c:	43da      	mvns	r2, r3
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	2107      	movs	r1, #7
 800131c:	400b      	ands	r3, r1
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	409a      	lsls	r2, r3
 8001322:	0013      	movs	r3, r2
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	6939      	ldr	r1, [r7, #16]
 8001336:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d00b      	beq.n	8001358 <HAL_GPIO_Init+0xa8>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d007      	beq.n	8001358 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800134c:	2b11      	cmp	r3, #17
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b12      	cmp	r3, #18
 8001356:	d130      	bne.n	80013ba <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	409a      	lsls	r2, r3
 8001366:	0013      	movs	r3, r2
 8001368:	43da      	mvns	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	409a      	lsls	r2, r3
 800137a:	0013      	movs	r3, r2
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800138e:	2201      	movs	r2, #1
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	43da      	mvns	r2, r3
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	2201      	movs	r2, #1
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	409a      	lsls	r2, r3
 80013c8:	0013      	movs	r3, r2
 80013ca:	43da      	mvns	r2, r3
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2203      	movs	r2, #3
 80013d8:	401a      	ands	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	409a      	lsls	r2, r3
 80013e0:	0013      	movs	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	2203      	movs	r2, #3
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	43da      	mvns	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	409a      	lsls	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	055b      	lsls	r3, r3, #21
 8001426:	4013      	ands	r3, r2
 8001428:	d100      	bne.n	800142c <HAL_GPIO_Init+0x17c>
 800142a:	e0a0      	b.n	800156e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142c:	4b57      	ldr	r3, [pc, #348]	; (800158c <HAL_GPIO_Init+0x2dc>)
 800142e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001430:	4b56      	ldr	r3, [pc, #344]	; (800158c <HAL_GPIO_Init+0x2dc>)
 8001432:	2101      	movs	r1, #1
 8001434:	430a      	orrs	r2, r1
 8001436:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001438:	4a55      	ldr	r2, [pc, #340]	; (8001590 <HAL_GPIO_Init+0x2e0>)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3302      	adds	r3, #2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	589b      	ldr	r3, [r3, r2]
 8001444:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	2203      	movs	r2, #3
 800144a:	4013      	ands	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	220f      	movs	r2, #15
 8001450:	409a      	lsls	r2, r3
 8001452:	0013      	movs	r3, r2
 8001454:	43da      	mvns	r2, r3
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	23a0      	movs	r3, #160	; 0xa0
 8001460:	05db      	lsls	r3, r3, #23
 8001462:	429a      	cmp	r2, r3
 8001464:	d01f      	beq.n	80014a6 <HAL_GPIO_Init+0x1f6>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a4a      	ldr	r2, [pc, #296]	; (8001594 <HAL_GPIO_Init+0x2e4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d019      	beq.n	80014a2 <HAL_GPIO_Init+0x1f2>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a49      	ldr	r2, [pc, #292]	; (8001598 <HAL_GPIO_Init+0x2e8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d013      	beq.n	800149e <HAL_GPIO_Init+0x1ee>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a48      	ldr	r2, [pc, #288]	; (800159c <HAL_GPIO_Init+0x2ec>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d00d      	beq.n	800149a <HAL_GPIO_Init+0x1ea>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a47      	ldr	r2, [pc, #284]	; (80015a0 <HAL_GPIO_Init+0x2f0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d007      	beq.n	8001496 <HAL_GPIO_Init+0x1e6>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a46      	ldr	r2, [pc, #280]	; (80015a4 <HAL_GPIO_Init+0x2f4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d101      	bne.n	8001492 <HAL_GPIO_Init+0x1e2>
 800148e:	2305      	movs	r3, #5
 8001490:	e00a      	b.n	80014a8 <HAL_GPIO_Init+0x1f8>
 8001492:	2306      	movs	r3, #6
 8001494:	e008      	b.n	80014a8 <HAL_GPIO_Init+0x1f8>
 8001496:	2304      	movs	r3, #4
 8001498:	e006      	b.n	80014a8 <HAL_GPIO_Init+0x1f8>
 800149a:	2303      	movs	r3, #3
 800149c:	e004      	b.n	80014a8 <HAL_GPIO_Init+0x1f8>
 800149e:	2302      	movs	r3, #2
 80014a0:	e002      	b.n	80014a8 <HAL_GPIO_Init+0x1f8>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <HAL_GPIO_Init+0x1f8>
 80014a6:	2300      	movs	r3, #0
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	2103      	movs	r1, #3
 80014ac:	400a      	ands	r2, r1
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	4093      	lsls	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b8:	4935      	ldr	r1, [pc, #212]	; (8001590 <HAL_GPIO_Init+0x2e0>)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c6:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <HAL_GPIO_Init+0x2f8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	43da      	mvns	r2, r3
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	025b      	lsls	r3, r3, #9
 80014de:	4013      	ands	r3, r2
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014ea:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <HAL_GPIO_Init+0x2f8>)
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_GPIO_Init+0x2f8>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	43da      	mvns	r2, r3
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	029b      	lsls	r3, r3, #10
 8001508:	4013      	ands	r3, r2
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_GPIO_Init+0x2f8>)
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <HAL_GPIO_Init+0x2f8>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43da      	mvns	r2, r3
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	035b      	lsls	r3, r3, #13
 8001532:	4013      	ands	r3, r2
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HAL_GPIO_Init+0x2f8>)
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_GPIO_Init+0x2f8>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43da      	mvns	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	039b      	lsls	r3, r3, #14
 800155c:	4013      	ands	r3, r2
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_GPIO_Init+0x2f8>)
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	40da      	lsrs	r2, r3
 800157c:	1e13      	subs	r3, r2, #0
 800157e:	d000      	beq.n	8001582 <HAL_GPIO_Init+0x2d2>
 8001580:	e6a2      	b.n	80012c8 <HAL_GPIO_Init+0x18>
  }
}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	46bd      	mov	sp, r7
 8001586:	b006      	add	sp, #24
 8001588:	bd80      	pop	{r7, pc}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	40021000 	.word	0x40021000
 8001590:	40010000 	.word	0x40010000
 8001594:	50000400 	.word	0x50000400
 8001598:	50000800 	.word	0x50000800
 800159c:	50000c00 	.word	0x50000c00
 80015a0:	50001000 	.word	0x50001000
 80015a4:	50001c00 	.word	0x50001c00
 80015a8:	40010400 	.word	0x40010400

080015ac <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	0008      	movs	r0, r1
 80015b6:	0011      	movs	r1, r2
 80015b8:	1cbb      	adds	r3, r7, #2
 80015ba:	1c02      	adds	r2, r0, #0
 80015bc:	801a      	strh	r2, [r3, #0]
 80015be:	1c7b      	adds	r3, r7, #1
 80015c0:	1c0a      	adds	r2, r1, #0
 80015c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80015c4:	1c7b      	adds	r3, r7, #1
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d004      	beq.n	80015d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015cc:	1cbb      	adds	r3, r7, #2
 80015ce:	881a      	ldrh	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80015d4:	e003      	b.n	80015de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80015d6:	1cbb      	adds	r3, r7, #2
 80015d8:	881a      	ldrh	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b002      	add	sp, #8
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	000a      	movs	r2, r1
 80015f0:	1cbb      	adds	r3, r7, #2
 80015f2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	1cbb      	adds	r3, r7, #2
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	405a      	eors	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	615a      	str	r2, [r3, #20]
}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	b002      	add	sp, #8
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	0002      	movs	r2, r0
 8001614:	1dbb      	adds	r3, r7, #6
 8001616:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	1dba      	adds	r2, r7, #6
 800161e:	8812      	ldrh	r2, [r2, #0]
 8001620:	4013      	ands	r3, r2
 8001622:	d008      	beq.n	8001636 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001626:	1dba      	adds	r2, r7, #6
 8001628:	8812      	ldrh	r2, [r2, #0]
 800162a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800162c:	1dbb      	adds	r3, r7, #6
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	0018      	movs	r0, r3
 8001632:	f000 f807 	bl	8001644 <HAL_GPIO_EXTI_Callback>
  }
}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	b002      	add	sp, #8
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	40010400 	.word	0x40010400

08001644 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	0002      	movs	r2, r0
 800164c:	1dbb      	adds	r3, r7, #6
 800164e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b002      	add	sp, #8
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d102      	bne.n	800166c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	f000 fbbc 	bl	8001de4 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166c:	4bc8      	ldr	r3, [pc, #800]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	220c      	movs	r2, #12
 8001672:	4013      	ands	r3, r2
 8001674:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001676:	4bc6      	ldr	r3, [pc, #792]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	025b      	lsls	r3, r3, #9
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2201      	movs	r2, #1
 8001688:	4013      	ands	r3, r2
 800168a:	d100      	bne.n	800168e <HAL_RCC_OscConfig+0x36>
 800168c:	e07e      	b.n	800178c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	2b08      	cmp	r3, #8
 8001692:	d007      	beq.n	80016a4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b0c      	cmp	r3, #12
 8001698:	d112      	bne.n	80016c0 <HAL_RCC_OscConfig+0x68>
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	025b      	lsls	r3, r3, #9
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d10d      	bne.n	80016c0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	4bba      	ldr	r3, [pc, #744]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	029b      	lsls	r3, r3, #10
 80016ac:	4013      	ands	r3, r2
 80016ae:	d100      	bne.n	80016b2 <HAL_RCC_OscConfig+0x5a>
 80016b0:	e06b      	b.n	800178a <HAL_RCC_OscConfig+0x132>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d167      	bne.n	800178a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	f000 fb92 	bl	8001de4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	025b      	lsls	r3, r3, #9
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_OscConfig+0x84>
 80016cc:	4bb0      	ldr	r3, [pc, #704]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4baf      	ldr	r3, [pc, #700]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	0249      	lsls	r1, r1, #9
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e027      	b.n	800172c <HAL_RCC_OscConfig+0xd4>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	23a0      	movs	r3, #160	; 0xa0
 80016e2:	02db      	lsls	r3, r3, #11
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d10e      	bne.n	8001706 <HAL_RCC_OscConfig+0xae>
 80016e8:	4ba9      	ldr	r3, [pc, #676]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4ba8      	ldr	r3, [pc, #672]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	02c9      	lsls	r1, r1, #11
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	4ba6      	ldr	r3, [pc, #664]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4ba5      	ldr	r3, [pc, #660]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	0249      	lsls	r1, r1, #9
 8001700:	430a      	orrs	r2, r1
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e012      	b.n	800172c <HAL_RCC_OscConfig+0xd4>
 8001706:	4ba2      	ldr	r3, [pc, #648]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4ba1      	ldr	r3, [pc, #644]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 800170c:	49a1      	ldr	r1, [pc, #644]	; (8001994 <HAL_RCC_OscConfig+0x33c>)
 800170e:	400a      	ands	r2, r1
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	4b9f      	ldr	r3, [pc, #636]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	025b      	lsls	r3, r3, #9
 800171a:	4013      	ands	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4b9b      	ldr	r3, [pc, #620]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b9a      	ldr	r3, [pc, #616]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001726:	499c      	ldr	r1, [pc, #624]	; (8001998 <HAL_RCC_OscConfig+0x340>)
 8001728:	400a      	ands	r2, r1
 800172a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d015      	beq.n	8001760 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fcba 	bl	80010ac <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800173c:	e009      	b.n	8001752 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800173e:	f7ff fcb5 	bl	80010ac <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b64      	cmp	r3, #100	; 0x64
 800174a:	d902      	bls.n	8001752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	f000 fb49 	bl	8001de4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001752:	4b8f      	ldr	r3, [pc, #572]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	029b      	lsls	r3, r3, #10
 800175a:	4013      	ands	r3, r2
 800175c:	d0ef      	beq.n	800173e <HAL_RCC_OscConfig+0xe6>
 800175e:	e015      	b.n	800178c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fca4 	bl	80010ac <HAL_GetTick>
 8001764:	0003      	movs	r3, r0
 8001766:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800176a:	f7ff fc9f 	bl	80010ac <HAL_GetTick>
 800176e:	0002      	movs	r2, r0
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b64      	cmp	r3, #100	; 0x64
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e333      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800177c:	4b84      	ldr	r3, [pc, #528]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	029b      	lsls	r3, r3, #10
 8001784:	4013      	ands	r3, r2
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0x112>
 8001788:	e000      	b.n	800178c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2202      	movs	r2, #2
 8001792:	4013      	ands	r3, r2
 8001794:	d100      	bne.n	8001798 <HAL_RCC_OscConfig+0x140>
 8001796:	e098      	b.n	80018ca <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	2220      	movs	r2, #32
 80017a2:	4013      	ands	r3, r2
 80017a4:	d009      	beq.n	80017ba <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80017a6:	4b7a      	ldr	r3, [pc, #488]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4b79      	ldr	r3, [pc, #484]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80017ac:	2120      	movs	r1, #32
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	2220      	movs	r2, #32
 80017b6:	4393      	bics	r3, r2
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d13d      	bne.n	8001842 <HAL_RCC_OscConfig+0x1ea>
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d13a      	bne.n	8001842 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80017cc:	4b70      	ldr	r3, [pc, #448]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2204      	movs	r2, #4
 80017d2:	4013      	ands	r3, r2
 80017d4:	d004      	beq.n	80017e0 <HAL_RCC_OscConfig+0x188>
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e301      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e0:	4b6b      	ldr	r3, [pc, #428]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4a6d      	ldr	r2, [pc, #436]	; (800199c <HAL_RCC_OscConfig+0x344>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	021a      	lsls	r2, r3, #8
 80017f0:	4b67      	ldr	r3, [pc, #412]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80017f2:	430a      	orrs	r2, r1
 80017f4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017f6:	4b66      	ldr	r3, [pc, #408]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2209      	movs	r2, #9
 80017fc:	4393      	bics	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001808:	f000 fc20 	bl	800204c <HAL_RCC_GetSysClockFreq>
 800180c:	0001      	movs	r1, r0
 800180e:	4b60      	ldr	r3, [pc, #384]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	220f      	movs	r2, #15
 8001816:	4013      	ands	r3, r2
 8001818:	4a61      	ldr	r2, [pc, #388]	; (80019a0 <HAL_RCC_OscConfig+0x348>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	000a      	movs	r2, r1
 800181e:	40da      	lsrs	r2, r3
 8001820:	4b60      	ldr	r3, [pc, #384]	; (80019a4 <HAL_RCC_OscConfig+0x34c>)
 8001822:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001824:	2513      	movs	r5, #19
 8001826:	197c      	adds	r4, r7, r5
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fc09 	bl	8001040 <HAL_InitTick>
 800182e:	0003      	movs	r3, r0
 8001830:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001832:	197b      	adds	r3, r7, r5
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d047      	beq.n	80018ca <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800183a:	2313      	movs	r3, #19
 800183c:	18fb      	adds	r3, r7, r3
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	e2d0      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	2b00      	cmp	r3, #0
 8001846:	d027      	beq.n	8001898 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001848:	4b51      	ldr	r3, [pc, #324]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2209      	movs	r2, #9
 800184e:	4393      	bics	r3, r2
 8001850:	0019      	movs	r1, r3
 8001852:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001856:	430a      	orrs	r2, r1
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff fc27 	bl	80010ac <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff fc22 	bl	80010ac <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e2b6      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001876:	4b46      	ldr	r3, [pc, #280]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2204      	movs	r2, #4
 800187c:	4013      	ands	r3, r2
 800187e:	d0f1      	beq.n	8001864 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001880:	4b43      	ldr	r3, [pc, #268]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4a45      	ldr	r2, [pc, #276]	; (800199c <HAL_RCC_OscConfig+0x344>)
 8001886:	4013      	ands	r3, r2
 8001888:	0019      	movs	r1, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	021a      	lsls	r2, r3, #8
 8001890:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001892:	430a      	orrs	r2, r1
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	e018      	b.n	80018ca <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001898:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 800189e:	2101      	movs	r1, #1
 80018a0:	438a      	bics	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fc02 	bl	80010ac <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ae:	f7ff fbfd 	bl	80010ac <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e291      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018c0:	4b33      	ldr	r3, [pc, #204]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2204      	movs	r2, #4
 80018c6:	4013      	ands	r3, r2
 80018c8:	d1f1      	bne.n	80018ae <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2210      	movs	r2, #16
 80018d0:	4013      	ands	r3, r2
 80018d2:	d100      	bne.n	80018d6 <HAL_RCC_OscConfig+0x27e>
 80018d4:	e09f      	b.n	8001a16 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d13f      	bne.n	800195c <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018dc:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4013      	ands	r3, r2
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_OscConfig+0x29c>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e277      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f4:	4b26      	ldr	r3, [pc, #152]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	4a2b      	ldr	r2, [pc, #172]	; (80019a8 <HAL_RCC_OscConfig+0x350>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	0019      	movs	r1, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001904:	430a      	orrs	r2, r1
 8001906:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	0a19      	lsrs	r1, r3, #8
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	061a      	lsls	r2, r3, #24
 8001916:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001918:	430a      	orrs	r2, r1
 800191a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	0b5b      	lsrs	r3, r3, #13
 8001922:	3301      	adds	r3, #1
 8001924:	2280      	movs	r2, #128	; 0x80
 8001926:	0212      	lsls	r2, r2, #8
 8001928:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	210f      	movs	r1, #15
 8001932:	400b      	ands	r3, r1
 8001934:	491a      	ldr	r1, [pc, #104]	; (80019a0 <HAL_RCC_OscConfig+0x348>)
 8001936:	5ccb      	ldrb	r3, [r1, r3]
 8001938:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_RCC_OscConfig+0x34c>)
 800193c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800193e:	2513      	movs	r5, #19
 8001940:	197c      	adds	r4, r7, r5
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff fb7c 	bl	8001040 <HAL_InitTick>
 8001948:	0003      	movs	r3, r0
 800194a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800194c:	197b      	adds	r3, r7, r5
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d060      	beq.n	8001a16 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001954:	2313      	movs	r3, #19
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	e243      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d03e      	beq.n	80019e2 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 800196a:	2180      	movs	r1, #128	; 0x80
 800196c:	0049      	lsls	r1, r1, #1
 800196e:	430a      	orrs	r2, r1
 8001970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001972:	f7ff fb9b 	bl	80010ac <HAL_GetTick>
 8001976:	0003      	movs	r3, r0
 8001978:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800197a:	e017      	b.n	80019ac <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800197c:	f7ff fb96 	bl	80010ac <HAL_GetTick>
 8001980:	0002      	movs	r2, r0
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d910      	bls.n	80019ac <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e22a      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	40021000 	.word	0x40021000
 8001994:	fffeffff 	.word	0xfffeffff
 8001998:	fffbffff 	.word	0xfffbffff
 800199c:	ffffe0ff 	.word	0xffffe0ff
 80019a0:	08005534 	.word	0x08005534
 80019a4:	20000004 	.word	0x20000004
 80019a8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019ac:	4bc6      	ldr	r3, [pc, #792]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4013      	ands	r3, r2
 80019b6:	d0e1      	beq.n	800197c <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b8:	4bc3      	ldr	r3, [pc, #780]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4ac3      	ldr	r2, [pc, #780]	; (8001ccc <HAL_RCC_OscConfig+0x674>)
 80019be:	4013      	ands	r3, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c6:	4bc0      	ldr	r3, [pc, #768]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 80019c8:	430a      	orrs	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019cc:	4bbe      	ldr	r3, [pc, #760]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	0a19      	lsrs	r1, r3, #8
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	061a      	lsls	r2, r3, #24
 80019da:	4bbb      	ldr	r3, [pc, #748]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 80019dc:	430a      	orrs	r2, r1
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	e019      	b.n	8001a16 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019e2:	4bb9      	ldr	r3, [pc, #740]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4bb8      	ldr	r3, [pc, #736]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 80019e8:	49b9      	ldr	r1, [pc, #740]	; (8001cd0 <HAL_RCC_OscConfig+0x678>)
 80019ea:	400a      	ands	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7ff fb5d 	bl	80010ac <HAL_GetTick>
 80019f2:	0003      	movs	r3, r0
 80019f4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019f8:	f7ff fb58 	bl	80010ac <HAL_GetTick>
 80019fc:	0002      	movs	r2, r0
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e1ec      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a0a:	4baf      	ldr	r3, [pc, #700]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4013      	ands	r3, r2
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d036      	beq.n	8001a8e <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d019      	beq.n	8001a5c <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a28:	4ba7      	ldr	r3, [pc, #668]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001a2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a2c:	4ba6      	ldr	r3, [pc, #664]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	430a      	orrs	r2, r1
 8001a32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a34:	f7ff fb3a 	bl	80010ac <HAL_GetTick>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fb35 	bl	80010ac <HAL_GetTick>
 8001a42:	0002      	movs	r2, r0
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e1c9      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a50:	4b9d      	ldr	r3, [pc, #628]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a54:	2202      	movs	r2, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	d0f1      	beq.n	8001a3e <HAL_RCC_OscConfig+0x3e6>
 8001a5a:	e018      	b.n	8001a8e <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5c:	4b9a      	ldr	r3, [pc, #616]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001a5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a60:	4b99      	ldr	r3, [pc, #612]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001a62:	2101      	movs	r1, #1
 8001a64:	438a      	bics	r2, r1
 8001a66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a68:	f7ff fb20 	bl	80010ac <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a72:	f7ff fb1b 	bl	80010ac <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e1af      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a84:	4b90      	ldr	r3, [pc, #576]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a88:	2202      	movs	r2, #2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d1f1      	bne.n	8001a72 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2204      	movs	r2, #4
 8001a94:	4013      	ands	r3, r2
 8001a96:	d100      	bne.n	8001a9a <HAL_RCC_OscConfig+0x442>
 8001a98:	e0af      	b.n	8001bfa <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9a:	2323      	movs	r3, #35	; 0x23
 8001a9c:	18fb      	adds	r3, r7, r3
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa2:	4b89      	ldr	r3, [pc, #548]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	055b      	lsls	r3, r3, #21
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d10a      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b86      	ldr	r3, [pc, #536]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ab2:	4b85      	ldr	r3, [pc, #532]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001ab4:	2180      	movs	r1, #128	; 0x80
 8001ab6:	0549      	lsls	r1, r1, #21
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001abc:	2323      	movs	r3, #35	; 0x23
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac4:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4013      	ands	r3, r2
 8001ace:	d11a      	bne.n	8001b06 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad0:	4b80      	ldr	r3, [pc, #512]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b7f      	ldr	r3, [pc, #508]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	0049      	lsls	r1, r1, #1
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ade:	f7ff fae5 	bl	80010ac <HAL_GetTick>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae8:	f7ff fae0 	bl	80010ac <HAL_GetTick>
 8001aec:	0002      	movs	r2, r0
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e174      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afa:	4b76      	ldr	r3, [pc, #472]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4013      	ands	r3, r2
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_OscConfig+0x4ca>
 8001b12:	4b6d      	ldr	r3, [pc, #436]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001b14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b16:	4b6c      	ldr	r3, [pc, #432]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0049      	lsls	r1, r1, #1
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	651a      	str	r2, [r3, #80]	; 0x50
 8001b20:	e031      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4ec>
 8001b2a:	4b67      	ldr	r3, [pc, #412]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b2e:	4b66      	ldr	r3, [pc, #408]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001b30:	4967      	ldr	r1, [pc, #412]	; (8001cd0 <HAL_RCC_OscConfig+0x678>)
 8001b32:	400a      	ands	r2, r1
 8001b34:	651a      	str	r2, [r3, #80]	; 0x50
 8001b36:	4b64      	ldr	r3, [pc, #400]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001b38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b3a:	4b63      	ldr	r3, [pc, #396]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001b3c:	4966      	ldr	r1, [pc, #408]	; (8001cd8 <HAL_RCC_OscConfig+0x680>)
 8001b3e:	400a      	ands	r2, r1
 8001b40:	651a      	str	r2, [r3, #80]	; 0x50
 8001b42:	e020      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	23a0      	movs	r3, #160	; 0xa0
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d10e      	bne.n	8001b6e <HAL_RCC_OscConfig+0x516>
 8001b50:	4b5d      	ldr	r3, [pc, #372]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001b52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b54:	4b5c      	ldr	r3, [pc, #368]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001b56:	2180      	movs	r1, #128	; 0x80
 8001b58:	00c9      	lsls	r1, r1, #3
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	651a      	str	r2, [r3, #80]	; 0x50
 8001b5e:	4b5a      	ldr	r3, [pc, #360]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001b60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b62:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	0049      	lsls	r1, r1, #1
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	651a      	str	r2, [r3, #80]	; 0x50
 8001b6c:	e00b      	b.n	8001b86 <HAL_RCC_OscConfig+0x52e>
 8001b6e:	4b56      	ldr	r3, [pc, #344]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001b70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b72:	4b55      	ldr	r3, [pc, #340]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001b74:	4956      	ldr	r1, [pc, #344]	; (8001cd0 <HAL_RCC_OscConfig+0x678>)
 8001b76:	400a      	ands	r2, r1
 8001b78:	651a      	str	r2, [r3, #80]	; 0x50
 8001b7a:	4b53      	ldr	r3, [pc, #332]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001b7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b7e:	4b52      	ldr	r3, [pc, #328]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001b80:	4955      	ldr	r1, [pc, #340]	; (8001cd8 <HAL_RCC_OscConfig+0x680>)
 8001b82:	400a      	ands	r2, r1
 8001b84:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d015      	beq.n	8001bba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fa8d 	bl	80010ac <HAL_GetTick>
 8001b92:	0003      	movs	r3, r0
 8001b94:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b96:	e009      	b.n	8001bac <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7ff fa88 	bl	80010ac <HAL_GetTick>
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	4a4e      	ldr	r2, [pc, #312]	; (8001cdc <HAL_RCC_OscConfig+0x684>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e11b      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bac:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001bae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d0ef      	beq.n	8001b98 <HAL_RCC_OscConfig+0x540>
 8001bb8:	e014      	b.n	8001be4 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bba:	f7ff fa77 	bl	80010ac <HAL_GetTick>
 8001bbe:	0003      	movs	r3, r0
 8001bc0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bc2:	e009      	b.n	8001bd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fa72 	bl	80010ac <HAL_GetTick>
 8001bc8:	0002      	movs	r2, r0
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	4a43      	ldr	r2, [pc, #268]	; (8001cdc <HAL_RCC_OscConfig+0x684>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e105      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bd8:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001bda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4013      	ands	r3, r2
 8001be2:	d1ef      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001be4:	2323      	movs	r3, #35	; 0x23
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d105      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bee:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bf2:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001bf4:	493a      	ldr	r1, [pc, #232]	; (8001ce0 <HAL_RCC_OscConfig+0x688>)
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	4013      	ands	r3, r2
 8001c02:	d049      	beq.n	8001c98 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d026      	beq.n	8001c5a <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c0c:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001c12:	2101      	movs	r1, #1
 8001c14:	430a      	orrs	r2, r1
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1c:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001c1e:	2101      	movs	r1, #1
 8001c20:	430a      	orrs	r2, r1
 8001c22:	635a      	str	r2, [r3, #52]	; 0x34
 8001c24:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <HAL_RCC_OscConfig+0x68c>)
 8001c26:	6a1a      	ldr	r2, [r3, #32]
 8001c28:	4b2e      	ldr	r3, [pc, #184]	; (8001ce4 <HAL_RCC_OscConfig+0x68c>)
 8001c2a:	2180      	movs	r1, #128	; 0x80
 8001c2c:	0189      	lsls	r1, r1, #6
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7ff fa3b 	bl	80010ac <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c3c:	f7ff fa36 	bl	80010ac <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e0ca      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2202      	movs	r2, #2
 8001c54:	4013      	ands	r3, r2
 8001c56:	d0f1      	beq.n	8001c3c <HAL_RCC_OscConfig+0x5e4>
 8001c58:	e01e      	b.n	8001c98 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001c60:	2101      	movs	r1, #1
 8001c62:	438a      	bics	r2, r1
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <HAL_RCC_OscConfig+0x68c>)
 8001c68:	6a1a      	ldr	r2, [r3, #32]
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <HAL_RCC_OscConfig+0x68c>)
 8001c6c:	491e      	ldr	r1, [pc, #120]	; (8001ce8 <HAL_RCC_OscConfig+0x690>)
 8001c6e:	400a      	ands	r2, r1
 8001c70:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7ff fa1b 	bl	80010ac <HAL_GetTick>
 8001c76:	0003      	movs	r3, r0
 8001c78:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c7c:	f7ff fa16 	bl	80010ac <HAL_GetTick>
 8001c80:	0002      	movs	r2, r0
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e0aa      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d1f1      	bne.n	8001c7c <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d100      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x64a>
 8001ca0:	e09f      	b.n	8001de2 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	2b0c      	cmp	r3, #12
 8001ca6:	d100      	bne.n	8001caa <HAL_RCC_OscConfig+0x652>
 8001ca8:	e078      	b.n	8001d9c <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d159      	bne.n	8001d66 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <HAL_RCC_OscConfig+0x670>)
 8001cb8:	490c      	ldr	r1, [pc, #48]	; (8001cec <HAL_RCC_OscConfig+0x694>)
 8001cba:	400a      	ands	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7ff f9f5 	bl	80010ac <HAL_GetTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cc6:	e01c      	b.n	8001d02 <HAL_RCC_OscConfig+0x6aa>
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	ffff1fff 	.word	0xffff1fff
 8001cd0:	fffffeff 	.word	0xfffffeff
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	fffffbff 	.word	0xfffffbff
 8001cdc:	00001388 	.word	0x00001388
 8001ce0:	efffffff 	.word	0xefffffff
 8001ce4:	40010000 	.word	0x40010000
 8001ce8:	ffffdfff 	.word	0xffffdfff
 8001cec:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff f9dc 	bl	80010ac <HAL_GetTick>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e070      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <HAL_RCC_OscConfig+0x794>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	049b      	lsls	r3, r3, #18
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d0e:	4b37      	ldr	r3, [pc, #220]	; (8001dec <HAL_RCC_OscConfig+0x794>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	4a37      	ldr	r2, [pc, #220]	; (8001df0 <HAL_RCC_OscConfig+0x798>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	0019      	movs	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d26:	431a      	orrs	r2, r3
 8001d28:	4b30      	ldr	r3, [pc, #192]	; (8001dec <HAL_RCC_OscConfig+0x794>)
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2e:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <HAL_RCC_OscConfig+0x794>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <HAL_RCC_OscConfig+0x794>)
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	0449      	lsls	r1, r1, #17
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f9b6 	bl	80010ac <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d46:	f7ff f9b1 	bl	80010ac <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e045      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d58:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_RCC_OscConfig+0x794>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	049b      	lsls	r3, r3, #18
 8001d60:	4013      	ands	r3, r2
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x6ee>
 8001d64:	e03d      	b.n	8001de2 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <HAL_RCC_OscConfig+0x794>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_RCC_OscConfig+0x794>)
 8001d6c:	4921      	ldr	r1, [pc, #132]	; (8001df4 <HAL_RCC_OscConfig+0x79c>)
 8001d6e:	400a      	ands	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d72:	f7ff f99b 	bl	80010ac <HAL_GetTick>
 8001d76:	0003      	movs	r3, r0
 8001d78:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7ff f996 	bl	80010ac <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e02a      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_RCC_OscConfig+0x794>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	049b      	lsls	r3, r3, #18
 8001d96:	4013      	ands	r3, r2
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x724>
 8001d9a:	e022      	b.n	8001de2 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e01d      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001da8:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HAL_RCC_OscConfig+0x794>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	025b      	lsls	r3, r3, #9
 8001db4:	401a      	ands	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d10f      	bne.n	8001dde <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	23f0      	movs	r3, #240	; 0xf0
 8001dc2:	039b      	lsls	r3, r3, #14
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	23c0      	movs	r3, #192	; 0xc0
 8001dd2:	041b      	lsls	r3, r3, #16
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	0018      	movs	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b00a      	add	sp, #40	; 0x28
 8001dea:	bdb0      	pop	{r4, r5, r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	ff02ffff 	.word	0xff02ffff
 8001df4:	feffffff 	.word	0xfeffffff

08001df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e10d      	b.n	8002028 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b88      	ldr	r3, [pc, #544]	; (8002030 <HAL_RCC_ClockConfig+0x238>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2201      	movs	r2, #1
 8001e12:	4013      	ands	r3, r2
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d911      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b85      	ldr	r3, [pc, #532]	; (8002030 <HAL_RCC_ClockConfig+0x238>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4393      	bics	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	4b82      	ldr	r3, [pc, #520]	; (8002030 <HAL_RCC_ClockConfig+0x238>)
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2c:	4b80      	ldr	r3, [pc, #512]	; (8002030 <HAL_RCC_ClockConfig+0x238>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2201      	movs	r2, #1
 8001e32:	4013      	ands	r3, r2
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e0f4      	b.n	8002028 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2202      	movs	r2, #2
 8001e44:	4013      	ands	r3, r2
 8001e46:	d009      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e48:	4b7a      	ldr	r3, [pc, #488]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	22f0      	movs	r2, #240	; 0xf0
 8001e4e:	4393      	bics	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	4b77      	ldr	r3, [pc, #476]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2201      	movs	r2, #1
 8001e62:	4013      	ands	r3, r2
 8001e64:	d100      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x70>
 8001e66:	e089      	b.n	8001f7c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e70:	4b70      	ldr	r3, [pc, #448]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	029b      	lsls	r3, r3, #10
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d120      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0d3      	b.n	8002028 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d107      	bne.n	8001e98 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e88:	4b6a      	ldr	r3, [pc, #424]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	049b      	lsls	r3, r3, #18
 8001e90:	4013      	ands	r3, r2
 8001e92:	d114      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0c7      	b.n	8002028 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ea0:	4b64      	ldr	r3, [pc, #400]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d109      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0bc      	b.n	8002028 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001eae:	4b61      	ldr	r3, [pc, #388]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e0b4      	b.n	8002028 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ebe:	4b5d      	ldr	r3, [pc, #372]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	4393      	bics	r3, r2
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	4b59      	ldr	r3, [pc, #356]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed2:	f7ff f8eb 	bl	80010ac <HAL_GetTick>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d111      	bne.n	8001f06 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee2:	e009      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee4:	f7ff f8e2 	bl	80010ac <HAL_GetTick>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	4a52      	ldr	r2, [pc, #328]	; (8002038 <HAL_RCC_ClockConfig+0x240>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e097      	b.n	8002028 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef8:	4b4e      	ldr	r3, [pc, #312]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	220c      	movs	r2, #12
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d1ef      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xec>
 8001f04:	e03a      	b.n	8001f7c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d111      	bne.n	8001f32 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0e:	e009      	b.n	8001f24 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f10:	f7ff f8cc 	bl	80010ac <HAL_GetTick>
 8001f14:	0002      	movs	r2, r0
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	4a47      	ldr	r2, [pc, #284]	; (8002038 <HAL_RCC_ClockConfig+0x240>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e081      	b.n	8002028 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f24:	4b43      	ldr	r3, [pc, #268]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	220c      	movs	r2, #12
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b0c      	cmp	r3, #12
 8001f2e:	d1ef      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x118>
 8001f30:	e024      	b.n	8001f7c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d11b      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f3a:	e009      	b.n	8001f50 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3c:	f7ff f8b6 	bl	80010ac <HAL_GetTick>
 8001f40:	0002      	movs	r2, r0
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	4a3c      	ldr	r2, [pc, #240]	; (8002038 <HAL_RCC_ClockConfig+0x240>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e06b      	b.n	8002028 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f50:	4b38      	ldr	r3, [pc, #224]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	220c      	movs	r2, #12
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d1ef      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x144>
 8001f5c:	e00e      	b.n	8001f7c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5e:	f7ff f8a5 	bl	80010ac <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	4a33      	ldr	r2, [pc, #204]	; (8002038 <HAL_RCC_ClockConfig+0x240>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e05a      	b.n	8002028 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f72:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	220c      	movs	r2, #12
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d1f0      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b2c      	ldr	r3, [pc, #176]	; (8002030 <HAL_RCC_ClockConfig+0x238>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2201      	movs	r2, #1
 8001f82:	4013      	ands	r3, r2
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d211      	bcs.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b29      	ldr	r3, [pc, #164]	; (8002030 <HAL_RCC_ClockConfig+0x238>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4393      	bics	r3, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	4b26      	ldr	r3, [pc, #152]	; (8002030 <HAL_RCC_ClockConfig+0x238>)
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9c:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_RCC_ClockConfig+0x238>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e03c      	b.n	8002028 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d009      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	; (800203c <HAL_RCC_ClockConfig+0x244>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d00a      	beq.n	8001fec <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fd6:	4b17      	ldr	r3, [pc, #92]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	4a19      	ldr	r2, [pc, #100]	; (8002040 <HAL_RCC_ClockConfig+0x248>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	0019      	movs	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	00da      	lsls	r2, r3, #3
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fec:	f000 f82e 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8001ff0:	0001      	movs	r1, r0
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_RCC_ClockConfig+0x23c>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	4a11      	ldr	r2, [pc, #68]	; (8002044 <HAL_RCC_ClockConfig+0x24c>)
 8001ffe:	5cd3      	ldrb	r3, [r2, r3]
 8002000:	000a      	movs	r2, r1
 8002002:	40da      	lsrs	r2, r3
 8002004:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_RCC_ClockConfig+0x250>)
 8002006:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002008:	250b      	movs	r5, #11
 800200a:	197c      	adds	r4, r7, r5
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff f817 	bl	8001040 <HAL_InitTick>
 8002012:	0003      	movs	r3, r0
 8002014:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002016:	197b      	adds	r3, r7, r5
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800201e:	230b      	movs	r3, #11
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	e000      	b.n	8002028 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b004      	add	sp, #16
 800202e:	bdb0      	pop	{r4, r5, r7, pc}
 8002030:	40022000 	.word	0x40022000
 8002034:	40021000 	.word	0x40021000
 8002038:	00001388 	.word	0x00001388
 800203c:	fffff8ff 	.word	0xfffff8ff
 8002040:	ffffc7ff 	.word	0xffffc7ff
 8002044:	08005534 	.word	0x08005534
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002052:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	220c      	movs	r2, #12
 800205c:	4013      	ands	r3, r2
 800205e:	2b08      	cmp	r3, #8
 8002060:	d00e      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x34>
 8002062:	2b0c      	cmp	r3, #12
 8002064:	d00f      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0x3a>
 8002066:	2b04      	cmp	r3, #4
 8002068:	d157      	bne.n	800211a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800206a:	4b35      	ldr	r3, [pc, #212]	; (8002140 <HAL_RCC_GetSysClockFreq+0xf4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2210      	movs	r2, #16
 8002070:	4013      	ands	r3, r2
 8002072:	d002      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002074:	4b33      	ldr	r3, [pc, #204]	; (8002144 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002076:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002078:	e05d      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800207a:	4b33      	ldr	r3, [pc, #204]	; (8002148 <HAL_RCC_GetSysClockFreq+0xfc>)
 800207c:	613b      	str	r3, [r7, #16]
      break;
 800207e:	e05a      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002080:	4b32      	ldr	r3, [pc, #200]	; (800214c <HAL_RCC_GetSysClockFreq+0x100>)
 8002082:	613b      	str	r3, [r7, #16]
      break;
 8002084:	e057      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	0c9b      	lsrs	r3, r3, #18
 800208a:	220f      	movs	r2, #15
 800208c:	4013      	ands	r3, r2
 800208e:	4a30      	ldr	r2, [pc, #192]	; (8002150 <HAL_RCC_GetSysClockFreq+0x104>)
 8002090:	5cd3      	ldrb	r3, [r2, r3]
 8002092:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	0d9b      	lsrs	r3, r3, #22
 8002098:	2203      	movs	r2, #3
 800209a:	4013      	ands	r3, r2
 800209c:	3301      	adds	r3, #1
 800209e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <HAL_RCC_GetSysClockFreq+0xf4>)
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	025b      	lsls	r3, r3, #9
 80020a8:	4013      	ands	r3, r2
 80020aa:	d00f      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	000a      	movs	r2, r1
 80020b0:	0152      	lsls	r2, r2, #5
 80020b2:	1a52      	subs	r2, r2, r1
 80020b4:	0193      	lsls	r3, r2, #6
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	185b      	adds	r3, r3, r1
 80020bc:	025b      	lsls	r3, r3, #9
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7fe f821 	bl	8000108 <__udivsi3>
 80020c6:	0003      	movs	r3, r0
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	e023      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020cc:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <HAL_RCC_GetSysClockFreq+0xf4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2210      	movs	r2, #16
 80020d2:	4013      	ands	r3, r2
 80020d4:	d00f      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80020d6:	68b9      	ldr	r1, [r7, #8]
 80020d8:	000a      	movs	r2, r1
 80020da:	0152      	lsls	r2, r2, #5
 80020dc:	1a52      	subs	r2, r2, r1
 80020de:	0193      	lsls	r3, r2, #6
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	185b      	adds	r3, r3, r1
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7fe f80c 	bl	8000108 <__udivsi3>
 80020f0:	0003      	movs	r3, r0
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	e00e      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80020f6:	68b9      	ldr	r1, [r7, #8]
 80020f8:	000a      	movs	r2, r1
 80020fa:	0152      	lsls	r2, r2, #5
 80020fc:	1a52      	subs	r2, r2, r1
 80020fe:	0193      	lsls	r3, r2, #6
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	185b      	adds	r3, r3, r1
 8002106:	029b      	lsls	r3, r3, #10
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	0018      	movs	r0, r3
 800210c:	f7fd fffc 	bl	8000108 <__udivsi3>
 8002110:	0003      	movs	r3, r0
 8002112:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
      break;
 8002118:	e00d      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_GetSysClockFreq+0xf4>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	0b5b      	lsrs	r3, r3, #13
 8002120:	2207      	movs	r2, #7
 8002122:	4013      	ands	r3, r2
 8002124:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	3301      	adds	r3, #1
 800212a:	2280      	movs	r2, #128	; 0x80
 800212c:	0212      	lsls	r2, r2, #8
 800212e:	409a      	lsls	r2, r3
 8002130:	0013      	movs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
      break;
 8002134:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002136:	693b      	ldr	r3, [r7, #16]
}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b006      	add	sp, #24
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	003d0900 	.word	0x003d0900
 8002148:	00f42400 	.word	0x00f42400
 800214c:	007a1200 	.word	0x007a1200
 8002150:	0800554c 	.word	0x0800554c

08002154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002158:	4b02      	ldr	r3, [pc, #8]	; (8002164 <HAL_RCC_GetHCLKFreq+0x10>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	0018      	movs	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	20000004 	.word	0x20000004

08002168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800216c:	f7ff fff2 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 8002170:	0001      	movs	r1, r0
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	0a1b      	lsrs	r3, r3, #8
 8002178:	2207      	movs	r2, #7
 800217a:	4013      	ands	r3, r2
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <HAL_RCC_GetPCLK1Freq+0x28>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	40d9      	lsrs	r1, r3
 8002182:	000b      	movs	r3, r1
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	40021000 	.word	0x40021000
 8002190:	08005544 	.word	0x08005544

08002194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002198:	f7ff ffdc 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 800219c:	0001      	movs	r1, r0
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	0adb      	lsrs	r3, r3, #11
 80021a4:	2207      	movs	r2, #7
 80021a6:	4013      	ands	r3, r2
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	40d9      	lsrs	r1, r3
 80021ae:	000b      	movs	r3, r1
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	40021000 	.word	0x40021000
 80021bc:	08005544 	.word	0x08005544

080021c0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2220      	movs	r2, #32
 80021ce:	4013      	ands	r3, r2
 80021d0:	d106      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	4013      	ands	r3, r2
 80021dc:	d100      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80021de:	e0dd      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80021e0:	2317      	movs	r3, #23
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e8:	4ba4      	ldr	r3, [pc, #656]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	055b      	lsls	r3, r3, #21
 80021f0:	4013      	ands	r3, r2
 80021f2:	d10a      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f4:	4ba1      	ldr	r3, [pc, #644]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021f8:	4ba0      	ldr	r3, [pc, #640]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021fa:	2180      	movs	r1, #128	; 0x80
 80021fc:	0549      	lsls	r1, r1, #21
 80021fe:	430a      	orrs	r2, r1
 8002200:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002202:	2317      	movs	r3, #23
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220a:	4b9d      	ldr	r3, [pc, #628]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4013      	ands	r3, r2
 8002214:	d11a      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002216:	4b9a      	ldr	r3, [pc, #616]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4b99      	ldr	r3, [pc, #612]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	0049      	lsls	r1, r1, #1
 8002220:	430a      	orrs	r2, r1
 8002222:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002224:	f7fe ff42 	bl	80010ac <HAL_GetTick>
 8002228:	0003      	movs	r3, r0
 800222a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7fe ff3d 	bl	80010ac <HAL_GetTick>
 8002232:	0002      	movs	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b64      	cmp	r3, #100	; 0x64
 800223a:	d901      	bls.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e118      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	4b8f      	ldr	r3, [pc, #572]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4013      	ands	r3, r2
 800224a:	d0f0      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800224c:	4b8b      	ldr	r3, [pc, #556]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	23c0      	movs	r3, #192	; 0xc0
 8002252:	039b      	lsls	r3, r3, #14
 8002254:	4013      	ands	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	23c0      	movs	r3, #192	; 0xc0
 800225e:	039b      	lsls	r3, r3, #14
 8002260:	4013      	ands	r3, r2
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	429a      	cmp	r2, r3
 8002266:	d107      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	23c0      	movs	r3, #192	; 0xc0
 800226e:	039b      	lsls	r3, r3, #14
 8002270:	4013      	ands	r3, r2
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	429a      	cmp	r2, r3
 8002276:	d013      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	23c0      	movs	r3, #192	; 0xc0
 800227e:	029b      	lsls	r3, r3, #10
 8002280:	401a      	ands	r2, r3
 8002282:	23c0      	movs	r3, #192	; 0xc0
 8002284:	029b      	lsls	r3, r3, #10
 8002286:	429a      	cmp	r2, r3
 8002288:	d10a      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800228a:	4b7c      	ldr	r3, [pc, #496]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	029b      	lsls	r3, r3, #10
 8002292:	401a      	ands	r2, r3
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	029b      	lsls	r3, r3, #10
 8002298:	429a      	cmp	r2, r3
 800229a:	d101      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0e8      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80022a0:	4b76      	ldr	r3, [pc, #472]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022a4:	23c0      	movs	r3, #192	; 0xc0
 80022a6:	029b      	lsls	r3, r3, #10
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d049      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	23c0      	movs	r3, #192	; 0xc0
 80022b8:	029b      	lsls	r3, r3, #10
 80022ba:	4013      	ands	r3, r2
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d004      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2220      	movs	r2, #32
 80022c8:	4013      	ands	r3, r2
 80022ca:	d10d      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	23c0      	movs	r3, #192	; 0xc0
 80022d2:	029b      	lsls	r3, r3, #10
 80022d4:	4013      	ands	r3, r2
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d034      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	4013      	ands	r3, r2
 80022e6:	d02e      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80022e8:	4b64      	ldr	r3, [pc, #400]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ec:	4a65      	ldr	r2, [pc, #404]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022f2:	4b62      	ldr	r3, [pc, #392]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022f6:	4b61      	ldr	r3, [pc, #388]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	0309      	lsls	r1, r1, #12
 80022fc:	430a      	orrs	r2, r1
 80022fe:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002300:	4b5e      	ldr	r3, [pc, #376]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002304:	4b5d      	ldr	r3, [pc, #372]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002306:	4960      	ldr	r1, [pc, #384]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002308:	400a      	ands	r2, r1
 800230a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800230c:	4b5b      	ldr	r3, [pc, #364]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4013      	ands	r3, r2
 800231a:	d014      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7fe fec6 	bl	80010ac <HAL_GetTick>
 8002320:	0003      	movs	r3, r0
 8002322:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002324:	e009      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7fe fec1 	bl	80010ac <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	4a56      	ldr	r2, [pc, #344]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e09b      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800233a:	4b50      	ldr	r3, [pc, #320]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800233c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4013      	ands	r3, r2
 8002344:	d0ef      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	23c0      	movs	r3, #192	; 0xc0
 800234c:	029b      	lsls	r3, r3, #10
 800234e:	401a      	ands	r2, r3
 8002350:	23c0      	movs	r3, #192	; 0xc0
 8002352:	029b      	lsls	r3, r3, #10
 8002354:	429a      	cmp	r2, r3
 8002356:	d10c      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002358:	4b48      	ldr	r3, [pc, #288]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a4c      	ldr	r2, [pc, #304]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800235e:	4013      	ands	r3, r2
 8002360:	0019      	movs	r1, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	23c0      	movs	r3, #192	; 0xc0
 8002368:	039b      	lsls	r3, r3, #14
 800236a:	401a      	ands	r2, r3
 800236c:	4b43      	ldr	r3, [pc, #268]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800236e:	430a      	orrs	r2, r1
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	4b42      	ldr	r3, [pc, #264]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002374:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	23c0      	movs	r3, #192	; 0xc0
 800237c:	029b      	lsls	r3, r3, #10
 800237e:	401a      	ands	r2, r3
 8002380:	4b3e      	ldr	r3, [pc, #248]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002382:	430a      	orrs	r2, r1
 8002384:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002386:	2317      	movs	r3, #23
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002390:	4b3a      	ldr	r3, [pc, #232]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002394:	4b39      	ldr	r3, [pc, #228]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002396:	493f      	ldr	r1, [pc, #252]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002398:	400a      	ands	r2, r1
 800239a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2201      	movs	r2, #1
 80023a2:	4013      	ands	r3, r2
 80023a4:	d009      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023a6:	4b35      	ldr	r3, [pc, #212]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	2203      	movs	r2, #3
 80023ac:	4393      	bics	r3, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	4b31      	ldr	r3, [pc, #196]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023b6:	430a      	orrs	r2, r1
 80023b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2202      	movs	r2, #2
 80023c0:	4013      	ands	r3, r2
 80023c2:	d009      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023c4:	4b2d      	ldr	r3, [pc, #180]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c8:	220c      	movs	r2, #12
 80023ca:	4393      	bics	r3, r2
 80023cc:	0019      	movs	r1, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	4b2a      	ldr	r3, [pc, #168]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023d4:	430a      	orrs	r2, r1
 80023d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2204      	movs	r2, #4
 80023de:	4013      	ands	r3, r2
 80023e0:	d009      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e6:	4a2c      	ldr	r2, [pc, #176]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	0019      	movs	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	4b22      	ldr	r3, [pc, #136]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023f2:	430a      	orrs	r2, r1
 80023f4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2208      	movs	r2, #8
 80023fc:	4013      	ands	r3, r2
 80023fe:	d009      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002400:	4b1e      	ldr	r3, [pc, #120]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002404:	4a25      	ldr	r2, [pc, #148]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002406:	4013      	ands	r3, r2
 8002408:	0019      	movs	r1, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002410:	430a      	orrs	r2, r1
 8002412:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4013      	ands	r3, r2
 800241e:	d009      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002420:	4b16      	ldr	r3, [pc, #88]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002424:	4a17      	ldr	r2, [pc, #92]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002426:	4013      	ands	r3, r2
 8002428:	0019      	movs	r1, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69da      	ldr	r2, [r3, #28]
 800242e:	4b13      	ldr	r3, [pc, #76]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002430:	430a      	orrs	r2, r1
 8002432:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2240      	movs	r2, #64	; 0x40
 800243a:	4013      	ands	r3, r2
 800243c:	d009      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800243e:	4b0f      	ldr	r3, [pc, #60]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002442:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002444:	4013      	ands	r3, r2
 8002446:	0019      	movs	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800244e:	430a      	orrs	r2, r1
 8002450:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2280      	movs	r2, #128	; 0x80
 8002458:	4013      	ands	r3, r2
 800245a:	d009      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800245e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002460:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002462:	4013      	ands	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1a      	ldr	r2, [r3, #32]
 800246a:	4b04      	ldr	r3, [pc, #16]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800246c:	430a      	orrs	r2, r1
 800246e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	0018      	movs	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	b006      	add	sp, #24
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	40021000 	.word	0x40021000
 8002480:	40007000 	.word	0x40007000
 8002484:	fffcffff 	.word	0xfffcffff
 8002488:	fff7ffff 	.word	0xfff7ffff
 800248c:	00001388 	.word	0x00001388
 8002490:	ffcfffff 	.word	0xffcfffff
 8002494:	efffffff 	.word	0xefffffff
 8002498:	fffff3ff 	.word	0xfffff3ff
 800249c:	ffffcfff 	.word	0xffffcfff
 80024a0:	fbffffff 	.word	0xfbffffff
 80024a4:	fff3ffff 	.word	0xfff3ffff

080024a8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e01e      	b.n	80024f8 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2239      	movs	r2, #57	; 0x39
 80024be:	5c9b      	ldrb	r3, [r3, r2]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d107      	bne.n	80024d6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2238      	movs	r2, #56	; 0x38
 80024ca:	2100      	movs	r1, #0
 80024cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f001 fdc1 	bl	8004058 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2239      	movs	r2, #57	; 0x39
 80024da:	2102      	movs	r1, #2
 80024dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3304      	adds	r3, #4
 80024e6:	0019      	movs	r1, r3
 80024e8:	0010      	movs	r0, r2
 80024ea:	f000 fabf 	bl	8002a6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2239      	movs	r2, #57	; 0x39
 80024f2:	2101      	movs	r1, #1
 80024f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	0018      	movs	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b002      	add	sp, #8
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d011      	beq.n	8002534 <HAL_TIM_OC_Start_IT+0x34>
 8002510:	d802      	bhi.n	8002518 <HAL_TIM_OC_Start_IT+0x18>
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8002516:	e028      	b.n	800256a <HAL_TIM_OC_Start_IT+0x6a>
  switch (Channel)
 8002518:	2b08      	cmp	r3, #8
 800251a:	d014      	beq.n	8002546 <HAL_TIM_OC_Start_IT+0x46>
 800251c:	2b0c      	cmp	r3, #12
 800251e:	d01b      	beq.n	8002558 <HAL_TIM_OC_Start_IT+0x58>
      break;
 8002520:	e023      	b.n	800256a <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2102      	movs	r1, #2
 800252e:	430a      	orrs	r2, r1
 8002530:	60da      	str	r2, [r3, #12]
      break;
 8002532:	e01a      	b.n	800256a <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2104      	movs	r1, #4
 8002540:	430a      	orrs	r2, r1
 8002542:	60da      	str	r2, [r3, #12]
      break;
 8002544:	e011      	b.n	800256a <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2108      	movs	r1, #8
 8002552:	430a      	orrs	r2, r1
 8002554:	60da      	str	r2, [r3, #12]
      break;
 8002556:	e008      	b.n	800256a <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2110      	movs	r1, #16
 8002564:	430a      	orrs	r2, r1
 8002566:	60da      	str	r2, [r3, #12]
      break;
 8002568:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6839      	ldr	r1, [r7, #0]
 8002570:	2201      	movs	r2, #1
 8002572:	0018      	movs	r0, r3
 8002574:	f000 fbdc 	bl	8002d30 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2207      	movs	r2, #7
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b06      	cmp	r3, #6
 8002588:	d007      	beq.n	800259a <HAL_TIM_OC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2101      	movs	r1, #1
 8002596:	430a      	orrs	r2, r1
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b004      	add	sp, #16
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e01e      	b.n	80025f4 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2239      	movs	r2, #57	; 0x39
 80025ba:	5c9b      	ldrb	r3, [r3, r2]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d107      	bne.n	80025d2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2238      	movs	r2, #56	; 0x38
 80025c6:	2100      	movs	r1, #0
 80025c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f001 fd2b 	bl	8004028 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2239      	movs	r2, #57	; 0x39
 80025d6:	2102      	movs	r1, #2
 80025d8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3304      	adds	r3, #4
 80025e2:	0019      	movs	r1, r3
 80025e4:	0010      	movs	r0, r2
 80025e6:	f000 fa41 	bl	8002a6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2239      	movs	r2, #57	; 0x39
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b002      	add	sp, #8
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6839      	ldr	r1, [r7, #0]
 800260c:	2201      	movs	r2, #1
 800260e:	0018      	movs	r0, r3
 8002610:	f000 fb8e 	bl	8002d30 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2207      	movs	r2, #7
 800261c:	4013      	ands	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b06      	cmp	r3, #6
 8002624:	d007      	beq.n	8002636 <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2101      	movs	r1, #1
 8002632:	430a      	orrs	r2, r1
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	b004      	add	sp, #16
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2202      	movs	r2, #2
 8002650:	4013      	ands	r3, r2
 8002652:	2b02      	cmp	r3, #2
 8002654:	d124      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2202      	movs	r2, #2
 800265e:	4013      	ands	r3, r2
 8002660:	2b02      	cmp	r3, #2
 8002662:	d11d      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2203      	movs	r2, #3
 800266a:	4252      	negs	r2, r2
 800266c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2203      	movs	r2, #3
 800267c:	4013      	ands	r3, r2
 800267e:	d004      	beq.n	800268a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	0018      	movs	r0, r3
 8002684:	f000 f9da 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
 8002688:	e007      	b.n	800269a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	0018      	movs	r0, r3
 800268e:	f000 f9cd 	bl	8002a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	0018      	movs	r0, r3
 8002696:	f000 f9d9 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	2204      	movs	r2, #4
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d125      	bne.n	80026fa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2204      	movs	r2, #4
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d11e      	bne.n	80026fa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2205      	movs	r2, #5
 80026c2:	4252      	negs	r2, r2
 80026c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2202      	movs	r2, #2
 80026ca:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	23c0      	movs	r3, #192	; 0xc0
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4013      	ands	r3, r2
 80026d8:	d004      	beq.n	80026e4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	0018      	movs	r0, r3
 80026de:	f000 f9ad 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
 80026e2:	e007      	b.n	80026f4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	0018      	movs	r0, r3
 80026e8:	f000 f9a0 	bl	8002a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	0018      	movs	r0, r3
 80026f0:	f000 f9ac 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2208      	movs	r2, #8
 8002702:	4013      	ands	r3, r2
 8002704:	2b08      	cmp	r3, #8
 8002706:	d124      	bne.n	8002752 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2208      	movs	r2, #8
 8002710:	4013      	ands	r3, r2
 8002712:	2b08      	cmp	r3, #8
 8002714:	d11d      	bne.n	8002752 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2209      	movs	r2, #9
 800271c:	4252      	negs	r2, r2
 800271e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2204      	movs	r2, #4
 8002724:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2203      	movs	r2, #3
 800272e:	4013      	ands	r3, r2
 8002730:	d004      	beq.n	800273c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	0018      	movs	r0, r3
 8002736:	f000 f981 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
 800273a:	e007      	b.n	800274c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	0018      	movs	r0, r3
 8002740:	f000 f974 	bl	8002a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	0018      	movs	r0, r3
 8002748:	f000 f980 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2210      	movs	r2, #16
 800275a:	4013      	ands	r3, r2
 800275c:	2b10      	cmp	r3, #16
 800275e:	d125      	bne.n	80027ac <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2210      	movs	r2, #16
 8002768:	4013      	ands	r3, r2
 800276a:	2b10      	cmp	r3, #16
 800276c:	d11e      	bne.n	80027ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2211      	movs	r2, #17
 8002774:	4252      	negs	r2, r2
 8002776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2208      	movs	r2, #8
 800277c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69da      	ldr	r2, [r3, #28]
 8002784:	23c0      	movs	r3, #192	; 0xc0
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4013      	ands	r3, r2
 800278a:	d004      	beq.n	8002796 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	0018      	movs	r0, r3
 8002790:	f000 f954 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
 8002794:	e007      	b.n	80027a6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	0018      	movs	r0, r3
 800279a:	f000 f947 	bl	8002a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f000 f953 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2201      	movs	r2, #1
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d10f      	bne.n	80027da <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d108      	bne.n	80027da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2202      	movs	r2, #2
 80027ce:	4252      	negs	r2, r2
 80027d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f000 f921 	bl	8002a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	2240      	movs	r2, #64	; 0x40
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b40      	cmp	r3, #64	; 0x40
 80027e6:	d10f      	bne.n	8002808 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2240      	movs	r2, #64	; 0x40
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b40      	cmp	r3, #64	; 0x40
 80027f4:	d108      	bne.n	8002808 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2241      	movs	r2, #65	; 0x41
 80027fc:	4252      	negs	r2, r2
 80027fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	0018      	movs	r0, r3
 8002804:	f000 f92a 	bl	8002a5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	b002      	add	sp, #8
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2238      	movs	r2, #56	; 0x38
 8002820:	5c9b      	ldrb	r3, [r3, r2]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_TIM_OC_ConfigChannel+0x1a>
 8002826:	2302      	movs	r3, #2
 8002828:	e03c      	b.n	80028a4 <HAL_TIM_OC_ConfigChannel+0x94>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2238      	movs	r2, #56	; 0x38
 800282e:	2101      	movs	r1, #1
 8002830:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2239      	movs	r2, #57	; 0x39
 8002836:	2102      	movs	r1, #2
 8002838:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b04      	cmp	r3, #4
 800283e:	d010      	beq.n	8002862 <HAL_TIM_OC_ConfigChannel+0x52>
 8002840:	d802      	bhi.n	8002848 <HAL_TIM_OC_ConfigChannel+0x38>
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8002846:	e024      	b.n	8002892 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8002848:	2b08      	cmp	r3, #8
 800284a:	d012      	beq.n	8002872 <HAL_TIM_OC_ConfigChannel+0x62>
 800284c:	2b0c      	cmp	r3, #12
 800284e:	d018      	beq.n	8002882 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8002850:	e01f      	b.n	8002892 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	0011      	movs	r1, r2
 800285a:	0018      	movs	r0, r3
 800285c:	f000 f964 	bl	8002b28 <TIM_OC1_SetConfig>
      break;
 8002860:	e017      	b.n	8002892 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	0011      	movs	r1, r2
 800286a:	0018      	movs	r0, r3
 800286c:	f000 f998 	bl	8002ba0 <TIM_OC2_SetConfig>
      break;
 8002870:	e00f      	b.n	8002892 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	0011      	movs	r1, r2
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f9d2 	bl	8002c24 <TIM_OC3_SetConfig>
      break;
 8002880:	e007      	b.n	8002892 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	0011      	movs	r1, r2
 800288a:	0018      	movs	r0, r3
 800288c:	f000 fa0a 	bl	8002ca4 <TIM_OC4_SetConfig>
      break;
 8002890:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2239      	movs	r2, #57	; 0x39
 8002896:	2101      	movs	r1, #1
 8002898:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2238      	movs	r2, #56	; 0x38
 800289e:	2100      	movs	r1, #0
 80028a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	0018      	movs	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b004      	add	sp, #16
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2238      	movs	r2, #56	; 0x38
 80028bc:	5c9b      	ldrb	r3, [r3, r2]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e0a4      	b.n	8002a10 <HAL_TIM_PWM_ConfigChannel+0x164>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2238      	movs	r2, #56	; 0x38
 80028ca:	2101      	movs	r1, #1
 80028cc:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2239      	movs	r2, #57	; 0x39
 80028d2:	2102      	movs	r1, #2
 80028d4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d029      	beq.n	8002930 <HAL_TIM_PWM_ConfigChannel+0x84>
 80028dc:	d802      	bhi.n	80028e4 <HAL_TIM_PWM_ConfigChannel+0x38>
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80028e2:	e08c      	b.n	80029fe <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d046      	beq.n	8002976 <HAL_TIM_PWM_ConfigChannel+0xca>
 80028e8:	2b0c      	cmp	r3, #12
 80028ea:	d065      	beq.n	80029b8 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80028ec:	e087      	b.n	80029fe <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	0011      	movs	r1, r2
 80028f6:	0018      	movs	r0, r3
 80028f8:	f000 f916 	bl	8002b28 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2108      	movs	r1, #8
 8002908:	430a      	orrs	r2, r1
 800290a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2104      	movs	r1, #4
 8002918:	438a      	bics	r2, r1
 800291a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6999      	ldr	r1, [r3, #24]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	619a      	str	r2, [r3, #24]
      break;
 800292e:	e066      	b.n	80029fe <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	0011      	movs	r1, r2
 8002938:	0018      	movs	r0, r3
 800293a:	f000 f931 	bl	8002ba0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699a      	ldr	r2, [r3, #24]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2180      	movs	r1, #128	; 0x80
 800294a:	0109      	lsls	r1, r1, #4
 800294c:	430a      	orrs	r2, r1
 800294e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	492f      	ldr	r1, [pc, #188]	; (8002a18 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800295c:	400a      	ands	r2, r1
 800295e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6999      	ldr	r1, [r3, #24]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	021a      	lsls	r2, r3, #8
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	619a      	str	r2, [r3, #24]
      break;
 8002974:	e043      	b.n	80029fe <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	0011      	movs	r1, r2
 800297e:	0018      	movs	r0, r3
 8002980:	f000 f950 	bl	8002c24 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69da      	ldr	r2, [r3, #28]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2108      	movs	r1, #8
 8002990:	430a      	orrs	r2, r1
 8002992:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2104      	movs	r1, #4
 80029a0:	438a      	bics	r2, r1
 80029a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69d9      	ldr	r1, [r3, #28]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	61da      	str	r2, [r3, #28]
      break;
 80029b6:	e022      	b.n	80029fe <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	0011      	movs	r1, r2
 80029c0:	0018      	movs	r0, r3
 80029c2:	f000 f96f 	bl	8002ca4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69da      	ldr	r2, [r3, #28]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2180      	movs	r1, #128	; 0x80
 80029d2:	0109      	lsls	r1, r1, #4
 80029d4:	430a      	orrs	r2, r1
 80029d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69da      	ldr	r2, [r3, #28]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	490d      	ldr	r1, [pc, #52]	; (8002a18 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80029e4:	400a      	ands	r2, r1
 80029e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	69d9      	ldr	r1, [r3, #28]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	021a      	lsls	r2, r3, #8
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	61da      	str	r2, [r3, #28]
      break;
 80029fc:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2239      	movs	r2, #57	; 0x39
 8002a02:	2101      	movs	r1, #1
 8002a04:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2238      	movs	r2, #56	; 0x38
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b004      	add	sp, #16
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	fffffbff 	.word	0xfffffbff

08002a1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a24:	46c0      	nop			; (mov r8, r8)
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b002      	add	sp, #8
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a44:	46c0      	nop			; (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b002      	add	sp, #8
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a54:	46c0      	nop			; (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b002      	add	sp, #8
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a64:	46c0      	nop			; (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b002      	add	sp, #8
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	05db      	lsls	r3, r3, #23
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d00b      	beq.n	8002a9e <TIM_Base_SetConfig+0x32>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a23      	ldr	r2, [pc, #140]	; (8002b18 <TIM_Base_SetConfig+0xac>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <TIM_Base_SetConfig+0x32>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a22      	ldr	r2, [pc, #136]	; (8002b1c <TIM_Base_SetConfig+0xb0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d003      	beq.n	8002a9e <TIM_Base_SetConfig+0x32>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a21      	ldr	r2, [pc, #132]	; (8002b20 <TIM_Base_SetConfig+0xb4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d108      	bne.n	8002ab0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2270      	movs	r2, #112	; 0x70
 8002aa2:	4393      	bics	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	05db      	lsls	r3, r3, #23
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d00b      	beq.n	8002ad2 <TIM_Base_SetConfig+0x66>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <TIM_Base_SetConfig+0xac>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d007      	beq.n	8002ad2 <TIM_Base_SetConfig+0x66>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a15      	ldr	r2, [pc, #84]	; (8002b1c <TIM_Base_SetConfig+0xb0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d003      	beq.n	8002ad2 <TIM_Base_SetConfig+0x66>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <TIM_Base_SetConfig+0xb4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d108      	bne.n	8002ae4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <TIM_Base_SetConfig+0xb8>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2280      	movs	r2, #128	; 0x80
 8002ae8:	4393      	bics	r3, r2
 8002aea:	001a      	movs	r2, r3
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	615a      	str	r2, [r3, #20]
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b004      	add	sp, #16
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40000400 	.word	0x40000400
 8002b1c:	40010800 	.word	0x40010800
 8002b20:	40011400 	.word	0x40011400
 8002b24:	fffffcff 	.word	0xfffffcff

08002b28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	2201      	movs	r2, #1
 8002b38:	4393      	bics	r3, r2
 8002b3a:	001a      	movs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2270      	movs	r2, #112	; 0x70
 8002b56:	4393      	bics	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	4393      	bics	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	4393      	bics	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	621a      	str	r2, [r3, #32]
}
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b006      	add	sp, #24
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	2210      	movs	r2, #16
 8002bb0:	4393      	bics	r3, r2
 8002bb2:	001a      	movs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4a13      	ldr	r2, [pc, #76]	; (8002c1c <TIM_OC2_SetConfig+0x7c>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <TIM_OC2_SetConfig+0x80>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2220      	movs	r2, #32
 8002bea:	4393      	bics	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	621a      	str	r2, [r3, #32]
}
 8002c14:	46c0      	nop			; (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b006      	add	sp, #24
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	ffff8fff 	.word	0xffff8fff
 8002c20:	fffffcff 	.word	0xfffffcff

08002c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	4a1a      	ldr	r2, [pc, #104]	; (8002c9c <TIM_OC3_SetConfig+0x78>)
 8002c34:	401a      	ands	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2270      	movs	r2, #112	; 0x70
 8002c50:	4393      	bics	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2203      	movs	r2, #3
 8002c58:	4393      	bics	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <TIM_OC3_SetConfig+0x7c>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	621a      	str	r2, [r3, #32]
}
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b006      	add	sp, #24
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	fffffeff 	.word	0xfffffeff
 8002ca0:	fffffdff 	.word	0xfffffdff

08002ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	4a1b      	ldr	r2, [pc, #108]	; (8002d20 <TIM_OC4_SetConfig+0x7c>)
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <TIM_OC4_SetConfig+0x80>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <TIM_OC4_SetConfig+0x84>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	4a10      	ldr	r2, [pc, #64]	; (8002d2c <TIM_OC4_SetConfig+0x88>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	031b      	lsls	r3, r3, #12
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b006      	add	sp, #24
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	ffffefff 	.word	0xffffefff
 8002d24:	ffff8fff 	.word	0xffff8fff
 8002d28:	fffffcff 	.word	0xfffffcff
 8002d2c:	ffffdfff 	.word	0xffffdfff

08002d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	221f      	movs	r2, #31
 8002d40:	4013      	ands	r3, r2
 8002d42:	2201      	movs	r2, #1
 8002d44:	409a      	lsls	r2, r3
 8002d46:	0013      	movs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	43d2      	mvns	r2, r2
 8002d52:	401a      	ands	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a1a      	ldr	r2, [r3, #32]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	211f      	movs	r1, #31
 8002d60:	400b      	ands	r3, r1
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4099      	lsls	r1, r3
 8002d66:	000b      	movs	r3, r1
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	621a      	str	r2, [r3, #32]
}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b006      	add	sp, #24
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2238      	movs	r2, #56	; 0x38
 8002d84:	5c9b      	ldrb	r3, [r3, r2]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e032      	b.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2238      	movs	r2, #56	; 0x38
 8002d92:	2101      	movs	r1, #1
 8002d94:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2239      	movs	r2, #57	; 0x39
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2270      	movs	r2, #112	; 0x70
 8002db2:	4393      	bics	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2280      	movs	r2, #128	; 0x80
 8002dc4:	4393      	bics	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2239      	movs	r2, #57	; 0x39
 8002de6:	2101      	movs	r1, #1
 8002de8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2238      	movs	r2, #56	; 0x38
 8002dee:	2100      	movs	r1, #0
 8002df0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b004      	add	sp, #16
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2238      	movs	r2, #56	; 0x38
 8002e0a:	5c9b      	ldrb	r3, [r3, r2]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_TIMEx_RemapConfig+0x18>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e00c      	b.n	8002e2e <HAL_TIMEx_RemapConfig+0x32>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2238      	movs	r2, #56	; 0x38
 8002e18:	2101      	movs	r1, #1
 8002e1a:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2238      	movs	r2, #56	; 0x38
 8002e28:	2100      	movs	r1, #0
 8002e2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b002      	add	sp, #8
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e044      	b.n	8002ed4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d107      	bne.n	8002e62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2270      	movs	r2, #112	; 0x70
 8002e56:	2100      	movs	r1, #0
 8002e58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f001 f985 	bl	800416c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2224      	movs	r2, #36	; 0x24
 8002e66:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2101      	movs	r1, #1
 8002e74:	438a      	bics	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 f8d8 	bl	8003030 <UART_SetConfig>
 8002e80:	0003      	movs	r3, r0
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e024      	b.n	8002ed4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	0018      	movs	r0, r3
 8002e96:	f000 fbff 	bl	8003698 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	490d      	ldr	r1, [pc, #52]	; (8002edc <HAL_UART_Init+0xa4>)
 8002ea6:	400a      	ands	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	212a      	movs	r1, #42	; 0x2a
 8002eb6:	438a      	bics	r2, r1
 8002eb8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f000 fc97 	bl	8003800 <UART_CheckIdleState>
 8002ed2:	0003      	movs	r3, r0
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b002      	add	sp, #8
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	ffffb7ff 	.word	0xffffb7ff

08002ee0 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	1dbb      	adds	r3, r7, #6
 8002eee:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d000      	beq.n	8002efa <HAL_UART_Transmit+0x1a>
 8002ef8:	e094      	b.n	8003024 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_UART_Transmit+0x28>
 8002f00:	1dbb      	adds	r3, r7, #6
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e08c      	b.n	8003026 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	015b      	lsls	r3, r3, #5
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d109      	bne.n	8002f2c <HAL_UART_Transmit+0x4c>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2201      	movs	r2, #1
 8002f24:	4013      	ands	r3, r2
 8002f26:	d001      	beq.n	8002f2c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e07c      	b.n	8003026 <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2270      	movs	r2, #112	; 0x70
 8002f30:	5c9b      	ldrb	r3, [r3, r2]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_UART_Transmit+0x5a>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e075      	b.n	8003026 <HAL_UART_Transmit+0x146>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2270      	movs	r2, #112	; 0x70
 8002f3e:	2101      	movs	r1, #1
 8002f40:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2221      	movs	r2, #33	; 0x21
 8002f4c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002f4e:	f7fe f8ad 	bl	80010ac <HAL_GetTick>
 8002f52:	0003      	movs	r3, r0
 8002f54:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1dba      	adds	r2, r7, #6
 8002f5a:	2150      	movs	r1, #80	; 0x50
 8002f5c:	8812      	ldrh	r2, [r2, #0]
 8002f5e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1dba      	adds	r2, r7, #6
 8002f64:	2152      	movs	r1, #82	; 0x52
 8002f66:	8812      	ldrh	r2, [r2, #0]
 8002f68:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	015b      	lsls	r3, r3, #5
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d108      	bne.n	8002f88 <HAL_UART_Transmit+0xa8>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d104      	bne.n	8002f88 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	e003      	b.n	8002f90 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f90:	e02c      	b.n	8002fec <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	0013      	movs	r3, r2
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2180      	movs	r1, #128	; 0x80
 8002fa0:	f000 fc74 	bl	800388c <UART_WaitOnFlagUntilTimeout>
 8002fa4:	1e03      	subs	r3, r0, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e03c      	b.n	8003026 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10b      	bne.n	8002fca <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	001a      	movs	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	05d2      	lsls	r2, r2, #23
 8002fbe:	0dd2      	lsrs	r2, r2, #23
 8002fc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	e007      	b.n	8002fda <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2252      	movs	r2, #82	; 0x52
 8002fde:	5a9b      	ldrh	r3, [r3, r2]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b299      	uxth	r1, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2252      	movs	r2, #82	; 0x52
 8002fea:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2252      	movs	r2, #82	; 0x52
 8002ff0:	5a9b      	ldrh	r3, [r3, r2]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1cc      	bne.n	8002f92 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	0013      	movs	r3, r2
 8003002:	2200      	movs	r2, #0
 8003004:	2140      	movs	r1, #64	; 0x40
 8003006:	f000 fc41 	bl	800388c <UART_WaitOnFlagUntilTimeout>
 800300a:	1e03      	subs	r3, r0, #0
 800300c:	d001      	beq.n	8003012 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e009      	b.n	8003026 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2270      	movs	r2, #112	; 0x70
 800301c:	2100      	movs	r1, #0
 800301e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	e000      	b.n	8003026 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8003024:	2302      	movs	r3, #2
  }
}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b008      	add	sp, #32
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003030:	b5b0      	push	{r4, r5, r7, lr}
 8003032:	b08e      	sub	sp, #56	; 0x38
 8003034:	af00      	add	r7, sp, #0
 8003036:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003038:	231b      	movs	r3, #27
 800303a:	2218      	movs	r2, #24
 800303c:	4694      	mov	ip, r2
 800303e:	44bc      	add	ip, r7
 8003040:	4463      	add	r3, ip
 8003042:	2210      	movs	r2, #16
 8003044:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8003046:	2300      	movs	r3, #0
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800304a:	2313      	movs	r3, #19
 800304c:	2218      	movs	r2, #24
 800304e:	4694      	mov	ip, r2
 8003050:	44bc      	add	ip, r7
 8003052:	4463      	add	r3, ip
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003058:	2300      	movs	r3, #0
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	431a      	orrs	r2, r3
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	431a      	orrs	r2, r3
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	4313      	orrs	r3, r2
 8003072:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4aca      	ldr	r2, [pc, #808]	; (80033a4 <UART_SetConfig+0x374>)
 800307c:	4013      	ands	r3, r2
 800307e:	0019      	movs	r1, r3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003086:	430a      	orrs	r2, r1
 8003088:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4ac5      	ldr	r2, [pc, #788]	; (80033a8 <UART_SetConfig+0x378>)
 8003092:	4013      	ands	r3, r2
 8003094:	0019      	movs	r1, r3
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4abf      	ldr	r2, [pc, #764]	; (80033ac <UART_SetConfig+0x37c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d004      	beq.n	80030bc <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030b8:	4313      	orrs	r3, r2
 80030ba:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	4abb      	ldr	r2, [pc, #748]	; (80033b0 <UART_SetConfig+0x380>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	0019      	movs	r1, r3
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030ce:	430a      	orrs	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4ab7      	ldr	r2, [pc, #732]	; (80033b4 <UART_SetConfig+0x384>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d134      	bne.n	8003146 <UART_SetConfig+0x116>
 80030dc:	4bb6      	ldr	r3, [pc, #728]	; (80033b8 <UART_SetConfig+0x388>)
 80030de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e0:	2203      	movs	r2, #3
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d015      	beq.n	8003114 <UART_SetConfig+0xe4>
 80030e8:	d304      	bcc.n	80030f4 <UART_SetConfig+0xc4>
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d00a      	beq.n	8003104 <UART_SetConfig+0xd4>
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d018      	beq.n	8003124 <UART_SetConfig+0xf4>
 80030f2:	e01f      	b.n	8003134 <UART_SetConfig+0x104>
 80030f4:	231b      	movs	r3, #27
 80030f6:	2218      	movs	r2, #24
 80030f8:	4694      	mov	ip, r2
 80030fa:	44bc      	add	ip, r7
 80030fc:	4463      	add	r3, ip
 80030fe:	2201      	movs	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	e0c5      	b.n	8003290 <UART_SetConfig+0x260>
 8003104:	231b      	movs	r3, #27
 8003106:	2218      	movs	r2, #24
 8003108:	4694      	mov	ip, r2
 800310a:	44bc      	add	ip, r7
 800310c:	4463      	add	r3, ip
 800310e:	2202      	movs	r2, #2
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e0bd      	b.n	8003290 <UART_SetConfig+0x260>
 8003114:	231b      	movs	r3, #27
 8003116:	2218      	movs	r2, #24
 8003118:	4694      	mov	ip, r2
 800311a:	44bc      	add	ip, r7
 800311c:	4463      	add	r3, ip
 800311e:	2204      	movs	r2, #4
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e0b5      	b.n	8003290 <UART_SetConfig+0x260>
 8003124:	231b      	movs	r3, #27
 8003126:	2218      	movs	r2, #24
 8003128:	4694      	mov	ip, r2
 800312a:	44bc      	add	ip, r7
 800312c:	4463      	add	r3, ip
 800312e:	2208      	movs	r2, #8
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	e0ad      	b.n	8003290 <UART_SetConfig+0x260>
 8003134:	231b      	movs	r3, #27
 8003136:	2218      	movs	r2, #24
 8003138:	4694      	mov	ip, r2
 800313a:	44bc      	add	ip, r7
 800313c:	4463      	add	r3, ip
 800313e:	2210      	movs	r2, #16
 8003140:	701a      	strb	r2, [r3, #0]
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	e0a4      	b.n	8003290 <UART_SetConfig+0x260>
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a9c      	ldr	r2, [pc, #624]	; (80033bc <UART_SetConfig+0x38c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d137      	bne.n	80031c0 <UART_SetConfig+0x190>
 8003150:	4b99      	ldr	r3, [pc, #612]	; (80033b8 <UART_SetConfig+0x388>)
 8003152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003154:	220c      	movs	r2, #12
 8003156:	4013      	ands	r3, r2
 8003158:	2b04      	cmp	r3, #4
 800315a:	d018      	beq.n	800318e <UART_SetConfig+0x15e>
 800315c:	d802      	bhi.n	8003164 <UART_SetConfig+0x134>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <UART_SetConfig+0x13e>
 8003162:	e024      	b.n	80031ae <UART_SetConfig+0x17e>
 8003164:	2b08      	cmp	r3, #8
 8003166:	d00a      	beq.n	800317e <UART_SetConfig+0x14e>
 8003168:	2b0c      	cmp	r3, #12
 800316a:	d018      	beq.n	800319e <UART_SetConfig+0x16e>
 800316c:	e01f      	b.n	80031ae <UART_SetConfig+0x17e>
 800316e:	231b      	movs	r3, #27
 8003170:	2218      	movs	r2, #24
 8003172:	4694      	mov	ip, r2
 8003174:	44bc      	add	ip, r7
 8003176:	4463      	add	r3, ip
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e088      	b.n	8003290 <UART_SetConfig+0x260>
 800317e:	231b      	movs	r3, #27
 8003180:	2218      	movs	r2, #24
 8003182:	4694      	mov	ip, r2
 8003184:	44bc      	add	ip, r7
 8003186:	4463      	add	r3, ip
 8003188:	2202      	movs	r2, #2
 800318a:	701a      	strb	r2, [r3, #0]
 800318c:	e080      	b.n	8003290 <UART_SetConfig+0x260>
 800318e:	231b      	movs	r3, #27
 8003190:	2218      	movs	r2, #24
 8003192:	4694      	mov	ip, r2
 8003194:	44bc      	add	ip, r7
 8003196:	4463      	add	r3, ip
 8003198:	2204      	movs	r2, #4
 800319a:	701a      	strb	r2, [r3, #0]
 800319c:	e078      	b.n	8003290 <UART_SetConfig+0x260>
 800319e:	231b      	movs	r3, #27
 80031a0:	2218      	movs	r2, #24
 80031a2:	4694      	mov	ip, r2
 80031a4:	44bc      	add	ip, r7
 80031a6:	4463      	add	r3, ip
 80031a8:	2208      	movs	r2, #8
 80031aa:	701a      	strb	r2, [r3, #0]
 80031ac:	e070      	b.n	8003290 <UART_SetConfig+0x260>
 80031ae:	231b      	movs	r3, #27
 80031b0:	2218      	movs	r2, #24
 80031b2:	4694      	mov	ip, r2
 80031b4:	44bc      	add	ip, r7
 80031b6:	4463      	add	r3, ip
 80031b8:	2210      	movs	r2, #16
 80031ba:	701a      	strb	r2, [r3, #0]
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	e067      	b.n	8003290 <UART_SetConfig+0x260>
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a7e      	ldr	r2, [pc, #504]	; (80033c0 <UART_SetConfig+0x390>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d107      	bne.n	80031da <UART_SetConfig+0x1aa>
 80031ca:	231b      	movs	r3, #27
 80031cc:	2218      	movs	r2, #24
 80031ce:	4694      	mov	ip, r2
 80031d0:	44bc      	add	ip, r7
 80031d2:	4463      	add	r3, ip
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
 80031d8:	e05a      	b.n	8003290 <UART_SetConfig+0x260>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a79      	ldr	r2, [pc, #484]	; (80033c4 <UART_SetConfig+0x394>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d107      	bne.n	80031f4 <UART_SetConfig+0x1c4>
 80031e4:	231b      	movs	r3, #27
 80031e6:	2218      	movs	r2, #24
 80031e8:	4694      	mov	ip, r2
 80031ea:	44bc      	add	ip, r7
 80031ec:	4463      	add	r3, ip
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	e04d      	b.n	8003290 <UART_SetConfig+0x260>
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a6c      	ldr	r2, [pc, #432]	; (80033ac <UART_SetConfig+0x37c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d141      	bne.n	8003282 <UART_SetConfig+0x252>
 80031fe:	4b6e      	ldr	r3, [pc, #440]	; (80033b8 <UART_SetConfig+0x388>)
 8003200:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003202:	23c0      	movs	r3, #192	; 0xc0
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	4013      	ands	r3, r2
 8003208:	2280      	movs	r2, #128	; 0x80
 800320a:	00d2      	lsls	r2, r2, #3
 800320c:	4293      	cmp	r3, r2
 800320e:	d01f      	beq.n	8003250 <UART_SetConfig+0x220>
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	00d2      	lsls	r2, r2, #3
 8003214:	4293      	cmp	r3, r2
 8003216:	d802      	bhi.n	800321e <UART_SetConfig+0x1ee>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d009      	beq.n	8003230 <UART_SetConfig+0x200>
 800321c:	e028      	b.n	8003270 <UART_SetConfig+0x240>
 800321e:	2280      	movs	r2, #128	; 0x80
 8003220:	0112      	lsls	r2, r2, #4
 8003222:	4293      	cmp	r3, r2
 8003224:	d00c      	beq.n	8003240 <UART_SetConfig+0x210>
 8003226:	22c0      	movs	r2, #192	; 0xc0
 8003228:	0112      	lsls	r2, r2, #4
 800322a:	4293      	cmp	r3, r2
 800322c:	d018      	beq.n	8003260 <UART_SetConfig+0x230>
 800322e:	e01f      	b.n	8003270 <UART_SetConfig+0x240>
 8003230:	231b      	movs	r3, #27
 8003232:	2218      	movs	r2, #24
 8003234:	4694      	mov	ip, r2
 8003236:	44bc      	add	ip, r7
 8003238:	4463      	add	r3, ip
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e027      	b.n	8003290 <UART_SetConfig+0x260>
 8003240:	231b      	movs	r3, #27
 8003242:	2218      	movs	r2, #24
 8003244:	4694      	mov	ip, r2
 8003246:	44bc      	add	ip, r7
 8003248:	4463      	add	r3, ip
 800324a:	2202      	movs	r2, #2
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	e01f      	b.n	8003290 <UART_SetConfig+0x260>
 8003250:	231b      	movs	r3, #27
 8003252:	2218      	movs	r2, #24
 8003254:	4694      	mov	ip, r2
 8003256:	44bc      	add	ip, r7
 8003258:	4463      	add	r3, ip
 800325a:	2204      	movs	r2, #4
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	e017      	b.n	8003290 <UART_SetConfig+0x260>
 8003260:	231b      	movs	r3, #27
 8003262:	2218      	movs	r2, #24
 8003264:	4694      	mov	ip, r2
 8003266:	44bc      	add	ip, r7
 8003268:	4463      	add	r3, ip
 800326a:	2208      	movs	r2, #8
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e00f      	b.n	8003290 <UART_SetConfig+0x260>
 8003270:	231b      	movs	r3, #27
 8003272:	2218      	movs	r2, #24
 8003274:	4694      	mov	ip, r2
 8003276:	44bc      	add	ip, r7
 8003278:	4463      	add	r3, ip
 800327a:	2210      	movs	r2, #16
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	e006      	b.n	8003290 <UART_SetConfig+0x260>
 8003282:	231b      	movs	r3, #27
 8003284:	2218      	movs	r2, #24
 8003286:	4694      	mov	ip, r2
 8003288:	44bc      	add	ip, r7
 800328a:	4463      	add	r3, ip
 800328c:	2210      	movs	r2, #16
 800328e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a45      	ldr	r2, [pc, #276]	; (80033ac <UART_SetConfig+0x37c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d000      	beq.n	800329c <UART_SetConfig+0x26c>
 800329a:	e09d      	b.n	80033d8 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800329c:	231b      	movs	r3, #27
 800329e:	2218      	movs	r2, #24
 80032a0:	4694      	mov	ip, r2
 80032a2:	44bc      	add	ip, r7
 80032a4:	4463      	add	r3, ip
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d00d      	beq.n	80032c8 <UART_SetConfig+0x298>
 80032ac:	dc02      	bgt.n	80032b4 <UART_SetConfig+0x284>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <UART_SetConfig+0x28e>
 80032b2:	e01d      	b.n	80032f0 <UART_SetConfig+0x2c0>
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d012      	beq.n	80032de <UART_SetConfig+0x2ae>
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d015      	beq.n	80032e8 <UART_SetConfig+0x2b8>
 80032bc:	e018      	b.n	80032f0 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80032be:	f7fe ff53 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 80032c2:	0003      	movs	r3, r0
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032c6:	e01b      	b.n	8003300 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032c8:	4b3b      	ldr	r3, [pc, #236]	; (80033b8 <UART_SetConfig+0x388>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2210      	movs	r2, #16
 80032ce:	4013      	ands	r3, r2
 80032d0:	d002      	beq.n	80032d8 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80032d2:	4b3d      	ldr	r3, [pc, #244]	; (80033c8 <UART_SetConfig+0x398>)
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80032d6:	e013      	b.n	8003300 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80032d8:	4b3c      	ldr	r3, [pc, #240]	; (80033cc <UART_SetConfig+0x39c>)
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032dc:	e010      	b.n	8003300 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80032de:	f7fe feb5 	bl	800204c <HAL_RCC_GetSysClockFreq>
 80032e2:	0003      	movs	r3, r0
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032e6:	e00b      	b.n	8003300 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032ee:	e007      	b.n	8003300 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80032f0:	2313      	movs	r3, #19
 80032f2:	2218      	movs	r2, #24
 80032f4:	4694      	mov	ip, r2
 80032f6:	44bc      	add	ip, r7
 80032f8:	4463      	add	r3, ip
 80032fa:	2201      	movs	r2, #1
 80032fc:	701a      	strb	r2, [r3, #0]
        break;
 80032fe:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <UART_SetConfig+0x2d8>
 8003306:	e1a6      	b.n	8003656 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	0013      	movs	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	189b      	adds	r3, r3, r2
 8003312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003314:	429a      	cmp	r2, r3
 8003316:	d305      	bcc.n	8003324 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800331e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003320:	429a      	cmp	r2, r3
 8003322:	d907      	bls.n	8003334 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8003324:	2313      	movs	r3, #19
 8003326:	2218      	movs	r2, #24
 8003328:	4694      	mov	ip, r2
 800332a:	44bc      	add	ip, r7
 800332c:	4463      	add	r3, ip
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	e190      	b.n	8003656 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	6939      	ldr	r1, [r7, #16]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	000b      	movs	r3, r1
 8003342:	0e1b      	lsrs	r3, r3, #24
 8003344:	0010      	movs	r0, r2
 8003346:	0205      	lsls	r5, r0, #8
 8003348:	431d      	orrs	r5, r3
 800334a:	000b      	movs	r3, r1
 800334c:	021c      	lsls	r4, r3, #8
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	68b8      	ldr	r0, [r7, #8]
 800335c:	68f9      	ldr	r1, [r7, #12]
 800335e:	1900      	adds	r0, r0, r4
 8003360:	4169      	adcs	r1, r5
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	2300      	movs	r3, #0
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f7fd f840 	bl	80003f4 <__aeabi_uldivmod>
 8003374:	0003      	movs	r3, r0
 8003376:	000c      	movs	r4, r1
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <UART_SetConfig+0x3a0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d908      	bls.n	8003394 <UART_SetConfig+0x364>
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	4a13      	ldr	r2, [pc, #76]	; (80033d4 <UART_SetConfig+0x3a4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d804      	bhi.n	8003394 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	e160      	b.n	8003656 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8003394:	2313      	movs	r3, #19
 8003396:	2218      	movs	r2, #24
 8003398:	4694      	mov	ip, r2
 800339a:	44bc      	add	ip, r7
 800339c:	4463      	add	r3, ip
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e158      	b.n	8003656 <UART_SetConfig+0x626>
 80033a4:	efff69f3 	.word	0xefff69f3
 80033a8:	ffffcfff 	.word	0xffffcfff
 80033ac:	40004800 	.word	0x40004800
 80033b0:	fffff4ff 	.word	0xfffff4ff
 80033b4:	40013800 	.word	0x40013800
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40004400 	.word	0x40004400
 80033c0:	40004c00 	.word	0x40004c00
 80033c4:	40005000 	.word	0x40005000
 80033c8:	003d0900 	.word	0x003d0900
 80033cc:	00f42400 	.word	0x00f42400
 80033d0:	000002ff 	.word	0x000002ff
 80033d4:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d000      	beq.n	80033e6 <UART_SetConfig+0x3b6>
 80033e4:	e0a9      	b.n	800353a <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 80033e6:	231b      	movs	r3, #27
 80033e8:	2218      	movs	r2, #24
 80033ea:	4694      	mov	ip, r2
 80033ec:	44bc      	add	ip, r7
 80033ee:	4463      	add	r3, ip
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d86d      	bhi.n	80034d2 <UART_SetConfig+0x4a2>
 80033f6:	009a      	lsls	r2, r3, #2
 80033f8:	4b9f      	ldr	r3, [pc, #636]	; (8003678 <UART_SetConfig+0x648>)
 80033fa:	18d3      	adds	r3, r2, r3
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003400:	f7fe feb2 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8003404:	0003      	movs	r3, r0
 8003406:	005a      	lsls	r2, r3, #1
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	18d2      	adds	r2, r2, r3
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	0019      	movs	r1, r3
 8003416:	0010      	movs	r0, r2
 8003418:	f7fc fe76 	bl	8000108 <__udivsi3>
 800341c:	0003      	movs	r3, r0
 800341e:	b29b      	uxth	r3, r3
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003422:	e05e      	b.n	80034e2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003424:	f7fe feb6 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 8003428:	0003      	movs	r3, r0
 800342a:	005a      	lsls	r2, r3, #1
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	18d2      	adds	r2, r2, r3
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	0019      	movs	r1, r3
 800343a:	0010      	movs	r0, r2
 800343c:	f7fc fe64 	bl	8000108 <__udivsi3>
 8003440:	0003      	movs	r3, r0
 8003442:	b29b      	uxth	r3, r3
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003446:	e04c      	b.n	80034e2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003448:	4b8c      	ldr	r3, [pc, #560]	; (800367c <UART_SetConfig+0x64c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2210      	movs	r2, #16
 800344e:	4013      	ands	r3, r2
 8003450:	d00e      	beq.n	8003470 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	4a89      	ldr	r2, [pc, #548]	; (8003680 <UART_SetConfig+0x650>)
 800345a:	189a      	adds	r2, r3, r2
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	0019      	movs	r1, r3
 8003462:	0010      	movs	r0, r2
 8003464:	f7fc fe50 	bl	8000108 <__udivsi3>
 8003468:	0003      	movs	r3, r0
 800346a:	b29b      	uxth	r3, r3
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800346e:	e038      	b.n	80034e2 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	4a83      	ldr	r2, [pc, #524]	; (8003684 <UART_SetConfig+0x654>)
 8003478:	189a      	adds	r2, r3, r2
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	0019      	movs	r1, r3
 8003480:	0010      	movs	r0, r2
 8003482:	f7fc fe41 	bl	8000108 <__udivsi3>
 8003486:	0003      	movs	r3, r0
 8003488:	b29b      	uxth	r3, r3
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800348c:	e029      	b.n	80034e2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800348e:	f7fe fddd 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8003492:	0003      	movs	r3, r0
 8003494:	005a      	lsls	r2, r3, #1
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	085b      	lsrs	r3, r3, #1
 800349c:	18d2      	adds	r2, r2, r3
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	0019      	movs	r1, r3
 80034a4:	0010      	movs	r0, r2
 80034a6:	f7fc fe2f 	bl	8000108 <__udivsi3>
 80034aa:	0003      	movs	r3, r0
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034b0:	e017      	b.n	80034e2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	2280      	movs	r2, #128	; 0x80
 80034ba:	0252      	lsls	r2, r2, #9
 80034bc:	189a      	adds	r2, r3, r2
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	0019      	movs	r1, r3
 80034c4:	0010      	movs	r0, r2
 80034c6:	f7fc fe1f 	bl	8000108 <__udivsi3>
 80034ca:	0003      	movs	r3, r0
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034d0:	e007      	b.n	80034e2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80034d2:	2313      	movs	r3, #19
 80034d4:	2218      	movs	r2, #24
 80034d6:	4694      	mov	ip, r2
 80034d8:	44bc      	add	ip, r7
 80034da:	4463      	add	r3, ip
 80034dc:	2201      	movs	r2, #1
 80034de:	701a      	strb	r2, [r3, #0]
        break;
 80034e0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e4:	2b0f      	cmp	r3, #15
 80034e6:	d920      	bls.n	800352a <UART_SetConfig+0x4fa>
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	4a67      	ldr	r2, [pc, #412]	; (8003688 <UART_SetConfig+0x658>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d81c      	bhi.n	800352a <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	200a      	movs	r0, #10
 80034f6:	2418      	movs	r4, #24
 80034f8:	193b      	adds	r3, r7, r4
 80034fa:	181b      	adds	r3, r3, r0
 80034fc:	210f      	movs	r1, #15
 80034fe:	438a      	bics	r2, r1
 8003500:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	b29b      	uxth	r3, r3
 8003508:	2207      	movs	r2, #7
 800350a:	4013      	ands	r3, r2
 800350c:	b299      	uxth	r1, r3
 800350e:	193b      	adds	r3, r7, r4
 8003510:	181b      	adds	r3, r3, r0
 8003512:	193a      	adds	r2, r7, r4
 8003514:	1812      	adds	r2, r2, r0
 8003516:	8812      	ldrh	r2, [r2, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	193a      	adds	r2, r7, r4
 8003522:	1812      	adds	r2, r2, r0
 8003524:	8812      	ldrh	r2, [r2, #0]
 8003526:	60da      	str	r2, [r3, #12]
 8003528:	e095      	b.n	8003656 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800352a:	2313      	movs	r3, #19
 800352c:	2218      	movs	r2, #24
 800352e:	4694      	mov	ip, r2
 8003530:	44bc      	add	ip, r7
 8003532:	4463      	add	r3, ip
 8003534:	2201      	movs	r2, #1
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	e08d      	b.n	8003656 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 800353a:	231b      	movs	r3, #27
 800353c:	2218      	movs	r2, #24
 800353e:	4694      	mov	ip, r2
 8003540:	44bc      	add	ip, r7
 8003542:	4463      	add	r3, ip
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b08      	cmp	r3, #8
 8003548:	d86a      	bhi.n	8003620 <UART_SetConfig+0x5f0>
 800354a:	009a      	lsls	r2, r3, #2
 800354c:	4b4f      	ldr	r3, [pc, #316]	; (800368c <UART_SetConfig+0x65c>)
 800354e:	18d3      	adds	r3, r2, r3
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003554:	f7fe fe08 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8003558:	0002      	movs	r2, r0
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	18d2      	adds	r2, r2, r3
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	0019      	movs	r1, r3
 8003568:	0010      	movs	r0, r2
 800356a:	f7fc fdcd 	bl	8000108 <__udivsi3>
 800356e:	0003      	movs	r3, r0
 8003570:	b29b      	uxth	r3, r3
 8003572:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003574:	e05c      	b.n	8003630 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003576:	f7fe fe0d 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 800357a:	0002      	movs	r2, r0
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	18d2      	adds	r2, r2, r3
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	0019      	movs	r1, r3
 800358a:	0010      	movs	r0, r2
 800358c:	f7fc fdbc 	bl	8000108 <__udivsi3>
 8003590:	0003      	movs	r3, r0
 8003592:	b29b      	uxth	r3, r3
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003596:	e04b      	b.n	8003630 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003598:	4b38      	ldr	r3, [pc, #224]	; (800367c <UART_SetConfig+0x64c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2210      	movs	r2, #16
 800359e:	4013      	ands	r3, r2
 80035a0:	d00e      	beq.n	80035c0 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	4a39      	ldr	r2, [pc, #228]	; (8003690 <UART_SetConfig+0x660>)
 80035aa:	189a      	adds	r2, r3, r2
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	0019      	movs	r1, r3
 80035b2:	0010      	movs	r0, r2
 80035b4:	f7fc fda8 	bl	8000108 <__udivsi3>
 80035b8:	0003      	movs	r3, r0
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80035be:	e037      	b.n	8003630 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	4a33      	ldr	r2, [pc, #204]	; (8003694 <UART_SetConfig+0x664>)
 80035c8:	189a      	adds	r2, r3, r2
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	0019      	movs	r1, r3
 80035d0:	0010      	movs	r0, r2
 80035d2:	f7fc fd99 	bl	8000108 <__udivsi3>
 80035d6:	0003      	movs	r3, r0
 80035d8:	b29b      	uxth	r3, r3
 80035da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035dc:	e028      	b.n	8003630 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80035de:	f7fe fd35 	bl	800204c <HAL_RCC_GetSysClockFreq>
 80035e2:	0002      	movs	r2, r0
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	085b      	lsrs	r3, r3, #1
 80035ea:	18d2      	adds	r2, r2, r3
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	0019      	movs	r1, r3
 80035f2:	0010      	movs	r0, r2
 80035f4:	f7fc fd88 	bl	8000108 <__udivsi3>
 80035f8:	0003      	movs	r3, r0
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035fe:	e017      	b.n	8003630 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	2280      	movs	r2, #128	; 0x80
 8003608:	0212      	lsls	r2, r2, #8
 800360a:	189a      	adds	r2, r3, r2
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	0019      	movs	r1, r3
 8003612:	0010      	movs	r0, r2
 8003614:	f7fc fd78 	bl	8000108 <__udivsi3>
 8003618:	0003      	movs	r3, r0
 800361a:	b29b      	uxth	r3, r3
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800361e:	e007      	b.n	8003630 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003620:	2313      	movs	r3, #19
 8003622:	2218      	movs	r2, #24
 8003624:	4694      	mov	ip, r2
 8003626:	44bc      	add	ip, r7
 8003628:	4463      	add	r3, ip
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]
        break;
 800362e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	2b0f      	cmp	r3, #15
 8003634:	d908      	bls.n	8003648 <UART_SetConfig+0x618>
 8003636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003638:	4a13      	ldr	r2, [pc, #76]	; (8003688 <UART_SetConfig+0x658>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d804      	bhi.n	8003648 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003644:	60da      	str	r2, [r3, #12]
 8003646:	e006      	b.n	8003656 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8003648:	2313      	movs	r3, #19
 800364a:	2218      	movs	r2, #24
 800364c:	4694      	mov	ip, r2
 800364e:	44bc      	add	ip, r7
 8003650:	4463      	add	r3, ip
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	2200      	movs	r2, #0
 800365a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2200      	movs	r2, #0
 8003660:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003662:	2313      	movs	r3, #19
 8003664:	2218      	movs	r2, #24
 8003666:	4694      	mov	ip, r2
 8003668:	44bc      	add	ip, r7
 800366a:	4463      	add	r3, ip
 800366c:	781b      	ldrb	r3, [r3, #0]
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b00e      	add	sp, #56	; 0x38
 8003674:	bdb0      	pop	{r4, r5, r7, pc}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	080054ec 	.word	0x080054ec
 800367c:	40021000 	.word	0x40021000
 8003680:	007a1200 	.word	0x007a1200
 8003684:	01e84800 	.word	0x01e84800
 8003688:	0000ffff 	.word	0x0000ffff
 800368c:	08005510 	.word	0x08005510
 8003690:	003d0900 	.word	0x003d0900
 8003694:	00f42400 	.word	0x00f42400

08003698 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	2201      	movs	r2, #1
 80036a6:	4013      	ands	r3, r2
 80036a8:	d00b      	beq.n	80036c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4a4a      	ldr	r2, [pc, #296]	; (80037dc <UART_AdvFeatureConfig+0x144>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	0019      	movs	r1, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	2202      	movs	r2, #2
 80036c8:	4013      	ands	r3, r2
 80036ca:	d00b      	beq.n	80036e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	4a43      	ldr	r2, [pc, #268]	; (80037e0 <UART_AdvFeatureConfig+0x148>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	0019      	movs	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	2204      	movs	r2, #4
 80036ea:	4013      	ands	r3, r2
 80036ec:	d00b      	beq.n	8003706 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4a3b      	ldr	r2, [pc, #236]	; (80037e4 <UART_AdvFeatureConfig+0x14c>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	0019      	movs	r1, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	2208      	movs	r2, #8
 800370c:	4013      	ands	r3, r2
 800370e:	d00b      	beq.n	8003728 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4a34      	ldr	r2, [pc, #208]	; (80037e8 <UART_AdvFeatureConfig+0x150>)
 8003718:	4013      	ands	r3, r2
 800371a:	0019      	movs	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	2210      	movs	r2, #16
 800372e:	4013      	ands	r3, r2
 8003730:	d00b      	beq.n	800374a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4a2c      	ldr	r2, [pc, #176]	; (80037ec <UART_AdvFeatureConfig+0x154>)
 800373a:	4013      	ands	r3, r2
 800373c:	0019      	movs	r1, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	2220      	movs	r2, #32
 8003750:	4013      	ands	r3, r2
 8003752:	d00b      	beq.n	800376c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	4a25      	ldr	r2, [pc, #148]	; (80037f0 <UART_AdvFeatureConfig+0x158>)
 800375c:	4013      	ands	r3, r2
 800375e:	0019      	movs	r1, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	2240      	movs	r2, #64	; 0x40
 8003772:	4013      	ands	r3, r2
 8003774:	d01d      	beq.n	80037b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4a1d      	ldr	r2, [pc, #116]	; (80037f4 <UART_AdvFeatureConfig+0x15c>)
 800377e:	4013      	ands	r3, r2
 8003780:	0019      	movs	r1, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003792:	2380      	movs	r3, #128	; 0x80
 8003794:	035b      	lsls	r3, r3, #13
 8003796:	429a      	cmp	r2, r3
 8003798:	d10b      	bne.n	80037b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	4a15      	ldr	r2, [pc, #84]	; (80037f8 <UART_AdvFeatureConfig+0x160>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	0019      	movs	r1, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2280      	movs	r2, #128	; 0x80
 80037b8:	4013      	ands	r3, r2
 80037ba:	d00b      	beq.n	80037d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4a0e      	ldr	r2, [pc, #56]	; (80037fc <UART_AdvFeatureConfig+0x164>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	0019      	movs	r1, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	605a      	str	r2, [r3, #4]
  }
}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b002      	add	sp, #8
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	fffdffff 	.word	0xfffdffff
 80037e0:	fffeffff 	.word	0xfffeffff
 80037e4:	fffbffff 	.word	0xfffbffff
 80037e8:	ffff7fff 	.word	0xffff7fff
 80037ec:	ffffefff 	.word	0xffffefff
 80037f0:	ffffdfff 	.word	0xffffdfff
 80037f4:	ffefffff 	.word	0xffefffff
 80037f8:	ff9fffff 	.word	0xff9fffff
 80037fc:	fff7ffff 	.word	0xfff7ffff

08003800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af02      	add	r7, sp, #8
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800380e:	f7fd fc4d 	bl	80010ac <HAL_GetTick>
 8003812:	0003      	movs	r3, r0
 8003814:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2208      	movs	r2, #8
 800381e:	4013      	ands	r3, r2
 8003820:	2b08      	cmp	r3, #8
 8003822:	d10d      	bne.n	8003840 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	0399      	lsls	r1, r3, #14
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4b16      	ldr	r3, [pc, #88]	; (8003888 <UART_CheckIdleState+0x88>)
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	0013      	movs	r3, r2
 8003832:	2200      	movs	r2, #0
 8003834:	f000 f82a 	bl	800388c <UART_WaitOnFlagUntilTimeout>
 8003838:	1e03      	subs	r3, r0, #0
 800383a:	d001      	beq.n	8003840 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e01f      	b.n	8003880 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2204      	movs	r2, #4
 8003848:	4013      	ands	r3, r2
 800384a:	2b04      	cmp	r3, #4
 800384c:	d10d      	bne.n	800386a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	03d9      	lsls	r1, r3, #15
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <UART_CheckIdleState+0x88>)
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	0013      	movs	r3, r2
 800385c:	2200      	movs	r2, #0
 800385e:	f000 f815 	bl	800388c <UART_WaitOnFlagUntilTimeout>
 8003862:	1e03      	subs	r3, r0, #0
 8003864:	d001      	beq.n	800386a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e00a      	b.n	8003880 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2270      	movs	r2, #112	; 0x70
 800387a:	2100      	movs	r1, #0
 800387c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	0018      	movs	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	b004      	add	sp, #16
 8003886:	bd80      	pop	{r7, pc}
 8003888:	01ffffff 	.word	0x01ffffff

0800388c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	1dfb      	adds	r3, r7, #7
 800389a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800389c:	e029      	b.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	3301      	adds	r3, #1
 80038a2:	d026      	beq.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a4:	f7fd fc02 	bl	80010ac <HAL_GetTick>
 80038a8:	0002      	movs	r2, r0
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d302      	bcc.n	80038ba <UART_WaitOnFlagUntilTimeout+0x2e>
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d11b      	bne.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4915      	ldr	r1, [pc, #84]	; (800391c <UART_WaitOnFlagUntilTimeout+0x90>)
 80038c6:	400a      	ands	r2, r1
 80038c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2101      	movs	r1, #1
 80038d6:	438a      	bics	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2270      	movs	r2, #112	; 0x70
 80038ea:	2100      	movs	r1, #0
 80038ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e00f      	b.n	8003912 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	4013      	ands	r3, r2
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	425a      	negs	r2, r3
 8003902:	4153      	adcs	r3, r2
 8003904:	b2db      	uxtb	r3, r3
 8003906:	001a      	movs	r2, r3
 8003908:	1dfb      	adds	r3, r7, #7
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d0c6      	beq.n	800389e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	0018      	movs	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	b004      	add	sp, #16
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	fffffe5f 	.word	0xfffffe5f

08003920 <arm_pid_f32>:
   * @return out processed output sample.
   */
  static __INLINE float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
 8003920:	b590      	push	{r4, r7, lr}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6839      	ldr	r1, [r7, #0]
 8003930:	1c18      	adds	r0, r3, #0
 8003932:	f7fc ffdb 	bl	80008ec <__aeabi_fmul>
 8003936:	1c03      	adds	r3, r0, #0
 8003938:	1c1c      	adds	r4, r3, #0
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	1c19      	adds	r1, r3, #0
 8003944:	1c10      	adds	r0, r2, #0
 8003946:	f7fc ffd1 	bl	80008ec <__aeabi_fmul>
 800394a:	1c03      	adds	r3, r0, #0
    out = (S->A0 * in) +
 800394c:	1c19      	adds	r1, r3, #0
 800394e:	1c20      	adds	r0, r4, #0
 8003950:	f7fc fe32 	bl	80005b8 <__aeabi_fadd>
 8003954:	1c03      	adds	r3, r0, #0
 8003956:	1c1c      	adds	r4, r3, #0
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	1c19      	adds	r1, r3, #0
 8003962:	1c10      	adds	r0, r2, #0
 8003964:	f7fc ffc2 	bl	80008ec <__aeabi_fmul>
 8003968:	1c03      	adds	r3, r0, #0
 800396a:	1c19      	adds	r1, r3, #0
 800396c:	1c20      	adds	r0, r4, #0
 800396e:	f7fc fe23 	bl	80005b8 <__aeabi_fadd>
 8003972:	1c03      	adds	r3, r0, #0
 8003974:	1c1a      	adds	r2, r3, #0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
    out = (S->A0 * in) +
 800397a:	1c19      	adds	r1, r3, #0
 800397c:	1c10      	adds	r0, r2, #0
 800397e:	f7fc fe1b 	bl	80005b8 <__aeabi_fadd>
 8003982:	1c03      	adds	r3, r0, #0
 8003984:	60fb      	str	r3, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800399a:	68fb      	ldr	r3, [r7, #12]

  }
 800399c:	1c18      	adds	r0, r3, #0
 800399e:	46bd      	mov	sp, r7
 80039a0:	b005      	add	sp, #20
 80039a2:	bd90      	pop	{r4, r7, pc}

080039a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039aa:	f7fd fb29 	bl	8001000 <HAL_Init>

  /* USER CODE BEGIN Init */
  R_PID.Kp = 5;
 80039ae:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <main+0x8c>)
 80039b0:	4a20      	ldr	r2, [pc, #128]	; (8003a34 <main+0x90>)
 80039b2:	619a      	str	r2, [r3, #24]
  R_PID.Kd = 0;
 80039b4:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <main+0x8c>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	621a      	str	r2, [r3, #32]
  R_PID.Ki = 0;
 80039ba:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <main+0x8c>)
 80039bc:	2200      	movs	r2, #0
 80039be:	61da      	str	r2, [r3, #28]
  int32_t reset = 1;
 80039c0:	2301      	movs	r3, #1
 80039c2:	607b      	str	r3, [r7, #4]
  arm_pid_init_f32(&R_PID, 1);
 80039c4:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <main+0x8c>)
 80039c6:	2101      	movs	r1, #1
 80039c8:	0018      	movs	r0, r3
 80039ca:	f000 fd56 	bl	800447a <arm_pid_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039ce:	f000 f83b 	bl	8003a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039d2:	f000 f9b3 	bl	8003d3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80039d6:	f000 f981 	bl	8003cdc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80039da:	f000 f8a1 	bl	8003b20 <MX_TIM3_Init>
  MX_TIM21_Init();
 80039de:	f000 f913 	bl	8003c08 <MX_TIM21_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Hello...\r\n");
 80039e2:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <main+0x94>)
 80039e4:	0018      	movs	r0, r3
 80039e6:	f001 f85d 	bl	8004aa4 <puts>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80039ea:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <main+0x98>)
 80039ec:	2100      	movs	r1, #0
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7fe fe04 	bl	80025fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <main+0x98>)
 80039f6:	2104      	movs	r1, #4
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7fe fdff 	bl	80025fc <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start_IT(&htim21, TIM_CHANNEL_1);
 80039fe:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <main+0x9c>)
 8003a00:	2100      	movs	r1, #0
 8003a02:	0018      	movs	r0, r3
 8003a04:	f7fe fd7c 	bl	8002500 <HAL_TIM_OC_Start_IT>
//  int count = 0;
//  int pulse_width1 = 0;
//  int pulse_width2 = 4096;
  __HAL_TIM_SET_COMPARE(&htim21, TIM_CHANNEL_1, 0);
 8003a08:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <main+0x9c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	635a      	str	r2, [r3, #52]	; 0x34
  r_enc_setpoint = 1600;
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <main+0xa0>)
 8003a12:	22c8      	movs	r2, #200	; 0xc8
 8003a14:	00d2      	lsls	r2, r2, #3
 8003a16:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // PORTA, PA5
 8003a18:	23a0      	movs	r3, #160	; 0xa0
 8003a1a:	05db      	lsls	r3, r3, #23
 8003a1c:	2120      	movs	r1, #32
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f7fd fde1 	bl	80015e6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8003a24:	23fa      	movs	r3, #250	; 0xfa
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7fd fb49 	bl	80010c0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // PORTA, PA5
 8003a2e:	e7f3      	b.n	8003a18 <main+0x74>
 8003a30:	200000e8 	.word	0x200000e8
 8003a34:	40a00000 	.word	0x40a00000
 8003a38:	08005464 	.word	0x08005464
 8003a3c:	200000a8 	.word	0x200000a8
 8003a40:	20000190 	.word	0x20000190
 8003a44:	20000090 	.word	0x20000090

08003a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b09f      	sub	sp, #124	; 0x7c
 8003a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a4e:	2440      	movs	r4, #64	; 0x40
 8003a50:	193b      	adds	r3, r7, r4
 8003a52:	0018      	movs	r0, r3
 8003a54:	2338      	movs	r3, #56	; 0x38
 8003a56:	001a      	movs	r2, r3
 8003a58:	2100      	movs	r1, #0
 8003a5a:	f000 fef9 	bl	8004850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a5e:	232c      	movs	r3, #44	; 0x2c
 8003a60:	18fb      	adds	r3, r7, r3
 8003a62:	0018      	movs	r0, r3
 8003a64:	2314      	movs	r3, #20
 8003a66:	001a      	movs	r2, r3
 8003a68:	2100      	movs	r1, #0
 8003a6a:	f000 fef1 	bl	8004850 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	0018      	movs	r0, r3
 8003a72:	2328      	movs	r3, #40	; 0x28
 8003a74:	001a      	movs	r2, r3
 8003a76:	2100      	movs	r1, #0
 8003a78:	f000 feea 	bl	8004850 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a7c:	4b26      	ldr	r3, [pc, #152]	; (8003b18 <SystemClock_Config+0xd0>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a26      	ldr	r2, [pc, #152]	; (8003b1c <SystemClock_Config+0xd4>)
 8003a82:	401a      	ands	r2, r3
 8003a84:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <SystemClock_Config+0xd0>)
 8003a86:	2180      	movs	r1, #128	; 0x80
 8003a88:	0109      	lsls	r1, r1, #4
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003a8e:	0021      	movs	r1, r4
 8003a90:	187b      	adds	r3, r7, r1
 8003a92:	2210      	movs	r2, #16
 8003a94:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003a96:	187b      	adds	r3, r7, r1
 8003a98:	2201      	movs	r2, #1
 8003a9a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	22a0      	movs	r2, #160	; 0xa0
 8003aa6:	0212      	lsls	r2, r2, #8
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003aaa:	187b      	adds	r3, r7, r1
 8003aac:	2200      	movs	r2, #0
 8003aae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ab0:	187b      	adds	r3, r7, r1
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f7fd fdd0 	bl	8001658 <HAL_RCC_OscConfig>
 8003ab8:	1e03      	subs	r3, r0, #0
 8003aba:	d001      	beq.n	8003ac0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003abc:	f000 fa9a 	bl	8003ff4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	187b      	adds	r3, r7, r1
 8003ac4:	220f      	movs	r2, #15
 8003ac6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003ac8:	187b      	adds	r3, r7, r1
 8003aca:	2200      	movs	r2, #0
 8003acc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ace:	187b      	adds	r3, r7, r1
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ad4:	187b      	adds	r3, r7, r1
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ada:	187b      	adds	r3, r7, r1
 8003adc:	2200      	movs	r2, #0
 8003ade:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003ae0:	187b      	adds	r3, r7, r1
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f7fe f987 	bl	8001df8 <HAL_RCC_ClockConfig>
 8003aea:	1e03      	subs	r3, r0, #0
 8003aec:	d001      	beq.n	8003af2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003aee:	f000 fa81 	bl	8003ff4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003af2:	1d3b      	adds	r3, r7, #4
 8003af4:	2202      	movs	r2, #2
 8003af6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003af8:	1d3b      	adds	r3, r7, #4
 8003afa:	2200      	movs	r2, #0
 8003afc:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003afe:	1d3b      	adds	r3, r7, #4
 8003b00:	0018      	movs	r0, r3
 8003b02:	f7fe fb5d 	bl	80021c0 <HAL_RCCEx_PeriphCLKConfig>
 8003b06:	1e03      	subs	r3, r0, #0
 8003b08:	d001      	beq.n	8003b0e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003b0a:	f000 fa73 	bl	8003ff4 <Error_Handler>
  }
}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b01f      	add	sp, #124	; 0x7c
 8003b14:	bd90      	pop	{r4, r7, pc}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	ffffe7ff 	.word	0xffffe7ff

08003b20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b26:	2310      	movs	r3, #16
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	001a      	movs	r2, r3
 8003b30:	2100      	movs	r1, #0
 8003b32:	f000 fe8d 	bl	8004850 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b36:	003b      	movs	r3, r7
 8003b38:	0018      	movs	r0, r3
 8003b3a:	2310      	movs	r3, #16
 8003b3c:	001a      	movs	r2, r3
 8003b3e:	2100      	movs	r1, #0
 8003b40:	f000 fe86 	bl	8004850 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b44:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <MX_TIM3_Init+0xdc>)
 8003b46:	4a2e      	ldr	r2, [pc, #184]	; (8003c00 <MX_TIM3_Init+0xe0>)
 8003b48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003b4a:	4b2c      	ldr	r3, [pc, #176]	; (8003bfc <MX_TIM3_Init+0xdc>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b50:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <MX_TIM3_Init+0xdc>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095;
 8003b56:	4b29      	ldr	r3, [pc, #164]	; (8003bfc <MX_TIM3_Init+0xdc>)
 8003b58:	4a2a      	ldr	r2, [pc, #168]	; (8003c04 <MX_TIM3_Init+0xe4>)
 8003b5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b5c:	4b27      	ldr	r3, [pc, #156]	; (8003bfc <MX_TIM3_Init+0xdc>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b62:	4b26      	ldr	r3, [pc, #152]	; (8003bfc <MX_TIM3_Init+0xdc>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003b68:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <MX_TIM3_Init+0xdc>)
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f7fe fd1a 	bl	80025a4 <HAL_TIM_PWM_Init>
 8003b70:	1e03      	subs	r3, r0, #0
 8003b72:	d001      	beq.n	8003b78 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003b74:	f000 fa3e 	bl	8003ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b78:	2110      	movs	r1, #16
 8003b7a:	187b      	adds	r3, r7, r1
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b80:	187b      	adds	r3, r7, r1
 8003b82:	2200      	movs	r2, #0
 8003b84:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b86:	187a      	adds	r2, r7, r1
 8003b88:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <MX_TIM3_Init+0xdc>)
 8003b8a:	0011      	movs	r1, r2
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f7ff f8f2 	bl	8002d76 <HAL_TIMEx_MasterConfigSynchronization>
 8003b92:	1e03      	subs	r3, r0, #0
 8003b94:	d001      	beq.n	8003b9a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003b96:	f000 fa2d 	bl	8003ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b9a:	003b      	movs	r3, r7
 8003b9c:	2260      	movs	r2, #96	; 0x60
 8003b9e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003ba0:	003b      	movs	r3, r7
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ba6:	003b      	movs	r3, r7
 8003ba8:	2200      	movs	r2, #0
 8003baa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bac:	003b      	movs	r3, r7
 8003bae:	2200      	movs	r2, #0
 8003bb0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bb2:	0039      	movs	r1, r7
 8003bb4:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <MX_TIM3_Init+0xdc>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f7fe fe77 	bl	80028ac <HAL_TIM_PWM_ConfigChannel>
 8003bbe:	1e03      	subs	r3, r0, #0
 8003bc0:	d001      	beq.n	8003bc6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8003bc2:	f000 fa17 	bl	8003ff4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <MX_TIM3_Init+0xdc>)
 8003bc8:	2104      	movs	r1, #4
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f7ff f916 	bl	8002dfc <HAL_TIMEx_RemapConfig>
 8003bd0:	1e03      	subs	r3, r0, #0
 8003bd2:	d001      	beq.n	8003bd8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8003bd4:	f000 fa0e 	bl	8003ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003bd8:	0039      	movs	r1, r7
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <MX_TIM3_Init+0xdc>)
 8003bdc:	2204      	movs	r2, #4
 8003bde:	0018      	movs	r0, r3
 8003be0:	f7fe fe64 	bl	80028ac <HAL_TIM_PWM_ConfigChannel>
 8003be4:	1e03      	subs	r3, r0, #0
 8003be6:	d001      	beq.n	8003bec <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8003be8:	f000 fa04 	bl	8003ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <MX_TIM3_Init+0xdc>)
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f000 fa52 	bl	8004098 <HAL_TIM_MspPostInit>

}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b006      	add	sp, #24
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	200000a8 	.word	0x200000a8
 8003c00:	40000400 	.word	0x40000400
 8003c04:	00000fff 	.word	0x00000fff

08003c08 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c0e:	2310      	movs	r3, #16
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	0018      	movs	r0, r3
 8003c14:	2308      	movs	r3, #8
 8003c16:	001a      	movs	r2, r3
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f000 fe19 	bl	8004850 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c1e:	003b      	movs	r3, r7
 8003c20:	0018      	movs	r0, r3
 8003c22:	2310      	movs	r3, #16
 8003c24:	001a      	movs	r2, r3
 8003c26:	2100      	movs	r1, #0
 8003c28:	f000 fe12 	bl	8004850 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8003c2c:	4b28      	ldr	r3, [pc, #160]	; (8003cd0 <MX_TIM21_Init+0xc8>)
 8003c2e:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <MX_TIM21_Init+0xcc>)
 8003c30:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 2099;
 8003c32:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <MX_TIM21_Init+0xc8>)
 8003c34:	4a28      	ldr	r2, [pc, #160]	; (8003cd8 <MX_TIM21_Init+0xd0>)
 8003c36:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c38:	4b25      	ldr	r3, [pc, #148]	; (8003cd0 <MX_TIM21_Init+0xc8>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 99;
 8003c3e:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <MX_TIM21_Init+0xc8>)
 8003c40:	2263      	movs	r2, #99	; 0x63
 8003c42:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c44:	4b22      	ldr	r3, [pc, #136]	; (8003cd0 <MX_TIM21_Init+0xc8>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c4a:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <MX_TIM21_Init+0xc8>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8003c50:	4b1f      	ldr	r3, [pc, #124]	; (8003cd0 <MX_TIM21_Init+0xc8>)
 8003c52:	0018      	movs	r0, r3
 8003c54:	f7fe fc28 	bl	80024a8 <HAL_TIM_OC_Init>
 8003c58:	1e03      	subs	r3, r0, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8003c5c:	f000 f9ca 	bl	8003ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c60:	2110      	movs	r1, #16
 8003c62:	187b      	adds	r3, r7, r1
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c68:	187b      	adds	r3, r7, r1
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003c6e:	187a      	adds	r2, r7, r1
 8003c70:	4b17      	ldr	r3, [pc, #92]	; (8003cd0 <MX_TIM21_Init+0xc8>)
 8003c72:	0011      	movs	r1, r2
 8003c74:	0018      	movs	r0, r3
 8003c76:	f7ff f87e 	bl	8002d76 <HAL_TIMEx_MasterConfigSynchronization>
 8003c7a:	1e03      	subs	r3, r0, #0
 8003c7c:	d001      	beq.n	8003c82 <MX_TIM21_Init+0x7a>
  {
    Error_Handler();
 8003c7e:	f000 f9b9 	bl	8003ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003c82:	003b      	movs	r3, r7
 8003c84:	2230      	movs	r2, #48	; 0x30
 8003c86:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003c88:	003b      	movs	r3, r7
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c8e:	003b      	movs	r3, r7
 8003c90:	2200      	movs	r2, #0
 8003c92:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c94:	003b      	movs	r3, r7
 8003c96:	2200      	movs	r2, #0
 8003c98:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c9a:	0039      	movs	r1, r7
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <MX_TIM21_Init+0xc8>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f7fe fdb5 	bl	8002810 <HAL_TIM_OC_ConfigChannel>
 8003ca6:	1e03      	subs	r3, r0, #0
 8003ca8:	d001      	beq.n	8003cae <MX_TIM21_Init+0xa6>
  {
    Error_Handler();
 8003caa:	f000 f9a3 	bl	8003ff4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM3_TI1_GPIO) != HAL_OK)
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <MX_TIM21_Init+0xc8>)
 8003cb0:	2104      	movs	r1, #4
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f7ff f8a2 	bl	8002dfc <HAL_TIMEx_RemapConfig>
 8003cb8:	1e03      	subs	r3, r0, #0
 8003cba:	d001      	beq.n	8003cc0 <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 8003cbc:	f000 f99a 	bl	8003ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 8003cc0:	4b03      	ldr	r3, [pc, #12]	; (8003cd0 <MX_TIM21_Init+0xc8>)
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f000 f9e8 	bl	8004098 <HAL_TIM_MspPostInit>

}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b006      	add	sp, #24
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000190 	.word	0x20000190
 8003cd4:	40010800 	.word	0x40010800
 8003cd8:	00000833 	.word	0x00000833

08003cdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ce0:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <MX_USART2_UART_Init+0x58>)
 8003ce2:	4a15      	ldr	r2, [pc, #84]	; (8003d38 <MX_USART2_UART_Init+0x5c>)
 8003ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003ce6:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <MX_USART2_UART_Init+0x58>)
 8003ce8:	22e1      	movs	r2, #225	; 0xe1
 8003cea:	0252      	lsls	r2, r2, #9
 8003cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <MX_USART2_UART_Init+0x58>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003cf4:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <MX_USART2_UART_Init+0x58>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003cfa:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <MX_USART2_UART_Init+0x58>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d00:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <MX_USART2_UART_Init+0x58>)
 8003d02:	220c      	movs	r2, #12
 8003d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d06:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <MX_USART2_UART_Init+0x58>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d0c:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <MX_USART2_UART_Init+0x58>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d12:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <MX_USART2_UART_Init+0x58>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <MX_USART2_UART_Init+0x58>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d1e:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <MX_USART2_UART_Init+0x58>)
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7ff f889 	bl	8002e38 <HAL_UART_Init>
 8003d26:	1e03      	subs	r3, r0, #0
 8003d28:	d001      	beq.n	8003d2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003d2a:	f000 f963 	bl	8003ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	2000010c 	.word	0x2000010c
 8003d38:	40004400 	.word	0x40004400

08003d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b08b      	sub	sp, #44	; 0x2c
 8003d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d42:	2414      	movs	r4, #20
 8003d44:	193b      	adds	r3, r7, r4
 8003d46:	0018      	movs	r0, r3
 8003d48:	2314      	movs	r3, #20
 8003d4a:	001a      	movs	r2, r3
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	f000 fd7f 	bl	8004850 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d52:	4b3d      	ldr	r3, [pc, #244]	; (8003e48 <MX_GPIO_Init+0x10c>)
 8003d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d56:	4b3c      	ldr	r3, [pc, #240]	; (8003e48 <MX_GPIO_Init+0x10c>)
 8003d58:	2104      	movs	r1, #4
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d5e:	4b3a      	ldr	r3, [pc, #232]	; (8003e48 <MX_GPIO_Init+0x10c>)
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	2204      	movs	r2, #4
 8003d64:	4013      	ands	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d6a:	4b37      	ldr	r3, [pc, #220]	; (8003e48 <MX_GPIO_Init+0x10c>)
 8003d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6e:	4b36      	ldr	r3, [pc, #216]	; (8003e48 <MX_GPIO_Init+0x10c>)
 8003d70:	2180      	movs	r1, #128	; 0x80
 8003d72:	430a      	orrs	r2, r1
 8003d74:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d76:	4b34      	ldr	r3, [pc, #208]	; (8003e48 <MX_GPIO_Init+0x10c>)
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	2280      	movs	r2, #128	; 0x80
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d82:	4b31      	ldr	r3, [pc, #196]	; (8003e48 <MX_GPIO_Init+0x10c>)
 8003d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d86:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <MX_GPIO_Init+0x10c>)
 8003d88:	2101      	movs	r1, #1
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d8e:	4b2e      	ldr	r3, [pc, #184]	; (8003e48 <MX_GPIO_Init+0x10c>)
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	2201      	movs	r2, #1
 8003d94:	4013      	ands	r3, r2
 8003d96:	60bb      	str	r3, [r7, #8]
 8003d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9a:	4b2b      	ldr	r3, [pc, #172]	; (8003e48 <MX_GPIO_Init+0x10c>)
 8003d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9e:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <MX_GPIO_Init+0x10c>)
 8003da0:	2102      	movs	r1, #2
 8003da2:	430a      	orrs	r2, r1
 8003da4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003da6:	4b28      	ldr	r3, [pc, #160]	; (8003e48 <MX_GPIO_Init+0x10c>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	2202      	movs	r2, #2
 8003dac:	4013      	ands	r3, r2
 8003dae:	607b      	str	r3, [r7, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003db2:	23a0      	movs	r3, #160	; 0xa0
 8003db4:	05db      	lsls	r3, r3, #23
 8003db6:	2200      	movs	r2, #0
 8003db8:	2120      	movs	r1, #32
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7fd fbf6 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003dc0:	193b      	adds	r3, r7, r4
 8003dc2:	2280      	movs	r2, #128	; 0x80
 8003dc4:	0192      	lsls	r2, r2, #6
 8003dc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003dc8:	193b      	adds	r3, r7, r4
 8003dca:	4a20      	ldr	r2, [pc, #128]	; (8003e4c <MX_GPIO_Init+0x110>)
 8003dcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dce:	193b      	adds	r3, r7, r4
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003dd4:	193b      	adds	r3, r7, r4
 8003dd6:	4a1e      	ldr	r2, [pc, #120]	; (8003e50 <MX_GPIO_Init+0x114>)
 8003dd8:	0019      	movs	r1, r3
 8003dda:	0010      	movs	r0, r2
 8003ddc:	f7fd fa68 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003de0:	0021      	movs	r1, r4
 8003de2:	187b      	adds	r3, r7, r1
 8003de4:	2220      	movs	r2, #32
 8003de6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003de8:	187b      	adds	r3, r7, r1
 8003dea:	2201      	movs	r2, #1
 8003dec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dee:	187b      	adds	r3, r7, r1
 8003df0:	2200      	movs	r2, #0
 8003df2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df4:	187b      	adds	r3, r7, r1
 8003df6:	2200      	movs	r2, #0
 8003df8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003dfa:	000c      	movs	r4, r1
 8003dfc:	187a      	adds	r2, r7, r1
 8003dfe:	23a0      	movs	r3, #160	; 0xa0
 8003e00:	05db      	lsls	r3, r3, #23
 8003e02:	0011      	movs	r1, r2
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7fd fa53 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003e0a:	0021      	movs	r1, r4
 8003e0c:	187b      	adds	r3, r7, r1
 8003e0e:	22c0      	movs	r2, #192	; 0xc0
 8003e10:	0152      	lsls	r2, r2, #5
 8003e12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e14:	187b      	adds	r3, r7, r1
 8003e16:	4a0f      	ldr	r2, [pc, #60]	; (8003e54 <MX_GPIO_Init+0x118>)
 8003e18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1a:	187b      	adds	r3, r7, r1
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e20:	187a      	adds	r2, r7, r1
 8003e22:	23a0      	movs	r3, #160	; 0xa0
 8003e24:	05db      	lsls	r3, r3, #23
 8003e26:	0011      	movs	r1, r2
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f7fd fa41 	bl	80012b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2100      	movs	r1, #0
 8003e32:	2007      	movs	r0, #7
 8003e34:	f7fd fa0a 	bl	800124c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003e38:	2007      	movs	r0, #7
 8003e3a:	f7fd fa1c 	bl	8001276 <HAL_NVIC_EnableIRQ>

}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b00b      	add	sp, #44	; 0x2c
 8003e44:	bd90      	pop	{r4, r7, pc}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	10210000 	.word	0x10210000
 8003e50:	50000800 	.word	0x50000800
 8003e54:	10110000 	.word	0x10110000

08003e58 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <__io_putchar+0x20>)
 8003e62:	1d39      	adds	r1, r7, #4
 8003e64:	4805      	ldr	r0, [pc, #20]	; (8003e7c <__io_putchar+0x24>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	f7ff f83a 	bl	8002ee0 <HAL_UART_Transmit>

return ch;
 8003e6c:	687b      	ldr	r3, [r7, #4]
}
 8003e6e:	0018      	movs	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b002      	add	sp, #8
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	0000ffff 	.word	0x0000ffff
 8003e7c:	2000010c 	.word	0x2000010c

08003e80 <Right_Encoder_Interrupt_Handler>:

void Right_Encoder_Interrupt_Handler(void){
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
//	r_enc_cnt++;
	if(dir==1)
 8003e84:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <Right_Encoder_Interrupt_Handler+0x28>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d105      	bne.n	8003e98 <Right_Encoder_Interrupt_Handler+0x18>
		r_enc_currentPos++;
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <Right_Encoder_Interrupt_Handler+0x2c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <Right_Encoder_Interrupt_Handler+0x2c>)
 8003e94:	601a      	str	r2, [r3, #0]
	else
		r_enc_currentPos--;
}
 8003e96:	e004      	b.n	8003ea2 <Right_Encoder_Interrupt_Handler+0x22>
		r_enc_currentPos--;
 8003e98:	4b04      	ldr	r3, [pc, #16]	; (8003eac <Right_Encoder_Interrupt_Handler+0x2c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	1e5a      	subs	r2, r3, #1
 8003e9e:	4b03      	ldr	r3, [pc, #12]	; (8003eac <Right_Encoder_Interrupt_Handler+0x2c>)
 8003ea0:	601a      	str	r2, [r3, #0]
}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000000 	.word	0x20000000
 8003eac:	20000094 	.word	0x20000094

08003eb0 <Right_Motor_PWM_Gen>:

void Right_Motor_PWM_Gen(int speed){
 8003eb0:	b590      	push	{r4, r7, lr}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	6078      	str	r0, [r7, #4]
	// Negative speed corresponds to opposite direction
	if(speed < 0){
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	da0a      	bge.n	8003ed4 <Right_Motor_PWM_Gen+0x24>
		dir = !dir;
 8003ebe:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <Right_Motor_PWM_Gen+0x7c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	425a      	negs	r2, r3
 8003ec4:	4153      	adcs	r3, r2
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	001a      	movs	r2, r3
 8003eca:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <Right_Motor_PWM_Gen+0x7c>)
 8003ecc:	601a      	str	r2, [r3, #0]
		speed = -speed;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	425b      	negs	r3, r3
 8003ed2:	607b      	str	r3, [r7, #4]
	}
	if(speed > MOTOR_MAX_SPEED)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <Right_Motor_PWM_Gen+0x80>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	dd01      	ble.n	8003ee0 <Right_Motor_PWM_Gen+0x30>
		speed = MOTOR_MAX_SPEED;
 8003edc:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <Right_Motor_PWM_Gen+0x80>)
 8003ede:	607b      	str	r3, [r7, #4]
	// dir == 1 corresponds to forward turn (PWM1 on, PWM2 off)
	if(dir==1){
 8003ee0:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <Right_Motor_PWM_Gen+0x7c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d108      	bne.n	8003efa <Right_Motor_PWM_Gen+0x4a>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 8003ee8:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <Right_Motor_PWM_Gen+0x84>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8003ef0:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <Right_Motor_PWM_Gen+0x84>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38
 8003ef8:	e007      	b.n	8003f0a <Right_Motor_PWM_Gen+0x5a>
	} else {
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003efa:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <Right_Motor_PWM_Gen+0x84>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2200      	movs	r2, #0
 8003f00:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8003f02:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <Right_Motor_PWM_Gen+0x84>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	639a      	str	r2, [r3, #56]	; 0x38
	}
	printf("Speed = %d, Dir = %d, Error = %d, Encoder = %d\r\n", speed, dir, pid_error, r_enc_currentPos);
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <Right_Motor_PWM_Gen+0x7c>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <Right_Motor_PWM_Gen+0x88>)
 8003f10:	681c      	ldr	r4, [r3, #0]
 8003f12:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <Right_Motor_PWM_Gen+0x8c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	4809      	ldr	r0, [pc, #36]	; (8003f40 <Right_Motor_PWM_Gen+0x90>)
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	0023      	movs	r3, r4
 8003f1e:	f000 fd47 	bl	80049b0 <iprintf>
}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b003      	add	sp, #12
 8003f28:	bd90      	pop	{r4, r7, pc}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	20000000 	.word	0x20000000
 8003f30:	00000fff 	.word	0x00000fff
 8003f34:	200000a8 	.word	0x200000a8
 8003f38:	200000e4 	.word	0x200000e4
 8003f3c:	20000094 	.word	0x20000094
 8003f40:	08005470 	.word	0x08005470

08003f44 <HUNDRED_MS_TIM_INT_HANDLER>:


void HUNDRED_MS_TIM_INT_HANDLER(void){
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
	cms++;
 8003f48:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <HUNDRED_MS_TIM_INT_HANDLER+0x8c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HUNDRED_MS_TIM_INT_HANDLER+0x8c>)
 8003f50:	601a      	str	r2, [r3, #0]
	pid_error = r_enc_setpoint - r_enc_currentPos;
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <HUNDRED_MS_TIM_INT_HANDLER+0x90>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <HUNDRED_MS_TIM_INT_HANDLER+0x94>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	1ad2      	subs	r2, r2, r3
 8003f5c:	4b1f      	ldr	r3, [pc, #124]	; (8003fdc <HUNDRED_MS_TIM_INT_HANDLER+0x98>)
 8003f5e:	601a      	str	r2, [r3, #0]
//	if(pid_error > 0)
//		dir = 1;
//	else
//		dir = 0;
	duty = (int)arm_pid_f32(&R_PID, pid_error);
 8003f60:	4b1e      	ldr	r3, [pc, #120]	; (8003fdc <HUNDRED_MS_TIM_INT_HANDLER+0x98>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7fc ffd7 	bl	8000f18 <__aeabi_i2f>
 8003f6a:	1c02      	adds	r2, r0, #0
 8003f6c:	4b1c      	ldr	r3, [pc, #112]	; (8003fe0 <HUNDRED_MS_TIM_INT_HANDLER+0x9c>)
 8003f6e:	1c11      	adds	r1, r2, #0
 8003f70:	0018      	movs	r0, r3
 8003f72:	f7ff fcd5 	bl	8003920 <arm_pid_f32>
 8003f76:	1c03      	adds	r3, r0, #0
 8003f78:	1c18      	adds	r0, r3, #0
 8003f7a:	f7fc ffad 	bl	8000ed8 <__aeabi_f2iz>
 8003f7e:	0002      	movs	r2, r0
 8003f80:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <HUNDRED_MS_TIM_INT_HANDLER+0xa0>)
 8003f82:	601a      	str	r2, [r3, #0]
	Right_Motor_PWM_Gen(duty);
 8003f84:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <HUNDRED_MS_TIM_INT_HANDLER+0xa0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7ff ff91 	bl	8003eb0 <Right_Motor_PWM_Gen>
	printf("%d\r\n", duty);
 8003f8e:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <HUNDRED_MS_TIM_INT_HANDLER+0xa0>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4b15      	ldr	r3, [pc, #84]	; (8003fe8 <HUNDRED_MS_TIM_INT_HANDLER+0xa4>)
 8003f94:	0011      	movs	r1, r2
 8003f96:	0018      	movs	r0, r3
 8003f98:	f000 fd0a 	bl	80049b0 <iprintf>
//	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, MOTOR_SPEED);
	if(cms % 10 == 0){
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <HUNDRED_MS_TIM_INT_HANDLER+0x8c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	210a      	movs	r1, #10
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f7fc fa20 	bl	80003e8 <__aeabi_idivmod>
 8003fa8:	1e0b      	subs	r3, r1, #0
 8003faa:	d10e      	bne.n	8003fca <HUNDRED_MS_TIM_INT_HANDLER+0x86>
		cms = 0;
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <HUNDRED_MS_TIM_INT_HANDLER+0x8c>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
		seconds++;
 8003fb2:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <HUNDRED_MS_TIM_INT_HANDLER+0xa8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <HUNDRED_MS_TIM_INT_HANDLER+0xa8>)
 8003fba:	601a      	str	r2, [r3, #0]
//		printf("Elapsed Seconds: %d\r", seconds);
		fflush(stdout);
 8003fbc:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <HUNDRED_MS_TIM_INT_HANDLER+0xac>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f000 fb36 	bl	8004634 <fflush>
	}
	return;
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	46c0      	nop			; (mov r8, r8)
}
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000088 	.word	0x20000088
 8003fd4:	20000090 	.word	0x20000090
 8003fd8:	20000094 	.word	0x20000094
 8003fdc:	200000e4 	.word	0x200000e4
 8003fe0:	200000e8 	.word	0x200000e8
 8003fe4:	2000018c 	.word	0x2000018c
 8003fe8:	080054a4 	.word	0x080054a4
 8003fec:	2000008c 	.word	0x2000008c
 8003ff0:	20000008 	.word	0x20000008

08003ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004004:	4b07      	ldr	r3, [pc, #28]	; (8004024 <HAL_MspInit+0x24>)
 8004006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_MspInit+0x24>)
 800400a:	2101      	movs	r1, #1
 800400c:	430a      	orrs	r2, r1
 800400e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004010:	4b04      	ldr	r3, [pc, #16]	; (8004024 <HAL_MspInit+0x24>)
 8004012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004014:	4b03      	ldr	r3, [pc, #12]	; (8004024 <HAL_MspInit+0x24>)
 8004016:	2180      	movs	r1, #128	; 0x80
 8004018:	0549      	lsls	r1, r1, #21
 800401a:	430a      	orrs	r2, r1
 800401c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000

08004028 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a06      	ldr	r2, [pc, #24]	; (8004050 <HAL_TIM_PWM_MspInit+0x28>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d105      	bne.n	8004046 <HAL_TIM_PWM_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800403a:	4b06      	ldr	r3, [pc, #24]	; (8004054 <HAL_TIM_PWM_MspInit+0x2c>)
 800403c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800403e:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_TIM_PWM_MspInit+0x2c>)
 8004040:	2102      	movs	r1, #2
 8004042:	430a      	orrs	r2, r1
 8004044:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	46bd      	mov	sp, r7
 800404a:	b002      	add	sp, #8
 800404c:	bd80      	pop	{r7, pc}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	40000400 	.word	0x40000400
 8004054:	40021000 	.word	0x40021000

08004058 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM21)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <HAL_TIM_OC_MspInit+0x38>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10d      	bne.n	8004086 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 800406a:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <HAL_TIM_OC_MspInit+0x3c>)
 800406c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800406e:	4b09      	ldr	r3, [pc, #36]	; (8004094 <HAL_TIM_OC_MspInit+0x3c>)
 8004070:	2104      	movs	r1, #4
 8004072:	430a      	orrs	r2, r1
 8004074:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8004076:	2200      	movs	r2, #0
 8004078:	2100      	movs	r1, #0
 800407a:	2014      	movs	r0, #20
 800407c:	f7fd f8e6 	bl	800124c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8004080:	2014      	movs	r0, #20
 8004082:	f7fd f8f8 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	46bd      	mov	sp, r7
 800408a:	b002      	add	sp, #8
 800408c:	bd80      	pop	{r7, pc}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	40010800 	.word	0x40010800
 8004094:	40021000 	.word	0x40021000

08004098 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a0:	2314      	movs	r3, #20
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	0018      	movs	r0, r3
 80040a6:	2314      	movs	r3, #20
 80040a8:	001a      	movs	r2, r3
 80040aa:	2100      	movs	r1, #0
 80040ac:	f000 fbd0 	bl	8004850 <memset>
  if(htim->Instance==TIM3)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a29      	ldr	r2, [pc, #164]	; (800415c <HAL_TIM_MspPostInit+0xc4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d123      	bne.n	8004102 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ba:	4b29      	ldr	r3, [pc, #164]	; (8004160 <HAL_TIM_MspPostInit+0xc8>)
 80040bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040be:	4b28      	ldr	r3, [pc, #160]	; (8004160 <HAL_TIM_MspPostInit+0xc8>)
 80040c0:	2101      	movs	r1, #1
 80040c2:	430a      	orrs	r2, r1
 80040c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80040c6:	4b26      	ldr	r3, [pc, #152]	; (8004160 <HAL_TIM_MspPostInit+0xc8>)
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	2201      	movs	r2, #1
 80040cc:	4013      	ands	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040d2:	2114      	movs	r1, #20
 80040d4:	187b      	adds	r3, r7, r1
 80040d6:	22c0      	movs	r2, #192	; 0xc0
 80040d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040da:	187b      	adds	r3, r7, r1
 80040dc:	2202      	movs	r2, #2
 80040de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e0:	187b      	adds	r3, r7, r1
 80040e2:	2200      	movs	r2, #0
 80040e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e6:	187b      	adds	r3, r7, r1
 80040e8:	2200      	movs	r2, #0
 80040ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040ec:	187b      	adds	r3, r7, r1
 80040ee:	2202      	movs	r2, #2
 80040f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f2:	187a      	adds	r2, r7, r1
 80040f4:	23a0      	movs	r3, #160	; 0xa0
 80040f6:	05db      	lsls	r3, r3, #23
 80040f8:	0011      	movs	r1, r2
 80040fa:	0018      	movs	r0, r3
 80040fc:	f7fd f8d8 	bl	80012b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM21_MspPostInit 1 */

  /* USER CODE END TIM21_MspPostInit 1 */
  }

}
 8004100:	e027      	b.n	8004152 <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM21)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a17      	ldr	r2, [pc, #92]	; (8004164 <HAL_TIM_MspPostInit+0xcc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d122      	bne.n	8004152 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800410c:	4b14      	ldr	r3, [pc, #80]	; (8004160 <HAL_TIM_MspPostInit+0xc8>)
 800410e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004110:	4b13      	ldr	r3, [pc, #76]	; (8004160 <HAL_TIM_MspPostInit+0xc8>)
 8004112:	2102      	movs	r1, #2
 8004114:	430a      	orrs	r2, r1
 8004116:	62da      	str	r2, [r3, #44]	; 0x2c
 8004118:	4b11      	ldr	r3, [pc, #68]	; (8004160 <HAL_TIM_MspPostInit+0xc8>)
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	2202      	movs	r2, #2
 800411e:	4013      	ands	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004124:	2114      	movs	r1, #20
 8004126:	187b      	adds	r3, r7, r1
 8004128:	2280      	movs	r2, #128	; 0x80
 800412a:	0192      	lsls	r2, r2, #6
 800412c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412e:	187b      	adds	r3, r7, r1
 8004130:	2202      	movs	r2, #2
 8004132:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004134:	187b      	adds	r3, r7, r1
 8004136:	2200      	movs	r2, #0
 8004138:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800413a:	187b      	adds	r3, r7, r1
 800413c:	2200      	movs	r2, #0
 800413e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM21;
 8004140:	187b      	adds	r3, r7, r1
 8004142:	2206      	movs	r2, #6
 8004144:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004146:	187b      	adds	r3, r7, r1
 8004148:	4a07      	ldr	r2, [pc, #28]	; (8004168 <HAL_TIM_MspPostInit+0xd0>)
 800414a:	0019      	movs	r1, r3
 800414c:	0010      	movs	r0, r2
 800414e:	f7fd f8af 	bl	80012b0 <HAL_GPIO_Init>
}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	46bd      	mov	sp, r7
 8004156:	b00a      	add	sp, #40	; 0x28
 8004158:	bd80      	pop	{r7, pc}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	40000400 	.word	0x40000400
 8004160:	40021000 	.word	0x40021000
 8004164:	40010800 	.word	0x40010800
 8004168:	50000400 	.word	0x50000400

0800416c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004174:	230c      	movs	r3, #12
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	0018      	movs	r0, r3
 800417a:	2314      	movs	r3, #20
 800417c:	001a      	movs	r2, r3
 800417e:	2100      	movs	r1, #0
 8004180:	f000 fb66 	bl	8004850 <memset>
  if(huart->Instance==USART2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a18      	ldr	r2, [pc, #96]	; (80041ec <HAL_UART_MspInit+0x80>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d129      	bne.n	80041e2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800418e:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <HAL_UART_MspInit+0x84>)
 8004190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004192:	4b17      	ldr	r3, [pc, #92]	; (80041f0 <HAL_UART_MspInit+0x84>)
 8004194:	2180      	movs	r1, #128	; 0x80
 8004196:	0289      	lsls	r1, r1, #10
 8004198:	430a      	orrs	r2, r1
 800419a:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800419c:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <HAL_UART_MspInit+0x84>)
 800419e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a0:	4b13      	ldr	r3, [pc, #76]	; (80041f0 <HAL_UART_MspInit+0x84>)
 80041a2:	2101      	movs	r1, #1
 80041a4:	430a      	orrs	r2, r1
 80041a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80041a8:	4b11      	ldr	r3, [pc, #68]	; (80041f0 <HAL_UART_MspInit+0x84>)
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	2201      	movs	r2, #1
 80041ae:	4013      	ands	r3, r2
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80041b4:	210c      	movs	r1, #12
 80041b6:	187b      	adds	r3, r7, r1
 80041b8:	220c      	movs	r2, #12
 80041ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041bc:	187b      	adds	r3, r7, r1
 80041be:	2202      	movs	r2, #2
 80041c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c2:	187b      	adds	r3, r7, r1
 80041c4:	2200      	movs	r2, #0
 80041c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c8:	187b      	adds	r3, r7, r1
 80041ca:	2203      	movs	r2, #3
 80041cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80041ce:	187b      	adds	r3, r7, r1
 80041d0:	2204      	movs	r2, #4
 80041d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d4:	187a      	adds	r2, r7, r1
 80041d6:	23a0      	movs	r3, #160	; 0xa0
 80041d8:	05db      	lsls	r3, r3, #23
 80041da:	0011      	movs	r1, r2
 80041dc:	0018      	movs	r0, r3
 80041de:	f7fd f867 	bl	80012b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	46bd      	mov	sp, r7
 80041e6:	b008      	add	sp, #32
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	40004400 	.word	0x40004400
 80041f0:	40021000 	.word	0x40021000

080041f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80041f8:	46c0      	nop			; (mov r8, r8)
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004202:	e7fe      	b.n	8004202 <HardFault_Handler+0x4>

08004204 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004208:	46c0      	nop			; (mov r8, r8)
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800421c:	f7fc ff3a 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	// PIN 11
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11)){
 800422c:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <EXTI4_15_IRQHandler+0x40>)
 800422e:	695b      	ldr	r3, [r3, #20]

	}
	// PIN 12
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_12))
 8004230:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <EXTI4_15_IRQHandler+0x40>)
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	015b      	lsls	r3, r3, #5
 8004238:	4013      	ands	r3, r2
 800423a:	d001      	beq.n	8004240 <EXTI4_15_IRQHandler+0x18>
	{
		Right_Encoder_Interrupt_Handler();
 800423c:	f7ff fe20 	bl	8003e80 <Right_Encoder_Interrupt_Handler>
	}

	// PIN 13

	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <EXTI4_15_IRQHandler+0x40>)
 8004242:	695b      	ldr	r3, [r3, #20]
//		printf("Rotations: %d          \r", r_wheel_cnt);
//		fflush(stdout);

	}
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	0018      	movs	r0, r3
 800424a:	f7fd f9df 	bl	800160c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800424e:	2380      	movs	r3, #128	; 0x80
 8004250:	015b      	lsls	r3, r3, #5
 8004252:	0018      	movs	r0, r3
 8004254:	f7fd f9da 	bl	800160c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	019b      	lsls	r3, r3, #6
 800425c:	0018      	movs	r0, r3
 800425e:	f7fd f9d5 	bl	800160c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40010400 	.word	0x40010400

0800426c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */
	HUNDRED_MS_TIM_INT_HANDLER();
 8004270:	f7ff fe68 	bl	8003f44 <HUNDRED_MS_TIM_INT_HANDLER>

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8004274:	4b03      	ldr	r3, [pc, #12]	; (8004284 <TIM21_IRQHandler+0x18>)
 8004276:	0018      	movs	r0, r3
 8004278:	f7fe f9e2 	bl	8002640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 800427c:	46c0      	nop			; (mov r8, r8)
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	20000190 	.word	0x20000190

08004288 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	e00a      	b.n	80042b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800429a:	e000      	b.n	800429e <_read+0x16>
 800429c:	bf00      	nop
 800429e:	0001      	movs	r1, r0
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	60ba      	str	r2, [r7, #8]
 80042a6:	b2ca      	uxtb	r2, r1
 80042a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	3301      	adds	r3, #1
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	dbf0      	blt.n	800429a <_read+0x12>
	}

return len;
 80042b8:	687b      	ldr	r3, [r7, #4]
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b006      	add	sp, #24
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	e009      	b.n	80042e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	60ba      	str	r2, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	0018      	movs	r0, r3
 80042de:	f7ff fdbb 	bl	8003e58 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	3301      	adds	r3, #1
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	dbf1      	blt.n	80042d4 <_write+0x12>
	}
	return len;
 80042f0:	687b      	ldr	r3, [r7, #4]
}
 80042f2:	0018      	movs	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b006      	add	sp, #24
 80042f8:	bd80      	pop	{r7, pc}

080042fa <_close>:

int _close(int file)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b082      	sub	sp, #8
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
	return -1;
 8004302:	2301      	movs	r3, #1
 8004304:	425b      	negs	r3, r3
}
 8004306:	0018      	movs	r0, r3
 8004308:	46bd      	mov	sp, r7
 800430a:	b002      	add	sp, #8
 800430c:	bd80      	pop	{r7, pc}

0800430e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2280      	movs	r2, #128	; 0x80
 800431c:	0192      	lsls	r2, r2, #6
 800431e:	605a      	str	r2, [r3, #4]
	return 0;
 8004320:	2300      	movs	r3, #0
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b002      	add	sp, #8
 8004328:	bd80      	pop	{r7, pc}

0800432a <_isatty>:

int _isatty(int file)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
	return 1;
 8004332:	2301      	movs	r3, #1
}
 8004334:	0018      	movs	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	b002      	add	sp, #8
 800433a:	bd80      	pop	{r7, pc}

0800433c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
	return 0;
 8004348:	2300      	movs	r3, #0
}
 800434a:	0018      	movs	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	b004      	add	sp, #16
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800435c:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <_sbrk+0x50>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d102      	bne.n	800436a <_sbrk+0x16>
		heap_end = &end;
 8004364:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <_sbrk+0x50>)
 8004366:	4a10      	ldr	r2, [pc, #64]	; (80043a8 <_sbrk+0x54>)
 8004368:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800436a:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <_sbrk+0x50>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <_sbrk+0x50>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	18d3      	adds	r3, r2, r3
 8004378:	466a      	mov	r2, sp
 800437a:	4293      	cmp	r3, r2
 800437c:	d907      	bls.n	800438e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800437e:	f000 f89d 	bl	80044bc <__errno>
 8004382:	0003      	movs	r3, r0
 8004384:	220c      	movs	r2, #12
 8004386:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004388:	2301      	movs	r3, #1
 800438a:	425b      	negs	r3, r3
 800438c:	e006      	b.n	800439c <_sbrk+0x48>
	}

	heap_end += incr;
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <_sbrk+0x50>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	18d2      	adds	r2, r2, r3
 8004396:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <_sbrk+0x50>)
 8004398:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800439a:	68fb      	ldr	r3, [r7, #12]
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	b004      	add	sp, #16
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20000098 	.word	0x20000098
 80043a8:	200001d0 	.word	0x200001d0

080043ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80043b0:	4b17      	ldr	r3, [pc, #92]	; (8004410 <SystemInit+0x64>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4b16      	ldr	r3, [pc, #88]	; (8004410 <SystemInit+0x64>)
 80043b6:	2180      	movs	r1, #128	; 0x80
 80043b8:	0049      	lsls	r1, r1, #1
 80043ba:	430a      	orrs	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80043be:	4b14      	ldr	r3, [pc, #80]	; (8004410 <SystemInit+0x64>)
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	4b13      	ldr	r3, [pc, #76]	; (8004410 <SystemInit+0x64>)
 80043c4:	4913      	ldr	r1, [pc, #76]	; (8004414 <SystemInit+0x68>)
 80043c6:	400a      	ands	r2, r1
 80043c8:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80043ca:	4b11      	ldr	r3, [pc, #68]	; (8004410 <SystemInit+0x64>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b10      	ldr	r3, [pc, #64]	; (8004410 <SystemInit+0x64>)
 80043d0:	4911      	ldr	r1, [pc, #68]	; (8004418 <SystemInit+0x6c>)
 80043d2:	400a      	ands	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80043d6:	4b0e      	ldr	r3, [pc, #56]	; (8004410 <SystemInit+0x64>)
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <SystemInit+0x64>)
 80043dc:	2101      	movs	r1, #1
 80043de:	438a      	bics	r2, r1
 80043e0:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80043e2:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <SystemInit+0x64>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <SystemInit+0x64>)
 80043e8:	490c      	ldr	r1, [pc, #48]	; (800441c <SystemInit+0x70>)
 80043ea:	400a      	ands	r2, r1
 80043ec:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80043ee:	4b08      	ldr	r3, [pc, #32]	; (8004410 <SystemInit+0x64>)
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	4b07      	ldr	r3, [pc, #28]	; (8004410 <SystemInit+0x64>)
 80043f4:	490a      	ldr	r1, [pc, #40]	; (8004420 <SystemInit+0x74>)
 80043f6:	400a      	ands	r2, r1
 80043f8:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80043fa:	4b05      	ldr	r3, [pc, #20]	; (8004410 <SystemInit+0x64>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004400:	4b08      	ldr	r3, [pc, #32]	; (8004424 <SystemInit+0x78>)
 8004402:	2280      	movs	r2, #128	; 0x80
 8004404:	0512      	lsls	r2, r2, #20
 8004406:	609a      	str	r2, [r3, #8]
#endif
}
 8004408:	46c0      	nop			; (mov r8, r8)
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	40021000 	.word	0x40021000
 8004414:	88ff400c 	.word	0x88ff400c
 8004418:	fef6fff6 	.word	0xfef6fff6
 800441c:	fffbffff 	.word	0xfffbffff
 8004420:	ff02ffff 	.word	0xff02ffff
 8004424:	e000ed00 	.word	0xe000ed00

08004428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004428:	480d      	ldr	r0, [pc, #52]	; (8004460 <LoopForever+0x2>)
	   mov   sp, r0          /* set stack pointer */
 800442a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800442c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800442e:	e003      	b.n	8004438 <LoopCopyDataInit>

08004430 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004430:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8004432:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004434:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004436:	3104      	adds	r1, #4

08004438 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004438:	480b      	ldr	r0, [pc, #44]	; (8004468 <LoopForever+0xa>)
  ldr  r3, =_edata
 800443a:	4b0c      	ldr	r3, [pc, #48]	; (800446c <LoopForever+0xe>)
  adds  r2, r0, r1
 800443c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800443e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004440:	d3f6      	bcc.n	8004430 <CopyDataInit>
  ldr  r2, =_sbss
 8004442:	4a0b      	ldr	r2, [pc, #44]	; (8004470 <LoopForever+0x12>)
  b  LoopFillZerobss
 8004444:	e002      	b.n	800444c <LoopFillZerobss>

08004446 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004446:	2300      	movs	r3, #0
  str  r3, [r2]
 8004448:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800444a:	3204      	adds	r2, #4

0800444c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800444c:	4b09      	ldr	r3, [pc, #36]	; (8004474 <LoopForever+0x16>)
  cmp  r2, r3
 800444e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004450:	d3f9      	bcc.n	8004446 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004452:	f7ff ffab 	bl	80043ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004456:	f000 f9d7 	bl	8004808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800445a:	f7ff faa3 	bl	80039a4 <main>

0800445e <LoopForever>:

LoopForever:
    b LoopForever
 800445e:	e7fe      	b.n	800445e <LoopForever>
   ldr   r0, =_estack
 8004460:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8004464:	08005600 	.word	0x08005600
  ldr  r0, =_sdata
 8004468:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800446c:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8004470:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8004474:	200001d0 	.word	0x200001d0

08004478 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004478:	e7fe      	b.n	8004478 <ADC1_COMP_IRQHandler>

0800447a <arm_pid_init_f32>:
 800447a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447c:	b081      	sub	sp, #4
 800447e:	460d      	mov	r5, r1
 8004480:	4604      	mov	r4, r0
 8004482:	6a06      	ldr	r6, [r0, #32]
 8004484:	6086      	str	r6, [r0, #8]
 8004486:	2003      	movs	r0, #3
 8004488:	0781      	lsls	r1, r0, #30
 800448a:	4630      	mov	r0, r6
 800448c:	f7fc fa2e 	bl	80008ec <__aeabi_fmul>
 8004490:	69a7      	ldr	r7, [r4, #24]
 8004492:	4639      	mov	r1, r7
 8004494:	f7fc fb5c 	bl	8000b50 <__aeabi_fsub>
 8004498:	6060      	str	r0, [r4, #4]
 800449a:	69e1      	ldr	r1, [r4, #28]
 800449c:	4638      	mov	r0, r7
 800449e:	f7fc f88b 	bl	80005b8 <__aeabi_fadd>
 80044a2:	4631      	mov	r1, r6
 80044a4:	f7fc f888 	bl	80005b8 <__aeabi_fadd>
 80044a8:	6020      	str	r0, [r4, #0]
 80044aa:	2d00      	cmp	r5, #0
 80044ac:	d003      	beq.n	80044b6 <arm_pid_init_f32+0x3c>
 80044ae:	2000      	movs	r0, #0
 80044b0:	60e0      	str	r0, [r4, #12]
 80044b2:	6120      	str	r0, [r4, #16]
 80044b4:	6160      	str	r0, [r4, #20]
 80044b6:	b001      	add	sp, #4
 80044b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080044bc <__errno>:
 80044bc:	4b01      	ldr	r3, [pc, #4]	; (80044c4 <__errno+0x8>)
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	4770      	bx	lr
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	20000008 	.word	0x20000008

080044c8 <__sflush_r>:
 80044c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044ca:	898a      	ldrh	r2, [r1, #12]
 80044cc:	0005      	movs	r5, r0
 80044ce:	000c      	movs	r4, r1
 80044d0:	0713      	lsls	r3, r2, #28
 80044d2:	d460      	bmi.n	8004596 <__sflush_r+0xce>
 80044d4:	684b      	ldr	r3, [r1, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	dc04      	bgt.n	80044e4 <__sflush_r+0x1c>
 80044da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	dc01      	bgt.n	80044e4 <__sflush_r+0x1c>
 80044e0:	2000      	movs	r0, #0
 80044e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80044e6:	2f00      	cmp	r7, #0
 80044e8:	d0fa      	beq.n	80044e0 <__sflush_r+0x18>
 80044ea:	2300      	movs	r3, #0
 80044ec:	682e      	ldr	r6, [r5, #0]
 80044ee:	602b      	str	r3, [r5, #0]
 80044f0:	2380      	movs	r3, #128	; 0x80
 80044f2:	015b      	lsls	r3, r3, #5
 80044f4:	6a21      	ldr	r1, [r4, #32]
 80044f6:	401a      	ands	r2, r3
 80044f8:	d034      	beq.n	8004564 <__sflush_r+0x9c>
 80044fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	075b      	lsls	r3, r3, #29
 8004500:	d506      	bpl.n	8004510 <__sflush_r+0x48>
 8004502:	6863      	ldr	r3, [r4, #4]
 8004504:	1ac0      	subs	r0, r0, r3
 8004506:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <__sflush_r+0x48>
 800450c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800450e:	1ac0      	subs	r0, r0, r3
 8004510:	0002      	movs	r2, r0
 8004512:	6a21      	ldr	r1, [r4, #32]
 8004514:	2300      	movs	r3, #0
 8004516:	0028      	movs	r0, r5
 8004518:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800451a:	47b8      	blx	r7
 800451c:	89a1      	ldrh	r1, [r4, #12]
 800451e:	1c43      	adds	r3, r0, #1
 8004520:	d106      	bne.n	8004530 <__sflush_r+0x68>
 8004522:	682b      	ldr	r3, [r5, #0]
 8004524:	2b1d      	cmp	r3, #29
 8004526:	d830      	bhi.n	800458a <__sflush_r+0xc2>
 8004528:	4a2b      	ldr	r2, [pc, #172]	; (80045d8 <__sflush_r+0x110>)
 800452a:	40da      	lsrs	r2, r3
 800452c:	07d3      	lsls	r3, r2, #31
 800452e:	d52c      	bpl.n	800458a <__sflush_r+0xc2>
 8004530:	2300      	movs	r3, #0
 8004532:	6063      	str	r3, [r4, #4]
 8004534:	6923      	ldr	r3, [r4, #16]
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	04cb      	lsls	r3, r1, #19
 800453a:	d505      	bpl.n	8004548 <__sflush_r+0x80>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d102      	bne.n	8004546 <__sflush_r+0x7e>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d100      	bne.n	8004548 <__sflush_r+0x80>
 8004546:	6560      	str	r0, [r4, #84]	; 0x54
 8004548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800454a:	602e      	str	r6, [r5, #0]
 800454c:	2900      	cmp	r1, #0
 800454e:	d0c7      	beq.n	80044e0 <__sflush_r+0x18>
 8004550:	0023      	movs	r3, r4
 8004552:	3344      	adds	r3, #68	; 0x44
 8004554:	4299      	cmp	r1, r3
 8004556:	d002      	beq.n	800455e <__sflush_r+0x96>
 8004558:	0028      	movs	r0, r5
 800455a:	f000 f981 	bl	8004860 <_free_r>
 800455e:	2000      	movs	r0, #0
 8004560:	6360      	str	r0, [r4, #52]	; 0x34
 8004562:	e7be      	b.n	80044e2 <__sflush_r+0x1a>
 8004564:	2301      	movs	r3, #1
 8004566:	0028      	movs	r0, r5
 8004568:	47b8      	blx	r7
 800456a:	1c43      	adds	r3, r0, #1
 800456c:	d1c6      	bne.n	80044fc <__sflush_r+0x34>
 800456e:	682b      	ldr	r3, [r5, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0c3      	beq.n	80044fc <__sflush_r+0x34>
 8004574:	2b1d      	cmp	r3, #29
 8004576:	d001      	beq.n	800457c <__sflush_r+0xb4>
 8004578:	2b16      	cmp	r3, #22
 800457a:	d101      	bne.n	8004580 <__sflush_r+0xb8>
 800457c:	602e      	str	r6, [r5, #0]
 800457e:	e7af      	b.n	80044e0 <__sflush_r+0x18>
 8004580:	2340      	movs	r3, #64	; 0x40
 8004582:	89a2      	ldrh	r2, [r4, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	81a3      	strh	r3, [r4, #12]
 8004588:	e7ab      	b.n	80044e2 <__sflush_r+0x1a>
 800458a:	2340      	movs	r3, #64	; 0x40
 800458c:	430b      	orrs	r3, r1
 800458e:	2001      	movs	r0, #1
 8004590:	81a3      	strh	r3, [r4, #12]
 8004592:	4240      	negs	r0, r0
 8004594:	e7a5      	b.n	80044e2 <__sflush_r+0x1a>
 8004596:	690f      	ldr	r7, [r1, #16]
 8004598:	2f00      	cmp	r7, #0
 800459a:	d0a1      	beq.n	80044e0 <__sflush_r+0x18>
 800459c:	680b      	ldr	r3, [r1, #0]
 800459e:	600f      	str	r7, [r1, #0]
 80045a0:	1bdb      	subs	r3, r3, r7
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	2300      	movs	r3, #0
 80045a6:	0792      	lsls	r2, r2, #30
 80045a8:	d100      	bne.n	80045ac <__sflush_r+0xe4>
 80045aa:	694b      	ldr	r3, [r1, #20]
 80045ac:	60a3      	str	r3, [r4, #8]
 80045ae:	9b01      	ldr	r3, [sp, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	dc00      	bgt.n	80045b6 <__sflush_r+0xee>
 80045b4:	e794      	b.n	80044e0 <__sflush_r+0x18>
 80045b6:	9b01      	ldr	r3, [sp, #4]
 80045b8:	003a      	movs	r2, r7
 80045ba:	6a21      	ldr	r1, [r4, #32]
 80045bc:	0028      	movs	r0, r5
 80045be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045c0:	47b0      	blx	r6
 80045c2:	2800      	cmp	r0, #0
 80045c4:	dc03      	bgt.n	80045ce <__sflush_r+0x106>
 80045c6:	2340      	movs	r3, #64	; 0x40
 80045c8:	89a2      	ldrh	r2, [r4, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	e7df      	b.n	800458e <__sflush_r+0xc6>
 80045ce:	9b01      	ldr	r3, [sp, #4]
 80045d0:	183f      	adds	r7, r7, r0
 80045d2:	1a1b      	subs	r3, r3, r0
 80045d4:	9301      	str	r3, [sp, #4]
 80045d6:	e7ea      	b.n	80045ae <__sflush_r+0xe6>
 80045d8:	20400001 	.word	0x20400001

080045dc <_fflush_r>:
 80045dc:	690b      	ldr	r3, [r1, #16]
 80045de:	b570      	push	{r4, r5, r6, lr}
 80045e0:	0005      	movs	r5, r0
 80045e2:	000c      	movs	r4, r1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <_fflush_r+0x10>
 80045e8:	2000      	movs	r0, #0
 80045ea:	bd70      	pop	{r4, r5, r6, pc}
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d004      	beq.n	80045fa <_fflush_r+0x1e>
 80045f0:	6983      	ldr	r3, [r0, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <_fflush_r+0x1e>
 80045f6:	f000 f873 	bl	80046e0 <__sinit>
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <_fflush_r+0x4c>)
 80045fc:	429c      	cmp	r4, r3
 80045fe:	d109      	bne.n	8004614 <_fflush_r+0x38>
 8004600:	686c      	ldr	r4, [r5, #4]
 8004602:	220c      	movs	r2, #12
 8004604:	5ea3      	ldrsh	r3, [r4, r2]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0ee      	beq.n	80045e8 <_fflush_r+0xc>
 800460a:	0021      	movs	r1, r4
 800460c:	0028      	movs	r0, r5
 800460e:	f7ff ff5b 	bl	80044c8 <__sflush_r>
 8004612:	e7ea      	b.n	80045ea <_fflush_r+0xe>
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <_fflush_r+0x50>)
 8004616:	429c      	cmp	r4, r3
 8004618:	d101      	bne.n	800461e <_fflush_r+0x42>
 800461a:	68ac      	ldr	r4, [r5, #8]
 800461c:	e7f1      	b.n	8004602 <_fflush_r+0x26>
 800461e:	4b04      	ldr	r3, [pc, #16]	; (8004630 <_fflush_r+0x54>)
 8004620:	429c      	cmp	r4, r3
 8004622:	d1ee      	bne.n	8004602 <_fflush_r+0x26>
 8004624:	68ec      	ldr	r4, [r5, #12]
 8004626:	e7ec      	b.n	8004602 <_fflush_r+0x26>
 8004628:	08005578 	.word	0x08005578
 800462c:	08005598 	.word	0x08005598
 8004630:	08005558 	.word	0x08005558

08004634 <fflush>:
 8004634:	b510      	push	{r4, lr}
 8004636:	1e01      	subs	r1, r0, #0
 8004638:	d105      	bne.n	8004646 <fflush+0x12>
 800463a:	4b05      	ldr	r3, [pc, #20]	; (8004650 <fflush+0x1c>)
 800463c:	4905      	ldr	r1, [pc, #20]	; (8004654 <fflush+0x20>)
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	f000 f8c0 	bl	80047c4 <_fwalk_reent>
 8004644:	bd10      	pop	{r4, pc}
 8004646:	4b04      	ldr	r3, [pc, #16]	; (8004658 <fflush+0x24>)
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	f7ff ffc7 	bl	80045dc <_fflush_r>
 800464e:	e7f9      	b.n	8004644 <fflush+0x10>
 8004650:	080055b8 	.word	0x080055b8
 8004654:	080045dd 	.word	0x080045dd
 8004658:	20000008 	.word	0x20000008

0800465c <std>:
 800465c:	2300      	movs	r3, #0
 800465e:	b510      	push	{r4, lr}
 8004660:	0004      	movs	r4, r0
 8004662:	6003      	str	r3, [r0, #0]
 8004664:	6043      	str	r3, [r0, #4]
 8004666:	6083      	str	r3, [r0, #8]
 8004668:	8181      	strh	r1, [r0, #12]
 800466a:	6643      	str	r3, [r0, #100]	; 0x64
 800466c:	81c2      	strh	r2, [r0, #14]
 800466e:	6103      	str	r3, [r0, #16]
 8004670:	6143      	str	r3, [r0, #20]
 8004672:	6183      	str	r3, [r0, #24]
 8004674:	0019      	movs	r1, r3
 8004676:	2208      	movs	r2, #8
 8004678:	305c      	adds	r0, #92	; 0x5c
 800467a:	f000 f8e9 	bl	8004850 <memset>
 800467e:	4b05      	ldr	r3, [pc, #20]	; (8004694 <std+0x38>)
 8004680:	6224      	str	r4, [r4, #32]
 8004682:	6263      	str	r3, [r4, #36]	; 0x24
 8004684:	4b04      	ldr	r3, [pc, #16]	; (8004698 <std+0x3c>)
 8004686:	62a3      	str	r3, [r4, #40]	; 0x28
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <std+0x40>)
 800468a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800468c:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <std+0x44>)
 800468e:	6323      	str	r3, [r4, #48]	; 0x30
 8004690:	bd10      	pop	{r4, pc}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	08004add 	.word	0x08004add
 8004698:	08004b05 	.word	0x08004b05
 800469c:	08004b3d 	.word	0x08004b3d
 80046a0:	08004b69 	.word	0x08004b69

080046a4 <_cleanup_r>:
 80046a4:	b510      	push	{r4, lr}
 80046a6:	4902      	ldr	r1, [pc, #8]	; (80046b0 <_cleanup_r+0xc>)
 80046a8:	f000 f88c 	bl	80047c4 <_fwalk_reent>
 80046ac:	bd10      	pop	{r4, pc}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	080045dd 	.word	0x080045dd

080046b4 <__sfmoreglue>:
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	2568      	movs	r5, #104	; 0x68
 80046b8:	1e4a      	subs	r2, r1, #1
 80046ba:	4355      	muls	r5, r2
 80046bc:	000e      	movs	r6, r1
 80046be:	0029      	movs	r1, r5
 80046c0:	3174      	adds	r1, #116	; 0x74
 80046c2:	f000 f917 	bl	80048f4 <_malloc_r>
 80046c6:	1e04      	subs	r4, r0, #0
 80046c8:	d008      	beq.n	80046dc <__sfmoreglue+0x28>
 80046ca:	2100      	movs	r1, #0
 80046cc:	002a      	movs	r2, r5
 80046ce:	6001      	str	r1, [r0, #0]
 80046d0:	6046      	str	r6, [r0, #4]
 80046d2:	300c      	adds	r0, #12
 80046d4:	60a0      	str	r0, [r4, #8]
 80046d6:	3268      	adds	r2, #104	; 0x68
 80046d8:	f000 f8ba 	bl	8004850 <memset>
 80046dc:	0020      	movs	r0, r4
 80046de:	bd70      	pop	{r4, r5, r6, pc}

080046e0 <__sinit>:
 80046e0:	6983      	ldr	r3, [r0, #24]
 80046e2:	b513      	push	{r0, r1, r4, lr}
 80046e4:	0004      	movs	r4, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d128      	bne.n	800473c <__sinit+0x5c>
 80046ea:	6483      	str	r3, [r0, #72]	; 0x48
 80046ec:	64c3      	str	r3, [r0, #76]	; 0x4c
 80046ee:	6503      	str	r3, [r0, #80]	; 0x50
 80046f0:	4b13      	ldr	r3, [pc, #76]	; (8004740 <__sinit+0x60>)
 80046f2:	4a14      	ldr	r2, [pc, #80]	; (8004744 <__sinit+0x64>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6282      	str	r2, [r0, #40]	; 0x28
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	4298      	cmp	r0, r3
 80046fc:	d101      	bne.n	8004702 <__sinit+0x22>
 80046fe:	2301      	movs	r3, #1
 8004700:	6183      	str	r3, [r0, #24]
 8004702:	0020      	movs	r0, r4
 8004704:	f000 f820 	bl	8004748 <__sfp>
 8004708:	6060      	str	r0, [r4, #4]
 800470a:	0020      	movs	r0, r4
 800470c:	f000 f81c 	bl	8004748 <__sfp>
 8004710:	60a0      	str	r0, [r4, #8]
 8004712:	0020      	movs	r0, r4
 8004714:	f000 f818 	bl	8004748 <__sfp>
 8004718:	2200      	movs	r2, #0
 800471a:	60e0      	str	r0, [r4, #12]
 800471c:	2104      	movs	r1, #4
 800471e:	6860      	ldr	r0, [r4, #4]
 8004720:	f7ff ff9c 	bl	800465c <std>
 8004724:	2201      	movs	r2, #1
 8004726:	2109      	movs	r1, #9
 8004728:	68a0      	ldr	r0, [r4, #8]
 800472a:	f7ff ff97 	bl	800465c <std>
 800472e:	2202      	movs	r2, #2
 8004730:	2112      	movs	r1, #18
 8004732:	68e0      	ldr	r0, [r4, #12]
 8004734:	f7ff ff92 	bl	800465c <std>
 8004738:	2301      	movs	r3, #1
 800473a:	61a3      	str	r3, [r4, #24]
 800473c:	bd13      	pop	{r0, r1, r4, pc}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	080055b8 	.word	0x080055b8
 8004744:	080046a5 	.word	0x080046a5

08004748 <__sfp>:
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <__sfp+0x74>)
 800474c:	0007      	movs	r7, r0
 800474e:	681e      	ldr	r6, [r3, #0]
 8004750:	69b3      	ldr	r3, [r6, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d102      	bne.n	800475c <__sfp+0x14>
 8004756:	0030      	movs	r0, r6
 8004758:	f7ff ffc2 	bl	80046e0 <__sinit>
 800475c:	3648      	adds	r6, #72	; 0x48
 800475e:	68b4      	ldr	r4, [r6, #8]
 8004760:	6873      	ldr	r3, [r6, #4]
 8004762:	3b01      	subs	r3, #1
 8004764:	d504      	bpl.n	8004770 <__sfp+0x28>
 8004766:	6833      	ldr	r3, [r6, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <__sfp+0x34>
 800476c:	6836      	ldr	r6, [r6, #0]
 800476e:	e7f6      	b.n	800475e <__sfp+0x16>
 8004770:	220c      	movs	r2, #12
 8004772:	5ea5      	ldrsh	r5, [r4, r2]
 8004774:	2d00      	cmp	r5, #0
 8004776:	d00d      	beq.n	8004794 <__sfp+0x4c>
 8004778:	3468      	adds	r4, #104	; 0x68
 800477a:	e7f2      	b.n	8004762 <__sfp+0x1a>
 800477c:	2104      	movs	r1, #4
 800477e:	0038      	movs	r0, r7
 8004780:	f7ff ff98 	bl	80046b4 <__sfmoreglue>
 8004784:	6030      	str	r0, [r6, #0]
 8004786:	2800      	cmp	r0, #0
 8004788:	d1f0      	bne.n	800476c <__sfp+0x24>
 800478a:	230c      	movs	r3, #12
 800478c:	0004      	movs	r4, r0
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	0020      	movs	r0, r4
 8004792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004794:	0020      	movs	r0, r4
 8004796:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <__sfp+0x78>)
 8004798:	6665      	str	r5, [r4, #100]	; 0x64
 800479a:	6025      	str	r5, [r4, #0]
 800479c:	6065      	str	r5, [r4, #4]
 800479e:	60a5      	str	r5, [r4, #8]
 80047a0:	60e3      	str	r3, [r4, #12]
 80047a2:	6125      	str	r5, [r4, #16]
 80047a4:	6165      	str	r5, [r4, #20]
 80047a6:	61a5      	str	r5, [r4, #24]
 80047a8:	2208      	movs	r2, #8
 80047aa:	0029      	movs	r1, r5
 80047ac:	305c      	adds	r0, #92	; 0x5c
 80047ae:	f000 f84f 	bl	8004850 <memset>
 80047b2:	6365      	str	r5, [r4, #52]	; 0x34
 80047b4:	63a5      	str	r5, [r4, #56]	; 0x38
 80047b6:	64a5      	str	r5, [r4, #72]	; 0x48
 80047b8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80047ba:	e7e9      	b.n	8004790 <__sfp+0x48>
 80047bc:	080055b8 	.word	0x080055b8
 80047c0:	ffff0001 	.word	0xffff0001

080047c4 <_fwalk_reent>:
 80047c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047c6:	0004      	movs	r4, r0
 80047c8:	0007      	movs	r7, r0
 80047ca:	2600      	movs	r6, #0
 80047cc:	9101      	str	r1, [sp, #4]
 80047ce:	3448      	adds	r4, #72	; 0x48
 80047d0:	2c00      	cmp	r4, #0
 80047d2:	d101      	bne.n	80047d8 <_fwalk_reent+0x14>
 80047d4:	0030      	movs	r0, r6
 80047d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047d8:	6863      	ldr	r3, [r4, #4]
 80047da:	68a5      	ldr	r5, [r4, #8]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	9b00      	ldr	r3, [sp, #0]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	d501      	bpl.n	80047ea <_fwalk_reent+0x26>
 80047e6:	6824      	ldr	r4, [r4, #0]
 80047e8:	e7f2      	b.n	80047d0 <_fwalk_reent+0xc>
 80047ea:	89ab      	ldrh	r3, [r5, #12]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d908      	bls.n	8004802 <_fwalk_reent+0x3e>
 80047f0:	220e      	movs	r2, #14
 80047f2:	5eab      	ldrsh	r3, [r5, r2]
 80047f4:	3301      	adds	r3, #1
 80047f6:	d004      	beq.n	8004802 <_fwalk_reent+0x3e>
 80047f8:	0029      	movs	r1, r5
 80047fa:	0038      	movs	r0, r7
 80047fc:	9b01      	ldr	r3, [sp, #4]
 80047fe:	4798      	blx	r3
 8004800:	4306      	orrs	r6, r0
 8004802:	3568      	adds	r5, #104	; 0x68
 8004804:	e7eb      	b.n	80047de <_fwalk_reent+0x1a>
	...

08004808 <__libc_init_array>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	2600      	movs	r6, #0
 800480c:	4d0c      	ldr	r5, [pc, #48]	; (8004840 <__libc_init_array+0x38>)
 800480e:	4c0d      	ldr	r4, [pc, #52]	; (8004844 <__libc_init_array+0x3c>)
 8004810:	1b64      	subs	r4, r4, r5
 8004812:	10a4      	asrs	r4, r4, #2
 8004814:	42a6      	cmp	r6, r4
 8004816:	d109      	bne.n	800482c <__libc_init_array+0x24>
 8004818:	2600      	movs	r6, #0
 800481a:	f000 fe17 	bl	800544c <_init>
 800481e:	4d0a      	ldr	r5, [pc, #40]	; (8004848 <__libc_init_array+0x40>)
 8004820:	4c0a      	ldr	r4, [pc, #40]	; (800484c <__libc_init_array+0x44>)
 8004822:	1b64      	subs	r4, r4, r5
 8004824:	10a4      	asrs	r4, r4, #2
 8004826:	42a6      	cmp	r6, r4
 8004828:	d105      	bne.n	8004836 <__libc_init_array+0x2e>
 800482a:	bd70      	pop	{r4, r5, r6, pc}
 800482c:	00b3      	lsls	r3, r6, #2
 800482e:	58eb      	ldr	r3, [r5, r3]
 8004830:	4798      	blx	r3
 8004832:	3601      	adds	r6, #1
 8004834:	e7ee      	b.n	8004814 <__libc_init_array+0xc>
 8004836:	00b3      	lsls	r3, r6, #2
 8004838:	58eb      	ldr	r3, [r5, r3]
 800483a:	4798      	blx	r3
 800483c:	3601      	adds	r6, #1
 800483e:	e7f2      	b.n	8004826 <__libc_init_array+0x1e>
 8004840:	080055f8 	.word	0x080055f8
 8004844:	080055f8 	.word	0x080055f8
 8004848:	080055f8 	.word	0x080055f8
 800484c:	080055fc 	.word	0x080055fc

08004850 <memset>:
 8004850:	0003      	movs	r3, r0
 8004852:	1812      	adds	r2, r2, r0
 8004854:	4293      	cmp	r3, r2
 8004856:	d100      	bne.n	800485a <memset+0xa>
 8004858:	4770      	bx	lr
 800485a:	7019      	strb	r1, [r3, #0]
 800485c:	3301      	adds	r3, #1
 800485e:	e7f9      	b.n	8004854 <memset+0x4>

08004860 <_free_r>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	0005      	movs	r5, r0
 8004864:	2900      	cmp	r1, #0
 8004866:	d010      	beq.n	800488a <_free_r+0x2a>
 8004868:	1f0c      	subs	r4, r1, #4
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	da00      	bge.n	8004872 <_free_r+0x12>
 8004870:	18e4      	adds	r4, r4, r3
 8004872:	0028      	movs	r0, r5
 8004874:	f000 faf0 	bl	8004e58 <__malloc_lock>
 8004878:	4a1d      	ldr	r2, [pc, #116]	; (80048f0 <_free_r+0x90>)
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d105      	bne.n	800488c <_free_r+0x2c>
 8004880:	6063      	str	r3, [r4, #4]
 8004882:	6014      	str	r4, [r2, #0]
 8004884:	0028      	movs	r0, r5
 8004886:	f000 fae8 	bl	8004e5a <__malloc_unlock>
 800488a:	bd70      	pop	{r4, r5, r6, pc}
 800488c:	42a3      	cmp	r3, r4
 800488e:	d909      	bls.n	80048a4 <_free_r+0x44>
 8004890:	6821      	ldr	r1, [r4, #0]
 8004892:	1860      	adds	r0, r4, r1
 8004894:	4283      	cmp	r3, r0
 8004896:	d1f3      	bne.n	8004880 <_free_r+0x20>
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	1841      	adds	r1, r0, r1
 800489e:	6021      	str	r1, [r4, #0]
 80048a0:	e7ee      	b.n	8004880 <_free_r+0x20>
 80048a2:	0013      	movs	r3, r2
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	2a00      	cmp	r2, #0
 80048a8:	d001      	beq.n	80048ae <_free_r+0x4e>
 80048aa:	42a2      	cmp	r2, r4
 80048ac:	d9f9      	bls.n	80048a2 <_free_r+0x42>
 80048ae:	6819      	ldr	r1, [r3, #0]
 80048b0:	1858      	adds	r0, r3, r1
 80048b2:	42a0      	cmp	r0, r4
 80048b4:	d10b      	bne.n	80048ce <_free_r+0x6e>
 80048b6:	6820      	ldr	r0, [r4, #0]
 80048b8:	1809      	adds	r1, r1, r0
 80048ba:	1858      	adds	r0, r3, r1
 80048bc:	6019      	str	r1, [r3, #0]
 80048be:	4282      	cmp	r2, r0
 80048c0:	d1e0      	bne.n	8004884 <_free_r+0x24>
 80048c2:	6810      	ldr	r0, [r2, #0]
 80048c4:	6852      	ldr	r2, [r2, #4]
 80048c6:	1841      	adds	r1, r0, r1
 80048c8:	6019      	str	r1, [r3, #0]
 80048ca:	605a      	str	r2, [r3, #4]
 80048cc:	e7da      	b.n	8004884 <_free_r+0x24>
 80048ce:	42a0      	cmp	r0, r4
 80048d0:	d902      	bls.n	80048d8 <_free_r+0x78>
 80048d2:	230c      	movs	r3, #12
 80048d4:	602b      	str	r3, [r5, #0]
 80048d6:	e7d5      	b.n	8004884 <_free_r+0x24>
 80048d8:	6821      	ldr	r1, [r4, #0]
 80048da:	1860      	adds	r0, r4, r1
 80048dc:	4282      	cmp	r2, r0
 80048de:	d103      	bne.n	80048e8 <_free_r+0x88>
 80048e0:	6810      	ldr	r0, [r2, #0]
 80048e2:	6852      	ldr	r2, [r2, #4]
 80048e4:	1841      	adds	r1, r0, r1
 80048e6:	6021      	str	r1, [r4, #0]
 80048e8:	6062      	str	r2, [r4, #4]
 80048ea:	605c      	str	r4, [r3, #4]
 80048ec:	e7ca      	b.n	8004884 <_free_r+0x24>
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	2000009c 	.word	0x2000009c

080048f4 <_malloc_r>:
 80048f4:	2303      	movs	r3, #3
 80048f6:	b570      	push	{r4, r5, r6, lr}
 80048f8:	1ccd      	adds	r5, r1, #3
 80048fa:	439d      	bics	r5, r3
 80048fc:	3508      	adds	r5, #8
 80048fe:	0006      	movs	r6, r0
 8004900:	2d0c      	cmp	r5, #12
 8004902:	d21e      	bcs.n	8004942 <_malloc_r+0x4e>
 8004904:	250c      	movs	r5, #12
 8004906:	42a9      	cmp	r1, r5
 8004908:	d81d      	bhi.n	8004946 <_malloc_r+0x52>
 800490a:	0030      	movs	r0, r6
 800490c:	f000 faa4 	bl	8004e58 <__malloc_lock>
 8004910:	4a25      	ldr	r2, [pc, #148]	; (80049a8 <_malloc_r+0xb4>)
 8004912:	6814      	ldr	r4, [r2, #0]
 8004914:	0021      	movs	r1, r4
 8004916:	2900      	cmp	r1, #0
 8004918:	d119      	bne.n	800494e <_malloc_r+0x5a>
 800491a:	4c24      	ldr	r4, [pc, #144]	; (80049ac <_malloc_r+0xb8>)
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d103      	bne.n	800492a <_malloc_r+0x36>
 8004922:	0030      	movs	r0, r6
 8004924:	f000 f8c8 	bl	8004ab8 <_sbrk_r>
 8004928:	6020      	str	r0, [r4, #0]
 800492a:	0029      	movs	r1, r5
 800492c:	0030      	movs	r0, r6
 800492e:	f000 f8c3 	bl	8004ab8 <_sbrk_r>
 8004932:	1c43      	adds	r3, r0, #1
 8004934:	d12b      	bne.n	800498e <_malloc_r+0x9a>
 8004936:	230c      	movs	r3, #12
 8004938:	0030      	movs	r0, r6
 800493a:	6033      	str	r3, [r6, #0]
 800493c:	f000 fa8d 	bl	8004e5a <__malloc_unlock>
 8004940:	e003      	b.n	800494a <_malloc_r+0x56>
 8004942:	2d00      	cmp	r5, #0
 8004944:	dadf      	bge.n	8004906 <_malloc_r+0x12>
 8004946:	230c      	movs	r3, #12
 8004948:	6033      	str	r3, [r6, #0]
 800494a:	2000      	movs	r0, #0
 800494c:	bd70      	pop	{r4, r5, r6, pc}
 800494e:	680b      	ldr	r3, [r1, #0]
 8004950:	1b5b      	subs	r3, r3, r5
 8004952:	d419      	bmi.n	8004988 <_malloc_r+0x94>
 8004954:	2b0b      	cmp	r3, #11
 8004956:	d903      	bls.n	8004960 <_malloc_r+0x6c>
 8004958:	600b      	str	r3, [r1, #0]
 800495a:	18cc      	adds	r4, r1, r3
 800495c:	6025      	str	r5, [r4, #0]
 800495e:	e003      	b.n	8004968 <_malloc_r+0x74>
 8004960:	684b      	ldr	r3, [r1, #4]
 8004962:	428c      	cmp	r4, r1
 8004964:	d10d      	bne.n	8004982 <_malloc_r+0x8e>
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	0030      	movs	r0, r6
 800496a:	f000 fa76 	bl	8004e5a <__malloc_unlock>
 800496e:	0020      	movs	r0, r4
 8004970:	2207      	movs	r2, #7
 8004972:	300b      	adds	r0, #11
 8004974:	1d23      	adds	r3, r4, #4
 8004976:	4390      	bics	r0, r2
 8004978:	1ac3      	subs	r3, r0, r3
 800497a:	d0e7      	beq.n	800494c <_malloc_r+0x58>
 800497c:	425a      	negs	r2, r3
 800497e:	50e2      	str	r2, [r4, r3]
 8004980:	e7e4      	b.n	800494c <_malloc_r+0x58>
 8004982:	6063      	str	r3, [r4, #4]
 8004984:	000c      	movs	r4, r1
 8004986:	e7ef      	b.n	8004968 <_malloc_r+0x74>
 8004988:	000c      	movs	r4, r1
 800498a:	6849      	ldr	r1, [r1, #4]
 800498c:	e7c3      	b.n	8004916 <_malloc_r+0x22>
 800498e:	2303      	movs	r3, #3
 8004990:	1cc4      	adds	r4, r0, #3
 8004992:	439c      	bics	r4, r3
 8004994:	42a0      	cmp	r0, r4
 8004996:	d0e1      	beq.n	800495c <_malloc_r+0x68>
 8004998:	1a21      	subs	r1, r4, r0
 800499a:	0030      	movs	r0, r6
 800499c:	f000 f88c 	bl	8004ab8 <_sbrk_r>
 80049a0:	1c43      	adds	r3, r0, #1
 80049a2:	d1db      	bne.n	800495c <_malloc_r+0x68>
 80049a4:	e7c7      	b.n	8004936 <_malloc_r+0x42>
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	2000009c 	.word	0x2000009c
 80049ac:	200000a0 	.word	0x200000a0

080049b0 <iprintf>:
 80049b0:	b40f      	push	{r0, r1, r2, r3}
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <iprintf+0x30>)
 80049b4:	b513      	push	{r0, r1, r4, lr}
 80049b6:	681c      	ldr	r4, [r3, #0]
 80049b8:	2c00      	cmp	r4, #0
 80049ba:	d005      	beq.n	80049c8 <iprintf+0x18>
 80049bc:	69a3      	ldr	r3, [r4, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d102      	bne.n	80049c8 <iprintf+0x18>
 80049c2:	0020      	movs	r0, r4
 80049c4:	f7ff fe8c 	bl	80046e0 <__sinit>
 80049c8:	ab05      	add	r3, sp, #20
 80049ca:	9a04      	ldr	r2, [sp, #16]
 80049cc:	68a1      	ldr	r1, [r4, #8]
 80049ce:	0020      	movs	r0, r4
 80049d0:	9301      	str	r3, [sp, #4]
 80049d2:	f000 fa6b 	bl	8004eac <_vfiprintf_r>
 80049d6:	bc16      	pop	{r1, r2, r4}
 80049d8:	bc08      	pop	{r3}
 80049da:	b004      	add	sp, #16
 80049dc:	4718      	bx	r3
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	20000008 	.word	0x20000008

080049e4 <_puts_r>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	0005      	movs	r5, r0
 80049e8:	000e      	movs	r6, r1
 80049ea:	2800      	cmp	r0, #0
 80049ec:	d004      	beq.n	80049f8 <_puts_r+0x14>
 80049ee:	6983      	ldr	r3, [r0, #24]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <_puts_r+0x14>
 80049f4:	f7ff fe74 	bl	80046e0 <__sinit>
 80049f8:	69ab      	ldr	r3, [r5, #24]
 80049fa:	68ac      	ldr	r4, [r5, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d102      	bne.n	8004a06 <_puts_r+0x22>
 8004a00:	0028      	movs	r0, r5
 8004a02:	f7ff fe6d 	bl	80046e0 <__sinit>
 8004a06:	4b24      	ldr	r3, [pc, #144]	; (8004a98 <_puts_r+0xb4>)
 8004a08:	429c      	cmp	r4, r3
 8004a0a:	d10f      	bne.n	8004a2c <_puts_r+0x48>
 8004a0c:	686c      	ldr	r4, [r5, #4]
 8004a0e:	89a3      	ldrh	r3, [r4, #12]
 8004a10:	071b      	lsls	r3, r3, #28
 8004a12:	d502      	bpl.n	8004a1a <_puts_r+0x36>
 8004a14:	6923      	ldr	r3, [r4, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11f      	bne.n	8004a5a <_puts_r+0x76>
 8004a1a:	0021      	movs	r1, r4
 8004a1c:	0028      	movs	r0, r5
 8004a1e:	f000 f913 	bl	8004c48 <__swsetup_r>
 8004a22:	2800      	cmp	r0, #0
 8004a24:	d019      	beq.n	8004a5a <_puts_r+0x76>
 8004a26:	2001      	movs	r0, #1
 8004a28:	4240      	negs	r0, r0
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <_puts_r+0xb8>)
 8004a2e:	429c      	cmp	r4, r3
 8004a30:	d101      	bne.n	8004a36 <_puts_r+0x52>
 8004a32:	68ac      	ldr	r4, [r5, #8]
 8004a34:	e7eb      	b.n	8004a0e <_puts_r+0x2a>
 8004a36:	4b1a      	ldr	r3, [pc, #104]	; (8004aa0 <_puts_r+0xbc>)
 8004a38:	429c      	cmp	r4, r3
 8004a3a:	d1e8      	bne.n	8004a0e <_puts_r+0x2a>
 8004a3c:	68ec      	ldr	r4, [r5, #12]
 8004a3e:	e7e6      	b.n	8004a0e <_puts_r+0x2a>
 8004a40:	3601      	adds	r6, #1
 8004a42:	60a3      	str	r3, [r4, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	da04      	bge.n	8004a52 <_puts_r+0x6e>
 8004a48:	69a2      	ldr	r2, [r4, #24]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	dc16      	bgt.n	8004a7c <_puts_r+0x98>
 8004a4e:	290a      	cmp	r1, #10
 8004a50:	d014      	beq.n	8004a7c <_puts_r+0x98>
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	6022      	str	r2, [r4, #0]
 8004a58:	7019      	strb	r1, [r3, #0]
 8004a5a:	68a3      	ldr	r3, [r4, #8]
 8004a5c:	7831      	ldrb	r1, [r6, #0]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	2900      	cmp	r1, #0
 8004a62:	d1ed      	bne.n	8004a40 <_puts_r+0x5c>
 8004a64:	60a3      	str	r3, [r4, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	da0f      	bge.n	8004a8a <_puts_r+0xa6>
 8004a6a:	0022      	movs	r2, r4
 8004a6c:	310a      	adds	r1, #10
 8004a6e:	0028      	movs	r0, r5
 8004a70:	f000 f880 	bl	8004b74 <__swbuf_r>
 8004a74:	1c43      	adds	r3, r0, #1
 8004a76:	d0d6      	beq.n	8004a26 <_puts_r+0x42>
 8004a78:	200a      	movs	r0, #10
 8004a7a:	e7d6      	b.n	8004a2a <_puts_r+0x46>
 8004a7c:	0022      	movs	r2, r4
 8004a7e:	0028      	movs	r0, r5
 8004a80:	f000 f878 	bl	8004b74 <__swbuf_r>
 8004a84:	1c43      	adds	r3, r0, #1
 8004a86:	d1e8      	bne.n	8004a5a <_puts_r+0x76>
 8004a88:	e7cd      	b.n	8004a26 <_puts_r+0x42>
 8004a8a:	200a      	movs	r0, #10
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	6022      	str	r2, [r4, #0]
 8004a92:	7018      	strb	r0, [r3, #0]
 8004a94:	e7c9      	b.n	8004a2a <_puts_r+0x46>
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	08005578 	.word	0x08005578
 8004a9c:	08005598 	.word	0x08005598
 8004aa0:	08005558 	.word	0x08005558

08004aa4 <puts>:
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	4b03      	ldr	r3, [pc, #12]	; (8004ab4 <puts+0x10>)
 8004aa8:	0001      	movs	r1, r0
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	f7ff ff9a 	bl	80049e4 <_puts_r>
 8004ab0:	bd10      	pop	{r4, pc}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	20000008 	.word	0x20000008

08004ab8 <_sbrk_r>:
 8004ab8:	2300      	movs	r3, #0
 8004aba:	b570      	push	{r4, r5, r6, lr}
 8004abc:	4c06      	ldr	r4, [pc, #24]	; (8004ad8 <_sbrk_r+0x20>)
 8004abe:	0005      	movs	r5, r0
 8004ac0:	0008      	movs	r0, r1
 8004ac2:	6023      	str	r3, [r4, #0]
 8004ac4:	f7ff fc46 	bl	8004354 <_sbrk>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d103      	bne.n	8004ad4 <_sbrk_r+0x1c>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d000      	beq.n	8004ad4 <_sbrk_r+0x1c>
 8004ad2:	602b      	str	r3, [r5, #0]
 8004ad4:	bd70      	pop	{r4, r5, r6, pc}
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	200001cc 	.word	0x200001cc

08004adc <__sread>:
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	000c      	movs	r4, r1
 8004ae0:	250e      	movs	r5, #14
 8004ae2:	5f49      	ldrsh	r1, [r1, r5]
 8004ae4:	f000 fc6e 	bl	80053c4 <_read_r>
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	db03      	blt.n	8004af4 <__sread+0x18>
 8004aec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004aee:	181b      	adds	r3, r3, r0
 8004af0:	6563      	str	r3, [r4, #84]	; 0x54
 8004af2:	bd70      	pop	{r4, r5, r6, pc}
 8004af4:	89a3      	ldrh	r3, [r4, #12]
 8004af6:	4a02      	ldr	r2, [pc, #8]	; (8004b00 <__sread+0x24>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	81a3      	strh	r3, [r4, #12]
 8004afc:	e7f9      	b.n	8004af2 <__sread+0x16>
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	ffffefff 	.word	0xffffefff

08004b04 <__swrite>:
 8004b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b06:	001f      	movs	r7, r3
 8004b08:	898b      	ldrh	r3, [r1, #12]
 8004b0a:	0005      	movs	r5, r0
 8004b0c:	000c      	movs	r4, r1
 8004b0e:	0016      	movs	r6, r2
 8004b10:	05db      	lsls	r3, r3, #23
 8004b12:	d505      	bpl.n	8004b20 <__swrite+0x1c>
 8004b14:	230e      	movs	r3, #14
 8004b16:	5ec9      	ldrsh	r1, [r1, r3]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	f000 f91c 	bl	8004d58 <_lseek_r>
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	4a05      	ldr	r2, [pc, #20]	; (8004b38 <__swrite+0x34>)
 8004b24:	0028      	movs	r0, r5
 8004b26:	4013      	ands	r3, r2
 8004b28:	81a3      	strh	r3, [r4, #12]
 8004b2a:	0032      	movs	r2, r6
 8004b2c:	230e      	movs	r3, #14
 8004b2e:	5ee1      	ldrsh	r1, [r4, r3]
 8004b30:	003b      	movs	r3, r7
 8004b32:	f000 f875 	bl	8004c20 <_write_r>
 8004b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b38:	ffffefff 	.word	0xffffefff

08004b3c <__sseek>:
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	000c      	movs	r4, r1
 8004b40:	250e      	movs	r5, #14
 8004b42:	5f49      	ldrsh	r1, [r1, r5]
 8004b44:	f000 f908 	bl	8004d58 <_lseek_r>
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	1c42      	adds	r2, r0, #1
 8004b4c:	d103      	bne.n	8004b56 <__sseek+0x1a>
 8004b4e:	4a05      	ldr	r2, [pc, #20]	; (8004b64 <__sseek+0x28>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	81a3      	strh	r3, [r4, #12]
 8004b54:	bd70      	pop	{r4, r5, r6, pc}
 8004b56:	2280      	movs	r2, #128	; 0x80
 8004b58:	0152      	lsls	r2, r2, #5
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	81a3      	strh	r3, [r4, #12]
 8004b5e:	6560      	str	r0, [r4, #84]	; 0x54
 8004b60:	e7f8      	b.n	8004b54 <__sseek+0x18>
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	ffffefff 	.word	0xffffefff

08004b68 <__sclose>:
 8004b68:	b510      	push	{r4, lr}
 8004b6a:	230e      	movs	r3, #14
 8004b6c:	5ec9      	ldrsh	r1, [r1, r3]
 8004b6e:	f000 f8e1 	bl	8004d34 <_close_r>
 8004b72:	bd10      	pop	{r4, pc}

08004b74 <__swbuf_r>:
 8004b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b76:	0005      	movs	r5, r0
 8004b78:	000e      	movs	r6, r1
 8004b7a:	0014      	movs	r4, r2
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	d004      	beq.n	8004b8a <__swbuf_r+0x16>
 8004b80:	6983      	ldr	r3, [r0, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <__swbuf_r+0x16>
 8004b86:	f7ff fdab 	bl	80046e0 <__sinit>
 8004b8a:	4b22      	ldr	r3, [pc, #136]	; (8004c14 <__swbuf_r+0xa0>)
 8004b8c:	429c      	cmp	r4, r3
 8004b8e:	d12d      	bne.n	8004bec <__swbuf_r+0x78>
 8004b90:	686c      	ldr	r4, [r5, #4]
 8004b92:	69a3      	ldr	r3, [r4, #24]
 8004b94:	60a3      	str	r3, [r4, #8]
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	071b      	lsls	r3, r3, #28
 8004b9a:	d531      	bpl.n	8004c00 <__swbuf_r+0x8c>
 8004b9c:	6923      	ldr	r3, [r4, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d02e      	beq.n	8004c00 <__swbuf_r+0x8c>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	6922      	ldr	r2, [r4, #16]
 8004ba6:	b2f7      	uxtb	r7, r6
 8004ba8:	1a98      	subs	r0, r3, r2
 8004baa:	6963      	ldr	r3, [r4, #20]
 8004bac:	b2f6      	uxtb	r6, r6
 8004bae:	4283      	cmp	r3, r0
 8004bb0:	dc05      	bgt.n	8004bbe <__swbuf_r+0x4a>
 8004bb2:	0021      	movs	r1, r4
 8004bb4:	0028      	movs	r0, r5
 8004bb6:	f7ff fd11 	bl	80045dc <_fflush_r>
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	d126      	bne.n	8004c0c <__swbuf_r+0x98>
 8004bbe:	68a3      	ldr	r3, [r4, #8]
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	60a3      	str	r3, [r4, #8]
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	6022      	str	r2, [r4, #0]
 8004bcc:	701f      	strb	r7, [r3, #0]
 8004bce:	6963      	ldr	r3, [r4, #20]
 8004bd0:	4283      	cmp	r3, r0
 8004bd2:	d004      	beq.n	8004bde <__swbuf_r+0x6a>
 8004bd4:	89a3      	ldrh	r3, [r4, #12]
 8004bd6:	07db      	lsls	r3, r3, #31
 8004bd8:	d51a      	bpl.n	8004c10 <__swbuf_r+0x9c>
 8004bda:	2e0a      	cmp	r6, #10
 8004bdc:	d118      	bne.n	8004c10 <__swbuf_r+0x9c>
 8004bde:	0021      	movs	r1, r4
 8004be0:	0028      	movs	r0, r5
 8004be2:	f7ff fcfb 	bl	80045dc <_fflush_r>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d012      	beq.n	8004c10 <__swbuf_r+0x9c>
 8004bea:	e00f      	b.n	8004c0c <__swbuf_r+0x98>
 8004bec:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <__swbuf_r+0xa4>)
 8004bee:	429c      	cmp	r4, r3
 8004bf0:	d101      	bne.n	8004bf6 <__swbuf_r+0x82>
 8004bf2:	68ac      	ldr	r4, [r5, #8]
 8004bf4:	e7cd      	b.n	8004b92 <__swbuf_r+0x1e>
 8004bf6:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <__swbuf_r+0xa8>)
 8004bf8:	429c      	cmp	r4, r3
 8004bfa:	d1ca      	bne.n	8004b92 <__swbuf_r+0x1e>
 8004bfc:	68ec      	ldr	r4, [r5, #12]
 8004bfe:	e7c8      	b.n	8004b92 <__swbuf_r+0x1e>
 8004c00:	0021      	movs	r1, r4
 8004c02:	0028      	movs	r0, r5
 8004c04:	f000 f820 	bl	8004c48 <__swsetup_r>
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	d0ca      	beq.n	8004ba2 <__swbuf_r+0x2e>
 8004c0c:	2601      	movs	r6, #1
 8004c0e:	4276      	negs	r6, r6
 8004c10:	0030      	movs	r0, r6
 8004c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c14:	08005578 	.word	0x08005578
 8004c18:	08005598 	.word	0x08005598
 8004c1c:	08005558 	.word	0x08005558

08004c20 <_write_r>:
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	0005      	movs	r5, r0
 8004c24:	0008      	movs	r0, r1
 8004c26:	0011      	movs	r1, r2
 8004c28:	2200      	movs	r2, #0
 8004c2a:	4c06      	ldr	r4, [pc, #24]	; (8004c44 <_write_r+0x24>)
 8004c2c:	6022      	str	r2, [r4, #0]
 8004c2e:	001a      	movs	r2, r3
 8004c30:	f7ff fb47 	bl	80042c2 <_write>
 8004c34:	1c43      	adds	r3, r0, #1
 8004c36:	d103      	bne.n	8004c40 <_write_r+0x20>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d000      	beq.n	8004c40 <_write_r+0x20>
 8004c3e:	602b      	str	r3, [r5, #0]
 8004c40:	bd70      	pop	{r4, r5, r6, pc}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	200001cc 	.word	0x200001cc

08004c48 <__swsetup_r>:
 8004c48:	4b36      	ldr	r3, [pc, #216]	; (8004d24 <__swsetup_r+0xdc>)
 8004c4a:	b570      	push	{r4, r5, r6, lr}
 8004c4c:	681d      	ldr	r5, [r3, #0]
 8004c4e:	0006      	movs	r6, r0
 8004c50:	000c      	movs	r4, r1
 8004c52:	2d00      	cmp	r5, #0
 8004c54:	d005      	beq.n	8004c62 <__swsetup_r+0x1a>
 8004c56:	69ab      	ldr	r3, [r5, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d102      	bne.n	8004c62 <__swsetup_r+0x1a>
 8004c5c:	0028      	movs	r0, r5
 8004c5e:	f7ff fd3f 	bl	80046e0 <__sinit>
 8004c62:	4b31      	ldr	r3, [pc, #196]	; (8004d28 <__swsetup_r+0xe0>)
 8004c64:	429c      	cmp	r4, r3
 8004c66:	d10f      	bne.n	8004c88 <__swsetup_r+0x40>
 8004c68:	686c      	ldr	r4, [r5, #4]
 8004c6a:	230c      	movs	r3, #12
 8004c6c:	5ee2      	ldrsh	r2, [r4, r3]
 8004c6e:	b293      	uxth	r3, r2
 8004c70:	0719      	lsls	r1, r3, #28
 8004c72:	d42d      	bmi.n	8004cd0 <__swsetup_r+0x88>
 8004c74:	06d9      	lsls	r1, r3, #27
 8004c76:	d411      	bmi.n	8004c9c <__swsetup_r+0x54>
 8004c78:	2309      	movs	r3, #9
 8004c7a:	2001      	movs	r0, #1
 8004c7c:	6033      	str	r3, [r6, #0]
 8004c7e:	3337      	adds	r3, #55	; 0x37
 8004c80:	4313      	orrs	r3, r2
 8004c82:	81a3      	strh	r3, [r4, #12]
 8004c84:	4240      	negs	r0, r0
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
 8004c88:	4b28      	ldr	r3, [pc, #160]	; (8004d2c <__swsetup_r+0xe4>)
 8004c8a:	429c      	cmp	r4, r3
 8004c8c:	d101      	bne.n	8004c92 <__swsetup_r+0x4a>
 8004c8e:	68ac      	ldr	r4, [r5, #8]
 8004c90:	e7eb      	b.n	8004c6a <__swsetup_r+0x22>
 8004c92:	4b27      	ldr	r3, [pc, #156]	; (8004d30 <__swsetup_r+0xe8>)
 8004c94:	429c      	cmp	r4, r3
 8004c96:	d1e8      	bne.n	8004c6a <__swsetup_r+0x22>
 8004c98:	68ec      	ldr	r4, [r5, #12]
 8004c9a:	e7e6      	b.n	8004c6a <__swsetup_r+0x22>
 8004c9c:	075b      	lsls	r3, r3, #29
 8004c9e:	d513      	bpl.n	8004cc8 <__swsetup_r+0x80>
 8004ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ca2:	2900      	cmp	r1, #0
 8004ca4:	d008      	beq.n	8004cb8 <__swsetup_r+0x70>
 8004ca6:	0023      	movs	r3, r4
 8004ca8:	3344      	adds	r3, #68	; 0x44
 8004caa:	4299      	cmp	r1, r3
 8004cac:	d002      	beq.n	8004cb4 <__swsetup_r+0x6c>
 8004cae:	0030      	movs	r0, r6
 8004cb0:	f7ff fdd6 	bl	8004860 <_free_r>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	6363      	str	r3, [r4, #52]	; 0x34
 8004cb8:	2224      	movs	r2, #36	; 0x24
 8004cba:	89a3      	ldrh	r3, [r4, #12]
 8004cbc:	4393      	bics	r3, r2
 8004cbe:	81a3      	strh	r3, [r4, #12]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	6063      	str	r3, [r4, #4]
 8004cc4:	6923      	ldr	r3, [r4, #16]
 8004cc6:	6023      	str	r3, [r4, #0]
 8004cc8:	2308      	movs	r3, #8
 8004cca:	89a2      	ldrh	r2, [r4, #12]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	81a3      	strh	r3, [r4, #12]
 8004cd0:	6923      	ldr	r3, [r4, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10b      	bne.n	8004cee <__swsetup_r+0xa6>
 8004cd6:	21a0      	movs	r1, #160	; 0xa0
 8004cd8:	2280      	movs	r2, #128	; 0x80
 8004cda:	89a3      	ldrh	r3, [r4, #12]
 8004cdc:	0089      	lsls	r1, r1, #2
 8004cde:	0092      	lsls	r2, r2, #2
 8004ce0:	400b      	ands	r3, r1
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d003      	beq.n	8004cee <__swsetup_r+0xa6>
 8004ce6:	0021      	movs	r1, r4
 8004ce8:	0030      	movs	r0, r6
 8004cea:	f000 f871 	bl	8004dd0 <__smakebuf_r>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	89a2      	ldrh	r2, [r4, #12]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d011      	beq.n	8004d1a <__swsetup_r+0xd2>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60a3      	str	r3, [r4, #8]
 8004cfa:	6963      	ldr	r3, [r4, #20]
 8004cfc:	425b      	negs	r3, r3
 8004cfe:	61a3      	str	r3, [r4, #24]
 8004d00:	2000      	movs	r0, #0
 8004d02:	6923      	ldr	r3, [r4, #16]
 8004d04:	4283      	cmp	r3, r0
 8004d06:	d1be      	bne.n	8004c86 <__swsetup_r+0x3e>
 8004d08:	230c      	movs	r3, #12
 8004d0a:	5ee2      	ldrsh	r2, [r4, r3]
 8004d0c:	0613      	lsls	r3, r2, #24
 8004d0e:	d5ba      	bpl.n	8004c86 <__swsetup_r+0x3e>
 8004d10:	2340      	movs	r3, #64	; 0x40
 8004d12:	4313      	orrs	r3, r2
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	3801      	subs	r0, #1
 8004d18:	e7b5      	b.n	8004c86 <__swsetup_r+0x3e>
 8004d1a:	0792      	lsls	r2, r2, #30
 8004d1c:	d400      	bmi.n	8004d20 <__swsetup_r+0xd8>
 8004d1e:	6963      	ldr	r3, [r4, #20]
 8004d20:	60a3      	str	r3, [r4, #8]
 8004d22:	e7ed      	b.n	8004d00 <__swsetup_r+0xb8>
 8004d24:	20000008 	.word	0x20000008
 8004d28:	08005578 	.word	0x08005578
 8004d2c:	08005598 	.word	0x08005598
 8004d30:	08005558 	.word	0x08005558

08004d34 <_close_r>:
 8004d34:	2300      	movs	r3, #0
 8004d36:	b570      	push	{r4, r5, r6, lr}
 8004d38:	4c06      	ldr	r4, [pc, #24]	; (8004d54 <_close_r+0x20>)
 8004d3a:	0005      	movs	r5, r0
 8004d3c:	0008      	movs	r0, r1
 8004d3e:	6023      	str	r3, [r4, #0]
 8004d40:	f7ff fadb 	bl	80042fa <_close>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d103      	bne.n	8004d50 <_close_r+0x1c>
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d000      	beq.n	8004d50 <_close_r+0x1c>
 8004d4e:	602b      	str	r3, [r5, #0]
 8004d50:	bd70      	pop	{r4, r5, r6, pc}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	200001cc 	.word	0x200001cc

08004d58 <_lseek_r>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	0005      	movs	r5, r0
 8004d5c:	0008      	movs	r0, r1
 8004d5e:	0011      	movs	r1, r2
 8004d60:	2200      	movs	r2, #0
 8004d62:	4c06      	ldr	r4, [pc, #24]	; (8004d7c <_lseek_r+0x24>)
 8004d64:	6022      	str	r2, [r4, #0]
 8004d66:	001a      	movs	r2, r3
 8004d68:	f7ff fae8 	bl	800433c <_lseek>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d103      	bne.n	8004d78 <_lseek_r+0x20>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d000      	beq.n	8004d78 <_lseek_r+0x20>
 8004d76:	602b      	str	r3, [r5, #0]
 8004d78:	bd70      	pop	{r4, r5, r6, pc}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	200001cc 	.word	0x200001cc

08004d80 <__swhatbuf_r>:
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	000e      	movs	r6, r1
 8004d84:	001d      	movs	r5, r3
 8004d86:	230e      	movs	r3, #14
 8004d88:	5ec9      	ldrsh	r1, [r1, r3]
 8004d8a:	b096      	sub	sp, #88	; 0x58
 8004d8c:	0014      	movs	r4, r2
 8004d8e:	2900      	cmp	r1, #0
 8004d90:	da07      	bge.n	8004da2 <__swhatbuf_r+0x22>
 8004d92:	2300      	movs	r3, #0
 8004d94:	602b      	str	r3, [r5, #0]
 8004d96:	89b3      	ldrh	r3, [r6, #12]
 8004d98:	061b      	lsls	r3, r3, #24
 8004d9a:	d411      	bmi.n	8004dc0 <__swhatbuf_r+0x40>
 8004d9c:	2380      	movs	r3, #128	; 0x80
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	e00f      	b.n	8004dc2 <__swhatbuf_r+0x42>
 8004da2:	466a      	mov	r2, sp
 8004da4:	f000 fb22 	bl	80053ec <_fstat_r>
 8004da8:	2800      	cmp	r0, #0
 8004daa:	dbf2      	blt.n	8004d92 <__swhatbuf_r+0x12>
 8004dac:	22f0      	movs	r2, #240	; 0xf0
 8004dae:	9b01      	ldr	r3, [sp, #4]
 8004db0:	0212      	lsls	r2, r2, #8
 8004db2:	4013      	ands	r3, r2
 8004db4:	4a05      	ldr	r2, [pc, #20]	; (8004dcc <__swhatbuf_r+0x4c>)
 8004db6:	189b      	adds	r3, r3, r2
 8004db8:	425a      	negs	r2, r3
 8004dba:	4153      	adcs	r3, r2
 8004dbc:	602b      	str	r3, [r5, #0]
 8004dbe:	e7ed      	b.n	8004d9c <__swhatbuf_r+0x1c>
 8004dc0:	2340      	movs	r3, #64	; 0x40
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	b016      	add	sp, #88	; 0x58
 8004dc8:	bd70      	pop	{r4, r5, r6, pc}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	ffffe000 	.word	0xffffe000

08004dd0 <__smakebuf_r>:
 8004dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dd2:	2602      	movs	r6, #2
 8004dd4:	898b      	ldrh	r3, [r1, #12]
 8004dd6:	0005      	movs	r5, r0
 8004dd8:	000c      	movs	r4, r1
 8004dda:	4233      	tst	r3, r6
 8004ddc:	d006      	beq.n	8004dec <__smakebuf_r+0x1c>
 8004dde:	0023      	movs	r3, r4
 8004de0:	3347      	adds	r3, #71	; 0x47
 8004de2:	6023      	str	r3, [r4, #0]
 8004de4:	6123      	str	r3, [r4, #16]
 8004de6:	2301      	movs	r3, #1
 8004de8:	6163      	str	r3, [r4, #20]
 8004dea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004dec:	ab01      	add	r3, sp, #4
 8004dee:	466a      	mov	r2, sp
 8004df0:	f7ff ffc6 	bl	8004d80 <__swhatbuf_r>
 8004df4:	9900      	ldr	r1, [sp, #0]
 8004df6:	0007      	movs	r7, r0
 8004df8:	0028      	movs	r0, r5
 8004dfa:	f7ff fd7b 	bl	80048f4 <_malloc_r>
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	d108      	bne.n	8004e14 <__smakebuf_r+0x44>
 8004e02:	220c      	movs	r2, #12
 8004e04:	5ea3      	ldrsh	r3, [r4, r2]
 8004e06:	059a      	lsls	r2, r3, #22
 8004e08:	d4ef      	bmi.n	8004dea <__smakebuf_r+0x1a>
 8004e0a:	2203      	movs	r2, #3
 8004e0c:	4393      	bics	r3, r2
 8004e0e:	431e      	orrs	r6, r3
 8004e10:	81a6      	strh	r6, [r4, #12]
 8004e12:	e7e4      	b.n	8004dde <__smakebuf_r+0xe>
 8004e14:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <__smakebuf_r+0x84>)
 8004e16:	62ab      	str	r3, [r5, #40]	; 0x28
 8004e18:	2380      	movs	r3, #128	; 0x80
 8004e1a:	89a2      	ldrh	r2, [r4, #12]
 8004e1c:	6020      	str	r0, [r4, #0]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	81a3      	strh	r3, [r4, #12]
 8004e22:	9b00      	ldr	r3, [sp, #0]
 8004e24:	6120      	str	r0, [r4, #16]
 8004e26:	6163      	str	r3, [r4, #20]
 8004e28:	9b01      	ldr	r3, [sp, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00d      	beq.n	8004e4a <__smakebuf_r+0x7a>
 8004e2e:	230e      	movs	r3, #14
 8004e30:	5ee1      	ldrsh	r1, [r4, r3]
 8004e32:	0028      	movs	r0, r5
 8004e34:	f000 faec 	bl	8005410 <_isatty_r>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d006      	beq.n	8004e4a <__smakebuf_r+0x7a>
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	89a3      	ldrh	r3, [r4, #12]
 8004e40:	4393      	bics	r3, r2
 8004e42:	001a      	movs	r2, r3
 8004e44:	2301      	movs	r3, #1
 8004e46:	4313      	orrs	r3, r2
 8004e48:	81a3      	strh	r3, [r4, #12]
 8004e4a:	89a0      	ldrh	r0, [r4, #12]
 8004e4c:	4338      	orrs	r0, r7
 8004e4e:	81a0      	strh	r0, [r4, #12]
 8004e50:	e7cb      	b.n	8004dea <__smakebuf_r+0x1a>
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	080046a5 	.word	0x080046a5

08004e58 <__malloc_lock>:
 8004e58:	4770      	bx	lr

08004e5a <__malloc_unlock>:
 8004e5a:	4770      	bx	lr

08004e5c <__sfputc_r>:
 8004e5c:	6893      	ldr	r3, [r2, #8]
 8004e5e:	b510      	push	{r4, lr}
 8004e60:	3b01      	subs	r3, #1
 8004e62:	6093      	str	r3, [r2, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	da04      	bge.n	8004e72 <__sfputc_r+0x16>
 8004e68:	6994      	ldr	r4, [r2, #24]
 8004e6a:	42a3      	cmp	r3, r4
 8004e6c:	db07      	blt.n	8004e7e <__sfputc_r+0x22>
 8004e6e:	290a      	cmp	r1, #10
 8004e70:	d005      	beq.n	8004e7e <__sfputc_r+0x22>
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	1c58      	adds	r0, r3, #1
 8004e76:	6010      	str	r0, [r2, #0]
 8004e78:	7019      	strb	r1, [r3, #0]
 8004e7a:	0008      	movs	r0, r1
 8004e7c:	bd10      	pop	{r4, pc}
 8004e7e:	f7ff fe79 	bl	8004b74 <__swbuf_r>
 8004e82:	0001      	movs	r1, r0
 8004e84:	e7f9      	b.n	8004e7a <__sfputc_r+0x1e>

08004e86 <__sfputs_r>:
 8004e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e88:	0006      	movs	r6, r0
 8004e8a:	000f      	movs	r7, r1
 8004e8c:	0014      	movs	r4, r2
 8004e8e:	18d5      	adds	r5, r2, r3
 8004e90:	42ac      	cmp	r4, r5
 8004e92:	d101      	bne.n	8004e98 <__sfputs_r+0x12>
 8004e94:	2000      	movs	r0, #0
 8004e96:	e007      	b.n	8004ea8 <__sfputs_r+0x22>
 8004e98:	7821      	ldrb	r1, [r4, #0]
 8004e9a:	003a      	movs	r2, r7
 8004e9c:	0030      	movs	r0, r6
 8004e9e:	f7ff ffdd 	bl	8004e5c <__sfputc_r>
 8004ea2:	3401      	adds	r4, #1
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d1f3      	bne.n	8004e90 <__sfputs_r+0xa>
 8004ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004eac <_vfiprintf_r>:
 8004eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eae:	b0a1      	sub	sp, #132	; 0x84
 8004eb0:	9003      	str	r0, [sp, #12]
 8004eb2:	000f      	movs	r7, r1
 8004eb4:	0016      	movs	r6, r2
 8004eb6:	001d      	movs	r5, r3
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	d005      	beq.n	8004ec8 <_vfiprintf_r+0x1c>
 8004ebc:	6983      	ldr	r3, [r0, #24]
 8004ebe:	9305      	str	r3, [sp, #20]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <_vfiprintf_r+0x1c>
 8004ec4:	f7ff fc0c 	bl	80046e0 <__sinit>
 8004ec8:	4b7b      	ldr	r3, [pc, #492]	; (80050b8 <_vfiprintf_r+0x20c>)
 8004eca:	429f      	cmp	r7, r3
 8004ecc:	d15c      	bne.n	8004f88 <_vfiprintf_r+0xdc>
 8004ece:	9b03      	ldr	r3, [sp, #12]
 8004ed0:	685f      	ldr	r7, [r3, #4]
 8004ed2:	89bb      	ldrh	r3, [r7, #12]
 8004ed4:	071b      	lsls	r3, r3, #28
 8004ed6:	d563      	bpl.n	8004fa0 <_vfiprintf_r+0xf4>
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d060      	beq.n	8004fa0 <_vfiprintf_r+0xf4>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	ac08      	add	r4, sp, #32
 8004ee2:	6163      	str	r3, [r4, #20]
 8004ee4:	3320      	adds	r3, #32
 8004ee6:	7663      	strb	r3, [r4, #25]
 8004ee8:	3310      	adds	r3, #16
 8004eea:	76a3      	strb	r3, [r4, #26]
 8004eec:	9507      	str	r5, [sp, #28]
 8004eee:	0035      	movs	r5, r6
 8004ef0:	782b      	ldrb	r3, [r5, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <_vfiprintf_r+0x4e>
 8004ef6:	2b25      	cmp	r3, #37	; 0x25
 8004ef8:	d15c      	bne.n	8004fb4 <_vfiprintf_r+0x108>
 8004efa:	1bab      	subs	r3, r5, r6
 8004efc:	9305      	str	r3, [sp, #20]
 8004efe:	d00c      	beq.n	8004f1a <_vfiprintf_r+0x6e>
 8004f00:	0032      	movs	r2, r6
 8004f02:	0039      	movs	r1, r7
 8004f04:	9803      	ldr	r0, [sp, #12]
 8004f06:	f7ff ffbe 	bl	8004e86 <__sfputs_r>
 8004f0a:	1c43      	adds	r3, r0, #1
 8004f0c:	d100      	bne.n	8004f10 <_vfiprintf_r+0x64>
 8004f0e:	e0c4      	b.n	800509a <_vfiprintf_r+0x1ee>
 8004f10:	6962      	ldr	r2, [r4, #20]
 8004f12:	9b05      	ldr	r3, [sp, #20]
 8004f14:	4694      	mov	ip, r2
 8004f16:	4463      	add	r3, ip
 8004f18:	6163      	str	r3, [r4, #20]
 8004f1a:	782b      	ldrb	r3, [r5, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d100      	bne.n	8004f22 <_vfiprintf_r+0x76>
 8004f20:	e0bb      	b.n	800509a <_vfiprintf_r+0x1ee>
 8004f22:	2201      	movs	r2, #1
 8004f24:	2300      	movs	r3, #0
 8004f26:	4252      	negs	r2, r2
 8004f28:	6062      	str	r2, [r4, #4]
 8004f2a:	a904      	add	r1, sp, #16
 8004f2c:	3254      	adds	r2, #84	; 0x54
 8004f2e:	1852      	adds	r2, r2, r1
 8004f30:	1c6e      	adds	r6, r5, #1
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	60e3      	str	r3, [r4, #12]
 8004f36:	60a3      	str	r3, [r4, #8]
 8004f38:	7013      	strb	r3, [r2, #0]
 8004f3a:	65a3      	str	r3, [r4, #88]	; 0x58
 8004f3c:	7831      	ldrb	r1, [r6, #0]
 8004f3e:	2205      	movs	r2, #5
 8004f40:	485e      	ldr	r0, [pc, #376]	; (80050bc <_vfiprintf_r+0x210>)
 8004f42:	f000 fa77 	bl	8005434 <memchr>
 8004f46:	1c75      	adds	r5, r6, #1
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d135      	bne.n	8004fb8 <_vfiprintf_r+0x10c>
 8004f4c:	6822      	ldr	r2, [r4, #0]
 8004f4e:	06d3      	lsls	r3, r2, #27
 8004f50:	d504      	bpl.n	8004f5c <_vfiprintf_r+0xb0>
 8004f52:	2353      	movs	r3, #83	; 0x53
 8004f54:	a904      	add	r1, sp, #16
 8004f56:	185b      	adds	r3, r3, r1
 8004f58:	2120      	movs	r1, #32
 8004f5a:	7019      	strb	r1, [r3, #0]
 8004f5c:	0713      	lsls	r3, r2, #28
 8004f5e:	d504      	bpl.n	8004f6a <_vfiprintf_r+0xbe>
 8004f60:	2353      	movs	r3, #83	; 0x53
 8004f62:	a904      	add	r1, sp, #16
 8004f64:	185b      	adds	r3, r3, r1
 8004f66:	212b      	movs	r1, #43	; 0x2b
 8004f68:	7019      	strb	r1, [r3, #0]
 8004f6a:	7833      	ldrb	r3, [r6, #0]
 8004f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f6e:	d02c      	beq.n	8004fca <_vfiprintf_r+0x11e>
 8004f70:	0035      	movs	r5, r6
 8004f72:	2100      	movs	r1, #0
 8004f74:	200a      	movs	r0, #10
 8004f76:	68e3      	ldr	r3, [r4, #12]
 8004f78:	782a      	ldrb	r2, [r5, #0]
 8004f7a:	1c6e      	adds	r6, r5, #1
 8004f7c:	3a30      	subs	r2, #48	; 0x30
 8004f7e:	2a09      	cmp	r2, #9
 8004f80:	d964      	bls.n	800504c <_vfiprintf_r+0x1a0>
 8004f82:	2900      	cmp	r1, #0
 8004f84:	d02e      	beq.n	8004fe4 <_vfiprintf_r+0x138>
 8004f86:	e026      	b.n	8004fd6 <_vfiprintf_r+0x12a>
 8004f88:	4b4d      	ldr	r3, [pc, #308]	; (80050c0 <_vfiprintf_r+0x214>)
 8004f8a:	429f      	cmp	r7, r3
 8004f8c:	d102      	bne.n	8004f94 <_vfiprintf_r+0xe8>
 8004f8e:	9b03      	ldr	r3, [sp, #12]
 8004f90:	689f      	ldr	r7, [r3, #8]
 8004f92:	e79e      	b.n	8004ed2 <_vfiprintf_r+0x26>
 8004f94:	4b4b      	ldr	r3, [pc, #300]	; (80050c4 <_vfiprintf_r+0x218>)
 8004f96:	429f      	cmp	r7, r3
 8004f98:	d19b      	bne.n	8004ed2 <_vfiprintf_r+0x26>
 8004f9a:	9b03      	ldr	r3, [sp, #12]
 8004f9c:	68df      	ldr	r7, [r3, #12]
 8004f9e:	e798      	b.n	8004ed2 <_vfiprintf_r+0x26>
 8004fa0:	0039      	movs	r1, r7
 8004fa2:	9803      	ldr	r0, [sp, #12]
 8004fa4:	f7ff fe50 	bl	8004c48 <__swsetup_r>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	d098      	beq.n	8004ede <_vfiprintf_r+0x32>
 8004fac:	2001      	movs	r0, #1
 8004fae:	4240      	negs	r0, r0
 8004fb0:	b021      	add	sp, #132	; 0x84
 8004fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb4:	3501      	adds	r5, #1
 8004fb6:	e79b      	b.n	8004ef0 <_vfiprintf_r+0x44>
 8004fb8:	4b40      	ldr	r3, [pc, #256]	; (80050bc <_vfiprintf_r+0x210>)
 8004fba:	6822      	ldr	r2, [r4, #0]
 8004fbc:	1ac0      	subs	r0, r0, r3
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	4083      	lsls	r3, r0
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	002e      	movs	r6, r5
 8004fc8:	e7b8      	b.n	8004f3c <_vfiprintf_r+0x90>
 8004fca:	9b07      	ldr	r3, [sp, #28]
 8004fcc:	1d19      	adds	r1, r3, #4
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	9107      	str	r1, [sp, #28]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	db01      	blt.n	8004fda <_vfiprintf_r+0x12e>
 8004fd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fd8:	e004      	b.n	8004fe4 <_vfiprintf_r+0x138>
 8004fda:	425b      	negs	r3, r3
 8004fdc:	60e3      	str	r3, [r4, #12]
 8004fde:	2302      	movs	r3, #2
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	6023      	str	r3, [r4, #0]
 8004fe4:	782b      	ldrb	r3, [r5, #0]
 8004fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8004fe8:	d10a      	bne.n	8005000 <_vfiprintf_r+0x154>
 8004fea:	786b      	ldrb	r3, [r5, #1]
 8004fec:	2b2a      	cmp	r3, #42	; 0x2a
 8004fee:	d135      	bne.n	800505c <_vfiprintf_r+0x1b0>
 8004ff0:	9b07      	ldr	r3, [sp, #28]
 8004ff2:	3502      	adds	r5, #2
 8004ff4:	1d1a      	adds	r2, r3, #4
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	9207      	str	r2, [sp, #28]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	db2b      	blt.n	8005056 <_vfiprintf_r+0x1aa>
 8004ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8005000:	4e31      	ldr	r6, [pc, #196]	; (80050c8 <_vfiprintf_r+0x21c>)
 8005002:	7829      	ldrb	r1, [r5, #0]
 8005004:	2203      	movs	r2, #3
 8005006:	0030      	movs	r0, r6
 8005008:	f000 fa14 	bl	8005434 <memchr>
 800500c:	2800      	cmp	r0, #0
 800500e:	d006      	beq.n	800501e <_vfiprintf_r+0x172>
 8005010:	2340      	movs	r3, #64	; 0x40
 8005012:	1b80      	subs	r0, r0, r6
 8005014:	4083      	lsls	r3, r0
 8005016:	6822      	ldr	r2, [r4, #0]
 8005018:	3501      	adds	r5, #1
 800501a:	4313      	orrs	r3, r2
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	7829      	ldrb	r1, [r5, #0]
 8005020:	2206      	movs	r2, #6
 8005022:	482a      	ldr	r0, [pc, #168]	; (80050cc <_vfiprintf_r+0x220>)
 8005024:	1c6e      	adds	r6, r5, #1
 8005026:	7621      	strb	r1, [r4, #24]
 8005028:	f000 fa04 	bl	8005434 <memchr>
 800502c:	2800      	cmp	r0, #0
 800502e:	d03a      	beq.n	80050a6 <_vfiprintf_r+0x1fa>
 8005030:	4b27      	ldr	r3, [pc, #156]	; (80050d0 <_vfiprintf_r+0x224>)
 8005032:	2b00      	cmp	r3, #0
 8005034:	d125      	bne.n	8005082 <_vfiprintf_r+0x1d6>
 8005036:	2207      	movs	r2, #7
 8005038:	9b07      	ldr	r3, [sp, #28]
 800503a:	3307      	adds	r3, #7
 800503c:	4393      	bics	r3, r2
 800503e:	3308      	adds	r3, #8
 8005040:	9307      	str	r3, [sp, #28]
 8005042:	6963      	ldr	r3, [r4, #20]
 8005044:	9a04      	ldr	r2, [sp, #16]
 8005046:	189b      	adds	r3, r3, r2
 8005048:	6163      	str	r3, [r4, #20]
 800504a:	e750      	b.n	8004eee <_vfiprintf_r+0x42>
 800504c:	4343      	muls	r3, r0
 800504e:	2101      	movs	r1, #1
 8005050:	189b      	adds	r3, r3, r2
 8005052:	0035      	movs	r5, r6
 8005054:	e790      	b.n	8004f78 <_vfiprintf_r+0xcc>
 8005056:	2301      	movs	r3, #1
 8005058:	425b      	negs	r3, r3
 800505a:	e7d0      	b.n	8004ffe <_vfiprintf_r+0x152>
 800505c:	2300      	movs	r3, #0
 800505e:	200a      	movs	r0, #10
 8005060:	001a      	movs	r2, r3
 8005062:	3501      	adds	r5, #1
 8005064:	6063      	str	r3, [r4, #4]
 8005066:	7829      	ldrb	r1, [r5, #0]
 8005068:	1c6e      	adds	r6, r5, #1
 800506a:	3930      	subs	r1, #48	; 0x30
 800506c:	2909      	cmp	r1, #9
 800506e:	d903      	bls.n	8005078 <_vfiprintf_r+0x1cc>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0c5      	beq.n	8005000 <_vfiprintf_r+0x154>
 8005074:	9209      	str	r2, [sp, #36]	; 0x24
 8005076:	e7c3      	b.n	8005000 <_vfiprintf_r+0x154>
 8005078:	4342      	muls	r2, r0
 800507a:	2301      	movs	r3, #1
 800507c:	1852      	adds	r2, r2, r1
 800507e:	0035      	movs	r5, r6
 8005080:	e7f1      	b.n	8005066 <_vfiprintf_r+0x1ba>
 8005082:	ab07      	add	r3, sp, #28
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	003a      	movs	r2, r7
 8005088:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <_vfiprintf_r+0x228>)
 800508a:	0021      	movs	r1, r4
 800508c:	9803      	ldr	r0, [sp, #12]
 800508e:	e000      	b.n	8005092 <_vfiprintf_r+0x1e6>
 8005090:	bf00      	nop
 8005092:	9004      	str	r0, [sp, #16]
 8005094:	9b04      	ldr	r3, [sp, #16]
 8005096:	3301      	adds	r3, #1
 8005098:	d1d3      	bne.n	8005042 <_vfiprintf_r+0x196>
 800509a:	89bb      	ldrh	r3, [r7, #12]
 800509c:	065b      	lsls	r3, r3, #25
 800509e:	d500      	bpl.n	80050a2 <_vfiprintf_r+0x1f6>
 80050a0:	e784      	b.n	8004fac <_vfiprintf_r+0x100>
 80050a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80050a4:	e784      	b.n	8004fb0 <_vfiprintf_r+0x104>
 80050a6:	ab07      	add	r3, sp, #28
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	003a      	movs	r2, r7
 80050ac:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <_vfiprintf_r+0x228>)
 80050ae:	0021      	movs	r1, r4
 80050b0:	9803      	ldr	r0, [sp, #12]
 80050b2:	f000 f87f 	bl	80051b4 <_printf_i>
 80050b6:	e7ec      	b.n	8005092 <_vfiprintf_r+0x1e6>
 80050b8:	08005578 	.word	0x08005578
 80050bc:	080055bc 	.word	0x080055bc
 80050c0:	08005598 	.word	0x08005598
 80050c4:	08005558 	.word	0x08005558
 80050c8:	080055c2 	.word	0x080055c2
 80050cc:	080055c6 	.word	0x080055c6
 80050d0:	00000000 	.word	0x00000000
 80050d4:	08004e87 	.word	0x08004e87

080050d8 <_printf_common>:
 80050d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050da:	0015      	movs	r5, r2
 80050dc:	9301      	str	r3, [sp, #4]
 80050de:	688a      	ldr	r2, [r1, #8]
 80050e0:	690b      	ldr	r3, [r1, #16]
 80050e2:	9000      	str	r0, [sp, #0]
 80050e4:	000c      	movs	r4, r1
 80050e6:	4293      	cmp	r3, r2
 80050e8:	da00      	bge.n	80050ec <_printf_common+0x14>
 80050ea:	0013      	movs	r3, r2
 80050ec:	0022      	movs	r2, r4
 80050ee:	602b      	str	r3, [r5, #0]
 80050f0:	3243      	adds	r2, #67	; 0x43
 80050f2:	7812      	ldrb	r2, [r2, #0]
 80050f4:	2a00      	cmp	r2, #0
 80050f6:	d001      	beq.n	80050fc <_printf_common+0x24>
 80050f8:	3301      	adds	r3, #1
 80050fa:	602b      	str	r3, [r5, #0]
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	069b      	lsls	r3, r3, #26
 8005100:	d502      	bpl.n	8005108 <_printf_common+0x30>
 8005102:	682b      	ldr	r3, [r5, #0]
 8005104:	3302      	adds	r3, #2
 8005106:	602b      	str	r3, [r5, #0]
 8005108:	2706      	movs	r7, #6
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	401f      	ands	r7, r3
 800510e:	d027      	beq.n	8005160 <_printf_common+0x88>
 8005110:	0023      	movs	r3, r4
 8005112:	3343      	adds	r3, #67	; 0x43
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	1e5a      	subs	r2, r3, #1
 8005118:	4193      	sbcs	r3, r2
 800511a:	6822      	ldr	r2, [r4, #0]
 800511c:	0692      	lsls	r2, r2, #26
 800511e:	d430      	bmi.n	8005182 <_printf_common+0xaa>
 8005120:	0022      	movs	r2, r4
 8005122:	9901      	ldr	r1, [sp, #4]
 8005124:	3243      	adds	r2, #67	; 0x43
 8005126:	9800      	ldr	r0, [sp, #0]
 8005128:	9e08      	ldr	r6, [sp, #32]
 800512a:	47b0      	blx	r6
 800512c:	1c43      	adds	r3, r0, #1
 800512e:	d025      	beq.n	800517c <_printf_common+0xa4>
 8005130:	2306      	movs	r3, #6
 8005132:	6820      	ldr	r0, [r4, #0]
 8005134:	682a      	ldr	r2, [r5, #0]
 8005136:	68e1      	ldr	r1, [r4, #12]
 8005138:	4003      	ands	r3, r0
 800513a:	2500      	movs	r5, #0
 800513c:	2b04      	cmp	r3, #4
 800513e:	d103      	bne.n	8005148 <_printf_common+0x70>
 8005140:	1a8d      	subs	r5, r1, r2
 8005142:	43eb      	mvns	r3, r5
 8005144:	17db      	asrs	r3, r3, #31
 8005146:	401d      	ands	r5, r3
 8005148:	68a3      	ldr	r3, [r4, #8]
 800514a:	6922      	ldr	r2, [r4, #16]
 800514c:	4293      	cmp	r3, r2
 800514e:	dd01      	ble.n	8005154 <_printf_common+0x7c>
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	18ed      	adds	r5, r5, r3
 8005154:	2700      	movs	r7, #0
 8005156:	42bd      	cmp	r5, r7
 8005158:	d120      	bne.n	800519c <_printf_common+0xc4>
 800515a:	2000      	movs	r0, #0
 800515c:	e010      	b.n	8005180 <_printf_common+0xa8>
 800515e:	3701      	adds	r7, #1
 8005160:	68e3      	ldr	r3, [r4, #12]
 8005162:	682a      	ldr	r2, [r5, #0]
 8005164:	1a9b      	subs	r3, r3, r2
 8005166:	42bb      	cmp	r3, r7
 8005168:	ddd2      	ble.n	8005110 <_printf_common+0x38>
 800516a:	0022      	movs	r2, r4
 800516c:	2301      	movs	r3, #1
 800516e:	3219      	adds	r2, #25
 8005170:	9901      	ldr	r1, [sp, #4]
 8005172:	9800      	ldr	r0, [sp, #0]
 8005174:	9e08      	ldr	r6, [sp, #32]
 8005176:	47b0      	blx	r6
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	d1f0      	bne.n	800515e <_printf_common+0x86>
 800517c:	2001      	movs	r0, #1
 800517e:	4240      	negs	r0, r0
 8005180:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005182:	2030      	movs	r0, #48	; 0x30
 8005184:	18e1      	adds	r1, r4, r3
 8005186:	3143      	adds	r1, #67	; 0x43
 8005188:	7008      	strb	r0, [r1, #0]
 800518a:	0021      	movs	r1, r4
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	3145      	adds	r1, #69	; 0x45
 8005190:	7809      	ldrb	r1, [r1, #0]
 8005192:	18a2      	adds	r2, r4, r2
 8005194:	3243      	adds	r2, #67	; 0x43
 8005196:	3302      	adds	r3, #2
 8005198:	7011      	strb	r1, [r2, #0]
 800519a:	e7c1      	b.n	8005120 <_printf_common+0x48>
 800519c:	0022      	movs	r2, r4
 800519e:	2301      	movs	r3, #1
 80051a0:	321a      	adds	r2, #26
 80051a2:	9901      	ldr	r1, [sp, #4]
 80051a4:	9800      	ldr	r0, [sp, #0]
 80051a6:	9e08      	ldr	r6, [sp, #32]
 80051a8:	47b0      	blx	r6
 80051aa:	1c43      	adds	r3, r0, #1
 80051ac:	d0e6      	beq.n	800517c <_printf_common+0xa4>
 80051ae:	3701      	adds	r7, #1
 80051b0:	e7d1      	b.n	8005156 <_printf_common+0x7e>
	...

080051b4 <_printf_i>:
 80051b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051b6:	b089      	sub	sp, #36	; 0x24
 80051b8:	9204      	str	r2, [sp, #16]
 80051ba:	000a      	movs	r2, r1
 80051bc:	3243      	adds	r2, #67	; 0x43
 80051be:	9305      	str	r3, [sp, #20]
 80051c0:	9003      	str	r0, [sp, #12]
 80051c2:	9202      	str	r2, [sp, #8]
 80051c4:	7e0a      	ldrb	r2, [r1, #24]
 80051c6:	000c      	movs	r4, r1
 80051c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051ca:	2a6e      	cmp	r2, #110	; 0x6e
 80051cc:	d100      	bne.n	80051d0 <_printf_i+0x1c>
 80051ce:	e086      	b.n	80052de <_printf_i+0x12a>
 80051d0:	d81f      	bhi.n	8005212 <_printf_i+0x5e>
 80051d2:	2a63      	cmp	r2, #99	; 0x63
 80051d4:	d033      	beq.n	800523e <_printf_i+0x8a>
 80051d6:	d808      	bhi.n	80051ea <_printf_i+0x36>
 80051d8:	2a00      	cmp	r2, #0
 80051da:	d100      	bne.n	80051de <_printf_i+0x2a>
 80051dc:	e08c      	b.n	80052f8 <_printf_i+0x144>
 80051de:	2a58      	cmp	r2, #88	; 0x58
 80051e0:	d04d      	beq.n	800527e <_printf_i+0xca>
 80051e2:	0025      	movs	r5, r4
 80051e4:	3542      	adds	r5, #66	; 0x42
 80051e6:	702a      	strb	r2, [r5, #0]
 80051e8:	e030      	b.n	800524c <_printf_i+0x98>
 80051ea:	2a64      	cmp	r2, #100	; 0x64
 80051ec:	d001      	beq.n	80051f2 <_printf_i+0x3e>
 80051ee:	2a69      	cmp	r2, #105	; 0x69
 80051f0:	d1f7      	bne.n	80051e2 <_printf_i+0x2e>
 80051f2:	6819      	ldr	r1, [r3, #0]
 80051f4:	6825      	ldr	r5, [r4, #0]
 80051f6:	1d0a      	adds	r2, r1, #4
 80051f8:	0628      	lsls	r0, r5, #24
 80051fa:	d529      	bpl.n	8005250 <_printf_i+0x9c>
 80051fc:	6808      	ldr	r0, [r1, #0]
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	2800      	cmp	r0, #0
 8005202:	da03      	bge.n	800520c <_printf_i+0x58>
 8005204:	232d      	movs	r3, #45	; 0x2d
 8005206:	9a02      	ldr	r2, [sp, #8]
 8005208:	4240      	negs	r0, r0
 800520a:	7013      	strb	r3, [r2, #0]
 800520c:	4e6b      	ldr	r6, [pc, #428]	; (80053bc <_printf_i+0x208>)
 800520e:	270a      	movs	r7, #10
 8005210:	e04f      	b.n	80052b2 <_printf_i+0xfe>
 8005212:	2a73      	cmp	r2, #115	; 0x73
 8005214:	d074      	beq.n	8005300 <_printf_i+0x14c>
 8005216:	d808      	bhi.n	800522a <_printf_i+0x76>
 8005218:	2a6f      	cmp	r2, #111	; 0x6f
 800521a:	d01f      	beq.n	800525c <_printf_i+0xa8>
 800521c:	2a70      	cmp	r2, #112	; 0x70
 800521e:	d1e0      	bne.n	80051e2 <_printf_i+0x2e>
 8005220:	2220      	movs	r2, #32
 8005222:	6809      	ldr	r1, [r1, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	6022      	str	r2, [r4, #0]
 8005228:	e003      	b.n	8005232 <_printf_i+0x7e>
 800522a:	2a75      	cmp	r2, #117	; 0x75
 800522c:	d016      	beq.n	800525c <_printf_i+0xa8>
 800522e:	2a78      	cmp	r2, #120	; 0x78
 8005230:	d1d7      	bne.n	80051e2 <_printf_i+0x2e>
 8005232:	0022      	movs	r2, r4
 8005234:	2178      	movs	r1, #120	; 0x78
 8005236:	3245      	adds	r2, #69	; 0x45
 8005238:	7011      	strb	r1, [r2, #0]
 800523a:	4e61      	ldr	r6, [pc, #388]	; (80053c0 <_printf_i+0x20c>)
 800523c:	e022      	b.n	8005284 <_printf_i+0xd0>
 800523e:	0025      	movs	r5, r4
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	3542      	adds	r5, #66	; 0x42
 8005244:	1d11      	adds	r1, r2, #4
 8005246:	6019      	str	r1, [r3, #0]
 8005248:	6813      	ldr	r3, [r2, #0]
 800524a:	702b      	strb	r3, [r5, #0]
 800524c:	2301      	movs	r3, #1
 800524e:	e065      	b.n	800531c <_printf_i+0x168>
 8005250:	6808      	ldr	r0, [r1, #0]
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	0669      	lsls	r1, r5, #25
 8005256:	d5d3      	bpl.n	8005200 <_printf_i+0x4c>
 8005258:	b200      	sxth	r0, r0
 800525a:	e7d1      	b.n	8005200 <_printf_i+0x4c>
 800525c:	6819      	ldr	r1, [r3, #0]
 800525e:	6825      	ldr	r5, [r4, #0]
 8005260:	1d08      	adds	r0, r1, #4
 8005262:	6018      	str	r0, [r3, #0]
 8005264:	6808      	ldr	r0, [r1, #0]
 8005266:	062e      	lsls	r6, r5, #24
 8005268:	d505      	bpl.n	8005276 <_printf_i+0xc2>
 800526a:	4e54      	ldr	r6, [pc, #336]	; (80053bc <_printf_i+0x208>)
 800526c:	2708      	movs	r7, #8
 800526e:	2a6f      	cmp	r2, #111	; 0x6f
 8005270:	d01b      	beq.n	80052aa <_printf_i+0xf6>
 8005272:	270a      	movs	r7, #10
 8005274:	e019      	b.n	80052aa <_printf_i+0xf6>
 8005276:	066d      	lsls	r5, r5, #25
 8005278:	d5f7      	bpl.n	800526a <_printf_i+0xb6>
 800527a:	b280      	uxth	r0, r0
 800527c:	e7f5      	b.n	800526a <_printf_i+0xb6>
 800527e:	3145      	adds	r1, #69	; 0x45
 8005280:	4e4e      	ldr	r6, [pc, #312]	; (80053bc <_printf_i+0x208>)
 8005282:	700a      	strb	r2, [r1, #0]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	6822      	ldr	r2, [r4, #0]
 8005288:	1d01      	adds	r1, r0, #4
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	6019      	str	r1, [r3, #0]
 800528e:	0615      	lsls	r5, r2, #24
 8005290:	d521      	bpl.n	80052d6 <_printf_i+0x122>
 8005292:	07d3      	lsls	r3, r2, #31
 8005294:	d502      	bpl.n	800529c <_printf_i+0xe8>
 8005296:	2320      	movs	r3, #32
 8005298:	431a      	orrs	r2, r3
 800529a:	6022      	str	r2, [r4, #0]
 800529c:	2710      	movs	r7, #16
 800529e:	2800      	cmp	r0, #0
 80052a0:	d103      	bne.n	80052aa <_printf_i+0xf6>
 80052a2:	2320      	movs	r3, #32
 80052a4:	6822      	ldr	r2, [r4, #0]
 80052a6:	439a      	bics	r2, r3
 80052a8:	6022      	str	r2, [r4, #0]
 80052aa:	0023      	movs	r3, r4
 80052ac:	2200      	movs	r2, #0
 80052ae:	3343      	adds	r3, #67	; 0x43
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	6863      	ldr	r3, [r4, #4]
 80052b4:	60a3      	str	r3, [r4, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	db58      	blt.n	800536c <_printf_i+0x1b8>
 80052ba:	2204      	movs	r2, #4
 80052bc:	6821      	ldr	r1, [r4, #0]
 80052be:	4391      	bics	r1, r2
 80052c0:	6021      	str	r1, [r4, #0]
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d154      	bne.n	8005370 <_printf_i+0x1bc>
 80052c6:	9d02      	ldr	r5, [sp, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d05a      	beq.n	8005382 <_printf_i+0x1ce>
 80052cc:	0025      	movs	r5, r4
 80052ce:	7833      	ldrb	r3, [r6, #0]
 80052d0:	3542      	adds	r5, #66	; 0x42
 80052d2:	702b      	strb	r3, [r5, #0]
 80052d4:	e055      	b.n	8005382 <_printf_i+0x1ce>
 80052d6:	0655      	lsls	r5, r2, #25
 80052d8:	d5db      	bpl.n	8005292 <_printf_i+0xde>
 80052da:	b280      	uxth	r0, r0
 80052dc:	e7d9      	b.n	8005292 <_printf_i+0xde>
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	680d      	ldr	r5, [r1, #0]
 80052e2:	1d10      	adds	r0, r2, #4
 80052e4:	6949      	ldr	r1, [r1, #20]
 80052e6:	6018      	str	r0, [r3, #0]
 80052e8:	6813      	ldr	r3, [r2, #0]
 80052ea:	062e      	lsls	r6, r5, #24
 80052ec:	d501      	bpl.n	80052f2 <_printf_i+0x13e>
 80052ee:	6019      	str	r1, [r3, #0]
 80052f0:	e002      	b.n	80052f8 <_printf_i+0x144>
 80052f2:	066d      	lsls	r5, r5, #25
 80052f4:	d5fb      	bpl.n	80052ee <_printf_i+0x13a>
 80052f6:	8019      	strh	r1, [r3, #0]
 80052f8:	2300      	movs	r3, #0
 80052fa:	9d02      	ldr	r5, [sp, #8]
 80052fc:	6123      	str	r3, [r4, #16]
 80052fe:	e04f      	b.n	80053a0 <_printf_i+0x1ec>
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	1d11      	adds	r1, r2, #4
 8005304:	6019      	str	r1, [r3, #0]
 8005306:	6815      	ldr	r5, [r2, #0]
 8005308:	2100      	movs	r1, #0
 800530a:	6862      	ldr	r2, [r4, #4]
 800530c:	0028      	movs	r0, r5
 800530e:	f000 f891 	bl	8005434 <memchr>
 8005312:	2800      	cmp	r0, #0
 8005314:	d001      	beq.n	800531a <_printf_i+0x166>
 8005316:	1b40      	subs	r0, r0, r5
 8005318:	6060      	str	r0, [r4, #4]
 800531a:	6863      	ldr	r3, [r4, #4]
 800531c:	6123      	str	r3, [r4, #16]
 800531e:	2300      	movs	r3, #0
 8005320:	9a02      	ldr	r2, [sp, #8]
 8005322:	7013      	strb	r3, [r2, #0]
 8005324:	e03c      	b.n	80053a0 <_printf_i+0x1ec>
 8005326:	6923      	ldr	r3, [r4, #16]
 8005328:	002a      	movs	r2, r5
 800532a:	9904      	ldr	r1, [sp, #16]
 800532c:	9803      	ldr	r0, [sp, #12]
 800532e:	9d05      	ldr	r5, [sp, #20]
 8005330:	47a8      	blx	r5
 8005332:	1c43      	adds	r3, r0, #1
 8005334:	d03e      	beq.n	80053b4 <_printf_i+0x200>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	079b      	lsls	r3, r3, #30
 800533a:	d415      	bmi.n	8005368 <_printf_i+0x1b4>
 800533c:	9b07      	ldr	r3, [sp, #28]
 800533e:	68e0      	ldr	r0, [r4, #12]
 8005340:	4298      	cmp	r0, r3
 8005342:	da39      	bge.n	80053b8 <_printf_i+0x204>
 8005344:	0018      	movs	r0, r3
 8005346:	e037      	b.n	80053b8 <_printf_i+0x204>
 8005348:	0022      	movs	r2, r4
 800534a:	2301      	movs	r3, #1
 800534c:	3219      	adds	r2, #25
 800534e:	9904      	ldr	r1, [sp, #16]
 8005350:	9803      	ldr	r0, [sp, #12]
 8005352:	9e05      	ldr	r6, [sp, #20]
 8005354:	47b0      	blx	r6
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	d02c      	beq.n	80053b4 <_printf_i+0x200>
 800535a:	3501      	adds	r5, #1
 800535c:	68e3      	ldr	r3, [r4, #12]
 800535e:	9a07      	ldr	r2, [sp, #28]
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	42ab      	cmp	r3, r5
 8005364:	dcf0      	bgt.n	8005348 <_printf_i+0x194>
 8005366:	e7e9      	b.n	800533c <_printf_i+0x188>
 8005368:	2500      	movs	r5, #0
 800536a:	e7f7      	b.n	800535c <_printf_i+0x1a8>
 800536c:	2800      	cmp	r0, #0
 800536e:	d0ad      	beq.n	80052cc <_printf_i+0x118>
 8005370:	9d02      	ldr	r5, [sp, #8]
 8005372:	0039      	movs	r1, r7
 8005374:	f7fa ff4e 	bl	8000214 <__aeabi_uidivmod>
 8005378:	5c73      	ldrb	r3, [r6, r1]
 800537a:	3d01      	subs	r5, #1
 800537c:	702b      	strb	r3, [r5, #0]
 800537e:	2800      	cmp	r0, #0
 8005380:	d1f7      	bne.n	8005372 <_printf_i+0x1be>
 8005382:	2f08      	cmp	r7, #8
 8005384:	d109      	bne.n	800539a <_printf_i+0x1e6>
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	07db      	lsls	r3, r3, #31
 800538a:	d506      	bpl.n	800539a <_printf_i+0x1e6>
 800538c:	6863      	ldr	r3, [r4, #4]
 800538e:	6922      	ldr	r2, [r4, #16]
 8005390:	4293      	cmp	r3, r2
 8005392:	dc02      	bgt.n	800539a <_printf_i+0x1e6>
 8005394:	2330      	movs	r3, #48	; 0x30
 8005396:	3d01      	subs	r5, #1
 8005398:	702b      	strb	r3, [r5, #0]
 800539a:	9b02      	ldr	r3, [sp, #8]
 800539c:	1b5b      	subs	r3, r3, r5
 800539e:	6123      	str	r3, [r4, #16]
 80053a0:	9b05      	ldr	r3, [sp, #20]
 80053a2:	aa07      	add	r2, sp, #28
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	0021      	movs	r1, r4
 80053a8:	9b04      	ldr	r3, [sp, #16]
 80053aa:	9803      	ldr	r0, [sp, #12]
 80053ac:	f7ff fe94 	bl	80050d8 <_printf_common>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d1b8      	bne.n	8005326 <_printf_i+0x172>
 80053b4:	2001      	movs	r0, #1
 80053b6:	4240      	negs	r0, r0
 80053b8:	b009      	add	sp, #36	; 0x24
 80053ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053bc:	080055cd 	.word	0x080055cd
 80053c0:	080055de 	.word	0x080055de

080053c4 <_read_r>:
 80053c4:	b570      	push	{r4, r5, r6, lr}
 80053c6:	0005      	movs	r5, r0
 80053c8:	0008      	movs	r0, r1
 80053ca:	0011      	movs	r1, r2
 80053cc:	2200      	movs	r2, #0
 80053ce:	4c06      	ldr	r4, [pc, #24]	; (80053e8 <_read_r+0x24>)
 80053d0:	6022      	str	r2, [r4, #0]
 80053d2:	001a      	movs	r2, r3
 80053d4:	f7fe ff58 	bl	8004288 <_read>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d103      	bne.n	80053e4 <_read_r+0x20>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d000      	beq.n	80053e4 <_read_r+0x20>
 80053e2:	602b      	str	r3, [r5, #0]
 80053e4:	bd70      	pop	{r4, r5, r6, pc}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	200001cc 	.word	0x200001cc

080053ec <_fstat_r>:
 80053ec:	2300      	movs	r3, #0
 80053ee:	b570      	push	{r4, r5, r6, lr}
 80053f0:	4c06      	ldr	r4, [pc, #24]	; (800540c <_fstat_r+0x20>)
 80053f2:	0005      	movs	r5, r0
 80053f4:	0008      	movs	r0, r1
 80053f6:	0011      	movs	r1, r2
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	f7fe ff88 	bl	800430e <_fstat>
 80053fe:	1c43      	adds	r3, r0, #1
 8005400:	d103      	bne.n	800540a <_fstat_r+0x1e>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d000      	beq.n	800540a <_fstat_r+0x1e>
 8005408:	602b      	str	r3, [r5, #0]
 800540a:	bd70      	pop	{r4, r5, r6, pc}
 800540c:	200001cc 	.word	0x200001cc

08005410 <_isatty_r>:
 8005410:	2300      	movs	r3, #0
 8005412:	b570      	push	{r4, r5, r6, lr}
 8005414:	4c06      	ldr	r4, [pc, #24]	; (8005430 <_isatty_r+0x20>)
 8005416:	0005      	movs	r5, r0
 8005418:	0008      	movs	r0, r1
 800541a:	6023      	str	r3, [r4, #0]
 800541c:	f7fe ff85 	bl	800432a <_isatty>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d103      	bne.n	800542c <_isatty_r+0x1c>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d000      	beq.n	800542c <_isatty_r+0x1c>
 800542a:	602b      	str	r3, [r5, #0]
 800542c:	bd70      	pop	{r4, r5, r6, pc}
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	200001cc 	.word	0x200001cc

08005434 <memchr>:
 8005434:	b2c9      	uxtb	r1, r1
 8005436:	1882      	adds	r2, r0, r2
 8005438:	4290      	cmp	r0, r2
 800543a:	d101      	bne.n	8005440 <memchr+0xc>
 800543c:	2000      	movs	r0, #0
 800543e:	4770      	bx	lr
 8005440:	7803      	ldrb	r3, [r0, #0]
 8005442:	428b      	cmp	r3, r1
 8005444:	d0fb      	beq.n	800543e <memchr+0xa>
 8005446:	3001      	adds	r0, #1
 8005448:	e7f6      	b.n	8005438 <memchr+0x4>
	...

0800544c <_init>:
 800544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544e:	46c0      	nop			; (mov r8, r8)
 8005450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005452:	bc08      	pop	{r3}
 8005454:	469e      	mov	lr, r3
 8005456:	4770      	bx	lr

08005458 <_fini>:
 8005458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545e:	bc08      	pop	{r3}
 8005460:	469e      	mov	lr, r3
 8005462:	4770      	bx	lr
