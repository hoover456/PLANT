
MotorEncoderProto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042ac  080042ac  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042b4  080042b4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042b4  080042b4  000142b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042b8  080042b8  000142b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080042bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000068  08004324  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08004324  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba3e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b8d  00000000  00000000  0002bace  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b18  00000000  00000000  0002d660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a30  00000000  00000000  0002e178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015840  00000000  00000000  0002eba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008cec  00000000  00000000  000443e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000832a4  00000000  00000000  0004d0d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0378  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e54  00000000  00000000  000d03f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004168 	.word	0x08004168

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004168 	.word	0x08004168

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <HAL_Init+0x3c>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_Init+0x3c>)
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	430a      	orrs	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000450:	2000      	movs	r0, #0
 8000452:	f000 f811 	bl	8000478 <HAL_InitTick>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d003      	beq.n	8000462 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e001      	b.n	8000466 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000462:	f002 fc99 	bl	8002d98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	781b      	ldrb	r3, [r3, #0]
}
 800046a:	0018      	movs	r0, r3
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40022000 	.word	0x40022000

08000478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000480:	230f      	movs	r3, #15
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_InitTick+0x50>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	23fa      	movs	r3, #250	; 0xfa
 800048e:	0099      	lsls	r1, r3, #2
 8000490:	0010      	movs	r0, r2
 8000492:	f7ff fe39 	bl	8000108 <__udivsi3>
 8000496:	0003      	movs	r3, r0
 8000498:	0018      	movs	r0, r3
 800049a:	f000 f918 	bl	80006ce <HAL_SYSTICK_Config>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d004      	beq.n	80004ac <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80004a2:	230f      	movs	r3, #15
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
 80004aa:	e006      	b.n	80004ba <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	425b      	negs	r3, r3
 80004b2:	2200      	movs	r2, #0
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 f8e5 	bl	8000684 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80004ba:	230f      	movs	r3, #15
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	781b      	ldrb	r3, [r3, #0]
}
 80004c0:	0018      	movs	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000000 	.word	0x20000000

080004cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  uwTick++;
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <HAL_IncTick+0x14>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <HAL_IncTick+0x14>)
 80004d8:	601a      	str	r2, [r3, #0]
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000098 	.word	0x20000098

080004e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  return uwTick;
 80004e8:	4b02      	ldr	r3, [pc, #8]	; (80004f4 <HAL_GetTick+0x10>)
 80004ea:	681b      	ldr	r3, [r3, #0]
}
 80004ec:	0018      	movs	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	20000098 	.word	0x20000098

080004f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000500:	f7ff fff0 	bl	80004e4 <HAL_GetTick>
 8000504:	0003      	movs	r3, r0
 8000506:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3301      	adds	r3, #1
 8000510:	d002      	beq.n	8000518 <HAL_Delay+0x20>
  {
    wait++;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	f7ff ffe3 	bl	80004e4 <HAL_GetTick>
 800051e:	0002      	movs	r2, r0
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	429a      	cmp	r2, r3
 8000528:	d8f7      	bhi.n	800051a <HAL_Delay+0x22>
  {
  }
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b004      	add	sp, #16
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	1dfb      	adds	r3, r7, #7
 800053e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	231f      	movs	r3, #31
 8000548:	401a      	ands	r2, r3
 800054a:	4b04      	ldr	r3, [pc, #16]	; (800055c <NVIC_EnableIRQ+0x28>)
 800054c:	2101      	movs	r1, #1
 800054e:	4091      	lsls	r1, r2
 8000550:	000a      	movs	r2, r1
 8000552:	601a      	str	r2, [r3, #0]
}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b002      	add	sp, #8
 800055a:	bd80      	pop	{r7, pc}
 800055c:	e000e100 	.word	0xe000e100

08000560 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	0002      	movs	r2, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b7f      	cmp	r3, #127	; 0x7f
 8000574:	d932      	bls.n	80005dc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000576:	4a2f      	ldr	r2, [pc, #188]	; (8000634 <NVIC_SetPriority+0xd4>)
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	0019      	movs	r1, r3
 800057e:	230f      	movs	r3, #15
 8000580:	400b      	ands	r3, r1
 8000582:	3b08      	subs	r3, #8
 8000584:	089b      	lsrs	r3, r3, #2
 8000586:	3306      	adds	r3, #6
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	18d3      	adds	r3, r2, r3
 800058c:	3304      	adds	r3, #4
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	1dfa      	adds	r2, r7, #7
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	0011      	movs	r1, r2
 8000596:	2203      	movs	r2, #3
 8000598:	400a      	ands	r2, r1
 800059a:	00d2      	lsls	r2, r2, #3
 800059c:	21ff      	movs	r1, #255	; 0xff
 800059e:	4091      	lsls	r1, r2
 80005a0:	000a      	movs	r2, r1
 80005a2:	43d2      	mvns	r2, r2
 80005a4:	401a      	ands	r2, r3
 80005a6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	019b      	lsls	r3, r3, #6
 80005ac:	22ff      	movs	r2, #255	; 0xff
 80005ae:	401a      	ands	r2, r3
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	0018      	movs	r0, r3
 80005b6:	2303      	movs	r3, #3
 80005b8:	4003      	ands	r3, r0
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005be:	481d      	ldr	r0, [pc, #116]	; (8000634 <NVIC_SetPriority+0xd4>)
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	001c      	movs	r4, r3
 80005c6:	230f      	movs	r3, #15
 80005c8:	4023      	ands	r3, r4
 80005ca:	3b08      	subs	r3, #8
 80005cc:	089b      	lsrs	r3, r3, #2
 80005ce:	430a      	orrs	r2, r1
 80005d0:	3306      	adds	r3, #6
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	18c3      	adds	r3, r0, r3
 80005d6:	3304      	adds	r3, #4
 80005d8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80005da:	e027      	b.n	800062c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005dc:	4a16      	ldr	r2, [pc, #88]	; (8000638 <NVIC_SetPriority+0xd8>)
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	089b      	lsrs	r3, r3, #2
 80005e6:	33c0      	adds	r3, #192	; 0xc0
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	589b      	ldr	r3, [r3, r2]
 80005ec:	1dfa      	adds	r2, r7, #7
 80005ee:	7812      	ldrb	r2, [r2, #0]
 80005f0:	0011      	movs	r1, r2
 80005f2:	2203      	movs	r2, #3
 80005f4:	400a      	ands	r2, r1
 80005f6:	00d2      	lsls	r2, r2, #3
 80005f8:	21ff      	movs	r1, #255	; 0xff
 80005fa:	4091      	lsls	r1, r2
 80005fc:	000a      	movs	r2, r1
 80005fe:	43d2      	mvns	r2, r2
 8000600:	401a      	ands	r2, r3
 8000602:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	019b      	lsls	r3, r3, #6
 8000608:	22ff      	movs	r2, #255	; 0xff
 800060a:	401a      	ands	r2, r3
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	0018      	movs	r0, r3
 8000612:	2303      	movs	r3, #3
 8000614:	4003      	ands	r3, r0
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <NVIC_SetPriority+0xd8>)
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b25b      	sxtb	r3, r3
 8000622:	089b      	lsrs	r3, r3, #2
 8000624:	430a      	orrs	r2, r1
 8000626:	33c0      	adds	r3, #192	; 0xc0
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	501a      	str	r2, [r3, r0]
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b003      	add	sp, #12
 8000632:	bd90      	pop	{r4, r7, pc}
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	e000e100 	.word	0xe000e100

0800063c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3b01      	subs	r3, #1
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <SysTick_Config+0x40>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d901      	bls.n	8000652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800064e:	2301      	movs	r3, #1
 8000650:	e010      	b.n	8000674 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <SysTick_Config+0x44>)
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	3a01      	subs	r2, #1
 8000658:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800065a:	2301      	movs	r3, #1
 800065c:	425b      	negs	r3, r3
 800065e:	2103      	movs	r1, #3
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff ff7d 	bl	8000560 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <SysTick_Config+0x44>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <SysTick_Config+0x44>)
 800066e:	2207      	movs	r2, #7
 8000670:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000672:	2300      	movs	r3, #0
}
 8000674:	0018      	movs	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	b002      	add	sp, #8
 800067a:	bd80      	pop	{r7, pc}
 800067c:	00ffffff 	.word	0x00ffffff
 8000680:	e000e010 	.word	0xe000e010

08000684 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
 800068e:	210f      	movs	r1, #15
 8000690:	187b      	adds	r3, r7, r1
 8000692:	1c02      	adds	r2, r0, #0
 8000694:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	187b      	adds	r3, r7, r1
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b25b      	sxtb	r3, r3
 800069e:	0011      	movs	r1, r2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f7ff ff5d 	bl	8000560 <NVIC_SetPriority>
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b004      	add	sp, #16
 80006ac:	bd80      	pop	{r7, pc}

080006ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	0002      	movs	r2, r0
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b25b      	sxtb	r3, r3
 80006c0:	0018      	movs	r0, r3
 80006c2:	f7ff ff37 	bl	8000534 <NVIC_EnableIRQ>
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b002      	add	sp, #8
 80006cc:	bd80      	pop	{r7, pc}

080006ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff ffaf 	bl	800063c <SysTick_Config>
 80006de:	0003      	movs	r3, r0
}
 80006e0:	0018      	movs	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b002      	add	sp, #8
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80006fe:	e155      	b.n	80009ac <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2101      	movs	r1, #1
 8000706:	697a      	ldr	r2, [r7, #20]
 8000708:	4091      	lsls	r1, r2
 800070a:	000a      	movs	r2, r1
 800070c:	4013      	ands	r3, r2
 800070e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d100      	bne.n	8000718 <HAL_GPIO_Init+0x30>
 8000716:	e146      	b.n	80009a6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	2b02      	cmp	r3, #2
 800071e:	d003      	beq.n	8000728 <HAL_GPIO_Init+0x40>
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	2b12      	cmp	r3, #18
 8000726:	d123      	bne.n	8000770 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	08da      	lsrs	r2, r3, #3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3208      	adds	r2, #8
 8000730:	0092      	lsls	r2, r2, #2
 8000732:	58d3      	ldr	r3, [r2, r3]
 8000734:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	2207      	movs	r2, #7
 800073a:	4013      	ands	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	220f      	movs	r2, #15
 8000740:	409a      	lsls	r2, r3
 8000742:	0013      	movs	r3, r2
 8000744:	43da      	mvns	r2, r3
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	4013      	ands	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	691a      	ldr	r2, [r3, #16]
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	2107      	movs	r1, #7
 8000754:	400b      	ands	r3, r1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	409a      	lsls	r2, r3
 800075a:	0013      	movs	r3, r2
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	4313      	orrs	r3, r2
 8000760:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	08da      	lsrs	r2, r3, #3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3208      	adds	r2, #8
 800076a:	0092      	lsls	r2, r2, #2
 800076c:	6939      	ldr	r1, [r7, #16]
 800076e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d00b      	beq.n	8000790 <HAL_GPIO_Init+0xa8>
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2b02      	cmp	r3, #2
 800077e:	d007      	beq.n	8000790 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000784:	2b11      	cmp	r3, #17
 8000786:	d003      	beq.n	8000790 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	2b12      	cmp	r3, #18
 800078e:	d130      	bne.n	80007f2 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	2203      	movs	r2, #3
 800079c:	409a      	lsls	r2, r3
 800079e:	0013      	movs	r3, r2
 80007a0:	43da      	mvns	r2, r3
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	4013      	ands	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	68da      	ldr	r2, [r3, #12]
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	409a      	lsls	r2, r3
 80007b2:	0013      	movs	r3, r2
 80007b4:	693a      	ldr	r2, [r7, #16]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	693a      	ldr	r2, [r7, #16]
 80007be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007c6:	2201      	movs	r2, #1
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	409a      	lsls	r2, r3
 80007cc:	0013      	movs	r3, r2
 80007ce:	43da      	mvns	r2, r3
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	4013      	ands	r3, r2
 80007d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	091b      	lsrs	r3, r3, #4
 80007dc:	2201      	movs	r2, #1
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
 80007e4:	0013      	movs	r3, r2
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	2203      	movs	r2, #3
 80007fe:	409a      	lsls	r2, r3
 8000800:	0013      	movs	r3, r2
 8000802:	43da      	mvns	r2, r3
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	4013      	ands	r3, r2
 8000808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2203      	movs	r2, #3
 8000810:	401a      	ands	r2, r3
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	409a      	lsls	r2, r3
 8000818:	0013      	movs	r3, r2
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	4313      	orrs	r3, r2
 800081e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	2203      	movs	r2, #3
 8000832:	409a      	lsls	r2, r3
 8000834:	0013      	movs	r3, r2
 8000836:	43da      	mvns	r2, r3
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	4013      	ands	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	689a      	ldr	r2, [r3, #8]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	4313      	orrs	r3, r2
 800084e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	055b      	lsls	r3, r3, #21
 800085e:	4013      	ands	r3, r2
 8000860:	d100      	bne.n	8000864 <HAL_GPIO_Init+0x17c>
 8000862:	e0a0      	b.n	80009a6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000864:	4b57      	ldr	r3, [pc, #348]	; (80009c4 <HAL_GPIO_Init+0x2dc>)
 8000866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000868:	4b56      	ldr	r3, [pc, #344]	; (80009c4 <HAL_GPIO_Init+0x2dc>)
 800086a:	2101      	movs	r1, #1
 800086c:	430a      	orrs	r2, r1
 800086e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000870:	4a55      	ldr	r2, [pc, #340]	; (80009c8 <HAL_GPIO_Init+0x2e0>)
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	089b      	lsrs	r3, r3, #2
 8000876:	3302      	adds	r3, #2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	589b      	ldr	r3, [r3, r2]
 800087c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	2203      	movs	r2, #3
 8000882:	4013      	ands	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	220f      	movs	r2, #15
 8000888:	409a      	lsls	r2, r3
 800088a:	0013      	movs	r3, r2
 800088c:	43da      	mvns	r2, r3
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	4013      	ands	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	23a0      	movs	r3, #160	; 0xa0
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	429a      	cmp	r2, r3
 800089c:	d01f      	beq.n	80008de <HAL_GPIO_Init+0x1f6>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a4a      	ldr	r2, [pc, #296]	; (80009cc <HAL_GPIO_Init+0x2e4>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d019      	beq.n	80008da <HAL_GPIO_Init+0x1f2>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a49      	ldr	r2, [pc, #292]	; (80009d0 <HAL_GPIO_Init+0x2e8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d013      	beq.n	80008d6 <HAL_GPIO_Init+0x1ee>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a48      	ldr	r2, [pc, #288]	; (80009d4 <HAL_GPIO_Init+0x2ec>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d00d      	beq.n	80008d2 <HAL_GPIO_Init+0x1ea>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a47      	ldr	r2, [pc, #284]	; (80009d8 <HAL_GPIO_Init+0x2f0>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d007      	beq.n	80008ce <HAL_GPIO_Init+0x1e6>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a46      	ldr	r2, [pc, #280]	; (80009dc <HAL_GPIO_Init+0x2f4>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d101      	bne.n	80008ca <HAL_GPIO_Init+0x1e2>
 80008c6:	2305      	movs	r3, #5
 80008c8:	e00a      	b.n	80008e0 <HAL_GPIO_Init+0x1f8>
 80008ca:	2306      	movs	r3, #6
 80008cc:	e008      	b.n	80008e0 <HAL_GPIO_Init+0x1f8>
 80008ce:	2304      	movs	r3, #4
 80008d0:	e006      	b.n	80008e0 <HAL_GPIO_Init+0x1f8>
 80008d2:	2303      	movs	r3, #3
 80008d4:	e004      	b.n	80008e0 <HAL_GPIO_Init+0x1f8>
 80008d6:	2302      	movs	r3, #2
 80008d8:	e002      	b.n	80008e0 <HAL_GPIO_Init+0x1f8>
 80008da:	2301      	movs	r3, #1
 80008dc:	e000      	b.n	80008e0 <HAL_GPIO_Init+0x1f8>
 80008de:	2300      	movs	r3, #0
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	2103      	movs	r1, #3
 80008e4:	400a      	ands	r2, r1
 80008e6:	0092      	lsls	r2, r2, #2
 80008e8:	4093      	lsls	r3, r2
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008f0:	4935      	ldr	r1, [pc, #212]	; (80009c8 <HAL_GPIO_Init+0x2e0>)
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	089b      	lsrs	r3, r3, #2
 80008f6:	3302      	adds	r3, #2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <HAL_GPIO_Init+0x2f8>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	43da      	mvns	r2, r3
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	4013      	ands	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685a      	ldr	r2, [r3, #4]
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	025b      	lsls	r3, r3, #9
 8000916:	4013      	ands	r3, r2
 8000918:	d003      	beq.n	8000922 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4313      	orrs	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <HAL_GPIO_Init+0x2f8>)
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000928:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <HAL_GPIO_Init+0x2f8>)
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	43da      	mvns	r2, r3
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	4013      	ands	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	029b      	lsls	r3, r3, #10
 8000940:	4013      	ands	r3, r2
 8000942:	d003      	beq.n	800094c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	4313      	orrs	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <HAL_GPIO_Init+0x2f8>)
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <HAL_GPIO_Init+0x2f8>)
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	43da      	mvns	r2, r3
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	4013      	ands	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685a      	ldr	r2, [r3, #4]
 8000966:	2380      	movs	r3, #128	; 0x80
 8000968:	035b      	lsls	r3, r3, #13
 800096a:	4013      	ands	r3, r2
 800096c:	d003      	beq.n	8000976 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <HAL_GPIO_Init+0x2f8>)
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <HAL_GPIO_Init+0x2f8>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	43da      	mvns	r2, r3
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	4013      	ands	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	039b      	lsls	r3, r3, #14
 8000994:	4013      	ands	r3, r2
 8000996:	d003      	beq.n	80009a0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_GPIO_Init+0x2f8>)
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	3301      	adds	r3, #1
 80009aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	40da      	lsrs	r2, r3
 80009b4:	1e13      	subs	r3, r2, #0
 80009b6:	d000      	beq.n	80009ba <HAL_GPIO_Init+0x2d2>
 80009b8:	e6a2      	b.n	8000700 <HAL_GPIO_Init+0x18>
  }
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b006      	add	sp, #24
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40010000 	.word	0x40010000
 80009cc:	50000400 	.word	0x50000400
 80009d0:	50000800 	.word	0x50000800
 80009d4:	50000c00 	.word	0x50000c00
 80009d8:	50001000 	.word	0x50001000
 80009dc:	50001c00 	.word	0x50001c00
 80009e0:	40010400 	.word	0x40010400

080009e4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	0008      	movs	r0, r1
 80009ee:	0011      	movs	r1, r2
 80009f0:	1cbb      	adds	r3, r7, #2
 80009f2:	1c02      	adds	r2, r0, #0
 80009f4:	801a      	strh	r2, [r3, #0]
 80009f6:	1c7b      	adds	r3, r7, #1
 80009f8:	1c0a      	adds	r2, r1, #0
 80009fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80009fc:	1c7b      	adds	r3, r7, #1
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d004      	beq.n	8000a0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a04:	1cbb      	adds	r3, r7, #2
 8000a06:	881a      	ldrh	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000a0c:	e003      	b.n	8000a16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000a0e:	1cbb      	adds	r3, r7, #2
 8000a10:	881a      	ldrh	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b002      	add	sp, #8
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	000a      	movs	r2, r1
 8000a28:	1cbb      	adds	r3, r7, #2
 8000a2a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	695a      	ldr	r2, [r3, #20]
 8000a30:	1cbb      	adds	r3, r7, #2
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	405a      	eors	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	615a      	str	r2, [r3, #20]
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	1dbb      	adds	r3, r7, #6
 8000a4e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	1dba      	adds	r2, r7, #6
 8000a56:	8812      	ldrh	r2, [r2, #0]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	d008      	beq.n	8000a6e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000a5e:	1dba      	adds	r2, r7, #6
 8000a60:	8812      	ldrh	r2, [r2, #0]
 8000a62:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a64:	1dbb      	adds	r3, r7, #6
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f000 f807 	bl	8000a7c <HAL_GPIO_EXTI_Callback>
  }
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	40010400 	.word	0x40010400

08000a7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	0002      	movs	r2, r0
 8000a84:	1dbb      	adds	r3, r7, #6
 8000a86:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b002      	add	sp, #8
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a90:	b5b0      	push	{r4, r5, r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d102      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	f000 fbbc 	bl	800121c <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000aa4:	4bc8      	ldr	r3, [pc, #800]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	220c      	movs	r2, #12
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000aae:	4bc6      	ldr	r3, [pc, #792]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000ab0:	68da      	ldr	r2, [r3, #12]
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	025b      	lsls	r3, r3, #9
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	d100      	bne.n	8000ac6 <HAL_RCC_OscConfig+0x36>
 8000ac4:	e07e      	b.n	8000bc4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	2b08      	cmp	r3, #8
 8000aca:	d007      	beq.n	8000adc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	2b0c      	cmp	r3, #12
 8000ad0:	d112      	bne.n	8000af8 <HAL_RCC_OscConfig+0x68>
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	025b      	lsls	r3, r3, #9
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d10d      	bne.n	8000af8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000adc:	4bba      	ldr	r3, [pc, #744]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	029b      	lsls	r3, r3, #10
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	d100      	bne.n	8000aea <HAL_RCC_OscConfig+0x5a>
 8000ae8:	e06b      	b.n	8000bc2 <HAL_RCC_OscConfig+0x132>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d167      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	f000 fb92 	bl	800121c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	025b      	lsls	r3, r3, #9
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d107      	bne.n	8000b14 <HAL_RCC_OscConfig+0x84>
 8000b04:	4bb0      	ldr	r3, [pc, #704]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4baf      	ldr	r3, [pc, #700]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000b0a:	2180      	movs	r1, #128	; 0x80
 8000b0c:	0249      	lsls	r1, r1, #9
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	e027      	b.n	8000b64 <HAL_RCC_OscConfig+0xd4>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	23a0      	movs	r3, #160	; 0xa0
 8000b1a:	02db      	lsls	r3, r3, #11
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d10e      	bne.n	8000b3e <HAL_RCC_OscConfig+0xae>
 8000b20:	4ba9      	ldr	r3, [pc, #676]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4ba8      	ldr	r3, [pc, #672]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000b26:	2180      	movs	r1, #128	; 0x80
 8000b28:	02c9      	lsls	r1, r1, #11
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	4ba6      	ldr	r3, [pc, #664]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4ba5      	ldr	r3, [pc, #660]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0249      	lsls	r1, r1, #9
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	e012      	b.n	8000b64 <HAL_RCC_OscConfig+0xd4>
 8000b3e:	4ba2      	ldr	r3, [pc, #648]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4ba1      	ldr	r3, [pc, #644]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000b44:	49a1      	ldr	r1, [pc, #644]	; (8000dcc <HAL_RCC_OscConfig+0x33c>)
 8000b46:	400a      	ands	r2, r1
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	4b9f      	ldr	r3, [pc, #636]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	025b      	lsls	r3, r3, #9
 8000b52:	4013      	ands	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4b9b      	ldr	r3, [pc, #620]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b9a      	ldr	r3, [pc, #616]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000b5e:	499c      	ldr	r1, [pc, #624]	; (8000dd0 <HAL_RCC_OscConfig+0x340>)
 8000b60:	400a      	ands	r2, r1
 8000b62:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d015      	beq.n	8000b98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b6c:	f7ff fcba 	bl	80004e4 <HAL_GetTick>
 8000b70:	0003      	movs	r3, r0
 8000b72:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000b74:	e009      	b.n	8000b8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b76:	f7ff fcb5 	bl	80004e4 <HAL_GetTick>
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	2b64      	cmp	r3, #100	; 0x64
 8000b82:	d902      	bls.n	8000b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b84:	2303      	movs	r3, #3
 8000b86:	f000 fb49 	bl	800121c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000b8a:	4b8f      	ldr	r3, [pc, #572]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	029b      	lsls	r3, r3, #10
 8000b92:	4013      	ands	r3, r2
 8000b94:	d0ef      	beq.n	8000b76 <HAL_RCC_OscConfig+0xe6>
 8000b96:	e015      	b.n	8000bc4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b98:	f7ff fca4 	bl	80004e4 <HAL_GetTick>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ba0:	e008      	b.n	8000bb4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ba2:	f7ff fc9f 	bl	80004e4 <HAL_GetTick>
 8000ba6:	0002      	movs	r2, r0
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	2b64      	cmp	r3, #100	; 0x64
 8000bae:	d901      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e333      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000bb4:	4b84      	ldr	r3, [pc, #528]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	029b      	lsls	r3, r3, #10
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	d1f0      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x112>
 8000bc0:	e000      	b.n	8000bc4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2202      	movs	r2, #2
 8000bca:	4013      	ands	r3, r2
 8000bcc:	d100      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x140>
 8000bce:	e098      	b.n	8000d02 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	2220      	movs	r2, #32
 8000bda:	4013      	ands	r3, r2
 8000bdc:	d009      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000bde:	4b7a      	ldr	r3, [pc, #488]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	4b79      	ldr	r3, [pc, #484]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000be4:	2120      	movs	r1, #32
 8000be6:	430a      	orrs	r2, r1
 8000be8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	2220      	movs	r2, #32
 8000bee:	4393      	bics	r3, r2
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d005      	beq.n	8000c04 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	2b0c      	cmp	r3, #12
 8000bfc:	d13d      	bne.n	8000c7a <HAL_RCC_OscConfig+0x1ea>
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d13a      	bne.n	8000c7a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000c04:	4b70      	ldr	r3, [pc, #448]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2204      	movs	r2, #4
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	d004      	beq.n	8000c18 <HAL_RCC_OscConfig+0x188>
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d101      	bne.n	8000c18 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e301      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c18:	4b6b      	ldr	r3, [pc, #428]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4a6d      	ldr	r2, [pc, #436]	; (8000dd4 <HAL_RCC_OscConfig+0x344>)
 8000c1e:	4013      	ands	r3, r2
 8000c20:	0019      	movs	r1, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	021a      	lsls	r2, r3, #8
 8000c28:	4b67      	ldr	r3, [pc, #412]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000c2e:	4b66      	ldr	r3, [pc, #408]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2209      	movs	r2, #9
 8000c34:	4393      	bics	r3, r2
 8000c36:	0019      	movs	r1, r3
 8000c38:	4b63      	ldr	r3, [pc, #396]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c40:	f000 fc20 	bl	8001484 <HAL_RCC_GetSysClockFreq>
 8000c44:	0001      	movs	r1, r0
 8000c46:	4b60      	ldr	r3, [pc, #384]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	091b      	lsrs	r3, r3, #4
 8000c4c:	220f      	movs	r2, #15
 8000c4e:	4013      	ands	r3, r2
 8000c50:	4a61      	ldr	r2, [pc, #388]	; (8000dd8 <HAL_RCC_OscConfig+0x348>)
 8000c52:	5cd3      	ldrb	r3, [r2, r3]
 8000c54:	000a      	movs	r2, r1
 8000c56:	40da      	lsrs	r2, r3
 8000c58:	4b60      	ldr	r3, [pc, #384]	; (8000ddc <HAL_RCC_OscConfig+0x34c>)
 8000c5a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000c5c:	2513      	movs	r5, #19
 8000c5e:	197c      	adds	r4, r7, r5
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff fc09 	bl	8000478 <HAL_InitTick>
 8000c66:	0003      	movs	r3, r0
 8000c68:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000c6a:	197b      	adds	r3, r7, r5
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d047      	beq.n	8000d02 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8000c72:	2313      	movs	r3, #19
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	e2d0      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d027      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000c80:	4b51      	ldr	r3, [pc, #324]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2209      	movs	r2, #9
 8000c86:	4393      	bics	r3, r2
 8000c88:	0019      	movs	r1, r3
 8000c8a:	4b4f      	ldr	r3, [pc, #316]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c92:	f7ff fc27 	bl	80004e4 <HAL_GetTick>
 8000c96:	0003      	movs	r3, r0
 8000c98:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c9c:	f7ff fc22 	bl	80004e4 <HAL_GetTick>
 8000ca0:	0002      	movs	r2, r0
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e2b6      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000cae:	4b46      	ldr	r3, [pc, #280]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	d0f1      	beq.n	8000c9c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb8:	4b43      	ldr	r3, [pc, #268]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	4a45      	ldr	r2, [pc, #276]	; (8000dd4 <HAL_RCC_OscConfig+0x344>)
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	021a      	lsls	r2, r3, #8
 8000cc8:	4b3f      	ldr	r3, [pc, #252]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	e018      	b.n	8000d02 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cd0:	4b3d      	ldr	r3, [pc, #244]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b3c      	ldr	r3, [pc, #240]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	438a      	bics	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fc02 	bl	80004e4 <HAL_GetTick>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000ce4:	e008      	b.n	8000cf8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce6:	f7ff fbfd 	bl	80004e4 <HAL_GetTick>
 8000cea:	0002      	movs	r2, r0
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d901      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e291      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000cf8:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	4013      	ands	r3, r2
 8000d00:	d1f1      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2210      	movs	r2, #16
 8000d08:	4013      	ands	r3, r2
 8000d0a:	d100      	bne.n	8000d0e <HAL_RCC_OscConfig+0x27e>
 8000d0c:	e09f      	b.n	8000e4e <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d13f      	bne.n	8000d94 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	d005      	beq.n	8000d2c <HAL_RCC_OscConfig+0x29c>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69db      	ldr	r3, [r3, #28]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d101      	bne.n	8000d2c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e277      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d2c:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	4a2b      	ldr	r2, [pc, #172]	; (8000de0 <HAL_RCC_OscConfig+0x350>)
 8000d32:	4013      	ands	r3, r2
 8000d34:	0019      	movs	r1, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d40:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	021b      	lsls	r3, r3, #8
 8000d46:	0a19      	lsrs	r1, r3, #8
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	061a      	lsls	r2, r3, #24
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000d50:	430a      	orrs	r2, r1
 8000d52:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	0b5b      	lsrs	r3, r3, #13
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	0212      	lsls	r2, r2, #8
 8000d60:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	091b      	lsrs	r3, r3, #4
 8000d68:	210f      	movs	r1, #15
 8000d6a:	400b      	ands	r3, r1
 8000d6c:	491a      	ldr	r1, [pc, #104]	; (8000dd8 <HAL_RCC_OscConfig+0x348>)
 8000d6e:	5ccb      	ldrb	r3, [r1, r3]
 8000d70:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_RCC_OscConfig+0x34c>)
 8000d74:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000d76:	2513      	movs	r5, #19
 8000d78:	197c      	adds	r4, r7, r5
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff fb7c 	bl	8000478 <HAL_InitTick>
 8000d80:	0003      	movs	r3, r0
 8000d82:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000d84:	197b      	adds	r3, r7, r5
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d060      	beq.n	8000e4e <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8000d8c:	2313      	movs	r3, #19
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	e243      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d03e      	beq.n	8000e1a <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_RCC_OscConfig+0x338>)
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	0049      	lsls	r1, r1, #1
 8000da6:	430a      	orrs	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000daa:	f7ff fb9b 	bl	80004e4 <HAL_GetTick>
 8000dae:	0003      	movs	r3, r0
 8000db0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000db2:	e017      	b.n	8000de4 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000db4:	f7ff fb96 	bl	80004e4 <HAL_GetTick>
 8000db8:	0002      	movs	r2, r0
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d910      	bls.n	8000de4 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e22a      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	fffeffff 	.word	0xfffeffff
 8000dd0:	fffbffff 	.word	0xfffbffff
 8000dd4:	ffffe0ff 	.word	0xffffe0ff
 8000dd8:	080041f0 	.word	0x080041f0
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000de4:	4bc6      	ldr	r3, [pc, #792]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4013      	ands	r3, r2
 8000dee:	d0e1      	beq.n	8000db4 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000df0:	4bc3      	ldr	r3, [pc, #780]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	4ac3      	ldr	r2, [pc, #780]	; (8001104 <HAL_RCC_OscConfig+0x674>)
 8000df6:	4013      	ands	r3, r2
 8000df8:	0019      	movs	r1, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dfe:	4bc0      	ldr	r3, [pc, #768]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000e00:	430a      	orrs	r2, r1
 8000e02:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e04:	4bbe      	ldr	r3, [pc, #760]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	0a19      	lsrs	r1, r3, #8
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a1b      	ldr	r3, [r3, #32]
 8000e10:	061a      	lsls	r2, r3, #24
 8000e12:	4bbb      	ldr	r3, [pc, #748]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000e14:	430a      	orrs	r2, r1
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	e019      	b.n	8000e4e <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e1a:	4bb9      	ldr	r3, [pc, #740]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	4bb8      	ldr	r3, [pc, #736]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000e20:	49b9      	ldr	r1, [pc, #740]	; (8001108 <HAL_RCC_OscConfig+0x678>)
 8000e22:	400a      	ands	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e26:	f7ff fb5d 	bl	80004e4 <HAL_GetTick>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e30:	f7ff fb58 	bl	80004e4 <HAL_GetTick>
 8000e34:	0002      	movs	r2, r0
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e1ec      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e42:	4baf      	ldr	r3, [pc, #700]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d1f0      	bne.n	8000e30 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2208      	movs	r2, #8
 8000e54:	4013      	ands	r3, r2
 8000e56:	d036      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d019      	beq.n	8000e94 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e60:	4ba7      	ldr	r3, [pc, #668]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000e62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e64:	4ba6      	ldr	r3, [pc, #664]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000e66:	2101      	movs	r1, #1
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6c:	f7ff fb3a 	bl	80004e4 <HAL_GetTick>
 8000e70:	0003      	movs	r3, r0
 8000e72:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e74:	e008      	b.n	8000e88 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e76:	f7ff fb35 	bl	80004e4 <HAL_GetTick>
 8000e7a:	0002      	movs	r2, r0
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e1c9      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e88:	4b9d      	ldr	r3, [pc, #628]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d0f1      	beq.n	8000e76 <HAL_RCC_OscConfig+0x3e6>
 8000e92:	e018      	b.n	8000ec6 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e94:	4b9a      	ldr	r3, [pc, #616]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000e96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e98:	4b99      	ldr	r3, [pc, #612]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	438a      	bics	r2, r1
 8000e9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea0:	f7ff fb20 	bl	80004e4 <HAL_GetTick>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fb1b 	bl	80004e4 <HAL_GetTick>
 8000eae:	0002      	movs	r2, r0
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e1af      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ebc:	4b90      	ldr	r3, [pc, #576]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d1f1      	bne.n	8000eaa <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2204      	movs	r2, #4
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d100      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x442>
 8000ed0:	e0af      	b.n	8001032 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ed2:	2323      	movs	r3, #35	; 0x23
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eda:	4b89      	ldr	r3, [pc, #548]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	055b      	lsls	r3, r3, #21
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d10a      	bne.n	8000efc <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b86      	ldr	r3, [pc, #536]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000eea:	4b85      	ldr	r3, [pc, #532]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	0549      	lsls	r1, r1, #21
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8000ef4:	2323      	movs	r3, #35	; 0x23
 8000ef6:	18fb      	adds	r3, r7, r3
 8000ef8:	2201      	movs	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efc:	4b83      	ldr	r3, [pc, #524]	; (800110c <HAL_RCC_OscConfig+0x67c>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4013      	ands	r3, r2
 8000f06:	d11a      	bne.n	8000f3e <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f08:	4b80      	ldr	r3, [pc, #512]	; (800110c <HAL_RCC_OscConfig+0x67c>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b7f      	ldr	r3, [pc, #508]	; (800110c <HAL_RCC_OscConfig+0x67c>)
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	0049      	lsls	r1, r1, #1
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f16:	f7ff fae5 	bl	80004e4 <HAL_GetTick>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f20:	f7ff fae0 	bl	80004e4 <HAL_GetTick>
 8000f24:	0002      	movs	r2, r0
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	; 0x64
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e174      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f32:	4b76      	ldr	r3, [pc, #472]	; (800110c <HAL_RCC_OscConfig+0x67c>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d0f0      	beq.n	8000f20 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d107      	bne.n	8000f5a <HAL_RCC_OscConfig+0x4ca>
 8000f4a:	4b6d      	ldr	r3, [pc, #436]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000f4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f4e:	4b6c      	ldr	r3, [pc, #432]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000f50:	2180      	movs	r1, #128	; 0x80
 8000f52:	0049      	lsls	r1, r1, #1
 8000f54:	430a      	orrs	r2, r1
 8000f56:	651a      	str	r2, [r3, #80]	; 0x50
 8000f58:	e031      	b.n	8000fbe <HAL_RCC_OscConfig+0x52e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x4ec>
 8000f62:	4b67      	ldr	r3, [pc, #412]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000f64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f66:	4b66      	ldr	r3, [pc, #408]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000f68:	4967      	ldr	r1, [pc, #412]	; (8001108 <HAL_RCC_OscConfig+0x678>)
 8000f6a:	400a      	ands	r2, r1
 8000f6c:	651a      	str	r2, [r3, #80]	; 0x50
 8000f6e:	4b64      	ldr	r3, [pc, #400]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000f70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f72:	4b63      	ldr	r3, [pc, #396]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000f74:	4966      	ldr	r1, [pc, #408]	; (8001110 <HAL_RCC_OscConfig+0x680>)
 8000f76:	400a      	ands	r2, r1
 8000f78:	651a      	str	r2, [r3, #80]	; 0x50
 8000f7a:	e020      	b.n	8000fbe <HAL_RCC_OscConfig+0x52e>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	23a0      	movs	r3, #160	; 0xa0
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d10e      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x516>
 8000f88:	4b5d      	ldr	r3, [pc, #372]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000f8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f8c:	4b5c      	ldr	r3, [pc, #368]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	00c9      	lsls	r1, r1, #3
 8000f92:	430a      	orrs	r2, r1
 8000f94:	651a      	str	r2, [r3, #80]	; 0x50
 8000f96:	4b5a      	ldr	r3, [pc, #360]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000f98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f9a:	4b59      	ldr	r3, [pc, #356]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	0049      	lsls	r1, r1, #1
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	651a      	str	r2, [r3, #80]	; 0x50
 8000fa4:	e00b      	b.n	8000fbe <HAL_RCC_OscConfig+0x52e>
 8000fa6:	4b56      	ldr	r3, [pc, #344]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000fa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000faa:	4b55      	ldr	r3, [pc, #340]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000fac:	4956      	ldr	r1, [pc, #344]	; (8001108 <HAL_RCC_OscConfig+0x678>)
 8000fae:	400a      	ands	r2, r1
 8000fb0:	651a      	str	r2, [r3, #80]	; 0x50
 8000fb2:	4b53      	ldr	r3, [pc, #332]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000fb6:	4b52      	ldr	r3, [pc, #328]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000fb8:	4955      	ldr	r1, [pc, #340]	; (8001110 <HAL_RCC_OscConfig+0x680>)
 8000fba:	400a      	ands	r2, r1
 8000fbc:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d015      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc6:	f7ff fa8d 	bl	80004e4 <HAL_GetTick>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fce:	e009      	b.n	8000fe4 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fa88 	bl	80004e4 <HAL_GetTick>
 8000fd4:	0002      	movs	r2, r0
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	4a4e      	ldr	r2, [pc, #312]	; (8001114 <HAL_RCC_OscConfig+0x684>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e11b      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fe4:	4b46      	ldr	r3, [pc, #280]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8000fe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4013      	ands	r3, r2
 8000fee:	d0ef      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x540>
 8000ff0:	e014      	b.n	800101c <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff2:	f7ff fa77 	bl	80004e4 <HAL_GetTick>
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000ffa:	e009      	b.n	8001010 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ffc:	f7ff fa72 	bl	80004e4 <HAL_GetTick>
 8001000:	0002      	movs	r2, r0
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	4a43      	ldr	r2, [pc, #268]	; (8001114 <HAL_RCC_OscConfig+0x684>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e105      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001010:	4b3b      	ldr	r3, [pc, #236]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8001012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4013      	ands	r3, r2
 800101a:	d1ef      	bne.n	8000ffc <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800101c:	2323      	movs	r3, #35	; 0x23
 800101e:	18fb      	adds	r3, r7, r3
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d105      	bne.n	8001032 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001026:	4b36      	ldr	r3, [pc, #216]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8001028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800102a:	4b35      	ldr	r3, [pc, #212]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 800102c:	493a      	ldr	r1, [pc, #232]	; (8001118 <HAL_RCC_OscConfig+0x688>)
 800102e:	400a      	ands	r2, r1
 8001030:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2220      	movs	r2, #32
 8001038:	4013      	ands	r3, r2
 800103a:	d049      	beq.n	80010d0 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d026      	beq.n	8001092 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001044:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 800104a:	2101      	movs	r1, #1
 800104c:	430a      	orrs	r2, r1
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8001052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001054:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8001056:	2101      	movs	r1, #1
 8001058:	430a      	orrs	r2, r1
 800105a:	635a      	str	r2, [r3, #52]	; 0x34
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <HAL_RCC_OscConfig+0x68c>)
 800105e:	6a1a      	ldr	r2, [r3, #32]
 8001060:	4b2e      	ldr	r3, [pc, #184]	; (800111c <HAL_RCC_OscConfig+0x68c>)
 8001062:	2180      	movs	r1, #128	; 0x80
 8001064:	0189      	lsls	r1, r1, #6
 8001066:	430a      	orrs	r2, r1
 8001068:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106a:	f7ff fa3b 	bl	80004e4 <HAL_GetTick>
 800106e:	0003      	movs	r3, r0
 8001070:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001074:	f7ff fa36 	bl	80004e4 <HAL_GetTick>
 8001078:	0002      	movs	r2, r0
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e0ca      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2202      	movs	r2, #2
 800108c:	4013      	ands	r3, r2
 800108e:	d0f1      	beq.n	8001074 <HAL_RCC_OscConfig+0x5e4>
 8001090:	e01e      	b.n	80010d0 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 8001098:	2101      	movs	r1, #1
 800109a:	438a      	bics	r2, r1
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <HAL_RCC_OscConfig+0x68c>)
 80010a0:	6a1a      	ldr	r2, [r3, #32]
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <HAL_RCC_OscConfig+0x68c>)
 80010a4:	491e      	ldr	r1, [pc, #120]	; (8001120 <HAL_RCC_OscConfig+0x690>)
 80010a6:	400a      	ands	r2, r1
 80010a8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010aa:	f7ff fa1b 	bl	80004e4 <HAL_GetTick>
 80010ae:	0003      	movs	r3, r0
 80010b0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010b4:	f7ff fa16 	bl	80004e4 <HAL_GetTick>
 80010b8:	0002      	movs	r2, r0
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e0aa      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	2202      	movs	r2, #2
 80010cc:	4013      	ands	r3, r2
 80010ce:	d1f1      	bne.n	80010b4 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d100      	bne.n	80010da <HAL_RCC_OscConfig+0x64a>
 80010d8:	e09f      	b.n	800121a <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	2b0c      	cmp	r3, #12
 80010de:	d100      	bne.n	80010e2 <HAL_RCC_OscConfig+0x652>
 80010e0:	e078      	b.n	80011d4 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d159      	bne.n	800119e <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <HAL_RCC_OscConfig+0x670>)
 80010f0:	490c      	ldr	r1, [pc, #48]	; (8001124 <HAL_RCC_OscConfig+0x694>)
 80010f2:	400a      	ands	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff f9f5 	bl	80004e4 <HAL_GetTick>
 80010fa:	0003      	movs	r3, r0
 80010fc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80010fe:	e01c      	b.n	800113a <HAL_RCC_OscConfig+0x6aa>
 8001100:	40021000 	.word	0x40021000
 8001104:	ffff1fff 	.word	0xffff1fff
 8001108:	fffffeff 	.word	0xfffffeff
 800110c:	40007000 	.word	0x40007000
 8001110:	fffffbff 	.word	0xfffffbff
 8001114:	00001388 	.word	0x00001388
 8001118:	efffffff 	.word	0xefffffff
 800111c:	40010000 	.word	0x40010000
 8001120:	ffffdfff 	.word	0xffffdfff
 8001124:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001128:	f7ff f9dc 	bl	80004e4 <HAL_GetTick>
 800112c:	0002      	movs	r2, r0
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e070      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800113a:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <HAL_RCC_OscConfig+0x794>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	049b      	lsls	r3, r3, #18
 8001142:	4013      	ands	r3, r2
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001146:	4b37      	ldr	r3, [pc, #220]	; (8001224 <HAL_RCC_OscConfig+0x794>)
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	4a37      	ldr	r2, [pc, #220]	; (8001228 <HAL_RCC_OscConfig+0x798>)
 800114c:	4013      	ands	r3, r2
 800114e:	0019      	movs	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	431a      	orrs	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800115e:	431a      	orrs	r2, r3
 8001160:	4b30      	ldr	r3, [pc, #192]	; (8001224 <HAL_RCC_OscConfig+0x794>)
 8001162:	430a      	orrs	r2, r1
 8001164:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001166:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <HAL_RCC_OscConfig+0x794>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <HAL_RCC_OscConfig+0x794>)
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	0449      	lsls	r1, r1, #17
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff f9b6 	bl	80004e4 <HAL_GetTick>
 8001178:	0003      	movs	r3, r0
 800117a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800117e:	f7ff f9b1 	bl	80004e4 <HAL_GetTick>
 8001182:	0002      	movs	r2, r0
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e045      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001190:	4b24      	ldr	r3, [pc, #144]	; (8001224 <HAL_RCC_OscConfig+0x794>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	049b      	lsls	r3, r3, #18
 8001198:	4013      	ands	r3, r2
 800119a:	d0f0      	beq.n	800117e <HAL_RCC_OscConfig+0x6ee>
 800119c:	e03d      	b.n	800121a <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <HAL_RCC_OscConfig+0x794>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_RCC_OscConfig+0x794>)
 80011a4:	4921      	ldr	r1, [pc, #132]	; (800122c <HAL_RCC_OscConfig+0x79c>)
 80011a6:	400a      	ands	r2, r1
 80011a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011aa:	f7ff f99b 	bl	80004e4 <HAL_GetTick>
 80011ae:	0003      	movs	r3, r0
 80011b0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011b4:	f7ff f996 	bl	80004e4 <HAL_GetTick>
 80011b8:	0002      	movs	r2, r0
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e02a      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_RCC_OscConfig+0x794>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	049b      	lsls	r3, r3, #18
 80011ce:	4013      	ands	r3, r2
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0x724>
 80011d2:	e022      	b.n	800121a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e01d      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_RCC_OscConfig+0x794>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	025b      	lsls	r3, r3, #9
 80011ec:	401a      	ands	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d10f      	bne.n	8001216 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	23f0      	movs	r3, #240	; 0xf0
 80011fa:	039b      	lsls	r3, r3, #14
 80011fc:	401a      	ands	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001202:	429a      	cmp	r2, r3
 8001204:	d107      	bne.n	8001216 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	23c0      	movs	r3, #192	; 0xc0
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	401a      	ands	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001212:	429a      	cmp	r2, r3
 8001214:	d001      	beq.n	800121a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	0018      	movs	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	b00a      	add	sp, #40	; 0x28
 8001222:	bdb0      	pop	{r4, r5, r7, pc}
 8001224:	40021000 	.word	0x40021000
 8001228:	ff02ffff 	.word	0xff02ffff
 800122c:	feffffff 	.word	0xfeffffff

08001230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001230:	b5b0      	push	{r4, r5, r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e10d      	b.n	8001460 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001244:	4b88      	ldr	r3, [pc, #544]	; (8001468 <HAL_RCC_ClockConfig+0x238>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2201      	movs	r2, #1
 800124a:	4013      	ands	r3, r2
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d911      	bls.n	8001276 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001252:	4b85      	ldr	r3, [pc, #532]	; (8001468 <HAL_RCC_ClockConfig+0x238>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2201      	movs	r2, #1
 8001258:	4393      	bics	r3, r2
 800125a:	0019      	movs	r1, r3
 800125c:	4b82      	ldr	r3, [pc, #520]	; (8001468 <HAL_RCC_ClockConfig+0x238>)
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001264:	4b80      	ldr	r3, [pc, #512]	; (8001468 <HAL_RCC_ClockConfig+0x238>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2201      	movs	r2, #1
 800126a:	4013      	ands	r3, r2
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d001      	beq.n	8001276 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e0f4      	b.n	8001460 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d009      	beq.n	8001294 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001280:	4b7a      	ldr	r3, [pc, #488]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	22f0      	movs	r2, #240	; 0xf0
 8001286:	4393      	bics	r3, r2
 8001288:	0019      	movs	r1, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	4b77      	ldr	r3, [pc, #476]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 8001290:	430a      	orrs	r2, r1
 8001292:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2201      	movs	r2, #1
 800129a:	4013      	ands	r3, r2
 800129c:	d100      	bne.n	80012a0 <HAL_RCC_ClockConfig+0x70>
 800129e:	e089      	b.n	80013b4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d107      	bne.n	80012b8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012a8:	4b70      	ldr	r3, [pc, #448]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	029b      	lsls	r3, r3, #10
 80012b0:	4013      	ands	r3, r2
 80012b2:	d120      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e0d3      	b.n	8001460 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d107      	bne.n	80012d0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80012c0:	4b6a      	ldr	r3, [pc, #424]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	049b      	lsls	r3, r3, #18
 80012c8:	4013      	ands	r3, r2
 80012ca:	d114      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0c7      	b.n	8001460 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d106      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012d8:	4b64      	ldr	r3, [pc, #400]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2204      	movs	r2, #4
 80012de:	4013      	ands	r3, r2
 80012e0:	d109      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e0bc      	b.n	8001460 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012e6:	4b61      	ldr	r3, [pc, #388]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4013      	ands	r3, r2
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e0b4      	b.n	8001460 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012f6:	4b5d      	ldr	r3, [pc, #372]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2203      	movs	r2, #3
 80012fc:	4393      	bics	r3, r2
 80012fe:	0019      	movs	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	4b59      	ldr	r3, [pc, #356]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 8001306:	430a      	orrs	r2, r1
 8001308:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800130a:	f7ff f8eb 	bl	80004e4 <HAL_GetTick>
 800130e:	0003      	movs	r3, r0
 8001310:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d111      	bne.n	800133e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800131a:	e009      	b.n	8001330 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800131c:	f7ff f8e2 	bl	80004e4 <HAL_GetTick>
 8001320:	0002      	movs	r2, r0
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	4a52      	ldr	r2, [pc, #328]	; (8001470 <HAL_RCC_ClockConfig+0x240>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e097      	b.n	8001460 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001330:	4b4e      	ldr	r3, [pc, #312]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	220c      	movs	r2, #12
 8001336:	4013      	ands	r3, r2
 8001338:	2b08      	cmp	r3, #8
 800133a:	d1ef      	bne.n	800131c <HAL_RCC_ClockConfig+0xec>
 800133c:	e03a      	b.n	80013b4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d111      	bne.n	800136a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001346:	e009      	b.n	800135c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001348:	f7ff f8cc 	bl	80004e4 <HAL_GetTick>
 800134c:	0002      	movs	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	4a47      	ldr	r2, [pc, #284]	; (8001470 <HAL_RCC_ClockConfig+0x240>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d901      	bls.n	800135c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e081      	b.n	8001460 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800135c:	4b43      	ldr	r3, [pc, #268]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	220c      	movs	r2, #12
 8001362:	4013      	ands	r3, r2
 8001364:	2b0c      	cmp	r3, #12
 8001366:	d1ef      	bne.n	8001348 <HAL_RCC_ClockConfig+0x118>
 8001368:	e024      	b.n	80013b4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d11b      	bne.n	80013aa <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001372:	e009      	b.n	8001388 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001374:	f7ff f8b6 	bl	80004e4 <HAL_GetTick>
 8001378:	0002      	movs	r2, r0
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	4a3c      	ldr	r2, [pc, #240]	; (8001470 <HAL_RCC_ClockConfig+0x240>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e06b      	b.n	8001460 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001388:	4b38      	ldr	r3, [pc, #224]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	220c      	movs	r2, #12
 800138e:	4013      	ands	r3, r2
 8001390:	2b04      	cmp	r3, #4
 8001392:	d1ef      	bne.n	8001374 <HAL_RCC_ClockConfig+0x144>
 8001394:	e00e      	b.n	80013b4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001396:	f7ff f8a5 	bl	80004e4 <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	4a33      	ldr	r2, [pc, #204]	; (8001470 <HAL_RCC_ClockConfig+0x240>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e05a      	b.n	8001460 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80013aa:	4b30      	ldr	r3, [pc, #192]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	220c      	movs	r2, #12
 80013b0:	4013      	ands	r3, r2
 80013b2:	d1f0      	bne.n	8001396 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013b4:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <HAL_RCC_ClockConfig+0x238>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2201      	movs	r2, #1
 80013ba:	4013      	ands	r3, r2
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d211      	bcs.n	80013e6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c2:	4b29      	ldr	r3, [pc, #164]	; (8001468 <HAL_RCC_ClockConfig+0x238>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2201      	movs	r2, #1
 80013c8:	4393      	bics	r3, r2
 80013ca:	0019      	movs	r1, r3
 80013cc:	4b26      	ldr	r3, [pc, #152]	; (8001468 <HAL_RCC_ClockConfig+0x238>)
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d4:	4b24      	ldr	r3, [pc, #144]	; (8001468 <HAL_RCC_ClockConfig+0x238>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2201      	movs	r2, #1
 80013da:	4013      	ands	r3, r2
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d001      	beq.n	80013e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e03c      	b.n	8001460 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2204      	movs	r2, #4
 80013ec:	4013      	ands	r3, r2
 80013ee:	d009      	beq.n	8001404 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f0:	4b1e      	ldr	r3, [pc, #120]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <HAL_RCC_ClockConfig+0x244>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	0019      	movs	r1, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 8001400:	430a      	orrs	r2, r1
 8001402:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2208      	movs	r2, #8
 800140a:	4013      	ands	r3, r2
 800140c:	d00a      	beq.n	8001424 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	4a19      	ldr	r2, [pc, #100]	; (8001478 <HAL_RCC_ClockConfig+0x248>)
 8001414:	4013      	ands	r3, r2
 8001416:	0019      	movs	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	00da      	lsls	r2, r3, #3
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 8001420:	430a      	orrs	r2, r1
 8001422:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001424:	f000 f82e 	bl	8001484 <HAL_RCC_GetSysClockFreq>
 8001428:	0001      	movs	r1, r0
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_RCC_ClockConfig+0x23c>)
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	220f      	movs	r2, #15
 8001432:	4013      	ands	r3, r2
 8001434:	4a11      	ldr	r2, [pc, #68]	; (800147c <HAL_RCC_ClockConfig+0x24c>)
 8001436:	5cd3      	ldrb	r3, [r2, r3]
 8001438:	000a      	movs	r2, r1
 800143a:	40da      	lsrs	r2, r3
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_RCC_ClockConfig+0x250>)
 800143e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001440:	250b      	movs	r5, #11
 8001442:	197c      	adds	r4, r7, r5
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff f817 	bl	8000478 <HAL_InitTick>
 800144a:	0003      	movs	r3, r0
 800144c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800144e:	197b      	adds	r3, r7, r5
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001456:	230b      	movs	r3, #11
 8001458:	18fb      	adds	r3, r7, r3
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	e000      	b.n	8001460 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b004      	add	sp, #16
 8001466:	bdb0      	pop	{r4, r5, r7, pc}
 8001468:	40022000 	.word	0x40022000
 800146c:	40021000 	.word	0x40021000
 8001470:	00001388 	.word	0x00001388
 8001474:	fffff8ff 	.word	0xfffff8ff
 8001478:	ffffc7ff 	.word	0xffffc7ff
 800147c:	080041f0 	.word	0x080041f0
 8001480:	20000000 	.word	0x20000000

08001484 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800148a:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <HAL_RCC_GetSysClockFreq+0xf4>)
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	220c      	movs	r2, #12
 8001494:	4013      	ands	r3, r2
 8001496:	2b08      	cmp	r3, #8
 8001498:	d00e      	beq.n	80014b8 <HAL_RCC_GetSysClockFreq+0x34>
 800149a:	2b0c      	cmp	r3, #12
 800149c:	d00f      	beq.n	80014be <HAL_RCC_GetSysClockFreq+0x3a>
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d157      	bne.n	8001552 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80014a2:	4b35      	ldr	r3, [pc, #212]	; (8001578 <HAL_RCC_GetSysClockFreq+0xf4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2210      	movs	r2, #16
 80014a8:	4013      	ands	r3, r2
 80014aa:	d002      	beq.n	80014b2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80014ac:	4b33      	ldr	r3, [pc, #204]	; (800157c <HAL_RCC_GetSysClockFreq+0xf8>)
 80014ae:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80014b0:	e05d      	b.n	800156e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80014b2:	4b33      	ldr	r3, [pc, #204]	; (8001580 <HAL_RCC_GetSysClockFreq+0xfc>)
 80014b4:	613b      	str	r3, [r7, #16]
      break;
 80014b6:	e05a      	b.n	800156e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014b8:	4b32      	ldr	r3, [pc, #200]	; (8001584 <HAL_RCC_GetSysClockFreq+0x100>)
 80014ba:	613b      	str	r3, [r7, #16]
      break;
 80014bc:	e057      	b.n	800156e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	0c9b      	lsrs	r3, r3, #18
 80014c2:	220f      	movs	r2, #15
 80014c4:	4013      	ands	r3, r2
 80014c6:	4a30      	ldr	r2, [pc, #192]	; (8001588 <HAL_RCC_GetSysClockFreq+0x104>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	0d9b      	lsrs	r3, r3, #22
 80014d0:	2203      	movs	r2, #3
 80014d2:	4013      	ands	r3, r2
 80014d4:	3301      	adds	r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_RCC_GetSysClockFreq+0xf4>)
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	025b      	lsls	r3, r3, #9
 80014e0:	4013      	ands	r3, r2
 80014e2:	d00f      	beq.n	8001504 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	000a      	movs	r2, r1
 80014e8:	0152      	lsls	r2, r2, #5
 80014ea:	1a52      	subs	r2, r2, r1
 80014ec:	0193      	lsls	r3, r2, #6
 80014ee:	1a9b      	subs	r3, r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	185b      	adds	r3, r3, r1
 80014f4:	025b      	lsls	r3, r3, #9
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	0018      	movs	r0, r3
 80014fa:	f7fe fe05 	bl	8000108 <__udivsi3>
 80014fe:	0003      	movs	r3, r0
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	e023      	b.n	800154c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2210      	movs	r2, #16
 800150a:	4013      	ands	r3, r2
 800150c:	d00f      	beq.n	800152e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800150e:	68b9      	ldr	r1, [r7, #8]
 8001510:	000a      	movs	r2, r1
 8001512:	0152      	lsls	r2, r2, #5
 8001514:	1a52      	subs	r2, r2, r1
 8001516:	0193      	lsls	r3, r2, #6
 8001518:	1a9b      	subs	r3, r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	185b      	adds	r3, r3, r1
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	0018      	movs	r0, r3
 8001524:	f7fe fdf0 	bl	8000108 <__udivsi3>
 8001528:	0003      	movs	r3, r0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e00e      	b.n	800154c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800152e:	68b9      	ldr	r1, [r7, #8]
 8001530:	000a      	movs	r2, r1
 8001532:	0152      	lsls	r2, r2, #5
 8001534:	1a52      	subs	r2, r2, r1
 8001536:	0193      	lsls	r3, r2, #6
 8001538:	1a9b      	subs	r3, r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	185b      	adds	r3, r3, r1
 800153e:	029b      	lsls	r3, r3, #10
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	0018      	movs	r0, r3
 8001544:	f7fe fde0 	bl	8000108 <__udivsi3>
 8001548:	0003      	movs	r3, r0
 800154a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	613b      	str	r3, [r7, #16]
      break;
 8001550:	e00d      	b.n	800156e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	0b5b      	lsrs	r3, r3, #13
 8001558:	2207      	movs	r2, #7
 800155a:	4013      	ands	r3, r2
 800155c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	0212      	lsls	r2, r2, #8
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
      break;
 800156c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800156e:	693b      	ldr	r3, [r7, #16]
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b006      	add	sp, #24
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000
 800157c:	003d0900 	.word	0x003d0900
 8001580:	00f42400 	.word	0x00f42400
 8001584:	007a1200 	.word	0x007a1200
 8001588:	08004208 	.word	0x08004208

0800158c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001590:	4b02      	ldr	r3, [pc, #8]	; (800159c <HAL_RCC_GetHCLKFreq+0x10>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	20000000 	.word	0x20000000

080015a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015a4:	f7ff fff2 	bl	800158c <HAL_RCC_GetHCLKFreq>
 80015a8:	0001      	movs	r1, r0
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	2207      	movs	r2, #7
 80015b2:	4013      	ands	r3, r2
 80015b4:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	40d9      	lsrs	r1, r3
 80015ba:	000b      	movs	r3, r1
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	40021000 	.word	0x40021000
 80015c8:	08004200 	.word	0x08004200

080015cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015d0:	f7ff ffdc 	bl	800158c <HAL_RCC_GetHCLKFreq>
 80015d4:	0001      	movs	r1, r0
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	0adb      	lsrs	r3, r3, #11
 80015dc:	2207      	movs	r2, #7
 80015de:	4013      	ands	r3, r2
 80015e0:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80015e2:	5cd3      	ldrb	r3, [r2, r3]
 80015e4:	40d9      	lsrs	r1, r3
 80015e6:	000b      	movs	r3, r1
}
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	40021000 	.word	0x40021000
 80015f4:	08004200 	.word	0x08004200

080015f8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2220      	movs	r2, #32
 8001606:	4013      	ands	r3, r2
 8001608:	d106      	bne.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	4013      	ands	r3, r2
 8001614:	d100      	bne.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8001616:	e0dd      	b.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001618:	2317      	movs	r3, #23
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001620:	4ba4      	ldr	r3, [pc, #656]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	055b      	lsls	r3, r3, #21
 8001628:	4013      	ands	r3, r2
 800162a:	d10a      	bne.n	8001642 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162c:	4ba1      	ldr	r3, [pc, #644]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800162e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001630:	4ba0      	ldr	r3, [pc, #640]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001632:	2180      	movs	r1, #128	; 0x80
 8001634:	0549      	lsls	r1, r1, #21
 8001636:	430a      	orrs	r2, r1
 8001638:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800163a:	2317      	movs	r3, #23
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001642:	4b9d      	ldr	r3, [pc, #628]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4013      	ands	r3, r2
 800164c:	d11a      	bne.n	8001684 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164e:	4b9a      	ldr	r3, [pc, #616]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b99      	ldr	r3, [pc, #612]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	0049      	lsls	r1, r1, #1
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165c:	f7fe ff42 	bl	80004e4 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	e008      	b.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001666:	f7fe ff3d 	bl	80004e4 <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b64      	cmp	r3, #100	; 0x64
 8001672:	d901      	bls.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e118      	b.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	4b8f      	ldr	r3, [pc, #572]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4013      	ands	r3, r2
 8001682:	d0f0      	beq.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001684:	4b8b      	ldr	r3, [pc, #556]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	23c0      	movs	r3, #192	; 0xc0
 800168a:	039b      	lsls	r3, r3, #14
 800168c:	4013      	ands	r3, r2
 800168e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	23c0      	movs	r3, #192	; 0xc0
 8001696:	039b      	lsls	r3, r3, #14
 8001698:	4013      	ands	r3, r2
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	429a      	cmp	r2, r3
 800169e:	d107      	bne.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	23c0      	movs	r3, #192	; 0xc0
 80016a6:	039b      	lsls	r3, r3, #14
 80016a8:	4013      	ands	r3, r2
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d013      	beq.n	80016d8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	23c0      	movs	r3, #192	; 0xc0
 80016b6:	029b      	lsls	r3, r3, #10
 80016b8:	401a      	ands	r2, r3
 80016ba:	23c0      	movs	r3, #192	; 0xc0
 80016bc:	029b      	lsls	r3, r3, #10
 80016be:	429a      	cmp	r2, r3
 80016c0:	d10a      	bne.n	80016d8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80016c2:	4b7c      	ldr	r3, [pc, #496]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	029b      	lsls	r3, r3, #10
 80016ca:	401a      	ands	r2, r3
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	029b      	lsls	r3, r3, #10
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d101      	bne.n	80016d8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0e8      	b.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80016d8:	4b76      	ldr	r3, [pc, #472]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80016da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016dc:	23c0      	movs	r3, #192	; 0xc0
 80016de:	029b      	lsls	r3, r3, #10
 80016e0:	4013      	ands	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d049      	beq.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	23c0      	movs	r3, #192	; 0xc0
 80016f0:	029b      	lsls	r3, r3, #10
 80016f2:	4013      	ands	r3, r2
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d004      	beq.n	8001704 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2220      	movs	r2, #32
 8001700:	4013      	ands	r3, r2
 8001702:	d10d      	bne.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	23c0      	movs	r3, #192	; 0xc0
 800170a:	029b      	lsls	r3, r3, #10
 800170c:	4013      	ands	r3, r2
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d034      	beq.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	4013      	ands	r3, r2
 800171e:	d02e      	beq.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001720:	4b64      	ldr	r3, [pc, #400]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001724:	4a65      	ldr	r2, [pc, #404]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001726:	4013      	ands	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800172a:	4b62      	ldr	r3, [pc, #392]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800172c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800172e:	4b61      	ldr	r3, [pc, #388]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	0309      	lsls	r1, r1, #12
 8001734:	430a      	orrs	r2, r1
 8001736:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001738:	4b5e      	ldr	r3, [pc, #376]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800173a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800173c:	4b5d      	ldr	r3, [pc, #372]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800173e:	4960      	ldr	r1, [pc, #384]	; (80018c0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001740:	400a      	ands	r2, r1
 8001742:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001744:	4b5b      	ldr	r3, [pc, #364]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4013      	ands	r3, r2
 8001752:	d014      	beq.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7fe fec6 	bl	80004e4 <HAL_GetTick>
 8001758:	0003      	movs	r3, r0
 800175a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800175c:	e009      	b.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7fe fec1 	bl	80004e4 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	4a56      	ldr	r2, [pc, #344]	; (80018c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e09b      	b.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001772:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001774:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4013      	ands	r3, r2
 800177c:	d0ef      	beq.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	23c0      	movs	r3, #192	; 0xc0
 8001784:	029b      	lsls	r3, r3, #10
 8001786:	401a      	ands	r2, r3
 8001788:	23c0      	movs	r3, #192	; 0xc0
 800178a:	029b      	lsls	r3, r3, #10
 800178c:	429a      	cmp	r2, r3
 800178e:	d10c      	bne.n	80017aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001790:	4b48      	ldr	r3, [pc, #288]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a4c      	ldr	r2, [pc, #304]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001796:	4013      	ands	r3, r2
 8001798:	0019      	movs	r1, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	23c0      	movs	r3, #192	; 0xc0
 80017a0:	039b      	lsls	r3, r3, #14
 80017a2:	401a      	ands	r2, r3
 80017a4:	4b43      	ldr	r3, [pc, #268]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017a6:	430a      	orrs	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	4b42      	ldr	r3, [pc, #264]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	23c0      	movs	r3, #192	; 0xc0
 80017b4:	029b      	lsls	r3, r3, #10
 80017b6:	401a      	ands	r2, r3
 80017b8:	4b3e      	ldr	r3, [pc, #248]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017ba:	430a      	orrs	r2, r1
 80017bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017be:	2317      	movs	r3, #23
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c8:	4b3a      	ldr	r3, [pc, #232]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017cc:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017ce:	493f      	ldr	r1, [pc, #252]	; (80018cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2201      	movs	r2, #1
 80017da:	4013      	ands	r3, r2
 80017dc:	d009      	beq.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017de:	4b35      	ldr	r3, [pc, #212]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	2203      	movs	r2, #3
 80017e4:	4393      	bics	r3, r2
 80017e6:	0019      	movs	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	4b31      	ldr	r3, [pc, #196]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017ee:	430a      	orrs	r2, r1
 80017f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2202      	movs	r2, #2
 80017f8:	4013      	ands	r3, r2
 80017fa:	d009      	beq.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80017fc:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001800:	220c      	movs	r2, #12
 8001802:	4393      	bics	r3, r2
 8001804:	0019      	movs	r1, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800180c:	430a      	orrs	r2, r1
 800180e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2204      	movs	r2, #4
 8001816:	4013      	ands	r3, r2
 8001818:	d009      	beq.n	800182e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800181a:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a2c      	ldr	r2, [pc, #176]	; (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001820:	4013      	ands	r3, r2
 8001822:	0019      	movs	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800182a:	430a      	orrs	r2, r1
 800182c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2208      	movs	r2, #8
 8001834:	4013      	ands	r3, r2
 8001836:	d009      	beq.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800183a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183c:	4a25      	ldr	r2, [pc, #148]	; (80018d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800183e:	4013      	ands	r3, r2
 8001840:	0019      	movs	r1, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699a      	ldr	r2, [r3, #24]
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001848:	430a      	orrs	r2, r1
 800184a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4013      	ands	r3, r2
 8001856:	d009      	beq.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185c:	4a17      	ldr	r2, [pc, #92]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800185e:	4013      	ands	r3, r2
 8001860:	0019      	movs	r1, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69da      	ldr	r2, [r3, #28]
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001868:	430a      	orrs	r2, r1
 800186a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2240      	movs	r2, #64	; 0x40
 8001872:	4013      	ands	r3, r2
 8001874:	d009      	beq.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800187c:	4013      	ands	r3, r2
 800187e:	0019      	movs	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001886:	430a      	orrs	r2, r1
 8001888:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	4013      	ands	r3, r2
 8001892:	d009      	beq.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001898:	4a10      	ldr	r2, [pc, #64]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800189a:	4013      	ands	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1a      	ldr	r2, [r3, #32]
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80018a4:	430a      	orrs	r2, r1
 80018a6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	0018      	movs	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b006      	add	sp, #24
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40007000 	.word	0x40007000
 80018bc:	fffcffff 	.word	0xfffcffff
 80018c0:	fff7ffff 	.word	0xfff7ffff
 80018c4:	00001388 	.word	0x00001388
 80018c8:	ffcfffff 	.word	0xffcfffff
 80018cc:	efffffff 	.word	0xefffffff
 80018d0:	fffff3ff 	.word	0xfffff3ff
 80018d4:	ffffcfff 	.word	0xffffcfff
 80018d8:	fbffffff 	.word	0xfbffffff
 80018dc:	fff3ffff 	.word	0xfff3ffff

080018e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e01e      	b.n	8001930 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2239      	movs	r2, #57	; 0x39
 80018f6:	5c9b      	ldrb	r3, [r3, r2]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d107      	bne.n	800190e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2238      	movs	r2, #56	; 0x38
 8001902:	2100      	movs	r1, #0
 8001904:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0018      	movs	r0, r3
 800190a:	f001 fa59 	bl	8002dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2239      	movs	r2, #57	; 0x39
 8001912:	2102      	movs	r1, #2
 8001914:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3304      	adds	r3, #4
 800191e:	0019      	movs	r1, r3
 8001920:	0010      	movs	r0, r2
 8001922:	f000 f8e3 	bl	8001aec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2239      	movs	r2, #57	; 0x39
 800192a:	2101      	movs	r1, #1
 800192c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	0018      	movs	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	b002      	add	sp, #8
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6839      	ldr	r1, [r7, #0]
 8001948:	2201      	movs	r2, #1
 800194a:	0018      	movs	r0, r3
 800194c:	f000 fa30 	bl	8001db0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2207      	movs	r2, #7
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b06      	cmp	r3, #6
 8001960:	d007      	beq.n	8001972 <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2101      	movs	r1, #1
 800196e:	430a      	orrs	r2, r1
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	0018      	movs	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	b004      	add	sp, #16
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2238      	movs	r2, #56	; 0x38
 800198c:	5c9b      	ldrb	r3, [r3, r2]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001992:	2302      	movs	r3, #2
 8001994:	e0a4      	b.n	8001ae0 <HAL_TIM_PWM_ConfigChannel+0x164>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2238      	movs	r2, #56	; 0x38
 800199a:	2101      	movs	r1, #1
 800199c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2239      	movs	r2, #57	; 0x39
 80019a2:	2102      	movs	r1, #2
 80019a4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d029      	beq.n	8001a00 <HAL_TIM_PWM_ConfigChannel+0x84>
 80019ac:	d802      	bhi.n	80019b4 <HAL_TIM_PWM_ConfigChannel+0x38>
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80019b2:	e08c      	b.n	8001ace <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d046      	beq.n	8001a46 <HAL_TIM_PWM_ConfigChannel+0xca>
 80019b8:	2b0c      	cmp	r3, #12
 80019ba:	d065      	beq.n	8001a88 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80019bc:	e087      	b.n	8001ace <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	0011      	movs	r1, r2
 80019c6:	0018      	movs	r0, r3
 80019c8:	f000 f8ee 	bl	8001ba8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2108      	movs	r1, #8
 80019d8:	430a      	orrs	r2, r1
 80019da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699a      	ldr	r2, [r3, #24]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2104      	movs	r1, #4
 80019e8:	438a      	bics	r2, r1
 80019ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6999      	ldr	r1, [r3, #24]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	619a      	str	r2, [r3, #24]
      break;
 80019fe:	e066      	b.n	8001ace <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	0011      	movs	r1, r2
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f000 f909 	bl	8001c20 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699a      	ldr	r2, [r3, #24]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	0109      	lsls	r1, r1, #4
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699a      	ldr	r2, [r3, #24]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	492f      	ldr	r1, [pc, #188]	; (8001ae8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6999      	ldr	r1, [r3, #24]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	021a      	lsls	r2, r3, #8
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	619a      	str	r2, [r3, #24]
      break;
 8001a44:	e043      	b.n	8001ace <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	0011      	movs	r1, r2
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 f928 	bl	8001ca4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2108      	movs	r1, #8
 8001a60:	430a      	orrs	r2, r1
 8001a62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	69da      	ldr	r2, [r3, #28]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2104      	movs	r1, #4
 8001a70:	438a      	bics	r2, r1
 8001a72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	69d9      	ldr	r1, [r3, #28]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	61da      	str	r2, [r3, #28]
      break;
 8001a86:	e022      	b.n	8001ace <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	0011      	movs	r1, r2
 8001a90:	0018      	movs	r0, r3
 8001a92:	f000 f947 	bl	8001d24 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	69da      	ldr	r2, [r3, #28]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	0109      	lsls	r1, r1, #4
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	69da      	ldr	r2, [r3, #28]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	490d      	ldr	r1, [pc, #52]	; (8001ae8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	69d9      	ldr	r1, [r3, #28]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	021a      	lsls	r2, r3, #8
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	61da      	str	r2, [r3, #28]
      break;
 8001acc:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2239      	movs	r2, #57	; 0x39
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2238      	movs	r2, #56	; 0x38
 8001ada:	2100      	movs	r1, #0
 8001adc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b004      	add	sp, #16
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	fffffbff 	.word	0xfffffbff

08001aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	05db      	lsls	r3, r3, #23
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d00b      	beq.n	8001b1e <TIM_Base_SetConfig+0x32>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <TIM_Base_SetConfig+0xac>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d007      	beq.n	8001b1e <TIM_Base_SetConfig+0x32>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a22      	ldr	r2, [pc, #136]	; (8001b9c <TIM_Base_SetConfig+0xb0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d003      	beq.n	8001b1e <TIM_Base_SetConfig+0x32>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a21      	ldr	r2, [pc, #132]	; (8001ba0 <TIM_Base_SetConfig+0xb4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d108      	bne.n	8001b30 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2270      	movs	r2, #112	; 0x70
 8001b22:	4393      	bics	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	05db      	lsls	r3, r3, #23
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d00b      	beq.n	8001b52 <TIM_Base_SetConfig+0x66>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a16      	ldr	r2, [pc, #88]	; (8001b98 <TIM_Base_SetConfig+0xac>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <TIM_Base_SetConfig+0x66>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a15      	ldr	r2, [pc, #84]	; (8001b9c <TIM_Base_SetConfig+0xb0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d003      	beq.n	8001b52 <TIM_Base_SetConfig+0x66>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <TIM_Base_SetConfig+0xb4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d108      	bne.n	8001b64 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <TIM_Base_SetConfig+0xb8>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2280      	movs	r2, #128	; 0x80
 8001b68:	4393      	bics	r3, r2
 8001b6a:	001a      	movs	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	615a      	str	r2, [r3, #20]
}
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b004      	add	sp, #16
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40000400 	.word	0x40000400
 8001b9c:	40010800 	.word	0x40010800
 8001ba0:	40011400 	.word	0x40011400
 8001ba4:	fffffcff 	.word	0xfffffcff

08001ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4393      	bics	r3, r2
 8001bba:	001a      	movs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2270      	movs	r2, #112	; 0x70
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2203      	movs	r2, #3
 8001bde:	4393      	bics	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	4393      	bics	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	621a      	str	r2, [r3, #32]
}
 8001c18:	46c0      	nop			; (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b006      	add	sp, #24
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	2210      	movs	r2, #16
 8001c30:	4393      	bics	r3, r2
 8001c32:	001a      	movs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <TIM_OC2_SetConfig+0x7c>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <TIM_OC2_SetConfig+0x80>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	4393      	bics	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	621a      	str	r2, [r3, #32]
}
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b006      	add	sp, #24
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	ffff8fff 	.word	0xffff8fff
 8001ca0:	fffffcff 	.word	0xfffffcff

08001ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4a1a      	ldr	r2, [pc, #104]	; (8001d1c <TIM_OC3_SetConfig+0x78>)
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2270      	movs	r2, #112	; 0x70
 8001cd0:	4393      	bics	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	4393      	bics	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <TIM_OC3_SetConfig+0x7c>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	621a      	str	r2, [r3, #32]
}
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b006      	add	sp, #24
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	fffffeff 	.word	0xfffffeff
 8001d20:	fffffdff 	.word	0xfffffdff

08001d24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <TIM_OC4_SetConfig+0x7c>)
 8001d34:	401a      	ands	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4a15      	ldr	r2, [pc, #84]	; (8001da4 <TIM_OC4_SetConfig+0x80>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <TIM_OC4_SetConfig+0x84>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	4a10      	ldr	r2, [pc, #64]	; (8001dac <TIM_OC4_SetConfig+0x88>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	031b      	lsls	r3, r3, #12
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	621a      	str	r2, [r3, #32]
}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b006      	add	sp, #24
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	ffffefff 	.word	0xffffefff
 8001da4:	ffff8fff 	.word	0xffff8fff
 8001da8:	fffffcff 	.word	0xfffffcff
 8001dac:	ffffdfff 	.word	0xffffdfff

08001db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	221f      	movs	r2, #31
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	0013      	movs	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	43d2      	mvns	r2, r2
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a1a      	ldr	r2, [r3, #32]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	211f      	movs	r1, #31
 8001de0:	400b      	ands	r3, r1
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4099      	lsls	r1, r3
 8001de6:	000b      	movs	r3, r1
 8001de8:	431a      	orrs	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	621a      	str	r2, [r3, #32]
}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b006      	add	sp, #24
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2238      	movs	r2, #56	; 0x38
 8001e04:	5c9b      	ldrb	r3, [r3, r2]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e032      	b.n	8001e74 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2238      	movs	r2, #56	; 0x38
 8001e12:	2101      	movs	r1, #1
 8001e14:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2239      	movs	r2, #57	; 0x39
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2270      	movs	r2, #112	; 0x70
 8001e32:	4393      	bics	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2280      	movs	r2, #128	; 0x80
 8001e44:	4393      	bics	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2239      	movs	r2, #57	; 0x39
 8001e66:	2101      	movs	r1, #1
 8001e68:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2238      	movs	r2, #56	; 0x38
 8001e6e:	2100      	movs	r1, #0
 8001e70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b004      	add	sp, #16
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2238      	movs	r2, #56	; 0x38
 8001e8a:	5c9b      	ldrb	r3, [r3, r2]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_TIMEx_RemapConfig+0x18>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e00c      	b.n	8001eae <HAL_TIMEx_RemapConfig+0x32>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2238      	movs	r2, #56	; 0x38
 8001e98:	2101      	movs	r1, #1
 8001e9a:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2238      	movs	r2, #56	; 0x38
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	0018      	movs	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b002      	add	sp, #8
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e044      	b.n	8001f54 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d107      	bne.n	8001ee2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2270      	movs	r2, #112	; 0x70
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	0018      	movs	r0, r3
 8001ede:	f000 ffc3 	bl	8002e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2224      	movs	r2, #36	; 0x24
 8001ee6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	438a      	bics	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	0018      	movs	r0, r3
 8001efc:	f000 f8d8 	bl	80020b0 <UART_SetConfig>
 8001f00:	0003      	movs	r3, r0
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e024      	b.n	8001f54 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f000 fbff 	bl	8002718 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	490d      	ldr	r1, [pc, #52]	; (8001f5c <HAL_UART_Init+0xa4>)
 8001f26:	400a      	ands	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	212a      	movs	r1, #42	; 0x2a
 8001f36:	438a      	bics	r2, r1
 8001f38:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2101      	movs	r1, #1
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f000 fc97 	bl	8002880 <UART_CheckIdleState>
 8001f52:	0003      	movs	r3, r0
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	ffffb7ff 	.word	0xffffb7ff

08001f60 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	1dbb      	adds	r3, r7, #6
 8001f6e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d000      	beq.n	8001f7a <HAL_UART_Transmit+0x1a>
 8001f78:	e094      	b.n	80020a4 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_UART_Transmit+0x28>
 8001f80:	1dbb      	adds	r3, r7, #6
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e08c      	b.n	80020a6 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	015b      	lsls	r3, r3, #5
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d109      	bne.n	8001fac <HAL_UART_Transmit+0x4c>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d105      	bne.n	8001fac <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d001      	beq.n	8001fac <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e07c      	b.n	80020a6 <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2270      	movs	r2, #112	; 0x70
 8001fb0:	5c9b      	ldrb	r3, [r3, r2]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_UART_Transmit+0x5a>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e075      	b.n	80020a6 <HAL_UART_Transmit+0x146>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2270      	movs	r2, #112	; 0x70
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2221      	movs	r2, #33	; 0x21
 8001fcc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001fce:	f7fe fa89 	bl	80004e4 <HAL_GetTick>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1dba      	adds	r2, r7, #6
 8001fda:	2150      	movs	r1, #80	; 0x50
 8001fdc:	8812      	ldrh	r2, [r2, #0]
 8001fde:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1dba      	adds	r2, r7, #6
 8001fe4:	2152      	movs	r1, #82	; 0x52
 8001fe6:	8812      	ldrh	r2, [r2, #0]
 8001fe8:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	015b      	lsls	r3, r3, #5
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d108      	bne.n	8002008 <HAL_UART_Transmit+0xa8>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d104      	bne.n	8002008 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	e003      	b.n	8002010 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800200c:	2300      	movs	r3, #0
 800200e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002010:	e02c      	b.n	800206c <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	0013      	movs	r3, r2
 800201c:	2200      	movs	r2, #0
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	f000 fc74 	bl	800290c <UART_WaitOnFlagUntilTimeout>
 8002024:	1e03      	subs	r3, r0, #0
 8002026:	d001      	beq.n	800202c <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e03c      	b.n	80020a6 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10b      	bne.n	800204a <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	001a      	movs	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	05d2      	lsls	r2, r2, #23
 800203e:	0dd2      	lsrs	r2, r2, #23
 8002040:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	3302      	adds	r3, #2
 8002046:	61bb      	str	r3, [r7, #24]
 8002048:	e007      	b.n	800205a <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3301      	adds	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2252      	movs	r2, #82	; 0x52
 800205e:	5a9b      	ldrh	r3, [r3, r2]
 8002060:	b29b      	uxth	r3, r3
 8002062:	3b01      	subs	r3, #1
 8002064:	b299      	uxth	r1, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2252      	movs	r2, #82	; 0x52
 800206a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2252      	movs	r2, #82	; 0x52
 8002070:	5a9b      	ldrh	r3, [r3, r2]
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1cc      	bne.n	8002012 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	0013      	movs	r3, r2
 8002082:	2200      	movs	r2, #0
 8002084:	2140      	movs	r1, #64	; 0x40
 8002086:	f000 fc41 	bl	800290c <UART_WaitOnFlagUntilTimeout>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d001      	beq.n	8002092 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e009      	b.n	80020a6 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2220      	movs	r2, #32
 8002096:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2270      	movs	r2, #112	; 0x70
 800209c:	2100      	movs	r1, #0
 800209e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	e000      	b.n	80020a6 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 80020a4:	2302      	movs	r3, #2
  }
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b008      	add	sp, #32
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020b0:	b5b0      	push	{r4, r5, r7, lr}
 80020b2:	b08e      	sub	sp, #56	; 0x38
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80020b8:	231b      	movs	r3, #27
 80020ba:	2218      	movs	r2, #24
 80020bc:	4694      	mov	ip, r2
 80020be:	44bc      	add	ip, r7
 80020c0:	4463      	add	r3, ip
 80020c2:	2210      	movs	r2, #16
 80020c4:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80020ca:	2313      	movs	r3, #19
 80020cc:	2218      	movs	r2, #24
 80020ce:	4694      	mov	ip, r2
 80020d0:	44bc      	add	ip, r7
 80020d2:	4463      	add	r3, ip
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4aca      	ldr	r2, [pc, #808]	; (8002424 <UART_SetConfig+0x374>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	0019      	movs	r1, r3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002106:	430a      	orrs	r2, r1
 8002108:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4ac5      	ldr	r2, [pc, #788]	; (8002428 <UART_SetConfig+0x378>)
 8002112:	4013      	ands	r3, r2
 8002114:	0019      	movs	r1, r3
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4abf      	ldr	r2, [pc, #764]	; (800242c <UART_SetConfig+0x37c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d004      	beq.n	800213c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002138:	4313      	orrs	r3, r2
 800213a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	4abb      	ldr	r2, [pc, #748]	; (8002430 <UART_SetConfig+0x380>)
 8002144:	4013      	ands	r3, r2
 8002146:	0019      	movs	r1, r3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800214e:	430a      	orrs	r2, r1
 8002150:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4ab7      	ldr	r2, [pc, #732]	; (8002434 <UART_SetConfig+0x384>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d134      	bne.n	80021c6 <UART_SetConfig+0x116>
 800215c:	4bb6      	ldr	r3, [pc, #728]	; (8002438 <UART_SetConfig+0x388>)
 800215e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002160:	2203      	movs	r2, #3
 8002162:	4013      	ands	r3, r2
 8002164:	2b01      	cmp	r3, #1
 8002166:	d015      	beq.n	8002194 <UART_SetConfig+0xe4>
 8002168:	d304      	bcc.n	8002174 <UART_SetConfig+0xc4>
 800216a:	2b02      	cmp	r3, #2
 800216c:	d00a      	beq.n	8002184 <UART_SetConfig+0xd4>
 800216e:	2b03      	cmp	r3, #3
 8002170:	d018      	beq.n	80021a4 <UART_SetConfig+0xf4>
 8002172:	e01f      	b.n	80021b4 <UART_SetConfig+0x104>
 8002174:	231b      	movs	r3, #27
 8002176:	2218      	movs	r2, #24
 8002178:	4694      	mov	ip, r2
 800217a:	44bc      	add	ip, r7
 800217c:	4463      	add	r3, ip
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	e0c5      	b.n	8002310 <UART_SetConfig+0x260>
 8002184:	231b      	movs	r3, #27
 8002186:	2218      	movs	r2, #24
 8002188:	4694      	mov	ip, r2
 800218a:	44bc      	add	ip, r7
 800218c:	4463      	add	r3, ip
 800218e:	2202      	movs	r2, #2
 8002190:	701a      	strb	r2, [r3, #0]
 8002192:	e0bd      	b.n	8002310 <UART_SetConfig+0x260>
 8002194:	231b      	movs	r3, #27
 8002196:	2218      	movs	r2, #24
 8002198:	4694      	mov	ip, r2
 800219a:	44bc      	add	ip, r7
 800219c:	4463      	add	r3, ip
 800219e:	2204      	movs	r2, #4
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	e0b5      	b.n	8002310 <UART_SetConfig+0x260>
 80021a4:	231b      	movs	r3, #27
 80021a6:	2218      	movs	r2, #24
 80021a8:	4694      	mov	ip, r2
 80021aa:	44bc      	add	ip, r7
 80021ac:	4463      	add	r3, ip
 80021ae:	2208      	movs	r2, #8
 80021b0:	701a      	strb	r2, [r3, #0]
 80021b2:	e0ad      	b.n	8002310 <UART_SetConfig+0x260>
 80021b4:	231b      	movs	r3, #27
 80021b6:	2218      	movs	r2, #24
 80021b8:	4694      	mov	ip, r2
 80021ba:	44bc      	add	ip, r7
 80021bc:	4463      	add	r3, ip
 80021be:	2210      	movs	r2, #16
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	e0a4      	b.n	8002310 <UART_SetConfig+0x260>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a9c      	ldr	r2, [pc, #624]	; (800243c <UART_SetConfig+0x38c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d137      	bne.n	8002240 <UART_SetConfig+0x190>
 80021d0:	4b99      	ldr	r3, [pc, #612]	; (8002438 <UART_SetConfig+0x388>)
 80021d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d4:	220c      	movs	r2, #12
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d018      	beq.n	800220e <UART_SetConfig+0x15e>
 80021dc:	d802      	bhi.n	80021e4 <UART_SetConfig+0x134>
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <UART_SetConfig+0x13e>
 80021e2:	e024      	b.n	800222e <UART_SetConfig+0x17e>
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d00a      	beq.n	80021fe <UART_SetConfig+0x14e>
 80021e8:	2b0c      	cmp	r3, #12
 80021ea:	d018      	beq.n	800221e <UART_SetConfig+0x16e>
 80021ec:	e01f      	b.n	800222e <UART_SetConfig+0x17e>
 80021ee:	231b      	movs	r3, #27
 80021f0:	2218      	movs	r2, #24
 80021f2:	4694      	mov	ip, r2
 80021f4:	44bc      	add	ip, r7
 80021f6:	4463      	add	r3, ip
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	e088      	b.n	8002310 <UART_SetConfig+0x260>
 80021fe:	231b      	movs	r3, #27
 8002200:	2218      	movs	r2, #24
 8002202:	4694      	mov	ip, r2
 8002204:	44bc      	add	ip, r7
 8002206:	4463      	add	r3, ip
 8002208:	2202      	movs	r2, #2
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	e080      	b.n	8002310 <UART_SetConfig+0x260>
 800220e:	231b      	movs	r3, #27
 8002210:	2218      	movs	r2, #24
 8002212:	4694      	mov	ip, r2
 8002214:	44bc      	add	ip, r7
 8002216:	4463      	add	r3, ip
 8002218:	2204      	movs	r2, #4
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	e078      	b.n	8002310 <UART_SetConfig+0x260>
 800221e:	231b      	movs	r3, #27
 8002220:	2218      	movs	r2, #24
 8002222:	4694      	mov	ip, r2
 8002224:	44bc      	add	ip, r7
 8002226:	4463      	add	r3, ip
 8002228:	2208      	movs	r2, #8
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	e070      	b.n	8002310 <UART_SetConfig+0x260>
 800222e:	231b      	movs	r3, #27
 8002230:	2218      	movs	r2, #24
 8002232:	4694      	mov	ip, r2
 8002234:	44bc      	add	ip, r7
 8002236:	4463      	add	r3, ip
 8002238:	2210      	movs	r2, #16
 800223a:	701a      	strb	r2, [r3, #0]
 800223c:	46c0      	nop			; (mov r8, r8)
 800223e:	e067      	b.n	8002310 <UART_SetConfig+0x260>
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a7e      	ldr	r2, [pc, #504]	; (8002440 <UART_SetConfig+0x390>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d107      	bne.n	800225a <UART_SetConfig+0x1aa>
 800224a:	231b      	movs	r3, #27
 800224c:	2218      	movs	r2, #24
 800224e:	4694      	mov	ip, r2
 8002250:	44bc      	add	ip, r7
 8002252:	4463      	add	r3, ip
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e05a      	b.n	8002310 <UART_SetConfig+0x260>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a79      	ldr	r2, [pc, #484]	; (8002444 <UART_SetConfig+0x394>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d107      	bne.n	8002274 <UART_SetConfig+0x1c4>
 8002264:	231b      	movs	r3, #27
 8002266:	2218      	movs	r2, #24
 8002268:	4694      	mov	ip, r2
 800226a:	44bc      	add	ip, r7
 800226c:	4463      	add	r3, ip
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e04d      	b.n	8002310 <UART_SetConfig+0x260>
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a6c      	ldr	r2, [pc, #432]	; (800242c <UART_SetConfig+0x37c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d141      	bne.n	8002302 <UART_SetConfig+0x252>
 800227e:	4b6e      	ldr	r3, [pc, #440]	; (8002438 <UART_SetConfig+0x388>)
 8002280:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002282:	23c0      	movs	r3, #192	; 0xc0
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	4013      	ands	r3, r2
 8002288:	2280      	movs	r2, #128	; 0x80
 800228a:	00d2      	lsls	r2, r2, #3
 800228c:	4293      	cmp	r3, r2
 800228e:	d01f      	beq.n	80022d0 <UART_SetConfig+0x220>
 8002290:	2280      	movs	r2, #128	; 0x80
 8002292:	00d2      	lsls	r2, r2, #3
 8002294:	4293      	cmp	r3, r2
 8002296:	d802      	bhi.n	800229e <UART_SetConfig+0x1ee>
 8002298:	2b00      	cmp	r3, #0
 800229a:	d009      	beq.n	80022b0 <UART_SetConfig+0x200>
 800229c:	e028      	b.n	80022f0 <UART_SetConfig+0x240>
 800229e:	2280      	movs	r2, #128	; 0x80
 80022a0:	0112      	lsls	r2, r2, #4
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00c      	beq.n	80022c0 <UART_SetConfig+0x210>
 80022a6:	22c0      	movs	r2, #192	; 0xc0
 80022a8:	0112      	lsls	r2, r2, #4
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d018      	beq.n	80022e0 <UART_SetConfig+0x230>
 80022ae:	e01f      	b.n	80022f0 <UART_SetConfig+0x240>
 80022b0:	231b      	movs	r3, #27
 80022b2:	2218      	movs	r2, #24
 80022b4:	4694      	mov	ip, r2
 80022b6:	44bc      	add	ip, r7
 80022b8:	4463      	add	r3, ip
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e027      	b.n	8002310 <UART_SetConfig+0x260>
 80022c0:	231b      	movs	r3, #27
 80022c2:	2218      	movs	r2, #24
 80022c4:	4694      	mov	ip, r2
 80022c6:	44bc      	add	ip, r7
 80022c8:	4463      	add	r3, ip
 80022ca:	2202      	movs	r2, #2
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	e01f      	b.n	8002310 <UART_SetConfig+0x260>
 80022d0:	231b      	movs	r3, #27
 80022d2:	2218      	movs	r2, #24
 80022d4:	4694      	mov	ip, r2
 80022d6:	44bc      	add	ip, r7
 80022d8:	4463      	add	r3, ip
 80022da:	2204      	movs	r2, #4
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	e017      	b.n	8002310 <UART_SetConfig+0x260>
 80022e0:	231b      	movs	r3, #27
 80022e2:	2218      	movs	r2, #24
 80022e4:	4694      	mov	ip, r2
 80022e6:	44bc      	add	ip, r7
 80022e8:	4463      	add	r3, ip
 80022ea:	2208      	movs	r2, #8
 80022ec:	701a      	strb	r2, [r3, #0]
 80022ee:	e00f      	b.n	8002310 <UART_SetConfig+0x260>
 80022f0:	231b      	movs	r3, #27
 80022f2:	2218      	movs	r2, #24
 80022f4:	4694      	mov	ip, r2
 80022f6:	44bc      	add	ip, r7
 80022f8:	4463      	add	r3, ip
 80022fa:	2210      	movs	r2, #16
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	e006      	b.n	8002310 <UART_SetConfig+0x260>
 8002302:	231b      	movs	r3, #27
 8002304:	2218      	movs	r2, #24
 8002306:	4694      	mov	ip, r2
 8002308:	44bc      	add	ip, r7
 800230a:	4463      	add	r3, ip
 800230c:	2210      	movs	r2, #16
 800230e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a45      	ldr	r2, [pc, #276]	; (800242c <UART_SetConfig+0x37c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d000      	beq.n	800231c <UART_SetConfig+0x26c>
 800231a:	e09d      	b.n	8002458 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800231c:	231b      	movs	r3, #27
 800231e:	2218      	movs	r2, #24
 8002320:	4694      	mov	ip, r2
 8002322:	44bc      	add	ip, r7
 8002324:	4463      	add	r3, ip
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d00d      	beq.n	8002348 <UART_SetConfig+0x298>
 800232c:	dc02      	bgt.n	8002334 <UART_SetConfig+0x284>
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <UART_SetConfig+0x28e>
 8002332:	e01d      	b.n	8002370 <UART_SetConfig+0x2c0>
 8002334:	2b04      	cmp	r3, #4
 8002336:	d012      	beq.n	800235e <UART_SetConfig+0x2ae>
 8002338:	2b08      	cmp	r3, #8
 800233a:	d015      	beq.n	8002368 <UART_SetConfig+0x2b8>
 800233c:	e018      	b.n	8002370 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800233e:	f7ff f92f 	bl	80015a0 <HAL_RCC_GetPCLK1Freq>
 8002342:	0003      	movs	r3, r0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002346:	e01b      	b.n	8002380 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002348:	4b3b      	ldr	r3, [pc, #236]	; (8002438 <UART_SetConfig+0x388>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2210      	movs	r2, #16
 800234e:	4013      	ands	r3, r2
 8002350:	d002      	beq.n	8002358 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8002352:	4b3d      	ldr	r3, [pc, #244]	; (8002448 <UART_SetConfig+0x398>)
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8002356:	e013      	b.n	8002380 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002358:	4b3c      	ldr	r3, [pc, #240]	; (800244c <UART_SetConfig+0x39c>)
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800235c:	e010      	b.n	8002380 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800235e:	f7ff f891 	bl	8001484 <HAL_RCC_GetSysClockFreq>
 8002362:	0003      	movs	r3, r0
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002366:	e00b      	b.n	8002380 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800236e:	e007      	b.n	8002380 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002370:	2313      	movs	r3, #19
 8002372:	2218      	movs	r2, #24
 8002374:	4694      	mov	ip, r2
 8002376:	44bc      	add	ip, r7
 8002378:	4463      	add	r3, ip
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]
        break;
 800237e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	2b00      	cmp	r3, #0
 8002384:	d100      	bne.n	8002388 <UART_SetConfig+0x2d8>
 8002386:	e1a6      	b.n	80026d6 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	0013      	movs	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	189b      	adds	r3, r3, r2
 8002392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002394:	429a      	cmp	r2, r3
 8002396:	d305      	bcc.n	80023a4 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800239e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d907      	bls.n	80023b4 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 80023a4:	2313      	movs	r3, #19
 80023a6:	2218      	movs	r2, #24
 80023a8:	4694      	mov	ip, r2
 80023aa:	44bc      	add	ip, r7
 80023ac:	4463      	add	r3, ip
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e190      	b.n	80026d6 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	6939      	ldr	r1, [r7, #16]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	000b      	movs	r3, r1
 80023c2:	0e1b      	lsrs	r3, r3, #24
 80023c4:	0010      	movs	r0, r2
 80023c6:	0205      	lsls	r5, r0, #8
 80023c8:	431d      	orrs	r5, r3
 80023ca:	000b      	movs	r3, r1
 80023cc:	021c      	lsls	r4, r3, #8
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	68b8      	ldr	r0, [r7, #8]
 80023dc:	68f9      	ldr	r1, [r7, #12]
 80023de:	1900      	adds	r0, r0, r4
 80023e0:	4169      	adcs	r1, r5
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	2300      	movs	r3, #0
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f7fd ff16 	bl	8000220 <__aeabi_uldivmod>
 80023f4:	0003      	movs	r3, r0
 80023f6:	000c      	movs	r4, r1
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	4a14      	ldr	r2, [pc, #80]	; (8002450 <UART_SetConfig+0x3a0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d908      	bls.n	8002414 <UART_SetConfig+0x364>
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	4a13      	ldr	r2, [pc, #76]	; (8002454 <UART_SetConfig+0x3a4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d804      	bhi.n	8002414 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	e160      	b.n	80026d6 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8002414:	2313      	movs	r3, #19
 8002416:	2218      	movs	r2, #24
 8002418:	4694      	mov	ip, r2
 800241a:	44bc      	add	ip, r7
 800241c:	4463      	add	r3, ip
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	e158      	b.n	80026d6 <UART_SetConfig+0x626>
 8002424:	efff69f3 	.word	0xefff69f3
 8002428:	ffffcfff 	.word	0xffffcfff
 800242c:	40004800 	.word	0x40004800
 8002430:	fffff4ff 	.word	0xfffff4ff
 8002434:	40013800 	.word	0x40013800
 8002438:	40021000 	.word	0x40021000
 800243c:	40004400 	.word	0x40004400
 8002440:	40004c00 	.word	0x40004c00
 8002444:	40005000 	.word	0x40005000
 8002448:	003d0900 	.word	0x003d0900
 800244c:	00f42400 	.word	0x00f42400
 8002450:	000002ff 	.word	0x000002ff
 8002454:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	429a      	cmp	r2, r3
 8002462:	d000      	beq.n	8002466 <UART_SetConfig+0x3b6>
 8002464:	e0a9      	b.n	80025ba <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8002466:	231b      	movs	r3, #27
 8002468:	2218      	movs	r2, #24
 800246a:	4694      	mov	ip, r2
 800246c:	44bc      	add	ip, r7
 800246e:	4463      	add	r3, ip
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b08      	cmp	r3, #8
 8002474:	d86d      	bhi.n	8002552 <UART_SetConfig+0x4a2>
 8002476:	009a      	lsls	r2, r3, #2
 8002478:	4b9f      	ldr	r3, [pc, #636]	; (80026f8 <UART_SetConfig+0x648>)
 800247a:	18d3      	adds	r3, r2, r3
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002480:	f7ff f88e 	bl	80015a0 <HAL_RCC_GetPCLK1Freq>
 8002484:	0003      	movs	r3, r0
 8002486:	005a      	lsls	r2, r3, #1
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	085b      	lsrs	r3, r3, #1
 800248e:	18d2      	adds	r2, r2, r3
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	0019      	movs	r1, r3
 8002496:	0010      	movs	r0, r2
 8002498:	f7fd fe36 	bl	8000108 <__udivsi3>
 800249c:	0003      	movs	r3, r0
 800249e:	b29b      	uxth	r3, r3
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024a2:	e05e      	b.n	8002562 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024a4:	f7ff f892 	bl	80015cc <HAL_RCC_GetPCLK2Freq>
 80024a8:	0003      	movs	r3, r0
 80024aa:	005a      	lsls	r2, r3, #1
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	085b      	lsrs	r3, r3, #1
 80024b2:	18d2      	adds	r2, r2, r3
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	0019      	movs	r1, r3
 80024ba:	0010      	movs	r0, r2
 80024bc:	f7fd fe24 	bl	8000108 <__udivsi3>
 80024c0:	0003      	movs	r3, r0
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024c6:	e04c      	b.n	8002562 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024c8:	4b8c      	ldr	r3, [pc, #560]	; (80026fc <UART_SetConfig+0x64c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2210      	movs	r2, #16
 80024ce:	4013      	ands	r3, r2
 80024d0:	d00e      	beq.n	80024f0 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	085b      	lsrs	r3, r3, #1
 80024d8:	4a89      	ldr	r2, [pc, #548]	; (8002700 <UART_SetConfig+0x650>)
 80024da:	189a      	adds	r2, r3, r2
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	0019      	movs	r1, r3
 80024e2:	0010      	movs	r0, r2
 80024e4:	f7fd fe10 	bl	8000108 <__udivsi3>
 80024e8:	0003      	movs	r3, r0
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80024ee:	e038      	b.n	8002562 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	4a83      	ldr	r2, [pc, #524]	; (8002704 <UART_SetConfig+0x654>)
 80024f8:	189a      	adds	r2, r3, r2
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	0019      	movs	r1, r3
 8002500:	0010      	movs	r0, r2
 8002502:	f7fd fe01 	bl	8000108 <__udivsi3>
 8002506:	0003      	movs	r3, r0
 8002508:	b29b      	uxth	r3, r3
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800250c:	e029      	b.n	8002562 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800250e:	f7fe ffb9 	bl	8001484 <HAL_RCC_GetSysClockFreq>
 8002512:	0003      	movs	r3, r0
 8002514:	005a      	lsls	r2, r3, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	085b      	lsrs	r3, r3, #1
 800251c:	18d2      	adds	r2, r2, r3
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	0019      	movs	r1, r3
 8002524:	0010      	movs	r0, r2
 8002526:	f7fd fdef 	bl	8000108 <__udivsi3>
 800252a:	0003      	movs	r3, r0
 800252c:	b29b      	uxth	r3, r3
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002530:	e017      	b.n	8002562 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	085b      	lsrs	r3, r3, #1
 8002538:	2280      	movs	r2, #128	; 0x80
 800253a:	0252      	lsls	r2, r2, #9
 800253c:	189a      	adds	r2, r3, r2
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	0019      	movs	r1, r3
 8002544:	0010      	movs	r0, r2
 8002546:	f7fd fddf 	bl	8000108 <__udivsi3>
 800254a:	0003      	movs	r3, r0
 800254c:	b29b      	uxth	r3, r3
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002550:	e007      	b.n	8002562 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002552:	2313      	movs	r3, #19
 8002554:	2218      	movs	r2, #24
 8002556:	4694      	mov	ip, r2
 8002558:	44bc      	add	ip, r7
 800255a:	4463      	add	r3, ip
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
        break;
 8002560:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002564:	2b0f      	cmp	r3, #15
 8002566:	d920      	bls.n	80025aa <UART_SetConfig+0x4fa>
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	4a67      	ldr	r2, [pc, #412]	; (8002708 <UART_SetConfig+0x658>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d81c      	bhi.n	80025aa <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002572:	b29a      	uxth	r2, r3
 8002574:	200a      	movs	r0, #10
 8002576:	2418      	movs	r4, #24
 8002578:	193b      	adds	r3, r7, r4
 800257a:	181b      	adds	r3, r3, r0
 800257c:	210f      	movs	r1, #15
 800257e:	438a      	bics	r2, r1
 8002580:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	b29b      	uxth	r3, r3
 8002588:	2207      	movs	r2, #7
 800258a:	4013      	ands	r3, r2
 800258c:	b299      	uxth	r1, r3
 800258e:	193b      	adds	r3, r7, r4
 8002590:	181b      	adds	r3, r3, r0
 8002592:	193a      	adds	r2, r7, r4
 8002594:	1812      	adds	r2, r2, r0
 8002596:	8812      	ldrh	r2, [r2, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	193a      	adds	r2, r7, r4
 80025a2:	1812      	adds	r2, r2, r0
 80025a4:	8812      	ldrh	r2, [r2, #0]
 80025a6:	60da      	str	r2, [r3, #12]
 80025a8:	e095      	b.n	80026d6 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80025aa:	2313      	movs	r3, #19
 80025ac:	2218      	movs	r2, #24
 80025ae:	4694      	mov	ip, r2
 80025b0:	44bc      	add	ip, r7
 80025b2:	4463      	add	r3, ip
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
 80025b8:	e08d      	b.n	80026d6 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 80025ba:	231b      	movs	r3, #27
 80025bc:	2218      	movs	r2, #24
 80025be:	4694      	mov	ip, r2
 80025c0:	44bc      	add	ip, r7
 80025c2:	4463      	add	r3, ip
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d86a      	bhi.n	80026a0 <UART_SetConfig+0x5f0>
 80025ca:	009a      	lsls	r2, r3, #2
 80025cc:	4b4f      	ldr	r3, [pc, #316]	; (800270c <UART_SetConfig+0x65c>)
 80025ce:	18d3      	adds	r3, r2, r3
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025d4:	f7fe ffe4 	bl	80015a0 <HAL_RCC_GetPCLK1Freq>
 80025d8:	0002      	movs	r2, r0
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	085b      	lsrs	r3, r3, #1
 80025e0:	18d2      	adds	r2, r2, r3
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	0019      	movs	r1, r3
 80025e8:	0010      	movs	r0, r2
 80025ea:	f7fd fd8d 	bl	8000108 <__udivsi3>
 80025ee:	0003      	movs	r3, r0
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80025f4:	e05c      	b.n	80026b0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80025f6:	f7fe ffe9 	bl	80015cc <HAL_RCC_GetPCLK2Freq>
 80025fa:	0002      	movs	r2, r0
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	085b      	lsrs	r3, r3, #1
 8002602:	18d2      	adds	r2, r2, r3
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	0019      	movs	r1, r3
 800260a:	0010      	movs	r0, r2
 800260c:	f7fd fd7c 	bl	8000108 <__udivsi3>
 8002610:	0003      	movs	r3, r0
 8002612:	b29b      	uxth	r3, r3
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002616:	e04b      	b.n	80026b0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002618:	4b38      	ldr	r3, [pc, #224]	; (80026fc <UART_SetConfig+0x64c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2210      	movs	r2, #16
 800261e:	4013      	ands	r3, r2
 8002620:	d00e      	beq.n	8002640 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	085b      	lsrs	r3, r3, #1
 8002628:	4a39      	ldr	r2, [pc, #228]	; (8002710 <UART_SetConfig+0x660>)
 800262a:	189a      	adds	r2, r3, r2
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	0019      	movs	r1, r3
 8002632:	0010      	movs	r0, r2
 8002634:	f7fd fd68 	bl	8000108 <__udivsi3>
 8002638:	0003      	movs	r3, r0
 800263a:	b29b      	uxth	r3, r3
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800263e:	e037      	b.n	80026b0 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	4a33      	ldr	r2, [pc, #204]	; (8002714 <UART_SetConfig+0x664>)
 8002648:	189a      	adds	r2, r3, r2
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	0019      	movs	r1, r3
 8002650:	0010      	movs	r0, r2
 8002652:	f7fd fd59 	bl	8000108 <__udivsi3>
 8002656:	0003      	movs	r3, r0
 8002658:	b29b      	uxth	r3, r3
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800265c:	e028      	b.n	80026b0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800265e:	f7fe ff11 	bl	8001484 <HAL_RCC_GetSysClockFreq>
 8002662:	0002      	movs	r2, r0
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	18d2      	adds	r2, r2, r3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	0019      	movs	r1, r3
 8002672:	0010      	movs	r0, r2
 8002674:	f7fd fd48 	bl	8000108 <__udivsi3>
 8002678:	0003      	movs	r3, r0
 800267a:	b29b      	uxth	r3, r3
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800267e:	e017      	b.n	80026b0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	2280      	movs	r2, #128	; 0x80
 8002688:	0212      	lsls	r2, r2, #8
 800268a:	189a      	adds	r2, r3, r2
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	0019      	movs	r1, r3
 8002692:	0010      	movs	r0, r2
 8002694:	f7fd fd38 	bl	8000108 <__udivsi3>
 8002698:	0003      	movs	r3, r0
 800269a:	b29b      	uxth	r3, r3
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800269e:	e007      	b.n	80026b0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80026a0:	2313      	movs	r3, #19
 80026a2:	2218      	movs	r2, #24
 80026a4:	4694      	mov	ip, r2
 80026a6:	44bc      	add	ip, r7
 80026a8:	4463      	add	r3, ip
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
        break;
 80026ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	2b0f      	cmp	r3, #15
 80026b4:	d908      	bls.n	80026c8 <UART_SetConfig+0x618>
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	4a13      	ldr	r2, [pc, #76]	; (8002708 <UART_SetConfig+0x658>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d804      	bhi.n	80026c8 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	e006      	b.n	80026d6 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80026c8:	2313      	movs	r3, #19
 80026ca:	2218      	movs	r2, #24
 80026cc:	4694      	mov	ip, r2
 80026ce:	44bc      	add	ip, r7
 80026d0:	4463      	add	r3, ip
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	2200      	movs	r2, #0
 80026da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2200      	movs	r2, #0
 80026e0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80026e2:	2313      	movs	r3, #19
 80026e4:	2218      	movs	r2, #24
 80026e6:	4694      	mov	ip, r2
 80026e8:	44bc      	add	ip, r7
 80026ea:	4463      	add	r3, ip
 80026ec:	781b      	ldrb	r3, [r3, #0]
}
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b00e      	add	sp, #56	; 0x38
 80026f4:	bdb0      	pop	{r4, r5, r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	080041a8 	.word	0x080041a8
 80026fc:	40021000 	.word	0x40021000
 8002700:	007a1200 	.word	0x007a1200
 8002704:	01e84800 	.word	0x01e84800
 8002708:	0000ffff 	.word	0x0000ffff
 800270c:	080041cc 	.word	0x080041cc
 8002710:	003d0900 	.word	0x003d0900
 8002714:	00f42400 	.word	0x00f42400

08002718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	2201      	movs	r2, #1
 8002726:	4013      	ands	r3, r2
 8002728:	d00b      	beq.n	8002742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4a4a      	ldr	r2, [pc, #296]	; (800285c <UART_AdvFeatureConfig+0x144>)
 8002732:	4013      	ands	r3, r2
 8002734:	0019      	movs	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	2202      	movs	r2, #2
 8002748:	4013      	ands	r3, r2
 800274a:	d00b      	beq.n	8002764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4a43      	ldr	r2, [pc, #268]	; (8002860 <UART_AdvFeatureConfig+0x148>)
 8002754:	4013      	ands	r3, r2
 8002756:	0019      	movs	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	2204      	movs	r2, #4
 800276a:	4013      	ands	r3, r2
 800276c:	d00b      	beq.n	8002786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a3b      	ldr	r2, [pc, #236]	; (8002864 <UART_AdvFeatureConfig+0x14c>)
 8002776:	4013      	ands	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	2208      	movs	r2, #8
 800278c:	4013      	ands	r3, r2
 800278e:	d00b      	beq.n	80027a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4a34      	ldr	r2, [pc, #208]	; (8002868 <UART_AdvFeatureConfig+0x150>)
 8002798:	4013      	ands	r3, r2
 800279a:	0019      	movs	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	2210      	movs	r2, #16
 80027ae:	4013      	ands	r3, r2
 80027b0:	d00b      	beq.n	80027ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a2c      	ldr	r2, [pc, #176]	; (800286c <UART_AdvFeatureConfig+0x154>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	0019      	movs	r1, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	2220      	movs	r2, #32
 80027d0:	4013      	ands	r3, r2
 80027d2:	d00b      	beq.n	80027ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	4a25      	ldr	r2, [pc, #148]	; (8002870 <UART_AdvFeatureConfig+0x158>)
 80027dc:	4013      	ands	r3, r2
 80027de:	0019      	movs	r1, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	2240      	movs	r2, #64	; 0x40
 80027f2:	4013      	ands	r3, r2
 80027f4:	d01d      	beq.n	8002832 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <UART_AdvFeatureConfig+0x15c>)
 80027fe:	4013      	ands	r3, r2
 8002800:	0019      	movs	r1, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	035b      	lsls	r3, r3, #13
 8002816:	429a      	cmp	r2, r3
 8002818:	d10b      	bne.n	8002832 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a15      	ldr	r2, [pc, #84]	; (8002878 <UART_AdvFeatureConfig+0x160>)
 8002822:	4013      	ands	r3, r2
 8002824:	0019      	movs	r1, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	4013      	ands	r3, r2
 800283a:	d00b      	beq.n	8002854 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a0e      	ldr	r2, [pc, #56]	; (800287c <UART_AdvFeatureConfig+0x164>)
 8002844:	4013      	ands	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	605a      	str	r2, [r3, #4]
  }
}
 8002854:	46c0      	nop			; (mov r8, r8)
 8002856:	46bd      	mov	sp, r7
 8002858:	b002      	add	sp, #8
 800285a:	bd80      	pop	{r7, pc}
 800285c:	fffdffff 	.word	0xfffdffff
 8002860:	fffeffff 	.word	0xfffeffff
 8002864:	fffbffff 	.word	0xfffbffff
 8002868:	ffff7fff 	.word	0xffff7fff
 800286c:	ffffefff 	.word	0xffffefff
 8002870:	ffffdfff 	.word	0xffffdfff
 8002874:	ffefffff 	.word	0xffefffff
 8002878:	ff9fffff 	.word	0xff9fffff
 800287c:	fff7ffff 	.word	0xfff7ffff

08002880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af02      	add	r7, sp, #8
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800288e:	f7fd fe29 	bl	80004e4 <HAL_GetTick>
 8002892:	0003      	movs	r3, r0
 8002894:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2208      	movs	r2, #8
 800289e:	4013      	ands	r3, r2
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d10d      	bne.n	80028c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	0399      	lsls	r1, r3, #14
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	4b16      	ldr	r3, [pc, #88]	; (8002908 <UART_CheckIdleState+0x88>)
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	0013      	movs	r3, r2
 80028b2:	2200      	movs	r2, #0
 80028b4:	f000 f82a 	bl	800290c <UART_WaitOnFlagUntilTimeout>
 80028b8:	1e03      	subs	r3, r0, #0
 80028ba:	d001      	beq.n	80028c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e01f      	b.n	8002900 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2204      	movs	r2, #4
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d10d      	bne.n	80028ea <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	03d9      	lsls	r1, r3, #15
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <UART_CheckIdleState+0x88>)
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	0013      	movs	r3, r2
 80028dc:	2200      	movs	r2, #0
 80028de:	f000 f815 	bl	800290c <UART_WaitOnFlagUntilTimeout>
 80028e2:	1e03      	subs	r3, r0, #0
 80028e4:	d001      	beq.n	80028ea <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e00a      	b.n	8002900 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2220      	movs	r2, #32
 80028ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2220      	movs	r2, #32
 80028f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2270      	movs	r2, #112	; 0x70
 80028fa:	2100      	movs	r1, #0
 80028fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	0018      	movs	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	b004      	add	sp, #16
 8002906:	bd80      	pop	{r7, pc}
 8002908:	01ffffff 	.word	0x01ffffff

0800290c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	1dfb      	adds	r3, r7, #7
 800291a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800291c:	e029      	b.n	8002972 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	3301      	adds	r3, #1
 8002922:	d026      	beq.n	8002972 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002924:	f7fd fdde 	bl	80004e4 <HAL_GetTick>
 8002928:	0002      	movs	r2, r0
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	429a      	cmp	r2, r3
 8002932:	d302      	bcc.n	800293a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d11b      	bne.n	8002972 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4915      	ldr	r1, [pc, #84]	; (800299c <UART_WaitOnFlagUntilTimeout+0x90>)
 8002946:	400a      	ands	r2, r1
 8002948:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2101      	movs	r1, #1
 8002956:	438a      	bics	r2, r1
 8002958:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2220      	movs	r2, #32
 800295e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2270      	movs	r2, #112	; 0x70
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e00f      	b.n	8002992 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	4013      	ands	r3, r2
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	425a      	negs	r2, r3
 8002982:	4153      	adcs	r3, r2
 8002984:	b2db      	uxtb	r3, r3
 8002986:	001a      	movs	r2, r3
 8002988:	1dfb      	adds	r3, r7, #7
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d0c6      	beq.n	800291e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	0018      	movs	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	b004      	add	sp, #16
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	fffffe5f 	.word	0xfffffe5f

080029a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029a6:	f7fd fd47 	bl	8000438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029aa:	f000 f843 	bl	8002a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029ae:	f000 f957 	bl	8002c60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80029b2:	f000 f925 	bl	8002c00 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80029b6:	f000 f8a9 	bl	8002b0c <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Hello...\r\n");
 80029ba:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <main+0x8c>)
 80029bc:	0018      	movs	r0, r3
 80029be:	f000 feff 	bl	80037c0 <puts>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <main+0x90>)
 80029c4:	2100      	movs	r1, #0
 80029c6:	0018      	movs	r0, r3
 80029c8:	f7fe ffb6 	bl	8001938 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80029cc:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <main+0x90>)
 80029ce:	2104      	movs	r1, #4
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7fe ffb1 	bl	8001938 <HAL_TIM_PWM_Start>
  int count = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
  int pulse_width1 = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]
  int pulse_width2 = 4096;
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	015b      	lsls	r3, r3, #5
 80029e2:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // PORTA, PA5
 80029e4:	23a0      	movs	r3, #160	; 0xa0
 80029e6:	05db      	lsls	r3, r3, #23
 80029e8:	2120      	movs	r1, #32
 80029ea:	0018      	movs	r0, r3
 80029ec:	f7fe f817 	bl	8000a1e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80029f0:	23fa      	movs	r3, #250	; 0xfa
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	0018      	movs	r0, r3
 80029f6:	f7fd fd7f 	bl	80004f8 <HAL_Delay>
	  count++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
	  if (count > 8){
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	dd01      	ble.n	8002a0a <main+0x6a>
		  count = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
	  }
	  pulse_width1 = count*512;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	025b      	lsls	r3, r3, #9
 8002a0e:	60bb      	str	r3, [r7, #8]
	  pulse_width2 = (8-count)*512;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2208      	movs	r2, #8
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	025b      	lsls	r3, r3, #9
 8002a18:	607b      	str	r3, [r7, #4]
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse_width1);
 8002a1a:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <main+0x90>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse_width2);
 8002a22:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <main+0x90>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // PORTA, PA5
 8002a2a:	e7db      	b.n	80029e4 <main+0x44>
 8002a2c:	08004180 	.word	0x08004180
 8002a30:	2000009c 	.word	0x2000009c

08002a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b09f      	sub	sp, #124	; 0x7c
 8002a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a3a:	2440      	movs	r4, #64	; 0x40
 8002a3c:	193b      	adds	r3, r7, r4
 8002a3e:	0018      	movs	r0, r3
 8002a40:	2338      	movs	r3, #56	; 0x38
 8002a42:	001a      	movs	r2, r3
 8002a44:	2100      	movs	r1, #0
 8002a46:	f000 fd91 	bl	800356c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a4a:	232c      	movs	r3, #44	; 0x2c
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	0018      	movs	r0, r3
 8002a50:	2314      	movs	r3, #20
 8002a52:	001a      	movs	r2, r3
 8002a54:	2100      	movs	r1, #0
 8002a56:	f000 fd89 	bl	800356c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	2328      	movs	r3, #40	; 0x28
 8002a60:	001a      	movs	r2, r3
 8002a62:	2100      	movs	r1, #0
 8002a64:	f000 fd82 	bl	800356c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a68:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <SystemClock_Config+0xd0>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a26      	ldr	r2, [pc, #152]	; (8002b08 <SystemClock_Config+0xd4>)
 8002a6e:	401a      	ands	r2, r3
 8002a70:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <SystemClock_Config+0xd0>)
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	0109      	lsls	r1, r1, #4
 8002a76:	430a      	orrs	r2, r1
 8002a78:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002a7a:	0021      	movs	r1, r4
 8002a7c:	187b      	adds	r3, r7, r1
 8002a7e:	2210      	movs	r2, #16
 8002a80:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002a82:	187b      	adds	r3, r7, r1
 8002a84:	2201      	movs	r2, #1
 8002a86:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	22a0      	movs	r2, #160	; 0xa0
 8002a92:	0212      	lsls	r2, r2, #8
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a96:	187b      	adds	r3, r7, r1
 8002a98:	2200      	movs	r2, #0
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f7fd fff6 	bl	8000a90 <HAL_RCC_OscConfig>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d001      	beq.n	8002aac <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002aa8:	f000 f970 	bl	8002d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	187b      	adds	r3, r7, r1
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002ab4:	187b      	adds	r3, r7, r1
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aba:	187b      	adds	r3, r7, r1
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ac6:	187b      	adds	r3, r7, r1
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	2100      	movs	r1, #0
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f7fe fbad 	bl	8001230 <HAL_RCC_ClockConfig>
 8002ad6:	1e03      	subs	r3, r0, #0
 8002ad8:	d001      	beq.n	8002ade <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002ada:	f000 f957 	bl	8002d8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7fe fd83 	bl	80015f8 <HAL_RCCEx_PeriphCLKConfig>
 8002af2:	1e03      	subs	r3, r0, #0
 8002af4:	d001      	beq.n	8002afa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002af6:	f000 f949 	bl	8002d8c <Error_Handler>
  }
}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b01f      	add	sp, #124	; 0x7c
 8002b00:	bd90      	pop	{r4, r7, pc}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	40007000 	.word	0x40007000
 8002b08:	ffffe7ff 	.word	0xffffe7ff

08002b0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b12:	2310      	movs	r3, #16
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	0018      	movs	r0, r3
 8002b18:	2308      	movs	r3, #8
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	f000 fd25 	bl	800356c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b22:	003b      	movs	r3, r7
 8002b24:	0018      	movs	r0, r3
 8002b26:	2310      	movs	r3, #16
 8002b28:	001a      	movs	r2, r3
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	f000 fd1e 	bl	800356c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b30:	4b2f      	ldr	r3, [pc, #188]	; (8002bf0 <MX_TIM3_Init+0xe4>)
 8002b32:	4a30      	ldr	r2, [pc, #192]	; (8002bf4 <MX_TIM3_Init+0xe8>)
 8002b34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b36:	4b2e      	ldr	r3, [pc, #184]	; (8002bf0 <MX_TIM3_Init+0xe4>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3c:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <MX_TIM3_Init+0xe4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095;
 8002b42:	4b2b      	ldr	r3, [pc, #172]	; (8002bf0 <MX_TIM3_Init+0xe4>)
 8002b44:	4a2c      	ldr	r2, [pc, #176]	; (8002bf8 <MX_TIM3_Init+0xec>)
 8002b46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b48:	4b29      	ldr	r3, [pc, #164]	; (8002bf0 <MX_TIM3_Init+0xe4>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b4e:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <MX_TIM3_Init+0xe4>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b54:	4b26      	ldr	r3, [pc, #152]	; (8002bf0 <MX_TIM3_Init+0xe4>)
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7fe fec2 	bl	80018e0 <HAL_TIM_PWM_Init>
 8002b5c:	1e03      	subs	r3, r0, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002b60:	f000 f914 	bl	8002d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b64:	2110      	movs	r1, #16
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b6c:	187b      	adds	r3, r7, r1
 8002b6e:	2200      	movs	r2, #0
 8002b70:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b72:	187a      	adds	r2, r7, r1
 8002b74:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <MX_TIM3_Init+0xe4>)
 8002b76:	0011      	movs	r1, r2
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7ff f93c 	bl	8001df6 <HAL_TIMEx_MasterConfigSynchronization>
 8002b7e:	1e03      	subs	r3, r0, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002b82:	f000 f903 	bl	8002d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b86:	003b      	movs	r3, r7
 8002b88:	2260      	movs	r2, #96	; 0x60
 8002b8a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1023;
 8002b8c:	003b      	movs	r3, r7
 8002b8e:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <MX_TIM3_Init+0xf0>)
 8002b90:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b92:	003b      	movs	r3, r7
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b98:	003b      	movs	r3, r7
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b9e:	0039      	movs	r1, r7
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <MX_TIM3_Init+0xe4>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f7fe fee9 	bl	800197c <HAL_TIM_PWM_ConfigChannel>
 8002baa:	1e03      	subs	r3, r0, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8002bae:	f000 f8ed 	bl	8002d8c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <MX_TIM3_Init+0xe4>)
 8002bb4:	2104      	movs	r1, #4
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f7ff f960 	bl	8001e7c <HAL_TIMEx_RemapConfig>
 8002bbc:	1e03      	subs	r3, r0, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8002bc0:	f000 f8e4 	bl	8002d8c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002bc4:	003b      	movs	r3, r7
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bca:	0039      	movs	r1, r7
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <MX_TIM3_Init+0xe4>)
 8002bce:	2204      	movs	r2, #4
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7fe fed3 	bl	800197c <HAL_TIM_PWM_ConfigChannel>
 8002bd6:	1e03      	subs	r3, r0, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8002bda:	f000 f8d7 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002bde:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <MX_TIM3_Init+0xe4>)
 8002be0:	0018      	movs	r0, r3
 8002be2:	f000 f905 	bl	8002df0 <HAL_TIM_MspPostInit>

}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b006      	add	sp, #24
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	2000009c 	.word	0x2000009c
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	00000fff 	.word	0x00000fff
 8002bfc:	000003ff 	.word	0x000003ff

08002c00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c06:	4a15      	ldr	r2, [pc, #84]	; (8002c5c <MX_USART2_UART_Init+0x5c>)
 8002c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c0a:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c0c:	22e1      	movs	r2, #225	; 0xe1
 8002c0e:	0252      	lsls	r2, r2, #9
 8002c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c26:	220c      	movs	r2, #12
 8002c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <MX_USART2_UART_Init+0x58>)
 8002c44:	0018      	movs	r0, r3
 8002c46:	f7ff f937 	bl	8001eb8 <HAL_UART_Init>
 8002c4a:	1e03      	subs	r3, r0, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002c4e:	f000 f89d 	bl	8002d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	200000d8 	.word	0x200000d8
 8002c5c:	40004400 	.word	0x40004400

08002c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b089      	sub	sp, #36	; 0x24
 8002c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c66:	240c      	movs	r4, #12
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	2314      	movs	r3, #20
 8002c6e:	001a      	movs	r2, r3
 8002c70:	2100      	movs	r1, #0
 8002c72:	f000 fc7b 	bl	800356c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c76:	4b37      	ldr	r3, [pc, #220]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7a:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002c7c:	2104      	movs	r1, #4
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c82:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	2204      	movs	r2, #4
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c8e:	4b31      	ldr	r3, [pc, #196]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c92:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	430a      	orrs	r2, r1
 8002c98:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c9a:	4b2e      	ldr	r3, [pc, #184]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	2280      	movs	r2, #128	; 0x80
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca6:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002caa:	4b2a      	ldr	r3, [pc, #168]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002cac:	2101      	movs	r1, #1
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cb2:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <MX_GPIO_Init+0xf4>)
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	4013      	ands	r3, r2
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002cbe:	23a0      	movs	r3, #160	; 0xa0
 8002cc0:	05db      	lsls	r3, r3, #23
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2120      	movs	r1, #32
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7fd fe8c 	bl	80009e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ccc:	193b      	adds	r3, r7, r4
 8002cce:	2280      	movs	r2, #128	; 0x80
 8002cd0:	0192      	lsls	r2, r2, #6
 8002cd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cd4:	193b      	adds	r3, r7, r4
 8002cd6:	4a20      	ldr	r2, [pc, #128]	; (8002d58 <MX_GPIO_Init+0xf8>)
 8002cd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	193b      	adds	r3, r7, r4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ce0:	193b      	adds	r3, r7, r4
 8002ce2:	4a1e      	ldr	r2, [pc, #120]	; (8002d5c <MX_GPIO_Init+0xfc>)
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	0010      	movs	r0, r2
 8002ce8:	f7fd fcfe 	bl	80006e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002cec:	0021      	movs	r1, r4
 8002cee:	187b      	adds	r3, r7, r1
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d00:	187b      	adds	r3, r7, r1
 8002d02:	2200      	movs	r2, #0
 8002d04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002d06:	000c      	movs	r4, r1
 8002d08:	187a      	adds	r2, r7, r1
 8002d0a:	23a0      	movs	r3, #160	; 0xa0
 8002d0c:	05db      	lsls	r3, r3, #23
 8002d0e:	0011      	movs	r1, r2
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7fd fce9 	bl	80006e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d16:	0021      	movs	r1, r4
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	22c0      	movs	r2, #192	; 0xc0
 8002d1c:	0152      	lsls	r2, r2, #5
 8002d1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d20:	187b      	adds	r3, r7, r1
 8002d22:	4a0f      	ldr	r2, [pc, #60]	; (8002d60 <MX_GPIO_Init+0x100>)
 8002d24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	187b      	adds	r3, r7, r1
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2c:	187a      	adds	r2, r7, r1
 8002d2e:	23a0      	movs	r3, #160	; 0xa0
 8002d30:	05db      	lsls	r3, r3, #23
 8002d32:	0011      	movs	r1, r2
 8002d34:	0018      	movs	r0, r3
 8002d36:	f7fd fcd7 	bl	80006e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2007      	movs	r0, #7
 8002d40:	f7fd fca0 	bl	8000684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002d44:	2007      	movs	r0, #7
 8002d46:	f7fd fcb2 	bl	80006ae <HAL_NVIC_EnableIRQ>

}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b009      	add	sp, #36	; 0x24
 8002d50:	bd90      	pop	{r4, r7, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	40021000 	.word	0x40021000
 8002d58:	10210000 	.word	0x10210000
 8002d5c:	50000800 	.word	0x50000800
 8002d60:	10110000 	.word	0x10110000

08002d64 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <__io_putchar+0x20>)
 8002d6e:	1d39      	adds	r1, r7, #4
 8002d70:	4805      	ldr	r0, [pc, #20]	; (8002d88 <__io_putchar+0x24>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	f7ff f8f4 	bl	8001f60 <HAL_UART_Transmit>

return ch;
 8002d78:	687b      	ldr	r3, [r7, #4]
}
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b002      	add	sp, #8
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	0000ffff 	.word	0x0000ffff
 8002d88:	200000d8 	.word	0x200000d8

08002d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9c:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <HAL_MspInit+0x24>)
 8002d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_MspInit+0x24>)
 8002da2:	2101      	movs	r1, #1
 8002da4:	430a      	orrs	r2, r1
 8002da6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <HAL_MspInit+0x24>)
 8002daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_MspInit+0x24>)
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	0549      	lsls	r1, r1, #21
 8002db2:	430a      	orrs	r2, r1
 8002db4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a06      	ldr	r2, [pc, #24]	; (8002de8 <HAL_TIM_PWM_MspInit+0x28>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d105      	bne.n	8002dde <HAL_TIM_PWM_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_TIM_PWM_MspInit+0x2c>)
 8002dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_TIM_PWM_MspInit+0x2c>)
 8002dd8:	2102      	movs	r1, #2
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b002      	add	sp, #8
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	40000400 	.word	0x40000400
 8002dec:	40021000 	.word	0x40021000

08002df0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df8:	230c      	movs	r3, #12
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	2314      	movs	r3, #20
 8002e00:	001a      	movs	r2, r3
 8002e02:	2100      	movs	r1, #0
 8002e04:	f000 fbb2 	bl	800356c <memset>
  if(htim->Instance==TIM3)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <HAL_TIM_MspPostInit+0x70>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d122      	bne.n	8002e58 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e12:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <HAL_TIM_MspPostInit+0x74>)
 8002e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <HAL_TIM_MspPostInit+0x74>)
 8002e18:	2101      	movs	r1, #1
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e1e:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <HAL_TIM_MspPostInit+0x74>)
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	2201      	movs	r2, #1
 8002e24:	4013      	ands	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e2a:	210c      	movs	r1, #12
 8002e2c:	187b      	adds	r3, r7, r1
 8002e2e:	22c0      	movs	r2, #192	; 0xc0
 8002e30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	187b      	adds	r3, r7, r1
 8002e34:	2202      	movs	r2, #2
 8002e36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	187b      	adds	r3, r7, r1
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3e:	187b      	adds	r3, r7, r1
 8002e40:	2200      	movs	r2, #0
 8002e42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	2202      	movs	r2, #2
 8002e48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4a:	187a      	adds	r2, r7, r1
 8002e4c:	23a0      	movs	r3, #160	; 0xa0
 8002e4e:	05db      	lsls	r3, r3, #23
 8002e50:	0011      	movs	r1, r2
 8002e52:	0018      	movs	r0, r3
 8002e54:	f7fd fc48 	bl	80006e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b008      	add	sp, #32
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40000400 	.word	0x40000400
 8002e64:	40021000 	.word	0x40021000

08002e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	230c      	movs	r3, #12
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	0018      	movs	r0, r3
 8002e76:	2314      	movs	r3, #20
 8002e78:	001a      	movs	r2, r3
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	f000 fb76 	bl	800356c <memset>
  if(huart->Instance==USART2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a18      	ldr	r2, [pc, #96]	; (8002ee8 <HAL_UART_MspInit+0x80>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d129      	bne.n	8002ede <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e8a:	4b18      	ldr	r3, [pc, #96]	; (8002eec <HAL_UART_MspInit+0x84>)
 8002e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e8e:	4b17      	ldr	r3, [pc, #92]	; (8002eec <HAL_UART_MspInit+0x84>)
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	0289      	lsls	r1, r1, #10
 8002e94:	430a      	orrs	r2, r1
 8002e96:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e98:	4b14      	ldr	r3, [pc, #80]	; (8002eec <HAL_UART_MspInit+0x84>)
 8002e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9c:	4b13      	ldr	r3, [pc, #76]	; (8002eec <HAL_UART_MspInit+0x84>)
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ea4:	4b11      	ldr	r3, [pc, #68]	; (8002eec <HAL_UART_MspInit+0x84>)
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	4013      	ands	r3, r2
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002eb0:	210c      	movs	r1, #12
 8002eb2:	187b      	adds	r3, r7, r1
 8002eb4:	220c      	movs	r2, #12
 8002eb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb8:	187b      	adds	r3, r7, r1
 8002eba:	2202      	movs	r2, #2
 8002ebc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebe:	187b      	adds	r3, r7, r1
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec4:	187b      	adds	r3, r7, r1
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002eca:	187b      	adds	r3, r7, r1
 8002ecc:	2204      	movs	r2, #4
 8002ece:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed0:	187a      	adds	r2, r7, r1
 8002ed2:	23a0      	movs	r3, #160	; 0xa0
 8002ed4:	05db      	lsls	r3, r3, #23
 8002ed6:	0011      	movs	r1, r2
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7fd fc05 	bl	80006e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b008      	add	sp, #32
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	40004400 	.word	0x40004400
 8002eec:	40021000 	.word	0x40021000

08002ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002efe:	e7fe      	b.n	8002efe <HardFault_Handler+0x4>

08002f00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f18:	f7fd fad8 	bl	80004cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	// PIN 11
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11)){
 8002f28:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <EXTI4_15_IRQHandler+0xa8>)
 8002f2a:	695b      	ldr	r3, [r3, #20]

	}
	// PIN 12
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_12))
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <EXTI4_15_IRQHandler+0xa8>)
 8002f2e:	695a      	ldr	r2, [r3, #20]
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	015b      	lsls	r3, r3, #5
 8002f34:	4013      	ands	r3, r2
 8002f36:	d01e      	beq.n	8002f76 <EXTI4_15_IRQHandler+0x52>
	{
		r_enc_rising_cnt++;
 8002f38:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <EXTI4_15_IRQHandler+0xac>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <EXTI4_15_IRQHandler+0xac>)
 8002f40:	601a      	str	r2, [r3, #0]
		if( r_enc_rising_cnt >= 800){
 8002f42:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <EXTI4_15_IRQHandler+0xac>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a23      	ldr	r2, [pc, #140]	; (8002fd4 <EXTI4_15_IRQHandler+0xb0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	dd14      	ble.n	8002f76 <EXTI4_15_IRQHandler+0x52>
				r_wheel_cnt++;
 8002f4c:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <EXTI4_15_IRQHandler+0xb4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	4b21      	ldr	r3, [pc, #132]	; (8002fd8 <EXTI4_15_IRQHandler+0xb4>)
 8002f54:	601a      	str	r2, [r3, #0]
				r_enc_rising_cnt = 0;
 8002f56:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <EXTI4_15_IRQHandler+0xac>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
				printf("Rotations: %d          \r", r_wheel_cnt);
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <EXTI4_15_IRQHandler+0xb4>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <EXTI4_15_IRQHandler+0xb8>)
 8002f62:	0011      	movs	r1, r2
 8002f64:	0018      	movs	r0, r3
 8002f66:	f000 fbb1 	bl	80036cc <iprintf>
				fflush(stdout);
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <EXTI4_15_IRQHandler+0xbc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f000 f9ed 	bl	8003350 <fflush>

	}

	// PIN 13

	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <EXTI4_15_IRQHandler+0xa8>)
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	019b      	lsls	r3, r3, #6
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d012      	beq.n	8002fa8 <EXTI4_15_IRQHandler+0x84>
		r_enc_rising_cnt = 0;
 8002f82:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <EXTI4_15_IRQHandler+0xac>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
		r_wheel_cnt = 0;
 8002f88:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <EXTI4_15_IRQHandler+0xb4>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
		printf("Rotations: %d          \r", r_wheel_cnt);
 8002f8e:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <EXTI4_15_IRQHandler+0xb4>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <EXTI4_15_IRQHandler+0xb8>)
 8002f94:	0011      	movs	r1, r2
 8002f96:	0018      	movs	r0, r3
 8002f98:	f000 fb98 	bl	80036cc <iprintf>
		fflush(stdout);
 8002f9c:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <EXTI4_15_IRQHandler+0xbc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 f9d4 	bl	8003350 <fflush>

	}
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	0018      	movs	r0, r3
 8002fae:	f7fd fd49 	bl	8000a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	015b      	lsls	r3, r3, #5
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f7fd fd44 	bl	8000a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	019b      	lsls	r3, r3, #6
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f7fd fd3f 	bl	8000a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40010400 	.word	0x40010400
 8002fd0:	20000084 	.word	0x20000084
 8002fd4:	0000031f 	.word	0x0000031f
 8002fd8:	20000088 	.word	0x20000088
 8002fdc:	0800418c 	.word	0x0800418c
 8002fe0:	20000004 	.word	0x20000004

08002fe4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	e00a      	b.n	800300c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ff6:	e000      	b.n	8002ffa <_read+0x16>
 8002ff8:	bf00      	nop
 8002ffa:	0001      	movs	r1, r0
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	60ba      	str	r2, [r7, #8]
 8003002:	b2ca      	uxtb	r2, r1
 8003004:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3301      	adds	r3, #1
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	429a      	cmp	r2, r3
 8003012:	dbf0      	blt.n	8002ff6 <_read+0x12>
	}

return len;
 8003014:	687b      	ldr	r3, [r7, #4]
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b006      	add	sp, #24
 800301c:	bd80      	pop	{r7, pc}

0800301e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	e009      	b.n	8003044 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	60ba      	str	r2, [r7, #8]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	0018      	movs	r0, r3
 800303a:	f7ff fe93 	bl	8002d64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	3301      	adds	r3, #1
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	429a      	cmp	r2, r3
 800304a:	dbf1      	blt.n	8003030 <_write+0x12>
	}
	return len;
 800304c:	687b      	ldr	r3, [r7, #4]
}
 800304e:	0018      	movs	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	b006      	add	sp, #24
 8003054:	bd80      	pop	{r7, pc}

08003056 <_close>:

int _close(int file)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
	return -1;
 800305e:	2301      	movs	r3, #1
 8003060:	425b      	negs	r3, r3
}
 8003062:	0018      	movs	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	b002      	add	sp, #8
 8003068:	bd80      	pop	{r7, pc}

0800306a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2280      	movs	r2, #128	; 0x80
 8003078:	0192      	lsls	r2, r2, #6
 800307a:	605a      	str	r2, [r3, #4]
	return 0;
 800307c:	2300      	movs	r3, #0
}
 800307e:	0018      	movs	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	b002      	add	sp, #8
 8003084:	bd80      	pop	{r7, pc}

08003086 <_isatty>:

int _isatty(int file)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
	return 1;
 800308e:	2301      	movs	r3, #1
}
 8003090:	0018      	movs	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	b002      	add	sp, #8
 8003096:	bd80      	pop	{r7, pc}

08003098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
	return 0;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b004      	add	sp, #16
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <_sbrk+0x50>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d102      	bne.n	80030c6 <_sbrk+0x16>
		heap_end = &end;
 80030c0:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <_sbrk+0x50>)
 80030c2:	4a10      	ldr	r2, [pc, #64]	; (8003104 <_sbrk+0x54>)
 80030c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <_sbrk+0x50>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <_sbrk+0x50>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	18d3      	adds	r3, r2, r3
 80030d4:	466a      	mov	r2, sp
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d907      	bls.n	80030ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80030da:	f000 f87d 	bl	80031d8 <__errno>
 80030de:	0003      	movs	r3, r0
 80030e0:	220c      	movs	r2, #12
 80030e2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80030e4:	2301      	movs	r3, #1
 80030e6:	425b      	negs	r3, r3
 80030e8:	e006      	b.n	80030f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <_sbrk+0x50>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	18d2      	adds	r2, r2, r3
 80030f2:	4b03      	ldr	r3, [pc, #12]	; (8003100 <_sbrk+0x50>)
 80030f4:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80030f6:	68fb      	ldr	r3, [r7, #12]
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b004      	add	sp, #16
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	2000008c 	.word	0x2000008c
 8003104:	20000160 	.word	0x20000160

08003108 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800310c:	4b17      	ldr	r3, [pc, #92]	; (800316c <SystemInit+0x64>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b16      	ldr	r3, [pc, #88]	; (800316c <SystemInit+0x64>)
 8003112:	2180      	movs	r1, #128	; 0x80
 8003114:	0049      	lsls	r1, r1, #1
 8003116:	430a      	orrs	r2, r1
 8003118:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800311a:	4b14      	ldr	r3, [pc, #80]	; (800316c <SystemInit+0x64>)
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	4b13      	ldr	r3, [pc, #76]	; (800316c <SystemInit+0x64>)
 8003120:	4913      	ldr	r1, [pc, #76]	; (8003170 <SystemInit+0x68>)
 8003122:	400a      	ands	r2, r1
 8003124:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <SystemInit+0x64>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <SystemInit+0x64>)
 800312c:	4911      	ldr	r1, [pc, #68]	; (8003174 <SystemInit+0x6c>)
 800312e:	400a      	ands	r2, r1
 8003130:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <SystemInit+0x64>)
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <SystemInit+0x64>)
 8003138:	2101      	movs	r1, #1
 800313a:	438a      	bics	r2, r1
 800313c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <SystemInit+0x64>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <SystemInit+0x64>)
 8003144:	490c      	ldr	r1, [pc, #48]	; (8003178 <SystemInit+0x70>)
 8003146:	400a      	ands	r2, r1
 8003148:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <SystemInit+0x64>)
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <SystemInit+0x64>)
 8003150:	490a      	ldr	r1, [pc, #40]	; (800317c <SystemInit+0x74>)
 8003152:	400a      	ands	r2, r1
 8003154:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <SystemInit+0x64>)
 8003158:	2200      	movs	r2, #0
 800315a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800315c:	4b08      	ldr	r3, [pc, #32]	; (8003180 <SystemInit+0x78>)
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	0512      	lsls	r2, r2, #20
 8003162:	609a      	str	r2, [r3, #8]
#endif
}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	40021000 	.word	0x40021000
 8003170:	88ff400c 	.word	0x88ff400c
 8003174:	fef6fff6 	.word	0xfef6fff6
 8003178:	fffbffff 	.word	0xfffbffff
 800317c:	ff02ffff 	.word	0xff02ffff
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003184:	480d      	ldr	r0, [pc, #52]	; (80031bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003186:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003188:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800318a:	e003      	b.n	8003194 <LoopCopyDataInit>

0800318c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800318e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003190:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003192:	3104      	adds	r1, #4

08003194 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003194:	480b      	ldr	r0, [pc, #44]	; (80031c4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003198:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800319a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800319c:	d3f6      	bcc.n	800318c <CopyDataInit>
  ldr  r2, =_sbss
 800319e:	4a0b      	ldr	r2, [pc, #44]	; (80031cc <LoopForever+0x12>)
  b  LoopFillZerobss
 80031a0:	e002      	b.n	80031a8 <LoopFillZerobss>

080031a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80031a2:	2300      	movs	r3, #0
  str  r3, [r2]
 80031a4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031a6:	3204      	adds	r2, #4

080031a8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <LoopForever+0x16>)
  cmp  r2, r3
 80031aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031ac:	d3f9      	bcc.n	80031a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80031ae:	f7ff ffab 	bl	8003108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031b2:	f000 f9b7 	bl	8003524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031b6:	f7ff fbf3 	bl	80029a0 <main>

080031ba <LoopForever>:

LoopForever:
    b LoopForever
 80031ba:	e7fe      	b.n	80031ba <LoopForever>
   ldr   r0, =_estack
 80031bc:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80031c0:	080042bc 	.word	0x080042bc
  ldr  r0, =_sdata
 80031c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031c8:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 80031cc:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 80031d0:	2000015c 	.word	0x2000015c

080031d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031d4:	e7fe      	b.n	80031d4 <ADC1_COMP_IRQHandler>
	...

080031d8 <__errno>:
 80031d8:	4b01      	ldr	r3, [pc, #4]	; (80031e0 <__errno+0x8>)
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	4770      	bx	lr
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	20000004 	.word	0x20000004

080031e4 <__sflush_r>:
 80031e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031e6:	898a      	ldrh	r2, [r1, #12]
 80031e8:	0005      	movs	r5, r0
 80031ea:	000c      	movs	r4, r1
 80031ec:	0713      	lsls	r3, r2, #28
 80031ee:	d460      	bmi.n	80032b2 <__sflush_r+0xce>
 80031f0:	684b      	ldr	r3, [r1, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	dc04      	bgt.n	8003200 <__sflush_r+0x1c>
 80031f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	dc01      	bgt.n	8003200 <__sflush_r+0x1c>
 80031fc:	2000      	movs	r0, #0
 80031fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003200:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003202:	2f00      	cmp	r7, #0
 8003204:	d0fa      	beq.n	80031fc <__sflush_r+0x18>
 8003206:	2300      	movs	r3, #0
 8003208:	682e      	ldr	r6, [r5, #0]
 800320a:	602b      	str	r3, [r5, #0]
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	015b      	lsls	r3, r3, #5
 8003210:	6a21      	ldr	r1, [r4, #32]
 8003212:	401a      	ands	r2, r3
 8003214:	d034      	beq.n	8003280 <__sflush_r+0x9c>
 8003216:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003218:	89a3      	ldrh	r3, [r4, #12]
 800321a:	075b      	lsls	r3, r3, #29
 800321c:	d506      	bpl.n	800322c <__sflush_r+0x48>
 800321e:	6863      	ldr	r3, [r4, #4]
 8003220:	1ac0      	subs	r0, r0, r3
 8003222:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <__sflush_r+0x48>
 8003228:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800322a:	1ac0      	subs	r0, r0, r3
 800322c:	0002      	movs	r2, r0
 800322e:	6a21      	ldr	r1, [r4, #32]
 8003230:	2300      	movs	r3, #0
 8003232:	0028      	movs	r0, r5
 8003234:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003236:	47b8      	blx	r7
 8003238:	89a1      	ldrh	r1, [r4, #12]
 800323a:	1c43      	adds	r3, r0, #1
 800323c:	d106      	bne.n	800324c <__sflush_r+0x68>
 800323e:	682b      	ldr	r3, [r5, #0]
 8003240:	2b1d      	cmp	r3, #29
 8003242:	d830      	bhi.n	80032a6 <__sflush_r+0xc2>
 8003244:	4a2b      	ldr	r2, [pc, #172]	; (80032f4 <__sflush_r+0x110>)
 8003246:	40da      	lsrs	r2, r3
 8003248:	07d3      	lsls	r3, r2, #31
 800324a:	d52c      	bpl.n	80032a6 <__sflush_r+0xc2>
 800324c:	2300      	movs	r3, #0
 800324e:	6063      	str	r3, [r4, #4]
 8003250:	6923      	ldr	r3, [r4, #16]
 8003252:	6023      	str	r3, [r4, #0]
 8003254:	04cb      	lsls	r3, r1, #19
 8003256:	d505      	bpl.n	8003264 <__sflush_r+0x80>
 8003258:	1c43      	adds	r3, r0, #1
 800325a:	d102      	bne.n	8003262 <__sflush_r+0x7e>
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d100      	bne.n	8003264 <__sflush_r+0x80>
 8003262:	6560      	str	r0, [r4, #84]	; 0x54
 8003264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003266:	602e      	str	r6, [r5, #0]
 8003268:	2900      	cmp	r1, #0
 800326a:	d0c7      	beq.n	80031fc <__sflush_r+0x18>
 800326c:	0023      	movs	r3, r4
 800326e:	3344      	adds	r3, #68	; 0x44
 8003270:	4299      	cmp	r1, r3
 8003272:	d002      	beq.n	800327a <__sflush_r+0x96>
 8003274:	0028      	movs	r0, r5
 8003276:	f000 f981 	bl	800357c <_free_r>
 800327a:	2000      	movs	r0, #0
 800327c:	6360      	str	r0, [r4, #52]	; 0x34
 800327e:	e7be      	b.n	80031fe <__sflush_r+0x1a>
 8003280:	2301      	movs	r3, #1
 8003282:	0028      	movs	r0, r5
 8003284:	47b8      	blx	r7
 8003286:	1c43      	adds	r3, r0, #1
 8003288:	d1c6      	bne.n	8003218 <__sflush_r+0x34>
 800328a:	682b      	ldr	r3, [r5, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0c3      	beq.n	8003218 <__sflush_r+0x34>
 8003290:	2b1d      	cmp	r3, #29
 8003292:	d001      	beq.n	8003298 <__sflush_r+0xb4>
 8003294:	2b16      	cmp	r3, #22
 8003296:	d101      	bne.n	800329c <__sflush_r+0xb8>
 8003298:	602e      	str	r6, [r5, #0]
 800329a:	e7af      	b.n	80031fc <__sflush_r+0x18>
 800329c:	2340      	movs	r3, #64	; 0x40
 800329e:	89a2      	ldrh	r2, [r4, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	81a3      	strh	r3, [r4, #12]
 80032a4:	e7ab      	b.n	80031fe <__sflush_r+0x1a>
 80032a6:	2340      	movs	r3, #64	; 0x40
 80032a8:	430b      	orrs	r3, r1
 80032aa:	2001      	movs	r0, #1
 80032ac:	81a3      	strh	r3, [r4, #12]
 80032ae:	4240      	negs	r0, r0
 80032b0:	e7a5      	b.n	80031fe <__sflush_r+0x1a>
 80032b2:	690f      	ldr	r7, [r1, #16]
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d0a1      	beq.n	80031fc <__sflush_r+0x18>
 80032b8:	680b      	ldr	r3, [r1, #0]
 80032ba:	600f      	str	r7, [r1, #0]
 80032bc:	1bdb      	subs	r3, r3, r7
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	2300      	movs	r3, #0
 80032c2:	0792      	lsls	r2, r2, #30
 80032c4:	d100      	bne.n	80032c8 <__sflush_r+0xe4>
 80032c6:	694b      	ldr	r3, [r1, #20]
 80032c8:	60a3      	str	r3, [r4, #8]
 80032ca:	9b01      	ldr	r3, [sp, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	dc00      	bgt.n	80032d2 <__sflush_r+0xee>
 80032d0:	e794      	b.n	80031fc <__sflush_r+0x18>
 80032d2:	9b01      	ldr	r3, [sp, #4]
 80032d4:	003a      	movs	r2, r7
 80032d6:	6a21      	ldr	r1, [r4, #32]
 80032d8:	0028      	movs	r0, r5
 80032da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80032dc:	47b0      	blx	r6
 80032de:	2800      	cmp	r0, #0
 80032e0:	dc03      	bgt.n	80032ea <__sflush_r+0x106>
 80032e2:	2340      	movs	r3, #64	; 0x40
 80032e4:	89a2      	ldrh	r2, [r4, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	e7df      	b.n	80032aa <__sflush_r+0xc6>
 80032ea:	9b01      	ldr	r3, [sp, #4]
 80032ec:	183f      	adds	r7, r7, r0
 80032ee:	1a1b      	subs	r3, r3, r0
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	e7ea      	b.n	80032ca <__sflush_r+0xe6>
 80032f4:	20400001 	.word	0x20400001

080032f8 <_fflush_r>:
 80032f8:	690b      	ldr	r3, [r1, #16]
 80032fa:	b570      	push	{r4, r5, r6, lr}
 80032fc:	0005      	movs	r5, r0
 80032fe:	000c      	movs	r4, r1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <_fflush_r+0x10>
 8003304:	2000      	movs	r0, #0
 8003306:	bd70      	pop	{r4, r5, r6, pc}
 8003308:	2800      	cmp	r0, #0
 800330a:	d004      	beq.n	8003316 <_fflush_r+0x1e>
 800330c:	6983      	ldr	r3, [r0, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <_fflush_r+0x1e>
 8003312:	f000 f873 	bl	80033fc <__sinit>
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <_fflush_r+0x4c>)
 8003318:	429c      	cmp	r4, r3
 800331a:	d109      	bne.n	8003330 <_fflush_r+0x38>
 800331c:	686c      	ldr	r4, [r5, #4]
 800331e:	220c      	movs	r2, #12
 8003320:	5ea3      	ldrsh	r3, [r4, r2]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0ee      	beq.n	8003304 <_fflush_r+0xc>
 8003326:	0021      	movs	r1, r4
 8003328:	0028      	movs	r0, r5
 800332a:	f7ff ff5b 	bl	80031e4 <__sflush_r>
 800332e:	e7ea      	b.n	8003306 <_fflush_r+0xe>
 8003330:	4b05      	ldr	r3, [pc, #20]	; (8003348 <_fflush_r+0x50>)
 8003332:	429c      	cmp	r4, r3
 8003334:	d101      	bne.n	800333a <_fflush_r+0x42>
 8003336:	68ac      	ldr	r4, [r5, #8]
 8003338:	e7f1      	b.n	800331e <_fflush_r+0x26>
 800333a:	4b04      	ldr	r3, [pc, #16]	; (800334c <_fflush_r+0x54>)
 800333c:	429c      	cmp	r4, r3
 800333e:	d1ee      	bne.n	800331e <_fflush_r+0x26>
 8003340:	68ec      	ldr	r4, [r5, #12]
 8003342:	e7ec      	b.n	800331e <_fflush_r+0x26>
 8003344:	08004234 	.word	0x08004234
 8003348:	08004254 	.word	0x08004254
 800334c:	08004214 	.word	0x08004214

08003350 <fflush>:
 8003350:	b510      	push	{r4, lr}
 8003352:	1e01      	subs	r1, r0, #0
 8003354:	d105      	bne.n	8003362 <fflush+0x12>
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <fflush+0x1c>)
 8003358:	4905      	ldr	r1, [pc, #20]	; (8003370 <fflush+0x20>)
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	f000 f8c0 	bl	80034e0 <_fwalk_reent>
 8003360:	bd10      	pop	{r4, pc}
 8003362:	4b04      	ldr	r3, [pc, #16]	; (8003374 <fflush+0x24>)
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	f7ff ffc7 	bl	80032f8 <_fflush_r>
 800336a:	e7f9      	b.n	8003360 <fflush+0x10>
 800336c:	08004274 	.word	0x08004274
 8003370:	080032f9 	.word	0x080032f9
 8003374:	20000004 	.word	0x20000004

08003378 <std>:
 8003378:	2300      	movs	r3, #0
 800337a:	b510      	push	{r4, lr}
 800337c:	0004      	movs	r4, r0
 800337e:	6003      	str	r3, [r0, #0]
 8003380:	6043      	str	r3, [r0, #4]
 8003382:	6083      	str	r3, [r0, #8]
 8003384:	8181      	strh	r1, [r0, #12]
 8003386:	6643      	str	r3, [r0, #100]	; 0x64
 8003388:	81c2      	strh	r2, [r0, #14]
 800338a:	6103      	str	r3, [r0, #16]
 800338c:	6143      	str	r3, [r0, #20]
 800338e:	6183      	str	r3, [r0, #24]
 8003390:	0019      	movs	r1, r3
 8003392:	2208      	movs	r2, #8
 8003394:	305c      	adds	r0, #92	; 0x5c
 8003396:	f000 f8e9 	bl	800356c <memset>
 800339a:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <std+0x38>)
 800339c:	6224      	str	r4, [r4, #32]
 800339e:	6263      	str	r3, [r4, #36]	; 0x24
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <std+0x3c>)
 80033a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <std+0x40>)
 80033a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033a8:	4b04      	ldr	r3, [pc, #16]	; (80033bc <std+0x44>)
 80033aa:	6323      	str	r3, [r4, #48]	; 0x30
 80033ac:	bd10      	pop	{r4, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	080037f9 	.word	0x080037f9
 80033b4:	08003821 	.word	0x08003821
 80033b8:	08003859 	.word	0x08003859
 80033bc:	08003885 	.word	0x08003885

080033c0 <_cleanup_r>:
 80033c0:	b510      	push	{r4, lr}
 80033c2:	4902      	ldr	r1, [pc, #8]	; (80033cc <_cleanup_r+0xc>)
 80033c4:	f000 f88c 	bl	80034e0 <_fwalk_reent>
 80033c8:	bd10      	pop	{r4, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	080032f9 	.word	0x080032f9

080033d0 <__sfmoreglue>:
 80033d0:	b570      	push	{r4, r5, r6, lr}
 80033d2:	2568      	movs	r5, #104	; 0x68
 80033d4:	1e4a      	subs	r2, r1, #1
 80033d6:	4355      	muls	r5, r2
 80033d8:	000e      	movs	r6, r1
 80033da:	0029      	movs	r1, r5
 80033dc:	3174      	adds	r1, #116	; 0x74
 80033de:	f000 f917 	bl	8003610 <_malloc_r>
 80033e2:	1e04      	subs	r4, r0, #0
 80033e4:	d008      	beq.n	80033f8 <__sfmoreglue+0x28>
 80033e6:	2100      	movs	r1, #0
 80033e8:	002a      	movs	r2, r5
 80033ea:	6001      	str	r1, [r0, #0]
 80033ec:	6046      	str	r6, [r0, #4]
 80033ee:	300c      	adds	r0, #12
 80033f0:	60a0      	str	r0, [r4, #8]
 80033f2:	3268      	adds	r2, #104	; 0x68
 80033f4:	f000 f8ba 	bl	800356c <memset>
 80033f8:	0020      	movs	r0, r4
 80033fa:	bd70      	pop	{r4, r5, r6, pc}

080033fc <__sinit>:
 80033fc:	6983      	ldr	r3, [r0, #24]
 80033fe:	b513      	push	{r0, r1, r4, lr}
 8003400:	0004      	movs	r4, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d128      	bne.n	8003458 <__sinit+0x5c>
 8003406:	6483      	str	r3, [r0, #72]	; 0x48
 8003408:	64c3      	str	r3, [r0, #76]	; 0x4c
 800340a:	6503      	str	r3, [r0, #80]	; 0x50
 800340c:	4b13      	ldr	r3, [pc, #76]	; (800345c <__sinit+0x60>)
 800340e:	4a14      	ldr	r2, [pc, #80]	; (8003460 <__sinit+0x64>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6282      	str	r2, [r0, #40]	; 0x28
 8003414:	9301      	str	r3, [sp, #4]
 8003416:	4298      	cmp	r0, r3
 8003418:	d101      	bne.n	800341e <__sinit+0x22>
 800341a:	2301      	movs	r3, #1
 800341c:	6183      	str	r3, [r0, #24]
 800341e:	0020      	movs	r0, r4
 8003420:	f000 f820 	bl	8003464 <__sfp>
 8003424:	6060      	str	r0, [r4, #4]
 8003426:	0020      	movs	r0, r4
 8003428:	f000 f81c 	bl	8003464 <__sfp>
 800342c:	60a0      	str	r0, [r4, #8]
 800342e:	0020      	movs	r0, r4
 8003430:	f000 f818 	bl	8003464 <__sfp>
 8003434:	2200      	movs	r2, #0
 8003436:	60e0      	str	r0, [r4, #12]
 8003438:	2104      	movs	r1, #4
 800343a:	6860      	ldr	r0, [r4, #4]
 800343c:	f7ff ff9c 	bl	8003378 <std>
 8003440:	2201      	movs	r2, #1
 8003442:	2109      	movs	r1, #9
 8003444:	68a0      	ldr	r0, [r4, #8]
 8003446:	f7ff ff97 	bl	8003378 <std>
 800344a:	2202      	movs	r2, #2
 800344c:	2112      	movs	r1, #18
 800344e:	68e0      	ldr	r0, [r4, #12]
 8003450:	f7ff ff92 	bl	8003378 <std>
 8003454:	2301      	movs	r3, #1
 8003456:	61a3      	str	r3, [r4, #24]
 8003458:	bd13      	pop	{r0, r1, r4, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	08004274 	.word	0x08004274
 8003460:	080033c1 	.word	0x080033c1

08003464 <__sfp>:
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003466:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <__sfp+0x74>)
 8003468:	0007      	movs	r7, r0
 800346a:	681e      	ldr	r6, [r3, #0]
 800346c:	69b3      	ldr	r3, [r6, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <__sfp+0x14>
 8003472:	0030      	movs	r0, r6
 8003474:	f7ff ffc2 	bl	80033fc <__sinit>
 8003478:	3648      	adds	r6, #72	; 0x48
 800347a:	68b4      	ldr	r4, [r6, #8]
 800347c:	6873      	ldr	r3, [r6, #4]
 800347e:	3b01      	subs	r3, #1
 8003480:	d504      	bpl.n	800348c <__sfp+0x28>
 8003482:	6833      	ldr	r3, [r6, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d007      	beq.n	8003498 <__sfp+0x34>
 8003488:	6836      	ldr	r6, [r6, #0]
 800348a:	e7f6      	b.n	800347a <__sfp+0x16>
 800348c:	220c      	movs	r2, #12
 800348e:	5ea5      	ldrsh	r5, [r4, r2]
 8003490:	2d00      	cmp	r5, #0
 8003492:	d00d      	beq.n	80034b0 <__sfp+0x4c>
 8003494:	3468      	adds	r4, #104	; 0x68
 8003496:	e7f2      	b.n	800347e <__sfp+0x1a>
 8003498:	2104      	movs	r1, #4
 800349a:	0038      	movs	r0, r7
 800349c:	f7ff ff98 	bl	80033d0 <__sfmoreglue>
 80034a0:	6030      	str	r0, [r6, #0]
 80034a2:	2800      	cmp	r0, #0
 80034a4:	d1f0      	bne.n	8003488 <__sfp+0x24>
 80034a6:	230c      	movs	r3, #12
 80034a8:	0004      	movs	r4, r0
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	0020      	movs	r0, r4
 80034ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034b0:	0020      	movs	r0, r4
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <__sfp+0x78>)
 80034b4:	6665      	str	r5, [r4, #100]	; 0x64
 80034b6:	6025      	str	r5, [r4, #0]
 80034b8:	6065      	str	r5, [r4, #4]
 80034ba:	60a5      	str	r5, [r4, #8]
 80034bc:	60e3      	str	r3, [r4, #12]
 80034be:	6125      	str	r5, [r4, #16]
 80034c0:	6165      	str	r5, [r4, #20]
 80034c2:	61a5      	str	r5, [r4, #24]
 80034c4:	2208      	movs	r2, #8
 80034c6:	0029      	movs	r1, r5
 80034c8:	305c      	adds	r0, #92	; 0x5c
 80034ca:	f000 f84f 	bl	800356c <memset>
 80034ce:	6365      	str	r5, [r4, #52]	; 0x34
 80034d0:	63a5      	str	r5, [r4, #56]	; 0x38
 80034d2:	64a5      	str	r5, [r4, #72]	; 0x48
 80034d4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80034d6:	e7e9      	b.n	80034ac <__sfp+0x48>
 80034d8:	08004274 	.word	0x08004274
 80034dc:	ffff0001 	.word	0xffff0001

080034e0 <_fwalk_reent>:
 80034e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034e2:	0004      	movs	r4, r0
 80034e4:	0007      	movs	r7, r0
 80034e6:	2600      	movs	r6, #0
 80034e8:	9101      	str	r1, [sp, #4]
 80034ea:	3448      	adds	r4, #72	; 0x48
 80034ec:	2c00      	cmp	r4, #0
 80034ee:	d101      	bne.n	80034f4 <_fwalk_reent+0x14>
 80034f0:	0030      	movs	r0, r6
 80034f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034f4:	6863      	ldr	r3, [r4, #4]
 80034f6:	68a5      	ldr	r5, [r4, #8]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	9b00      	ldr	r3, [sp, #0]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	d501      	bpl.n	8003506 <_fwalk_reent+0x26>
 8003502:	6824      	ldr	r4, [r4, #0]
 8003504:	e7f2      	b.n	80034ec <_fwalk_reent+0xc>
 8003506:	89ab      	ldrh	r3, [r5, #12]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d908      	bls.n	800351e <_fwalk_reent+0x3e>
 800350c:	220e      	movs	r2, #14
 800350e:	5eab      	ldrsh	r3, [r5, r2]
 8003510:	3301      	adds	r3, #1
 8003512:	d004      	beq.n	800351e <_fwalk_reent+0x3e>
 8003514:	0029      	movs	r1, r5
 8003516:	0038      	movs	r0, r7
 8003518:	9b01      	ldr	r3, [sp, #4]
 800351a:	4798      	blx	r3
 800351c:	4306      	orrs	r6, r0
 800351e:	3568      	adds	r5, #104	; 0x68
 8003520:	e7eb      	b.n	80034fa <_fwalk_reent+0x1a>
	...

08003524 <__libc_init_array>:
 8003524:	b570      	push	{r4, r5, r6, lr}
 8003526:	2600      	movs	r6, #0
 8003528:	4d0c      	ldr	r5, [pc, #48]	; (800355c <__libc_init_array+0x38>)
 800352a:	4c0d      	ldr	r4, [pc, #52]	; (8003560 <__libc_init_array+0x3c>)
 800352c:	1b64      	subs	r4, r4, r5
 800352e:	10a4      	asrs	r4, r4, #2
 8003530:	42a6      	cmp	r6, r4
 8003532:	d109      	bne.n	8003548 <__libc_init_array+0x24>
 8003534:	2600      	movs	r6, #0
 8003536:	f000 fe17 	bl	8004168 <_init>
 800353a:	4d0a      	ldr	r5, [pc, #40]	; (8003564 <__libc_init_array+0x40>)
 800353c:	4c0a      	ldr	r4, [pc, #40]	; (8003568 <__libc_init_array+0x44>)
 800353e:	1b64      	subs	r4, r4, r5
 8003540:	10a4      	asrs	r4, r4, #2
 8003542:	42a6      	cmp	r6, r4
 8003544:	d105      	bne.n	8003552 <__libc_init_array+0x2e>
 8003546:	bd70      	pop	{r4, r5, r6, pc}
 8003548:	00b3      	lsls	r3, r6, #2
 800354a:	58eb      	ldr	r3, [r5, r3]
 800354c:	4798      	blx	r3
 800354e:	3601      	adds	r6, #1
 8003550:	e7ee      	b.n	8003530 <__libc_init_array+0xc>
 8003552:	00b3      	lsls	r3, r6, #2
 8003554:	58eb      	ldr	r3, [r5, r3]
 8003556:	4798      	blx	r3
 8003558:	3601      	adds	r6, #1
 800355a:	e7f2      	b.n	8003542 <__libc_init_array+0x1e>
 800355c:	080042b4 	.word	0x080042b4
 8003560:	080042b4 	.word	0x080042b4
 8003564:	080042b4 	.word	0x080042b4
 8003568:	080042b8 	.word	0x080042b8

0800356c <memset>:
 800356c:	0003      	movs	r3, r0
 800356e:	1812      	adds	r2, r2, r0
 8003570:	4293      	cmp	r3, r2
 8003572:	d100      	bne.n	8003576 <memset+0xa>
 8003574:	4770      	bx	lr
 8003576:	7019      	strb	r1, [r3, #0]
 8003578:	3301      	adds	r3, #1
 800357a:	e7f9      	b.n	8003570 <memset+0x4>

0800357c <_free_r>:
 800357c:	b570      	push	{r4, r5, r6, lr}
 800357e:	0005      	movs	r5, r0
 8003580:	2900      	cmp	r1, #0
 8003582:	d010      	beq.n	80035a6 <_free_r+0x2a>
 8003584:	1f0c      	subs	r4, r1, #4
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	da00      	bge.n	800358e <_free_r+0x12>
 800358c:	18e4      	adds	r4, r4, r3
 800358e:	0028      	movs	r0, r5
 8003590:	f000 faf0 	bl	8003b74 <__malloc_lock>
 8003594:	4a1d      	ldr	r2, [pc, #116]	; (800360c <_free_r+0x90>)
 8003596:	6813      	ldr	r3, [r2, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <_free_r+0x2c>
 800359c:	6063      	str	r3, [r4, #4]
 800359e:	6014      	str	r4, [r2, #0]
 80035a0:	0028      	movs	r0, r5
 80035a2:	f000 fae8 	bl	8003b76 <__malloc_unlock>
 80035a6:	bd70      	pop	{r4, r5, r6, pc}
 80035a8:	42a3      	cmp	r3, r4
 80035aa:	d909      	bls.n	80035c0 <_free_r+0x44>
 80035ac:	6821      	ldr	r1, [r4, #0]
 80035ae:	1860      	adds	r0, r4, r1
 80035b0:	4283      	cmp	r3, r0
 80035b2:	d1f3      	bne.n	800359c <_free_r+0x20>
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	1841      	adds	r1, r0, r1
 80035ba:	6021      	str	r1, [r4, #0]
 80035bc:	e7ee      	b.n	800359c <_free_r+0x20>
 80035be:	0013      	movs	r3, r2
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	2a00      	cmp	r2, #0
 80035c4:	d001      	beq.n	80035ca <_free_r+0x4e>
 80035c6:	42a2      	cmp	r2, r4
 80035c8:	d9f9      	bls.n	80035be <_free_r+0x42>
 80035ca:	6819      	ldr	r1, [r3, #0]
 80035cc:	1858      	adds	r0, r3, r1
 80035ce:	42a0      	cmp	r0, r4
 80035d0:	d10b      	bne.n	80035ea <_free_r+0x6e>
 80035d2:	6820      	ldr	r0, [r4, #0]
 80035d4:	1809      	adds	r1, r1, r0
 80035d6:	1858      	adds	r0, r3, r1
 80035d8:	6019      	str	r1, [r3, #0]
 80035da:	4282      	cmp	r2, r0
 80035dc:	d1e0      	bne.n	80035a0 <_free_r+0x24>
 80035de:	6810      	ldr	r0, [r2, #0]
 80035e0:	6852      	ldr	r2, [r2, #4]
 80035e2:	1841      	adds	r1, r0, r1
 80035e4:	6019      	str	r1, [r3, #0]
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	e7da      	b.n	80035a0 <_free_r+0x24>
 80035ea:	42a0      	cmp	r0, r4
 80035ec:	d902      	bls.n	80035f4 <_free_r+0x78>
 80035ee:	230c      	movs	r3, #12
 80035f0:	602b      	str	r3, [r5, #0]
 80035f2:	e7d5      	b.n	80035a0 <_free_r+0x24>
 80035f4:	6821      	ldr	r1, [r4, #0]
 80035f6:	1860      	adds	r0, r4, r1
 80035f8:	4282      	cmp	r2, r0
 80035fa:	d103      	bne.n	8003604 <_free_r+0x88>
 80035fc:	6810      	ldr	r0, [r2, #0]
 80035fe:	6852      	ldr	r2, [r2, #4]
 8003600:	1841      	adds	r1, r0, r1
 8003602:	6021      	str	r1, [r4, #0]
 8003604:	6062      	str	r2, [r4, #4]
 8003606:	605c      	str	r4, [r3, #4]
 8003608:	e7ca      	b.n	80035a0 <_free_r+0x24>
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	20000090 	.word	0x20000090

08003610 <_malloc_r>:
 8003610:	2303      	movs	r3, #3
 8003612:	b570      	push	{r4, r5, r6, lr}
 8003614:	1ccd      	adds	r5, r1, #3
 8003616:	439d      	bics	r5, r3
 8003618:	3508      	adds	r5, #8
 800361a:	0006      	movs	r6, r0
 800361c:	2d0c      	cmp	r5, #12
 800361e:	d21e      	bcs.n	800365e <_malloc_r+0x4e>
 8003620:	250c      	movs	r5, #12
 8003622:	42a9      	cmp	r1, r5
 8003624:	d81d      	bhi.n	8003662 <_malloc_r+0x52>
 8003626:	0030      	movs	r0, r6
 8003628:	f000 faa4 	bl	8003b74 <__malloc_lock>
 800362c:	4a25      	ldr	r2, [pc, #148]	; (80036c4 <_malloc_r+0xb4>)
 800362e:	6814      	ldr	r4, [r2, #0]
 8003630:	0021      	movs	r1, r4
 8003632:	2900      	cmp	r1, #0
 8003634:	d119      	bne.n	800366a <_malloc_r+0x5a>
 8003636:	4c24      	ldr	r4, [pc, #144]	; (80036c8 <_malloc_r+0xb8>)
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <_malloc_r+0x36>
 800363e:	0030      	movs	r0, r6
 8003640:	f000 f8c8 	bl	80037d4 <_sbrk_r>
 8003644:	6020      	str	r0, [r4, #0]
 8003646:	0029      	movs	r1, r5
 8003648:	0030      	movs	r0, r6
 800364a:	f000 f8c3 	bl	80037d4 <_sbrk_r>
 800364e:	1c43      	adds	r3, r0, #1
 8003650:	d12b      	bne.n	80036aa <_malloc_r+0x9a>
 8003652:	230c      	movs	r3, #12
 8003654:	0030      	movs	r0, r6
 8003656:	6033      	str	r3, [r6, #0]
 8003658:	f000 fa8d 	bl	8003b76 <__malloc_unlock>
 800365c:	e003      	b.n	8003666 <_malloc_r+0x56>
 800365e:	2d00      	cmp	r5, #0
 8003660:	dadf      	bge.n	8003622 <_malloc_r+0x12>
 8003662:	230c      	movs	r3, #12
 8003664:	6033      	str	r3, [r6, #0]
 8003666:	2000      	movs	r0, #0
 8003668:	bd70      	pop	{r4, r5, r6, pc}
 800366a:	680b      	ldr	r3, [r1, #0]
 800366c:	1b5b      	subs	r3, r3, r5
 800366e:	d419      	bmi.n	80036a4 <_malloc_r+0x94>
 8003670:	2b0b      	cmp	r3, #11
 8003672:	d903      	bls.n	800367c <_malloc_r+0x6c>
 8003674:	600b      	str	r3, [r1, #0]
 8003676:	18cc      	adds	r4, r1, r3
 8003678:	6025      	str	r5, [r4, #0]
 800367a:	e003      	b.n	8003684 <_malloc_r+0x74>
 800367c:	684b      	ldr	r3, [r1, #4]
 800367e:	428c      	cmp	r4, r1
 8003680:	d10d      	bne.n	800369e <_malloc_r+0x8e>
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	0030      	movs	r0, r6
 8003686:	f000 fa76 	bl	8003b76 <__malloc_unlock>
 800368a:	0020      	movs	r0, r4
 800368c:	2207      	movs	r2, #7
 800368e:	300b      	adds	r0, #11
 8003690:	1d23      	adds	r3, r4, #4
 8003692:	4390      	bics	r0, r2
 8003694:	1ac3      	subs	r3, r0, r3
 8003696:	d0e7      	beq.n	8003668 <_malloc_r+0x58>
 8003698:	425a      	negs	r2, r3
 800369a:	50e2      	str	r2, [r4, r3]
 800369c:	e7e4      	b.n	8003668 <_malloc_r+0x58>
 800369e:	6063      	str	r3, [r4, #4]
 80036a0:	000c      	movs	r4, r1
 80036a2:	e7ef      	b.n	8003684 <_malloc_r+0x74>
 80036a4:	000c      	movs	r4, r1
 80036a6:	6849      	ldr	r1, [r1, #4]
 80036a8:	e7c3      	b.n	8003632 <_malloc_r+0x22>
 80036aa:	2303      	movs	r3, #3
 80036ac:	1cc4      	adds	r4, r0, #3
 80036ae:	439c      	bics	r4, r3
 80036b0:	42a0      	cmp	r0, r4
 80036b2:	d0e1      	beq.n	8003678 <_malloc_r+0x68>
 80036b4:	1a21      	subs	r1, r4, r0
 80036b6:	0030      	movs	r0, r6
 80036b8:	f000 f88c 	bl	80037d4 <_sbrk_r>
 80036bc:	1c43      	adds	r3, r0, #1
 80036be:	d1db      	bne.n	8003678 <_malloc_r+0x68>
 80036c0:	e7c7      	b.n	8003652 <_malloc_r+0x42>
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	20000090 	.word	0x20000090
 80036c8:	20000094 	.word	0x20000094

080036cc <iprintf>:
 80036cc:	b40f      	push	{r0, r1, r2, r3}
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <iprintf+0x30>)
 80036d0:	b513      	push	{r0, r1, r4, lr}
 80036d2:	681c      	ldr	r4, [r3, #0]
 80036d4:	2c00      	cmp	r4, #0
 80036d6:	d005      	beq.n	80036e4 <iprintf+0x18>
 80036d8:	69a3      	ldr	r3, [r4, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d102      	bne.n	80036e4 <iprintf+0x18>
 80036de:	0020      	movs	r0, r4
 80036e0:	f7ff fe8c 	bl	80033fc <__sinit>
 80036e4:	ab05      	add	r3, sp, #20
 80036e6:	9a04      	ldr	r2, [sp, #16]
 80036e8:	68a1      	ldr	r1, [r4, #8]
 80036ea:	0020      	movs	r0, r4
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	f000 fa6b 	bl	8003bc8 <_vfiprintf_r>
 80036f2:	bc16      	pop	{r1, r2, r4}
 80036f4:	bc08      	pop	{r3}
 80036f6:	b004      	add	sp, #16
 80036f8:	4718      	bx	r3
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	20000004 	.word	0x20000004

08003700 <_puts_r>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	0005      	movs	r5, r0
 8003704:	000e      	movs	r6, r1
 8003706:	2800      	cmp	r0, #0
 8003708:	d004      	beq.n	8003714 <_puts_r+0x14>
 800370a:	6983      	ldr	r3, [r0, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <_puts_r+0x14>
 8003710:	f7ff fe74 	bl	80033fc <__sinit>
 8003714:	69ab      	ldr	r3, [r5, #24]
 8003716:	68ac      	ldr	r4, [r5, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <_puts_r+0x22>
 800371c:	0028      	movs	r0, r5
 800371e:	f7ff fe6d 	bl	80033fc <__sinit>
 8003722:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <_puts_r+0xb4>)
 8003724:	429c      	cmp	r4, r3
 8003726:	d10f      	bne.n	8003748 <_puts_r+0x48>
 8003728:	686c      	ldr	r4, [r5, #4]
 800372a:	89a3      	ldrh	r3, [r4, #12]
 800372c:	071b      	lsls	r3, r3, #28
 800372e:	d502      	bpl.n	8003736 <_puts_r+0x36>
 8003730:	6923      	ldr	r3, [r4, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d11f      	bne.n	8003776 <_puts_r+0x76>
 8003736:	0021      	movs	r1, r4
 8003738:	0028      	movs	r0, r5
 800373a:	f000 f913 	bl	8003964 <__swsetup_r>
 800373e:	2800      	cmp	r0, #0
 8003740:	d019      	beq.n	8003776 <_puts_r+0x76>
 8003742:	2001      	movs	r0, #1
 8003744:	4240      	negs	r0, r0
 8003746:	bd70      	pop	{r4, r5, r6, pc}
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <_puts_r+0xb8>)
 800374a:	429c      	cmp	r4, r3
 800374c:	d101      	bne.n	8003752 <_puts_r+0x52>
 800374e:	68ac      	ldr	r4, [r5, #8]
 8003750:	e7eb      	b.n	800372a <_puts_r+0x2a>
 8003752:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <_puts_r+0xbc>)
 8003754:	429c      	cmp	r4, r3
 8003756:	d1e8      	bne.n	800372a <_puts_r+0x2a>
 8003758:	68ec      	ldr	r4, [r5, #12]
 800375a:	e7e6      	b.n	800372a <_puts_r+0x2a>
 800375c:	3601      	adds	r6, #1
 800375e:	60a3      	str	r3, [r4, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	da04      	bge.n	800376e <_puts_r+0x6e>
 8003764:	69a2      	ldr	r2, [r4, #24]
 8003766:	429a      	cmp	r2, r3
 8003768:	dc16      	bgt.n	8003798 <_puts_r+0x98>
 800376a:	290a      	cmp	r1, #10
 800376c:	d014      	beq.n	8003798 <_puts_r+0x98>
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	6022      	str	r2, [r4, #0]
 8003774:	7019      	strb	r1, [r3, #0]
 8003776:	68a3      	ldr	r3, [r4, #8]
 8003778:	7831      	ldrb	r1, [r6, #0]
 800377a:	3b01      	subs	r3, #1
 800377c:	2900      	cmp	r1, #0
 800377e:	d1ed      	bne.n	800375c <_puts_r+0x5c>
 8003780:	60a3      	str	r3, [r4, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	da0f      	bge.n	80037a6 <_puts_r+0xa6>
 8003786:	0022      	movs	r2, r4
 8003788:	310a      	adds	r1, #10
 800378a:	0028      	movs	r0, r5
 800378c:	f000 f880 	bl	8003890 <__swbuf_r>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d0d6      	beq.n	8003742 <_puts_r+0x42>
 8003794:	200a      	movs	r0, #10
 8003796:	e7d6      	b.n	8003746 <_puts_r+0x46>
 8003798:	0022      	movs	r2, r4
 800379a:	0028      	movs	r0, r5
 800379c:	f000 f878 	bl	8003890 <__swbuf_r>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d1e8      	bne.n	8003776 <_puts_r+0x76>
 80037a4:	e7cd      	b.n	8003742 <_puts_r+0x42>
 80037a6:	200a      	movs	r0, #10
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	6022      	str	r2, [r4, #0]
 80037ae:	7018      	strb	r0, [r3, #0]
 80037b0:	e7c9      	b.n	8003746 <_puts_r+0x46>
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	08004234 	.word	0x08004234
 80037b8:	08004254 	.word	0x08004254
 80037bc:	08004214 	.word	0x08004214

080037c0 <puts>:
 80037c0:	b510      	push	{r4, lr}
 80037c2:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <puts+0x10>)
 80037c4:	0001      	movs	r1, r0
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	f7ff ff9a 	bl	8003700 <_puts_r>
 80037cc:	bd10      	pop	{r4, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	20000004 	.word	0x20000004

080037d4 <_sbrk_r>:
 80037d4:	2300      	movs	r3, #0
 80037d6:	b570      	push	{r4, r5, r6, lr}
 80037d8:	4c06      	ldr	r4, [pc, #24]	; (80037f4 <_sbrk_r+0x20>)
 80037da:	0005      	movs	r5, r0
 80037dc:	0008      	movs	r0, r1
 80037de:	6023      	str	r3, [r4, #0]
 80037e0:	f7ff fc66 	bl	80030b0 <_sbrk>
 80037e4:	1c43      	adds	r3, r0, #1
 80037e6:	d103      	bne.n	80037f0 <_sbrk_r+0x1c>
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d000      	beq.n	80037f0 <_sbrk_r+0x1c>
 80037ee:	602b      	str	r3, [r5, #0]
 80037f0:	bd70      	pop	{r4, r5, r6, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	20000158 	.word	0x20000158

080037f8 <__sread>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	000c      	movs	r4, r1
 80037fc:	250e      	movs	r5, #14
 80037fe:	5f49      	ldrsh	r1, [r1, r5]
 8003800:	f000 fc6e 	bl	80040e0 <_read_r>
 8003804:	2800      	cmp	r0, #0
 8003806:	db03      	blt.n	8003810 <__sread+0x18>
 8003808:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800380a:	181b      	adds	r3, r3, r0
 800380c:	6563      	str	r3, [r4, #84]	; 0x54
 800380e:	bd70      	pop	{r4, r5, r6, pc}
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	4a02      	ldr	r2, [pc, #8]	; (800381c <__sread+0x24>)
 8003814:	4013      	ands	r3, r2
 8003816:	81a3      	strh	r3, [r4, #12]
 8003818:	e7f9      	b.n	800380e <__sread+0x16>
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	ffffefff 	.word	0xffffefff

08003820 <__swrite>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	001f      	movs	r7, r3
 8003824:	898b      	ldrh	r3, [r1, #12]
 8003826:	0005      	movs	r5, r0
 8003828:	000c      	movs	r4, r1
 800382a:	0016      	movs	r6, r2
 800382c:	05db      	lsls	r3, r3, #23
 800382e:	d505      	bpl.n	800383c <__swrite+0x1c>
 8003830:	230e      	movs	r3, #14
 8003832:	5ec9      	ldrsh	r1, [r1, r3]
 8003834:	2200      	movs	r2, #0
 8003836:	2302      	movs	r3, #2
 8003838:	f000 f91c 	bl	8003a74 <_lseek_r>
 800383c:	89a3      	ldrh	r3, [r4, #12]
 800383e:	4a05      	ldr	r2, [pc, #20]	; (8003854 <__swrite+0x34>)
 8003840:	0028      	movs	r0, r5
 8003842:	4013      	ands	r3, r2
 8003844:	81a3      	strh	r3, [r4, #12]
 8003846:	0032      	movs	r2, r6
 8003848:	230e      	movs	r3, #14
 800384a:	5ee1      	ldrsh	r1, [r4, r3]
 800384c:	003b      	movs	r3, r7
 800384e:	f000 f875 	bl	800393c <_write_r>
 8003852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003854:	ffffefff 	.word	0xffffefff

08003858 <__sseek>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	000c      	movs	r4, r1
 800385c:	250e      	movs	r5, #14
 800385e:	5f49      	ldrsh	r1, [r1, r5]
 8003860:	f000 f908 	bl	8003a74 <_lseek_r>
 8003864:	89a3      	ldrh	r3, [r4, #12]
 8003866:	1c42      	adds	r2, r0, #1
 8003868:	d103      	bne.n	8003872 <__sseek+0x1a>
 800386a:	4a05      	ldr	r2, [pc, #20]	; (8003880 <__sseek+0x28>)
 800386c:	4013      	ands	r3, r2
 800386e:	81a3      	strh	r3, [r4, #12]
 8003870:	bd70      	pop	{r4, r5, r6, pc}
 8003872:	2280      	movs	r2, #128	; 0x80
 8003874:	0152      	lsls	r2, r2, #5
 8003876:	4313      	orrs	r3, r2
 8003878:	81a3      	strh	r3, [r4, #12]
 800387a:	6560      	str	r0, [r4, #84]	; 0x54
 800387c:	e7f8      	b.n	8003870 <__sseek+0x18>
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	ffffefff 	.word	0xffffefff

08003884 <__sclose>:
 8003884:	b510      	push	{r4, lr}
 8003886:	230e      	movs	r3, #14
 8003888:	5ec9      	ldrsh	r1, [r1, r3]
 800388a:	f000 f8e1 	bl	8003a50 <_close_r>
 800388e:	bd10      	pop	{r4, pc}

08003890 <__swbuf_r>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	0005      	movs	r5, r0
 8003894:	000e      	movs	r6, r1
 8003896:	0014      	movs	r4, r2
 8003898:	2800      	cmp	r0, #0
 800389a:	d004      	beq.n	80038a6 <__swbuf_r+0x16>
 800389c:	6983      	ldr	r3, [r0, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <__swbuf_r+0x16>
 80038a2:	f7ff fdab 	bl	80033fc <__sinit>
 80038a6:	4b22      	ldr	r3, [pc, #136]	; (8003930 <__swbuf_r+0xa0>)
 80038a8:	429c      	cmp	r4, r3
 80038aa:	d12d      	bne.n	8003908 <__swbuf_r+0x78>
 80038ac:	686c      	ldr	r4, [r5, #4]
 80038ae:	69a3      	ldr	r3, [r4, #24]
 80038b0:	60a3      	str	r3, [r4, #8]
 80038b2:	89a3      	ldrh	r3, [r4, #12]
 80038b4:	071b      	lsls	r3, r3, #28
 80038b6:	d531      	bpl.n	800391c <__swbuf_r+0x8c>
 80038b8:	6923      	ldr	r3, [r4, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d02e      	beq.n	800391c <__swbuf_r+0x8c>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	6922      	ldr	r2, [r4, #16]
 80038c2:	b2f7      	uxtb	r7, r6
 80038c4:	1a98      	subs	r0, r3, r2
 80038c6:	6963      	ldr	r3, [r4, #20]
 80038c8:	b2f6      	uxtb	r6, r6
 80038ca:	4283      	cmp	r3, r0
 80038cc:	dc05      	bgt.n	80038da <__swbuf_r+0x4a>
 80038ce:	0021      	movs	r1, r4
 80038d0:	0028      	movs	r0, r5
 80038d2:	f7ff fd11 	bl	80032f8 <_fflush_r>
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d126      	bne.n	8003928 <__swbuf_r+0x98>
 80038da:	68a3      	ldr	r3, [r4, #8]
 80038dc:	3001      	adds	r0, #1
 80038de:	3b01      	subs	r3, #1
 80038e0:	60a3      	str	r3, [r4, #8]
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	6022      	str	r2, [r4, #0]
 80038e8:	701f      	strb	r7, [r3, #0]
 80038ea:	6963      	ldr	r3, [r4, #20]
 80038ec:	4283      	cmp	r3, r0
 80038ee:	d004      	beq.n	80038fa <__swbuf_r+0x6a>
 80038f0:	89a3      	ldrh	r3, [r4, #12]
 80038f2:	07db      	lsls	r3, r3, #31
 80038f4:	d51a      	bpl.n	800392c <__swbuf_r+0x9c>
 80038f6:	2e0a      	cmp	r6, #10
 80038f8:	d118      	bne.n	800392c <__swbuf_r+0x9c>
 80038fa:	0021      	movs	r1, r4
 80038fc:	0028      	movs	r0, r5
 80038fe:	f7ff fcfb 	bl	80032f8 <_fflush_r>
 8003902:	2800      	cmp	r0, #0
 8003904:	d012      	beq.n	800392c <__swbuf_r+0x9c>
 8003906:	e00f      	b.n	8003928 <__swbuf_r+0x98>
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <__swbuf_r+0xa4>)
 800390a:	429c      	cmp	r4, r3
 800390c:	d101      	bne.n	8003912 <__swbuf_r+0x82>
 800390e:	68ac      	ldr	r4, [r5, #8]
 8003910:	e7cd      	b.n	80038ae <__swbuf_r+0x1e>
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <__swbuf_r+0xa8>)
 8003914:	429c      	cmp	r4, r3
 8003916:	d1ca      	bne.n	80038ae <__swbuf_r+0x1e>
 8003918:	68ec      	ldr	r4, [r5, #12]
 800391a:	e7c8      	b.n	80038ae <__swbuf_r+0x1e>
 800391c:	0021      	movs	r1, r4
 800391e:	0028      	movs	r0, r5
 8003920:	f000 f820 	bl	8003964 <__swsetup_r>
 8003924:	2800      	cmp	r0, #0
 8003926:	d0ca      	beq.n	80038be <__swbuf_r+0x2e>
 8003928:	2601      	movs	r6, #1
 800392a:	4276      	negs	r6, r6
 800392c:	0030      	movs	r0, r6
 800392e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003930:	08004234 	.word	0x08004234
 8003934:	08004254 	.word	0x08004254
 8003938:	08004214 	.word	0x08004214

0800393c <_write_r>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	0005      	movs	r5, r0
 8003940:	0008      	movs	r0, r1
 8003942:	0011      	movs	r1, r2
 8003944:	2200      	movs	r2, #0
 8003946:	4c06      	ldr	r4, [pc, #24]	; (8003960 <_write_r+0x24>)
 8003948:	6022      	str	r2, [r4, #0]
 800394a:	001a      	movs	r2, r3
 800394c:	f7ff fb67 	bl	800301e <_write>
 8003950:	1c43      	adds	r3, r0, #1
 8003952:	d103      	bne.n	800395c <_write_r+0x20>
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d000      	beq.n	800395c <_write_r+0x20>
 800395a:	602b      	str	r3, [r5, #0]
 800395c:	bd70      	pop	{r4, r5, r6, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	20000158 	.word	0x20000158

08003964 <__swsetup_r>:
 8003964:	4b36      	ldr	r3, [pc, #216]	; (8003a40 <__swsetup_r+0xdc>)
 8003966:	b570      	push	{r4, r5, r6, lr}
 8003968:	681d      	ldr	r5, [r3, #0]
 800396a:	0006      	movs	r6, r0
 800396c:	000c      	movs	r4, r1
 800396e:	2d00      	cmp	r5, #0
 8003970:	d005      	beq.n	800397e <__swsetup_r+0x1a>
 8003972:	69ab      	ldr	r3, [r5, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <__swsetup_r+0x1a>
 8003978:	0028      	movs	r0, r5
 800397a:	f7ff fd3f 	bl	80033fc <__sinit>
 800397e:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <__swsetup_r+0xe0>)
 8003980:	429c      	cmp	r4, r3
 8003982:	d10f      	bne.n	80039a4 <__swsetup_r+0x40>
 8003984:	686c      	ldr	r4, [r5, #4]
 8003986:	230c      	movs	r3, #12
 8003988:	5ee2      	ldrsh	r2, [r4, r3]
 800398a:	b293      	uxth	r3, r2
 800398c:	0719      	lsls	r1, r3, #28
 800398e:	d42d      	bmi.n	80039ec <__swsetup_r+0x88>
 8003990:	06d9      	lsls	r1, r3, #27
 8003992:	d411      	bmi.n	80039b8 <__swsetup_r+0x54>
 8003994:	2309      	movs	r3, #9
 8003996:	2001      	movs	r0, #1
 8003998:	6033      	str	r3, [r6, #0]
 800399a:	3337      	adds	r3, #55	; 0x37
 800399c:	4313      	orrs	r3, r2
 800399e:	81a3      	strh	r3, [r4, #12]
 80039a0:	4240      	negs	r0, r0
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
 80039a4:	4b28      	ldr	r3, [pc, #160]	; (8003a48 <__swsetup_r+0xe4>)
 80039a6:	429c      	cmp	r4, r3
 80039a8:	d101      	bne.n	80039ae <__swsetup_r+0x4a>
 80039aa:	68ac      	ldr	r4, [r5, #8]
 80039ac:	e7eb      	b.n	8003986 <__swsetup_r+0x22>
 80039ae:	4b27      	ldr	r3, [pc, #156]	; (8003a4c <__swsetup_r+0xe8>)
 80039b0:	429c      	cmp	r4, r3
 80039b2:	d1e8      	bne.n	8003986 <__swsetup_r+0x22>
 80039b4:	68ec      	ldr	r4, [r5, #12]
 80039b6:	e7e6      	b.n	8003986 <__swsetup_r+0x22>
 80039b8:	075b      	lsls	r3, r3, #29
 80039ba:	d513      	bpl.n	80039e4 <__swsetup_r+0x80>
 80039bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039be:	2900      	cmp	r1, #0
 80039c0:	d008      	beq.n	80039d4 <__swsetup_r+0x70>
 80039c2:	0023      	movs	r3, r4
 80039c4:	3344      	adds	r3, #68	; 0x44
 80039c6:	4299      	cmp	r1, r3
 80039c8:	d002      	beq.n	80039d0 <__swsetup_r+0x6c>
 80039ca:	0030      	movs	r0, r6
 80039cc:	f7ff fdd6 	bl	800357c <_free_r>
 80039d0:	2300      	movs	r3, #0
 80039d2:	6363      	str	r3, [r4, #52]	; 0x34
 80039d4:	2224      	movs	r2, #36	; 0x24
 80039d6:	89a3      	ldrh	r3, [r4, #12]
 80039d8:	4393      	bics	r3, r2
 80039da:	81a3      	strh	r3, [r4, #12]
 80039dc:	2300      	movs	r3, #0
 80039de:	6063      	str	r3, [r4, #4]
 80039e0:	6923      	ldr	r3, [r4, #16]
 80039e2:	6023      	str	r3, [r4, #0]
 80039e4:	2308      	movs	r3, #8
 80039e6:	89a2      	ldrh	r2, [r4, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	81a3      	strh	r3, [r4, #12]
 80039ec:	6923      	ldr	r3, [r4, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <__swsetup_r+0xa6>
 80039f2:	21a0      	movs	r1, #160	; 0xa0
 80039f4:	2280      	movs	r2, #128	; 0x80
 80039f6:	89a3      	ldrh	r3, [r4, #12]
 80039f8:	0089      	lsls	r1, r1, #2
 80039fa:	0092      	lsls	r2, r2, #2
 80039fc:	400b      	ands	r3, r1
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d003      	beq.n	8003a0a <__swsetup_r+0xa6>
 8003a02:	0021      	movs	r1, r4
 8003a04:	0030      	movs	r0, r6
 8003a06:	f000 f871 	bl	8003aec <__smakebuf_r>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	89a2      	ldrh	r2, [r4, #12]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d011      	beq.n	8003a36 <__swsetup_r+0xd2>
 8003a12:	2300      	movs	r3, #0
 8003a14:	60a3      	str	r3, [r4, #8]
 8003a16:	6963      	ldr	r3, [r4, #20]
 8003a18:	425b      	negs	r3, r3
 8003a1a:	61a3      	str	r3, [r4, #24]
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	6923      	ldr	r3, [r4, #16]
 8003a20:	4283      	cmp	r3, r0
 8003a22:	d1be      	bne.n	80039a2 <__swsetup_r+0x3e>
 8003a24:	230c      	movs	r3, #12
 8003a26:	5ee2      	ldrsh	r2, [r4, r3]
 8003a28:	0613      	lsls	r3, r2, #24
 8003a2a:	d5ba      	bpl.n	80039a2 <__swsetup_r+0x3e>
 8003a2c:	2340      	movs	r3, #64	; 0x40
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	81a3      	strh	r3, [r4, #12]
 8003a32:	3801      	subs	r0, #1
 8003a34:	e7b5      	b.n	80039a2 <__swsetup_r+0x3e>
 8003a36:	0792      	lsls	r2, r2, #30
 8003a38:	d400      	bmi.n	8003a3c <__swsetup_r+0xd8>
 8003a3a:	6963      	ldr	r3, [r4, #20]
 8003a3c:	60a3      	str	r3, [r4, #8]
 8003a3e:	e7ed      	b.n	8003a1c <__swsetup_r+0xb8>
 8003a40:	20000004 	.word	0x20000004
 8003a44:	08004234 	.word	0x08004234
 8003a48:	08004254 	.word	0x08004254
 8003a4c:	08004214 	.word	0x08004214

08003a50 <_close_r>:
 8003a50:	2300      	movs	r3, #0
 8003a52:	b570      	push	{r4, r5, r6, lr}
 8003a54:	4c06      	ldr	r4, [pc, #24]	; (8003a70 <_close_r+0x20>)
 8003a56:	0005      	movs	r5, r0
 8003a58:	0008      	movs	r0, r1
 8003a5a:	6023      	str	r3, [r4, #0]
 8003a5c:	f7ff fafb 	bl	8003056 <_close>
 8003a60:	1c43      	adds	r3, r0, #1
 8003a62:	d103      	bne.n	8003a6c <_close_r+0x1c>
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d000      	beq.n	8003a6c <_close_r+0x1c>
 8003a6a:	602b      	str	r3, [r5, #0]
 8003a6c:	bd70      	pop	{r4, r5, r6, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	20000158 	.word	0x20000158

08003a74 <_lseek_r>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	0005      	movs	r5, r0
 8003a78:	0008      	movs	r0, r1
 8003a7a:	0011      	movs	r1, r2
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	4c06      	ldr	r4, [pc, #24]	; (8003a98 <_lseek_r+0x24>)
 8003a80:	6022      	str	r2, [r4, #0]
 8003a82:	001a      	movs	r2, r3
 8003a84:	f7ff fb08 	bl	8003098 <_lseek>
 8003a88:	1c43      	adds	r3, r0, #1
 8003a8a:	d103      	bne.n	8003a94 <_lseek_r+0x20>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d000      	beq.n	8003a94 <_lseek_r+0x20>
 8003a92:	602b      	str	r3, [r5, #0]
 8003a94:	bd70      	pop	{r4, r5, r6, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	20000158 	.word	0x20000158

08003a9c <__swhatbuf_r>:
 8003a9c:	b570      	push	{r4, r5, r6, lr}
 8003a9e:	000e      	movs	r6, r1
 8003aa0:	001d      	movs	r5, r3
 8003aa2:	230e      	movs	r3, #14
 8003aa4:	5ec9      	ldrsh	r1, [r1, r3]
 8003aa6:	b096      	sub	sp, #88	; 0x58
 8003aa8:	0014      	movs	r4, r2
 8003aaa:	2900      	cmp	r1, #0
 8003aac:	da07      	bge.n	8003abe <__swhatbuf_r+0x22>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	602b      	str	r3, [r5, #0]
 8003ab2:	89b3      	ldrh	r3, [r6, #12]
 8003ab4:	061b      	lsls	r3, r3, #24
 8003ab6:	d411      	bmi.n	8003adc <__swhatbuf_r+0x40>
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	e00f      	b.n	8003ade <__swhatbuf_r+0x42>
 8003abe:	466a      	mov	r2, sp
 8003ac0:	f000 fb22 	bl	8004108 <_fstat_r>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	dbf2      	blt.n	8003aae <__swhatbuf_r+0x12>
 8003ac8:	22f0      	movs	r2, #240	; 0xf0
 8003aca:	9b01      	ldr	r3, [sp, #4]
 8003acc:	0212      	lsls	r2, r2, #8
 8003ace:	4013      	ands	r3, r2
 8003ad0:	4a05      	ldr	r2, [pc, #20]	; (8003ae8 <__swhatbuf_r+0x4c>)
 8003ad2:	189b      	adds	r3, r3, r2
 8003ad4:	425a      	negs	r2, r3
 8003ad6:	4153      	adcs	r3, r2
 8003ad8:	602b      	str	r3, [r5, #0]
 8003ada:	e7ed      	b.n	8003ab8 <__swhatbuf_r+0x1c>
 8003adc:	2340      	movs	r3, #64	; 0x40
 8003ade:	2000      	movs	r0, #0
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	b016      	add	sp, #88	; 0x58
 8003ae4:	bd70      	pop	{r4, r5, r6, pc}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	ffffe000 	.word	0xffffe000

08003aec <__smakebuf_r>:
 8003aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003aee:	2602      	movs	r6, #2
 8003af0:	898b      	ldrh	r3, [r1, #12]
 8003af2:	0005      	movs	r5, r0
 8003af4:	000c      	movs	r4, r1
 8003af6:	4233      	tst	r3, r6
 8003af8:	d006      	beq.n	8003b08 <__smakebuf_r+0x1c>
 8003afa:	0023      	movs	r3, r4
 8003afc:	3347      	adds	r3, #71	; 0x47
 8003afe:	6023      	str	r3, [r4, #0]
 8003b00:	6123      	str	r3, [r4, #16]
 8003b02:	2301      	movs	r3, #1
 8003b04:	6163      	str	r3, [r4, #20]
 8003b06:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003b08:	ab01      	add	r3, sp, #4
 8003b0a:	466a      	mov	r2, sp
 8003b0c:	f7ff ffc6 	bl	8003a9c <__swhatbuf_r>
 8003b10:	9900      	ldr	r1, [sp, #0]
 8003b12:	0007      	movs	r7, r0
 8003b14:	0028      	movs	r0, r5
 8003b16:	f7ff fd7b 	bl	8003610 <_malloc_r>
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	d108      	bne.n	8003b30 <__smakebuf_r+0x44>
 8003b1e:	220c      	movs	r2, #12
 8003b20:	5ea3      	ldrsh	r3, [r4, r2]
 8003b22:	059a      	lsls	r2, r3, #22
 8003b24:	d4ef      	bmi.n	8003b06 <__smakebuf_r+0x1a>
 8003b26:	2203      	movs	r2, #3
 8003b28:	4393      	bics	r3, r2
 8003b2a:	431e      	orrs	r6, r3
 8003b2c:	81a6      	strh	r6, [r4, #12]
 8003b2e:	e7e4      	b.n	8003afa <__smakebuf_r+0xe>
 8003b30:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <__smakebuf_r+0x84>)
 8003b32:	62ab      	str	r3, [r5, #40]	; 0x28
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	89a2      	ldrh	r2, [r4, #12]
 8003b38:	6020      	str	r0, [r4, #0]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	81a3      	strh	r3, [r4, #12]
 8003b3e:	9b00      	ldr	r3, [sp, #0]
 8003b40:	6120      	str	r0, [r4, #16]
 8003b42:	6163      	str	r3, [r4, #20]
 8003b44:	9b01      	ldr	r3, [sp, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00d      	beq.n	8003b66 <__smakebuf_r+0x7a>
 8003b4a:	230e      	movs	r3, #14
 8003b4c:	5ee1      	ldrsh	r1, [r4, r3]
 8003b4e:	0028      	movs	r0, r5
 8003b50:	f000 faec 	bl	800412c <_isatty_r>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d006      	beq.n	8003b66 <__smakebuf_r+0x7a>
 8003b58:	2203      	movs	r2, #3
 8003b5a:	89a3      	ldrh	r3, [r4, #12]
 8003b5c:	4393      	bics	r3, r2
 8003b5e:	001a      	movs	r2, r3
 8003b60:	2301      	movs	r3, #1
 8003b62:	4313      	orrs	r3, r2
 8003b64:	81a3      	strh	r3, [r4, #12]
 8003b66:	89a0      	ldrh	r0, [r4, #12]
 8003b68:	4338      	orrs	r0, r7
 8003b6a:	81a0      	strh	r0, [r4, #12]
 8003b6c:	e7cb      	b.n	8003b06 <__smakebuf_r+0x1a>
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	080033c1 	.word	0x080033c1

08003b74 <__malloc_lock>:
 8003b74:	4770      	bx	lr

08003b76 <__malloc_unlock>:
 8003b76:	4770      	bx	lr

08003b78 <__sfputc_r>:
 8003b78:	6893      	ldr	r3, [r2, #8]
 8003b7a:	b510      	push	{r4, lr}
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	6093      	str	r3, [r2, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	da04      	bge.n	8003b8e <__sfputc_r+0x16>
 8003b84:	6994      	ldr	r4, [r2, #24]
 8003b86:	42a3      	cmp	r3, r4
 8003b88:	db07      	blt.n	8003b9a <__sfputc_r+0x22>
 8003b8a:	290a      	cmp	r1, #10
 8003b8c:	d005      	beq.n	8003b9a <__sfputc_r+0x22>
 8003b8e:	6813      	ldr	r3, [r2, #0]
 8003b90:	1c58      	adds	r0, r3, #1
 8003b92:	6010      	str	r0, [r2, #0]
 8003b94:	7019      	strb	r1, [r3, #0]
 8003b96:	0008      	movs	r0, r1
 8003b98:	bd10      	pop	{r4, pc}
 8003b9a:	f7ff fe79 	bl	8003890 <__swbuf_r>
 8003b9e:	0001      	movs	r1, r0
 8003ba0:	e7f9      	b.n	8003b96 <__sfputc_r+0x1e>

08003ba2 <__sfputs_r>:
 8003ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba4:	0006      	movs	r6, r0
 8003ba6:	000f      	movs	r7, r1
 8003ba8:	0014      	movs	r4, r2
 8003baa:	18d5      	adds	r5, r2, r3
 8003bac:	42ac      	cmp	r4, r5
 8003bae:	d101      	bne.n	8003bb4 <__sfputs_r+0x12>
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	e007      	b.n	8003bc4 <__sfputs_r+0x22>
 8003bb4:	7821      	ldrb	r1, [r4, #0]
 8003bb6:	003a      	movs	r2, r7
 8003bb8:	0030      	movs	r0, r6
 8003bba:	f7ff ffdd 	bl	8003b78 <__sfputc_r>
 8003bbe:	3401      	adds	r4, #1
 8003bc0:	1c43      	adds	r3, r0, #1
 8003bc2:	d1f3      	bne.n	8003bac <__sfputs_r+0xa>
 8003bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bc8 <_vfiprintf_r>:
 8003bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bca:	b0a1      	sub	sp, #132	; 0x84
 8003bcc:	9003      	str	r0, [sp, #12]
 8003bce:	000f      	movs	r7, r1
 8003bd0:	0016      	movs	r6, r2
 8003bd2:	001d      	movs	r5, r3
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d005      	beq.n	8003be4 <_vfiprintf_r+0x1c>
 8003bd8:	6983      	ldr	r3, [r0, #24]
 8003bda:	9305      	str	r3, [sp, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <_vfiprintf_r+0x1c>
 8003be0:	f7ff fc0c 	bl	80033fc <__sinit>
 8003be4:	4b7b      	ldr	r3, [pc, #492]	; (8003dd4 <_vfiprintf_r+0x20c>)
 8003be6:	429f      	cmp	r7, r3
 8003be8:	d15c      	bne.n	8003ca4 <_vfiprintf_r+0xdc>
 8003bea:	9b03      	ldr	r3, [sp, #12]
 8003bec:	685f      	ldr	r7, [r3, #4]
 8003bee:	89bb      	ldrh	r3, [r7, #12]
 8003bf0:	071b      	lsls	r3, r3, #28
 8003bf2:	d563      	bpl.n	8003cbc <_vfiprintf_r+0xf4>
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d060      	beq.n	8003cbc <_vfiprintf_r+0xf4>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	ac08      	add	r4, sp, #32
 8003bfe:	6163      	str	r3, [r4, #20]
 8003c00:	3320      	adds	r3, #32
 8003c02:	7663      	strb	r3, [r4, #25]
 8003c04:	3310      	adds	r3, #16
 8003c06:	76a3      	strb	r3, [r4, #26]
 8003c08:	9507      	str	r5, [sp, #28]
 8003c0a:	0035      	movs	r5, r6
 8003c0c:	782b      	ldrb	r3, [r5, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <_vfiprintf_r+0x4e>
 8003c12:	2b25      	cmp	r3, #37	; 0x25
 8003c14:	d15c      	bne.n	8003cd0 <_vfiprintf_r+0x108>
 8003c16:	1bab      	subs	r3, r5, r6
 8003c18:	9305      	str	r3, [sp, #20]
 8003c1a:	d00c      	beq.n	8003c36 <_vfiprintf_r+0x6e>
 8003c1c:	0032      	movs	r2, r6
 8003c1e:	0039      	movs	r1, r7
 8003c20:	9803      	ldr	r0, [sp, #12]
 8003c22:	f7ff ffbe 	bl	8003ba2 <__sfputs_r>
 8003c26:	1c43      	adds	r3, r0, #1
 8003c28:	d100      	bne.n	8003c2c <_vfiprintf_r+0x64>
 8003c2a:	e0c4      	b.n	8003db6 <_vfiprintf_r+0x1ee>
 8003c2c:	6962      	ldr	r2, [r4, #20]
 8003c2e:	9b05      	ldr	r3, [sp, #20]
 8003c30:	4694      	mov	ip, r2
 8003c32:	4463      	add	r3, ip
 8003c34:	6163      	str	r3, [r4, #20]
 8003c36:	782b      	ldrb	r3, [r5, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d100      	bne.n	8003c3e <_vfiprintf_r+0x76>
 8003c3c:	e0bb      	b.n	8003db6 <_vfiprintf_r+0x1ee>
 8003c3e:	2201      	movs	r2, #1
 8003c40:	2300      	movs	r3, #0
 8003c42:	4252      	negs	r2, r2
 8003c44:	6062      	str	r2, [r4, #4]
 8003c46:	a904      	add	r1, sp, #16
 8003c48:	3254      	adds	r2, #84	; 0x54
 8003c4a:	1852      	adds	r2, r2, r1
 8003c4c:	1c6e      	adds	r6, r5, #1
 8003c4e:	6023      	str	r3, [r4, #0]
 8003c50:	60e3      	str	r3, [r4, #12]
 8003c52:	60a3      	str	r3, [r4, #8]
 8003c54:	7013      	strb	r3, [r2, #0]
 8003c56:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c58:	7831      	ldrb	r1, [r6, #0]
 8003c5a:	2205      	movs	r2, #5
 8003c5c:	485e      	ldr	r0, [pc, #376]	; (8003dd8 <_vfiprintf_r+0x210>)
 8003c5e:	f000 fa77 	bl	8004150 <memchr>
 8003c62:	1c75      	adds	r5, r6, #1
 8003c64:	2800      	cmp	r0, #0
 8003c66:	d135      	bne.n	8003cd4 <_vfiprintf_r+0x10c>
 8003c68:	6822      	ldr	r2, [r4, #0]
 8003c6a:	06d3      	lsls	r3, r2, #27
 8003c6c:	d504      	bpl.n	8003c78 <_vfiprintf_r+0xb0>
 8003c6e:	2353      	movs	r3, #83	; 0x53
 8003c70:	a904      	add	r1, sp, #16
 8003c72:	185b      	adds	r3, r3, r1
 8003c74:	2120      	movs	r1, #32
 8003c76:	7019      	strb	r1, [r3, #0]
 8003c78:	0713      	lsls	r3, r2, #28
 8003c7a:	d504      	bpl.n	8003c86 <_vfiprintf_r+0xbe>
 8003c7c:	2353      	movs	r3, #83	; 0x53
 8003c7e:	a904      	add	r1, sp, #16
 8003c80:	185b      	adds	r3, r3, r1
 8003c82:	212b      	movs	r1, #43	; 0x2b
 8003c84:	7019      	strb	r1, [r3, #0]
 8003c86:	7833      	ldrb	r3, [r6, #0]
 8003c88:	2b2a      	cmp	r3, #42	; 0x2a
 8003c8a:	d02c      	beq.n	8003ce6 <_vfiprintf_r+0x11e>
 8003c8c:	0035      	movs	r5, r6
 8003c8e:	2100      	movs	r1, #0
 8003c90:	200a      	movs	r0, #10
 8003c92:	68e3      	ldr	r3, [r4, #12]
 8003c94:	782a      	ldrb	r2, [r5, #0]
 8003c96:	1c6e      	adds	r6, r5, #1
 8003c98:	3a30      	subs	r2, #48	; 0x30
 8003c9a:	2a09      	cmp	r2, #9
 8003c9c:	d964      	bls.n	8003d68 <_vfiprintf_r+0x1a0>
 8003c9e:	2900      	cmp	r1, #0
 8003ca0:	d02e      	beq.n	8003d00 <_vfiprintf_r+0x138>
 8003ca2:	e026      	b.n	8003cf2 <_vfiprintf_r+0x12a>
 8003ca4:	4b4d      	ldr	r3, [pc, #308]	; (8003ddc <_vfiprintf_r+0x214>)
 8003ca6:	429f      	cmp	r7, r3
 8003ca8:	d102      	bne.n	8003cb0 <_vfiprintf_r+0xe8>
 8003caa:	9b03      	ldr	r3, [sp, #12]
 8003cac:	689f      	ldr	r7, [r3, #8]
 8003cae:	e79e      	b.n	8003bee <_vfiprintf_r+0x26>
 8003cb0:	4b4b      	ldr	r3, [pc, #300]	; (8003de0 <_vfiprintf_r+0x218>)
 8003cb2:	429f      	cmp	r7, r3
 8003cb4:	d19b      	bne.n	8003bee <_vfiprintf_r+0x26>
 8003cb6:	9b03      	ldr	r3, [sp, #12]
 8003cb8:	68df      	ldr	r7, [r3, #12]
 8003cba:	e798      	b.n	8003bee <_vfiprintf_r+0x26>
 8003cbc:	0039      	movs	r1, r7
 8003cbe:	9803      	ldr	r0, [sp, #12]
 8003cc0:	f7ff fe50 	bl	8003964 <__swsetup_r>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d098      	beq.n	8003bfa <_vfiprintf_r+0x32>
 8003cc8:	2001      	movs	r0, #1
 8003cca:	4240      	negs	r0, r0
 8003ccc:	b021      	add	sp, #132	; 0x84
 8003cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd0:	3501      	adds	r5, #1
 8003cd2:	e79b      	b.n	8003c0c <_vfiprintf_r+0x44>
 8003cd4:	4b40      	ldr	r3, [pc, #256]	; (8003dd8 <_vfiprintf_r+0x210>)
 8003cd6:	6822      	ldr	r2, [r4, #0]
 8003cd8:	1ac0      	subs	r0, r0, r3
 8003cda:	2301      	movs	r3, #1
 8003cdc:	4083      	lsls	r3, r0
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	6023      	str	r3, [r4, #0]
 8003ce2:	002e      	movs	r6, r5
 8003ce4:	e7b8      	b.n	8003c58 <_vfiprintf_r+0x90>
 8003ce6:	9b07      	ldr	r3, [sp, #28]
 8003ce8:	1d19      	adds	r1, r3, #4
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	9107      	str	r1, [sp, #28]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	db01      	blt.n	8003cf6 <_vfiprintf_r+0x12e>
 8003cf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cf4:	e004      	b.n	8003d00 <_vfiprintf_r+0x138>
 8003cf6:	425b      	negs	r3, r3
 8003cf8:	60e3      	str	r3, [r4, #12]
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	6023      	str	r3, [r4, #0]
 8003d00:	782b      	ldrb	r3, [r5, #0]
 8003d02:	2b2e      	cmp	r3, #46	; 0x2e
 8003d04:	d10a      	bne.n	8003d1c <_vfiprintf_r+0x154>
 8003d06:	786b      	ldrb	r3, [r5, #1]
 8003d08:	2b2a      	cmp	r3, #42	; 0x2a
 8003d0a:	d135      	bne.n	8003d78 <_vfiprintf_r+0x1b0>
 8003d0c:	9b07      	ldr	r3, [sp, #28]
 8003d0e:	3502      	adds	r5, #2
 8003d10:	1d1a      	adds	r2, r3, #4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	9207      	str	r2, [sp, #28]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	db2b      	blt.n	8003d72 <_vfiprintf_r+0x1aa>
 8003d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d1c:	4e31      	ldr	r6, [pc, #196]	; (8003de4 <_vfiprintf_r+0x21c>)
 8003d1e:	7829      	ldrb	r1, [r5, #0]
 8003d20:	2203      	movs	r2, #3
 8003d22:	0030      	movs	r0, r6
 8003d24:	f000 fa14 	bl	8004150 <memchr>
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	d006      	beq.n	8003d3a <_vfiprintf_r+0x172>
 8003d2c:	2340      	movs	r3, #64	; 0x40
 8003d2e:	1b80      	subs	r0, r0, r6
 8003d30:	4083      	lsls	r3, r0
 8003d32:	6822      	ldr	r2, [r4, #0]
 8003d34:	3501      	adds	r5, #1
 8003d36:	4313      	orrs	r3, r2
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	7829      	ldrb	r1, [r5, #0]
 8003d3c:	2206      	movs	r2, #6
 8003d3e:	482a      	ldr	r0, [pc, #168]	; (8003de8 <_vfiprintf_r+0x220>)
 8003d40:	1c6e      	adds	r6, r5, #1
 8003d42:	7621      	strb	r1, [r4, #24]
 8003d44:	f000 fa04 	bl	8004150 <memchr>
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	d03a      	beq.n	8003dc2 <_vfiprintf_r+0x1fa>
 8003d4c:	4b27      	ldr	r3, [pc, #156]	; (8003dec <_vfiprintf_r+0x224>)
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d125      	bne.n	8003d9e <_vfiprintf_r+0x1d6>
 8003d52:	2207      	movs	r2, #7
 8003d54:	9b07      	ldr	r3, [sp, #28]
 8003d56:	3307      	adds	r3, #7
 8003d58:	4393      	bics	r3, r2
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	9307      	str	r3, [sp, #28]
 8003d5e:	6963      	ldr	r3, [r4, #20]
 8003d60:	9a04      	ldr	r2, [sp, #16]
 8003d62:	189b      	adds	r3, r3, r2
 8003d64:	6163      	str	r3, [r4, #20]
 8003d66:	e750      	b.n	8003c0a <_vfiprintf_r+0x42>
 8003d68:	4343      	muls	r3, r0
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	189b      	adds	r3, r3, r2
 8003d6e:	0035      	movs	r5, r6
 8003d70:	e790      	b.n	8003c94 <_vfiprintf_r+0xcc>
 8003d72:	2301      	movs	r3, #1
 8003d74:	425b      	negs	r3, r3
 8003d76:	e7d0      	b.n	8003d1a <_vfiprintf_r+0x152>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	001a      	movs	r2, r3
 8003d7e:	3501      	adds	r5, #1
 8003d80:	6063      	str	r3, [r4, #4]
 8003d82:	7829      	ldrb	r1, [r5, #0]
 8003d84:	1c6e      	adds	r6, r5, #1
 8003d86:	3930      	subs	r1, #48	; 0x30
 8003d88:	2909      	cmp	r1, #9
 8003d8a:	d903      	bls.n	8003d94 <_vfiprintf_r+0x1cc>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0c5      	beq.n	8003d1c <_vfiprintf_r+0x154>
 8003d90:	9209      	str	r2, [sp, #36]	; 0x24
 8003d92:	e7c3      	b.n	8003d1c <_vfiprintf_r+0x154>
 8003d94:	4342      	muls	r2, r0
 8003d96:	2301      	movs	r3, #1
 8003d98:	1852      	adds	r2, r2, r1
 8003d9a:	0035      	movs	r5, r6
 8003d9c:	e7f1      	b.n	8003d82 <_vfiprintf_r+0x1ba>
 8003d9e:	ab07      	add	r3, sp, #28
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	003a      	movs	r2, r7
 8003da4:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <_vfiprintf_r+0x228>)
 8003da6:	0021      	movs	r1, r4
 8003da8:	9803      	ldr	r0, [sp, #12]
 8003daa:	e000      	b.n	8003dae <_vfiprintf_r+0x1e6>
 8003dac:	bf00      	nop
 8003dae:	9004      	str	r0, [sp, #16]
 8003db0:	9b04      	ldr	r3, [sp, #16]
 8003db2:	3301      	adds	r3, #1
 8003db4:	d1d3      	bne.n	8003d5e <_vfiprintf_r+0x196>
 8003db6:	89bb      	ldrh	r3, [r7, #12]
 8003db8:	065b      	lsls	r3, r3, #25
 8003dba:	d500      	bpl.n	8003dbe <_vfiprintf_r+0x1f6>
 8003dbc:	e784      	b.n	8003cc8 <_vfiprintf_r+0x100>
 8003dbe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003dc0:	e784      	b.n	8003ccc <_vfiprintf_r+0x104>
 8003dc2:	ab07      	add	r3, sp, #28
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	003a      	movs	r2, r7
 8003dc8:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <_vfiprintf_r+0x228>)
 8003dca:	0021      	movs	r1, r4
 8003dcc:	9803      	ldr	r0, [sp, #12]
 8003dce:	f000 f87f 	bl	8003ed0 <_printf_i>
 8003dd2:	e7ec      	b.n	8003dae <_vfiprintf_r+0x1e6>
 8003dd4:	08004234 	.word	0x08004234
 8003dd8:	08004278 	.word	0x08004278
 8003ddc:	08004254 	.word	0x08004254
 8003de0:	08004214 	.word	0x08004214
 8003de4:	0800427e 	.word	0x0800427e
 8003de8:	08004282 	.word	0x08004282
 8003dec:	00000000 	.word	0x00000000
 8003df0:	08003ba3 	.word	0x08003ba3

08003df4 <_printf_common>:
 8003df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003df6:	0015      	movs	r5, r2
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	688a      	ldr	r2, [r1, #8]
 8003dfc:	690b      	ldr	r3, [r1, #16]
 8003dfe:	9000      	str	r0, [sp, #0]
 8003e00:	000c      	movs	r4, r1
 8003e02:	4293      	cmp	r3, r2
 8003e04:	da00      	bge.n	8003e08 <_printf_common+0x14>
 8003e06:	0013      	movs	r3, r2
 8003e08:	0022      	movs	r2, r4
 8003e0a:	602b      	str	r3, [r5, #0]
 8003e0c:	3243      	adds	r2, #67	; 0x43
 8003e0e:	7812      	ldrb	r2, [r2, #0]
 8003e10:	2a00      	cmp	r2, #0
 8003e12:	d001      	beq.n	8003e18 <_printf_common+0x24>
 8003e14:	3301      	adds	r3, #1
 8003e16:	602b      	str	r3, [r5, #0]
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	069b      	lsls	r3, r3, #26
 8003e1c:	d502      	bpl.n	8003e24 <_printf_common+0x30>
 8003e1e:	682b      	ldr	r3, [r5, #0]
 8003e20:	3302      	adds	r3, #2
 8003e22:	602b      	str	r3, [r5, #0]
 8003e24:	2706      	movs	r7, #6
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	401f      	ands	r7, r3
 8003e2a:	d027      	beq.n	8003e7c <_printf_common+0x88>
 8003e2c:	0023      	movs	r3, r4
 8003e2e:	3343      	adds	r3, #67	; 0x43
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	1e5a      	subs	r2, r3, #1
 8003e34:	4193      	sbcs	r3, r2
 8003e36:	6822      	ldr	r2, [r4, #0]
 8003e38:	0692      	lsls	r2, r2, #26
 8003e3a:	d430      	bmi.n	8003e9e <_printf_common+0xaa>
 8003e3c:	0022      	movs	r2, r4
 8003e3e:	9901      	ldr	r1, [sp, #4]
 8003e40:	3243      	adds	r2, #67	; 0x43
 8003e42:	9800      	ldr	r0, [sp, #0]
 8003e44:	9e08      	ldr	r6, [sp, #32]
 8003e46:	47b0      	blx	r6
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	d025      	beq.n	8003e98 <_printf_common+0xa4>
 8003e4c:	2306      	movs	r3, #6
 8003e4e:	6820      	ldr	r0, [r4, #0]
 8003e50:	682a      	ldr	r2, [r5, #0]
 8003e52:	68e1      	ldr	r1, [r4, #12]
 8003e54:	4003      	ands	r3, r0
 8003e56:	2500      	movs	r5, #0
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d103      	bne.n	8003e64 <_printf_common+0x70>
 8003e5c:	1a8d      	subs	r5, r1, r2
 8003e5e:	43eb      	mvns	r3, r5
 8003e60:	17db      	asrs	r3, r3, #31
 8003e62:	401d      	ands	r5, r3
 8003e64:	68a3      	ldr	r3, [r4, #8]
 8003e66:	6922      	ldr	r2, [r4, #16]
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	dd01      	ble.n	8003e70 <_printf_common+0x7c>
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	18ed      	adds	r5, r5, r3
 8003e70:	2700      	movs	r7, #0
 8003e72:	42bd      	cmp	r5, r7
 8003e74:	d120      	bne.n	8003eb8 <_printf_common+0xc4>
 8003e76:	2000      	movs	r0, #0
 8003e78:	e010      	b.n	8003e9c <_printf_common+0xa8>
 8003e7a:	3701      	adds	r7, #1
 8003e7c:	68e3      	ldr	r3, [r4, #12]
 8003e7e:	682a      	ldr	r2, [r5, #0]
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	42bb      	cmp	r3, r7
 8003e84:	ddd2      	ble.n	8003e2c <_printf_common+0x38>
 8003e86:	0022      	movs	r2, r4
 8003e88:	2301      	movs	r3, #1
 8003e8a:	3219      	adds	r2, #25
 8003e8c:	9901      	ldr	r1, [sp, #4]
 8003e8e:	9800      	ldr	r0, [sp, #0]
 8003e90:	9e08      	ldr	r6, [sp, #32]
 8003e92:	47b0      	blx	r6
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d1f0      	bne.n	8003e7a <_printf_common+0x86>
 8003e98:	2001      	movs	r0, #1
 8003e9a:	4240      	negs	r0, r0
 8003e9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e9e:	2030      	movs	r0, #48	; 0x30
 8003ea0:	18e1      	adds	r1, r4, r3
 8003ea2:	3143      	adds	r1, #67	; 0x43
 8003ea4:	7008      	strb	r0, [r1, #0]
 8003ea6:	0021      	movs	r1, r4
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	3145      	adds	r1, #69	; 0x45
 8003eac:	7809      	ldrb	r1, [r1, #0]
 8003eae:	18a2      	adds	r2, r4, r2
 8003eb0:	3243      	adds	r2, #67	; 0x43
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	7011      	strb	r1, [r2, #0]
 8003eb6:	e7c1      	b.n	8003e3c <_printf_common+0x48>
 8003eb8:	0022      	movs	r2, r4
 8003eba:	2301      	movs	r3, #1
 8003ebc:	321a      	adds	r2, #26
 8003ebe:	9901      	ldr	r1, [sp, #4]
 8003ec0:	9800      	ldr	r0, [sp, #0]
 8003ec2:	9e08      	ldr	r6, [sp, #32]
 8003ec4:	47b0      	blx	r6
 8003ec6:	1c43      	adds	r3, r0, #1
 8003ec8:	d0e6      	beq.n	8003e98 <_printf_common+0xa4>
 8003eca:	3701      	adds	r7, #1
 8003ecc:	e7d1      	b.n	8003e72 <_printf_common+0x7e>
	...

08003ed0 <_printf_i>:
 8003ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ed2:	b089      	sub	sp, #36	; 0x24
 8003ed4:	9204      	str	r2, [sp, #16]
 8003ed6:	000a      	movs	r2, r1
 8003ed8:	3243      	adds	r2, #67	; 0x43
 8003eda:	9305      	str	r3, [sp, #20]
 8003edc:	9003      	str	r0, [sp, #12]
 8003ede:	9202      	str	r2, [sp, #8]
 8003ee0:	7e0a      	ldrb	r2, [r1, #24]
 8003ee2:	000c      	movs	r4, r1
 8003ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ee6:	2a6e      	cmp	r2, #110	; 0x6e
 8003ee8:	d100      	bne.n	8003eec <_printf_i+0x1c>
 8003eea:	e086      	b.n	8003ffa <_printf_i+0x12a>
 8003eec:	d81f      	bhi.n	8003f2e <_printf_i+0x5e>
 8003eee:	2a63      	cmp	r2, #99	; 0x63
 8003ef0:	d033      	beq.n	8003f5a <_printf_i+0x8a>
 8003ef2:	d808      	bhi.n	8003f06 <_printf_i+0x36>
 8003ef4:	2a00      	cmp	r2, #0
 8003ef6:	d100      	bne.n	8003efa <_printf_i+0x2a>
 8003ef8:	e08c      	b.n	8004014 <_printf_i+0x144>
 8003efa:	2a58      	cmp	r2, #88	; 0x58
 8003efc:	d04d      	beq.n	8003f9a <_printf_i+0xca>
 8003efe:	0025      	movs	r5, r4
 8003f00:	3542      	adds	r5, #66	; 0x42
 8003f02:	702a      	strb	r2, [r5, #0]
 8003f04:	e030      	b.n	8003f68 <_printf_i+0x98>
 8003f06:	2a64      	cmp	r2, #100	; 0x64
 8003f08:	d001      	beq.n	8003f0e <_printf_i+0x3e>
 8003f0a:	2a69      	cmp	r2, #105	; 0x69
 8003f0c:	d1f7      	bne.n	8003efe <_printf_i+0x2e>
 8003f0e:	6819      	ldr	r1, [r3, #0]
 8003f10:	6825      	ldr	r5, [r4, #0]
 8003f12:	1d0a      	adds	r2, r1, #4
 8003f14:	0628      	lsls	r0, r5, #24
 8003f16:	d529      	bpl.n	8003f6c <_printf_i+0x9c>
 8003f18:	6808      	ldr	r0, [r1, #0]
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	da03      	bge.n	8003f28 <_printf_i+0x58>
 8003f20:	232d      	movs	r3, #45	; 0x2d
 8003f22:	9a02      	ldr	r2, [sp, #8]
 8003f24:	4240      	negs	r0, r0
 8003f26:	7013      	strb	r3, [r2, #0]
 8003f28:	4e6b      	ldr	r6, [pc, #428]	; (80040d8 <_printf_i+0x208>)
 8003f2a:	270a      	movs	r7, #10
 8003f2c:	e04f      	b.n	8003fce <_printf_i+0xfe>
 8003f2e:	2a73      	cmp	r2, #115	; 0x73
 8003f30:	d074      	beq.n	800401c <_printf_i+0x14c>
 8003f32:	d808      	bhi.n	8003f46 <_printf_i+0x76>
 8003f34:	2a6f      	cmp	r2, #111	; 0x6f
 8003f36:	d01f      	beq.n	8003f78 <_printf_i+0xa8>
 8003f38:	2a70      	cmp	r2, #112	; 0x70
 8003f3a:	d1e0      	bne.n	8003efe <_printf_i+0x2e>
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	6809      	ldr	r1, [r1, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	6022      	str	r2, [r4, #0]
 8003f44:	e003      	b.n	8003f4e <_printf_i+0x7e>
 8003f46:	2a75      	cmp	r2, #117	; 0x75
 8003f48:	d016      	beq.n	8003f78 <_printf_i+0xa8>
 8003f4a:	2a78      	cmp	r2, #120	; 0x78
 8003f4c:	d1d7      	bne.n	8003efe <_printf_i+0x2e>
 8003f4e:	0022      	movs	r2, r4
 8003f50:	2178      	movs	r1, #120	; 0x78
 8003f52:	3245      	adds	r2, #69	; 0x45
 8003f54:	7011      	strb	r1, [r2, #0]
 8003f56:	4e61      	ldr	r6, [pc, #388]	; (80040dc <_printf_i+0x20c>)
 8003f58:	e022      	b.n	8003fa0 <_printf_i+0xd0>
 8003f5a:	0025      	movs	r5, r4
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	3542      	adds	r5, #66	; 0x42
 8003f60:	1d11      	adds	r1, r2, #4
 8003f62:	6019      	str	r1, [r3, #0]
 8003f64:	6813      	ldr	r3, [r2, #0]
 8003f66:	702b      	strb	r3, [r5, #0]
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e065      	b.n	8004038 <_printf_i+0x168>
 8003f6c:	6808      	ldr	r0, [r1, #0]
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	0669      	lsls	r1, r5, #25
 8003f72:	d5d3      	bpl.n	8003f1c <_printf_i+0x4c>
 8003f74:	b200      	sxth	r0, r0
 8003f76:	e7d1      	b.n	8003f1c <_printf_i+0x4c>
 8003f78:	6819      	ldr	r1, [r3, #0]
 8003f7a:	6825      	ldr	r5, [r4, #0]
 8003f7c:	1d08      	adds	r0, r1, #4
 8003f7e:	6018      	str	r0, [r3, #0]
 8003f80:	6808      	ldr	r0, [r1, #0]
 8003f82:	062e      	lsls	r6, r5, #24
 8003f84:	d505      	bpl.n	8003f92 <_printf_i+0xc2>
 8003f86:	4e54      	ldr	r6, [pc, #336]	; (80040d8 <_printf_i+0x208>)
 8003f88:	2708      	movs	r7, #8
 8003f8a:	2a6f      	cmp	r2, #111	; 0x6f
 8003f8c:	d01b      	beq.n	8003fc6 <_printf_i+0xf6>
 8003f8e:	270a      	movs	r7, #10
 8003f90:	e019      	b.n	8003fc6 <_printf_i+0xf6>
 8003f92:	066d      	lsls	r5, r5, #25
 8003f94:	d5f7      	bpl.n	8003f86 <_printf_i+0xb6>
 8003f96:	b280      	uxth	r0, r0
 8003f98:	e7f5      	b.n	8003f86 <_printf_i+0xb6>
 8003f9a:	3145      	adds	r1, #69	; 0x45
 8003f9c:	4e4e      	ldr	r6, [pc, #312]	; (80040d8 <_printf_i+0x208>)
 8003f9e:	700a      	strb	r2, [r1, #0]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	6822      	ldr	r2, [r4, #0]
 8003fa4:	1d01      	adds	r1, r0, #4
 8003fa6:	6800      	ldr	r0, [r0, #0]
 8003fa8:	6019      	str	r1, [r3, #0]
 8003faa:	0615      	lsls	r5, r2, #24
 8003fac:	d521      	bpl.n	8003ff2 <_printf_i+0x122>
 8003fae:	07d3      	lsls	r3, r2, #31
 8003fb0:	d502      	bpl.n	8003fb8 <_printf_i+0xe8>
 8003fb2:	2320      	movs	r3, #32
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	6022      	str	r2, [r4, #0]
 8003fb8:	2710      	movs	r7, #16
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d103      	bne.n	8003fc6 <_printf_i+0xf6>
 8003fbe:	2320      	movs	r3, #32
 8003fc0:	6822      	ldr	r2, [r4, #0]
 8003fc2:	439a      	bics	r2, r3
 8003fc4:	6022      	str	r2, [r4, #0]
 8003fc6:	0023      	movs	r3, r4
 8003fc8:	2200      	movs	r2, #0
 8003fca:	3343      	adds	r3, #67	; 0x43
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	6863      	ldr	r3, [r4, #4]
 8003fd0:	60a3      	str	r3, [r4, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	db58      	blt.n	8004088 <_printf_i+0x1b8>
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	6821      	ldr	r1, [r4, #0]
 8003fda:	4391      	bics	r1, r2
 8003fdc:	6021      	str	r1, [r4, #0]
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	d154      	bne.n	800408c <_printf_i+0x1bc>
 8003fe2:	9d02      	ldr	r5, [sp, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d05a      	beq.n	800409e <_printf_i+0x1ce>
 8003fe8:	0025      	movs	r5, r4
 8003fea:	7833      	ldrb	r3, [r6, #0]
 8003fec:	3542      	adds	r5, #66	; 0x42
 8003fee:	702b      	strb	r3, [r5, #0]
 8003ff0:	e055      	b.n	800409e <_printf_i+0x1ce>
 8003ff2:	0655      	lsls	r5, r2, #25
 8003ff4:	d5db      	bpl.n	8003fae <_printf_i+0xde>
 8003ff6:	b280      	uxth	r0, r0
 8003ff8:	e7d9      	b.n	8003fae <_printf_i+0xde>
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	680d      	ldr	r5, [r1, #0]
 8003ffe:	1d10      	adds	r0, r2, #4
 8004000:	6949      	ldr	r1, [r1, #20]
 8004002:	6018      	str	r0, [r3, #0]
 8004004:	6813      	ldr	r3, [r2, #0]
 8004006:	062e      	lsls	r6, r5, #24
 8004008:	d501      	bpl.n	800400e <_printf_i+0x13e>
 800400a:	6019      	str	r1, [r3, #0]
 800400c:	e002      	b.n	8004014 <_printf_i+0x144>
 800400e:	066d      	lsls	r5, r5, #25
 8004010:	d5fb      	bpl.n	800400a <_printf_i+0x13a>
 8004012:	8019      	strh	r1, [r3, #0]
 8004014:	2300      	movs	r3, #0
 8004016:	9d02      	ldr	r5, [sp, #8]
 8004018:	6123      	str	r3, [r4, #16]
 800401a:	e04f      	b.n	80040bc <_printf_i+0x1ec>
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	1d11      	adds	r1, r2, #4
 8004020:	6019      	str	r1, [r3, #0]
 8004022:	6815      	ldr	r5, [r2, #0]
 8004024:	2100      	movs	r1, #0
 8004026:	6862      	ldr	r2, [r4, #4]
 8004028:	0028      	movs	r0, r5
 800402a:	f000 f891 	bl	8004150 <memchr>
 800402e:	2800      	cmp	r0, #0
 8004030:	d001      	beq.n	8004036 <_printf_i+0x166>
 8004032:	1b40      	subs	r0, r0, r5
 8004034:	6060      	str	r0, [r4, #4]
 8004036:	6863      	ldr	r3, [r4, #4]
 8004038:	6123      	str	r3, [r4, #16]
 800403a:	2300      	movs	r3, #0
 800403c:	9a02      	ldr	r2, [sp, #8]
 800403e:	7013      	strb	r3, [r2, #0]
 8004040:	e03c      	b.n	80040bc <_printf_i+0x1ec>
 8004042:	6923      	ldr	r3, [r4, #16]
 8004044:	002a      	movs	r2, r5
 8004046:	9904      	ldr	r1, [sp, #16]
 8004048:	9803      	ldr	r0, [sp, #12]
 800404a:	9d05      	ldr	r5, [sp, #20]
 800404c:	47a8      	blx	r5
 800404e:	1c43      	adds	r3, r0, #1
 8004050:	d03e      	beq.n	80040d0 <_printf_i+0x200>
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	079b      	lsls	r3, r3, #30
 8004056:	d415      	bmi.n	8004084 <_printf_i+0x1b4>
 8004058:	9b07      	ldr	r3, [sp, #28]
 800405a:	68e0      	ldr	r0, [r4, #12]
 800405c:	4298      	cmp	r0, r3
 800405e:	da39      	bge.n	80040d4 <_printf_i+0x204>
 8004060:	0018      	movs	r0, r3
 8004062:	e037      	b.n	80040d4 <_printf_i+0x204>
 8004064:	0022      	movs	r2, r4
 8004066:	2301      	movs	r3, #1
 8004068:	3219      	adds	r2, #25
 800406a:	9904      	ldr	r1, [sp, #16]
 800406c:	9803      	ldr	r0, [sp, #12]
 800406e:	9e05      	ldr	r6, [sp, #20]
 8004070:	47b0      	blx	r6
 8004072:	1c43      	adds	r3, r0, #1
 8004074:	d02c      	beq.n	80040d0 <_printf_i+0x200>
 8004076:	3501      	adds	r5, #1
 8004078:	68e3      	ldr	r3, [r4, #12]
 800407a:	9a07      	ldr	r2, [sp, #28]
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	42ab      	cmp	r3, r5
 8004080:	dcf0      	bgt.n	8004064 <_printf_i+0x194>
 8004082:	e7e9      	b.n	8004058 <_printf_i+0x188>
 8004084:	2500      	movs	r5, #0
 8004086:	e7f7      	b.n	8004078 <_printf_i+0x1a8>
 8004088:	2800      	cmp	r0, #0
 800408a:	d0ad      	beq.n	8003fe8 <_printf_i+0x118>
 800408c:	9d02      	ldr	r5, [sp, #8]
 800408e:	0039      	movs	r1, r7
 8004090:	f7fc f8c0 	bl	8000214 <__aeabi_uidivmod>
 8004094:	5c73      	ldrb	r3, [r6, r1]
 8004096:	3d01      	subs	r5, #1
 8004098:	702b      	strb	r3, [r5, #0]
 800409a:	2800      	cmp	r0, #0
 800409c:	d1f7      	bne.n	800408e <_printf_i+0x1be>
 800409e:	2f08      	cmp	r7, #8
 80040a0:	d109      	bne.n	80040b6 <_printf_i+0x1e6>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	07db      	lsls	r3, r3, #31
 80040a6:	d506      	bpl.n	80040b6 <_printf_i+0x1e6>
 80040a8:	6863      	ldr	r3, [r4, #4]
 80040aa:	6922      	ldr	r2, [r4, #16]
 80040ac:	4293      	cmp	r3, r2
 80040ae:	dc02      	bgt.n	80040b6 <_printf_i+0x1e6>
 80040b0:	2330      	movs	r3, #48	; 0x30
 80040b2:	3d01      	subs	r5, #1
 80040b4:	702b      	strb	r3, [r5, #0]
 80040b6:	9b02      	ldr	r3, [sp, #8]
 80040b8:	1b5b      	subs	r3, r3, r5
 80040ba:	6123      	str	r3, [r4, #16]
 80040bc:	9b05      	ldr	r3, [sp, #20]
 80040be:	aa07      	add	r2, sp, #28
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	0021      	movs	r1, r4
 80040c4:	9b04      	ldr	r3, [sp, #16]
 80040c6:	9803      	ldr	r0, [sp, #12]
 80040c8:	f7ff fe94 	bl	8003df4 <_printf_common>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d1b8      	bne.n	8004042 <_printf_i+0x172>
 80040d0:	2001      	movs	r0, #1
 80040d2:	4240      	negs	r0, r0
 80040d4:	b009      	add	sp, #36	; 0x24
 80040d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040d8:	08004289 	.word	0x08004289
 80040dc:	0800429a 	.word	0x0800429a

080040e0 <_read_r>:
 80040e0:	b570      	push	{r4, r5, r6, lr}
 80040e2:	0005      	movs	r5, r0
 80040e4:	0008      	movs	r0, r1
 80040e6:	0011      	movs	r1, r2
 80040e8:	2200      	movs	r2, #0
 80040ea:	4c06      	ldr	r4, [pc, #24]	; (8004104 <_read_r+0x24>)
 80040ec:	6022      	str	r2, [r4, #0]
 80040ee:	001a      	movs	r2, r3
 80040f0:	f7fe ff78 	bl	8002fe4 <_read>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	d103      	bne.n	8004100 <_read_r+0x20>
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d000      	beq.n	8004100 <_read_r+0x20>
 80040fe:	602b      	str	r3, [r5, #0]
 8004100:	bd70      	pop	{r4, r5, r6, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	20000158 	.word	0x20000158

08004108 <_fstat_r>:
 8004108:	2300      	movs	r3, #0
 800410a:	b570      	push	{r4, r5, r6, lr}
 800410c:	4c06      	ldr	r4, [pc, #24]	; (8004128 <_fstat_r+0x20>)
 800410e:	0005      	movs	r5, r0
 8004110:	0008      	movs	r0, r1
 8004112:	0011      	movs	r1, r2
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	f7fe ffa8 	bl	800306a <_fstat>
 800411a:	1c43      	adds	r3, r0, #1
 800411c:	d103      	bne.n	8004126 <_fstat_r+0x1e>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d000      	beq.n	8004126 <_fstat_r+0x1e>
 8004124:	602b      	str	r3, [r5, #0]
 8004126:	bd70      	pop	{r4, r5, r6, pc}
 8004128:	20000158 	.word	0x20000158

0800412c <_isatty_r>:
 800412c:	2300      	movs	r3, #0
 800412e:	b570      	push	{r4, r5, r6, lr}
 8004130:	4c06      	ldr	r4, [pc, #24]	; (800414c <_isatty_r+0x20>)
 8004132:	0005      	movs	r5, r0
 8004134:	0008      	movs	r0, r1
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	f7fe ffa5 	bl	8003086 <_isatty>
 800413c:	1c43      	adds	r3, r0, #1
 800413e:	d103      	bne.n	8004148 <_isatty_r+0x1c>
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d000      	beq.n	8004148 <_isatty_r+0x1c>
 8004146:	602b      	str	r3, [r5, #0]
 8004148:	bd70      	pop	{r4, r5, r6, pc}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	20000158 	.word	0x20000158

08004150 <memchr>:
 8004150:	b2c9      	uxtb	r1, r1
 8004152:	1882      	adds	r2, r0, r2
 8004154:	4290      	cmp	r0, r2
 8004156:	d101      	bne.n	800415c <memchr+0xc>
 8004158:	2000      	movs	r0, #0
 800415a:	4770      	bx	lr
 800415c:	7803      	ldrb	r3, [r0, #0]
 800415e:	428b      	cmp	r3, r1
 8004160:	d0fb      	beq.n	800415a <memchr+0xa>
 8004162:	3001      	adds	r0, #1
 8004164:	e7f6      	b.n	8004154 <memchr+0x4>
	...

08004168 <_init>:
 8004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416e:	bc08      	pop	{r3}
 8004170:	469e      	mov	lr, r3
 8004172:	4770      	bx	lr

08004174 <_fini>:
 8004174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417a:	bc08      	pop	{r3}
 800417c:	469e      	mov	lr, r3
 800417e:	4770      	bx	lr
