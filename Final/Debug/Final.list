
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  080089c0  080089c0  000189c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dd8  08008dd8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08008dd8  08008dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008de0  08008de0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008de0  08008de0  00018de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008de4  08008de4  00018de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000070  08008e54  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08008e54  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002c  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fda7  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002543  00000000  00000000  0002fe3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  00032388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa8  00000000  00000000  00032f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000163c3  00000000  00000000  000339f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a629  00000000  00000000  00049db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000841d8  00000000  00000000  000543dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000b2  00000000  00000000  000d85b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003450  00000000  00000000  000d8668  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000003c  00000000  00000000  000dbab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macinfo 00000001  00000000  00000000  000dbaf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080089a4 	.word	0x080089a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080089a4 	.word	0x080089a4

08000108 <__gnu_thumb1_case_uhi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5a09      	ldrh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c10      	adds	r0, r2, #0
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	1c19      	adds	r1, r3, #0
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 fc93 	bl	8001d44 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f001 fbeb 	bl	8001c04 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fc85 	bl	8001d44 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fc7b 	bl	8001d44 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fc0d 	bl	8001c7c <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 fc03 	bl	8001c7c <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_fadd>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	4647      	mov	r7, r8
 8000488:	46ce      	mov	lr, r9
 800048a:	0243      	lsls	r3, r0, #9
 800048c:	0a5b      	lsrs	r3, r3, #9
 800048e:	0044      	lsls	r4, r0, #1
 8000490:	0fc2      	lsrs	r2, r0, #31
 8000492:	469c      	mov	ip, r3
 8000494:	0048      	lsls	r0, r1, #1
 8000496:	00dd      	lsls	r5, r3, #3
 8000498:	024b      	lsls	r3, r1, #9
 800049a:	0e24      	lsrs	r4, r4, #24
 800049c:	0a5b      	lsrs	r3, r3, #9
 800049e:	0e00      	lsrs	r0, r0, #24
 80004a0:	b580      	push	{r7, lr}
 80004a2:	4698      	mov	r8, r3
 80004a4:	0026      	movs	r6, r4
 80004a6:	4691      	mov	r9, r2
 80004a8:	0fc9      	lsrs	r1, r1, #31
 80004aa:	00db      	lsls	r3, r3, #3
 80004ac:	1a27      	subs	r7, r4, r0
 80004ae:	428a      	cmp	r2, r1
 80004b0:	d029      	beq.n	8000506 <__aeabi_fadd+0x82>
 80004b2:	2f00      	cmp	r7, #0
 80004b4:	dd15      	ble.n	80004e2 <__aeabi_fadd+0x5e>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d14a      	bne.n	8000550 <__aeabi_fadd+0xcc>
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d000      	beq.n	80004c0 <__aeabi_fadd+0x3c>
 80004be:	e095      	b.n	80005ec <__aeabi_fadd+0x168>
 80004c0:	08ed      	lsrs	r5, r5, #3
 80004c2:	2cff      	cmp	r4, #255	; 0xff
 80004c4:	d100      	bne.n	80004c8 <__aeabi_fadd+0x44>
 80004c6:	e088      	b.n	80005da <__aeabi_fadd+0x156>
 80004c8:	026b      	lsls	r3, r5, #9
 80004ca:	0a5b      	lsrs	r3, r3, #9
 80004cc:	b2e6      	uxtb	r6, r4
 80004ce:	025b      	lsls	r3, r3, #9
 80004d0:	05f6      	lsls	r6, r6, #23
 80004d2:	0a58      	lsrs	r0, r3, #9
 80004d4:	4330      	orrs	r0, r6
 80004d6:	07d2      	lsls	r2, r2, #31
 80004d8:	4310      	orrs	r0, r2
 80004da:	bc0c      	pop	{r2, r3}
 80004dc:	4690      	mov	r8, r2
 80004de:	4699      	mov	r9, r3
 80004e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004e2:	2f00      	cmp	r7, #0
 80004e4:	d000      	beq.n	80004e8 <__aeabi_fadd+0x64>
 80004e6:	e087      	b.n	80005f8 <__aeabi_fadd+0x174>
 80004e8:	1c60      	adds	r0, r4, #1
 80004ea:	b2c0      	uxtb	r0, r0
 80004ec:	2801      	cmp	r0, #1
 80004ee:	dc00      	bgt.n	80004f2 <__aeabi_fadd+0x6e>
 80004f0:	e0b6      	b.n	8000660 <__aeabi_fadd+0x1dc>
 80004f2:	1aee      	subs	r6, r5, r3
 80004f4:	0172      	lsls	r2, r6, #5
 80004f6:	d500      	bpl.n	80004fa <__aeabi_fadd+0x76>
 80004f8:	e0c5      	b.n	8000686 <__aeabi_fadd+0x202>
 80004fa:	2e00      	cmp	r6, #0
 80004fc:	d13d      	bne.n	800057a <__aeabi_fadd+0xf6>
 80004fe:	2200      	movs	r2, #0
 8000500:	2600      	movs	r6, #0
 8000502:	2300      	movs	r3, #0
 8000504:	e7e3      	b.n	80004ce <__aeabi_fadd+0x4a>
 8000506:	2f00      	cmp	r7, #0
 8000508:	dc00      	bgt.n	800050c <__aeabi_fadd+0x88>
 800050a:	e096      	b.n	800063a <__aeabi_fadd+0x1b6>
 800050c:	2800      	cmp	r0, #0
 800050e:	d05d      	beq.n	80005cc <__aeabi_fadd+0x148>
 8000510:	2cff      	cmp	r4, #255	; 0xff
 8000512:	d060      	beq.n	80005d6 <__aeabi_fadd+0x152>
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	04d2      	lsls	r2, r2, #19
 8000518:	4313      	orrs	r3, r2
 800051a:	2f1b      	cmp	r7, #27
 800051c:	dd00      	ble.n	8000520 <__aeabi_fadd+0x9c>
 800051e:	e0ec      	b.n	80006fa <__aeabi_fadd+0x276>
 8000520:	2220      	movs	r2, #32
 8000522:	1bd2      	subs	r2, r2, r7
 8000524:	0018      	movs	r0, r3
 8000526:	4093      	lsls	r3, r2
 8000528:	40f8      	lsrs	r0, r7
 800052a:	1e5a      	subs	r2, r3, #1
 800052c:	4193      	sbcs	r3, r2
 800052e:	4303      	orrs	r3, r0
 8000530:	18ed      	adds	r5, r5, r3
 8000532:	016b      	lsls	r3, r5, #5
 8000534:	d57b      	bpl.n	800062e <__aeabi_fadd+0x1aa>
 8000536:	3401      	adds	r4, #1
 8000538:	2cff      	cmp	r4, #255	; 0xff
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0xba>
 800053c:	e0b7      	b.n	80006ae <__aeabi_fadd+0x22a>
 800053e:	2201      	movs	r2, #1
 8000540:	2607      	movs	r6, #7
 8000542:	402a      	ands	r2, r5
 8000544:	086b      	lsrs	r3, r5, #1
 8000546:	4d9a      	ldr	r5, [pc, #616]	; (80007b0 <__aeabi_fadd+0x32c>)
 8000548:	401d      	ands	r5, r3
 800054a:	4315      	orrs	r5, r2
 800054c:	402e      	ands	r6, r5
 800054e:	e029      	b.n	80005a4 <__aeabi_fadd+0x120>
 8000550:	2cff      	cmp	r4, #255	; 0xff
 8000552:	d0b5      	beq.n	80004c0 <__aeabi_fadd+0x3c>
 8000554:	2280      	movs	r2, #128	; 0x80
 8000556:	04d2      	lsls	r2, r2, #19
 8000558:	4313      	orrs	r3, r2
 800055a:	2f1b      	cmp	r7, #27
 800055c:	dd00      	ble.n	8000560 <__aeabi_fadd+0xdc>
 800055e:	e0b2      	b.n	80006c6 <__aeabi_fadd+0x242>
 8000560:	2220      	movs	r2, #32
 8000562:	1bd2      	subs	r2, r2, r7
 8000564:	0019      	movs	r1, r3
 8000566:	4093      	lsls	r3, r2
 8000568:	40f9      	lsrs	r1, r7
 800056a:	1e5a      	subs	r2, r3, #1
 800056c:	4193      	sbcs	r3, r2
 800056e:	430b      	orrs	r3, r1
 8000570:	1aed      	subs	r5, r5, r3
 8000572:	016b      	lsls	r3, r5, #5
 8000574:	d55b      	bpl.n	800062e <__aeabi_fadd+0x1aa>
 8000576:	01ad      	lsls	r5, r5, #6
 8000578:	09ae      	lsrs	r6, r5, #6
 800057a:	0030      	movs	r0, r6
 800057c:	f002 fb66 	bl	8002c4c <__clzsi2>
 8000580:	3805      	subs	r0, #5
 8000582:	4086      	lsls	r6, r0
 8000584:	4284      	cmp	r4, r0
 8000586:	dc65      	bgt.n	8000654 <__aeabi_fadd+0x1d0>
 8000588:	1b04      	subs	r4, r0, r4
 800058a:	0033      	movs	r3, r6
 800058c:	2020      	movs	r0, #32
 800058e:	3401      	adds	r4, #1
 8000590:	40e3      	lsrs	r3, r4
 8000592:	1b04      	subs	r4, r0, r4
 8000594:	40a6      	lsls	r6, r4
 8000596:	1e75      	subs	r5, r6, #1
 8000598:	41ae      	sbcs	r6, r5
 800059a:	4333      	orrs	r3, r6
 800059c:	2607      	movs	r6, #7
 800059e:	001d      	movs	r5, r3
 80005a0:	2400      	movs	r4, #0
 80005a2:	401e      	ands	r6, r3
 80005a4:	2201      	movs	r2, #1
 80005a6:	464b      	mov	r3, r9
 80005a8:	401a      	ands	r2, r3
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d004      	beq.n	80005b8 <__aeabi_fadd+0x134>
 80005ae:	230f      	movs	r3, #15
 80005b0:	402b      	ands	r3, r5
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d000      	beq.n	80005b8 <__aeabi_fadd+0x134>
 80005b6:	3504      	adds	r5, #4
 80005b8:	016b      	lsls	r3, r5, #5
 80005ba:	d400      	bmi.n	80005be <__aeabi_fadd+0x13a>
 80005bc:	e780      	b.n	80004c0 <__aeabi_fadd+0x3c>
 80005be:	3401      	adds	r4, #1
 80005c0:	b2e6      	uxtb	r6, r4
 80005c2:	2cff      	cmp	r4, #255	; 0xff
 80005c4:	d12f      	bne.n	8000626 <__aeabi_fadd+0x1a2>
 80005c6:	26ff      	movs	r6, #255	; 0xff
 80005c8:	2300      	movs	r3, #0
 80005ca:	e780      	b.n	80004ce <__aeabi_fadd+0x4a>
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d152      	bne.n	8000676 <__aeabi_fadd+0x1f2>
 80005d0:	2cff      	cmp	r4, #255	; 0xff
 80005d2:	d000      	beq.n	80005d6 <__aeabi_fadd+0x152>
 80005d4:	e774      	b.n	80004c0 <__aeabi_fadd+0x3c>
 80005d6:	000a      	movs	r2, r1
 80005d8:	08ed      	lsrs	r5, r5, #3
 80005da:	2d00      	cmp	r5, #0
 80005dc:	d0f3      	beq.n	80005c6 <__aeabi_fadd+0x142>
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	03db      	lsls	r3, r3, #15
 80005e2:	432b      	orrs	r3, r5
 80005e4:	025b      	lsls	r3, r3, #9
 80005e6:	0a5b      	lsrs	r3, r3, #9
 80005e8:	26ff      	movs	r6, #255	; 0xff
 80005ea:	e770      	b.n	80004ce <__aeabi_fadd+0x4a>
 80005ec:	3f01      	subs	r7, #1
 80005ee:	2f00      	cmp	r7, #0
 80005f0:	d0be      	beq.n	8000570 <__aeabi_fadd+0xec>
 80005f2:	2cff      	cmp	r4, #255	; 0xff
 80005f4:	d1b1      	bne.n	800055a <__aeabi_fadd+0xd6>
 80005f6:	e763      	b.n	80004c0 <__aeabi_fadd+0x3c>
 80005f8:	2c00      	cmp	r4, #0
 80005fa:	d047      	beq.n	800068c <__aeabi_fadd+0x208>
 80005fc:	28ff      	cmp	r0, #255	; 0xff
 80005fe:	d069      	beq.n	80006d4 <__aeabi_fadd+0x250>
 8000600:	2480      	movs	r4, #128	; 0x80
 8000602:	04e4      	lsls	r4, r4, #19
 8000604:	427a      	negs	r2, r7
 8000606:	4325      	orrs	r5, r4
 8000608:	2a1b      	cmp	r2, #27
 800060a:	dd00      	ble.n	800060e <__aeabi_fadd+0x18a>
 800060c:	e0c5      	b.n	800079a <__aeabi_fadd+0x316>
 800060e:	002c      	movs	r4, r5
 8000610:	2620      	movs	r6, #32
 8000612:	40d4      	lsrs	r4, r2
 8000614:	1ab2      	subs	r2, r6, r2
 8000616:	4095      	lsls	r5, r2
 8000618:	1e6a      	subs	r2, r5, #1
 800061a:	4195      	sbcs	r5, r2
 800061c:	4325      	orrs	r5, r4
 800061e:	1b5d      	subs	r5, r3, r5
 8000620:	0004      	movs	r4, r0
 8000622:	4689      	mov	r9, r1
 8000624:	e7a5      	b.n	8000572 <__aeabi_fadd+0xee>
 8000626:	01ab      	lsls	r3, r5, #6
 8000628:	0a5b      	lsrs	r3, r3, #9
 800062a:	e750      	b.n	80004ce <__aeabi_fadd+0x4a>
 800062c:	2400      	movs	r4, #0
 800062e:	2201      	movs	r2, #1
 8000630:	464b      	mov	r3, r9
 8000632:	401a      	ands	r2, r3
 8000634:	076b      	lsls	r3, r5, #29
 8000636:	d1ba      	bne.n	80005ae <__aeabi_fadd+0x12a>
 8000638:	e742      	b.n	80004c0 <__aeabi_fadd+0x3c>
 800063a:	2f00      	cmp	r7, #0
 800063c:	d13b      	bne.n	80006b6 <__aeabi_fadd+0x232>
 800063e:	3401      	adds	r4, #1
 8000640:	b2e0      	uxtb	r0, r4
 8000642:	2801      	cmp	r0, #1
 8000644:	dd4a      	ble.n	80006dc <__aeabi_fadd+0x258>
 8000646:	2cff      	cmp	r4, #255	; 0xff
 8000648:	d0bd      	beq.n	80005c6 <__aeabi_fadd+0x142>
 800064a:	2607      	movs	r6, #7
 800064c:	18ed      	adds	r5, r5, r3
 800064e:	086d      	lsrs	r5, r5, #1
 8000650:	402e      	ands	r6, r5
 8000652:	e7a7      	b.n	80005a4 <__aeabi_fadd+0x120>
 8000654:	2307      	movs	r3, #7
 8000656:	4d57      	ldr	r5, [pc, #348]	; (80007b4 <__aeabi_fadd+0x330>)
 8000658:	1a24      	subs	r4, r4, r0
 800065a:	4035      	ands	r5, r6
 800065c:	401e      	ands	r6, r3
 800065e:	e7a1      	b.n	80005a4 <__aeabi_fadd+0x120>
 8000660:	2c00      	cmp	r4, #0
 8000662:	d11b      	bne.n	800069c <__aeabi_fadd+0x218>
 8000664:	2d00      	cmp	r5, #0
 8000666:	d16e      	bne.n	8000746 <__aeabi_fadd+0x2c2>
 8000668:	2b00      	cmp	r3, #0
 800066a:	d100      	bne.n	800066e <__aeabi_fadd+0x1ea>
 800066c:	e09a      	b.n	80007a4 <__aeabi_fadd+0x320>
 800066e:	000a      	movs	r2, r1
 8000670:	001d      	movs	r5, r3
 8000672:	003c      	movs	r4, r7
 8000674:	e724      	b.n	80004c0 <__aeabi_fadd+0x3c>
 8000676:	3f01      	subs	r7, #1
 8000678:	2f00      	cmp	r7, #0
 800067a:	d100      	bne.n	800067e <__aeabi_fadd+0x1fa>
 800067c:	e758      	b.n	8000530 <__aeabi_fadd+0xac>
 800067e:	2cff      	cmp	r4, #255	; 0xff
 8000680:	d000      	beq.n	8000684 <__aeabi_fadd+0x200>
 8000682:	e74a      	b.n	800051a <__aeabi_fadd+0x96>
 8000684:	e7a7      	b.n	80005d6 <__aeabi_fadd+0x152>
 8000686:	1b5e      	subs	r6, r3, r5
 8000688:	4689      	mov	r9, r1
 800068a:	e776      	b.n	800057a <__aeabi_fadd+0xf6>
 800068c:	2d00      	cmp	r5, #0
 800068e:	d11c      	bne.n	80006ca <__aeabi_fadd+0x246>
 8000690:	000a      	movs	r2, r1
 8000692:	28ff      	cmp	r0, #255	; 0xff
 8000694:	d01f      	beq.n	80006d6 <__aeabi_fadd+0x252>
 8000696:	0004      	movs	r4, r0
 8000698:	001d      	movs	r5, r3
 800069a:	e711      	b.n	80004c0 <__aeabi_fadd+0x3c>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d15d      	bne.n	800075c <__aeabi_fadd+0x2d8>
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d117      	bne.n	80006d4 <__aeabi_fadd+0x250>
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	2200      	movs	r2, #0
 80006a8:	03db      	lsls	r3, r3, #15
 80006aa:	26ff      	movs	r6, #255	; 0xff
 80006ac:	e70f      	b.n	80004ce <__aeabi_fadd+0x4a>
 80006ae:	000a      	movs	r2, r1
 80006b0:	26ff      	movs	r6, #255	; 0xff
 80006b2:	2300      	movs	r3, #0
 80006b4:	e70b      	b.n	80004ce <__aeabi_fadd+0x4a>
 80006b6:	2c00      	cmp	r4, #0
 80006b8:	d121      	bne.n	80006fe <__aeabi_fadd+0x27a>
 80006ba:	2d00      	cmp	r5, #0
 80006bc:	d166      	bne.n	800078c <__aeabi_fadd+0x308>
 80006be:	28ff      	cmp	r0, #255	; 0xff
 80006c0:	d1e9      	bne.n	8000696 <__aeabi_fadd+0x212>
 80006c2:	001d      	movs	r5, r3
 80006c4:	e787      	b.n	80005d6 <__aeabi_fadd+0x152>
 80006c6:	2301      	movs	r3, #1
 80006c8:	e752      	b.n	8000570 <__aeabi_fadd+0xec>
 80006ca:	1c7a      	adds	r2, r7, #1
 80006cc:	d0a7      	beq.n	800061e <__aeabi_fadd+0x19a>
 80006ce:	43fa      	mvns	r2, r7
 80006d0:	28ff      	cmp	r0, #255	; 0xff
 80006d2:	d199      	bne.n	8000608 <__aeabi_fadd+0x184>
 80006d4:	000a      	movs	r2, r1
 80006d6:	001d      	movs	r5, r3
 80006d8:	24ff      	movs	r4, #255	; 0xff
 80006da:	e6f1      	b.n	80004c0 <__aeabi_fadd+0x3c>
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d121      	bne.n	8000724 <__aeabi_fadd+0x2a0>
 80006e0:	2d00      	cmp	r5, #0
 80006e2:	d04f      	beq.n	8000784 <__aeabi_fadd+0x300>
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d04c      	beq.n	8000782 <__aeabi_fadd+0x2fe>
 80006e8:	18ed      	adds	r5, r5, r3
 80006ea:	016b      	lsls	r3, r5, #5
 80006ec:	d59e      	bpl.n	800062c <__aeabi_fadd+0x1a8>
 80006ee:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <__aeabi_fadd+0x330>)
 80006f0:	3607      	adds	r6, #7
 80006f2:	402e      	ands	r6, r5
 80006f4:	2401      	movs	r4, #1
 80006f6:	401d      	ands	r5, r3
 80006f8:	e754      	b.n	80005a4 <__aeabi_fadd+0x120>
 80006fa:	2301      	movs	r3, #1
 80006fc:	e718      	b.n	8000530 <__aeabi_fadd+0xac>
 80006fe:	28ff      	cmp	r0, #255	; 0xff
 8000700:	d0df      	beq.n	80006c2 <__aeabi_fadd+0x23e>
 8000702:	2480      	movs	r4, #128	; 0x80
 8000704:	04e4      	lsls	r4, r4, #19
 8000706:	427f      	negs	r7, r7
 8000708:	4325      	orrs	r5, r4
 800070a:	2f1b      	cmp	r7, #27
 800070c:	dc4d      	bgt.n	80007aa <__aeabi_fadd+0x326>
 800070e:	2620      	movs	r6, #32
 8000710:	1bf6      	subs	r6, r6, r7
 8000712:	002c      	movs	r4, r5
 8000714:	40b5      	lsls	r5, r6
 8000716:	40fc      	lsrs	r4, r7
 8000718:	1e6a      	subs	r2, r5, #1
 800071a:	4195      	sbcs	r5, r2
 800071c:	4325      	orrs	r5, r4
 800071e:	18ed      	adds	r5, r5, r3
 8000720:	0004      	movs	r4, r0
 8000722:	e706      	b.n	8000532 <__aeabi_fadd+0xae>
 8000724:	2d00      	cmp	r5, #0
 8000726:	d0cc      	beq.n	80006c2 <__aeabi_fadd+0x23e>
 8000728:	2b00      	cmp	r3, #0
 800072a:	d100      	bne.n	800072e <__aeabi_fadd+0x2aa>
 800072c:	e753      	b.n	80005d6 <__aeabi_fadd+0x152>
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	4660      	mov	r0, ip
 8000732:	03c9      	lsls	r1, r1, #15
 8000734:	4208      	tst	r0, r1
 8000736:	d003      	beq.n	8000740 <__aeabi_fadd+0x2bc>
 8000738:	4640      	mov	r0, r8
 800073a:	4208      	tst	r0, r1
 800073c:	d100      	bne.n	8000740 <__aeabi_fadd+0x2bc>
 800073e:	001d      	movs	r5, r3
 8000740:	2101      	movs	r1, #1
 8000742:	4011      	ands	r1, r2
 8000744:	e747      	b.n	80005d6 <__aeabi_fadd+0x152>
 8000746:	2b00      	cmp	r3, #0
 8000748:	d100      	bne.n	800074c <__aeabi_fadd+0x2c8>
 800074a:	e6b9      	b.n	80004c0 <__aeabi_fadd+0x3c>
 800074c:	1aea      	subs	r2, r5, r3
 800074e:	0150      	lsls	r0, r2, #5
 8000750:	d525      	bpl.n	800079e <__aeabi_fadd+0x31a>
 8000752:	2607      	movs	r6, #7
 8000754:	1b5d      	subs	r5, r3, r5
 8000756:	402e      	ands	r6, r5
 8000758:	4689      	mov	r9, r1
 800075a:	e723      	b.n	80005a4 <__aeabi_fadd+0x120>
 800075c:	24ff      	movs	r4, #255	; 0xff
 800075e:	2b00      	cmp	r3, #0
 8000760:	d100      	bne.n	8000764 <__aeabi_fadd+0x2e0>
 8000762:	e6ad      	b.n	80004c0 <__aeabi_fadd+0x3c>
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	4660      	mov	r0, ip
 8000768:	03d2      	lsls	r2, r2, #15
 800076a:	4210      	tst	r0, r2
 800076c:	d004      	beq.n	8000778 <__aeabi_fadd+0x2f4>
 800076e:	4640      	mov	r0, r8
 8000770:	4210      	tst	r0, r2
 8000772:	d101      	bne.n	8000778 <__aeabi_fadd+0x2f4>
 8000774:	001d      	movs	r5, r3
 8000776:	4689      	mov	r9, r1
 8000778:	2201      	movs	r2, #1
 800077a:	464b      	mov	r3, r9
 800077c:	24ff      	movs	r4, #255	; 0xff
 800077e:	401a      	ands	r2, r3
 8000780:	e69e      	b.n	80004c0 <__aeabi_fadd+0x3c>
 8000782:	002b      	movs	r3, r5
 8000784:	08dd      	lsrs	r5, r3, #3
 8000786:	000a      	movs	r2, r1
 8000788:	2400      	movs	r4, #0
 800078a:	e69d      	b.n	80004c8 <__aeabi_fadd+0x44>
 800078c:	1c7a      	adds	r2, r7, #1
 800078e:	d0c6      	beq.n	800071e <__aeabi_fadd+0x29a>
 8000790:	43ff      	mvns	r7, r7
 8000792:	28ff      	cmp	r0, #255	; 0xff
 8000794:	d1b9      	bne.n	800070a <__aeabi_fadd+0x286>
 8000796:	001d      	movs	r5, r3
 8000798:	e71d      	b.n	80005d6 <__aeabi_fadd+0x152>
 800079a:	2501      	movs	r5, #1
 800079c:	e73f      	b.n	800061e <__aeabi_fadd+0x19a>
 800079e:	1e15      	subs	r5, r2, #0
 80007a0:	d000      	beq.n	80007a4 <__aeabi_fadd+0x320>
 80007a2:	e744      	b.n	800062e <__aeabi_fadd+0x1aa>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	e691      	b.n	80004ce <__aeabi_fadd+0x4a>
 80007aa:	2501      	movs	r5, #1
 80007ac:	e7b7      	b.n	800071e <__aeabi_fadd+0x29a>
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	7dffffff 	.word	0x7dffffff
 80007b4:	fbffffff 	.word	0xfbffffff

080007b8 <__aeabi_fdiv>:
 80007b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ba:	4657      	mov	r7, sl
 80007bc:	464e      	mov	r6, r9
 80007be:	4645      	mov	r5, r8
 80007c0:	46de      	mov	lr, fp
 80007c2:	0244      	lsls	r4, r0, #9
 80007c4:	b5e0      	push	{r5, r6, r7, lr}
 80007c6:	0046      	lsls	r6, r0, #1
 80007c8:	4688      	mov	r8, r1
 80007ca:	0a64      	lsrs	r4, r4, #9
 80007cc:	0e36      	lsrs	r6, r6, #24
 80007ce:	0fc7      	lsrs	r7, r0, #31
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d063      	beq.n	800089c <__aeabi_fdiv+0xe4>
 80007d4:	2eff      	cmp	r6, #255	; 0xff
 80007d6:	d024      	beq.n	8000822 <__aeabi_fdiv+0x6a>
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	00e4      	lsls	r4, r4, #3
 80007dc:	04db      	lsls	r3, r3, #19
 80007de:	431c      	orrs	r4, r3
 80007e0:	2300      	movs	r3, #0
 80007e2:	4699      	mov	r9, r3
 80007e4:	469b      	mov	fp, r3
 80007e6:	3e7f      	subs	r6, #127	; 0x7f
 80007e8:	4643      	mov	r3, r8
 80007ea:	4642      	mov	r2, r8
 80007ec:	025d      	lsls	r5, r3, #9
 80007ee:	0fd2      	lsrs	r2, r2, #31
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	0a6d      	lsrs	r5, r5, #9
 80007f4:	0e1b      	lsrs	r3, r3, #24
 80007f6:	4690      	mov	r8, r2
 80007f8:	4692      	mov	sl, r2
 80007fa:	d065      	beq.n	80008c8 <__aeabi_fdiv+0x110>
 80007fc:	2bff      	cmp	r3, #255	; 0xff
 80007fe:	d055      	beq.n	80008ac <__aeabi_fdiv+0xf4>
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	2100      	movs	r1, #0
 8000804:	00ed      	lsls	r5, r5, #3
 8000806:	04d2      	lsls	r2, r2, #19
 8000808:	3b7f      	subs	r3, #127	; 0x7f
 800080a:	4315      	orrs	r5, r2
 800080c:	1af6      	subs	r6, r6, r3
 800080e:	4643      	mov	r3, r8
 8000810:	464a      	mov	r2, r9
 8000812:	407b      	eors	r3, r7
 8000814:	2a0f      	cmp	r2, #15
 8000816:	d900      	bls.n	800081a <__aeabi_fdiv+0x62>
 8000818:	e08d      	b.n	8000936 <__aeabi_fdiv+0x17e>
 800081a:	486d      	ldr	r0, [pc, #436]	; (80009d0 <__aeabi_fdiv+0x218>)
 800081c:	0092      	lsls	r2, r2, #2
 800081e:	5882      	ldr	r2, [r0, r2]
 8000820:	4697      	mov	pc, r2
 8000822:	2c00      	cmp	r4, #0
 8000824:	d154      	bne.n	80008d0 <__aeabi_fdiv+0x118>
 8000826:	2308      	movs	r3, #8
 8000828:	4699      	mov	r9, r3
 800082a:	3b06      	subs	r3, #6
 800082c:	26ff      	movs	r6, #255	; 0xff
 800082e:	469b      	mov	fp, r3
 8000830:	e7da      	b.n	80007e8 <__aeabi_fdiv+0x30>
 8000832:	2500      	movs	r5, #0
 8000834:	4653      	mov	r3, sl
 8000836:	2902      	cmp	r1, #2
 8000838:	d01b      	beq.n	8000872 <__aeabi_fdiv+0xba>
 800083a:	2903      	cmp	r1, #3
 800083c:	d100      	bne.n	8000840 <__aeabi_fdiv+0x88>
 800083e:	e0bf      	b.n	80009c0 <__aeabi_fdiv+0x208>
 8000840:	2901      	cmp	r1, #1
 8000842:	d028      	beq.n	8000896 <__aeabi_fdiv+0xde>
 8000844:	0030      	movs	r0, r6
 8000846:	307f      	adds	r0, #127	; 0x7f
 8000848:	2800      	cmp	r0, #0
 800084a:	dd20      	ble.n	800088e <__aeabi_fdiv+0xd6>
 800084c:	076a      	lsls	r2, r5, #29
 800084e:	d004      	beq.n	800085a <__aeabi_fdiv+0xa2>
 8000850:	220f      	movs	r2, #15
 8000852:	402a      	ands	r2, r5
 8000854:	2a04      	cmp	r2, #4
 8000856:	d000      	beq.n	800085a <__aeabi_fdiv+0xa2>
 8000858:	3504      	adds	r5, #4
 800085a:	012a      	lsls	r2, r5, #4
 800085c:	d503      	bpl.n	8000866 <__aeabi_fdiv+0xae>
 800085e:	0030      	movs	r0, r6
 8000860:	4a5c      	ldr	r2, [pc, #368]	; (80009d4 <__aeabi_fdiv+0x21c>)
 8000862:	3080      	adds	r0, #128	; 0x80
 8000864:	4015      	ands	r5, r2
 8000866:	28fe      	cmp	r0, #254	; 0xfe
 8000868:	dc03      	bgt.n	8000872 <__aeabi_fdiv+0xba>
 800086a:	01ac      	lsls	r4, r5, #6
 800086c:	0a64      	lsrs	r4, r4, #9
 800086e:	b2c2      	uxtb	r2, r0
 8000870:	e001      	b.n	8000876 <__aeabi_fdiv+0xbe>
 8000872:	22ff      	movs	r2, #255	; 0xff
 8000874:	2400      	movs	r4, #0
 8000876:	0264      	lsls	r4, r4, #9
 8000878:	05d2      	lsls	r2, r2, #23
 800087a:	0a60      	lsrs	r0, r4, #9
 800087c:	07db      	lsls	r3, r3, #31
 800087e:	4310      	orrs	r0, r2
 8000880:	4318      	orrs	r0, r3
 8000882:	bc3c      	pop	{r2, r3, r4, r5}
 8000884:	4690      	mov	r8, r2
 8000886:	4699      	mov	r9, r3
 8000888:	46a2      	mov	sl, r4
 800088a:	46ab      	mov	fp, r5
 800088c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800088e:	2201      	movs	r2, #1
 8000890:	1a10      	subs	r0, r2, r0
 8000892:	281b      	cmp	r0, #27
 8000894:	dd7c      	ble.n	8000990 <__aeabi_fdiv+0x1d8>
 8000896:	2200      	movs	r2, #0
 8000898:	2400      	movs	r4, #0
 800089a:	e7ec      	b.n	8000876 <__aeabi_fdiv+0xbe>
 800089c:	2c00      	cmp	r4, #0
 800089e:	d11d      	bne.n	80008dc <__aeabi_fdiv+0x124>
 80008a0:	2304      	movs	r3, #4
 80008a2:	4699      	mov	r9, r3
 80008a4:	3b03      	subs	r3, #3
 80008a6:	2600      	movs	r6, #0
 80008a8:	469b      	mov	fp, r3
 80008aa:	e79d      	b.n	80007e8 <__aeabi_fdiv+0x30>
 80008ac:	3eff      	subs	r6, #255	; 0xff
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d120      	bne.n	80008f4 <__aeabi_fdiv+0x13c>
 80008b2:	2102      	movs	r1, #2
 80008b4:	4643      	mov	r3, r8
 80008b6:	464a      	mov	r2, r9
 80008b8:	407b      	eors	r3, r7
 80008ba:	430a      	orrs	r2, r1
 80008bc:	2a0f      	cmp	r2, #15
 80008be:	d8d8      	bhi.n	8000872 <__aeabi_fdiv+0xba>
 80008c0:	4845      	ldr	r0, [pc, #276]	; (80009d8 <__aeabi_fdiv+0x220>)
 80008c2:	0092      	lsls	r2, r2, #2
 80008c4:	5882      	ldr	r2, [r0, r2]
 80008c6:	4697      	mov	pc, r2
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d119      	bne.n	8000900 <__aeabi_fdiv+0x148>
 80008cc:	2101      	movs	r1, #1
 80008ce:	e7f1      	b.n	80008b4 <__aeabi_fdiv+0xfc>
 80008d0:	230c      	movs	r3, #12
 80008d2:	4699      	mov	r9, r3
 80008d4:	3b09      	subs	r3, #9
 80008d6:	26ff      	movs	r6, #255	; 0xff
 80008d8:	469b      	mov	fp, r3
 80008da:	e785      	b.n	80007e8 <__aeabi_fdiv+0x30>
 80008dc:	0020      	movs	r0, r4
 80008de:	f002 f9b5 	bl	8002c4c <__clzsi2>
 80008e2:	2676      	movs	r6, #118	; 0x76
 80008e4:	1f43      	subs	r3, r0, #5
 80008e6:	409c      	lsls	r4, r3
 80008e8:	2300      	movs	r3, #0
 80008ea:	4276      	negs	r6, r6
 80008ec:	1a36      	subs	r6, r6, r0
 80008ee:	4699      	mov	r9, r3
 80008f0:	469b      	mov	fp, r3
 80008f2:	e779      	b.n	80007e8 <__aeabi_fdiv+0x30>
 80008f4:	464a      	mov	r2, r9
 80008f6:	2303      	movs	r3, #3
 80008f8:	431a      	orrs	r2, r3
 80008fa:	4691      	mov	r9, r2
 80008fc:	2103      	movs	r1, #3
 80008fe:	e786      	b.n	800080e <__aeabi_fdiv+0x56>
 8000900:	0028      	movs	r0, r5
 8000902:	f002 f9a3 	bl	8002c4c <__clzsi2>
 8000906:	1f43      	subs	r3, r0, #5
 8000908:	1836      	adds	r6, r6, r0
 800090a:	409d      	lsls	r5, r3
 800090c:	3676      	adds	r6, #118	; 0x76
 800090e:	2100      	movs	r1, #0
 8000910:	e77d      	b.n	800080e <__aeabi_fdiv+0x56>
 8000912:	2480      	movs	r4, #128	; 0x80
 8000914:	2300      	movs	r3, #0
 8000916:	03e4      	lsls	r4, r4, #15
 8000918:	22ff      	movs	r2, #255	; 0xff
 800091a:	e7ac      	b.n	8000876 <__aeabi_fdiv+0xbe>
 800091c:	2500      	movs	r5, #0
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	03db      	lsls	r3, r3, #15
 8000922:	421c      	tst	r4, r3
 8000924:	d028      	beq.n	8000978 <__aeabi_fdiv+0x1c0>
 8000926:	421d      	tst	r5, r3
 8000928:	d126      	bne.n	8000978 <__aeabi_fdiv+0x1c0>
 800092a:	432b      	orrs	r3, r5
 800092c:	025c      	lsls	r4, r3, #9
 800092e:	0a64      	lsrs	r4, r4, #9
 8000930:	4643      	mov	r3, r8
 8000932:	22ff      	movs	r2, #255	; 0xff
 8000934:	e79f      	b.n	8000876 <__aeabi_fdiv+0xbe>
 8000936:	0162      	lsls	r2, r4, #5
 8000938:	016c      	lsls	r4, r5, #5
 800093a:	42a2      	cmp	r2, r4
 800093c:	d224      	bcs.n	8000988 <__aeabi_fdiv+0x1d0>
 800093e:	211b      	movs	r1, #27
 8000940:	2500      	movs	r5, #0
 8000942:	3e01      	subs	r6, #1
 8000944:	2701      	movs	r7, #1
 8000946:	0010      	movs	r0, r2
 8000948:	006d      	lsls	r5, r5, #1
 800094a:	0052      	lsls	r2, r2, #1
 800094c:	2800      	cmp	r0, #0
 800094e:	db01      	blt.n	8000954 <__aeabi_fdiv+0x19c>
 8000950:	4294      	cmp	r4, r2
 8000952:	d801      	bhi.n	8000958 <__aeabi_fdiv+0x1a0>
 8000954:	1b12      	subs	r2, r2, r4
 8000956:	433d      	orrs	r5, r7
 8000958:	3901      	subs	r1, #1
 800095a:	2900      	cmp	r1, #0
 800095c:	d1f3      	bne.n	8000946 <__aeabi_fdiv+0x18e>
 800095e:	0014      	movs	r4, r2
 8000960:	1e62      	subs	r2, r4, #1
 8000962:	4194      	sbcs	r4, r2
 8000964:	4325      	orrs	r5, r4
 8000966:	e76d      	b.n	8000844 <__aeabi_fdiv+0x8c>
 8000968:	46ba      	mov	sl, r7
 800096a:	4659      	mov	r1, fp
 800096c:	0025      	movs	r5, r4
 800096e:	4653      	mov	r3, sl
 8000970:	2902      	cmp	r1, #2
 8000972:	d000      	beq.n	8000976 <__aeabi_fdiv+0x1be>
 8000974:	e761      	b.n	800083a <__aeabi_fdiv+0x82>
 8000976:	e77c      	b.n	8000872 <__aeabi_fdiv+0xba>
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	03db      	lsls	r3, r3, #15
 800097c:	431c      	orrs	r4, r3
 800097e:	0264      	lsls	r4, r4, #9
 8000980:	0a64      	lsrs	r4, r4, #9
 8000982:	003b      	movs	r3, r7
 8000984:	22ff      	movs	r2, #255	; 0xff
 8000986:	e776      	b.n	8000876 <__aeabi_fdiv+0xbe>
 8000988:	1b12      	subs	r2, r2, r4
 800098a:	211a      	movs	r1, #26
 800098c:	2501      	movs	r5, #1
 800098e:	e7d9      	b.n	8000944 <__aeabi_fdiv+0x18c>
 8000990:	369e      	adds	r6, #158	; 0x9e
 8000992:	002a      	movs	r2, r5
 8000994:	40b5      	lsls	r5, r6
 8000996:	002c      	movs	r4, r5
 8000998:	40c2      	lsrs	r2, r0
 800099a:	1e65      	subs	r5, r4, #1
 800099c:	41ac      	sbcs	r4, r5
 800099e:	4314      	orrs	r4, r2
 80009a0:	0762      	lsls	r2, r4, #29
 80009a2:	d004      	beq.n	80009ae <__aeabi_fdiv+0x1f6>
 80009a4:	220f      	movs	r2, #15
 80009a6:	4022      	ands	r2, r4
 80009a8:	2a04      	cmp	r2, #4
 80009aa:	d000      	beq.n	80009ae <__aeabi_fdiv+0x1f6>
 80009ac:	3404      	adds	r4, #4
 80009ae:	0162      	lsls	r2, r4, #5
 80009b0:	d403      	bmi.n	80009ba <__aeabi_fdiv+0x202>
 80009b2:	01a4      	lsls	r4, r4, #6
 80009b4:	0a64      	lsrs	r4, r4, #9
 80009b6:	2200      	movs	r2, #0
 80009b8:	e75d      	b.n	8000876 <__aeabi_fdiv+0xbe>
 80009ba:	2201      	movs	r2, #1
 80009bc:	2400      	movs	r4, #0
 80009be:	e75a      	b.n	8000876 <__aeabi_fdiv+0xbe>
 80009c0:	2480      	movs	r4, #128	; 0x80
 80009c2:	03e4      	lsls	r4, r4, #15
 80009c4:	432c      	orrs	r4, r5
 80009c6:	0264      	lsls	r4, r4, #9
 80009c8:	0a64      	lsrs	r4, r4, #9
 80009ca:	22ff      	movs	r2, #255	; 0xff
 80009cc:	e753      	b.n	8000876 <__aeabi_fdiv+0xbe>
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	08008a24 	.word	0x08008a24
 80009d4:	f7ffffff 	.word	0xf7ffffff
 80009d8:	08008a64 	.word	0x08008a64

080009dc <__aeabi_fmul>:
 80009dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009de:	464e      	mov	r6, r9
 80009e0:	4657      	mov	r7, sl
 80009e2:	4645      	mov	r5, r8
 80009e4:	46de      	mov	lr, fp
 80009e6:	b5e0      	push	{r5, r6, r7, lr}
 80009e8:	0243      	lsls	r3, r0, #9
 80009ea:	0a5b      	lsrs	r3, r3, #9
 80009ec:	0045      	lsls	r5, r0, #1
 80009ee:	b083      	sub	sp, #12
 80009f0:	1c0f      	adds	r7, r1, #0
 80009f2:	4699      	mov	r9, r3
 80009f4:	0e2d      	lsrs	r5, r5, #24
 80009f6:	0fc6      	lsrs	r6, r0, #31
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	d057      	beq.n	8000aac <__aeabi_fmul+0xd0>
 80009fc:	2dff      	cmp	r5, #255	; 0xff
 80009fe:	d024      	beq.n	8000a4a <__aeabi_fmul+0x6e>
 8000a00:	2080      	movs	r0, #128	; 0x80
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	04c0      	lsls	r0, r0, #19
 8000a06:	4318      	orrs	r0, r3
 8000a08:	2300      	movs	r3, #0
 8000a0a:	4681      	mov	r9, r0
 8000a0c:	469a      	mov	sl, r3
 8000a0e:	469b      	mov	fp, r3
 8000a10:	3d7f      	subs	r5, #127	; 0x7f
 8000a12:	027c      	lsls	r4, r7, #9
 8000a14:	007a      	lsls	r2, r7, #1
 8000a16:	0ffb      	lsrs	r3, r7, #31
 8000a18:	0a64      	lsrs	r4, r4, #9
 8000a1a:	0e12      	lsrs	r2, r2, #24
 8000a1c:	4698      	mov	r8, r3
 8000a1e:	d023      	beq.n	8000a68 <__aeabi_fmul+0x8c>
 8000a20:	2aff      	cmp	r2, #255	; 0xff
 8000a22:	d04b      	beq.n	8000abc <__aeabi_fmul+0xe0>
 8000a24:	00e3      	lsls	r3, r4, #3
 8000a26:	2480      	movs	r4, #128	; 0x80
 8000a28:	2000      	movs	r0, #0
 8000a2a:	04e4      	lsls	r4, r4, #19
 8000a2c:	3a7f      	subs	r2, #127	; 0x7f
 8000a2e:	431c      	orrs	r4, r3
 8000a30:	18ad      	adds	r5, r5, r2
 8000a32:	1c6b      	adds	r3, r5, #1
 8000a34:	4647      	mov	r7, r8
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	4653      	mov	r3, sl
 8000a3a:	4077      	eors	r7, r6
 8000a3c:	003a      	movs	r2, r7
 8000a3e:	2b0f      	cmp	r3, #15
 8000a40:	d848      	bhi.n	8000ad4 <__aeabi_fmul+0xf8>
 8000a42:	497d      	ldr	r1, [pc, #500]	; (8000c38 <__aeabi_fmul+0x25c>)
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	58cb      	ldr	r3, [r1, r3]
 8000a48:	469f      	mov	pc, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_fmul+0x74>
 8000a4e:	e085      	b.n	8000b5c <__aeabi_fmul+0x180>
 8000a50:	3308      	adds	r3, #8
 8000a52:	469a      	mov	sl, r3
 8000a54:	3b06      	subs	r3, #6
 8000a56:	469b      	mov	fp, r3
 8000a58:	027c      	lsls	r4, r7, #9
 8000a5a:	007a      	lsls	r2, r7, #1
 8000a5c:	0ffb      	lsrs	r3, r7, #31
 8000a5e:	25ff      	movs	r5, #255	; 0xff
 8000a60:	0a64      	lsrs	r4, r4, #9
 8000a62:	0e12      	lsrs	r2, r2, #24
 8000a64:	4698      	mov	r8, r3
 8000a66:	d1db      	bne.n	8000a20 <__aeabi_fmul+0x44>
 8000a68:	2c00      	cmp	r4, #0
 8000a6a:	d000      	beq.n	8000a6e <__aeabi_fmul+0x92>
 8000a6c:	e090      	b.n	8000b90 <__aeabi_fmul+0x1b4>
 8000a6e:	4652      	mov	r2, sl
 8000a70:	2301      	movs	r3, #1
 8000a72:	431a      	orrs	r2, r3
 8000a74:	4692      	mov	sl, r2
 8000a76:	2001      	movs	r0, #1
 8000a78:	e7db      	b.n	8000a32 <__aeabi_fmul+0x56>
 8000a7a:	464c      	mov	r4, r9
 8000a7c:	4658      	mov	r0, fp
 8000a7e:	0017      	movs	r7, r2
 8000a80:	2802      	cmp	r0, #2
 8000a82:	d024      	beq.n	8000ace <__aeabi_fmul+0xf2>
 8000a84:	2803      	cmp	r0, #3
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fmul+0xae>
 8000a88:	e0cf      	b.n	8000c2a <__aeabi_fmul+0x24e>
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	2801      	cmp	r0, #1
 8000a90:	d14d      	bne.n	8000b2e <__aeabi_fmul+0x152>
 8000a92:	0258      	lsls	r0, r3, #9
 8000a94:	05d2      	lsls	r2, r2, #23
 8000a96:	0a40      	lsrs	r0, r0, #9
 8000a98:	07ff      	lsls	r7, r7, #31
 8000a9a:	4310      	orrs	r0, r2
 8000a9c:	4338      	orrs	r0, r7
 8000a9e:	b003      	add	sp, #12
 8000aa0:	bc3c      	pop	{r2, r3, r4, r5}
 8000aa2:	4690      	mov	r8, r2
 8000aa4:	4699      	mov	r9, r3
 8000aa6:	46a2      	mov	sl, r4
 8000aa8:	46ab      	mov	fp, r5
 8000aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d15b      	bne.n	8000b68 <__aeabi_fmul+0x18c>
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	469a      	mov	sl, r3
 8000ab4:	3b03      	subs	r3, #3
 8000ab6:	2500      	movs	r5, #0
 8000ab8:	469b      	mov	fp, r3
 8000aba:	e7aa      	b.n	8000a12 <__aeabi_fmul+0x36>
 8000abc:	35ff      	adds	r5, #255	; 0xff
 8000abe:	2c00      	cmp	r4, #0
 8000ac0:	d160      	bne.n	8000b84 <__aeabi_fmul+0x1a8>
 8000ac2:	4652      	mov	r2, sl
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	4692      	mov	sl, r2
 8000aca:	2002      	movs	r0, #2
 8000acc:	e7b1      	b.n	8000a32 <__aeabi_fmul+0x56>
 8000ace:	22ff      	movs	r2, #255	; 0xff
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e7de      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000ad4:	464b      	mov	r3, r9
 8000ad6:	0c1b      	lsrs	r3, r3, #16
 8000ad8:	469c      	mov	ip, r3
 8000ada:	464b      	mov	r3, r9
 8000adc:	0426      	lsls	r6, r4, #16
 8000ade:	0c36      	lsrs	r6, r6, #16
 8000ae0:	0418      	lsls	r0, r3, #16
 8000ae2:	4661      	mov	r1, ip
 8000ae4:	0033      	movs	r3, r6
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	4664      	mov	r4, ip
 8000aea:	0c00      	lsrs	r0, r0, #16
 8000aec:	4343      	muls	r3, r0
 8000aee:	434e      	muls	r6, r1
 8000af0:	4350      	muls	r0, r2
 8000af2:	4354      	muls	r4, r2
 8000af4:	1980      	adds	r0, r0, r6
 8000af6:	0c1a      	lsrs	r2, r3, #16
 8000af8:	1812      	adds	r2, r2, r0
 8000afa:	4296      	cmp	r6, r2
 8000afc:	d903      	bls.n	8000b06 <__aeabi_fmul+0x12a>
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	0249      	lsls	r1, r1, #9
 8000b02:	468c      	mov	ip, r1
 8000b04:	4464      	add	r4, ip
 8000b06:	041b      	lsls	r3, r3, #16
 8000b08:	0c1b      	lsrs	r3, r3, #16
 8000b0a:	0410      	lsls	r0, r2, #16
 8000b0c:	18c0      	adds	r0, r0, r3
 8000b0e:	0183      	lsls	r3, r0, #6
 8000b10:	1e5e      	subs	r6, r3, #1
 8000b12:	41b3      	sbcs	r3, r6
 8000b14:	0e80      	lsrs	r0, r0, #26
 8000b16:	4318      	orrs	r0, r3
 8000b18:	0c13      	lsrs	r3, r2, #16
 8000b1a:	191b      	adds	r3, r3, r4
 8000b1c:	019b      	lsls	r3, r3, #6
 8000b1e:	4303      	orrs	r3, r0
 8000b20:	001c      	movs	r4, r3
 8000b22:	0123      	lsls	r3, r4, #4
 8000b24:	d579      	bpl.n	8000c1a <__aeabi_fmul+0x23e>
 8000b26:	2301      	movs	r3, #1
 8000b28:	0862      	lsrs	r2, r4, #1
 8000b2a:	401c      	ands	r4, r3
 8000b2c:	4314      	orrs	r4, r2
 8000b2e:	9a01      	ldr	r2, [sp, #4]
 8000b30:	327f      	adds	r2, #127	; 0x7f
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	dd4d      	ble.n	8000bd2 <__aeabi_fmul+0x1f6>
 8000b36:	0763      	lsls	r3, r4, #29
 8000b38:	d004      	beq.n	8000b44 <__aeabi_fmul+0x168>
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	4023      	ands	r3, r4
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d000      	beq.n	8000b44 <__aeabi_fmul+0x168>
 8000b42:	3404      	adds	r4, #4
 8000b44:	0123      	lsls	r3, r4, #4
 8000b46:	d503      	bpl.n	8000b50 <__aeabi_fmul+0x174>
 8000b48:	4b3c      	ldr	r3, [pc, #240]	; (8000c3c <__aeabi_fmul+0x260>)
 8000b4a:	9a01      	ldr	r2, [sp, #4]
 8000b4c:	401c      	ands	r4, r3
 8000b4e:	3280      	adds	r2, #128	; 0x80
 8000b50:	2afe      	cmp	r2, #254	; 0xfe
 8000b52:	dcbc      	bgt.n	8000ace <__aeabi_fmul+0xf2>
 8000b54:	01a3      	lsls	r3, r4, #6
 8000b56:	0a5b      	lsrs	r3, r3, #9
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	e79a      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000b5c:	230c      	movs	r3, #12
 8000b5e:	469a      	mov	sl, r3
 8000b60:	3b09      	subs	r3, #9
 8000b62:	25ff      	movs	r5, #255	; 0xff
 8000b64:	469b      	mov	fp, r3
 8000b66:	e754      	b.n	8000a12 <__aeabi_fmul+0x36>
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f002 f86f 	bl	8002c4c <__clzsi2>
 8000b6e:	464a      	mov	r2, r9
 8000b70:	1f43      	subs	r3, r0, #5
 8000b72:	2576      	movs	r5, #118	; 0x76
 8000b74:	409a      	lsls	r2, r3
 8000b76:	2300      	movs	r3, #0
 8000b78:	426d      	negs	r5, r5
 8000b7a:	4691      	mov	r9, r2
 8000b7c:	1a2d      	subs	r5, r5, r0
 8000b7e:	469a      	mov	sl, r3
 8000b80:	469b      	mov	fp, r3
 8000b82:	e746      	b.n	8000a12 <__aeabi_fmul+0x36>
 8000b84:	4652      	mov	r2, sl
 8000b86:	2303      	movs	r3, #3
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	4692      	mov	sl, r2
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	e750      	b.n	8000a32 <__aeabi_fmul+0x56>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 f85b 	bl	8002c4c <__clzsi2>
 8000b96:	1f43      	subs	r3, r0, #5
 8000b98:	1a2d      	subs	r5, r5, r0
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	3d76      	subs	r5, #118	; 0x76
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	e747      	b.n	8000a32 <__aeabi_fmul+0x56>
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	2700      	movs	r7, #0
 8000ba6:	03db      	lsls	r3, r3, #15
 8000ba8:	22ff      	movs	r2, #255	; 0xff
 8000baa:	e772      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000bac:	4642      	mov	r2, r8
 8000bae:	e766      	b.n	8000a7e <__aeabi_fmul+0xa2>
 8000bb0:	464c      	mov	r4, r9
 8000bb2:	0032      	movs	r2, r6
 8000bb4:	4658      	mov	r0, fp
 8000bb6:	e762      	b.n	8000a7e <__aeabi_fmul+0xa2>
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	464a      	mov	r2, r9
 8000bbc:	03db      	lsls	r3, r3, #15
 8000bbe:	421a      	tst	r2, r3
 8000bc0:	d022      	beq.n	8000c08 <__aeabi_fmul+0x22c>
 8000bc2:	421c      	tst	r4, r3
 8000bc4:	d120      	bne.n	8000c08 <__aeabi_fmul+0x22c>
 8000bc6:	4323      	orrs	r3, r4
 8000bc8:	025b      	lsls	r3, r3, #9
 8000bca:	0a5b      	lsrs	r3, r3, #9
 8000bcc:	4647      	mov	r7, r8
 8000bce:	22ff      	movs	r2, #255	; 0xff
 8000bd0:	e75f      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	1a9a      	subs	r2, r3, r2
 8000bd6:	2a1b      	cmp	r2, #27
 8000bd8:	dc21      	bgt.n	8000c1e <__aeabi_fmul+0x242>
 8000bda:	0023      	movs	r3, r4
 8000bdc:	9901      	ldr	r1, [sp, #4]
 8000bde:	40d3      	lsrs	r3, r2
 8000be0:	319e      	adds	r1, #158	; 0x9e
 8000be2:	408c      	lsls	r4, r1
 8000be4:	001a      	movs	r2, r3
 8000be6:	0023      	movs	r3, r4
 8000be8:	1e5c      	subs	r4, r3, #1
 8000bea:	41a3      	sbcs	r3, r4
 8000bec:	4313      	orrs	r3, r2
 8000bee:	075a      	lsls	r2, r3, #29
 8000bf0:	d004      	beq.n	8000bfc <__aeabi_fmul+0x220>
 8000bf2:	220f      	movs	r2, #15
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	2a04      	cmp	r2, #4
 8000bf8:	d000      	beq.n	8000bfc <__aeabi_fmul+0x220>
 8000bfa:	3304      	adds	r3, #4
 8000bfc:	015a      	lsls	r2, r3, #5
 8000bfe:	d411      	bmi.n	8000c24 <__aeabi_fmul+0x248>
 8000c00:	019b      	lsls	r3, r3, #6
 8000c02:	0a5b      	lsrs	r3, r3, #9
 8000c04:	2200      	movs	r2, #0
 8000c06:	e744      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	464a      	mov	r2, r9
 8000c0c:	03db      	lsls	r3, r3, #15
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	025b      	lsls	r3, r3, #9
 8000c12:	0a5b      	lsrs	r3, r3, #9
 8000c14:	0037      	movs	r7, r6
 8000c16:	22ff      	movs	r2, #255	; 0xff
 8000c18:	e73b      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000c1a:	9501      	str	r5, [sp, #4]
 8000c1c:	e787      	b.n	8000b2e <__aeabi_fmul+0x152>
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2300      	movs	r3, #0
 8000c22:	e736      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000c24:	2201      	movs	r2, #1
 8000c26:	2300      	movs	r3, #0
 8000c28:	e733      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	03db      	lsls	r3, r3, #15
 8000c2e:	4323      	orrs	r3, r4
 8000c30:	025b      	lsls	r3, r3, #9
 8000c32:	0a5b      	lsrs	r3, r3, #9
 8000c34:	22ff      	movs	r2, #255	; 0xff
 8000c36:	e72c      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000c38:	08008aa4 	.word	0x08008aa4
 8000c3c:	f7ffffff 	.word	0xf7ffffff

08000c40 <__aeabi_fsub>:
 8000c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c42:	4647      	mov	r7, r8
 8000c44:	46ce      	mov	lr, r9
 8000c46:	0044      	lsls	r4, r0, #1
 8000c48:	0fc2      	lsrs	r2, r0, #31
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	0247      	lsls	r7, r0, #9
 8000c4e:	0248      	lsls	r0, r1, #9
 8000c50:	0a40      	lsrs	r0, r0, #9
 8000c52:	4684      	mov	ip, r0
 8000c54:	4666      	mov	r6, ip
 8000c56:	0048      	lsls	r0, r1, #1
 8000c58:	0a7f      	lsrs	r7, r7, #9
 8000c5a:	0e24      	lsrs	r4, r4, #24
 8000c5c:	00f6      	lsls	r6, r6, #3
 8000c5e:	0025      	movs	r5, r4
 8000c60:	4690      	mov	r8, r2
 8000c62:	00fb      	lsls	r3, r7, #3
 8000c64:	0e00      	lsrs	r0, r0, #24
 8000c66:	0fc9      	lsrs	r1, r1, #31
 8000c68:	46b1      	mov	r9, r6
 8000c6a:	28ff      	cmp	r0, #255	; 0xff
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_fsub+0x30>
 8000c6e:	e085      	b.n	8000d7c <__aeabi_fsub+0x13c>
 8000c70:	2601      	movs	r6, #1
 8000c72:	4071      	eors	r1, r6
 8000c74:	1a26      	subs	r6, r4, r0
 8000c76:	4291      	cmp	r1, r2
 8000c78:	d057      	beq.n	8000d2a <__aeabi_fsub+0xea>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	dd43      	ble.n	8000d06 <__aeabi_fsub+0xc6>
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d000      	beq.n	8000c84 <__aeabi_fsub+0x44>
 8000c82:	e07f      	b.n	8000d84 <__aeabi_fsub+0x144>
 8000c84:	4649      	mov	r1, r9
 8000c86:	2900      	cmp	r1, #0
 8000c88:	d100      	bne.n	8000c8c <__aeabi_fsub+0x4c>
 8000c8a:	e0aa      	b.n	8000de2 <__aeabi_fsub+0x1a2>
 8000c8c:	3e01      	subs	r6, #1
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fsub+0x54>
 8000c92:	e0f7      	b.n	8000e84 <__aeabi_fsub+0x244>
 8000c94:	1a5b      	subs	r3, r3, r1
 8000c96:	015a      	lsls	r2, r3, #5
 8000c98:	d400      	bmi.n	8000c9c <__aeabi_fsub+0x5c>
 8000c9a:	e08b      	b.n	8000db4 <__aeabi_fsub+0x174>
 8000c9c:	019b      	lsls	r3, r3, #6
 8000c9e:	099c      	lsrs	r4, r3, #6
 8000ca0:	0020      	movs	r0, r4
 8000ca2:	f001 ffd3 	bl	8002c4c <__clzsi2>
 8000ca6:	3805      	subs	r0, #5
 8000ca8:	4084      	lsls	r4, r0
 8000caa:	4285      	cmp	r5, r0
 8000cac:	dd00      	ble.n	8000cb0 <__aeabi_fsub+0x70>
 8000cae:	e0d3      	b.n	8000e58 <__aeabi_fsub+0x218>
 8000cb0:	1b45      	subs	r5, r0, r5
 8000cb2:	0023      	movs	r3, r4
 8000cb4:	2020      	movs	r0, #32
 8000cb6:	3501      	adds	r5, #1
 8000cb8:	40eb      	lsrs	r3, r5
 8000cba:	1b45      	subs	r5, r0, r5
 8000cbc:	40ac      	lsls	r4, r5
 8000cbe:	1e62      	subs	r2, r4, #1
 8000cc0:	4194      	sbcs	r4, r2
 8000cc2:	4323      	orrs	r3, r4
 8000cc4:	2407      	movs	r4, #7
 8000cc6:	2500      	movs	r5, #0
 8000cc8:	401c      	ands	r4, r3
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4641      	mov	r1, r8
 8000cce:	400a      	ands	r2, r1
 8000cd0:	2c00      	cmp	r4, #0
 8000cd2:	d004      	beq.n	8000cde <__aeabi_fsub+0x9e>
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	4019      	ands	r1, r3
 8000cd8:	2904      	cmp	r1, #4
 8000cda:	d000      	beq.n	8000cde <__aeabi_fsub+0x9e>
 8000cdc:	3304      	adds	r3, #4
 8000cde:	0159      	lsls	r1, r3, #5
 8000ce0:	d400      	bmi.n	8000ce4 <__aeabi_fsub+0xa4>
 8000ce2:	e080      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000ce4:	3501      	adds	r5, #1
 8000ce6:	b2ec      	uxtb	r4, r5
 8000ce8:	2dff      	cmp	r5, #255	; 0xff
 8000cea:	d000      	beq.n	8000cee <__aeabi_fsub+0xae>
 8000cec:	e0a3      	b.n	8000e36 <__aeabi_fsub+0x1f6>
 8000cee:	24ff      	movs	r4, #255	; 0xff
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	025b      	lsls	r3, r3, #9
 8000cf4:	05e4      	lsls	r4, r4, #23
 8000cf6:	0a58      	lsrs	r0, r3, #9
 8000cf8:	07d2      	lsls	r2, r2, #31
 8000cfa:	4320      	orrs	r0, r4
 8000cfc:	4310      	orrs	r0, r2
 8000cfe:	bc0c      	pop	{r2, r3}
 8000d00:	4690      	mov	r8, r2
 8000d02:	4699      	mov	r9, r3
 8000d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d174      	bne.n	8000df4 <__aeabi_fsub+0x1b4>
 8000d0a:	1c60      	adds	r0, r4, #1
 8000d0c:	b2c0      	uxtb	r0, r0
 8000d0e:	2801      	cmp	r0, #1
 8000d10:	dc00      	bgt.n	8000d14 <__aeabi_fsub+0xd4>
 8000d12:	e0a7      	b.n	8000e64 <__aeabi_fsub+0x224>
 8000d14:	464a      	mov	r2, r9
 8000d16:	1a9c      	subs	r4, r3, r2
 8000d18:	0162      	lsls	r2, r4, #5
 8000d1a:	d500      	bpl.n	8000d1e <__aeabi_fsub+0xde>
 8000d1c:	e0b6      	b.n	8000e8c <__aeabi_fsub+0x24c>
 8000d1e:	2c00      	cmp	r4, #0
 8000d20:	d1be      	bne.n	8000ca0 <__aeabi_fsub+0x60>
 8000d22:	2200      	movs	r2, #0
 8000d24:	2400      	movs	r4, #0
 8000d26:	2300      	movs	r3, #0
 8000d28:	e7e3      	b.n	8000cf2 <__aeabi_fsub+0xb2>
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	dc00      	bgt.n	8000d30 <__aeabi_fsub+0xf0>
 8000d2e:	e085      	b.n	8000e3c <__aeabi_fsub+0x1fc>
 8000d30:	2800      	cmp	r0, #0
 8000d32:	d046      	beq.n	8000dc2 <__aeabi_fsub+0x182>
 8000d34:	2cff      	cmp	r4, #255	; 0xff
 8000d36:	d049      	beq.n	8000dcc <__aeabi_fsub+0x18c>
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	04d2      	lsls	r2, r2, #19
 8000d3e:	4310      	orrs	r0, r2
 8000d40:	4681      	mov	r9, r0
 8000d42:	2201      	movs	r2, #1
 8000d44:	2e1b      	cmp	r6, #27
 8000d46:	dc09      	bgt.n	8000d5c <__aeabi_fsub+0x11c>
 8000d48:	2020      	movs	r0, #32
 8000d4a:	464c      	mov	r4, r9
 8000d4c:	1b80      	subs	r0, r0, r6
 8000d4e:	4084      	lsls	r4, r0
 8000d50:	464a      	mov	r2, r9
 8000d52:	0020      	movs	r0, r4
 8000d54:	40f2      	lsrs	r2, r6
 8000d56:	1e44      	subs	r4, r0, #1
 8000d58:	41a0      	sbcs	r0, r4
 8000d5a:	4302      	orrs	r2, r0
 8000d5c:	189b      	adds	r3, r3, r2
 8000d5e:	015a      	lsls	r2, r3, #5
 8000d60:	d528      	bpl.n	8000db4 <__aeabi_fsub+0x174>
 8000d62:	3501      	adds	r5, #1
 8000d64:	2dff      	cmp	r5, #255	; 0xff
 8000d66:	d100      	bne.n	8000d6a <__aeabi_fsub+0x12a>
 8000d68:	e0a8      	b.n	8000ebc <__aeabi_fsub+0x27c>
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2407      	movs	r4, #7
 8000d6e:	4994      	ldr	r1, [pc, #592]	; (8000fc0 <__aeabi_fsub+0x380>)
 8000d70:	401a      	ands	r2, r3
 8000d72:	085b      	lsrs	r3, r3, #1
 8000d74:	400b      	ands	r3, r1
 8000d76:	4313      	orrs	r3, r2
 8000d78:	401c      	ands	r4, r3
 8000d7a:	e7a6      	b.n	8000cca <__aeabi_fsub+0x8a>
 8000d7c:	2e00      	cmp	r6, #0
 8000d7e:	d000      	beq.n	8000d82 <__aeabi_fsub+0x142>
 8000d80:	e778      	b.n	8000c74 <__aeabi_fsub+0x34>
 8000d82:	e775      	b.n	8000c70 <__aeabi_fsub+0x30>
 8000d84:	2cff      	cmp	r4, #255	; 0xff
 8000d86:	d054      	beq.n	8000e32 <__aeabi_fsub+0x1f2>
 8000d88:	2280      	movs	r2, #128	; 0x80
 8000d8a:	4649      	mov	r1, r9
 8000d8c:	04d2      	lsls	r2, r2, #19
 8000d8e:	4311      	orrs	r1, r2
 8000d90:	4689      	mov	r9, r1
 8000d92:	2201      	movs	r2, #1
 8000d94:	2e1b      	cmp	r6, #27
 8000d96:	dc09      	bgt.n	8000dac <__aeabi_fsub+0x16c>
 8000d98:	2120      	movs	r1, #32
 8000d9a:	4648      	mov	r0, r9
 8000d9c:	1b89      	subs	r1, r1, r6
 8000d9e:	4088      	lsls	r0, r1
 8000da0:	464a      	mov	r2, r9
 8000da2:	0001      	movs	r1, r0
 8000da4:	40f2      	lsrs	r2, r6
 8000da6:	1e48      	subs	r0, r1, #1
 8000da8:	4181      	sbcs	r1, r0
 8000daa:	430a      	orrs	r2, r1
 8000dac:	1a9b      	subs	r3, r3, r2
 8000dae:	015a      	lsls	r2, r3, #5
 8000db0:	d500      	bpl.n	8000db4 <__aeabi_fsub+0x174>
 8000db2:	e773      	b.n	8000c9c <__aeabi_fsub+0x5c>
 8000db4:	2201      	movs	r2, #1
 8000db6:	4641      	mov	r1, r8
 8000db8:	400a      	ands	r2, r1
 8000dba:	0759      	lsls	r1, r3, #29
 8000dbc:	d000      	beq.n	8000dc0 <__aeabi_fsub+0x180>
 8000dbe:	e789      	b.n	8000cd4 <__aeabi_fsub+0x94>
 8000dc0:	e011      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000dc2:	4648      	mov	r0, r9
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	d158      	bne.n	8000e7a <__aeabi_fsub+0x23a>
 8000dc8:	2cff      	cmp	r4, #255	; 0xff
 8000dca:	d10c      	bne.n	8000de6 <__aeabi_fsub+0x1a6>
 8000dcc:	08db      	lsrs	r3, r3, #3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x194>
 8000dd2:	e78c      	b.n	8000cee <__aeabi_fsub+0xae>
 8000dd4:	2080      	movs	r0, #128	; 0x80
 8000dd6:	03c0      	lsls	r0, r0, #15
 8000dd8:	4303      	orrs	r3, r0
 8000dda:	025b      	lsls	r3, r3, #9
 8000ddc:	0a5b      	lsrs	r3, r3, #9
 8000dde:	24ff      	movs	r4, #255	; 0xff
 8000de0:	e787      	b.n	8000cf2 <__aeabi_fsub+0xb2>
 8000de2:	2cff      	cmp	r4, #255	; 0xff
 8000de4:	d025      	beq.n	8000e32 <__aeabi_fsub+0x1f2>
 8000de6:	08db      	lsrs	r3, r3, #3
 8000de8:	2dff      	cmp	r5, #255	; 0xff
 8000dea:	d0f0      	beq.n	8000dce <__aeabi_fsub+0x18e>
 8000dec:	025b      	lsls	r3, r3, #9
 8000dee:	0a5b      	lsrs	r3, r3, #9
 8000df0:	b2ec      	uxtb	r4, r5
 8000df2:	e77e      	b.n	8000cf2 <__aeabi_fsub+0xb2>
 8000df4:	2c00      	cmp	r4, #0
 8000df6:	d04d      	beq.n	8000e94 <__aeabi_fsub+0x254>
 8000df8:	28ff      	cmp	r0, #255	; 0xff
 8000dfa:	d018      	beq.n	8000e2e <__aeabi_fsub+0x1ee>
 8000dfc:	2480      	movs	r4, #128	; 0x80
 8000dfe:	04e4      	lsls	r4, r4, #19
 8000e00:	4272      	negs	r2, r6
 8000e02:	4323      	orrs	r3, r4
 8000e04:	2a1b      	cmp	r2, #27
 8000e06:	dd00      	ble.n	8000e0a <__aeabi_fsub+0x1ca>
 8000e08:	e0c4      	b.n	8000f94 <__aeabi_fsub+0x354>
 8000e0a:	001c      	movs	r4, r3
 8000e0c:	2520      	movs	r5, #32
 8000e0e:	40d4      	lsrs	r4, r2
 8000e10:	1aaa      	subs	r2, r5, r2
 8000e12:	4093      	lsls	r3, r2
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	4193      	sbcs	r3, r2
 8000e18:	4323      	orrs	r3, r4
 8000e1a:	464a      	mov	r2, r9
 8000e1c:	0005      	movs	r5, r0
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	4688      	mov	r8, r1
 8000e22:	e738      	b.n	8000c96 <__aeabi_fsub+0x56>
 8000e24:	1c72      	adds	r2, r6, #1
 8000e26:	d0f8      	beq.n	8000e1a <__aeabi_fsub+0x1da>
 8000e28:	43f2      	mvns	r2, r6
 8000e2a:	28ff      	cmp	r0, #255	; 0xff
 8000e2c:	d1ea      	bne.n	8000e04 <__aeabi_fsub+0x1c4>
 8000e2e:	000a      	movs	r2, r1
 8000e30:	464b      	mov	r3, r9
 8000e32:	25ff      	movs	r5, #255	; 0xff
 8000e34:	e7d7      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000e36:	019b      	lsls	r3, r3, #6
 8000e38:	0a5b      	lsrs	r3, r3, #9
 8000e3a:	e75a      	b.n	8000cf2 <__aeabi_fsub+0xb2>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d141      	bne.n	8000ec4 <__aeabi_fsub+0x284>
 8000e40:	1c65      	adds	r5, r4, #1
 8000e42:	b2e9      	uxtb	r1, r5
 8000e44:	2901      	cmp	r1, #1
 8000e46:	dd45      	ble.n	8000ed4 <__aeabi_fsub+0x294>
 8000e48:	2dff      	cmp	r5, #255	; 0xff
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_fsub+0x20e>
 8000e4c:	e74f      	b.n	8000cee <__aeabi_fsub+0xae>
 8000e4e:	2407      	movs	r4, #7
 8000e50:	444b      	add	r3, r9
 8000e52:	085b      	lsrs	r3, r3, #1
 8000e54:	401c      	ands	r4, r3
 8000e56:	e738      	b.n	8000cca <__aeabi_fsub+0x8a>
 8000e58:	2207      	movs	r2, #7
 8000e5a:	4b5a      	ldr	r3, [pc, #360]	; (8000fc4 <__aeabi_fsub+0x384>)
 8000e5c:	1a2d      	subs	r5, r5, r0
 8000e5e:	4023      	ands	r3, r4
 8000e60:	4014      	ands	r4, r2
 8000e62:	e732      	b.n	8000cca <__aeabi_fsub+0x8a>
 8000e64:	2c00      	cmp	r4, #0
 8000e66:	d11d      	bne.n	8000ea4 <__aeabi_fsub+0x264>
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d17a      	bne.n	8000f62 <__aeabi_fsub+0x322>
 8000e6c:	464b      	mov	r3, r9
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d100      	bne.n	8000e74 <__aeabi_fsub+0x234>
 8000e72:	e091      	b.n	8000f98 <__aeabi_fsub+0x358>
 8000e74:	000a      	movs	r2, r1
 8000e76:	2500      	movs	r5, #0
 8000e78:	e7b5      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000e7a:	3e01      	subs	r6, #1
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d119      	bne.n	8000eb4 <__aeabi_fsub+0x274>
 8000e80:	444b      	add	r3, r9
 8000e82:	e76c      	b.n	8000d5e <__aeabi_fsub+0x11e>
 8000e84:	2cff      	cmp	r4, #255	; 0xff
 8000e86:	d184      	bne.n	8000d92 <__aeabi_fsub+0x152>
 8000e88:	25ff      	movs	r5, #255	; 0xff
 8000e8a:	e7ac      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000e8c:	464a      	mov	r2, r9
 8000e8e:	4688      	mov	r8, r1
 8000e90:	1ad4      	subs	r4, r2, r3
 8000e92:	e705      	b.n	8000ca0 <__aeabi_fsub+0x60>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1c5      	bne.n	8000e24 <__aeabi_fsub+0x1e4>
 8000e98:	000a      	movs	r2, r1
 8000e9a:	28ff      	cmp	r0, #255	; 0xff
 8000e9c:	d0c8      	beq.n	8000e30 <__aeabi_fsub+0x1f0>
 8000e9e:	0005      	movs	r5, r0
 8000ea0:	464b      	mov	r3, r9
 8000ea2:	e7a0      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d149      	bne.n	8000f3c <__aeabi_fsub+0x2fc>
 8000ea8:	464b      	mov	r3, r9
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d077      	beq.n	8000f9e <__aeabi_fsub+0x35e>
 8000eae:	000a      	movs	r2, r1
 8000eb0:	25ff      	movs	r5, #255	; 0xff
 8000eb2:	e798      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000eb4:	2cff      	cmp	r4, #255	; 0xff
 8000eb6:	d000      	beq.n	8000eba <__aeabi_fsub+0x27a>
 8000eb8:	e743      	b.n	8000d42 <__aeabi_fsub+0x102>
 8000eba:	e787      	b.n	8000dcc <__aeabi_fsub+0x18c>
 8000ebc:	000a      	movs	r2, r1
 8000ebe:	24ff      	movs	r4, #255	; 0xff
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e716      	b.n	8000cf2 <__aeabi_fsub+0xb2>
 8000ec4:	2c00      	cmp	r4, #0
 8000ec6:	d115      	bne.n	8000ef4 <__aeabi_fsub+0x2b4>
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d157      	bne.n	8000f7c <__aeabi_fsub+0x33c>
 8000ecc:	28ff      	cmp	r0, #255	; 0xff
 8000ece:	d1e6      	bne.n	8000e9e <__aeabi_fsub+0x25e>
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	e77b      	b.n	8000dcc <__aeabi_fsub+0x18c>
 8000ed4:	2c00      	cmp	r4, #0
 8000ed6:	d120      	bne.n	8000f1a <__aeabi_fsub+0x2da>
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d057      	beq.n	8000f8c <__aeabi_fsub+0x34c>
 8000edc:	4649      	mov	r1, r9
 8000ede:	2900      	cmp	r1, #0
 8000ee0:	d053      	beq.n	8000f8a <__aeabi_fsub+0x34a>
 8000ee2:	444b      	add	r3, r9
 8000ee4:	015a      	lsls	r2, r3, #5
 8000ee6:	d568      	bpl.n	8000fba <__aeabi_fsub+0x37a>
 8000ee8:	2407      	movs	r4, #7
 8000eea:	4a36      	ldr	r2, [pc, #216]	; (8000fc4 <__aeabi_fsub+0x384>)
 8000eec:	401c      	ands	r4, r3
 8000eee:	2501      	movs	r5, #1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	e6ea      	b.n	8000cca <__aeabi_fsub+0x8a>
 8000ef4:	28ff      	cmp	r0, #255	; 0xff
 8000ef6:	d0eb      	beq.n	8000ed0 <__aeabi_fsub+0x290>
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	04d2      	lsls	r2, r2, #19
 8000efc:	4276      	negs	r6, r6
 8000efe:	4313      	orrs	r3, r2
 8000f00:	2e1b      	cmp	r6, #27
 8000f02:	dc53      	bgt.n	8000fac <__aeabi_fsub+0x36c>
 8000f04:	2520      	movs	r5, #32
 8000f06:	1bad      	subs	r5, r5, r6
 8000f08:	001a      	movs	r2, r3
 8000f0a:	40ab      	lsls	r3, r5
 8000f0c:	40f2      	lsrs	r2, r6
 8000f0e:	1e5c      	subs	r4, r3, #1
 8000f10:	41a3      	sbcs	r3, r4
 8000f12:	4313      	orrs	r3, r2
 8000f14:	444b      	add	r3, r9
 8000f16:	0005      	movs	r5, r0
 8000f18:	e721      	b.n	8000d5e <__aeabi_fsub+0x11e>
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0d8      	beq.n	8000ed0 <__aeabi_fsub+0x290>
 8000f1e:	4649      	mov	r1, r9
 8000f20:	2900      	cmp	r1, #0
 8000f22:	d100      	bne.n	8000f26 <__aeabi_fsub+0x2e6>
 8000f24:	e752      	b.n	8000dcc <__aeabi_fsub+0x18c>
 8000f26:	2180      	movs	r1, #128	; 0x80
 8000f28:	03c9      	lsls	r1, r1, #15
 8000f2a:	420f      	tst	r7, r1
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fsub+0x2f0>
 8000f2e:	e74d      	b.n	8000dcc <__aeabi_fsub+0x18c>
 8000f30:	4660      	mov	r0, ip
 8000f32:	4208      	tst	r0, r1
 8000f34:	d000      	beq.n	8000f38 <__aeabi_fsub+0x2f8>
 8000f36:	e749      	b.n	8000dcc <__aeabi_fsub+0x18c>
 8000f38:	464b      	mov	r3, r9
 8000f3a:	e747      	b.n	8000dcc <__aeabi_fsub+0x18c>
 8000f3c:	4648      	mov	r0, r9
 8000f3e:	25ff      	movs	r5, #255	; 0xff
 8000f40:	2800      	cmp	r0, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_fsub+0x306>
 8000f44:	e74f      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	03d2      	lsls	r2, r2, #15
 8000f4a:	4217      	tst	r7, r2
 8000f4c:	d004      	beq.n	8000f58 <__aeabi_fsub+0x318>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	4210      	tst	r0, r2
 8000f52:	d101      	bne.n	8000f58 <__aeabi_fsub+0x318>
 8000f54:	464b      	mov	r3, r9
 8000f56:	4688      	mov	r8, r1
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4641      	mov	r1, r8
 8000f5c:	25ff      	movs	r5, #255	; 0xff
 8000f5e:	400a      	ands	r2, r1
 8000f60:	e741      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000f62:	4648      	mov	r0, r9
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d01f      	beq.n	8000fa8 <__aeabi_fsub+0x368>
 8000f68:	1a1a      	subs	r2, r3, r0
 8000f6a:	0150      	lsls	r0, r2, #5
 8000f6c:	d520      	bpl.n	8000fb0 <__aeabi_fsub+0x370>
 8000f6e:	464a      	mov	r2, r9
 8000f70:	2407      	movs	r4, #7
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	401c      	ands	r4, r3
 8000f76:	4688      	mov	r8, r1
 8000f78:	2500      	movs	r5, #0
 8000f7a:	e6a6      	b.n	8000cca <__aeabi_fsub+0x8a>
 8000f7c:	1c74      	adds	r4, r6, #1
 8000f7e:	d0c9      	beq.n	8000f14 <__aeabi_fsub+0x2d4>
 8000f80:	43f6      	mvns	r6, r6
 8000f82:	28ff      	cmp	r0, #255	; 0xff
 8000f84:	d1bc      	bne.n	8000f00 <__aeabi_fsub+0x2c0>
 8000f86:	464b      	mov	r3, r9
 8000f88:	e720      	b.n	8000dcc <__aeabi_fsub+0x18c>
 8000f8a:	4699      	mov	r9, r3
 8000f8c:	464b      	mov	r3, r9
 8000f8e:	2500      	movs	r5, #0
 8000f90:	08db      	lsrs	r3, r3, #3
 8000f92:	e72b      	b.n	8000dec <__aeabi_fsub+0x1ac>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e740      	b.n	8000e1a <__aeabi_fsub+0x1da>
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e6a9      	b.n	8000cf2 <__aeabi_fsub+0xb2>
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	03db      	lsls	r3, r3, #15
 8000fa4:	24ff      	movs	r4, #255	; 0xff
 8000fa6:	e6a4      	b.n	8000cf2 <__aeabi_fsub+0xb2>
 8000fa8:	2500      	movs	r5, #0
 8000faa:	e71c      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000fac:	2301      	movs	r3, #1
 8000fae:	e7b1      	b.n	8000f14 <__aeabi_fsub+0x2d4>
 8000fb0:	2a00      	cmp	r2, #0
 8000fb2:	d0f1      	beq.n	8000f98 <__aeabi_fsub+0x358>
 8000fb4:	0013      	movs	r3, r2
 8000fb6:	2500      	movs	r5, #0
 8000fb8:	e6fc      	b.n	8000db4 <__aeabi_fsub+0x174>
 8000fba:	2500      	movs	r5, #0
 8000fbc:	e6fa      	b.n	8000db4 <__aeabi_fsub+0x174>
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	7dffffff 	.word	0x7dffffff
 8000fc4:	fbffffff 	.word	0xfbffffff

08000fc8 <__aeabi_dadd>:
 8000fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fca:	464f      	mov	r7, r9
 8000fcc:	4646      	mov	r6, r8
 8000fce:	46d6      	mov	lr, sl
 8000fd0:	000c      	movs	r4, r1
 8000fd2:	0309      	lsls	r1, r1, #12
 8000fd4:	b5c0      	push	{r6, r7, lr}
 8000fd6:	0a49      	lsrs	r1, r1, #9
 8000fd8:	0f47      	lsrs	r7, r0, #29
 8000fda:	005e      	lsls	r6, r3, #1
 8000fdc:	4339      	orrs	r1, r7
 8000fde:	031f      	lsls	r7, r3, #12
 8000fe0:	0fdb      	lsrs	r3, r3, #31
 8000fe2:	469c      	mov	ip, r3
 8000fe4:	0065      	lsls	r5, r4, #1
 8000fe6:	0a7b      	lsrs	r3, r7, #9
 8000fe8:	0f57      	lsrs	r7, r2, #29
 8000fea:	431f      	orrs	r7, r3
 8000fec:	0d6d      	lsrs	r5, r5, #21
 8000fee:	0fe4      	lsrs	r4, r4, #31
 8000ff0:	0d76      	lsrs	r6, r6, #21
 8000ff2:	46a1      	mov	r9, r4
 8000ff4:	00c0      	lsls	r0, r0, #3
 8000ff6:	46b8      	mov	r8, r7
 8000ff8:	00d2      	lsls	r2, r2, #3
 8000ffa:	1bab      	subs	r3, r5, r6
 8000ffc:	4564      	cmp	r4, ip
 8000ffe:	d07b      	beq.n	80010f8 <__aeabi_dadd+0x130>
 8001000:	2b00      	cmp	r3, #0
 8001002:	dd5f      	ble.n	80010c4 <__aeabi_dadd+0xfc>
 8001004:	2e00      	cmp	r6, #0
 8001006:	d000      	beq.n	800100a <__aeabi_dadd+0x42>
 8001008:	e0a4      	b.n	8001154 <__aeabi_dadd+0x18c>
 800100a:	003e      	movs	r6, r7
 800100c:	4316      	orrs	r6, r2
 800100e:	d100      	bne.n	8001012 <__aeabi_dadd+0x4a>
 8001010:	e112      	b.n	8001238 <__aeabi_dadd+0x270>
 8001012:	1e5e      	subs	r6, r3, #1
 8001014:	2e00      	cmp	r6, #0
 8001016:	d000      	beq.n	800101a <__aeabi_dadd+0x52>
 8001018:	e19e      	b.n	8001358 <__aeabi_dadd+0x390>
 800101a:	1a87      	subs	r7, r0, r2
 800101c:	4643      	mov	r3, r8
 800101e:	42b8      	cmp	r0, r7
 8001020:	4180      	sbcs	r0, r0
 8001022:	2501      	movs	r5, #1
 8001024:	1ac9      	subs	r1, r1, r3
 8001026:	4240      	negs	r0, r0
 8001028:	1a09      	subs	r1, r1, r0
 800102a:	020b      	lsls	r3, r1, #8
 800102c:	d400      	bmi.n	8001030 <__aeabi_dadd+0x68>
 800102e:	e131      	b.n	8001294 <__aeabi_dadd+0x2cc>
 8001030:	0249      	lsls	r1, r1, #9
 8001032:	0a4e      	lsrs	r6, r1, #9
 8001034:	2e00      	cmp	r6, #0
 8001036:	d100      	bne.n	800103a <__aeabi_dadd+0x72>
 8001038:	e16e      	b.n	8001318 <__aeabi_dadd+0x350>
 800103a:	0030      	movs	r0, r6
 800103c:	f001 fe06 	bl	8002c4c <__clzsi2>
 8001040:	0003      	movs	r3, r0
 8001042:	3b08      	subs	r3, #8
 8001044:	2b1f      	cmp	r3, #31
 8001046:	dd00      	ble.n	800104a <__aeabi_dadd+0x82>
 8001048:	e161      	b.n	800130e <__aeabi_dadd+0x346>
 800104a:	2220      	movs	r2, #32
 800104c:	0039      	movs	r1, r7
 800104e:	1ad2      	subs	r2, r2, r3
 8001050:	409e      	lsls	r6, r3
 8001052:	40d1      	lsrs	r1, r2
 8001054:	409f      	lsls	r7, r3
 8001056:	430e      	orrs	r6, r1
 8001058:	429d      	cmp	r5, r3
 800105a:	dd00      	ble.n	800105e <__aeabi_dadd+0x96>
 800105c:	e151      	b.n	8001302 <__aeabi_dadd+0x33a>
 800105e:	1b5d      	subs	r5, r3, r5
 8001060:	1c6b      	adds	r3, r5, #1
 8001062:	2b1f      	cmp	r3, #31
 8001064:	dd00      	ble.n	8001068 <__aeabi_dadd+0xa0>
 8001066:	e17c      	b.n	8001362 <__aeabi_dadd+0x39a>
 8001068:	2120      	movs	r1, #32
 800106a:	1ac9      	subs	r1, r1, r3
 800106c:	003d      	movs	r5, r7
 800106e:	0030      	movs	r0, r6
 8001070:	408f      	lsls	r7, r1
 8001072:	4088      	lsls	r0, r1
 8001074:	40dd      	lsrs	r5, r3
 8001076:	1e79      	subs	r1, r7, #1
 8001078:	418f      	sbcs	r7, r1
 800107a:	0031      	movs	r1, r6
 800107c:	2207      	movs	r2, #7
 800107e:	4328      	orrs	r0, r5
 8001080:	40d9      	lsrs	r1, r3
 8001082:	2500      	movs	r5, #0
 8001084:	4307      	orrs	r7, r0
 8001086:	403a      	ands	r2, r7
 8001088:	2a00      	cmp	r2, #0
 800108a:	d009      	beq.n	80010a0 <__aeabi_dadd+0xd8>
 800108c:	230f      	movs	r3, #15
 800108e:	403b      	ands	r3, r7
 8001090:	2b04      	cmp	r3, #4
 8001092:	d005      	beq.n	80010a0 <__aeabi_dadd+0xd8>
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	42bb      	cmp	r3, r7
 8001098:	41bf      	sbcs	r7, r7
 800109a:	427f      	negs	r7, r7
 800109c:	19c9      	adds	r1, r1, r7
 800109e:	001f      	movs	r7, r3
 80010a0:	020b      	lsls	r3, r1, #8
 80010a2:	d400      	bmi.n	80010a6 <__aeabi_dadd+0xde>
 80010a4:	e226      	b.n	80014f4 <__aeabi_dadd+0x52c>
 80010a6:	1c6a      	adds	r2, r5, #1
 80010a8:	4bc6      	ldr	r3, [pc, #792]	; (80013c4 <__aeabi_dadd+0x3fc>)
 80010aa:	0555      	lsls	r5, r2, #21
 80010ac:	0d6d      	lsrs	r5, r5, #21
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d100      	bne.n	80010b4 <__aeabi_dadd+0xec>
 80010b2:	e106      	b.n	80012c2 <__aeabi_dadd+0x2fa>
 80010b4:	4ac4      	ldr	r2, [pc, #784]	; (80013c8 <__aeabi_dadd+0x400>)
 80010b6:	08ff      	lsrs	r7, r7, #3
 80010b8:	400a      	ands	r2, r1
 80010ba:	0753      	lsls	r3, r2, #29
 80010bc:	0252      	lsls	r2, r2, #9
 80010be:	433b      	orrs	r3, r7
 80010c0:	0b12      	lsrs	r2, r2, #12
 80010c2:	e08e      	b.n	80011e2 <__aeabi_dadd+0x21a>
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d000      	beq.n	80010ca <__aeabi_dadd+0x102>
 80010c8:	e0b8      	b.n	800123c <__aeabi_dadd+0x274>
 80010ca:	1c6b      	adds	r3, r5, #1
 80010cc:	055b      	lsls	r3, r3, #21
 80010ce:	0d5b      	lsrs	r3, r3, #21
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_dadd+0x10e>
 80010d4:	e130      	b.n	8001338 <__aeabi_dadd+0x370>
 80010d6:	1a87      	subs	r7, r0, r2
 80010d8:	4643      	mov	r3, r8
 80010da:	42b8      	cmp	r0, r7
 80010dc:	41b6      	sbcs	r6, r6
 80010de:	1acb      	subs	r3, r1, r3
 80010e0:	4276      	negs	r6, r6
 80010e2:	1b9e      	subs	r6, r3, r6
 80010e4:	0233      	lsls	r3, r6, #8
 80010e6:	d500      	bpl.n	80010ea <__aeabi_dadd+0x122>
 80010e8:	e14c      	b.n	8001384 <__aeabi_dadd+0x3bc>
 80010ea:	003b      	movs	r3, r7
 80010ec:	4333      	orrs	r3, r6
 80010ee:	d1a1      	bne.n	8001034 <__aeabi_dadd+0x6c>
 80010f0:	2200      	movs	r2, #0
 80010f2:	2400      	movs	r4, #0
 80010f4:	2500      	movs	r5, #0
 80010f6:	e070      	b.n	80011da <__aeabi_dadd+0x212>
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	dc00      	bgt.n	80010fe <__aeabi_dadd+0x136>
 80010fc:	e0e5      	b.n	80012ca <__aeabi_dadd+0x302>
 80010fe:	2e00      	cmp	r6, #0
 8001100:	d100      	bne.n	8001104 <__aeabi_dadd+0x13c>
 8001102:	e083      	b.n	800120c <__aeabi_dadd+0x244>
 8001104:	4eaf      	ldr	r6, [pc, #700]	; (80013c4 <__aeabi_dadd+0x3fc>)
 8001106:	42b5      	cmp	r5, r6
 8001108:	d060      	beq.n	80011cc <__aeabi_dadd+0x204>
 800110a:	2680      	movs	r6, #128	; 0x80
 800110c:	0436      	lsls	r6, r6, #16
 800110e:	4337      	orrs	r7, r6
 8001110:	46b8      	mov	r8, r7
 8001112:	2b38      	cmp	r3, #56	; 0x38
 8001114:	dc00      	bgt.n	8001118 <__aeabi_dadd+0x150>
 8001116:	e13e      	b.n	8001396 <__aeabi_dadd+0x3ce>
 8001118:	4643      	mov	r3, r8
 800111a:	4313      	orrs	r3, r2
 800111c:	001f      	movs	r7, r3
 800111e:	1e7a      	subs	r2, r7, #1
 8001120:	4197      	sbcs	r7, r2
 8001122:	183f      	adds	r7, r7, r0
 8001124:	4287      	cmp	r7, r0
 8001126:	4180      	sbcs	r0, r0
 8001128:	4240      	negs	r0, r0
 800112a:	1809      	adds	r1, r1, r0
 800112c:	020b      	lsls	r3, r1, #8
 800112e:	d400      	bmi.n	8001132 <__aeabi_dadd+0x16a>
 8001130:	e0b0      	b.n	8001294 <__aeabi_dadd+0x2cc>
 8001132:	4ba4      	ldr	r3, [pc, #656]	; (80013c4 <__aeabi_dadd+0x3fc>)
 8001134:	3501      	adds	r5, #1
 8001136:	429d      	cmp	r5, r3
 8001138:	d100      	bne.n	800113c <__aeabi_dadd+0x174>
 800113a:	e0c3      	b.n	80012c4 <__aeabi_dadd+0x2fc>
 800113c:	4aa2      	ldr	r2, [pc, #648]	; (80013c8 <__aeabi_dadd+0x400>)
 800113e:	087b      	lsrs	r3, r7, #1
 8001140:	400a      	ands	r2, r1
 8001142:	2101      	movs	r1, #1
 8001144:	400f      	ands	r7, r1
 8001146:	431f      	orrs	r7, r3
 8001148:	0851      	lsrs	r1, r2, #1
 800114a:	07d3      	lsls	r3, r2, #31
 800114c:	2207      	movs	r2, #7
 800114e:	431f      	orrs	r7, r3
 8001150:	403a      	ands	r2, r7
 8001152:	e799      	b.n	8001088 <__aeabi_dadd+0xc0>
 8001154:	4e9b      	ldr	r6, [pc, #620]	; (80013c4 <__aeabi_dadd+0x3fc>)
 8001156:	42b5      	cmp	r5, r6
 8001158:	d038      	beq.n	80011cc <__aeabi_dadd+0x204>
 800115a:	2680      	movs	r6, #128	; 0x80
 800115c:	0436      	lsls	r6, r6, #16
 800115e:	4337      	orrs	r7, r6
 8001160:	46b8      	mov	r8, r7
 8001162:	2b38      	cmp	r3, #56	; 0x38
 8001164:	dd00      	ble.n	8001168 <__aeabi_dadd+0x1a0>
 8001166:	e0dc      	b.n	8001322 <__aeabi_dadd+0x35a>
 8001168:	2b1f      	cmp	r3, #31
 800116a:	dc00      	bgt.n	800116e <__aeabi_dadd+0x1a6>
 800116c:	e130      	b.n	80013d0 <__aeabi_dadd+0x408>
 800116e:	001e      	movs	r6, r3
 8001170:	4647      	mov	r7, r8
 8001172:	3e20      	subs	r6, #32
 8001174:	40f7      	lsrs	r7, r6
 8001176:	46bc      	mov	ip, r7
 8001178:	2b20      	cmp	r3, #32
 800117a:	d004      	beq.n	8001186 <__aeabi_dadd+0x1be>
 800117c:	2640      	movs	r6, #64	; 0x40
 800117e:	1af3      	subs	r3, r6, r3
 8001180:	4646      	mov	r6, r8
 8001182:	409e      	lsls	r6, r3
 8001184:	4332      	orrs	r2, r6
 8001186:	0017      	movs	r7, r2
 8001188:	4663      	mov	r3, ip
 800118a:	1e7a      	subs	r2, r7, #1
 800118c:	4197      	sbcs	r7, r2
 800118e:	431f      	orrs	r7, r3
 8001190:	e0cc      	b.n	800132c <__aeabi_dadd+0x364>
 8001192:	2b00      	cmp	r3, #0
 8001194:	d100      	bne.n	8001198 <__aeabi_dadd+0x1d0>
 8001196:	e204      	b.n	80015a2 <__aeabi_dadd+0x5da>
 8001198:	4643      	mov	r3, r8
 800119a:	4313      	orrs	r3, r2
 800119c:	d100      	bne.n	80011a0 <__aeabi_dadd+0x1d8>
 800119e:	e159      	b.n	8001454 <__aeabi_dadd+0x48c>
 80011a0:	074b      	lsls	r3, r1, #29
 80011a2:	08c0      	lsrs	r0, r0, #3
 80011a4:	4318      	orrs	r0, r3
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	08c9      	lsrs	r1, r1, #3
 80011aa:	031b      	lsls	r3, r3, #12
 80011ac:	4219      	tst	r1, r3
 80011ae:	d008      	beq.n	80011c2 <__aeabi_dadd+0x1fa>
 80011b0:	4645      	mov	r5, r8
 80011b2:	08ed      	lsrs	r5, r5, #3
 80011b4:	421d      	tst	r5, r3
 80011b6:	d104      	bne.n	80011c2 <__aeabi_dadd+0x1fa>
 80011b8:	4643      	mov	r3, r8
 80011ba:	08d0      	lsrs	r0, r2, #3
 80011bc:	0759      	lsls	r1, r3, #29
 80011be:	4308      	orrs	r0, r1
 80011c0:	0029      	movs	r1, r5
 80011c2:	0f42      	lsrs	r2, r0, #29
 80011c4:	00c9      	lsls	r1, r1, #3
 80011c6:	4d7f      	ldr	r5, [pc, #508]	; (80013c4 <__aeabi_dadd+0x3fc>)
 80011c8:	4311      	orrs	r1, r2
 80011ca:	00c0      	lsls	r0, r0, #3
 80011cc:	074b      	lsls	r3, r1, #29
 80011ce:	08ca      	lsrs	r2, r1, #3
 80011d0:	497c      	ldr	r1, [pc, #496]	; (80013c4 <__aeabi_dadd+0x3fc>)
 80011d2:	08c0      	lsrs	r0, r0, #3
 80011d4:	4303      	orrs	r3, r0
 80011d6:	428d      	cmp	r5, r1
 80011d8:	d068      	beq.n	80012ac <__aeabi_dadd+0x2e4>
 80011da:	0312      	lsls	r2, r2, #12
 80011dc:	056d      	lsls	r5, r5, #21
 80011de:	0b12      	lsrs	r2, r2, #12
 80011e0:	0d6d      	lsrs	r5, r5, #21
 80011e2:	2100      	movs	r1, #0
 80011e4:	0312      	lsls	r2, r2, #12
 80011e6:	0018      	movs	r0, r3
 80011e8:	0b13      	lsrs	r3, r2, #12
 80011ea:	0d0a      	lsrs	r2, r1, #20
 80011ec:	0512      	lsls	r2, r2, #20
 80011ee:	431a      	orrs	r2, r3
 80011f0:	4b76      	ldr	r3, [pc, #472]	; (80013cc <__aeabi_dadd+0x404>)
 80011f2:	052d      	lsls	r5, r5, #20
 80011f4:	4013      	ands	r3, r2
 80011f6:	432b      	orrs	r3, r5
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	07e4      	lsls	r4, r4, #31
 80011fc:	085b      	lsrs	r3, r3, #1
 80011fe:	4323      	orrs	r3, r4
 8001200:	0019      	movs	r1, r3
 8001202:	bc1c      	pop	{r2, r3, r4}
 8001204:	4690      	mov	r8, r2
 8001206:	4699      	mov	r9, r3
 8001208:	46a2      	mov	sl, r4
 800120a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800120c:	003e      	movs	r6, r7
 800120e:	4316      	orrs	r6, r2
 8001210:	d012      	beq.n	8001238 <__aeabi_dadd+0x270>
 8001212:	1e5e      	subs	r6, r3, #1
 8001214:	2e00      	cmp	r6, #0
 8001216:	d000      	beq.n	800121a <__aeabi_dadd+0x252>
 8001218:	e100      	b.n	800141c <__aeabi_dadd+0x454>
 800121a:	1887      	adds	r7, r0, r2
 800121c:	4287      	cmp	r7, r0
 800121e:	4180      	sbcs	r0, r0
 8001220:	4441      	add	r1, r8
 8001222:	4240      	negs	r0, r0
 8001224:	1809      	adds	r1, r1, r0
 8001226:	2501      	movs	r5, #1
 8001228:	020b      	lsls	r3, r1, #8
 800122a:	d533      	bpl.n	8001294 <__aeabi_dadd+0x2cc>
 800122c:	2502      	movs	r5, #2
 800122e:	e785      	b.n	800113c <__aeabi_dadd+0x174>
 8001230:	4664      	mov	r4, ip
 8001232:	0033      	movs	r3, r6
 8001234:	4641      	mov	r1, r8
 8001236:	0010      	movs	r0, r2
 8001238:	001d      	movs	r5, r3
 800123a:	e7c7      	b.n	80011cc <__aeabi_dadd+0x204>
 800123c:	2d00      	cmp	r5, #0
 800123e:	d000      	beq.n	8001242 <__aeabi_dadd+0x27a>
 8001240:	e0da      	b.n	80013f8 <__aeabi_dadd+0x430>
 8001242:	000c      	movs	r4, r1
 8001244:	4304      	orrs	r4, r0
 8001246:	d0f3      	beq.n	8001230 <__aeabi_dadd+0x268>
 8001248:	1c5c      	adds	r4, r3, #1
 800124a:	d100      	bne.n	800124e <__aeabi_dadd+0x286>
 800124c:	e19f      	b.n	800158e <__aeabi_dadd+0x5c6>
 800124e:	4c5d      	ldr	r4, [pc, #372]	; (80013c4 <__aeabi_dadd+0x3fc>)
 8001250:	42a6      	cmp	r6, r4
 8001252:	d100      	bne.n	8001256 <__aeabi_dadd+0x28e>
 8001254:	e12f      	b.n	80014b6 <__aeabi_dadd+0x4ee>
 8001256:	43db      	mvns	r3, r3
 8001258:	2b38      	cmp	r3, #56	; 0x38
 800125a:	dd00      	ble.n	800125e <__aeabi_dadd+0x296>
 800125c:	e166      	b.n	800152c <__aeabi_dadd+0x564>
 800125e:	2b1f      	cmp	r3, #31
 8001260:	dd00      	ble.n	8001264 <__aeabi_dadd+0x29c>
 8001262:	e183      	b.n	800156c <__aeabi_dadd+0x5a4>
 8001264:	2420      	movs	r4, #32
 8001266:	0005      	movs	r5, r0
 8001268:	1ae4      	subs	r4, r4, r3
 800126a:	000f      	movs	r7, r1
 800126c:	40dd      	lsrs	r5, r3
 800126e:	40d9      	lsrs	r1, r3
 8001270:	40a0      	lsls	r0, r4
 8001272:	4643      	mov	r3, r8
 8001274:	40a7      	lsls	r7, r4
 8001276:	1a5b      	subs	r3, r3, r1
 8001278:	1e44      	subs	r4, r0, #1
 800127a:	41a0      	sbcs	r0, r4
 800127c:	4698      	mov	r8, r3
 800127e:	432f      	orrs	r7, r5
 8001280:	4338      	orrs	r0, r7
 8001282:	1a17      	subs	r7, r2, r0
 8001284:	42ba      	cmp	r2, r7
 8001286:	4192      	sbcs	r2, r2
 8001288:	4643      	mov	r3, r8
 800128a:	4252      	negs	r2, r2
 800128c:	1a99      	subs	r1, r3, r2
 800128e:	4664      	mov	r4, ip
 8001290:	0035      	movs	r5, r6
 8001292:	e6ca      	b.n	800102a <__aeabi_dadd+0x62>
 8001294:	2207      	movs	r2, #7
 8001296:	403a      	ands	r2, r7
 8001298:	2a00      	cmp	r2, #0
 800129a:	d000      	beq.n	800129e <__aeabi_dadd+0x2d6>
 800129c:	e6f6      	b.n	800108c <__aeabi_dadd+0xc4>
 800129e:	074b      	lsls	r3, r1, #29
 80012a0:	08ca      	lsrs	r2, r1, #3
 80012a2:	4948      	ldr	r1, [pc, #288]	; (80013c4 <__aeabi_dadd+0x3fc>)
 80012a4:	08ff      	lsrs	r7, r7, #3
 80012a6:	433b      	orrs	r3, r7
 80012a8:	428d      	cmp	r5, r1
 80012aa:	d196      	bne.n	80011da <__aeabi_dadd+0x212>
 80012ac:	0019      	movs	r1, r3
 80012ae:	4311      	orrs	r1, r2
 80012b0:	d100      	bne.n	80012b4 <__aeabi_dadd+0x2ec>
 80012b2:	e19e      	b.n	80015f2 <__aeabi_dadd+0x62a>
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	0309      	lsls	r1, r1, #12
 80012b8:	430a      	orrs	r2, r1
 80012ba:	0312      	lsls	r2, r2, #12
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	4d41      	ldr	r5, [pc, #260]	; (80013c4 <__aeabi_dadd+0x3fc>)
 80012c0:	e78f      	b.n	80011e2 <__aeabi_dadd+0x21a>
 80012c2:	0015      	movs	r5, r2
 80012c4:	2200      	movs	r2, #0
 80012c6:	2300      	movs	r3, #0
 80012c8:	e78b      	b.n	80011e2 <__aeabi_dadd+0x21a>
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d000      	beq.n	80012d0 <__aeabi_dadd+0x308>
 80012ce:	e0c7      	b.n	8001460 <__aeabi_dadd+0x498>
 80012d0:	1c6b      	adds	r3, r5, #1
 80012d2:	055f      	lsls	r7, r3, #21
 80012d4:	0d7f      	lsrs	r7, r7, #21
 80012d6:	2f01      	cmp	r7, #1
 80012d8:	dc00      	bgt.n	80012dc <__aeabi_dadd+0x314>
 80012da:	e0f1      	b.n	80014c0 <__aeabi_dadd+0x4f8>
 80012dc:	4d39      	ldr	r5, [pc, #228]	; (80013c4 <__aeabi_dadd+0x3fc>)
 80012de:	42ab      	cmp	r3, r5
 80012e0:	d100      	bne.n	80012e4 <__aeabi_dadd+0x31c>
 80012e2:	e0b9      	b.n	8001458 <__aeabi_dadd+0x490>
 80012e4:	1885      	adds	r5, r0, r2
 80012e6:	000a      	movs	r2, r1
 80012e8:	4285      	cmp	r5, r0
 80012ea:	4189      	sbcs	r1, r1
 80012ec:	4442      	add	r2, r8
 80012ee:	4249      	negs	r1, r1
 80012f0:	1851      	adds	r1, r2, r1
 80012f2:	2207      	movs	r2, #7
 80012f4:	07cf      	lsls	r7, r1, #31
 80012f6:	086d      	lsrs	r5, r5, #1
 80012f8:	432f      	orrs	r7, r5
 80012fa:	0849      	lsrs	r1, r1, #1
 80012fc:	403a      	ands	r2, r7
 80012fe:	001d      	movs	r5, r3
 8001300:	e6c2      	b.n	8001088 <__aeabi_dadd+0xc0>
 8001302:	2207      	movs	r2, #7
 8001304:	4930      	ldr	r1, [pc, #192]	; (80013c8 <__aeabi_dadd+0x400>)
 8001306:	1aed      	subs	r5, r5, r3
 8001308:	4031      	ands	r1, r6
 800130a:	403a      	ands	r2, r7
 800130c:	e6bc      	b.n	8001088 <__aeabi_dadd+0xc0>
 800130e:	003e      	movs	r6, r7
 8001310:	3828      	subs	r0, #40	; 0x28
 8001312:	4086      	lsls	r6, r0
 8001314:	2700      	movs	r7, #0
 8001316:	e69f      	b.n	8001058 <__aeabi_dadd+0x90>
 8001318:	0038      	movs	r0, r7
 800131a:	f001 fc97 	bl	8002c4c <__clzsi2>
 800131e:	3020      	adds	r0, #32
 8001320:	e68e      	b.n	8001040 <__aeabi_dadd+0x78>
 8001322:	4643      	mov	r3, r8
 8001324:	4313      	orrs	r3, r2
 8001326:	001f      	movs	r7, r3
 8001328:	1e7a      	subs	r2, r7, #1
 800132a:	4197      	sbcs	r7, r2
 800132c:	1bc7      	subs	r7, r0, r7
 800132e:	42b8      	cmp	r0, r7
 8001330:	4180      	sbcs	r0, r0
 8001332:	4240      	negs	r0, r0
 8001334:	1a09      	subs	r1, r1, r0
 8001336:	e678      	b.n	800102a <__aeabi_dadd+0x62>
 8001338:	000e      	movs	r6, r1
 800133a:	003b      	movs	r3, r7
 800133c:	4306      	orrs	r6, r0
 800133e:	4313      	orrs	r3, r2
 8001340:	2d00      	cmp	r5, #0
 8001342:	d161      	bne.n	8001408 <__aeabi_dadd+0x440>
 8001344:	2e00      	cmp	r6, #0
 8001346:	d000      	beq.n	800134a <__aeabi_dadd+0x382>
 8001348:	e0f4      	b.n	8001534 <__aeabi_dadd+0x56c>
 800134a:	2b00      	cmp	r3, #0
 800134c:	d100      	bne.n	8001350 <__aeabi_dadd+0x388>
 800134e:	e11b      	b.n	8001588 <__aeabi_dadd+0x5c0>
 8001350:	4664      	mov	r4, ip
 8001352:	0039      	movs	r1, r7
 8001354:	0010      	movs	r0, r2
 8001356:	e739      	b.n	80011cc <__aeabi_dadd+0x204>
 8001358:	4f1a      	ldr	r7, [pc, #104]	; (80013c4 <__aeabi_dadd+0x3fc>)
 800135a:	42bb      	cmp	r3, r7
 800135c:	d07a      	beq.n	8001454 <__aeabi_dadd+0x48c>
 800135e:	0033      	movs	r3, r6
 8001360:	e6ff      	b.n	8001162 <__aeabi_dadd+0x19a>
 8001362:	0030      	movs	r0, r6
 8001364:	3d1f      	subs	r5, #31
 8001366:	40e8      	lsrs	r0, r5
 8001368:	2b20      	cmp	r3, #32
 800136a:	d003      	beq.n	8001374 <__aeabi_dadd+0x3ac>
 800136c:	2140      	movs	r1, #64	; 0x40
 800136e:	1acb      	subs	r3, r1, r3
 8001370:	409e      	lsls	r6, r3
 8001372:	4337      	orrs	r7, r6
 8001374:	1e7b      	subs	r3, r7, #1
 8001376:	419f      	sbcs	r7, r3
 8001378:	2207      	movs	r2, #7
 800137a:	4307      	orrs	r7, r0
 800137c:	403a      	ands	r2, r7
 800137e:	2100      	movs	r1, #0
 8001380:	2500      	movs	r5, #0
 8001382:	e789      	b.n	8001298 <__aeabi_dadd+0x2d0>
 8001384:	1a17      	subs	r7, r2, r0
 8001386:	4643      	mov	r3, r8
 8001388:	42ba      	cmp	r2, r7
 800138a:	41b6      	sbcs	r6, r6
 800138c:	1a59      	subs	r1, r3, r1
 800138e:	4276      	negs	r6, r6
 8001390:	1b8e      	subs	r6, r1, r6
 8001392:	4664      	mov	r4, ip
 8001394:	e64e      	b.n	8001034 <__aeabi_dadd+0x6c>
 8001396:	2b1f      	cmp	r3, #31
 8001398:	dd00      	ble.n	800139c <__aeabi_dadd+0x3d4>
 800139a:	e0ad      	b.n	80014f8 <__aeabi_dadd+0x530>
 800139c:	2620      	movs	r6, #32
 800139e:	4647      	mov	r7, r8
 80013a0:	1af6      	subs	r6, r6, r3
 80013a2:	40b7      	lsls	r7, r6
 80013a4:	46b9      	mov	r9, r7
 80013a6:	0017      	movs	r7, r2
 80013a8:	46b2      	mov	sl, r6
 80013aa:	40df      	lsrs	r7, r3
 80013ac:	464e      	mov	r6, r9
 80013ae:	433e      	orrs	r6, r7
 80013b0:	0037      	movs	r7, r6
 80013b2:	4656      	mov	r6, sl
 80013b4:	40b2      	lsls	r2, r6
 80013b6:	1e56      	subs	r6, r2, #1
 80013b8:	41b2      	sbcs	r2, r6
 80013ba:	4317      	orrs	r7, r2
 80013bc:	4642      	mov	r2, r8
 80013be:	40da      	lsrs	r2, r3
 80013c0:	1889      	adds	r1, r1, r2
 80013c2:	e6ae      	b.n	8001122 <__aeabi_dadd+0x15a>
 80013c4:	000007ff 	.word	0x000007ff
 80013c8:	ff7fffff 	.word	0xff7fffff
 80013cc:	800fffff 	.word	0x800fffff
 80013d0:	2620      	movs	r6, #32
 80013d2:	4647      	mov	r7, r8
 80013d4:	1af6      	subs	r6, r6, r3
 80013d6:	40b7      	lsls	r7, r6
 80013d8:	46b9      	mov	r9, r7
 80013da:	0017      	movs	r7, r2
 80013dc:	46b2      	mov	sl, r6
 80013de:	40df      	lsrs	r7, r3
 80013e0:	464e      	mov	r6, r9
 80013e2:	433e      	orrs	r6, r7
 80013e4:	0037      	movs	r7, r6
 80013e6:	4656      	mov	r6, sl
 80013e8:	40b2      	lsls	r2, r6
 80013ea:	1e56      	subs	r6, r2, #1
 80013ec:	41b2      	sbcs	r2, r6
 80013ee:	4317      	orrs	r7, r2
 80013f0:	4642      	mov	r2, r8
 80013f2:	40da      	lsrs	r2, r3
 80013f4:	1a89      	subs	r1, r1, r2
 80013f6:	e799      	b.n	800132c <__aeabi_dadd+0x364>
 80013f8:	4c7f      	ldr	r4, [pc, #508]	; (80015f8 <__aeabi_dadd+0x630>)
 80013fa:	42a6      	cmp	r6, r4
 80013fc:	d05b      	beq.n	80014b6 <__aeabi_dadd+0x4ee>
 80013fe:	2480      	movs	r4, #128	; 0x80
 8001400:	0424      	lsls	r4, r4, #16
 8001402:	425b      	negs	r3, r3
 8001404:	4321      	orrs	r1, r4
 8001406:	e727      	b.n	8001258 <__aeabi_dadd+0x290>
 8001408:	2e00      	cmp	r6, #0
 800140a:	d10c      	bne.n	8001426 <__aeabi_dadd+0x45e>
 800140c:	2b00      	cmp	r3, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_dadd+0x44a>
 8001410:	e0cb      	b.n	80015aa <__aeabi_dadd+0x5e2>
 8001412:	4664      	mov	r4, ip
 8001414:	0039      	movs	r1, r7
 8001416:	0010      	movs	r0, r2
 8001418:	4d77      	ldr	r5, [pc, #476]	; (80015f8 <__aeabi_dadd+0x630>)
 800141a:	e6d7      	b.n	80011cc <__aeabi_dadd+0x204>
 800141c:	4f76      	ldr	r7, [pc, #472]	; (80015f8 <__aeabi_dadd+0x630>)
 800141e:	42bb      	cmp	r3, r7
 8001420:	d018      	beq.n	8001454 <__aeabi_dadd+0x48c>
 8001422:	0033      	movs	r3, r6
 8001424:	e675      	b.n	8001112 <__aeabi_dadd+0x14a>
 8001426:	2b00      	cmp	r3, #0
 8001428:	d014      	beq.n	8001454 <__aeabi_dadd+0x48c>
 800142a:	074b      	lsls	r3, r1, #29
 800142c:	08c0      	lsrs	r0, r0, #3
 800142e:	4318      	orrs	r0, r3
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	08c9      	lsrs	r1, r1, #3
 8001434:	031b      	lsls	r3, r3, #12
 8001436:	4219      	tst	r1, r3
 8001438:	d007      	beq.n	800144a <__aeabi_dadd+0x482>
 800143a:	08fc      	lsrs	r4, r7, #3
 800143c:	421c      	tst	r4, r3
 800143e:	d104      	bne.n	800144a <__aeabi_dadd+0x482>
 8001440:	0779      	lsls	r1, r7, #29
 8001442:	08d0      	lsrs	r0, r2, #3
 8001444:	4308      	orrs	r0, r1
 8001446:	46e1      	mov	r9, ip
 8001448:	0021      	movs	r1, r4
 800144a:	464c      	mov	r4, r9
 800144c:	0f42      	lsrs	r2, r0, #29
 800144e:	00c9      	lsls	r1, r1, #3
 8001450:	4311      	orrs	r1, r2
 8001452:	00c0      	lsls	r0, r0, #3
 8001454:	4d68      	ldr	r5, [pc, #416]	; (80015f8 <__aeabi_dadd+0x630>)
 8001456:	e6b9      	b.n	80011cc <__aeabi_dadd+0x204>
 8001458:	001d      	movs	r5, r3
 800145a:	2200      	movs	r2, #0
 800145c:	2300      	movs	r3, #0
 800145e:	e6c0      	b.n	80011e2 <__aeabi_dadd+0x21a>
 8001460:	2d00      	cmp	r5, #0
 8001462:	d15b      	bne.n	800151c <__aeabi_dadd+0x554>
 8001464:	000d      	movs	r5, r1
 8001466:	4305      	orrs	r5, r0
 8001468:	d100      	bne.n	800146c <__aeabi_dadd+0x4a4>
 800146a:	e6e2      	b.n	8001232 <__aeabi_dadd+0x26a>
 800146c:	1c5d      	adds	r5, r3, #1
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x4aa>
 8001470:	e0b0      	b.n	80015d4 <__aeabi_dadd+0x60c>
 8001472:	4d61      	ldr	r5, [pc, #388]	; (80015f8 <__aeabi_dadd+0x630>)
 8001474:	42ae      	cmp	r6, r5
 8001476:	d01f      	beq.n	80014b8 <__aeabi_dadd+0x4f0>
 8001478:	43db      	mvns	r3, r3
 800147a:	2b38      	cmp	r3, #56	; 0x38
 800147c:	dc71      	bgt.n	8001562 <__aeabi_dadd+0x59a>
 800147e:	2b1f      	cmp	r3, #31
 8001480:	dd00      	ble.n	8001484 <__aeabi_dadd+0x4bc>
 8001482:	e096      	b.n	80015b2 <__aeabi_dadd+0x5ea>
 8001484:	2520      	movs	r5, #32
 8001486:	000f      	movs	r7, r1
 8001488:	1aed      	subs	r5, r5, r3
 800148a:	40af      	lsls	r7, r5
 800148c:	46b9      	mov	r9, r7
 800148e:	0007      	movs	r7, r0
 8001490:	46aa      	mov	sl, r5
 8001492:	40df      	lsrs	r7, r3
 8001494:	464d      	mov	r5, r9
 8001496:	433d      	orrs	r5, r7
 8001498:	002f      	movs	r7, r5
 800149a:	4655      	mov	r5, sl
 800149c:	40a8      	lsls	r0, r5
 800149e:	40d9      	lsrs	r1, r3
 80014a0:	1e45      	subs	r5, r0, #1
 80014a2:	41a8      	sbcs	r0, r5
 80014a4:	4488      	add	r8, r1
 80014a6:	4307      	orrs	r7, r0
 80014a8:	18bf      	adds	r7, r7, r2
 80014aa:	4297      	cmp	r7, r2
 80014ac:	4192      	sbcs	r2, r2
 80014ae:	4251      	negs	r1, r2
 80014b0:	4441      	add	r1, r8
 80014b2:	0035      	movs	r5, r6
 80014b4:	e63a      	b.n	800112c <__aeabi_dadd+0x164>
 80014b6:	4664      	mov	r4, ip
 80014b8:	0035      	movs	r5, r6
 80014ba:	4641      	mov	r1, r8
 80014bc:	0010      	movs	r0, r2
 80014be:	e685      	b.n	80011cc <__aeabi_dadd+0x204>
 80014c0:	000b      	movs	r3, r1
 80014c2:	4303      	orrs	r3, r0
 80014c4:	2d00      	cmp	r5, #0
 80014c6:	d000      	beq.n	80014ca <__aeabi_dadd+0x502>
 80014c8:	e663      	b.n	8001192 <__aeabi_dadd+0x1ca>
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f5      	beq.n	80014ba <__aeabi_dadd+0x4f2>
 80014ce:	4643      	mov	r3, r8
 80014d0:	4313      	orrs	r3, r2
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dadd+0x50e>
 80014d4:	e67a      	b.n	80011cc <__aeabi_dadd+0x204>
 80014d6:	1887      	adds	r7, r0, r2
 80014d8:	4287      	cmp	r7, r0
 80014da:	4180      	sbcs	r0, r0
 80014dc:	2207      	movs	r2, #7
 80014de:	4441      	add	r1, r8
 80014e0:	4240      	negs	r0, r0
 80014e2:	1809      	adds	r1, r1, r0
 80014e4:	403a      	ands	r2, r7
 80014e6:	020b      	lsls	r3, r1, #8
 80014e8:	d400      	bmi.n	80014ec <__aeabi_dadd+0x524>
 80014ea:	e6d5      	b.n	8001298 <__aeabi_dadd+0x2d0>
 80014ec:	4b43      	ldr	r3, [pc, #268]	; (80015fc <__aeabi_dadd+0x634>)
 80014ee:	3501      	adds	r5, #1
 80014f0:	4019      	ands	r1, r3
 80014f2:	e5c9      	b.n	8001088 <__aeabi_dadd+0xc0>
 80014f4:	0038      	movs	r0, r7
 80014f6:	e669      	b.n	80011cc <__aeabi_dadd+0x204>
 80014f8:	001e      	movs	r6, r3
 80014fa:	4647      	mov	r7, r8
 80014fc:	3e20      	subs	r6, #32
 80014fe:	40f7      	lsrs	r7, r6
 8001500:	46bc      	mov	ip, r7
 8001502:	2b20      	cmp	r3, #32
 8001504:	d004      	beq.n	8001510 <__aeabi_dadd+0x548>
 8001506:	2640      	movs	r6, #64	; 0x40
 8001508:	1af3      	subs	r3, r6, r3
 800150a:	4646      	mov	r6, r8
 800150c:	409e      	lsls	r6, r3
 800150e:	4332      	orrs	r2, r6
 8001510:	0017      	movs	r7, r2
 8001512:	4663      	mov	r3, ip
 8001514:	1e7a      	subs	r2, r7, #1
 8001516:	4197      	sbcs	r7, r2
 8001518:	431f      	orrs	r7, r3
 800151a:	e602      	b.n	8001122 <__aeabi_dadd+0x15a>
 800151c:	4d36      	ldr	r5, [pc, #216]	; (80015f8 <__aeabi_dadd+0x630>)
 800151e:	42ae      	cmp	r6, r5
 8001520:	d0ca      	beq.n	80014b8 <__aeabi_dadd+0x4f0>
 8001522:	2580      	movs	r5, #128	; 0x80
 8001524:	042d      	lsls	r5, r5, #16
 8001526:	425b      	negs	r3, r3
 8001528:	4329      	orrs	r1, r5
 800152a:	e7a6      	b.n	800147a <__aeabi_dadd+0x4b2>
 800152c:	4308      	orrs	r0, r1
 800152e:	1e41      	subs	r1, r0, #1
 8001530:	4188      	sbcs	r0, r1
 8001532:	e6a6      	b.n	8001282 <__aeabi_dadd+0x2ba>
 8001534:	2b00      	cmp	r3, #0
 8001536:	d100      	bne.n	800153a <__aeabi_dadd+0x572>
 8001538:	e648      	b.n	80011cc <__aeabi_dadd+0x204>
 800153a:	1a87      	subs	r7, r0, r2
 800153c:	4643      	mov	r3, r8
 800153e:	42b8      	cmp	r0, r7
 8001540:	41b6      	sbcs	r6, r6
 8001542:	1acb      	subs	r3, r1, r3
 8001544:	4276      	negs	r6, r6
 8001546:	1b9e      	subs	r6, r3, r6
 8001548:	0233      	lsls	r3, r6, #8
 800154a:	d54b      	bpl.n	80015e4 <__aeabi_dadd+0x61c>
 800154c:	1a17      	subs	r7, r2, r0
 800154e:	4643      	mov	r3, r8
 8001550:	42ba      	cmp	r2, r7
 8001552:	4192      	sbcs	r2, r2
 8001554:	1a59      	subs	r1, r3, r1
 8001556:	4252      	negs	r2, r2
 8001558:	1a89      	subs	r1, r1, r2
 800155a:	2207      	movs	r2, #7
 800155c:	4664      	mov	r4, ip
 800155e:	403a      	ands	r2, r7
 8001560:	e592      	b.n	8001088 <__aeabi_dadd+0xc0>
 8001562:	4301      	orrs	r1, r0
 8001564:	000f      	movs	r7, r1
 8001566:	1e79      	subs	r1, r7, #1
 8001568:	418f      	sbcs	r7, r1
 800156a:	e79d      	b.n	80014a8 <__aeabi_dadd+0x4e0>
 800156c:	001c      	movs	r4, r3
 800156e:	000f      	movs	r7, r1
 8001570:	3c20      	subs	r4, #32
 8001572:	40e7      	lsrs	r7, r4
 8001574:	2b20      	cmp	r3, #32
 8001576:	d003      	beq.n	8001580 <__aeabi_dadd+0x5b8>
 8001578:	2440      	movs	r4, #64	; 0x40
 800157a:	1ae3      	subs	r3, r4, r3
 800157c:	4099      	lsls	r1, r3
 800157e:	4308      	orrs	r0, r1
 8001580:	1e41      	subs	r1, r0, #1
 8001582:	4188      	sbcs	r0, r1
 8001584:	4338      	orrs	r0, r7
 8001586:	e67c      	b.n	8001282 <__aeabi_dadd+0x2ba>
 8001588:	2200      	movs	r2, #0
 800158a:	2400      	movs	r4, #0
 800158c:	e625      	b.n	80011da <__aeabi_dadd+0x212>
 800158e:	1a17      	subs	r7, r2, r0
 8001590:	4643      	mov	r3, r8
 8001592:	42ba      	cmp	r2, r7
 8001594:	4192      	sbcs	r2, r2
 8001596:	1a59      	subs	r1, r3, r1
 8001598:	4252      	negs	r2, r2
 800159a:	1a89      	subs	r1, r1, r2
 800159c:	4664      	mov	r4, ip
 800159e:	0035      	movs	r5, r6
 80015a0:	e543      	b.n	800102a <__aeabi_dadd+0x62>
 80015a2:	4641      	mov	r1, r8
 80015a4:	0010      	movs	r0, r2
 80015a6:	4d14      	ldr	r5, [pc, #80]	; (80015f8 <__aeabi_dadd+0x630>)
 80015a8:	e610      	b.n	80011cc <__aeabi_dadd+0x204>
 80015aa:	2280      	movs	r2, #128	; 0x80
 80015ac:	2400      	movs	r4, #0
 80015ae:	0312      	lsls	r2, r2, #12
 80015b0:	e680      	b.n	80012b4 <__aeabi_dadd+0x2ec>
 80015b2:	001d      	movs	r5, r3
 80015b4:	000f      	movs	r7, r1
 80015b6:	3d20      	subs	r5, #32
 80015b8:	40ef      	lsrs	r7, r5
 80015ba:	46bc      	mov	ip, r7
 80015bc:	2b20      	cmp	r3, #32
 80015be:	d003      	beq.n	80015c8 <__aeabi_dadd+0x600>
 80015c0:	2540      	movs	r5, #64	; 0x40
 80015c2:	1aeb      	subs	r3, r5, r3
 80015c4:	4099      	lsls	r1, r3
 80015c6:	4308      	orrs	r0, r1
 80015c8:	0007      	movs	r7, r0
 80015ca:	4663      	mov	r3, ip
 80015cc:	1e78      	subs	r0, r7, #1
 80015ce:	4187      	sbcs	r7, r0
 80015d0:	431f      	orrs	r7, r3
 80015d2:	e769      	b.n	80014a8 <__aeabi_dadd+0x4e0>
 80015d4:	1887      	adds	r7, r0, r2
 80015d6:	4297      	cmp	r7, r2
 80015d8:	419b      	sbcs	r3, r3
 80015da:	4441      	add	r1, r8
 80015dc:	425b      	negs	r3, r3
 80015de:	18c9      	adds	r1, r1, r3
 80015e0:	0035      	movs	r5, r6
 80015e2:	e5a3      	b.n	800112c <__aeabi_dadd+0x164>
 80015e4:	003b      	movs	r3, r7
 80015e6:	4333      	orrs	r3, r6
 80015e8:	d0ce      	beq.n	8001588 <__aeabi_dadd+0x5c0>
 80015ea:	2207      	movs	r2, #7
 80015ec:	0031      	movs	r1, r6
 80015ee:	403a      	ands	r2, r7
 80015f0:	e652      	b.n	8001298 <__aeabi_dadd+0x2d0>
 80015f2:	2300      	movs	r3, #0
 80015f4:	001a      	movs	r2, r3
 80015f6:	e5f4      	b.n	80011e2 <__aeabi_dadd+0x21a>
 80015f8:	000007ff 	.word	0x000007ff
 80015fc:	ff7fffff 	.word	0xff7fffff

08001600 <__aeabi_ddiv>:
 8001600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001602:	4657      	mov	r7, sl
 8001604:	46de      	mov	lr, fp
 8001606:	464e      	mov	r6, r9
 8001608:	4645      	mov	r5, r8
 800160a:	b5e0      	push	{r5, r6, r7, lr}
 800160c:	4683      	mov	fp, r0
 800160e:	0007      	movs	r7, r0
 8001610:	030e      	lsls	r6, r1, #12
 8001612:	0048      	lsls	r0, r1, #1
 8001614:	b085      	sub	sp, #20
 8001616:	4692      	mov	sl, r2
 8001618:	001c      	movs	r4, r3
 800161a:	0b36      	lsrs	r6, r6, #12
 800161c:	0d40      	lsrs	r0, r0, #21
 800161e:	0fcd      	lsrs	r5, r1, #31
 8001620:	2800      	cmp	r0, #0
 8001622:	d100      	bne.n	8001626 <__aeabi_ddiv+0x26>
 8001624:	e09d      	b.n	8001762 <__aeabi_ddiv+0x162>
 8001626:	4b95      	ldr	r3, [pc, #596]	; (800187c <__aeabi_ddiv+0x27c>)
 8001628:	4298      	cmp	r0, r3
 800162a:	d039      	beq.n	80016a0 <__aeabi_ddiv+0xa0>
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	00f6      	lsls	r6, r6, #3
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	431e      	orrs	r6, r3
 8001634:	4a92      	ldr	r2, [pc, #584]	; (8001880 <__aeabi_ddiv+0x280>)
 8001636:	0f7b      	lsrs	r3, r7, #29
 8001638:	4333      	orrs	r3, r6
 800163a:	4699      	mov	r9, r3
 800163c:	4694      	mov	ip, r2
 800163e:	0003      	movs	r3, r0
 8001640:	4463      	add	r3, ip
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2300      	movs	r3, #0
 8001646:	2600      	movs	r6, #0
 8001648:	00ff      	lsls	r7, r7, #3
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	0323      	lsls	r3, r4, #12
 800164e:	0b1b      	lsrs	r3, r3, #12
 8001650:	4698      	mov	r8, r3
 8001652:	0063      	lsls	r3, r4, #1
 8001654:	0fe4      	lsrs	r4, r4, #31
 8001656:	4652      	mov	r2, sl
 8001658:	0d5b      	lsrs	r3, r3, #21
 800165a:	9401      	str	r4, [sp, #4]
 800165c:	d100      	bne.n	8001660 <__aeabi_ddiv+0x60>
 800165e:	e0b3      	b.n	80017c8 <__aeabi_ddiv+0x1c8>
 8001660:	4986      	ldr	r1, [pc, #536]	; (800187c <__aeabi_ddiv+0x27c>)
 8001662:	428b      	cmp	r3, r1
 8001664:	d100      	bne.n	8001668 <__aeabi_ddiv+0x68>
 8001666:	e09e      	b.n	80017a6 <__aeabi_ddiv+0x1a6>
 8001668:	4642      	mov	r2, r8
 800166a:	00d1      	lsls	r1, r2, #3
 800166c:	2280      	movs	r2, #128	; 0x80
 800166e:	0412      	lsls	r2, r2, #16
 8001670:	430a      	orrs	r2, r1
 8001672:	4651      	mov	r1, sl
 8001674:	0f49      	lsrs	r1, r1, #29
 8001676:	4311      	orrs	r1, r2
 8001678:	468b      	mov	fp, r1
 800167a:	4981      	ldr	r1, [pc, #516]	; (8001880 <__aeabi_ddiv+0x280>)
 800167c:	4652      	mov	r2, sl
 800167e:	468c      	mov	ip, r1
 8001680:	9900      	ldr	r1, [sp, #0]
 8001682:	4463      	add	r3, ip
 8001684:	1acb      	subs	r3, r1, r3
 8001686:	2100      	movs	r1, #0
 8001688:	00d2      	lsls	r2, r2, #3
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	002b      	movs	r3, r5
 800168e:	4063      	eors	r3, r4
 8001690:	469a      	mov	sl, r3
 8001692:	2e0f      	cmp	r6, #15
 8001694:	d900      	bls.n	8001698 <__aeabi_ddiv+0x98>
 8001696:	e105      	b.n	80018a4 <__aeabi_ddiv+0x2a4>
 8001698:	4b7a      	ldr	r3, [pc, #488]	; (8001884 <__aeabi_ddiv+0x284>)
 800169a:	00b6      	lsls	r6, r6, #2
 800169c:	599b      	ldr	r3, [r3, r6]
 800169e:	469f      	mov	pc, r3
 80016a0:	465b      	mov	r3, fp
 80016a2:	4333      	orrs	r3, r6
 80016a4:	4699      	mov	r9, r3
 80016a6:	d000      	beq.n	80016aa <__aeabi_ddiv+0xaa>
 80016a8:	e0b8      	b.n	800181c <__aeabi_ddiv+0x21c>
 80016aa:	2302      	movs	r3, #2
 80016ac:	2608      	movs	r6, #8
 80016ae:	2700      	movs	r7, #0
 80016b0:	9000      	str	r0, [sp, #0]
 80016b2:	9302      	str	r3, [sp, #8]
 80016b4:	e7ca      	b.n	800164c <__aeabi_ddiv+0x4c>
 80016b6:	46cb      	mov	fp, r9
 80016b8:	003a      	movs	r2, r7
 80016ba:	9902      	ldr	r1, [sp, #8]
 80016bc:	9501      	str	r5, [sp, #4]
 80016be:	9b01      	ldr	r3, [sp, #4]
 80016c0:	469a      	mov	sl, r3
 80016c2:	2902      	cmp	r1, #2
 80016c4:	d027      	beq.n	8001716 <__aeabi_ddiv+0x116>
 80016c6:	2903      	cmp	r1, #3
 80016c8:	d100      	bne.n	80016cc <__aeabi_ddiv+0xcc>
 80016ca:	e280      	b.n	8001bce <__aeabi_ddiv+0x5ce>
 80016cc:	2901      	cmp	r1, #1
 80016ce:	d044      	beq.n	800175a <__aeabi_ddiv+0x15a>
 80016d0:	496d      	ldr	r1, [pc, #436]	; (8001888 <__aeabi_ddiv+0x288>)
 80016d2:	9b00      	ldr	r3, [sp, #0]
 80016d4:	468c      	mov	ip, r1
 80016d6:	4463      	add	r3, ip
 80016d8:	001c      	movs	r4, r3
 80016da:	2c00      	cmp	r4, #0
 80016dc:	dd38      	ble.n	8001750 <__aeabi_ddiv+0x150>
 80016de:	0753      	lsls	r3, r2, #29
 80016e0:	d000      	beq.n	80016e4 <__aeabi_ddiv+0xe4>
 80016e2:	e213      	b.n	8001b0c <__aeabi_ddiv+0x50c>
 80016e4:	08d2      	lsrs	r2, r2, #3
 80016e6:	465b      	mov	r3, fp
 80016e8:	01db      	lsls	r3, r3, #7
 80016ea:	d509      	bpl.n	8001700 <__aeabi_ddiv+0x100>
 80016ec:	4659      	mov	r1, fp
 80016ee:	4b67      	ldr	r3, [pc, #412]	; (800188c <__aeabi_ddiv+0x28c>)
 80016f0:	4019      	ands	r1, r3
 80016f2:	468b      	mov	fp, r1
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	00c9      	lsls	r1, r1, #3
 80016f8:	468c      	mov	ip, r1
 80016fa:	9b00      	ldr	r3, [sp, #0]
 80016fc:	4463      	add	r3, ip
 80016fe:	001c      	movs	r4, r3
 8001700:	4b63      	ldr	r3, [pc, #396]	; (8001890 <__aeabi_ddiv+0x290>)
 8001702:	429c      	cmp	r4, r3
 8001704:	dc07      	bgt.n	8001716 <__aeabi_ddiv+0x116>
 8001706:	465b      	mov	r3, fp
 8001708:	0564      	lsls	r4, r4, #21
 800170a:	075f      	lsls	r7, r3, #29
 800170c:	025b      	lsls	r3, r3, #9
 800170e:	4317      	orrs	r7, r2
 8001710:	0b1b      	lsrs	r3, r3, #12
 8001712:	0d62      	lsrs	r2, r4, #21
 8001714:	e002      	b.n	800171c <__aeabi_ddiv+0x11c>
 8001716:	2300      	movs	r3, #0
 8001718:	2700      	movs	r7, #0
 800171a:	4a58      	ldr	r2, [pc, #352]	; (800187c <__aeabi_ddiv+0x27c>)
 800171c:	2100      	movs	r1, #0
 800171e:	031b      	lsls	r3, r3, #12
 8001720:	0b1c      	lsrs	r4, r3, #12
 8001722:	0d0b      	lsrs	r3, r1, #20
 8001724:	051b      	lsls	r3, r3, #20
 8001726:	4323      	orrs	r3, r4
 8001728:	0514      	lsls	r4, r2, #20
 800172a:	4a5a      	ldr	r2, [pc, #360]	; (8001894 <__aeabi_ddiv+0x294>)
 800172c:	0038      	movs	r0, r7
 800172e:	4013      	ands	r3, r2
 8001730:	431c      	orrs	r4, r3
 8001732:	4653      	mov	r3, sl
 8001734:	0064      	lsls	r4, r4, #1
 8001736:	07db      	lsls	r3, r3, #31
 8001738:	0864      	lsrs	r4, r4, #1
 800173a:	431c      	orrs	r4, r3
 800173c:	0021      	movs	r1, r4
 800173e:	b005      	add	sp, #20
 8001740:	bc3c      	pop	{r2, r3, r4, r5}
 8001742:	4690      	mov	r8, r2
 8001744:	4699      	mov	r9, r3
 8001746:	46a2      	mov	sl, r4
 8001748:	46ab      	mov	fp, r5
 800174a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800174c:	2201      	movs	r2, #1
 800174e:	4252      	negs	r2, r2
 8001750:	2301      	movs	r3, #1
 8001752:	1b1b      	subs	r3, r3, r4
 8001754:	2b38      	cmp	r3, #56	; 0x38
 8001756:	dc00      	bgt.n	800175a <__aeabi_ddiv+0x15a>
 8001758:	e1ad      	b.n	8001ab6 <__aeabi_ddiv+0x4b6>
 800175a:	2200      	movs	r2, #0
 800175c:	2300      	movs	r3, #0
 800175e:	2700      	movs	r7, #0
 8001760:	e7dc      	b.n	800171c <__aeabi_ddiv+0x11c>
 8001762:	465b      	mov	r3, fp
 8001764:	4333      	orrs	r3, r6
 8001766:	4699      	mov	r9, r3
 8001768:	d05e      	beq.n	8001828 <__aeabi_ddiv+0x228>
 800176a:	2e00      	cmp	r6, #0
 800176c:	d100      	bne.n	8001770 <__aeabi_ddiv+0x170>
 800176e:	e18a      	b.n	8001a86 <__aeabi_ddiv+0x486>
 8001770:	0030      	movs	r0, r6
 8001772:	f001 fa6b 	bl	8002c4c <__clzsi2>
 8001776:	0003      	movs	r3, r0
 8001778:	3b0b      	subs	r3, #11
 800177a:	2b1c      	cmp	r3, #28
 800177c:	dd00      	ble.n	8001780 <__aeabi_ddiv+0x180>
 800177e:	e17b      	b.n	8001a78 <__aeabi_ddiv+0x478>
 8001780:	221d      	movs	r2, #29
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	465a      	mov	r2, fp
 8001786:	0001      	movs	r1, r0
 8001788:	40da      	lsrs	r2, r3
 800178a:	3908      	subs	r1, #8
 800178c:	408e      	lsls	r6, r1
 800178e:	0013      	movs	r3, r2
 8001790:	465f      	mov	r7, fp
 8001792:	4333      	orrs	r3, r6
 8001794:	4699      	mov	r9, r3
 8001796:	408f      	lsls	r7, r1
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <__aeabi_ddiv+0x298>)
 800179a:	2600      	movs	r6, #0
 800179c:	1a1b      	subs	r3, r3, r0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2300      	movs	r3, #0
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	e752      	b.n	800164c <__aeabi_ddiv+0x4c>
 80017a6:	4641      	mov	r1, r8
 80017a8:	4653      	mov	r3, sl
 80017aa:	430b      	orrs	r3, r1
 80017ac:	493b      	ldr	r1, [pc, #236]	; (800189c <__aeabi_ddiv+0x29c>)
 80017ae:	469b      	mov	fp, r3
 80017b0:	468c      	mov	ip, r1
 80017b2:	9b00      	ldr	r3, [sp, #0]
 80017b4:	4463      	add	r3, ip
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	465b      	mov	r3, fp
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d13b      	bne.n	8001836 <__aeabi_ddiv+0x236>
 80017be:	2302      	movs	r3, #2
 80017c0:	2200      	movs	r2, #0
 80017c2:	431e      	orrs	r6, r3
 80017c4:	2102      	movs	r1, #2
 80017c6:	e761      	b.n	800168c <__aeabi_ddiv+0x8c>
 80017c8:	4643      	mov	r3, r8
 80017ca:	4313      	orrs	r3, r2
 80017cc:	469b      	mov	fp, r3
 80017ce:	d037      	beq.n	8001840 <__aeabi_ddiv+0x240>
 80017d0:	4643      	mov	r3, r8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d100      	bne.n	80017d8 <__aeabi_ddiv+0x1d8>
 80017d6:	e162      	b.n	8001a9e <__aeabi_ddiv+0x49e>
 80017d8:	4640      	mov	r0, r8
 80017da:	f001 fa37 	bl	8002c4c <__clzsi2>
 80017de:	0003      	movs	r3, r0
 80017e0:	3b0b      	subs	r3, #11
 80017e2:	2b1c      	cmp	r3, #28
 80017e4:	dd00      	ble.n	80017e8 <__aeabi_ddiv+0x1e8>
 80017e6:	e153      	b.n	8001a90 <__aeabi_ddiv+0x490>
 80017e8:	0002      	movs	r2, r0
 80017ea:	4641      	mov	r1, r8
 80017ec:	3a08      	subs	r2, #8
 80017ee:	4091      	lsls	r1, r2
 80017f0:	4688      	mov	r8, r1
 80017f2:	211d      	movs	r1, #29
 80017f4:	1acb      	subs	r3, r1, r3
 80017f6:	4651      	mov	r1, sl
 80017f8:	40d9      	lsrs	r1, r3
 80017fa:	000b      	movs	r3, r1
 80017fc:	4641      	mov	r1, r8
 80017fe:	430b      	orrs	r3, r1
 8001800:	469b      	mov	fp, r3
 8001802:	4653      	mov	r3, sl
 8001804:	4093      	lsls	r3, r2
 8001806:	001a      	movs	r2, r3
 8001808:	9b00      	ldr	r3, [sp, #0]
 800180a:	4925      	ldr	r1, [pc, #148]	; (80018a0 <__aeabi_ddiv+0x2a0>)
 800180c:	469c      	mov	ip, r3
 800180e:	4460      	add	r0, ip
 8001810:	0003      	movs	r3, r0
 8001812:	468c      	mov	ip, r1
 8001814:	4463      	add	r3, ip
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2100      	movs	r1, #0
 800181a:	e737      	b.n	800168c <__aeabi_ddiv+0x8c>
 800181c:	2303      	movs	r3, #3
 800181e:	46b1      	mov	r9, r6
 8001820:	9000      	str	r0, [sp, #0]
 8001822:	260c      	movs	r6, #12
 8001824:	9302      	str	r3, [sp, #8]
 8001826:	e711      	b.n	800164c <__aeabi_ddiv+0x4c>
 8001828:	2300      	movs	r3, #0
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	2604      	movs	r6, #4
 8001830:	2700      	movs	r7, #0
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	e70a      	b.n	800164c <__aeabi_ddiv+0x4c>
 8001836:	2303      	movs	r3, #3
 8001838:	46c3      	mov	fp, r8
 800183a:	431e      	orrs	r6, r3
 800183c:	2103      	movs	r1, #3
 800183e:	e725      	b.n	800168c <__aeabi_ddiv+0x8c>
 8001840:	3301      	adds	r3, #1
 8001842:	431e      	orrs	r6, r3
 8001844:	2200      	movs	r2, #0
 8001846:	2101      	movs	r1, #1
 8001848:	e720      	b.n	800168c <__aeabi_ddiv+0x8c>
 800184a:	2300      	movs	r3, #0
 800184c:	469a      	mov	sl, r3
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	2700      	movs	r7, #0
 8001852:	031b      	lsls	r3, r3, #12
 8001854:	4a09      	ldr	r2, [pc, #36]	; (800187c <__aeabi_ddiv+0x27c>)
 8001856:	e761      	b.n	800171c <__aeabi_ddiv+0x11c>
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	4649      	mov	r1, r9
 800185c:	031b      	lsls	r3, r3, #12
 800185e:	4219      	tst	r1, r3
 8001860:	d100      	bne.n	8001864 <__aeabi_ddiv+0x264>
 8001862:	e0e2      	b.n	8001a2a <__aeabi_ddiv+0x42a>
 8001864:	4659      	mov	r1, fp
 8001866:	4219      	tst	r1, r3
 8001868:	d000      	beq.n	800186c <__aeabi_ddiv+0x26c>
 800186a:	e0de      	b.n	8001a2a <__aeabi_ddiv+0x42a>
 800186c:	430b      	orrs	r3, r1
 800186e:	031b      	lsls	r3, r3, #12
 8001870:	0017      	movs	r7, r2
 8001872:	0b1b      	lsrs	r3, r3, #12
 8001874:	46a2      	mov	sl, r4
 8001876:	4a01      	ldr	r2, [pc, #4]	; (800187c <__aeabi_ddiv+0x27c>)
 8001878:	e750      	b.n	800171c <__aeabi_ddiv+0x11c>
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	000007ff 	.word	0x000007ff
 8001880:	fffffc01 	.word	0xfffffc01
 8001884:	08008ae4 	.word	0x08008ae4
 8001888:	000003ff 	.word	0x000003ff
 800188c:	feffffff 	.word	0xfeffffff
 8001890:	000007fe 	.word	0x000007fe
 8001894:	800fffff 	.word	0x800fffff
 8001898:	fffffc0d 	.word	0xfffffc0d
 800189c:	fffff801 	.word	0xfffff801
 80018a0:	000003f3 	.word	0x000003f3
 80018a4:	45d9      	cmp	r9, fp
 80018a6:	d900      	bls.n	80018aa <__aeabi_ddiv+0x2aa>
 80018a8:	e0cb      	b.n	8001a42 <__aeabi_ddiv+0x442>
 80018aa:	d100      	bne.n	80018ae <__aeabi_ddiv+0x2ae>
 80018ac:	e0c6      	b.n	8001a3c <__aeabi_ddiv+0x43c>
 80018ae:	003c      	movs	r4, r7
 80018b0:	4648      	mov	r0, r9
 80018b2:	2700      	movs	r7, #0
 80018b4:	9b00      	ldr	r3, [sp, #0]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	465b      	mov	r3, fp
 80018bc:	0e16      	lsrs	r6, r2, #24
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	431e      	orrs	r6, r3
 80018c2:	0213      	lsls	r3, r2, #8
 80018c4:	4698      	mov	r8, r3
 80018c6:	0433      	lsls	r3, r6, #16
 80018c8:	0c1b      	lsrs	r3, r3, #16
 80018ca:	4699      	mov	r9, r3
 80018cc:	0c31      	lsrs	r1, r6, #16
 80018ce:	9101      	str	r1, [sp, #4]
 80018d0:	f7fe fcaa 	bl	8000228 <__aeabi_uidivmod>
 80018d4:	464a      	mov	r2, r9
 80018d6:	4342      	muls	r2, r0
 80018d8:	040b      	lsls	r3, r1, #16
 80018da:	0c21      	lsrs	r1, r4, #16
 80018dc:	0005      	movs	r5, r0
 80018de:	4319      	orrs	r1, r3
 80018e0:	428a      	cmp	r2, r1
 80018e2:	d907      	bls.n	80018f4 <__aeabi_ddiv+0x2f4>
 80018e4:	1989      	adds	r1, r1, r6
 80018e6:	3d01      	subs	r5, #1
 80018e8:	428e      	cmp	r6, r1
 80018ea:	d803      	bhi.n	80018f4 <__aeabi_ddiv+0x2f4>
 80018ec:	428a      	cmp	r2, r1
 80018ee:	d901      	bls.n	80018f4 <__aeabi_ddiv+0x2f4>
 80018f0:	1e85      	subs	r5, r0, #2
 80018f2:	1989      	adds	r1, r1, r6
 80018f4:	1a88      	subs	r0, r1, r2
 80018f6:	9901      	ldr	r1, [sp, #4]
 80018f8:	f7fe fc96 	bl	8000228 <__aeabi_uidivmod>
 80018fc:	0409      	lsls	r1, r1, #16
 80018fe:	468c      	mov	ip, r1
 8001900:	464a      	mov	r2, r9
 8001902:	0421      	lsls	r1, r4, #16
 8001904:	4664      	mov	r4, ip
 8001906:	4342      	muls	r2, r0
 8001908:	0c09      	lsrs	r1, r1, #16
 800190a:	0003      	movs	r3, r0
 800190c:	4321      	orrs	r1, r4
 800190e:	428a      	cmp	r2, r1
 8001910:	d904      	bls.n	800191c <__aeabi_ddiv+0x31c>
 8001912:	1989      	adds	r1, r1, r6
 8001914:	3b01      	subs	r3, #1
 8001916:	428e      	cmp	r6, r1
 8001918:	d800      	bhi.n	800191c <__aeabi_ddiv+0x31c>
 800191a:	e0f1      	b.n	8001b00 <__aeabi_ddiv+0x500>
 800191c:	042d      	lsls	r5, r5, #16
 800191e:	431d      	orrs	r5, r3
 8001920:	46ab      	mov	fp, r5
 8001922:	4643      	mov	r3, r8
 8001924:	1a89      	subs	r1, r1, r2
 8001926:	4642      	mov	r2, r8
 8001928:	0c28      	lsrs	r0, r5, #16
 800192a:	0412      	lsls	r2, r2, #16
 800192c:	0c1d      	lsrs	r5, r3, #16
 800192e:	465b      	mov	r3, fp
 8001930:	0c14      	lsrs	r4, r2, #16
 8001932:	0022      	movs	r2, r4
 8001934:	041b      	lsls	r3, r3, #16
 8001936:	0c1b      	lsrs	r3, r3, #16
 8001938:	435a      	muls	r2, r3
 800193a:	9403      	str	r4, [sp, #12]
 800193c:	436b      	muls	r3, r5
 800193e:	4344      	muls	r4, r0
 8001940:	9502      	str	r5, [sp, #8]
 8001942:	4368      	muls	r0, r5
 8001944:	191b      	adds	r3, r3, r4
 8001946:	0c15      	lsrs	r5, r2, #16
 8001948:	18eb      	adds	r3, r5, r3
 800194a:	429c      	cmp	r4, r3
 800194c:	d903      	bls.n	8001956 <__aeabi_ddiv+0x356>
 800194e:	2480      	movs	r4, #128	; 0x80
 8001950:	0264      	lsls	r4, r4, #9
 8001952:	46a4      	mov	ip, r4
 8001954:	4460      	add	r0, ip
 8001956:	0c1c      	lsrs	r4, r3, #16
 8001958:	0415      	lsls	r5, r2, #16
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	0c2d      	lsrs	r5, r5, #16
 800195e:	1820      	adds	r0, r4, r0
 8001960:	195d      	adds	r5, r3, r5
 8001962:	4281      	cmp	r1, r0
 8001964:	d377      	bcc.n	8001a56 <__aeabi_ddiv+0x456>
 8001966:	d073      	beq.n	8001a50 <__aeabi_ddiv+0x450>
 8001968:	1a0c      	subs	r4, r1, r0
 800196a:	4aa2      	ldr	r2, [pc, #648]	; (8001bf4 <__aeabi_ddiv+0x5f4>)
 800196c:	1b7d      	subs	r5, r7, r5
 800196e:	42af      	cmp	r7, r5
 8001970:	41bf      	sbcs	r7, r7
 8001972:	4694      	mov	ip, r2
 8001974:	9b00      	ldr	r3, [sp, #0]
 8001976:	427f      	negs	r7, r7
 8001978:	4463      	add	r3, ip
 800197a:	1be0      	subs	r0, r4, r7
 800197c:	001c      	movs	r4, r3
 800197e:	4286      	cmp	r6, r0
 8001980:	d100      	bne.n	8001984 <__aeabi_ddiv+0x384>
 8001982:	e0db      	b.n	8001b3c <__aeabi_ddiv+0x53c>
 8001984:	9901      	ldr	r1, [sp, #4]
 8001986:	f7fe fc4f 	bl	8000228 <__aeabi_uidivmod>
 800198a:	464a      	mov	r2, r9
 800198c:	4342      	muls	r2, r0
 800198e:	040b      	lsls	r3, r1, #16
 8001990:	0c29      	lsrs	r1, r5, #16
 8001992:	0007      	movs	r7, r0
 8001994:	4319      	orrs	r1, r3
 8001996:	428a      	cmp	r2, r1
 8001998:	d907      	bls.n	80019aa <__aeabi_ddiv+0x3aa>
 800199a:	1989      	adds	r1, r1, r6
 800199c:	3f01      	subs	r7, #1
 800199e:	428e      	cmp	r6, r1
 80019a0:	d803      	bhi.n	80019aa <__aeabi_ddiv+0x3aa>
 80019a2:	428a      	cmp	r2, r1
 80019a4:	d901      	bls.n	80019aa <__aeabi_ddiv+0x3aa>
 80019a6:	1e87      	subs	r7, r0, #2
 80019a8:	1989      	adds	r1, r1, r6
 80019aa:	1a88      	subs	r0, r1, r2
 80019ac:	9901      	ldr	r1, [sp, #4]
 80019ae:	f7fe fc3b 	bl	8000228 <__aeabi_uidivmod>
 80019b2:	0409      	lsls	r1, r1, #16
 80019b4:	464a      	mov	r2, r9
 80019b6:	4689      	mov	r9, r1
 80019b8:	0429      	lsls	r1, r5, #16
 80019ba:	464d      	mov	r5, r9
 80019bc:	4342      	muls	r2, r0
 80019be:	0c09      	lsrs	r1, r1, #16
 80019c0:	0003      	movs	r3, r0
 80019c2:	4329      	orrs	r1, r5
 80019c4:	428a      	cmp	r2, r1
 80019c6:	d907      	bls.n	80019d8 <__aeabi_ddiv+0x3d8>
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	3b01      	subs	r3, #1
 80019cc:	428e      	cmp	r6, r1
 80019ce:	d803      	bhi.n	80019d8 <__aeabi_ddiv+0x3d8>
 80019d0:	428a      	cmp	r2, r1
 80019d2:	d901      	bls.n	80019d8 <__aeabi_ddiv+0x3d8>
 80019d4:	1e83      	subs	r3, r0, #2
 80019d6:	1989      	adds	r1, r1, r6
 80019d8:	043f      	lsls	r7, r7, #16
 80019da:	1a89      	subs	r1, r1, r2
 80019dc:	003a      	movs	r2, r7
 80019de:	9f03      	ldr	r7, [sp, #12]
 80019e0:	431a      	orrs	r2, r3
 80019e2:	0038      	movs	r0, r7
 80019e4:	0413      	lsls	r3, r2, #16
 80019e6:	0c1b      	lsrs	r3, r3, #16
 80019e8:	4358      	muls	r0, r3
 80019ea:	4681      	mov	r9, r0
 80019ec:	9802      	ldr	r0, [sp, #8]
 80019ee:	0c15      	lsrs	r5, r2, #16
 80019f0:	436f      	muls	r7, r5
 80019f2:	4343      	muls	r3, r0
 80019f4:	4345      	muls	r5, r0
 80019f6:	4648      	mov	r0, r9
 80019f8:	0c00      	lsrs	r0, r0, #16
 80019fa:	4684      	mov	ip, r0
 80019fc:	19db      	adds	r3, r3, r7
 80019fe:	4463      	add	r3, ip
 8001a00:	429f      	cmp	r7, r3
 8001a02:	d903      	bls.n	8001a0c <__aeabi_ddiv+0x40c>
 8001a04:	2080      	movs	r0, #128	; 0x80
 8001a06:	0240      	lsls	r0, r0, #9
 8001a08:	4684      	mov	ip, r0
 8001a0a:	4465      	add	r5, ip
 8001a0c:	4648      	mov	r0, r9
 8001a0e:	0c1f      	lsrs	r7, r3, #16
 8001a10:	0400      	lsls	r0, r0, #16
 8001a12:	041b      	lsls	r3, r3, #16
 8001a14:	0c00      	lsrs	r0, r0, #16
 8001a16:	197d      	adds	r5, r7, r5
 8001a18:	1818      	adds	r0, r3, r0
 8001a1a:	42a9      	cmp	r1, r5
 8001a1c:	d200      	bcs.n	8001a20 <__aeabi_ddiv+0x420>
 8001a1e:	e084      	b.n	8001b2a <__aeabi_ddiv+0x52a>
 8001a20:	d100      	bne.n	8001a24 <__aeabi_ddiv+0x424>
 8001a22:	e07f      	b.n	8001b24 <__aeabi_ddiv+0x524>
 8001a24:	2301      	movs	r3, #1
 8001a26:	431a      	orrs	r2, r3
 8001a28:	e657      	b.n	80016da <__aeabi_ddiv+0xda>
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	464a      	mov	r2, r9
 8001a2e:	031b      	lsls	r3, r3, #12
 8001a30:	4313      	orrs	r3, r2
 8001a32:	031b      	lsls	r3, r3, #12
 8001a34:	0b1b      	lsrs	r3, r3, #12
 8001a36:	46aa      	mov	sl, r5
 8001a38:	4a6f      	ldr	r2, [pc, #444]	; (8001bf8 <__aeabi_ddiv+0x5f8>)
 8001a3a:	e66f      	b.n	800171c <__aeabi_ddiv+0x11c>
 8001a3c:	42ba      	cmp	r2, r7
 8001a3e:	d900      	bls.n	8001a42 <__aeabi_ddiv+0x442>
 8001a40:	e735      	b.n	80018ae <__aeabi_ddiv+0x2ae>
 8001a42:	464b      	mov	r3, r9
 8001a44:	07dc      	lsls	r4, r3, #31
 8001a46:	0858      	lsrs	r0, r3, #1
 8001a48:	087b      	lsrs	r3, r7, #1
 8001a4a:	431c      	orrs	r4, r3
 8001a4c:	07ff      	lsls	r7, r7, #31
 8001a4e:	e734      	b.n	80018ba <__aeabi_ddiv+0x2ba>
 8001a50:	2400      	movs	r4, #0
 8001a52:	42af      	cmp	r7, r5
 8001a54:	d289      	bcs.n	800196a <__aeabi_ddiv+0x36a>
 8001a56:	4447      	add	r7, r8
 8001a58:	4547      	cmp	r7, r8
 8001a5a:	41a4      	sbcs	r4, r4
 8001a5c:	465b      	mov	r3, fp
 8001a5e:	4264      	negs	r4, r4
 8001a60:	19a4      	adds	r4, r4, r6
 8001a62:	1864      	adds	r4, r4, r1
 8001a64:	3b01      	subs	r3, #1
 8001a66:	42a6      	cmp	r6, r4
 8001a68:	d21e      	bcs.n	8001aa8 <__aeabi_ddiv+0x4a8>
 8001a6a:	42a0      	cmp	r0, r4
 8001a6c:	d86d      	bhi.n	8001b4a <__aeabi_ddiv+0x54a>
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_ddiv+0x472>
 8001a70:	e0b6      	b.n	8001be0 <__aeabi_ddiv+0x5e0>
 8001a72:	1a24      	subs	r4, r4, r0
 8001a74:	469b      	mov	fp, r3
 8001a76:	e778      	b.n	800196a <__aeabi_ddiv+0x36a>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	465a      	mov	r2, fp
 8001a7c:	3b28      	subs	r3, #40	; 0x28
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	2700      	movs	r7, #0
 8001a82:	4691      	mov	r9, r2
 8001a84:	e688      	b.n	8001798 <__aeabi_ddiv+0x198>
 8001a86:	4658      	mov	r0, fp
 8001a88:	f001 f8e0 	bl	8002c4c <__clzsi2>
 8001a8c:	3020      	adds	r0, #32
 8001a8e:	e672      	b.n	8001776 <__aeabi_ddiv+0x176>
 8001a90:	0003      	movs	r3, r0
 8001a92:	4652      	mov	r2, sl
 8001a94:	3b28      	subs	r3, #40	; 0x28
 8001a96:	409a      	lsls	r2, r3
 8001a98:	4693      	mov	fp, r2
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	e6b4      	b.n	8001808 <__aeabi_ddiv+0x208>
 8001a9e:	4650      	mov	r0, sl
 8001aa0:	f001 f8d4 	bl	8002c4c <__clzsi2>
 8001aa4:	3020      	adds	r0, #32
 8001aa6:	e69a      	b.n	80017de <__aeabi_ddiv+0x1de>
 8001aa8:	42a6      	cmp	r6, r4
 8001aaa:	d1e2      	bne.n	8001a72 <__aeabi_ddiv+0x472>
 8001aac:	45b8      	cmp	r8, r7
 8001aae:	d9dc      	bls.n	8001a6a <__aeabi_ddiv+0x46a>
 8001ab0:	1a34      	subs	r4, r6, r0
 8001ab2:	469b      	mov	fp, r3
 8001ab4:	e759      	b.n	800196a <__aeabi_ddiv+0x36a>
 8001ab6:	2b1f      	cmp	r3, #31
 8001ab8:	dc65      	bgt.n	8001b86 <__aeabi_ddiv+0x586>
 8001aba:	4c50      	ldr	r4, [pc, #320]	; (8001bfc <__aeabi_ddiv+0x5fc>)
 8001abc:	9900      	ldr	r1, [sp, #0]
 8001abe:	46a4      	mov	ip, r4
 8001ac0:	465c      	mov	r4, fp
 8001ac2:	4461      	add	r1, ip
 8001ac4:	0008      	movs	r0, r1
 8001ac6:	408c      	lsls	r4, r1
 8001ac8:	0011      	movs	r1, r2
 8001aca:	4082      	lsls	r2, r0
 8001acc:	40d9      	lsrs	r1, r3
 8001ace:	1e50      	subs	r0, r2, #1
 8001ad0:	4182      	sbcs	r2, r0
 8001ad2:	430c      	orrs	r4, r1
 8001ad4:	4314      	orrs	r4, r2
 8001ad6:	465a      	mov	r2, fp
 8001ad8:	40da      	lsrs	r2, r3
 8001ada:	0013      	movs	r3, r2
 8001adc:	0762      	lsls	r2, r4, #29
 8001ade:	d009      	beq.n	8001af4 <__aeabi_ddiv+0x4f4>
 8001ae0:	220f      	movs	r2, #15
 8001ae2:	4022      	ands	r2, r4
 8001ae4:	2a04      	cmp	r2, #4
 8001ae6:	d005      	beq.n	8001af4 <__aeabi_ddiv+0x4f4>
 8001ae8:	0022      	movs	r2, r4
 8001aea:	1d14      	adds	r4, r2, #4
 8001aec:	4294      	cmp	r4, r2
 8001aee:	4189      	sbcs	r1, r1
 8001af0:	4249      	negs	r1, r1
 8001af2:	185b      	adds	r3, r3, r1
 8001af4:	021a      	lsls	r2, r3, #8
 8001af6:	d562      	bpl.n	8001bbe <__aeabi_ddiv+0x5be>
 8001af8:	2201      	movs	r2, #1
 8001afa:	2300      	movs	r3, #0
 8001afc:	2700      	movs	r7, #0
 8001afe:	e60d      	b.n	800171c <__aeabi_ddiv+0x11c>
 8001b00:	428a      	cmp	r2, r1
 8001b02:	d800      	bhi.n	8001b06 <__aeabi_ddiv+0x506>
 8001b04:	e70a      	b.n	800191c <__aeabi_ddiv+0x31c>
 8001b06:	1e83      	subs	r3, r0, #2
 8001b08:	1989      	adds	r1, r1, r6
 8001b0a:	e707      	b.n	800191c <__aeabi_ddiv+0x31c>
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d100      	bne.n	8001b16 <__aeabi_ddiv+0x516>
 8001b14:	e5e6      	b.n	80016e4 <__aeabi_ddiv+0xe4>
 8001b16:	1d17      	adds	r7, r2, #4
 8001b18:	4297      	cmp	r7, r2
 8001b1a:	4192      	sbcs	r2, r2
 8001b1c:	4253      	negs	r3, r2
 8001b1e:	449b      	add	fp, r3
 8001b20:	08fa      	lsrs	r2, r7, #3
 8001b22:	e5e0      	b.n	80016e6 <__aeabi_ddiv+0xe6>
 8001b24:	2800      	cmp	r0, #0
 8001b26:	d100      	bne.n	8001b2a <__aeabi_ddiv+0x52a>
 8001b28:	e5d7      	b.n	80016da <__aeabi_ddiv+0xda>
 8001b2a:	1871      	adds	r1, r6, r1
 8001b2c:	1e53      	subs	r3, r2, #1
 8001b2e:	42b1      	cmp	r1, r6
 8001b30:	d327      	bcc.n	8001b82 <__aeabi_ddiv+0x582>
 8001b32:	42a9      	cmp	r1, r5
 8001b34:	d315      	bcc.n	8001b62 <__aeabi_ddiv+0x562>
 8001b36:	d058      	beq.n	8001bea <__aeabi_ddiv+0x5ea>
 8001b38:	001a      	movs	r2, r3
 8001b3a:	e773      	b.n	8001a24 <__aeabi_ddiv+0x424>
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	dc00      	bgt.n	8001b42 <__aeabi_ddiv+0x542>
 8001b40:	e604      	b.n	800174c <__aeabi_ddiv+0x14c>
 8001b42:	2301      	movs	r3, #1
 8001b44:	2200      	movs	r2, #0
 8001b46:	449b      	add	fp, r3
 8001b48:	e5cd      	b.n	80016e6 <__aeabi_ddiv+0xe6>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	4447      	add	r7, r8
 8001b4e:	4547      	cmp	r7, r8
 8001b50:	4189      	sbcs	r1, r1
 8001b52:	425b      	negs	r3, r3
 8001b54:	469c      	mov	ip, r3
 8001b56:	4249      	negs	r1, r1
 8001b58:	1989      	adds	r1, r1, r6
 8001b5a:	190c      	adds	r4, r1, r4
 8001b5c:	44e3      	add	fp, ip
 8001b5e:	1a24      	subs	r4, r4, r0
 8001b60:	e703      	b.n	800196a <__aeabi_ddiv+0x36a>
 8001b62:	4643      	mov	r3, r8
 8001b64:	005f      	lsls	r7, r3, #1
 8001b66:	4547      	cmp	r7, r8
 8001b68:	419b      	sbcs	r3, r3
 8001b6a:	46b8      	mov	r8, r7
 8001b6c:	425b      	negs	r3, r3
 8001b6e:	199e      	adds	r6, r3, r6
 8001b70:	3a02      	subs	r2, #2
 8001b72:	1989      	adds	r1, r1, r6
 8001b74:	42a9      	cmp	r1, r5
 8001b76:	d000      	beq.n	8001b7a <__aeabi_ddiv+0x57a>
 8001b78:	e754      	b.n	8001a24 <__aeabi_ddiv+0x424>
 8001b7a:	4540      	cmp	r0, r8
 8001b7c:	d000      	beq.n	8001b80 <__aeabi_ddiv+0x580>
 8001b7e:	e751      	b.n	8001a24 <__aeabi_ddiv+0x424>
 8001b80:	e5ab      	b.n	80016da <__aeabi_ddiv+0xda>
 8001b82:	001a      	movs	r2, r3
 8001b84:	e7f6      	b.n	8001b74 <__aeabi_ddiv+0x574>
 8001b86:	211f      	movs	r1, #31
 8001b88:	465f      	mov	r7, fp
 8001b8a:	4249      	negs	r1, r1
 8001b8c:	1b0c      	subs	r4, r1, r4
 8001b8e:	40e7      	lsrs	r7, r4
 8001b90:	2b20      	cmp	r3, #32
 8001b92:	d007      	beq.n	8001ba4 <__aeabi_ddiv+0x5a4>
 8001b94:	491a      	ldr	r1, [pc, #104]	; (8001c00 <__aeabi_ddiv+0x600>)
 8001b96:	9b00      	ldr	r3, [sp, #0]
 8001b98:	468c      	mov	ip, r1
 8001b9a:	4463      	add	r3, ip
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	4083      	lsls	r3, r0
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	1e50      	subs	r0, r2, #1
 8001ba6:	4182      	sbcs	r2, r0
 8001ba8:	433a      	orrs	r2, r7
 8001baa:	2707      	movs	r7, #7
 8001bac:	2300      	movs	r3, #0
 8001bae:	4017      	ands	r7, r2
 8001bb0:	d009      	beq.n	8001bc6 <__aeabi_ddiv+0x5c6>
 8001bb2:	210f      	movs	r1, #15
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	4011      	ands	r1, r2
 8001bb8:	0014      	movs	r4, r2
 8001bba:	2904      	cmp	r1, #4
 8001bbc:	d195      	bne.n	8001aea <__aeabi_ddiv+0x4ea>
 8001bbe:	0022      	movs	r2, r4
 8001bc0:	075f      	lsls	r7, r3, #29
 8001bc2:	025b      	lsls	r3, r3, #9
 8001bc4:	0b1b      	lsrs	r3, r3, #12
 8001bc6:	08d2      	lsrs	r2, r2, #3
 8001bc8:	4317      	orrs	r7, r2
 8001bca:	2200      	movs	r2, #0
 8001bcc:	e5a6      	b.n	800171c <__aeabi_ddiv+0x11c>
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	4659      	mov	r1, fp
 8001bd2:	031b      	lsls	r3, r3, #12
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	031b      	lsls	r3, r3, #12
 8001bd8:	0017      	movs	r7, r2
 8001bda:	0b1b      	lsrs	r3, r3, #12
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <__aeabi_ddiv+0x5f8>)
 8001bde:	e59d      	b.n	800171c <__aeabi_ddiv+0x11c>
 8001be0:	42bd      	cmp	r5, r7
 8001be2:	d8b2      	bhi.n	8001b4a <__aeabi_ddiv+0x54a>
 8001be4:	469b      	mov	fp, r3
 8001be6:	2400      	movs	r4, #0
 8001be8:	e6bf      	b.n	800196a <__aeabi_ddiv+0x36a>
 8001bea:	4580      	cmp	r8, r0
 8001bec:	d3b9      	bcc.n	8001b62 <__aeabi_ddiv+0x562>
 8001bee:	001a      	movs	r2, r3
 8001bf0:	e7c3      	b.n	8001b7a <__aeabi_ddiv+0x57a>
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	000003ff 	.word	0x000003ff
 8001bf8:	000007ff 	.word	0x000007ff
 8001bfc:	0000041e 	.word	0x0000041e
 8001c00:	0000043e 	.word	0x0000043e

08001c04 <__eqdf2>:
 8001c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c06:	464f      	mov	r7, r9
 8001c08:	4646      	mov	r6, r8
 8001c0a:	46d6      	mov	lr, sl
 8001c0c:	4684      	mov	ip, r0
 8001c0e:	b5c0      	push	{r6, r7, lr}
 8001c10:	4680      	mov	r8, r0
 8001c12:	4e19      	ldr	r6, [pc, #100]	; (8001c78 <__eqdf2+0x74>)
 8001c14:	0318      	lsls	r0, r3, #12
 8001c16:	030f      	lsls	r7, r1, #12
 8001c18:	004d      	lsls	r5, r1, #1
 8001c1a:	0b00      	lsrs	r0, r0, #12
 8001c1c:	005c      	lsls	r4, r3, #1
 8001c1e:	4682      	mov	sl, r0
 8001c20:	0b3f      	lsrs	r7, r7, #12
 8001c22:	0d6d      	lsrs	r5, r5, #21
 8001c24:	0fc9      	lsrs	r1, r1, #31
 8001c26:	4691      	mov	r9, r2
 8001c28:	0d64      	lsrs	r4, r4, #21
 8001c2a:	0fdb      	lsrs	r3, r3, #31
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	42b5      	cmp	r5, r6
 8001c30:	d00a      	beq.n	8001c48 <__eqdf2+0x44>
 8001c32:	42b4      	cmp	r4, r6
 8001c34:	d003      	beq.n	8001c3e <__eqdf2+0x3a>
 8001c36:	42a5      	cmp	r5, r4
 8001c38:	d101      	bne.n	8001c3e <__eqdf2+0x3a>
 8001c3a:	4557      	cmp	r7, sl
 8001c3c:	d00c      	beq.n	8001c58 <__eqdf2+0x54>
 8001c3e:	bc1c      	pop	{r2, r3, r4}
 8001c40:	4690      	mov	r8, r2
 8001c42:	4699      	mov	r9, r3
 8001c44:	46a2      	mov	sl, r4
 8001c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c48:	4666      	mov	r6, ip
 8001c4a:	433e      	orrs	r6, r7
 8001c4c:	d1f7      	bne.n	8001c3e <__eqdf2+0x3a>
 8001c4e:	42ac      	cmp	r4, r5
 8001c50:	d1f5      	bne.n	8001c3e <__eqdf2+0x3a>
 8001c52:	4654      	mov	r4, sl
 8001c54:	4314      	orrs	r4, r2
 8001c56:	d1f2      	bne.n	8001c3e <__eqdf2+0x3a>
 8001c58:	2001      	movs	r0, #1
 8001c5a:	45c8      	cmp	r8, r9
 8001c5c:	d1ef      	bne.n	8001c3e <__eqdf2+0x3a>
 8001c5e:	4299      	cmp	r1, r3
 8001c60:	d007      	beq.n	8001c72 <__eqdf2+0x6e>
 8001c62:	2d00      	cmp	r5, #0
 8001c64:	d1eb      	bne.n	8001c3e <__eqdf2+0x3a>
 8001c66:	4663      	mov	r3, ip
 8001c68:	431f      	orrs	r7, r3
 8001c6a:	0038      	movs	r0, r7
 8001c6c:	1e47      	subs	r7, r0, #1
 8001c6e:	41b8      	sbcs	r0, r7
 8001c70:	e7e5      	b.n	8001c3e <__eqdf2+0x3a>
 8001c72:	2000      	movs	r0, #0
 8001c74:	e7e3      	b.n	8001c3e <__eqdf2+0x3a>
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	000007ff 	.word	0x000007ff

08001c7c <__gedf2>:
 8001c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7e:	464f      	mov	r7, r9
 8001c80:	4646      	mov	r6, r8
 8001c82:	46d6      	mov	lr, sl
 8001c84:	004d      	lsls	r5, r1, #1
 8001c86:	b5c0      	push	{r6, r7, lr}
 8001c88:	030e      	lsls	r6, r1, #12
 8001c8a:	0fc9      	lsrs	r1, r1, #31
 8001c8c:	468a      	mov	sl, r1
 8001c8e:	492c      	ldr	r1, [pc, #176]	; (8001d40 <__gedf2+0xc4>)
 8001c90:	031f      	lsls	r7, r3, #12
 8001c92:	005c      	lsls	r4, r3, #1
 8001c94:	4680      	mov	r8, r0
 8001c96:	0b36      	lsrs	r6, r6, #12
 8001c98:	0d6d      	lsrs	r5, r5, #21
 8001c9a:	4691      	mov	r9, r2
 8001c9c:	0b3f      	lsrs	r7, r7, #12
 8001c9e:	0d64      	lsrs	r4, r4, #21
 8001ca0:	0fdb      	lsrs	r3, r3, #31
 8001ca2:	428d      	cmp	r5, r1
 8001ca4:	d01e      	beq.n	8001ce4 <__gedf2+0x68>
 8001ca6:	428c      	cmp	r4, r1
 8001ca8:	d016      	beq.n	8001cd8 <__gedf2+0x5c>
 8001caa:	2d00      	cmp	r5, #0
 8001cac:	d11e      	bne.n	8001cec <__gedf2+0x70>
 8001cae:	4330      	orrs	r0, r6
 8001cb0:	4684      	mov	ip, r0
 8001cb2:	2c00      	cmp	r4, #0
 8001cb4:	d101      	bne.n	8001cba <__gedf2+0x3e>
 8001cb6:	433a      	orrs	r2, r7
 8001cb8:	d023      	beq.n	8001d02 <__gedf2+0x86>
 8001cba:	4662      	mov	r2, ip
 8001cbc:	2a00      	cmp	r2, #0
 8001cbe:	d01a      	beq.n	8001cf6 <__gedf2+0x7a>
 8001cc0:	459a      	cmp	sl, r3
 8001cc2:	d029      	beq.n	8001d18 <__gedf2+0x9c>
 8001cc4:	4651      	mov	r1, sl
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	3901      	subs	r1, #1
 8001cca:	4008      	ands	r0, r1
 8001ccc:	3801      	subs	r0, #1
 8001cce:	bc1c      	pop	{r2, r3, r4}
 8001cd0:	4690      	mov	r8, r2
 8001cd2:	4699      	mov	r9, r3
 8001cd4:	46a2      	mov	sl, r4
 8001cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd8:	0039      	movs	r1, r7
 8001cda:	4311      	orrs	r1, r2
 8001cdc:	d0e5      	beq.n	8001caa <__gedf2+0x2e>
 8001cde:	2002      	movs	r0, #2
 8001ce0:	4240      	negs	r0, r0
 8001ce2:	e7f4      	b.n	8001cce <__gedf2+0x52>
 8001ce4:	4330      	orrs	r0, r6
 8001ce6:	d1fa      	bne.n	8001cde <__gedf2+0x62>
 8001ce8:	42ac      	cmp	r4, r5
 8001cea:	d00f      	beq.n	8001d0c <__gedf2+0x90>
 8001cec:	2c00      	cmp	r4, #0
 8001cee:	d10f      	bne.n	8001d10 <__gedf2+0x94>
 8001cf0:	433a      	orrs	r2, r7
 8001cf2:	d0e7      	beq.n	8001cc4 <__gedf2+0x48>
 8001cf4:	e00c      	b.n	8001d10 <__gedf2+0x94>
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	4393      	bics	r3, r2
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	3001      	adds	r0, #1
 8001d00:	e7e5      	b.n	8001cce <__gedf2+0x52>
 8001d02:	4663      	mov	r3, ip
 8001d04:	2000      	movs	r0, #0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0e1      	beq.n	8001cce <__gedf2+0x52>
 8001d0a:	e7db      	b.n	8001cc4 <__gedf2+0x48>
 8001d0c:	433a      	orrs	r2, r7
 8001d0e:	d1e6      	bne.n	8001cde <__gedf2+0x62>
 8001d10:	459a      	cmp	sl, r3
 8001d12:	d1d7      	bne.n	8001cc4 <__gedf2+0x48>
 8001d14:	42a5      	cmp	r5, r4
 8001d16:	dcd5      	bgt.n	8001cc4 <__gedf2+0x48>
 8001d18:	42a5      	cmp	r5, r4
 8001d1a:	db05      	blt.n	8001d28 <__gedf2+0xac>
 8001d1c:	42be      	cmp	r6, r7
 8001d1e:	d8d1      	bhi.n	8001cc4 <__gedf2+0x48>
 8001d20:	d008      	beq.n	8001d34 <__gedf2+0xb8>
 8001d22:	2000      	movs	r0, #0
 8001d24:	42be      	cmp	r6, r7
 8001d26:	d2d2      	bcs.n	8001cce <__gedf2+0x52>
 8001d28:	4650      	mov	r0, sl
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	3801      	subs	r0, #1
 8001d2e:	4398      	bics	r0, r3
 8001d30:	3001      	adds	r0, #1
 8001d32:	e7cc      	b.n	8001cce <__gedf2+0x52>
 8001d34:	45c8      	cmp	r8, r9
 8001d36:	d8c5      	bhi.n	8001cc4 <__gedf2+0x48>
 8001d38:	2000      	movs	r0, #0
 8001d3a:	45c8      	cmp	r8, r9
 8001d3c:	d3f4      	bcc.n	8001d28 <__gedf2+0xac>
 8001d3e:	e7c6      	b.n	8001cce <__gedf2+0x52>
 8001d40:	000007ff 	.word	0x000007ff

08001d44 <__ledf2>:
 8001d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d46:	464f      	mov	r7, r9
 8001d48:	4646      	mov	r6, r8
 8001d4a:	46d6      	mov	lr, sl
 8001d4c:	004d      	lsls	r5, r1, #1
 8001d4e:	b5c0      	push	{r6, r7, lr}
 8001d50:	030e      	lsls	r6, r1, #12
 8001d52:	0fc9      	lsrs	r1, r1, #31
 8001d54:	468a      	mov	sl, r1
 8001d56:	492e      	ldr	r1, [pc, #184]	; (8001e10 <__ledf2+0xcc>)
 8001d58:	031f      	lsls	r7, r3, #12
 8001d5a:	005c      	lsls	r4, r3, #1
 8001d5c:	4680      	mov	r8, r0
 8001d5e:	0b36      	lsrs	r6, r6, #12
 8001d60:	0d6d      	lsrs	r5, r5, #21
 8001d62:	4691      	mov	r9, r2
 8001d64:	0b3f      	lsrs	r7, r7, #12
 8001d66:	0d64      	lsrs	r4, r4, #21
 8001d68:	0fdb      	lsrs	r3, r3, #31
 8001d6a:	428d      	cmp	r5, r1
 8001d6c:	d018      	beq.n	8001da0 <__ledf2+0x5c>
 8001d6e:	428c      	cmp	r4, r1
 8001d70:	d011      	beq.n	8001d96 <__ledf2+0x52>
 8001d72:	2d00      	cmp	r5, #0
 8001d74:	d118      	bne.n	8001da8 <__ledf2+0x64>
 8001d76:	4330      	orrs	r0, r6
 8001d78:	4684      	mov	ip, r0
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	d11e      	bne.n	8001dbc <__ledf2+0x78>
 8001d7e:	433a      	orrs	r2, r7
 8001d80:	d11c      	bne.n	8001dbc <__ledf2+0x78>
 8001d82:	4663      	mov	r3, ip
 8001d84:	2000      	movs	r0, #0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d030      	beq.n	8001dec <__ledf2+0xa8>
 8001d8a:	4651      	mov	r1, sl
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	3901      	subs	r1, #1
 8001d90:	4008      	ands	r0, r1
 8001d92:	3801      	subs	r0, #1
 8001d94:	e02a      	b.n	8001dec <__ledf2+0xa8>
 8001d96:	0039      	movs	r1, r7
 8001d98:	4311      	orrs	r1, r2
 8001d9a:	d0ea      	beq.n	8001d72 <__ledf2+0x2e>
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	e025      	b.n	8001dec <__ledf2+0xa8>
 8001da0:	4330      	orrs	r0, r6
 8001da2:	d1fb      	bne.n	8001d9c <__ledf2+0x58>
 8001da4:	42ac      	cmp	r4, r5
 8001da6:	d026      	beq.n	8001df6 <__ledf2+0xb2>
 8001da8:	2c00      	cmp	r4, #0
 8001daa:	d126      	bne.n	8001dfa <__ledf2+0xb6>
 8001dac:	433a      	orrs	r2, r7
 8001dae:	d124      	bne.n	8001dfa <__ledf2+0xb6>
 8001db0:	4651      	mov	r1, sl
 8001db2:	2002      	movs	r0, #2
 8001db4:	3901      	subs	r1, #1
 8001db6:	4008      	ands	r0, r1
 8001db8:	3801      	subs	r0, #1
 8001dba:	e017      	b.n	8001dec <__ledf2+0xa8>
 8001dbc:	4662      	mov	r2, ip
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	d00f      	beq.n	8001de2 <__ledf2+0x9e>
 8001dc2:	459a      	cmp	sl, r3
 8001dc4:	d1e1      	bne.n	8001d8a <__ledf2+0x46>
 8001dc6:	42a5      	cmp	r5, r4
 8001dc8:	db05      	blt.n	8001dd6 <__ledf2+0x92>
 8001dca:	42be      	cmp	r6, r7
 8001dcc:	d8dd      	bhi.n	8001d8a <__ledf2+0x46>
 8001dce:	d019      	beq.n	8001e04 <__ledf2+0xc0>
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	42be      	cmp	r6, r7
 8001dd4:	d20a      	bcs.n	8001dec <__ledf2+0xa8>
 8001dd6:	4650      	mov	r0, sl
 8001dd8:	2301      	movs	r3, #1
 8001dda:	3801      	subs	r0, #1
 8001ddc:	4398      	bics	r0, r3
 8001dde:	3001      	adds	r0, #1
 8001de0:	e004      	b.n	8001dec <__ledf2+0xa8>
 8001de2:	2201      	movs	r2, #1
 8001de4:	3b01      	subs	r3, #1
 8001de6:	4393      	bics	r3, r2
 8001de8:	0018      	movs	r0, r3
 8001dea:	3001      	adds	r0, #1
 8001dec:	bc1c      	pop	{r2, r3, r4}
 8001dee:	4690      	mov	r8, r2
 8001df0:	4699      	mov	r9, r3
 8001df2:	46a2      	mov	sl, r4
 8001df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df6:	433a      	orrs	r2, r7
 8001df8:	d1d0      	bne.n	8001d9c <__ledf2+0x58>
 8001dfa:	459a      	cmp	sl, r3
 8001dfc:	d1c5      	bne.n	8001d8a <__ledf2+0x46>
 8001dfe:	42a5      	cmp	r5, r4
 8001e00:	dcc3      	bgt.n	8001d8a <__ledf2+0x46>
 8001e02:	e7e0      	b.n	8001dc6 <__ledf2+0x82>
 8001e04:	45c8      	cmp	r8, r9
 8001e06:	d8c0      	bhi.n	8001d8a <__ledf2+0x46>
 8001e08:	2000      	movs	r0, #0
 8001e0a:	45c8      	cmp	r8, r9
 8001e0c:	d3e3      	bcc.n	8001dd6 <__ledf2+0x92>
 8001e0e:	e7ed      	b.n	8001dec <__ledf2+0xa8>
 8001e10:	000007ff 	.word	0x000007ff

08001e14 <__aeabi_dmul>:
 8001e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e16:	4657      	mov	r7, sl
 8001e18:	46de      	mov	lr, fp
 8001e1a:	464e      	mov	r6, r9
 8001e1c:	4645      	mov	r5, r8
 8001e1e:	b5e0      	push	{r5, r6, r7, lr}
 8001e20:	4683      	mov	fp, r0
 8001e22:	0006      	movs	r6, r0
 8001e24:	030f      	lsls	r7, r1, #12
 8001e26:	0048      	lsls	r0, r1, #1
 8001e28:	b087      	sub	sp, #28
 8001e2a:	4692      	mov	sl, r2
 8001e2c:	001d      	movs	r5, r3
 8001e2e:	0b3f      	lsrs	r7, r7, #12
 8001e30:	0d40      	lsrs	r0, r0, #21
 8001e32:	0fcc      	lsrs	r4, r1, #31
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d100      	bne.n	8001e3a <__aeabi_dmul+0x26>
 8001e38:	e06f      	b.n	8001f1a <__aeabi_dmul+0x106>
 8001e3a:	4bde      	ldr	r3, [pc, #888]	; (80021b4 <__aeabi_dmul+0x3a0>)
 8001e3c:	4298      	cmp	r0, r3
 8001e3e:	d038      	beq.n	8001eb2 <__aeabi_dmul+0x9e>
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	00ff      	lsls	r7, r7, #3
 8001e44:	041b      	lsls	r3, r3, #16
 8001e46:	431f      	orrs	r7, r3
 8001e48:	0f73      	lsrs	r3, r6, #29
 8001e4a:	433b      	orrs	r3, r7
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	4bda      	ldr	r3, [pc, #872]	; (80021b8 <__aeabi_dmul+0x3a4>)
 8001e50:	2700      	movs	r7, #0
 8001e52:	4699      	mov	r9, r3
 8001e54:	2300      	movs	r3, #0
 8001e56:	469b      	mov	fp, r3
 8001e58:	00f6      	lsls	r6, r6, #3
 8001e5a:	4481      	add	r9, r0
 8001e5c:	032b      	lsls	r3, r5, #12
 8001e5e:	0069      	lsls	r1, r5, #1
 8001e60:	0b1b      	lsrs	r3, r3, #12
 8001e62:	4652      	mov	r2, sl
 8001e64:	4698      	mov	r8, r3
 8001e66:	0d49      	lsrs	r1, r1, #21
 8001e68:	0fed      	lsrs	r5, r5, #31
 8001e6a:	2900      	cmp	r1, #0
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dmul+0x5c>
 8001e6e:	e085      	b.n	8001f7c <__aeabi_dmul+0x168>
 8001e70:	4bd0      	ldr	r3, [pc, #832]	; (80021b4 <__aeabi_dmul+0x3a0>)
 8001e72:	4299      	cmp	r1, r3
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dmul+0x64>
 8001e76:	e073      	b.n	8001f60 <__aeabi_dmul+0x14c>
 8001e78:	4643      	mov	r3, r8
 8001e7a:	00da      	lsls	r2, r3, #3
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	041b      	lsls	r3, r3, #16
 8001e80:	4313      	orrs	r3, r2
 8001e82:	4652      	mov	r2, sl
 8001e84:	48cc      	ldr	r0, [pc, #816]	; (80021b8 <__aeabi_dmul+0x3a4>)
 8001e86:	0f52      	lsrs	r2, r2, #29
 8001e88:	4684      	mov	ip, r0
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	4652      	mov	r2, sl
 8001e8e:	2000      	movs	r0, #0
 8001e90:	4461      	add	r1, ip
 8001e92:	00d2      	lsls	r2, r2, #3
 8001e94:	4489      	add	r9, r1
 8001e96:	0021      	movs	r1, r4
 8001e98:	4069      	eors	r1, r5
 8001e9a:	9100      	str	r1, [sp, #0]
 8001e9c:	468c      	mov	ip, r1
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	4449      	add	r1, r9
 8001ea2:	468a      	mov	sl, r1
 8001ea4:	2f0f      	cmp	r7, #15
 8001ea6:	d900      	bls.n	8001eaa <__aeabi_dmul+0x96>
 8001ea8:	e090      	b.n	8001fcc <__aeabi_dmul+0x1b8>
 8001eaa:	49c4      	ldr	r1, [pc, #784]	; (80021bc <__aeabi_dmul+0x3a8>)
 8001eac:	00bf      	lsls	r7, r7, #2
 8001eae:	59cf      	ldr	r7, [r1, r7]
 8001eb0:	46bf      	mov	pc, r7
 8001eb2:	465b      	mov	r3, fp
 8001eb4:	433b      	orrs	r3, r7
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	d000      	beq.n	8001ebc <__aeabi_dmul+0xa8>
 8001eba:	e16a      	b.n	8002192 <__aeabi_dmul+0x37e>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	2708      	movs	r7, #8
 8001ec0:	2600      	movs	r6, #0
 8001ec2:	4681      	mov	r9, r0
 8001ec4:	469b      	mov	fp, r3
 8001ec6:	e7c9      	b.n	8001e5c <__aeabi_dmul+0x48>
 8001ec8:	0032      	movs	r2, r6
 8001eca:	4658      	mov	r0, fp
 8001ecc:	9b01      	ldr	r3, [sp, #4]
 8001ece:	4661      	mov	r1, ip
 8001ed0:	9100      	str	r1, [sp, #0]
 8001ed2:	2802      	cmp	r0, #2
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dmul+0xc4>
 8001ed6:	e075      	b.n	8001fc4 <__aeabi_dmul+0x1b0>
 8001ed8:	2803      	cmp	r0, #3
 8001eda:	d100      	bne.n	8001ede <__aeabi_dmul+0xca>
 8001edc:	e1fe      	b.n	80022dc <__aeabi_dmul+0x4c8>
 8001ede:	2801      	cmp	r0, #1
 8001ee0:	d000      	beq.n	8001ee4 <__aeabi_dmul+0xd0>
 8001ee2:	e12c      	b.n	800213e <__aeabi_dmul+0x32a>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	2700      	movs	r7, #0
 8001ee8:	2600      	movs	r6, #0
 8001eea:	2500      	movs	r5, #0
 8001eec:	033f      	lsls	r7, r7, #12
 8001eee:	0d2a      	lsrs	r2, r5, #20
 8001ef0:	0b3f      	lsrs	r7, r7, #12
 8001ef2:	48b3      	ldr	r0, [pc, #716]	; (80021c0 <__aeabi_dmul+0x3ac>)
 8001ef4:	0512      	lsls	r2, r2, #20
 8001ef6:	433a      	orrs	r2, r7
 8001ef8:	4002      	ands	r2, r0
 8001efa:	051b      	lsls	r3, r3, #20
 8001efc:	4313      	orrs	r3, r2
 8001efe:	9a00      	ldr	r2, [sp, #0]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	07d1      	lsls	r1, r2, #31
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	430b      	orrs	r3, r1
 8001f08:	0030      	movs	r0, r6
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	b007      	add	sp, #28
 8001f0e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f10:	4690      	mov	r8, r2
 8001f12:	4699      	mov	r9, r3
 8001f14:	46a2      	mov	sl, r4
 8001f16:	46ab      	mov	fp, r5
 8001f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f1a:	465b      	mov	r3, fp
 8001f1c:	433b      	orrs	r3, r7
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	d100      	bne.n	8001f24 <__aeabi_dmul+0x110>
 8001f22:	e12f      	b.n	8002184 <__aeabi_dmul+0x370>
 8001f24:	2f00      	cmp	r7, #0
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dmul+0x116>
 8001f28:	e1a5      	b.n	8002276 <__aeabi_dmul+0x462>
 8001f2a:	0038      	movs	r0, r7
 8001f2c:	f000 fe8e 	bl	8002c4c <__clzsi2>
 8001f30:	0003      	movs	r3, r0
 8001f32:	3b0b      	subs	r3, #11
 8001f34:	2b1c      	cmp	r3, #28
 8001f36:	dd00      	ble.n	8001f3a <__aeabi_dmul+0x126>
 8001f38:	e196      	b.n	8002268 <__aeabi_dmul+0x454>
 8001f3a:	221d      	movs	r2, #29
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	465a      	mov	r2, fp
 8001f40:	0001      	movs	r1, r0
 8001f42:	40da      	lsrs	r2, r3
 8001f44:	465e      	mov	r6, fp
 8001f46:	3908      	subs	r1, #8
 8001f48:	408f      	lsls	r7, r1
 8001f4a:	0013      	movs	r3, r2
 8001f4c:	408e      	lsls	r6, r1
 8001f4e:	433b      	orrs	r3, r7
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	4b9c      	ldr	r3, [pc, #624]	; (80021c4 <__aeabi_dmul+0x3b0>)
 8001f54:	2700      	movs	r7, #0
 8001f56:	1a1b      	subs	r3, r3, r0
 8001f58:	4699      	mov	r9, r3
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	469b      	mov	fp, r3
 8001f5e:	e77d      	b.n	8001e5c <__aeabi_dmul+0x48>
 8001f60:	4641      	mov	r1, r8
 8001f62:	4653      	mov	r3, sl
 8001f64:	430b      	orrs	r3, r1
 8001f66:	4993      	ldr	r1, [pc, #588]	; (80021b4 <__aeabi_dmul+0x3a0>)
 8001f68:	468c      	mov	ip, r1
 8001f6a:	44e1      	add	r9, ip
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d000      	beq.n	8001f72 <__aeabi_dmul+0x15e>
 8001f70:	e11a      	b.n	80021a8 <__aeabi_dmul+0x394>
 8001f72:	2202      	movs	r2, #2
 8001f74:	2002      	movs	r0, #2
 8001f76:	4317      	orrs	r7, r2
 8001f78:	2200      	movs	r2, #0
 8001f7a:	e78c      	b.n	8001e96 <__aeabi_dmul+0x82>
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	d100      	bne.n	8001f82 <__aeabi_dmul+0x16e>
 8001f80:	e10d      	b.n	800219e <__aeabi_dmul+0x38a>
 8001f82:	4643      	mov	r3, r8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d100      	bne.n	8001f8a <__aeabi_dmul+0x176>
 8001f88:	e181      	b.n	800228e <__aeabi_dmul+0x47a>
 8001f8a:	4640      	mov	r0, r8
 8001f8c:	f000 fe5e 	bl	8002c4c <__clzsi2>
 8001f90:	0002      	movs	r2, r0
 8001f92:	3a0b      	subs	r2, #11
 8001f94:	2a1c      	cmp	r2, #28
 8001f96:	dd00      	ble.n	8001f9a <__aeabi_dmul+0x186>
 8001f98:	e172      	b.n	8002280 <__aeabi_dmul+0x46c>
 8001f9a:	0001      	movs	r1, r0
 8001f9c:	4643      	mov	r3, r8
 8001f9e:	3908      	subs	r1, #8
 8001fa0:	408b      	lsls	r3, r1
 8001fa2:	4698      	mov	r8, r3
 8001fa4:	231d      	movs	r3, #29
 8001fa6:	1a9a      	subs	r2, r3, r2
 8001fa8:	4653      	mov	r3, sl
 8001faa:	40d3      	lsrs	r3, r2
 8001fac:	001a      	movs	r2, r3
 8001fae:	4643      	mov	r3, r8
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	4652      	mov	r2, sl
 8001fb4:	408a      	lsls	r2, r1
 8001fb6:	4649      	mov	r1, r9
 8001fb8:	1a08      	subs	r0, r1, r0
 8001fba:	4982      	ldr	r1, [pc, #520]	; (80021c4 <__aeabi_dmul+0x3b0>)
 8001fbc:	4689      	mov	r9, r1
 8001fbe:	4481      	add	r9, r0
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	e768      	b.n	8001e96 <__aeabi_dmul+0x82>
 8001fc4:	4b7b      	ldr	r3, [pc, #492]	; (80021b4 <__aeabi_dmul+0x3a0>)
 8001fc6:	2700      	movs	r7, #0
 8001fc8:	2600      	movs	r6, #0
 8001fca:	e78e      	b.n	8001eea <__aeabi_dmul+0xd6>
 8001fcc:	0c14      	lsrs	r4, r2, #16
 8001fce:	0412      	lsls	r2, r2, #16
 8001fd0:	0c12      	lsrs	r2, r2, #16
 8001fd2:	0011      	movs	r1, r2
 8001fd4:	0c37      	lsrs	r7, r6, #16
 8001fd6:	0436      	lsls	r6, r6, #16
 8001fd8:	0c35      	lsrs	r5, r6, #16
 8001fda:	4379      	muls	r1, r7
 8001fdc:	0028      	movs	r0, r5
 8001fde:	468c      	mov	ip, r1
 8001fe0:	002e      	movs	r6, r5
 8001fe2:	4360      	muls	r0, r4
 8001fe4:	4460      	add	r0, ip
 8001fe6:	4683      	mov	fp, r0
 8001fe8:	4356      	muls	r6, r2
 8001fea:	0021      	movs	r1, r4
 8001fec:	0c30      	lsrs	r0, r6, #16
 8001fee:	4680      	mov	r8, r0
 8001ff0:	4658      	mov	r0, fp
 8001ff2:	4379      	muls	r1, r7
 8001ff4:	4440      	add	r0, r8
 8001ff6:	9102      	str	r1, [sp, #8]
 8001ff8:	4584      	cmp	ip, r0
 8001ffa:	d906      	bls.n	800200a <__aeabi_dmul+0x1f6>
 8001ffc:	4688      	mov	r8, r1
 8001ffe:	2180      	movs	r1, #128	; 0x80
 8002000:	0249      	lsls	r1, r1, #9
 8002002:	468c      	mov	ip, r1
 8002004:	44e0      	add	r8, ip
 8002006:	4641      	mov	r1, r8
 8002008:	9102      	str	r1, [sp, #8]
 800200a:	0436      	lsls	r6, r6, #16
 800200c:	0c01      	lsrs	r1, r0, #16
 800200e:	0c36      	lsrs	r6, r6, #16
 8002010:	0400      	lsls	r0, r0, #16
 8002012:	468b      	mov	fp, r1
 8002014:	1981      	adds	r1, r0, r6
 8002016:	0c1e      	lsrs	r6, r3, #16
 8002018:	041b      	lsls	r3, r3, #16
 800201a:	0c1b      	lsrs	r3, r3, #16
 800201c:	9103      	str	r1, [sp, #12]
 800201e:	0019      	movs	r1, r3
 8002020:	4379      	muls	r1, r7
 8002022:	468c      	mov	ip, r1
 8002024:	0028      	movs	r0, r5
 8002026:	4375      	muls	r5, r6
 8002028:	4465      	add	r5, ip
 800202a:	46a8      	mov	r8, r5
 800202c:	4358      	muls	r0, r3
 800202e:	0c05      	lsrs	r5, r0, #16
 8002030:	4445      	add	r5, r8
 8002032:	4377      	muls	r7, r6
 8002034:	42a9      	cmp	r1, r5
 8002036:	d903      	bls.n	8002040 <__aeabi_dmul+0x22c>
 8002038:	2180      	movs	r1, #128	; 0x80
 800203a:	0249      	lsls	r1, r1, #9
 800203c:	468c      	mov	ip, r1
 800203e:	4467      	add	r7, ip
 8002040:	0c29      	lsrs	r1, r5, #16
 8002042:	468c      	mov	ip, r1
 8002044:	0039      	movs	r1, r7
 8002046:	0400      	lsls	r0, r0, #16
 8002048:	0c00      	lsrs	r0, r0, #16
 800204a:	042d      	lsls	r5, r5, #16
 800204c:	182d      	adds	r5, r5, r0
 800204e:	4461      	add	r1, ip
 8002050:	44ab      	add	fp, r5
 8002052:	9105      	str	r1, [sp, #20]
 8002054:	4659      	mov	r1, fp
 8002056:	9104      	str	r1, [sp, #16]
 8002058:	9901      	ldr	r1, [sp, #4]
 800205a:	040f      	lsls	r7, r1, #16
 800205c:	0c3f      	lsrs	r7, r7, #16
 800205e:	0c08      	lsrs	r0, r1, #16
 8002060:	0039      	movs	r1, r7
 8002062:	4351      	muls	r1, r2
 8002064:	4342      	muls	r2, r0
 8002066:	4690      	mov	r8, r2
 8002068:	0002      	movs	r2, r0
 800206a:	468c      	mov	ip, r1
 800206c:	0c09      	lsrs	r1, r1, #16
 800206e:	468b      	mov	fp, r1
 8002070:	4362      	muls	r2, r4
 8002072:	437c      	muls	r4, r7
 8002074:	4444      	add	r4, r8
 8002076:	445c      	add	r4, fp
 8002078:	45a0      	cmp	r8, r4
 800207a:	d903      	bls.n	8002084 <__aeabi_dmul+0x270>
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	0249      	lsls	r1, r1, #9
 8002080:	4688      	mov	r8, r1
 8002082:	4442      	add	r2, r8
 8002084:	0c21      	lsrs	r1, r4, #16
 8002086:	4688      	mov	r8, r1
 8002088:	4661      	mov	r1, ip
 800208a:	0409      	lsls	r1, r1, #16
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468c      	mov	ip, r1
 8002090:	0039      	movs	r1, r7
 8002092:	4359      	muls	r1, r3
 8002094:	4343      	muls	r3, r0
 8002096:	4370      	muls	r0, r6
 8002098:	437e      	muls	r6, r7
 800209a:	0c0f      	lsrs	r7, r1, #16
 800209c:	18f6      	adds	r6, r6, r3
 800209e:	0424      	lsls	r4, r4, #16
 80020a0:	19be      	adds	r6, r7, r6
 80020a2:	4464      	add	r4, ip
 80020a4:	4442      	add	r2, r8
 80020a6:	468c      	mov	ip, r1
 80020a8:	42b3      	cmp	r3, r6
 80020aa:	d903      	bls.n	80020b4 <__aeabi_dmul+0x2a0>
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	025b      	lsls	r3, r3, #9
 80020b0:	4698      	mov	r8, r3
 80020b2:	4440      	add	r0, r8
 80020b4:	9b02      	ldr	r3, [sp, #8]
 80020b6:	4661      	mov	r1, ip
 80020b8:	4698      	mov	r8, r3
 80020ba:	9b04      	ldr	r3, [sp, #16]
 80020bc:	0437      	lsls	r7, r6, #16
 80020be:	4443      	add	r3, r8
 80020c0:	469b      	mov	fp, r3
 80020c2:	45ab      	cmp	fp, r5
 80020c4:	41ad      	sbcs	r5, r5
 80020c6:	426b      	negs	r3, r5
 80020c8:	040d      	lsls	r5, r1, #16
 80020ca:	9905      	ldr	r1, [sp, #20]
 80020cc:	0c2d      	lsrs	r5, r5, #16
 80020ce:	468c      	mov	ip, r1
 80020d0:	197f      	adds	r7, r7, r5
 80020d2:	4467      	add	r7, ip
 80020d4:	18fd      	adds	r5, r7, r3
 80020d6:	46a8      	mov	r8, r5
 80020d8:	465d      	mov	r5, fp
 80020da:	192d      	adds	r5, r5, r4
 80020dc:	42a5      	cmp	r5, r4
 80020de:	41a4      	sbcs	r4, r4
 80020e0:	4693      	mov	fp, r2
 80020e2:	4264      	negs	r4, r4
 80020e4:	46a4      	mov	ip, r4
 80020e6:	44c3      	add	fp, r8
 80020e8:	44dc      	add	ip, fp
 80020ea:	428f      	cmp	r7, r1
 80020ec:	41bf      	sbcs	r7, r7
 80020ee:	4598      	cmp	r8, r3
 80020f0:	419b      	sbcs	r3, r3
 80020f2:	4593      	cmp	fp, r2
 80020f4:	4192      	sbcs	r2, r2
 80020f6:	45a4      	cmp	ip, r4
 80020f8:	41a4      	sbcs	r4, r4
 80020fa:	425b      	negs	r3, r3
 80020fc:	427f      	negs	r7, r7
 80020fe:	431f      	orrs	r7, r3
 8002100:	0c36      	lsrs	r6, r6, #16
 8002102:	4252      	negs	r2, r2
 8002104:	4264      	negs	r4, r4
 8002106:	19bf      	adds	r7, r7, r6
 8002108:	4322      	orrs	r2, r4
 800210a:	18bf      	adds	r7, r7, r2
 800210c:	4662      	mov	r2, ip
 800210e:	1838      	adds	r0, r7, r0
 8002110:	0243      	lsls	r3, r0, #9
 8002112:	0dd2      	lsrs	r2, r2, #23
 8002114:	9903      	ldr	r1, [sp, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	026a      	lsls	r2, r5, #9
 800211a:	430a      	orrs	r2, r1
 800211c:	1e50      	subs	r0, r2, #1
 800211e:	4182      	sbcs	r2, r0
 8002120:	4661      	mov	r1, ip
 8002122:	0ded      	lsrs	r5, r5, #23
 8002124:	432a      	orrs	r2, r5
 8002126:	024e      	lsls	r6, r1, #9
 8002128:	4332      	orrs	r2, r6
 800212a:	01d9      	lsls	r1, r3, #7
 800212c:	d400      	bmi.n	8002130 <__aeabi_dmul+0x31c>
 800212e:	e0b3      	b.n	8002298 <__aeabi_dmul+0x484>
 8002130:	2601      	movs	r6, #1
 8002132:	0850      	lsrs	r0, r2, #1
 8002134:	4032      	ands	r2, r6
 8002136:	4302      	orrs	r2, r0
 8002138:	07de      	lsls	r6, r3, #31
 800213a:	4332      	orrs	r2, r6
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	4c22      	ldr	r4, [pc, #136]	; (80021c8 <__aeabi_dmul+0x3b4>)
 8002140:	4454      	add	r4, sl
 8002142:	2c00      	cmp	r4, #0
 8002144:	dd62      	ble.n	800220c <__aeabi_dmul+0x3f8>
 8002146:	0751      	lsls	r1, r2, #29
 8002148:	d009      	beq.n	800215e <__aeabi_dmul+0x34a>
 800214a:	200f      	movs	r0, #15
 800214c:	4010      	ands	r0, r2
 800214e:	2804      	cmp	r0, #4
 8002150:	d005      	beq.n	800215e <__aeabi_dmul+0x34a>
 8002152:	1d10      	adds	r0, r2, #4
 8002154:	4290      	cmp	r0, r2
 8002156:	4192      	sbcs	r2, r2
 8002158:	4252      	negs	r2, r2
 800215a:	189b      	adds	r3, r3, r2
 800215c:	0002      	movs	r2, r0
 800215e:	01d9      	lsls	r1, r3, #7
 8002160:	d504      	bpl.n	800216c <__aeabi_dmul+0x358>
 8002162:	2480      	movs	r4, #128	; 0x80
 8002164:	4819      	ldr	r0, [pc, #100]	; (80021cc <__aeabi_dmul+0x3b8>)
 8002166:	00e4      	lsls	r4, r4, #3
 8002168:	4003      	ands	r3, r0
 800216a:	4454      	add	r4, sl
 800216c:	4818      	ldr	r0, [pc, #96]	; (80021d0 <__aeabi_dmul+0x3bc>)
 800216e:	4284      	cmp	r4, r0
 8002170:	dd00      	ble.n	8002174 <__aeabi_dmul+0x360>
 8002172:	e727      	b.n	8001fc4 <__aeabi_dmul+0x1b0>
 8002174:	075e      	lsls	r6, r3, #29
 8002176:	025b      	lsls	r3, r3, #9
 8002178:	08d2      	lsrs	r2, r2, #3
 800217a:	0b1f      	lsrs	r7, r3, #12
 800217c:	0563      	lsls	r3, r4, #21
 800217e:	4316      	orrs	r6, r2
 8002180:	0d5b      	lsrs	r3, r3, #21
 8002182:	e6b2      	b.n	8001eea <__aeabi_dmul+0xd6>
 8002184:	2300      	movs	r3, #0
 8002186:	4699      	mov	r9, r3
 8002188:	3301      	adds	r3, #1
 800218a:	2704      	movs	r7, #4
 800218c:	2600      	movs	r6, #0
 800218e:	469b      	mov	fp, r3
 8002190:	e664      	b.n	8001e5c <__aeabi_dmul+0x48>
 8002192:	2303      	movs	r3, #3
 8002194:	9701      	str	r7, [sp, #4]
 8002196:	4681      	mov	r9, r0
 8002198:	270c      	movs	r7, #12
 800219a:	469b      	mov	fp, r3
 800219c:	e65e      	b.n	8001e5c <__aeabi_dmul+0x48>
 800219e:	2201      	movs	r2, #1
 80021a0:	2001      	movs	r0, #1
 80021a2:	4317      	orrs	r7, r2
 80021a4:	2200      	movs	r2, #0
 80021a6:	e676      	b.n	8001e96 <__aeabi_dmul+0x82>
 80021a8:	2303      	movs	r3, #3
 80021aa:	2003      	movs	r0, #3
 80021ac:	431f      	orrs	r7, r3
 80021ae:	4643      	mov	r3, r8
 80021b0:	e671      	b.n	8001e96 <__aeabi_dmul+0x82>
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	000007ff 	.word	0x000007ff
 80021b8:	fffffc01 	.word	0xfffffc01
 80021bc:	08008b24 	.word	0x08008b24
 80021c0:	800fffff 	.word	0x800fffff
 80021c4:	fffffc0d 	.word	0xfffffc0d
 80021c8:	000003ff 	.word	0x000003ff
 80021cc:	feffffff 	.word	0xfeffffff
 80021d0:	000007fe 	.word	0x000007fe
 80021d4:	2300      	movs	r3, #0
 80021d6:	2780      	movs	r7, #128	; 0x80
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	033f      	lsls	r7, r7, #12
 80021dc:	2600      	movs	r6, #0
 80021de:	4b43      	ldr	r3, [pc, #268]	; (80022ec <__aeabi_dmul+0x4d8>)
 80021e0:	e683      	b.n	8001eea <__aeabi_dmul+0xd6>
 80021e2:	9b01      	ldr	r3, [sp, #4]
 80021e4:	0032      	movs	r2, r6
 80021e6:	46a4      	mov	ip, r4
 80021e8:	4658      	mov	r0, fp
 80021ea:	e670      	b.n	8001ece <__aeabi_dmul+0xba>
 80021ec:	46ac      	mov	ip, r5
 80021ee:	e66e      	b.n	8001ece <__aeabi_dmul+0xba>
 80021f0:	2780      	movs	r7, #128	; 0x80
 80021f2:	9901      	ldr	r1, [sp, #4]
 80021f4:	033f      	lsls	r7, r7, #12
 80021f6:	4239      	tst	r1, r7
 80021f8:	d02d      	beq.n	8002256 <__aeabi_dmul+0x442>
 80021fa:	423b      	tst	r3, r7
 80021fc:	d12b      	bne.n	8002256 <__aeabi_dmul+0x442>
 80021fe:	431f      	orrs	r7, r3
 8002200:	033f      	lsls	r7, r7, #12
 8002202:	0b3f      	lsrs	r7, r7, #12
 8002204:	9500      	str	r5, [sp, #0]
 8002206:	0016      	movs	r6, r2
 8002208:	4b38      	ldr	r3, [pc, #224]	; (80022ec <__aeabi_dmul+0x4d8>)
 800220a:	e66e      	b.n	8001eea <__aeabi_dmul+0xd6>
 800220c:	2501      	movs	r5, #1
 800220e:	1b2d      	subs	r5, r5, r4
 8002210:	2d38      	cmp	r5, #56	; 0x38
 8002212:	dd00      	ble.n	8002216 <__aeabi_dmul+0x402>
 8002214:	e666      	b.n	8001ee4 <__aeabi_dmul+0xd0>
 8002216:	2d1f      	cmp	r5, #31
 8002218:	dc40      	bgt.n	800229c <__aeabi_dmul+0x488>
 800221a:	4835      	ldr	r0, [pc, #212]	; (80022f0 <__aeabi_dmul+0x4dc>)
 800221c:	001c      	movs	r4, r3
 800221e:	4450      	add	r0, sl
 8002220:	0016      	movs	r6, r2
 8002222:	4082      	lsls	r2, r0
 8002224:	4084      	lsls	r4, r0
 8002226:	40ee      	lsrs	r6, r5
 8002228:	1e50      	subs	r0, r2, #1
 800222a:	4182      	sbcs	r2, r0
 800222c:	4334      	orrs	r4, r6
 800222e:	4314      	orrs	r4, r2
 8002230:	40eb      	lsrs	r3, r5
 8002232:	0762      	lsls	r2, r4, #29
 8002234:	d009      	beq.n	800224a <__aeabi_dmul+0x436>
 8002236:	220f      	movs	r2, #15
 8002238:	4022      	ands	r2, r4
 800223a:	2a04      	cmp	r2, #4
 800223c:	d005      	beq.n	800224a <__aeabi_dmul+0x436>
 800223e:	0022      	movs	r2, r4
 8002240:	1d14      	adds	r4, r2, #4
 8002242:	4294      	cmp	r4, r2
 8002244:	4180      	sbcs	r0, r0
 8002246:	4240      	negs	r0, r0
 8002248:	181b      	adds	r3, r3, r0
 800224a:	021a      	lsls	r2, r3, #8
 800224c:	d53e      	bpl.n	80022cc <__aeabi_dmul+0x4b8>
 800224e:	2301      	movs	r3, #1
 8002250:	2700      	movs	r7, #0
 8002252:	2600      	movs	r6, #0
 8002254:	e649      	b.n	8001eea <__aeabi_dmul+0xd6>
 8002256:	2780      	movs	r7, #128	; 0x80
 8002258:	9b01      	ldr	r3, [sp, #4]
 800225a:	033f      	lsls	r7, r7, #12
 800225c:	431f      	orrs	r7, r3
 800225e:	033f      	lsls	r7, r7, #12
 8002260:	0b3f      	lsrs	r7, r7, #12
 8002262:	9400      	str	r4, [sp, #0]
 8002264:	4b21      	ldr	r3, [pc, #132]	; (80022ec <__aeabi_dmul+0x4d8>)
 8002266:	e640      	b.n	8001eea <__aeabi_dmul+0xd6>
 8002268:	0003      	movs	r3, r0
 800226a:	465a      	mov	r2, fp
 800226c:	3b28      	subs	r3, #40	; 0x28
 800226e:	409a      	lsls	r2, r3
 8002270:	2600      	movs	r6, #0
 8002272:	9201      	str	r2, [sp, #4]
 8002274:	e66d      	b.n	8001f52 <__aeabi_dmul+0x13e>
 8002276:	4658      	mov	r0, fp
 8002278:	f000 fce8 	bl	8002c4c <__clzsi2>
 800227c:	3020      	adds	r0, #32
 800227e:	e657      	b.n	8001f30 <__aeabi_dmul+0x11c>
 8002280:	0003      	movs	r3, r0
 8002282:	4652      	mov	r2, sl
 8002284:	3b28      	subs	r3, #40	; 0x28
 8002286:	409a      	lsls	r2, r3
 8002288:	0013      	movs	r3, r2
 800228a:	2200      	movs	r2, #0
 800228c:	e693      	b.n	8001fb6 <__aeabi_dmul+0x1a2>
 800228e:	4650      	mov	r0, sl
 8002290:	f000 fcdc 	bl	8002c4c <__clzsi2>
 8002294:	3020      	adds	r0, #32
 8002296:	e67b      	b.n	8001f90 <__aeabi_dmul+0x17c>
 8002298:	46ca      	mov	sl, r9
 800229a:	e750      	b.n	800213e <__aeabi_dmul+0x32a>
 800229c:	201f      	movs	r0, #31
 800229e:	001e      	movs	r6, r3
 80022a0:	4240      	negs	r0, r0
 80022a2:	1b04      	subs	r4, r0, r4
 80022a4:	40e6      	lsrs	r6, r4
 80022a6:	2d20      	cmp	r5, #32
 80022a8:	d003      	beq.n	80022b2 <__aeabi_dmul+0x49e>
 80022aa:	4c12      	ldr	r4, [pc, #72]	; (80022f4 <__aeabi_dmul+0x4e0>)
 80022ac:	4454      	add	r4, sl
 80022ae:	40a3      	lsls	r3, r4
 80022b0:	431a      	orrs	r2, r3
 80022b2:	1e50      	subs	r0, r2, #1
 80022b4:	4182      	sbcs	r2, r0
 80022b6:	4332      	orrs	r2, r6
 80022b8:	2607      	movs	r6, #7
 80022ba:	2700      	movs	r7, #0
 80022bc:	4016      	ands	r6, r2
 80022be:	d009      	beq.n	80022d4 <__aeabi_dmul+0x4c0>
 80022c0:	200f      	movs	r0, #15
 80022c2:	2300      	movs	r3, #0
 80022c4:	4010      	ands	r0, r2
 80022c6:	0014      	movs	r4, r2
 80022c8:	2804      	cmp	r0, #4
 80022ca:	d1b9      	bne.n	8002240 <__aeabi_dmul+0x42c>
 80022cc:	0022      	movs	r2, r4
 80022ce:	075e      	lsls	r6, r3, #29
 80022d0:	025b      	lsls	r3, r3, #9
 80022d2:	0b1f      	lsrs	r7, r3, #12
 80022d4:	08d2      	lsrs	r2, r2, #3
 80022d6:	4316      	orrs	r6, r2
 80022d8:	2300      	movs	r3, #0
 80022da:	e606      	b.n	8001eea <__aeabi_dmul+0xd6>
 80022dc:	2780      	movs	r7, #128	; 0x80
 80022de:	033f      	lsls	r7, r7, #12
 80022e0:	431f      	orrs	r7, r3
 80022e2:	033f      	lsls	r7, r7, #12
 80022e4:	0b3f      	lsrs	r7, r7, #12
 80022e6:	0016      	movs	r6, r2
 80022e8:	4b00      	ldr	r3, [pc, #0]	; (80022ec <__aeabi_dmul+0x4d8>)
 80022ea:	e5fe      	b.n	8001eea <__aeabi_dmul+0xd6>
 80022ec:	000007ff 	.word	0x000007ff
 80022f0:	0000041e 	.word	0x0000041e
 80022f4:	0000043e 	.word	0x0000043e

080022f8 <__aeabi_dsub>:
 80022f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fa:	4657      	mov	r7, sl
 80022fc:	464e      	mov	r6, r9
 80022fe:	4645      	mov	r5, r8
 8002300:	46de      	mov	lr, fp
 8002302:	000c      	movs	r4, r1
 8002304:	0309      	lsls	r1, r1, #12
 8002306:	b5e0      	push	{r5, r6, r7, lr}
 8002308:	0a49      	lsrs	r1, r1, #9
 800230a:	0f46      	lsrs	r6, r0, #29
 800230c:	005f      	lsls	r7, r3, #1
 800230e:	4331      	orrs	r1, r6
 8002310:	031e      	lsls	r6, r3, #12
 8002312:	0fdb      	lsrs	r3, r3, #31
 8002314:	0a76      	lsrs	r6, r6, #9
 8002316:	469b      	mov	fp, r3
 8002318:	0f53      	lsrs	r3, r2, #29
 800231a:	4333      	orrs	r3, r6
 800231c:	4ec8      	ldr	r6, [pc, #800]	; (8002640 <__aeabi_dsub+0x348>)
 800231e:	0065      	lsls	r5, r4, #1
 8002320:	00c0      	lsls	r0, r0, #3
 8002322:	0fe4      	lsrs	r4, r4, #31
 8002324:	00d2      	lsls	r2, r2, #3
 8002326:	0d6d      	lsrs	r5, r5, #21
 8002328:	46a2      	mov	sl, r4
 800232a:	4681      	mov	r9, r0
 800232c:	0d7f      	lsrs	r7, r7, #21
 800232e:	469c      	mov	ip, r3
 8002330:	4690      	mov	r8, r2
 8002332:	42b7      	cmp	r7, r6
 8002334:	d100      	bne.n	8002338 <__aeabi_dsub+0x40>
 8002336:	e0b9      	b.n	80024ac <__aeabi_dsub+0x1b4>
 8002338:	465b      	mov	r3, fp
 800233a:	2601      	movs	r6, #1
 800233c:	4073      	eors	r3, r6
 800233e:	469b      	mov	fp, r3
 8002340:	1bee      	subs	r6, r5, r7
 8002342:	45a3      	cmp	fp, r4
 8002344:	d100      	bne.n	8002348 <__aeabi_dsub+0x50>
 8002346:	e083      	b.n	8002450 <__aeabi_dsub+0x158>
 8002348:	2e00      	cmp	r6, #0
 800234a:	dd63      	ble.n	8002414 <__aeabi_dsub+0x11c>
 800234c:	2f00      	cmp	r7, #0
 800234e:	d000      	beq.n	8002352 <__aeabi_dsub+0x5a>
 8002350:	e0b1      	b.n	80024b6 <__aeabi_dsub+0x1be>
 8002352:	4663      	mov	r3, ip
 8002354:	4313      	orrs	r3, r2
 8002356:	d100      	bne.n	800235a <__aeabi_dsub+0x62>
 8002358:	e123      	b.n	80025a2 <__aeabi_dsub+0x2aa>
 800235a:	1e73      	subs	r3, r6, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d000      	beq.n	8002362 <__aeabi_dsub+0x6a>
 8002360:	e1ba      	b.n	80026d8 <__aeabi_dsub+0x3e0>
 8002362:	1a86      	subs	r6, r0, r2
 8002364:	4663      	mov	r3, ip
 8002366:	42b0      	cmp	r0, r6
 8002368:	4180      	sbcs	r0, r0
 800236a:	2501      	movs	r5, #1
 800236c:	1ac9      	subs	r1, r1, r3
 800236e:	4240      	negs	r0, r0
 8002370:	1a09      	subs	r1, r1, r0
 8002372:	020b      	lsls	r3, r1, #8
 8002374:	d400      	bmi.n	8002378 <__aeabi_dsub+0x80>
 8002376:	e147      	b.n	8002608 <__aeabi_dsub+0x310>
 8002378:	0249      	lsls	r1, r1, #9
 800237a:	0a4b      	lsrs	r3, r1, #9
 800237c:	4698      	mov	r8, r3
 800237e:	4643      	mov	r3, r8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d100      	bne.n	8002386 <__aeabi_dsub+0x8e>
 8002384:	e189      	b.n	800269a <__aeabi_dsub+0x3a2>
 8002386:	4640      	mov	r0, r8
 8002388:	f000 fc60 	bl	8002c4c <__clzsi2>
 800238c:	0003      	movs	r3, r0
 800238e:	3b08      	subs	r3, #8
 8002390:	2b1f      	cmp	r3, #31
 8002392:	dd00      	ble.n	8002396 <__aeabi_dsub+0x9e>
 8002394:	e17c      	b.n	8002690 <__aeabi_dsub+0x398>
 8002396:	2220      	movs	r2, #32
 8002398:	0030      	movs	r0, r6
 800239a:	1ad2      	subs	r2, r2, r3
 800239c:	4641      	mov	r1, r8
 800239e:	40d0      	lsrs	r0, r2
 80023a0:	4099      	lsls	r1, r3
 80023a2:	0002      	movs	r2, r0
 80023a4:	409e      	lsls	r6, r3
 80023a6:	430a      	orrs	r2, r1
 80023a8:	429d      	cmp	r5, r3
 80023aa:	dd00      	ble.n	80023ae <__aeabi_dsub+0xb6>
 80023ac:	e16a      	b.n	8002684 <__aeabi_dsub+0x38c>
 80023ae:	1b5d      	subs	r5, r3, r5
 80023b0:	1c6b      	adds	r3, r5, #1
 80023b2:	2b1f      	cmp	r3, #31
 80023b4:	dd00      	ble.n	80023b8 <__aeabi_dsub+0xc0>
 80023b6:	e194      	b.n	80026e2 <__aeabi_dsub+0x3ea>
 80023b8:	2120      	movs	r1, #32
 80023ba:	0010      	movs	r0, r2
 80023bc:	0035      	movs	r5, r6
 80023be:	1ac9      	subs	r1, r1, r3
 80023c0:	408e      	lsls	r6, r1
 80023c2:	40da      	lsrs	r2, r3
 80023c4:	4088      	lsls	r0, r1
 80023c6:	40dd      	lsrs	r5, r3
 80023c8:	1e71      	subs	r1, r6, #1
 80023ca:	418e      	sbcs	r6, r1
 80023cc:	0011      	movs	r1, r2
 80023ce:	2207      	movs	r2, #7
 80023d0:	4328      	orrs	r0, r5
 80023d2:	2500      	movs	r5, #0
 80023d4:	4306      	orrs	r6, r0
 80023d6:	4032      	ands	r2, r6
 80023d8:	2a00      	cmp	r2, #0
 80023da:	d009      	beq.n	80023f0 <__aeabi_dsub+0xf8>
 80023dc:	230f      	movs	r3, #15
 80023de:	4033      	ands	r3, r6
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d005      	beq.n	80023f0 <__aeabi_dsub+0xf8>
 80023e4:	1d33      	adds	r3, r6, #4
 80023e6:	42b3      	cmp	r3, r6
 80023e8:	41b6      	sbcs	r6, r6
 80023ea:	4276      	negs	r6, r6
 80023ec:	1989      	adds	r1, r1, r6
 80023ee:	001e      	movs	r6, r3
 80023f0:	020b      	lsls	r3, r1, #8
 80023f2:	d400      	bmi.n	80023f6 <__aeabi_dsub+0xfe>
 80023f4:	e23d      	b.n	8002872 <__aeabi_dsub+0x57a>
 80023f6:	1c6a      	adds	r2, r5, #1
 80023f8:	4b91      	ldr	r3, [pc, #580]	; (8002640 <__aeabi_dsub+0x348>)
 80023fa:	0555      	lsls	r5, r2, #21
 80023fc:	0d6d      	lsrs	r5, r5, #21
 80023fe:	429a      	cmp	r2, r3
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x10c>
 8002402:	e119      	b.n	8002638 <__aeabi_dsub+0x340>
 8002404:	4a8f      	ldr	r2, [pc, #572]	; (8002644 <__aeabi_dsub+0x34c>)
 8002406:	08f6      	lsrs	r6, r6, #3
 8002408:	400a      	ands	r2, r1
 800240a:	0757      	lsls	r7, r2, #29
 800240c:	0252      	lsls	r2, r2, #9
 800240e:	4337      	orrs	r7, r6
 8002410:	0b12      	lsrs	r2, r2, #12
 8002412:	e09b      	b.n	800254c <__aeabi_dsub+0x254>
 8002414:	2e00      	cmp	r6, #0
 8002416:	d000      	beq.n	800241a <__aeabi_dsub+0x122>
 8002418:	e0c5      	b.n	80025a6 <__aeabi_dsub+0x2ae>
 800241a:	1c6e      	adds	r6, r5, #1
 800241c:	0576      	lsls	r6, r6, #21
 800241e:	0d76      	lsrs	r6, r6, #21
 8002420:	2e01      	cmp	r6, #1
 8002422:	dc00      	bgt.n	8002426 <__aeabi_dsub+0x12e>
 8002424:	e148      	b.n	80026b8 <__aeabi_dsub+0x3c0>
 8002426:	4667      	mov	r7, ip
 8002428:	1a86      	subs	r6, r0, r2
 800242a:	1bcb      	subs	r3, r1, r7
 800242c:	42b0      	cmp	r0, r6
 800242e:	41bf      	sbcs	r7, r7
 8002430:	427f      	negs	r7, r7
 8002432:	46b8      	mov	r8, r7
 8002434:	001f      	movs	r7, r3
 8002436:	4643      	mov	r3, r8
 8002438:	1aff      	subs	r7, r7, r3
 800243a:	003b      	movs	r3, r7
 800243c:	46b8      	mov	r8, r7
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	d500      	bpl.n	8002444 <__aeabi_dsub+0x14c>
 8002442:	e15f      	b.n	8002704 <__aeabi_dsub+0x40c>
 8002444:	4337      	orrs	r7, r6
 8002446:	d19a      	bne.n	800237e <__aeabi_dsub+0x86>
 8002448:	2200      	movs	r2, #0
 800244a:	2400      	movs	r4, #0
 800244c:	2500      	movs	r5, #0
 800244e:	e079      	b.n	8002544 <__aeabi_dsub+0x24c>
 8002450:	2e00      	cmp	r6, #0
 8002452:	dc00      	bgt.n	8002456 <__aeabi_dsub+0x15e>
 8002454:	e0fa      	b.n	800264c <__aeabi_dsub+0x354>
 8002456:	2f00      	cmp	r7, #0
 8002458:	d100      	bne.n	800245c <__aeabi_dsub+0x164>
 800245a:	e08d      	b.n	8002578 <__aeabi_dsub+0x280>
 800245c:	4b78      	ldr	r3, [pc, #480]	; (8002640 <__aeabi_dsub+0x348>)
 800245e:	429d      	cmp	r5, r3
 8002460:	d067      	beq.n	8002532 <__aeabi_dsub+0x23a>
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	4667      	mov	r7, ip
 8002466:	041b      	lsls	r3, r3, #16
 8002468:	431f      	orrs	r7, r3
 800246a:	46bc      	mov	ip, r7
 800246c:	2e38      	cmp	r6, #56	; 0x38
 800246e:	dc00      	bgt.n	8002472 <__aeabi_dsub+0x17a>
 8002470:	e152      	b.n	8002718 <__aeabi_dsub+0x420>
 8002472:	4663      	mov	r3, ip
 8002474:	4313      	orrs	r3, r2
 8002476:	1e5a      	subs	r2, r3, #1
 8002478:	4193      	sbcs	r3, r2
 800247a:	181e      	adds	r6, r3, r0
 800247c:	4286      	cmp	r6, r0
 800247e:	4180      	sbcs	r0, r0
 8002480:	4240      	negs	r0, r0
 8002482:	1809      	adds	r1, r1, r0
 8002484:	020b      	lsls	r3, r1, #8
 8002486:	d400      	bmi.n	800248a <__aeabi_dsub+0x192>
 8002488:	e0be      	b.n	8002608 <__aeabi_dsub+0x310>
 800248a:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <__aeabi_dsub+0x348>)
 800248c:	3501      	adds	r5, #1
 800248e:	429d      	cmp	r5, r3
 8002490:	d100      	bne.n	8002494 <__aeabi_dsub+0x19c>
 8002492:	e0d2      	b.n	800263a <__aeabi_dsub+0x342>
 8002494:	4a6b      	ldr	r2, [pc, #428]	; (8002644 <__aeabi_dsub+0x34c>)
 8002496:	0873      	lsrs	r3, r6, #1
 8002498:	400a      	ands	r2, r1
 800249a:	2101      	movs	r1, #1
 800249c:	400e      	ands	r6, r1
 800249e:	431e      	orrs	r6, r3
 80024a0:	0851      	lsrs	r1, r2, #1
 80024a2:	07d3      	lsls	r3, r2, #31
 80024a4:	2207      	movs	r2, #7
 80024a6:	431e      	orrs	r6, r3
 80024a8:	4032      	ands	r2, r6
 80024aa:	e795      	b.n	80023d8 <__aeabi_dsub+0xe0>
 80024ac:	001e      	movs	r6, r3
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d000      	beq.n	80024b4 <__aeabi_dsub+0x1bc>
 80024b2:	e745      	b.n	8002340 <__aeabi_dsub+0x48>
 80024b4:	e740      	b.n	8002338 <__aeabi_dsub+0x40>
 80024b6:	4b62      	ldr	r3, [pc, #392]	; (8002640 <__aeabi_dsub+0x348>)
 80024b8:	429d      	cmp	r5, r3
 80024ba:	d03a      	beq.n	8002532 <__aeabi_dsub+0x23a>
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	4667      	mov	r7, ip
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	431f      	orrs	r7, r3
 80024c4:	46bc      	mov	ip, r7
 80024c6:	2e38      	cmp	r6, #56	; 0x38
 80024c8:	dd00      	ble.n	80024cc <__aeabi_dsub+0x1d4>
 80024ca:	e0eb      	b.n	80026a4 <__aeabi_dsub+0x3ac>
 80024cc:	2e1f      	cmp	r6, #31
 80024ce:	dc00      	bgt.n	80024d2 <__aeabi_dsub+0x1da>
 80024d0:	e13a      	b.n	8002748 <__aeabi_dsub+0x450>
 80024d2:	0033      	movs	r3, r6
 80024d4:	4667      	mov	r7, ip
 80024d6:	3b20      	subs	r3, #32
 80024d8:	40df      	lsrs	r7, r3
 80024da:	003b      	movs	r3, r7
 80024dc:	2e20      	cmp	r6, #32
 80024de:	d005      	beq.n	80024ec <__aeabi_dsub+0x1f4>
 80024e0:	2740      	movs	r7, #64	; 0x40
 80024e2:	1bbf      	subs	r7, r7, r6
 80024e4:	4666      	mov	r6, ip
 80024e6:	40be      	lsls	r6, r7
 80024e8:	4332      	orrs	r2, r6
 80024ea:	4690      	mov	r8, r2
 80024ec:	4646      	mov	r6, r8
 80024ee:	1e72      	subs	r2, r6, #1
 80024f0:	4196      	sbcs	r6, r2
 80024f2:	4333      	orrs	r3, r6
 80024f4:	e0da      	b.n	80026ac <__aeabi_dsub+0x3b4>
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d100      	bne.n	80024fc <__aeabi_dsub+0x204>
 80024fa:	e214      	b.n	8002926 <__aeabi_dsub+0x62e>
 80024fc:	4663      	mov	r3, ip
 80024fe:	4313      	orrs	r3, r2
 8002500:	d100      	bne.n	8002504 <__aeabi_dsub+0x20c>
 8002502:	e168      	b.n	80027d6 <__aeabi_dsub+0x4de>
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	074e      	lsls	r6, r1, #29
 8002508:	08c0      	lsrs	r0, r0, #3
 800250a:	08c9      	lsrs	r1, r1, #3
 800250c:	031b      	lsls	r3, r3, #12
 800250e:	4306      	orrs	r6, r0
 8002510:	4219      	tst	r1, r3
 8002512:	d008      	beq.n	8002526 <__aeabi_dsub+0x22e>
 8002514:	4660      	mov	r0, ip
 8002516:	08c0      	lsrs	r0, r0, #3
 8002518:	4218      	tst	r0, r3
 800251a:	d104      	bne.n	8002526 <__aeabi_dsub+0x22e>
 800251c:	4663      	mov	r3, ip
 800251e:	0001      	movs	r1, r0
 8002520:	08d2      	lsrs	r2, r2, #3
 8002522:	075e      	lsls	r6, r3, #29
 8002524:	4316      	orrs	r6, r2
 8002526:	00f3      	lsls	r3, r6, #3
 8002528:	4699      	mov	r9, r3
 800252a:	00c9      	lsls	r1, r1, #3
 800252c:	0f72      	lsrs	r2, r6, #29
 800252e:	4d44      	ldr	r5, [pc, #272]	; (8002640 <__aeabi_dsub+0x348>)
 8002530:	4311      	orrs	r1, r2
 8002532:	464b      	mov	r3, r9
 8002534:	08de      	lsrs	r6, r3, #3
 8002536:	4b42      	ldr	r3, [pc, #264]	; (8002640 <__aeabi_dsub+0x348>)
 8002538:	074f      	lsls	r7, r1, #29
 800253a:	4337      	orrs	r7, r6
 800253c:	08ca      	lsrs	r2, r1, #3
 800253e:	429d      	cmp	r5, r3
 8002540:	d100      	bne.n	8002544 <__aeabi_dsub+0x24c>
 8002542:	e06e      	b.n	8002622 <__aeabi_dsub+0x32a>
 8002544:	0312      	lsls	r2, r2, #12
 8002546:	056d      	lsls	r5, r5, #21
 8002548:	0b12      	lsrs	r2, r2, #12
 800254a:	0d6d      	lsrs	r5, r5, #21
 800254c:	2100      	movs	r1, #0
 800254e:	0312      	lsls	r2, r2, #12
 8002550:	0b13      	lsrs	r3, r2, #12
 8002552:	0d0a      	lsrs	r2, r1, #20
 8002554:	0512      	lsls	r2, r2, #20
 8002556:	431a      	orrs	r2, r3
 8002558:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <__aeabi_dsub+0x350>)
 800255a:	052d      	lsls	r5, r5, #20
 800255c:	4013      	ands	r3, r2
 800255e:	432b      	orrs	r3, r5
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	07e4      	lsls	r4, r4, #31
 8002564:	085b      	lsrs	r3, r3, #1
 8002566:	4323      	orrs	r3, r4
 8002568:	0038      	movs	r0, r7
 800256a:	0019      	movs	r1, r3
 800256c:	bc3c      	pop	{r2, r3, r4, r5}
 800256e:	4690      	mov	r8, r2
 8002570:	4699      	mov	r9, r3
 8002572:	46a2      	mov	sl, r4
 8002574:	46ab      	mov	fp, r5
 8002576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002578:	4663      	mov	r3, ip
 800257a:	4313      	orrs	r3, r2
 800257c:	d011      	beq.n	80025a2 <__aeabi_dsub+0x2aa>
 800257e:	1e73      	subs	r3, r6, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d000      	beq.n	8002586 <__aeabi_dsub+0x28e>
 8002584:	e107      	b.n	8002796 <__aeabi_dsub+0x49e>
 8002586:	1886      	adds	r6, r0, r2
 8002588:	4286      	cmp	r6, r0
 800258a:	4180      	sbcs	r0, r0
 800258c:	4461      	add	r1, ip
 800258e:	4240      	negs	r0, r0
 8002590:	1809      	adds	r1, r1, r0
 8002592:	2501      	movs	r5, #1
 8002594:	020b      	lsls	r3, r1, #8
 8002596:	d537      	bpl.n	8002608 <__aeabi_dsub+0x310>
 8002598:	2502      	movs	r5, #2
 800259a:	e77b      	b.n	8002494 <__aeabi_dsub+0x19c>
 800259c:	003e      	movs	r6, r7
 800259e:	4661      	mov	r1, ip
 80025a0:	4691      	mov	r9, r2
 80025a2:	0035      	movs	r5, r6
 80025a4:	e7c5      	b.n	8002532 <__aeabi_dsub+0x23a>
 80025a6:	465c      	mov	r4, fp
 80025a8:	2d00      	cmp	r5, #0
 80025aa:	d000      	beq.n	80025ae <__aeabi_dsub+0x2b6>
 80025ac:	e0e1      	b.n	8002772 <__aeabi_dsub+0x47a>
 80025ae:	000b      	movs	r3, r1
 80025b0:	4303      	orrs	r3, r0
 80025b2:	d0f3      	beq.n	800259c <__aeabi_dsub+0x2a4>
 80025b4:	1c73      	adds	r3, r6, #1
 80025b6:	d100      	bne.n	80025ba <__aeabi_dsub+0x2c2>
 80025b8:	e1ac      	b.n	8002914 <__aeabi_dsub+0x61c>
 80025ba:	4b21      	ldr	r3, [pc, #132]	; (8002640 <__aeabi_dsub+0x348>)
 80025bc:	429f      	cmp	r7, r3
 80025be:	d100      	bne.n	80025c2 <__aeabi_dsub+0x2ca>
 80025c0:	e13a      	b.n	8002838 <__aeabi_dsub+0x540>
 80025c2:	43f3      	mvns	r3, r6
 80025c4:	2b38      	cmp	r3, #56	; 0x38
 80025c6:	dd00      	ble.n	80025ca <__aeabi_dsub+0x2d2>
 80025c8:	e16f      	b.n	80028aa <__aeabi_dsub+0x5b2>
 80025ca:	2b1f      	cmp	r3, #31
 80025cc:	dd00      	ble.n	80025d0 <__aeabi_dsub+0x2d8>
 80025ce:	e18c      	b.n	80028ea <__aeabi_dsub+0x5f2>
 80025d0:	2520      	movs	r5, #32
 80025d2:	000e      	movs	r6, r1
 80025d4:	1aed      	subs	r5, r5, r3
 80025d6:	40ae      	lsls	r6, r5
 80025d8:	46b0      	mov	r8, r6
 80025da:	0006      	movs	r6, r0
 80025dc:	46aa      	mov	sl, r5
 80025de:	40de      	lsrs	r6, r3
 80025e0:	4645      	mov	r5, r8
 80025e2:	4335      	orrs	r5, r6
 80025e4:	002e      	movs	r6, r5
 80025e6:	4655      	mov	r5, sl
 80025e8:	40d9      	lsrs	r1, r3
 80025ea:	40a8      	lsls	r0, r5
 80025ec:	4663      	mov	r3, ip
 80025ee:	1e45      	subs	r5, r0, #1
 80025f0:	41a8      	sbcs	r0, r5
 80025f2:	1a5b      	subs	r3, r3, r1
 80025f4:	469c      	mov	ip, r3
 80025f6:	4330      	orrs	r0, r6
 80025f8:	1a16      	subs	r6, r2, r0
 80025fa:	42b2      	cmp	r2, r6
 80025fc:	4192      	sbcs	r2, r2
 80025fe:	4663      	mov	r3, ip
 8002600:	4252      	negs	r2, r2
 8002602:	1a99      	subs	r1, r3, r2
 8002604:	003d      	movs	r5, r7
 8002606:	e6b4      	b.n	8002372 <__aeabi_dsub+0x7a>
 8002608:	2207      	movs	r2, #7
 800260a:	4032      	ands	r2, r6
 800260c:	2a00      	cmp	r2, #0
 800260e:	d000      	beq.n	8002612 <__aeabi_dsub+0x31a>
 8002610:	e6e4      	b.n	80023dc <__aeabi_dsub+0xe4>
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <__aeabi_dsub+0x348>)
 8002614:	08f6      	lsrs	r6, r6, #3
 8002616:	074f      	lsls	r7, r1, #29
 8002618:	4337      	orrs	r7, r6
 800261a:	08ca      	lsrs	r2, r1, #3
 800261c:	429d      	cmp	r5, r3
 800261e:	d000      	beq.n	8002622 <__aeabi_dsub+0x32a>
 8002620:	e790      	b.n	8002544 <__aeabi_dsub+0x24c>
 8002622:	003b      	movs	r3, r7
 8002624:	4313      	orrs	r3, r2
 8002626:	d100      	bne.n	800262a <__aeabi_dsub+0x332>
 8002628:	e1a6      	b.n	8002978 <__aeabi_dsub+0x680>
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	031b      	lsls	r3, r3, #12
 800262e:	431a      	orrs	r2, r3
 8002630:	0312      	lsls	r2, r2, #12
 8002632:	0b12      	lsrs	r2, r2, #12
 8002634:	4d02      	ldr	r5, [pc, #8]	; (8002640 <__aeabi_dsub+0x348>)
 8002636:	e789      	b.n	800254c <__aeabi_dsub+0x254>
 8002638:	0015      	movs	r5, r2
 800263a:	2200      	movs	r2, #0
 800263c:	2700      	movs	r7, #0
 800263e:	e785      	b.n	800254c <__aeabi_dsub+0x254>
 8002640:	000007ff 	.word	0x000007ff
 8002644:	ff7fffff 	.word	0xff7fffff
 8002648:	800fffff 	.word	0x800fffff
 800264c:	2e00      	cmp	r6, #0
 800264e:	d000      	beq.n	8002652 <__aeabi_dsub+0x35a>
 8002650:	e0c7      	b.n	80027e2 <__aeabi_dsub+0x4ea>
 8002652:	1c6b      	adds	r3, r5, #1
 8002654:	055e      	lsls	r6, r3, #21
 8002656:	0d76      	lsrs	r6, r6, #21
 8002658:	2e01      	cmp	r6, #1
 800265a:	dc00      	bgt.n	800265e <__aeabi_dsub+0x366>
 800265c:	e0f0      	b.n	8002840 <__aeabi_dsub+0x548>
 800265e:	4dc8      	ldr	r5, [pc, #800]	; (8002980 <__aeabi_dsub+0x688>)
 8002660:	42ab      	cmp	r3, r5
 8002662:	d100      	bne.n	8002666 <__aeabi_dsub+0x36e>
 8002664:	e0b9      	b.n	80027da <__aeabi_dsub+0x4e2>
 8002666:	1885      	adds	r5, r0, r2
 8002668:	000a      	movs	r2, r1
 800266a:	4285      	cmp	r5, r0
 800266c:	4189      	sbcs	r1, r1
 800266e:	4462      	add	r2, ip
 8002670:	4249      	negs	r1, r1
 8002672:	1851      	adds	r1, r2, r1
 8002674:	2207      	movs	r2, #7
 8002676:	07ce      	lsls	r6, r1, #31
 8002678:	086d      	lsrs	r5, r5, #1
 800267a:	432e      	orrs	r6, r5
 800267c:	0849      	lsrs	r1, r1, #1
 800267e:	4032      	ands	r2, r6
 8002680:	001d      	movs	r5, r3
 8002682:	e6a9      	b.n	80023d8 <__aeabi_dsub+0xe0>
 8002684:	49bf      	ldr	r1, [pc, #764]	; (8002984 <__aeabi_dsub+0x68c>)
 8002686:	1aed      	subs	r5, r5, r3
 8002688:	4011      	ands	r1, r2
 800268a:	2207      	movs	r2, #7
 800268c:	4032      	ands	r2, r6
 800268e:	e6a3      	b.n	80023d8 <__aeabi_dsub+0xe0>
 8002690:	0032      	movs	r2, r6
 8002692:	3828      	subs	r0, #40	; 0x28
 8002694:	4082      	lsls	r2, r0
 8002696:	2600      	movs	r6, #0
 8002698:	e686      	b.n	80023a8 <__aeabi_dsub+0xb0>
 800269a:	0030      	movs	r0, r6
 800269c:	f000 fad6 	bl	8002c4c <__clzsi2>
 80026a0:	3020      	adds	r0, #32
 80026a2:	e673      	b.n	800238c <__aeabi_dsub+0x94>
 80026a4:	4663      	mov	r3, ip
 80026a6:	4313      	orrs	r3, r2
 80026a8:	1e5a      	subs	r2, r3, #1
 80026aa:	4193      	sbcs	r3, r2
 80026ac:	1ac6      	subs	r6, r0, r3
 80026ae:	42b0      	cmp	r0, r6
 80026b0:	4180      	sbcs	r0, r0
 80026b2:	4240      	negs	r0, r0
 80026b4:	1a09      	subs	r1, r1, r0
 80026b6:	e65c      	b.n	8002372 <__aeabi_dsub+0x7a>
 80026b8:	000e      	movs	r6, r1
 80026ba:	4667      	mov	r7, ip
 80026bc:	4306      	orrs	r6, r0
 80026be:	4317      	orrs	r7, r2
 80026c0:	2d00      	cmp	r5, #0
 80026c2:	d15e      	bne.n	8002782 <__aeabi_dsub+0x48a>
 80026c4:	2e00      	cmp	r6, #0
 80026c6:	d000      	beq.n	80026ca <__aeabi_dsub+0x3d2>
 80026c8:	e0f3      	b.n	80028b2 <__aeabi_dsub+0x5ba>
 80026ca:	2f00      	cmp	r7, #0
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dsub+0x3d8>
 80026ce:	e11e      	b.n	800290e <__aeabi_dsub+0x616>
 80026d0:	465c      	mov	r4, fp
 80026d2:	4661      	mov	r1, ip
 80026d4:	4691      	mov	r9, r2
 80026d6:	e72c      	b.n	8002532 <__aeabi_dsub+0x23a>
 80026d8:	4fa9      	ldr	r7, [pc, #676]	; (8002980 <__aeabi_dsub+0x688>)
 80026da:	42be      	cmp	r6, r7
 80026dc:	d07b      	beq.n	80027d6 <__aeabi_dsub+0x4de>
 80026de:	001e      	movs	r6, r3
 80026e0:	e6f1      	b.n	80024c6 <__aeabi_dsub+0x1ce>
 80026e2:	0010      	movs	r0, r2
 80026e4:	3d1f      	subs	r5, #31
 80026e6:	40e8      	lsrs	r0, r5
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d003      	beq.n	80026f4 <__aeabi_dsub+0x3fc>
 80026ec:	2140      	movs	r1, #64	; 0x40
 80026ee:	1acb      	subs	r3, r1, r3
 80026f0:	409a      	lsls	r2, r3
 80026f2:	4316      	orrs	r6, r2
 80026f4:	1e73      	subs	r3, r6, #1
 80026f6:	419e      	sbcs	r6, r3
 80026f8:	2207      	movs	r2, #7
 80026fa:	4306      	orrs	r6, r0
 80026fc:	4032      	ands	r2, r6
 80026fe:	2100      	movs	r1, #0
 8002700:	2500      	movs	r5, #0
 8002702:	e783      	b.n	800260c <__aeabi_dsub+0x314>
 8002704:	1a16      	subs	r6, r2, r0
 8002706:	4663      	mov	r3, ip
 8002708:	42b2      	cmp	r2, r6
 800270a:	4180      	sbcs	r0, r0
 800270c:	1a59      	subs	r1, r3, r1
 800270e:	4240      	negs	r0, r0
 8002710:	1a0b      	subs	r3, r1, r0
 8002712:	4698      	mov	r8, r3
 8002714:	465c      	mov	r4, fp
 8002716:	e632      	b.n	800237e <__aeabi_dsub+0x86>
 8002718:	2e1f      	cmp	r6, #31
 800271a:	dd00      	ble.n	800271e <__aeabi_dsub+0x426>
 800271c:	e0ab      	b.n	8002876 <__aeabi_dsub+0x57e>
 800271e:	2720      	movs	r7, #32
 8002720:	1bbb      	subs	r3, r7, r6
 8002722:	469a      	mov	sl, r3
 8002724:	4663      	mov	r3, ip
 8002726:	4657      	mov	r7, sl
 8002728:	40bb      	lsls	r3, r7
 800272a:	4699      	mov	r9, r3
 800272c:	0013      	movs	r3, r2
 800272e:	464f      	mov	r7, r9
 8002730:	40f3      	lsrs	r3, r6
 8002732:	431f      	orrs	r7, r3
 8002734:	003b      	movs	r3, r7
 8002736:	4657      	mov	r7, sl
 8002738:	40ba      	lsls	r2, r7
 800273a:	1e57      	subs	r7, r2, #1
 800273c:	41ba      	sbcs	r2, r7
 800273e:	4313      	orrs	r3, r2
 8002740:	4662      	mov	r2, ip
 8002742:	40f2      	lsrs	r2, r6
 8002744:	1889      	adds	r1, r1, r2
 8002746:	e698      	b.n	800247a <__aeabi_dsub+0x182>
 8002748:	2720      	movs	r7, #32
 800274a:	1bbb      	subs	r3, r7, r6
 800274c:	469a      	mov	sl, r3
 800274e:	4663      	mov	r3, ip
 8002750:	4657      	mov	r7, sl
 8002752:	40bb      	lsls	r3, r7
 8002754:	4699      	mov	r9, r3
 8002756:	0013      	movs	r3, r2
 8002758:	464f      	mov	r7, r9
 800275a:	40f3      	lsrs	r3, r6
 800275c:	431f      	orrs	r7, r3
 800275e:	003b      	movs	r3, r7
 8002760:	4657      	mov	r7, sl
 8002762:	40ba      	lsls	r2, r7
 8002764:	1e57      	subs	r7, r2, #1
 8002766:	41ba      	sbcs	r2, r7
 8002768:	4313      	orrs	r3, r2
 800276a:	4662      	mov	r2, ip
 800276c:	40f2      	lsrs	r2, r6
 800276e:	1a89      	subs	r1, r1, r2
 8002770:	e79c      	b.n	80026ac <__aeabi_dsub+0x3b4>
 8002772:	4b83      	ldr	r3, [pc, #524]	; (8002980 <__aeabi_dsub+0x688>)
 8002774:	429f      	cmp	r7, r3
 8002776:	d05f      	beq.n	8002838 <__aeabi_dsub+0x540>
 8002778:	2580      	movs	r5, #128	; 0x80
 800277a:	042d      	lsls	r5, r5, #16
 800277c:	4273      	negs	r3, r6
 800277e:	4329      	orrs	r1, r5
 8002780:	e720      	b.n	80025c4 <__aeabi_dsub+0x2cc>
 8002782:	2e00      	cmp	r6, #0
 8002784:	d10c      	bne.n	80027a0 <__aeabi_dsub+0x4a8>
 8002786:	2f00      	cmp	r7, #0
 8002788:	d100      	bne.n	800278c <__aeabi_dsub+0x494>
 800278a:	e0d0      	b.n	800292e <__aeabi_dsub+0x636>
 800278c:	465c      	mov	r4, fp
 800278e:	4661      	mov	r1, ip
 8002790:	4691      	mov	r9, r2
 8002792:	4d7b      	ldr	r5, [pc, #492]	; (8002980 <__aeabi_dsub+0x688>)
 8002794:	e6cd      	b.n	8002532 <__aeabi_dsub+0x23a>
 8002796:	4f7a      	ldr	r7, [pc, #488]	; (8002980 <__aeabi_dsub+0x688>)
 8002798:	42be      	cmp	r6, r7
 800279a:	d01c      	beq.n	80027d6 <__aeabi_dsub+0x4de>
 800279c:	001e      	movs	r6, r3
 800279e:	e665      	b.n	800246c <__aeabi_dsub+0x174>
 80027a0:	2f00      	cmp	r7, #0
 80027a2:	d018      	beq.n	80027d6 <__aeabi_dsub+0x4de>
 80027a4:	08c0      	lsrs	r0, r0, #3
 80027a6:	074e      	lsls	r6, r1, #29
 80027a8:	4306      	orrs	r6, r0
 80027aa:	2080      	movs	r0, #128	; 0x80
 80027ac:	08c9      	lsrs	r1, r1, #3
 80027ae:	0300      	lsls	r0, r0, #12
 80027b0:	4201      	tst	r1, r0
 80027b2:	d008      	beq.n	80027c6 <__aeabi_dsub+0x4ce>
 80027b4:	4663      	mov	r3, ip
 80027b6:	08dc      	lsrs	r4, r3, #3
 80027b8:	4204      	tst	r4, r0
 80027ba:	d104      	bne.n	80027c6 <__aeabi_dsub+0x4ce>
 80027bc:	0021      	movs	r1, r4
 80027be:	46da      	mov	sl, fp
 80027c0:	08d2      	lsrs	r2, r2, #3
 80027c2:	075e      	lsls	r6, r3, #29
 80027c4:	4316      	orrs	r6, r2
 80027c6:	00f3      	lsls	r3, r6, #3
 80027c8:	4699      	mov	r9, r3
 80027ca:	2401      	movs	r4, #1
 80027cc:	4653      	mov	r3, sl
 80027ce:	00c9      	lsls	r1, r1, #3
 80027d0:	0f72      	lsrs	r2, r6, #29
 80027d2:	4311      	orrs	r1, r2
 80027d4:	401c      	ands	r4, r3
 80027d6:	4d6a      	ldr	r5, [pc, #424]	; (8002980 <__aeabi_dsub+0x688>)
 80027d8:	e6ab      	b.n	8002532 <__aeabi_dsub+0x23a>
 80027da:	001d      	movs	r5, r3
 80027dc:	2200      	movs	r2, #0
 80027de:	2700      	movs	r7, #0
 80027e0:	e6b4      	b.n	800254c <__aeabi_dsub+0x254>
 80027e2:	2d00      	cmp	r5, #0
 80027e4:	d159      	bne.n	800289a <__aeabi_dsub+0x5a2>
 80027e6:	000b      	movs	r3, r1
 80027e8:	4303      	orrs	r3, r0
 80027ea:	d100      	bne.n	80027ee <__aeabi_dsub+0x4f6>
 80027ec:	e6d6      	b.n	800259c <__aeabi_dsub+0x2a4>
 80027ee:	1c73      	adds	r3, r6, #1
 80027f0:	d100      	bne.n	80027f4 <__aeabi_dsub+0x4fc>
 80027f2:	e0b2      	b.n	800295a <__aeabi_dsub+0x662>
 80027f4:	4b62      	ldr	r3, [pc, #392]	; (8002980 <__aeabi_dsub+0x688>)
 80027f6:	429f      	cmp	r7, r3
 80027f8:	d01e      	beq.n	8002838 <__aeabi_dsub+0x540>
 80027fa:	43f3      	mvns	r3, r6
 80027fc:	2b38      	cmp	r3, #56	; 0x38
 80027fe:	dc6f      	bgt.n	80028e0 <__aeabi_dsub+0x5e8>
 8002800:	2b1f      	cmp	r3, #31
 8002802:	dd00      	ble.n	8002806 <__aeabi_dsub+0x50e>
 8002804:	e097      	b.n	8002936 <__aeabi_dsub+0x63e>
 8002806:	2520      	movs	r5, #32
 8002808:	000e      	movs	r6, r1
 800280a:	1aed      	subs	r5, r5, r3
 800280c:	40ae      	lsls	r6, r5
 800280e:	46b0      	mov	r8, r6
 8002810:	0006      	movs	r6, r0
 8002812:	46aa      	mov	sl, r5
 8002814:	40de      	lsrs	r6, r3
 8002816:	4645      	mov	r5, r8
 8002818:	4335      	orrs	r5, r6
 800281a:	002e      	movs	r6, r5
 800281c:	4655      	mov	r5, sl
 800281e:	40a8      	lsls	r0, r5
 8002820:	40d9      	lsrs	r1, r3
 8002822:	1e45      	subs	r5, r0, #1
 8002824:	41a8      	sbcs	r0, r5
 8002826:	448c      	add	ip, r1
 8002828:	4306      	orrs	r6, r0
 800282a:	18b6      	adds	r6, r6, r2
 800282c:	4296      	cmp	r6, r2
 800282e:	4192      	sbcs	r2, r2
 8002830:	4251      	negs	r1, r2
 8002832:	4461      	add	r1, ip
 8002834:	003d      	movs	r5, r7
 8002836:	e625      	b.n	8002484 <__aeabi_dsub+0x18c>
 8002838:	003d      	movs	r5, r7
 800283a:	4661      	mov	r1, ip
 800283c:	4691      	mov	r9, r2
 800283e:	e678      	b.n	8002532 <__aeabi_dsub+0x23a>
 8002840:	000b      	movs	r3, r1
 8002842:	4303      	orrs	r3, r0
 8002844:	2d00      	cmp	r5, #0
 8002846:	d000      	beq.n	800284a <__aeabi_dsub+0x552>
 8002848:	e655      	b.n	80024f6 <__aeabi_dsub+0x1fe>
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f5      	beq.n	800283a <__aeabi_dsub+0x542>
 800284e:	4663      	mov	r3, ip
 8002850:	4313      	orrs	r3, r2
 8002852:	d100      	bne.n	8002856 <__aeabi_dsub+0x55e>
 8002854:	e66d      	b.n	8002532 <__aeabi_dsub+0x23a>
 8002856:	1886      	adds	r6, r0, r2
 8002858:	4286      	cmp	r6, r0
 800285a:	4180      	sbcs	r0, r0
 800285c:	4461      	add	r1, ip
 800285e:	4240      	negs	r0, r0
 8002860:	1809      	adds	r1, r1, r0
 8002862:	2200      	movs	r2, #0
 8002864:	020b      	lsls	r3, r1, #8
 8002866:	d400      	bmi.n	800286a <__aeabi_dsub+0x572>
 8002868:	e6d0      	b.n	800260c <__aeabi_dsub+0x314>
 800286a:	4b46      	ldr	r3, [pc, #280]	; (8002984 <__aeabi_dsub+0x68c>)
 800286c:	3501      	adds	r5, #1
 800286e:	4019      	ands	r1, r3
 8002870:	e5b2      	b.n	80023d8 <__aeabi_dsub+0xe0>
 8002872:	46b1      	mov	r9, r6
 8002874:	e65d      	b.n	8002532 <__aeabi_dsub+0x23a>
 8002876:	0033      	movs	r3, r6
 8002878:	4667      	mov	r7, ip
 800287a:	3b20      	subs	r3, #32
 800287c:	40df      	lsrs	r7, r3
 800287e:	003b      	movs	r3, r7
 8002880:	2e20      	cmp	r6, #32
 8002882:	d005      	beq.n	8002890 <__aeabi_dsub+0x598>
 8002884:	2740      	movs	r7, #64	; 0x40
 8002886:	1bbf      	subs	r7, r7, r6
 8002888:	4666      	mov	r6, ip
 800288a:	40be      	lsls	r6, r7
 800288c:	4332      	orrs	r2, r6
 800288e:	4690      	mov	r8, r2
 8002890:	4646      	mov	r6, r8
 8002892:	1e72      	subs	r2, r6, #1
 8002894:	4196      	sbcs	r6, r2
 8002896:	4333      	orrs	r3, r6
 8002898:	e5ef      	b.n	800247a <__aeabi_dsub+0x182>
 800289a:	4b39      	ldr	r3, [pc, #228]	; (8002980 <__aeabi_dsub+0x688>)
 800289c:	429f      	cmp	r7, r3
 800289e:	d0cb      	beq.n	8002838 <__aeabi_dsub+0x540>
 80028a0:	2580      	movs	r5, #128	; 0x80
 80028a2:	042d      	lsls	r5, r5, #16
 80028a4:	4273      	negs	r3, r6
 80028a6:	4329      	orrs	r1, r5
 80028a8:	e7a8      	b.n	80027fc <__aeabi_dsub+0x504>
 80028aa:	4308      	orrs	r0, r1
 80028ac:	1e41      	subs	r1, r0, #1
 80028ae:	4188      	sbcs	r0, r1
 80028b0:	e6a2      	b.n	80025f8 <__aeabi_dsub+0x300>
 80028b2:	2f00      	cmp	r7, #0
 80028b4:	d100      	bne.n	80028b8 <__aeabi_dsub+0x5c0>
 80028b6:	e63c      	b.n	8002532 <__aeabi_dsub+0x23a>
 80028b8:	4663      	mov	r3, ip
 80028ba:	1a86      	subs	r6, r0, r2
 80028bc:	1acf      	subs	r7, r1, r3
 80028be:	42b0      	cmp	r0, r6
 80028c0:	419b      	sbcs	r3, r3
 80028c2:	425b      	negs	r3, r3
 80028c4:	1afb      	subs	r3, r7, r3
 80028c6:	4698      	mov	r8, r3
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	d54e      	bpl.n	800296a <__aeabi_dsub+0x672>
 80028cc:	1a16      	subs	r6, r2, r0
 80028ce:	4663      	mov	r3, ip
 80028d0:	42b2      	cmp	r2, r6
 80028d2:	4192      	sbcs	r2, r2
 80028d4:	1a59      	subs	r1, r3, r1
 80028d6:	4252      	negs	r2, r2
 80028d8:	1a89      	subs	r1, r1, r2
 80028da:	465c      	mov	r4, fp
 80028dc:	2200      	movs	r2, #0
 80028de:	e57b      	b.n	80023d8 <__aeabi_dsub+0xe0>
 80028e0:	4301      	orrs	r1, r0
 80028e2:	000e      	movs	r6, r1
 80028e4:	1e71      	subs	r1, r6, #1
 80028e6:	418e      	sbcs	r6, r1
 80028e8:	e79f      	b.n	800282a <__aeabi_dsub+0x532>
 80028ea:	001d      	movs	r5, r3
 80028ec:	000e      	movs	r6, r1
 80028ee:	3d20      	subs	r5, #32
 80028f0:	40ee      	lsrs	r6, r5
 80028f2:	46b0      	mov	r8, r6
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d004      	beq.n	8002902 <__aeabi_dsub+0x60a>
 80028f8:	2540      	movs	r5, #64	; 0x40
 80028fa:	1aeb      	subs	r3, r5, r3
 80028fc:	4099      	lsls	r1, r3
 80028fe:	4308      	orrs	r0, r1
 8002900:	4681      	mov	r9, r0
 8002902:	4648      	mov	r0, r9
 8002904:	4643      	mov	r3, r8
 8002906:	1e41      	subs	r1, r0, #1
 8002908:	4188      	sbcs	r0, r1
 800290a:	4318      	orrs	r0, r3
 800290c:	e674      	b.n	80025f8 <__aeabi_dsub+0x300>
 800290e:	2200      	movs	r2, #0
 8002910:	2400      	movs	r4, #0
 8002912:	e617      	b.n	8002544 <__aeabi_dsub+0x24c>
 8002914:	1a16      	subs	r6, r2, r0
 8002916:	4663      	mov	r3, ip
 8002918:	42b2      	cmp	r2, r6
 800291a:	4192      	sbcs	r2, r2
 800291c:	1a59      	subs	r1, r3, r1
 800291e:	4252      	negs	r2, r2
 8002920:	1a89      	subs	r1, r1, r2
 8002922:	003d      	movs	r5, r7
 8002924:	e525      	b.n	8002372 <__aeabi_dsub+0x7a>
 8002926:	4661      	mov	r1, ip
 8002928:	4691      	mov	r9, r2
 800292a:	4d15      	ldr	r5, [pc, #84]	; (8002980 <__aeabi_dsub+0x688>)
 800292c:	e601      	b.n	8002532 <__aeabi_dsub+0x23a>
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	2400      	movs	r4, #0
 8002932:	0312      	lsls	r2, r2, #12
 8002934:	e679      	b.n	800262a <__aeabi_dsub+0x332>
 8002936:	001d      	movs	r5, r3
 8002938:	000e      	movs	r6, r1
 800293a:	3d20      	subs	r5, #32
 800293c:	40ee      	lsrs	r6, r5
 800293e:	46b0      	mov	r8, r6
 8002940:	2b20      	cmp	r3, #32
 8002942:	d004      	beq.n	800294e <__aeabi_dsub+0x656>
 8002944:	2540      	movs	r5, #64	; 0x40
 8002946:	1aeb      	subs	r3, r5, r3
 8002948:	4099      	lsls	r1, r3
 800294a:	4308      	orrs	r0, r1
 800294c:	4681      	mov	r9, r0
 800294e:	464e      	mov	r6, r9
 8002950:	4643      	mov	r3, r8
 8002952:	1e71      	subs	r1, r6, #1
 8002954:	418e      	sbcs	r6, r1
 8002956:	431e      	orrs	r6, r3
 8002958:	e767      	b.n	800282a <__aeabi_dsub+0x532>
 800295a:	1886      	adds	r6, r0, r2
 800295c:	4296      	cmp	r6, r2
 800295e:	419b      	sbcs	r3, r3
 8002960:	4461      	add	r1, ip
 8002962:	425b      	negs	r3, r3
 8002964:	18c9      	adds	r1, r1, r3
 8002966:	003d      	movs	r5, r7
 8002968:	e58c      	b.n	8002484 <__aeabi_dsub+0x18c>
 800296a:	4647      	mov	r7, r8
 800296c:	4337      	orrs	r7, r6
 800296e:	d0ce      	beq.n	800290e <__aeabi_dsub+0x616>
 8002970:	2207      	movs	r2, #7
 8002972:	4641      	mov	r1, r8
 8002974:	4032      	ands	r2, r6
 8002976:	e649      	b.n	800260c <__aeabi_dsub+0x314>
 8002978:	2700      	movs	r7, #0
 800297a:	003a      	movs	r2, r7
 800297c:	e5e6      	b.n	800254c <__aeabi_dsub+0x254>
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	000007ff 	.word	0x000007ff
 8002984:	ff7fffff 	.word	0xff7fffff

08002988 <__aeabi_dcmpun>:
 8002988:	b570      	push	{r4, r5, r6, lr}
 800298a:	4e0c      	ldr	r6, [pc, #48]	; (80029bc <__aeabi_dcmpun+0x34>)
 800298c:	030d      	lsls	r5, r1, #12
 800298e:	031c      	lsls	r4, r3, #12
 8002990:	0049      	lsls	r1, r1, #1
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	0b2d      	lsrs	r5, r5, #12
 8002996:	0d49      	lsrs	r1, r1, #21
 8002998:	0b24      	lsrs	r4, r4, #12
 800299a:	0d5b      	lsrs	r3, r3, #21
 800299c:	42b1      	cmp	r1, r6
 800299e:	d008      	beq.n	80029b2 <__aeabi_dcmpun+0x2a>
 80029a0:	4906      	ldr	r1, [pc, #24]	; (80029bc <__aeabi_dcmpun+0x34>)
 80029a2:	2000      	movs	r0, #0
 80029a4:	428b      	cmp	r3, r1
 80029a6:	d103      	bne.n	80029b0 <__aeabi_dcmpun+0x28>
 80029a8:	4314      	orrs	r4, r2
 80029aa:	0020      	movs	r0, r4
 80029ac:	1e44      	subs	r4, r0, #1
 80029ae:	41a0      	sbcs	r0, r4
 80029b0:	bd70      	pop	{r4, r5, r6, pc}
 80029b2:	4305      	orrs	r5, r0
 80029b4:	2001      	movs	r0, #1
 80029b6:	2d00      	cmp	r5, #0
 80029b8:	d1fa      	bne.n	80029b0 <__aeabi_dcmpun+0x28>
 80029ba:	e7f1      	b.n	80029a0 <__aeabi_dcmpun+0x18>
 80029bc:	000007ff 	.word	0x000007ff

080029c0 <__aeabi_d2iz>:
 80029c0:	b530      	push	{r4, r5, lr}
 80029c2:	4d14      	ldr	r5, [pc, #80]	; (8002a14 <__aeabi_d2iz+0x54>)
 80029c4:	030a      	lsls	r2, r1, #12
 80029c6:	004b      	lsls	r3, r1, #1
 80029c8:	0b12      	lsrs	r2, r2, #12
 80029ca:	0d5b      	lsrs	r3, r3, #21
 80029cc:	0fc9      	lsrs	r1, r1, #31
 80029ce:	2400      	movs	r4, #0
 80029d0:	42ab      	cmp	r3, r5
 80029d2:	dd11      	ble.n	80029f8 <__aeabi_d2iz+0x38>
 80029d4:	4c10      	ldr	r4, [pc, #64]	; (8002a18 <__aeabi_d2iz+0x58>)
 80029d6:	42a3      	cmp	r3, r4
 80029d8:	dc10      	bgt.n	80029fc <__aeabi_d2iz+0x3c>
 80029da:	2480      	movs	r4, #128	; 0x80
 80029dc:	0364      	lsls	r4, r4, #13
 80029de:	4322      	orrs	r2, r4
 80029e0:	4c0e      	ldr	r4, [pc, #56]	; (8002a1c <__aeabi_d2iz+0x5c>)
 80029e2:	1ae4      	subs	r4, r4, r3
 80029e4:	2c1f      	cmp	r4, #31
 80029e6:	dd0c      	ble.n	8002a02 <__aeabi_d2iz+0x42>
 80029e8:	480d      	ldr	r0, [pc, #52]	; (8002a20 <__aeabi_d2iz+0x60>)
 80029ea:	1ac3      	subs	r3, r0, r3
 80029ec:	40da      	lsrs	r2, r3
 80029ee:	0013      	movs	r3, r2
 80029f0:	425c      	negs	r4, r3
 80029f2:	2900      	cmp	r1, #0
 80029f4:	d100      	bne.n	80029f8 <__aeabi_d2iz+0x38>
 80029f6:	001c      	movs	r4, r3
 80029f8:	0020      	movs	r0, r4
 80029fa:	bd30      	pop	{r4, r5, pc}
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <__aeabi_d2iz+0x64>)
 80029fe:	18cc      	adds	r4, r1, r3
 8002a00:	e7fa      	b.n	80029f8 <__aeabi_d2iz+0x38>
 8002a02:	4d09      	ldr	r5, [pc, #36]	; (8002a28 <__aeabi_d2iz+0x68>)
 8002a04:	40e0      	lsrs	r0, r4
 8002a06:	46ac      	mov	ip, r5
 8002a08:	4463      	add	r3, ip
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	0013      	movs	r3, r2
 8002a0e:	4303      	orrs	r3, r0
 8002a10:	e7ee      	b.n	80029f0 <__aeabi_d2iz+0x30>
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	000003fe 	.word	0x000003fe
 8002a18:	0000041d 	.word	0x0000041d
 8002a1c:	00000433 	.word	0x00000433
 8002a20:	00000413 	.word	0x00000413
 8002a24:	7fffffff 	.word	0x7fffffff
 8002a28:	fffffbed 	.word	0xfffffbed

08002a2c <__aeabi_i2d>:
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	d02d      	beq.n	8002a8e <__aeabi_i2d+0x62>
 8002a32:	17c3      	asrs	r3, r0, #31
 8002a34:	18c5      	adds	r5, r0, r3
 8002a36:	405d      	eors	r5, r3
 8002a38:	0fc4      	lsrs	r4, r0, #31
 8002a3a:	0028      	movs	r0, r5
 8002a3c:	f000 f906 	bl	8002c4c <__clzsi2>
 8002a40:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <__aeabi_i2d+0x6c>)
 8002a42:	1a1b      	subs	r3, r3, r0
 8002a44:	055b      	lsls	r3, r3, #21
 8002a46:	0d5b      	lsrs	r3, r3, #21
 8002a48:	280a      	cmp	r0, #10
 8002a4a:	dd15      	ble.n	8002a78 <__aeabi_i2d+0x4c>
 8002a4c:	380b      	subs	r0, #11
 8002a4e:	4085      	lsls	r5, r0
 8002a50:	2200      	movs	r2, #0
 8002a52:	032d      	lsls	r5, r5, #12
 8002a54:	0b2d      	lsrs	r5, r5, #12
 8002a56:	2100      	movs	r1, #0
 8002a58:	0010      	movs	r0, r2
 8002a5a:	032d      	lsls	r5, r5, #12
 8002a5c:	0d0a      	lsrs	r2, r1, #20
 8002a5e:	0b2d      	lsrs	r5, r5, #12
 8002a60:	0512      	lsls	r2, r2, #20
 8002a62:	432a      	orrs	r2, r5
 8002a64:	4d0d      	ldr	r5, [pc, #52]	; (8002a9c <__aeabi_i2d+0x70>)
 8002a66:	051b      	lsls	r3, r3, #20
 8002a68:	402a      	ands	r2, r5
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	07e4      	lsls	r4, r4, #31
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	4323      	orrs	r3, r4
 8002a74:	0019      	movs	r1, r3
 8002a76:	bd70      	pop	{r4, r5, r6, pc}
 8002a78:	0002      	movs	r2, r0
 8002a7a:	0029      	movs	r1, r5
 8002a7c:	3215      	adds	r2, #21
 8002a7e:	4091      	lsls	r1, r2
 8002a80:	000a      	movs	r2, r1
 8002a82:	210b      	movs	r1, #11
 8002a84:	1a08      	subs	r0, r1, r0
 8002a86:	40c5      	lsrs	r5, r0
 8002a88:	032d      	lsls	r5, r5, #12
 8002a8a:	0b2d      	lsrs	r5, r5, #12
 8002a8c:	e7e3      	b.n	8002a56 <__aeabi_i2d+0x2a>
 8002a8e:	2400      	movs	r4, #0
 8002a90:	2300      	movs	r3, #0
 8002a92:	2500      	movs	r5, #0
 8002a94:	2200      	movs	r2, #0
 8002a96:	e7de      	b.n	8002a56 <__aeabi_i2d+0x2a>
 8002a98:	0000041e 	.word	0x0000041e
 8002a9c:	800fffff 	.word	0x800fffff

08002aa0 <__aeabi_f2d>:
 8002aa0:	0041      	lsls	r1, r0, #1
 8002aa2:	0e09      	lsrs	r1, r1, #24
 8002aa4:	1c4b      	adds	r3, r1, #1
 8002aa6:	b570      	push	{r4, r5, r6, lr}
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	0246      	lsls	r6, r0, #9
 8002aac:	0a75      	lsrs	r5, r6, #9
 8002aae:	0fc4      	lsrs	r4, r0, #31
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	dd14      	ble.n	8002ade <__aeabi_f2d+0x3e>
 8002ab4:	23e0      	movs	r3, #224	; 0xe0
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	076d      	lsls	r5, r5, #29
 8002aba:	0b36      	lsrs	r6, r6, #12
 8002abc:	18cb      	adds	r3, r1, r3
 8002abe:	2100      	movs	r1, #0
 8002ac0:	0d0a      	lsrs	r2, r1, #20
 8002ac2:	0028      	movs	r0, r5
 8002ac4:	0512      	lsls	r2, r2, #20
 8002ac6:	4d1c      	ldr	r5, [pc, #112]	; (8002b38 <__aeabi_f2d+0x98>)
 8002ac8:	4332      	orrs	r2, r6
 8002aca:	055b      	lsls	r3, r3, #21
 8002acc:	402a      	ands	r2, r5
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	07e4      	lsls	r4, r4, #31
 8002ad6:	085b      	lsrs	r3, r3, #1
 8002ad8:	4323      	orrs	r3, r4
 8002ada:	0019      	movs	r1, r3
 8002adc:	bd70      	pop	{r4, r5, r6, pc}
 8002ade:	2900      	cmp	r1, #0
 8002ae0:	d114      	bne.n	8002b0c <__aeabi_f2d+0x6c>
 8002ae2:	2d00      	cmp	r5, #0
 8002ae4:	d01e      	beq.n	8002b24 <__aeabi_f2d+0x84>
 8002ae6:	0028      	movs	r0, r5
 8002ae8:	f000 f8b0 	bl	8002c4c <__clzsi2>
 8002aec:	280a      	cmp	r0, #10
 8002aee:	dc1c      	bgt.n	8002b2a <__aeabi_f2d+0x8a>
 8002af0:	230b      	movs	r3, #11
 8002af2:	002a      	movs	r2, r5
 8002af4:	1a1b      	subs	r3, r3, r0
 8002af6:	40da      	lsrs	r2, r3
 8002af8:	0003      	movs	r3, r0
 8002afa:	3315      	adds	r3, #21
 8002afc:	409d      	lsls	r5, r3
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <__aeabi_f2d+0x9c>)
 8002b00:	0312      	lsls	r2, r2, #12
 8002b02:	1a1b      	subs	r3, r3, r0
 8002b04:	055b      	lsls	r3, r3, #21
 8002b06:	0b16      	lsrs	r6, r2, #12
 8002b08:	0d5b      	lsrs	r3, r3, #21
 8002b0a:	e7d8      	b.n	8002abe <__aeabi_f2d+0x1e>
 8002b0c:	2d00      	cmp	r5, #0
 8002b0e:	d006      	beq.n	8002b1e <__aeabi_f2d+0x7e>
 8002b10:	0b32      	lsrs	r2, r6, #12
 8002b12:	2680      	movs	r6, #128	; 0x80
 8002b14:	0336      	lsls	r6, r6, #12
 8002b16:	076d      	lsls	r5, r5, #29
 8002b18:	4316      	orrs	r6, r2
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <__aeabi_f2d+0xa0>)
 8002b1c:	e7cf      	b.n	8002abe <__aeabi_f2d+0x1e>
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <__aeabi_f2d+0xa0>)
 8002b20:	2600      	movs	r6, #0
 8002b22:	e7cc      	b.n	8002abe <__aeabi_f2d+0x1e>
 8002b24:	2300      	movs	r3, #0
 8002b26:	2600      	movs	r6, #0
 8002b28:	e7c9      	b.n	8002abe <__aeabi_f2d+0x1e>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	002a      	movs	r2, r5
 8002b2e:	3b0b      	subs	r3, #11
 8002b30:	409a      	lsls	r2, r3
 8002b32:	2500      	movs	r5, #0
 8002b34:	e7e3      	b.n	8002afe <__aeabi_f2d+0x5e>
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	800fffff 	.word	0x800fffff
 8002b3c:	00000389 	.word	0x00000389
 8002b40:	000007ff 	.word	0x000007ff

08002b44 <__aeabi_d2f>:
 8002b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b46:	004c      	lsls	r4, r1, #1
 8002b48:	0d64      	lsrs	r4, r4, #21
 8002b4a:	030b      	lsls	r3, r1, #12
 8002b4c:	1c62      	adds	r2, r4, #1
 8002b4e:	0a5b      	lsrs	r3, r3, #9
 8002b50:	0f46      	lsrs	r6, r0, #29
 8002b52:	0552      	lsls	r2, r2, #21
 8002b54:	0fc9      	lsrs	r1, r1, #31
 8002b56:	431e      	orrs	r6, r3
 8002b58:	00c5      	lsls	r5, r0, #3
 8002b5a:	0d52      	lsrs	r2, r2, #21
 8002b5c:	2a01      	cmp	r2, #1
 8002b5e:	dd29      	ble.n	8002bb4 <__aeabi_d2f+0x70>
 8002b60:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <__aeabi_d2f+0xfc>)
 8002b62:	18e7      	adds	r7, r4, r3
 8002b64:	2ffe      	cmp	r7, #254	; 0xfe
 8002b66:	dc1c      	bgt.n	8002ba2 <__aeabi_d2f+0x5e>
 8002b68:	2f00      	cmp	r7, #0
 8002b6a:	dd3b      	ble.n	8002be4 <__aeabi_d2f+0xa0>
 8002b6c:	0180      	lsls	r0, r0, #6
 8002b6e:	1e43      	subs	r3, r0, #1
 8002b70:	4198      	sbcs	r0, r3
 8002b72:	2207      	movs	r2, #7
 8002b74:	00f3      	lsls	r3, r6, #3
 8002b76:	0f6d      	lsrs	r5, r5, #29
 8002b78:	4303      	orrs	r3, r0
 8002b7a:	432b      	orrs	r3, r5
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	2a00      	cmp	r2, #0
 8002b80:	d004      	beq.n	8002b8c <__aeabi_d2f+0x48>
 8002b82:	220f      	movs	r2, #15
 8002b84:	401a      	ands	r2, r3
 8002b86:	2a04      	cmp	r2, #4
 8002b88:	d000      	beq.n	8002b8c <__aeabi_d2f+0x48>
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	2280      	movs	r2, #128	; 0x80
 8002b8e:	04d2      	lsls	r2, r2, #19
 8002b90:	401a      	ands	r2, r3
 8002b92:	d024      	beq.n	8002bde <__aeabi_d2f+0x9a>
 8002b94:	3701      	adds	r7, #1
 8002b96:	b2fa      	uxtb	r2, r7
 8002b98:	2fff      	cmp	r7, #255	; 0xff
 8002b9a:	d002      	beq.n	8002ba2 <__aeabi_d2f+0x5e>
 8002b9c:	019b      	lsls	r3, r3, #6
 8002b9e:	0a58      	lsrs	r0, r3, #9
 8002ba0:	e001      	b.n	8002ba6 <__aeabi_d2f+0x62>
 8002ba2:	22ff      	movs	r2, #255	; 0xff
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	0240      	lsls	r0, r0, #9
 8002ba8:	05d2      	lsls	r2, r2, #23
 8002baa:	0a40      	lsrs	r0, r0, #9
 8002bac:	07c9      	lsls	r1, r1, #31
 8002bae:	4310      	orrs	r0, r2
 8002bb0:	4308      	orrs	r0, r1
 8002bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bb4:	4335      	orrs	r5, r6
 8002bb6:	2c00      	cmp	r4, #0
 8002bb8:	d104      	bne.n	8002bc4 <__aeabi_d2f+0x80>
 8002bba:	2d00      	cmp	r5, #0
 8002bbc:	d10a      	bne.n	8002bd4 <__aeabi_d2f+0x90>
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	e7f0      	b.n	8002ba6 <__aeabi_d2f+0x62>
 8002bc4:	2d00      	cmp	r5, #0
 8002bc6:	d0ec      	beq.n	8002ba2 <__aeabi_d2f+0x5e>
 8002bc8:	2080      	movs	r0, #128	; 0x80
 8002bca:	03c0      	lsls	r0, r0, #15
 8002bcc:	4330      	orrs	r0, r6
 8002bce:	22ff      	movs	r2, #255	; 0xff
 8002bd0:	e7e9      	b.n	8002ba6 <__aeabi_d2f+0x62>
 8002bd2:	2400      	movs	r4, #0
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	025b      	lsls	r3, r3, #9
 8002bd8:	0a58      	lsrs	r0, r3, #9
 8002bda:	b2e2      	uxtb	r2, r4
 8002bdc:	e7e3      	b.n	8002ba6 <__aeabi_d2f+0x62>
 8002bde:	08db      	lsrs	r3, r3, #3
 8002be0:	003c      	movs	r4, r7
 8002be2:	e7f8      	b.n	8002bd6 <__aeabi_d2f+0x92>
 8002be4:	003b      	movs	r3, r7
 8002be6:	3317      	adds	r3, #23
 8002be8:	dbf3      	blt.n	8002bd2 <__aeabi_d2f+0x8e>
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	041b      	lsls	r3, r3, #16
 8002bee:	4333      	orrs	r3, r6
 8002bf0:	261e      	movs	r6, #30
 8002bf2:	1bf6      	subs	r6, r6, r7
 8002bf4:	2e1f      	cmp	r6, #31
 8002bf6:	dd14      	ble.n	8002c22 <__aeabi_d2f+0xde>
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	4252      	negs	r2, r2
 8002bfc:	1bd7      	subs	r7, r2, r7
 8002bfe:	001a      	movs	r2, r3
 8002c00:	40fa      	lsrs	r2, r7
 8002c02:	0017      	movs	r7, r2
 8002c04:	2e20      	cmp	r6, #32
 8002c06:	d004      	beq.n	8002c12 <__aeabi_d2f+0xce>
 8002c08:	4a0e      	ldr	r2, [pc, #56]	; (8002c44 <__aeabi_d2f+0x100>)
 8002c0a:	4694      	mov	ip, r2
 8002c0c:	4464      	add	r4, ip
 8002c0e:	40a3      	lsls	r3, r4
 8002c10:	431d      	orrs	r5, r3
 8002c12:	002b      	movs	r3, r5
 8002c14:	1e5d      	subs	r5, r3, #1
 8002c16:	41ab      	sbcs	r3, r5
 8002c18:	2207      	movs	r2, #7
 8002c1a:	433b      	orrs	r3, r7
 8002c1c:	401a      	ands	r2, r3
 8002c1e:	2700      	movs	r7, #0
 8002c20:	e7ad      	b.n	8002b7e <__aeabi_d2f+0x3a>
 8002c22:	4a09      	ldr	r2, [pc, #36]	; (8002c48 <__aeabi_d2f+0x104>)
 8002c24:	0028      	movs	r0, r5
 8002c26:	18a2      	adds	r2, r4, r2
 8002c28:	4095      	lsls	r5, r2
 8002c2a:	4093      	lsls	r3, r2
 8002c2c:	1e6c      	subs	r4, r5, #1
 8002c2e:	41a5      	sbcs	r5, r4
 8002c30:	40f0      	lsrs	r0, r6
 8002c32:	2207      	movs	r2, #7
 8002c34:	432b      	orrs	r3, r5
 8002c36:	4303      	orrs	r3, r0
 8002c38:	401a      	ands	r2, r3
 8002c3a:	2700      	movs	r7, #0
 8002c3c:	e79f      	b.n	8002b7e <__aeabi_d2f+0x3a>
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	fffffc80 	.word	0xfffffc80
 8002c44:	fffffca2 	.word	0xfffffca2
 8002c48:	fffffc82 	.word	0xfffffc82

08002c4c <__clzsi2>:
 8002c4c:	211c      	movs	r1, #28
 8002c4e:	2301      	movs	r3, #1
 8002c50:	041b      	lsls	r3, r3, #16
 8002c52:	4298      	cmp	r0, r3
 8002c54:	d301      	bcc.n	8002c5a <__clzsi2+0xe>
 8002c56:	0c00      	lsrs	r0, r0, #16
 8002c58:	3910      	subs	r1, #16
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	4298      	cmp	r0, r3
 8002c5e:	d301      	bcc.n	8002c64 <__clzsi2+0x18>
 8002c60:	0a00      	lsrs	r0, r0, #8
 8002c62:	3908      	subs	r1, #8
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	4298      	cmp	r0, r3
 8002c68:	d301      	bcc.n	8002c6e <__clzsi2+0x22>
 8002c6a:	0900      	lsrs	r0, r0, #4
 8002c6c:	3904      	subs	r1, #4
 8002c6e:	a202      	add	r2, pc, #8	; (adr r2, 8002c78 <__clzsi2+0x2c>)
 8002c70:	5c10      	ldrb	r0, [r2, r0]
 8002c72:	1840      	adds	r0, r0, r1
 8002c74:	4770      	bx	lr
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	02020304 	.word	0x02020304
 8002c7c:	01010101 	.word	0x01010101
	...

08002c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b0e9      	sub	sp, #420	; 0x1a4
 8002c8c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c8e:	f001 fe3d 	bl	800490c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c92:	f000 f941 	bl	8002f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c96:	f000 fbef 	bl	8003478 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002c9a:	f000 fa9b 	bl	80031d4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002c9e:	f000 fa31 	bl	8003104 <MX_TIM2_Init>
  MX_TIM6_Init();
 8002ca2:	f000 fb3f 	bl	8003324 <MX_TIM6_Init>
  MX_ADC_Init();
 8002ca6:	f000 f98b 	bl	8002fc0 <MX_ADC_Init>
  MX_TIM22_Init();
 8002caa:	f000 fb77 	bl	800339c <MX_TIM22_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002cae:	4b8e      	ldr	r3, [pc, #568]	; (8002ee8 <main+0x260>)
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f003 fa02 	bl	80060bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002cb8:	4b8b      	ldr	r3, [pc, #556]	; (8002ee8 <main+0x260>)
 8002cba:	2104      	movs	r1, #4
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f003 f9fd 	bl	80060bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002cc2:	4b89      	ldr	r3, [pc, #548]	; (8002ee8 <main+0x260>)
 8002cc4:	2108      	movs	r1, #8
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f003 f9f8 	bl	80060bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002ccc:	4b86      	ldr	r3, [pc, #536]	; (8002ee8 <main+0x260>)
 8002cce:	210c      	movs	r1, #12
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f003 f9f3 	bl	80060bc <HAL_TIM_PWM_Start>

	// right_motor
	Motor right_motor;
	right_motor.dir = 0;
 8002cd6:	21a0      	movs	r1, #160	; 0xa0
 8002cd8:	0049      	lsls	r1, r1, #1
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
	right_motor.encoder = 0;
 8002ce0:	000c      	movs	r4, r1
 8002ce2:	193b      	adds	r3, r7, r4
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	605a      	str	r2, [r3, #4]
	right_motor.timer = &htim3;
 8002ce8:	193b      	adds	r3, r7, r4
 8002cea:	4a7f      	ldr	r2, [pc, #508]	; (8002ee8 <main+0x260>)
 8002cec:	609a      	str	r2, [r3, #8]
	right_motor.ch1 = TIM_CHANNEL_1;
 8002cee:	193b      	adds	r3, r7, r4
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	60da      	str	r2, [r3, #12]
	right_motor.ch2 = TIM_CHANNEL_2;
 8002cf4:	193b      	adds	r3, r7, r4
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	611a      	str	r2, [r3, #16]
	right_motor.rad_pid.Kp = 100.0;
 8002cfa:	193b      	adds	r3, r7, r4
 8002cfc:	4a7b      	ldr	r2, [pc, #492]	; (8002eec <main+0x264>)
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c
	right_motor.rad_pid.Ki = 0;
 8002d00:	193b      	adds	r3, r7, r4
 8002d02:	2200      	movs	r2, #0
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
	right_motor.rad_pid.Kd = 0;
 8002d06:	193b      	adds	r3, r7, r4
 8002d08:	2200      	movs	r2, #0
 8002d0a:	635a      	str	r2, [r3, #52]	; 0x34
	right_motor.pos_pid.Kp = 1000.0;
 8002d0c:	193b      	adds	r3, r7, r4
 8002d0e:	4a78      	ldr	r2, [pc, #480]	; (8002ef0 <main+0x268>)
 8002d10:	651a      	str	r2, [r3, #80]	; 0x50
	right_motor.pos_pid.Ki = 0;
 8002d12:	193b      	adds	r3, r7, r4
 8002d14:	2200      	movs	r2, #0
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54
	right_motor.pos_pid.Kd = 0;
 8002d18:	193b      	adds	r3, r7, r4
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	659a      	str	r2, [r3, #88]	; 0x58


	// left motor
	Motor left_motor;
	left_motor.dir = 0;
 8002d1e:	21e4      	movs	r1, #228	; 0xe4
 8002d20:	187b      	adds	r3, r7, r1
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
	left_motor.encoder = 0;
 8002d26:	187b      	adds	r3, r7, r1
 8002d28:	2200      	movs	r2, #0
 8002d2a:	605a      	str	r2, [r3, #4]
	left_motor.timer = &htim3;
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	4a6e      	ldr	r2, [pc, #440]	; (8002ee8 <main+0x260>)
 8002d30:	609a      	str	r2, [r3, #8]
	left_motor.ch1 = TIM_CHANNEL_3;
 8002d32:	187b      	adds	r3, r7, r1
 8002d34:	2208      	movs	r2, #8
 8002d36:	60da      	str	r2, [r3, #12]
	left_motor.ch2 = TIM_CHANNEL_4;
 8002d38:	187b      	adds	r3, r7, r1
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	611a      	str	r2, [r3, #16]
	left_motor.rad_pid.Kp = 100.0;
 8002d3e:	187b      	adds	r3, r7, r1
 8002d40:	4a6a      	ldr	r2, [pc, #424]	; (8002eec <main+0x264>)
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c
	left_motor.rad_pid.Ki = 0;
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	2200      	movs	r2, #0
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
	left_motor.rad_pid.Kd = 0;
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	635a      	str	r2, [r3, #52]	; 0x34
	left_motor.pos_pid.Kp = 1000.0;
 8002d50:	187b      	adds	r3, r7, r1
 8002d52:	4a67      	ldr	r2, [pc, #412]	; (8002ef0 <main+0x268>)
 8002d54:	651a      	str	r2, [r3, #80]	; 0x50
	left_motor.pos_pid.Ki = 0;
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	2200      	movs	r2, #0
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
	left_motor.pos_pid.Kd = 0;
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	2200      	movs	r2, #0
 8002d60:	659a      	str	r2, [r3, #88]	; 0x58

	Robot robot;
	robot.left = left_motor;
 8002d62:	4b64      	ldr	r3, [pc, #400]	; (8002ef4 <main+0x26c>)
 8002d64:	22d0      	movs	r2, #208	; 0xd0
 8002d66:	0052      	lsls	r2, r2, #1
 8002d68:	18ba      	adds	r2, r7, r2
 8002d6a:	18d2      	adds	r2, r2, r3
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	0010      	movs	r0, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	235c      	movs	r3, #92	; 0x5c
 8002d74:	001a      	movs	r2, r3
 8002d76:	f003 ffa7 	bl	8006cc8 <memcpy>
	robot.right = right_motor;
 8002d7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <main+0x26c>)
 8002d7c:	22d0      	movs	r2, #208	; 0xd0
 8002d7e:	0052      	lsls	r2, r2, #1
 8002d80:	4694      	mov	ip, r2
 8002d82:	44bc      	add	ip, r7
 8002d84:	4463      	add	r3, ip
 8002d86:	193a      	adds	r2, r7, r4
 8002d88:	335c      	adds	r3, #92	; 0x5c
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	225c      	movs	r2, #92	; 0x5c
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f003 ff9a 	bl	8006cc8 <memcpy>
	robot.x = 0;
 8002d94:	4b57      	ldr	r3, [pc, #348]	; (8002ef4 <main+0x26c>)
 8002d96:	22d0      	movs	r2, #208	; 0xd0
 8002d98:	0052      	lsls	r2, r2, #1
 8002d9a:	4694      	mov	ip, r2
 8002d9c:	44bc      	add	ip, r7
 8002d9e:	4463      	add	r3, ip
 8002da0:	33c0      	adds	r3, #192	; 0xc0
 8002da2:	001a      	movs	r2, r3
 8002da4:	2300      	movs	r3, #0
 8002da6:	2400      	movs	r4, #0
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	6054      	str	r4, [r2, #4]
	robot.y = 0;
 8002dac:	4b51      	ldr	r3, [pc, #324]	; (8002ef4 <main+0x26c>)
 8002dae:	22d0      	movs	r2, #208	; 0xd0
 8002db0:	0052      	lsls	r2, r2, #1
 8002db2:	4694      	mov	ip, r2
 8002db4:	44bc      	add	ip, r7
 8002db6:	4463      	add	r3, ip
 8002db8:	33c8      	adds	r3, #200	; 0xc8
 8002dba:	001a      	movs	r2, r3
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	2400      	movs	r4, #0
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	6054      	str	r4, [r2, #4]
	robot.theta = 0;
 8002dc4:	4b4b      	ldr	r3, [pc, #300]	; (8002ef4 <main+0x26c>)
 8002dc6:	22d0      	movs	r2, #208	; 0xd0
 8002dc8:	0052      	lsls	r2, r2, #1
 8002dca:	4694      	mov	ip, r2
 8002dcc:	44bc      	add	ip, r7
 8002dce:	4463      	add	r3, ip
 8002dd0:	33d0      	adds	r3, #208	; 0xd0
 8002dd2:	001a      	movs	r2, r3
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2400      	movs	r4, #0
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	6054      	str	r4, [r2, #4]
	robot.stop = 0;
 8002ddc:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <main+0x26c>)
 8002dde:	22d0      	movs	r2, #208	; 0xd0
 8002de0:	0052      	lsls	r2, r2, #1
 8002de2:	4694      	mov	ip, r2
 8002de4:	44bc      	add	ip, r7
 8002de6:	4463      	add	r3, ip
 8002de8:	22d8      	movs	r2, #216	; 0xd8
 8002dea:	2100      	movs	r1, #0
 8002dec:	5499      	strb	r1, [r3, r2]
	robot.cliff = 0;
 8002dee:	4b41      	ldr	r3, [pc, #260]	; (8002ef4 <main+0x26c>)
 8002df0:	22d0      	movs	r2, #208	; 0xd0
 8002df2:	0052      	lsls	r2, r2, #1
 8002df4:	4694      	mov	ip, r2
 8002df6:	44bc      	add	ip, r7
 8002df8:	4463      	add	r3, ip
 8002dfa:	22b8      	movs	r2, #184	; 0xb8
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	5499      	strb	r1, [r3, r2]

	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8002e00:	4b3d      	ldr	r3, [pc, #244]	; (8002ef8 <main+0x270>)
 8002e02:	2100      	movs	r1, #0
 8002e04:	0018      	movs	r0, r3
 8002e06:	f002 f813 	bl	8004e30 <HAL_ADCEx_Calibration_Start>
	TIM22->CR1 |= TIM_CR1_CEN;
 8002e0a:	4b3c      	ldr	r3, [pc, #240]	; (8002efc <main+0x274>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <main+0x274>)
 8002e10:	2101      	movs	r1, #1
 8002e12:	430a      	orrs	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]
	  RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 8002e16:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <main+0x278>)
 8002e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1a:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <main+0x278>)
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	62da      	str	r2, [r3, #44]	; 0x2c
	  bitbang_init_lcd();
 8002e22:	f000 fbf3 	bl	800360c <bitbang_init_lcd>
	  TIM22->CNT = 30000;
 8002e26:	4b35      	ldr	r3, [pc, #212]	; (8002efc <main+0x274>)
 8002e28:	4a36      	ldr	r2, [pc, #216]	; (8002f04 <main+0x27c>)
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24


	  HAL_TIM_Base_Start_IT(&htim6);
 8002e2c:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <main+0x280>)
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f003 f8f6 	bl	8006020 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	DMAInit((uint32_t*) buffer, 5);
 8002e34:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <main+0x284>)
 8002e36:	2105      	movs	r1, #5
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f000 ff39 	bl	8003cb0 <DMAInit>
	TIM2_conf();
 8002e3e:	f001 f9f1 	bl	8004224 <TIM2_conf>
	arm_pid_init_f32(&robot.right.pos_pid,1);
 8002e42:	003b      	movs	r3, r7
 8002e44:	3394      	adds	r3, #148	; 0x94
 8002e46:	2101      	movs	r1, #1
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f003 fef2 	bl	8006c32 <arm_pid_init_f32>
	arm_pid_init_f32(&robot.right.rad_pid,1);
 8002e4e:	003b      	movs	r3, r7
 8002e50:	3370      	adds	r3, #112	; 0x70
 8002e52:	2101      	movs	r1, #1
 8002e54:	0018      	movs	r0, r3
 8002e56:	f003 feec 	bl	8006c32 <arm_pid_init_f32>
	arm_pid_init_f32(&robot.left.pos_pid,1);
 8002e5a:	003b      	movs	r3, r7
 8002e5c:	3338      	adds	r3, #56	; 0x38
 8002e5e:	2101      	movs	r1, #1
 8002e60:	0018      	movs	r0, r3
 8002e62:	f003 fee6 	bl	8006c32 <arm_pid_init_f32>
	arm_pid_init_f32(&robot.left.rad_pid,1);
 8002e66:	003b      	movs	r3, r7
 8002e68:	3314      	adds	r3, #20
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f003 fee0 	bl	8006c32 <arm_pid_init_f32>

	int sw = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	22ce      	movs	r2, #206	; 0xce
 8002e76:	0052      	lsls	r2, r2, #1
 8002e78:	18ba      	adds	r2, r7, r2
 8002e7a:	6013      	str	r3, [r2, #0]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(robot.stop){
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <main+0x26c>)
 8002e7e:	22d0      	movs	r2, #208	; 0xd0
 8002e80:	0052      	lsls	r2, r2, #1
 8002e82:	4694      	mov	ip, r2
 8002e84:	44bc      	add	ip, r7
 8002e86:	4463      	add	r3, ip
 8002e88:	22d8      	movs	r2, #216	; 0xd8
 8002e8a:	5c9b      	ldrb	r3, [r3, r2]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d004      	beq.n	8002e9a <main+0x212>
			stop(&robot);
 8002e90:	003b      	movs	r3, r7
 8002e92:	0018      	movs	r0, r3
 8002e94:	f000 fef2 	bl	8003c7c <stop>
 8002e98:	e7f0      	b.n	8002e7c <main+0x1f4>
		} else {
		if(robot.cliff){
 8002e9a:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <main+0x26c>)
 8002e9c:	22d0      	movs	r2, #208	; 0xd0
 8002e9e:	0052      	lsls	r2, r2, #1
 8002ea0:	4694      	mov	ip, r2
 8002ea2:	44bc      	add	ip, r7
 8002ea4:	4463      	add	r3, ip
 8002ea6:	22b8      	movs	r2, #184	; 0xb8
 8002ea8:	5c9b      	ldrb	r3, [r3, r2]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <main+0x230>
			stop(&robot);
 8002eae:	003b      	movs	r3, r7
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f000 fee3 	bl	8003c7c <stop>
 8002eb6:	e7e1      	b.n	8002e7c <main+0x1f4>
		} else {
			if(IR_align()){
 8002eb8:	f000 ffa0 	bl	8003dfc <IR_align>
 8002ebc:	1e03      	subs	r3, r0, #0
 8002ebe:	d00e      	beq.n	8002ede <main+0x256>
				if(turn_until(&robot, IR_align)){
 8002ec0:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <main+0x288>)
 8002ec2:	003b      	movs	r3, r7
 8002ec4:	0011      	movs	r1, r2
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f000 fe86 	bl	8003bd8 <turn_until>
 8002ecc:	1e03      	subs	r3, r0, #0
 8002ece:	d0d5      	beq.n	8002e7c <main+0x1f4>
					move_until(&robot, IR_dock, 1);
 8002ed0:	4910      	ldr	r1, [pc, #64]	; (8002f14 <main+0x28c>)
 8002ed2:	003b      	movs	r3, r7
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f000 fe42 	bl	8003b60 <move_until>
 8002edc:	e7ce      	b.n	8002e7c <main+0x1f4>
				}
			} else{
				stop(&robot);
 8002ede:	003b      	movs	r3, r7
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f000 fecb 	bl	8003c7c <stop>
		if(robot.stop){
 8002ee6:	e7c9      	b.n	8002e7c <main+0x1f4>
 8002ee8:	20000114 	.word	0x20000114
 8002eec:	42c80000 	.word	0x42c80000
 8002ef0:	447a0000 	.word	0x447a0000
 8002ef4:	fffffe60 	.word	0xfffffe60
 8002ef8:	20000350 	.word	0x20000350
 8002efc:	40011400 	.word	0x40011400
 8002f00:	40021000 	.word	0x40021000
 8002f04:	00007530 	.word	0x00007530
 8002f08:	200002d8 	.word	0x200002d8
 8002f0c:	200001e8 	.word	0x200001e8
 8002f10:	08003dfd 	.word	0x08003dfd
 8002f14:	08003e3f 	.word	0x08003e3f

08002f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b095      	sub	sp, #84	; 0x54
 8002f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f1e:	2418      	movs	r4, #24
 8002f20:	193b      	adds	r3, r7, r4
 8002f22:	0018      	movs	r0, r3
 8002f24:	2338      	movs	r3, #56	; 0x38
 8002f26:	001a      	movs	r2, r3
 8002f28:	2100      	movs	r1, #0
 8002f2a:	f003 fed6 	bl	8006cda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f2e:	1d3b      	adds	r3, r7, #4
 8002f30:	0018      	movs	r0, r3
 8002f32:	2314      	movs	r3, #20
 8002f34:	001a      	movs	r2, r3
 8002f36:	2100      	movs	r1, #0
 8002f38:	f003 fecf 	bl	8006cda <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f3c:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <SystemClock_Config+0xa0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1e      	ldr	r2, [pc, #120]	; (8002fbc <SystemClock_Config+0xa4>)
 8002f42:	401a      	ands	r2, r3
 8002f44:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <SystemClock_Config+0xa0>)
 8002f46:	2180      	movs	r1, #128	; 0x80
 8002f48:	0109      	lsls	r1, r1, #4
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002f4e:	0021      	movs	r1, r4
 8002f50:	187b      	adds	r3, r7, r1
 8002f52:	2210      	movs	r2, #16
 8002f54:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f56:	187b      	adds	r3, r7, r1
 8002f58:	2201      	movs	r2, #1
 8002f5a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f5c:	187b      	adds	r3, r7, r1
 8002f5e:	2200      	movs	r2, #0
 8002f60:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002f62:	187b      	adds	r3, r7, r1
 8002f64:	22a0      	movs	r2, #160	; 0xa0
 8002f66:	0212      	lsls	r2, r2, #8
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f6a:	187b      	adds	r3, r7, r1
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f70:	187b      	adds	r3, r7, r1
 8002f72:	0018      	movs	r0, r3
 8002f74:	f002 faaa 	bl	80054cc <HAL_RCC_OscConfig>
 8002f78:	1e03      	subs	r3, r0, #0
 8002f7a:	d001      	beq.n	8002f80 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8002f7c:	f000 fb40 	bl	8003600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	220f      	movs	r2, #15
 8002f84:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	2200      	movs	r2, #0
 8002f8a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	2200      	movs	r2, #0
 8002f96:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f98:	1d3b      	adds	r3, r7, #4
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f9e:	1d3b      	adds	r3, r7, #4
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f002 fe62 	bl	8005c6c <HAL_RCC_ClockConfig>
 8002fa8:	1e03      	subs	r3, r0, #0
 8002faa:	d001      	beq.n	8002fb0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002fac:	f000 fb28 	bl	8003600 <Error_Handler>
  }
}
 8002fb0:	46c0      	nop			; (mov r8, r8)
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b015      	add	sp, #84	; 0x54
 8002fb6:	bd90      	pop	{r4, r7, pc}
 8002fb8:	40007000 	.word	0x40007000
 8002fbc:	ffffe7ff 	.word	0xffffe7ff

08002fc0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002fc6:	003b      	movs	r3, r7
 8002fc8:	0018      	movs	r0, r3
 8002fca:	2308      	movs	r3, #8
 8002fcc:	001a      	movs	r2, r3
 8002fce:	2100      	movs	r1, #0
 8002fd0:	f003 fe83 	bl	8006cda <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8002fd4:	4b44      	ldr	r3, [pc, #272]	; (80030e8 <MX_ADC_Init+0x128>)
 8002fd6:	4a45      	ldr	r2, [pc, #276]	; (80030ec <MX_ADC_Init+0x12c>)
 8002fd8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002fda:	4b43      	ldr	r3, [pc, #268]	; (80030e8 <MX_ADC_Init+0x128>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002fe0:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <MX_ADC_Init+0x128>)
 8002fe2:	22c0      	movs	r2, #192	; 0xc0
 8002fe4:	0612      	lsls	r2, r2, #24
 8002fe6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002fe8:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <MX_ADC_Init+0x128>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
 8002fee:	4b3e      	ldr	r3, [pc, #248]	; (80030e8 <MX_ADC_Init+0x128>)
 8002ff0:	2205      	movs	r2, #5
 8002ff2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002ff4:	4b3c      	ldr	r3, [pc, #240]	; (80030e8 <MX_ADC_Init+0x128>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ffa:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <MX_ADC_Init+0x128>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003000:	4b39      	ldr	r3, [pc, #228]	; (80030e8 <MX_ADC_Init+0x128>)
 8003002:	2220      	movs	r2, #32
 8003004:	2100      	movs	r1, #0
 8003006:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003008:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <MX_ADC_Init+0x128>)
 800300a:	2221      	movs	r2, #33	; 0x21
 800300c:	2100      	movs	r1, #0
 800300e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003010:	4b35      	ldr	r3, [pc, #212]	; (80030e8 <MX_ADC_Init+0x128>)
 8003012:	2200      	movs	r2, #0
 8003014:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003016:	4b34      	ldr	r3, [pc, #208]	; (80030e8 <MX_ADC_Init+0x128>)
 8003018:	22c2      	movs	r2, #194	; 0xc2
 800301a:	32ff      	adds	r2, #255	; 0xff
 800301c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800301e:	4b32      	ldr	r3, [pc, #200]	; (80030e8 <MX_ADC_Init+0x128>)
 8003020:	222c      	movs	r2, #44	; 0x2c
 8003022:	2100      	movs	r1, #0
 8003024:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003026:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <MX_ADC_Init+0x128>)
 8003028:	2204      	movs	r2, #4
 800302a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800302c:	4b2e      	ldr	r3, [pc, #184]	; (80030e8 <MX_ADC_Init+0x128>)
 800302e:	2200      	movs	r2, #0
 8003030:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003032:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <MX_ADC_Init+0x128>)
 8003034:	2200      	movs	r2, #0
 8003036:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003038:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <MX_ADC_Init+0x128>)
 800303a:	2200      	movs	r2, #0
 800303c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800303e:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <MX_ADC_Init+0x128>)
 8003040:	2200      	movs	r2, #0
 8003042:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003044:	4b28      	ldr	r3, [pc, #160]	; (80030e8 <MX_ADC_Init+0x128>)
 8003046:	0018      	movs	r0, r3
 8003048:	f001 fcc0 	bl	80049cc <HAL_ADC_Init>
 800304c:	1e03      	subs	r3, r0, #0
 800304e:	d001      	beq.n	8003054 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003050:	f000 fad6 	bl	8003600 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003054:	003b      	movs	r3, r7
 8003056:	4a26      	ldr	r2, [pc, #152]	; (80030f0 <MX_ADC_Init+0x130>)
 8003058:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800305a:	003b      	movs	r3, r7
 800305c:	2280      	movs	r2, #128	; 0x80
 800305e:	0152      	lsls	r2, r2, #5
 8003060:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003062:	003a      	movs	r2, r7
 8003064:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <MX_ADC_Init+0x128>)
 8003066:	0011      	movs	r1, r2
 8003068:	0018      	movs	r0, r3
 800306a:	f001 fe23 	bl	8004cb4 <HAL_ADC_ConfigChannel>
 800306e:	1e03      	subs	r3, r0, #0
 8003070:	d001      	beq.n	8003076 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003072:	f000 fac5 	bl	8003600 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003076:	003b      	movs	r3, r7
 8003078:	4a1e      	ldr	r2, [pc, #120]	; (80030f4 <MX_ADC_Init+0x134>)
 800307a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800307c:	003a      	movs	r2, r7
 800307e:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <MX_ADC_Init+0x128>)
 8003080:	0011      	movs	r1, r2
 8003082:	0018      	movs	r0, r3
 8003084:	f001 fe16 	bl	8004cb4 <HAL_ADC_ConfigChannel>
 8003088:	1e03      	subs	r3, r0, #0
 800308a:	d001      	beq.n	8003090 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800308c:	f000 fab8 	bl	8003600 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003090:	003b      	movs	r3, r7
 8003092:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <MX_ADC_Init+0x138>)
 8003094:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003096:	003a      	movs	r2, r7
 8003098:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <MX_ADC_Init+0x128>)
 800309a:	0011      	movs	r1, r2
 800309c:	0018      	movs	r0, r3
 800309e:	f001 fe09 	bl	8004cb4 <HAL_ADC_ConfigChannel>
 80030a2:	1e03      	subs	r3, r0, #0
 80030a4:	d001      	beq.n	80030aa <MX_ADC_Init+0xea>
  {
    Error_Handler();
 80030a6:	f000 faab 	bl	8003600 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80030aa:	003b      	movs	r3, r7
 80030ac:	4a13      	ldr	r2, [pc, #76]	; (80030fc <MX_ADC_Init+0x13c>)
 80030ae:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80030b0:	003a      	movs	r2, r7
 80030b2:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <MX_ADC_Init+0x128>)
 80030b4:	0011      	movs	r1, r2
 80030b6:	0018      	movs	r0, r3
 80030b8:	f001 fdfc 	bl	8004cb4 <HAL_ADC_ConfigChannel>
 80030bc:	1e03      	subs	r3, r0, #0
 80030be:	d001      	beq.n	80030c4 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 80030c0:	f000 fa9e 	bl	8003600 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80030c4:	003b      	movs	r3, r7
 80030c6:	4a0e      	ldr	r2, [pc, #56]	; (8003100 <MX_ADC_Init+0x140>)
 80030c8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80030ca:	003a      	movs	r2, r7
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <MX_ADC_Init+0x128>)
 80030ce:	0011      	movs	r1, r2
 80030d0:	0018      	movs	r0, r3
 80030d2:	f001 fdef 	bl	8004cb4 <HAL_ADC_ConfigChannel>
 80030d6:	1e03      	subs	r3, r0, #0
 80030d8:	d001      	beq.n	80030de <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 80030da:	f000 fa91 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b002      	add	sp, #8
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	20000350 	.word	0x20000350
 80030ec:	40012400 	.word	0x40012400
 80030f0:	28000400 	.word	0x28000400
 80030f4:	2c000800 	.word	0x2c000800
 80030f8:	30001000 	.word	0x30001000
 80030fc:	34002000 	.word	0x34002000
 8003100:	38004000 	.word	0x38004000

08003104 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800310a:	2310      	movs	r3, #16
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	0018      	movs	r0, r3
 8003110:	2308      	movs	r3, #8
 8003112:	001a      	movs	r2, r3
 8003114:	2100      	movs	r1, #0
 8003116:	f003 fde0 	bl	8006cda <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800311a:	003b      	movs	r3, r7
 800311c:	0018      	movs	r0, r3
 800311e:	2310      	movs	r3, #16
 8003120:	001a      	movs	r2, r3
 8003122:	2100      	movs	r1, #0
 8003124:	f003 fdd9 	bl	8006cda <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003128:	4b29      	ldr	r3, [pc, #164]	; (80031d0 <MX_TIM2_Init+0xcc>)
 800312a:	2280      	movs	r2, #128	; 0x80
 800312c:	05d2      	lsls	r2, r2, #23
 800312e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003130:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <MX_TIM2_Init+0xcc>)
 8003132:	2200      	movs	r2, #0
 8003134:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003136:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <MX_TIM2_Init+0xcc>)
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800313c:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <MX_TIM2_Init+0xcc>)
 800313e:	2200      	movs	r2, #0
 8003140:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003142:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <MX_TIM2_Init+0xcc>)
 8003144:	2200      	movs	r2, #0
 8003146:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003148:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <MX_TIM2_Init+0xcc>)
 800314a:	2200      	movs	r2, #0
 800314c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800314e:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <MX_TIM2_Init+0xcc>)
 8003150:	0018      	movs	r0, r3
 8003152:	f002 ff87 	bl	8006064 <HAL_TIM_PWM_Init>
 8003156:	1e03      	subs	r3, r0, #0
 8003158:	d001      	beq.n	800315e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800315a:	f000 fa51 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800315e:	2110      	movs	r1, #16
 8003160:	187b      	adds	r3, r7, r1
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003166:	187b      	adds	r3, r7, r1
 8003168:	2200      	movs	r2, #0
 800316a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800316c:	187a      	adds	r2, r7, r1
 800316e:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <MX_TIM2_Init+0xcc>)
 8003170:	0011      	movs	r1, r2
 8003172:	0018      	movs	r0, r3
 8003174:	f003 fcfd 	bl	8006b72 <HAL_TIMEx_MasterConfigSynchronization>
 8003178:	1e03      	subs	r3, r0, #0
 800317a:	d001      	beq.n	8003180 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800317c:	f000 fa40 	bl	8003600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003180:	003b      	movs	r3, r7
 8003182:	2260      	movs	r2, #96	; 0x60
 8003184:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003186:	003b      	movs	r3, r7
 8003188:	2200      	movs	r2, #0
 800318a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800318c:	003b      	movs	r3, r7
 800318e:	2200      	movs	r2, #0
 8003190:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003192:	003b      	movs	r3, r7
 8003194:	2200      	movs	r2, #0
 8003196:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003198:	0039      	movs	r1, r7
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <MX_TIM2_Init+0xcc>)
 800319c:	2200      	movs	r2, #0
 800319e:	0018      	movs	r0, r3
 80031a0:	f003 f92a 	bl	80063f8 <HAL_TIM_PWM_ConfigChannel>
 80031a4:	1e03      	subs	r3, r0, #0
 80031a6:	d001      	beq.n	80031ac <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80031a8:	f000 fa2a 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM3_TI1_GPIO) != HAL_OK)
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <MX_TIM2_Init+0xcc>)
 80031ae:	2104      	movs	r1, #4
 80031b0:	0018      	movs	r0, r3
 80031b2:	f003 fd21 	bl	8006bf8 <HAL_TIMEx_RemapConfig>
 80031b6:	1e03      	subs	r3, r0, #0
 80031b8:	d001      	beq.n	80031be <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80031ba:	f000 fa21 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80031be:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <MX_TIM2_Init+0xcc>)
 80031c0:	0018      	movs	r0, r3
 80031c2:	f001 f96d 	bl	80044a0 <HAL_TIM_MspPostInit>

}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b006      	add	sp, #24
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	20000314 	.word	0x20000314

080031d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031da:	2318      	movs	r3, #24
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	0018      	movs	r0, r3
 80031e0:	2310      	movs	r3, #16
 80031e2:	001a      	movs	r2, r3
 80031e4:	2100      	movs	r1, #0
 80031e6:	f003 fd78 	bl	8006cda <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ea:	2310      	movs	r3, #16
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	0018      	movs	r0, r3
 80031f0:	2308      	movs	r3, #8
 80031f2:	001a      	movs	r2, r3
 80031f4:	2100      	movs	r1, #0
 80031f6:	f003 fd70 	bl	8006cda <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031fa:	003b      	movs	r3, r7
 80031fc:	0018      	movs	r0, r3
 80031fe:	2310      	movs	r3, #16
 8003200:	001a      	movs	r2, r3
 8003202:	2100      	movs	r1, #0
 8003204:	f003 fd69 	bl	8006cda <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003208:	4b43      	ldr	r3, [pc, #268]	; (8003318 <MX_TIM3_Init+0x144>)
 800320a:	4a44      	ldr	r2, [pc, #272]	; (800331c <MX_TIM3_Init+0x148>)
 800320c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800320e:	4b42      	ldr	r3, [pc, #264]	; (8003318 <MX_TIM3_Init+0x144>)
 8003210:	2200      	movs	r2, #0
 8003212:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003214:	4b40      	ldr	r3, [pc, #256]	; (8003318 <MX_TIM3_Init+0x144>)
 8003216:	2200      	movs	r2, #0
 8003218:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800321a:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <MX_TIM3_Init+0x144>)
 800321c:	4a40      	ldr	r2, [pc, #256]	; (8003320 <MX_TIM3_Init+0x14c>)
 800321e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003220:	4b3d      	ldr	r3, [pc, #244]	; (8003318 <MX_TIM3_Init+0x144>)
 8003222:	2200      	movs	r2, #0
 8003224:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003226:	4b3c      	ldr	r3, [pc, #240]	; (8003318 <MX_TIM3_Init+0x144>)
 8003228:	2200      	movs	r2, #0
 800322a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800322c:	4b3a      	ldr	r3, [pc, #232]	; (8003318 <MX_TIM3_Init+0x144>)
 800322e:	0018      	movs	r0, r3
 8003230:	f002 feca 	bl	8005fc8 <HAL_TIM_Base_Init>
 8003234:	1e03      	subs	r3, r0, #0
 8003236:	d001      	beq.n	800323c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003238:	f000 f9e2 	bl	8003600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800323c:	2118      	movs	r1, #24
 800323e:	187b      	adds	r3, r7, r1
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	0152      	lsls	r2, r2, #5
 8003244:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003246:	187a      	adds	r2, r7, r1
 8003248:	4b33      	ldr	r3, [pc, #204]	; (8003318 <MX_TIM3_Init+0x144>)
 800324a:	0011      	movs	r1, r2
 800324c:	0018      	movs	r0, r3
 800324e:	f003 f98b 	bl	8006568 <HAL_TIM_ConfigClockSource>
 8003252:	1e03      	subs	r3, r0, #0
 8003254:	d001      	beq.n	800325a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8003256:	f000 f9d3 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800325a:	4b2f      	ldr	r3, [pc, #188]	; (8003318 <MX_TIM3_Init+0x144>)
 800325c:	0018      	movs	r0, r3
 800325e:	f002 ff01 	bl	8006064 <HAL_TIM_PWM_Init>
 8003262:	1e03      	subs	r3, r0, #0
 8003264:	d001      	beq.n	800326a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003266:	f000 f9cb 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800326a:	2110      	movs	r1, #16
 800326c:	187b      	adds	r3, r7, r1
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003272:	187b      	adds	r3, r7, r1
 8003274:	2200      	movs	r2, #0
 8003276:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003278:	187a      	adds	r2, r7, r1
 800327a:	4b27      	ldr	r3, [pc, #156]	; (8003318 <MX_TIM3_Init+0x144>)
 800327c:	0011      	movs	r1, r2
 800327e:	0018      	movs	r0, r3
 8003280:	f003 fc77 	bl	8006b72 <HAL_TIMEx_MasterConfigSynchronization>
 8003284:	1e03      	subs	r3, r0, #0
 8003286:	d001      	beq.n	800328c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8003288:	f000 f9ba 	bl	8003600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800328c:	003b      	movs	r3, r7
 800328e:	2260      	movs	r2, #96	; 0x60
 8003290:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003292:	003b      	movs	r3, r7
 8003294:	2200      	movs	r2, #0
 8003296:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003298:	003b      	movs	r3, r7
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800329e:	003b      	movs	r3, r7
 80032a0:	2200      	movs	r2, #0
 80032a2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032a4:	0039      	movs	r1, r7
 80032a6:	4b1c      	ldr	r3, [pc, #112]	; (8003318 <MX_TIM3_Init+0x144>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	0018      	movs	r0, r3
 80032ac:	f003 f8a4 	bl	80063f8 <HAL_TIM_PWM_ConfigChannel>
 80032b0:	1e03      	subs	r3, r0, #0
 80032b2:	d001      	beq.n	80032b8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80032b4:	f000 f9a4 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80032b8:	4b17      	ldr	r3, [pc, #92]	; (8003318 <MX_TIM3_Init+0x144>)
 80032ba:	2104      	movs	r1, #4
 80032bc:	0018      	movs	r0, r3
 80032be:	f003 fc9b 	bl	8006bf8 <HAL_TIMEx_RemapConfig>
 80032c2:	1e03      	subs	r3, r0, #0
 80032c4:	d001      	beq.n	80032ca <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 80032c6:	f000 f99b 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032ca:	0039      	movs	r1, r7
 80032cc:	4b12      	ldr	r3, [pc, #72]	; (8003318 <MX_TIM3_Init+0x144>)
 80032ce:	2204      	movs	r2, #4
 80032d0:	0018      	movs	r0, r3
 80032d2:	f003 f891 	bl	80063f8 <HAL_TIM_PWM_ConfigChannel>
 80032d6:	1e03      	subs	r3, r0, #0
 80032d8:	d001      	beq.n	80032de <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 80032da:	f000 f991 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032de:	0039      	movs	r1, r7
 80032e0:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <MX_TIM3_Init+0x144>)
 80032e2:	2208      	movs	r2, #8
 80032e4:	0018      	movs	r0, r3
 80032e6:	f003 f887 	bl	80063f8 <HAL_TIM_PWM_ConfigChannel>
 80032ea:	1e03      	subs	r3, r0, #0
 80032ec:	d001      	beq.n	80032f2 <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 80032ee:	f000 f987 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80032f2:	0039      	movs	r1, r7
 80032f4:	4b08      	ldr	r3, [pc, #32]	; (8003318 <MX_TIM3_Init+0x144>)
 80032f6:	220c      	movs	r2, #12
 80032f8:	0018      	movs	r0, r3
 80032fa:	f003 f87d 	bl	80063f8 <HAL_TIM_PWM_ConfigChannel>
 80032fe:	1e03      	subs	r3, r0, #0
 8003300:	d001      	beq.n	8003306 <MX_TIM3_Init+0x132>
  {
    Error_Handler();
 8003302:	f000 f97d 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <MX_TIM3_Init+0x144>)
 8003308:	0018      	movs	r0, r3
 800330a:	f001 f8c9 	bl	80044a0 <HAL_TIM_MspPostInit>

}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b00a      	add	sp, #40	; 0x28
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	20000114 	.word	0x20000114
 800331c:	40000400 	.word	0x40000400
 8003320:	00002710 	.word	0x00002710

08003324 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800332a:	003b      	movs	r3, r7
 800332c:	0018      	movs	r0, r3
 800332e:	2308      	movs	r3, #8
 8003330:	001a      	movs	r2, r3
 8003332:	2100      	movs	r1, #0
 8003334:	f003 fcd1 	bl	8006cda <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003338:	4b15      	ldr	r3, [pc, #84]	; (8003390 <MX_TIM6_Init+0x6c>)
 800333a:	4a16      	ldr	r2, [pc, #88]	; (8003394 <MX_TIM6_Init+0x70>)
 800333c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2099;
 800333e:	4b14      	ldr	r3, [pc, #80]	; (8003390 <MX_TIM6_Init+0x6c>)
 8003340:	4a15      	ldr	r2, [pc, #84]	; (8003398 <MX_TIM6_Init+0x74>)
 8003342:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003344:	4b12      	ldr	r3, [pc, #72]	; (8003390 <MX_TIM6_Init+0x6c>)
 8003346:	2200      	movs	r2, #0
 8003348:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 249;
 800334a:	4b11      	ldr	r3, [pc, #68]	; (8003390 <MX_TIM6_Init+0x6c>)
 800334c:	22f9      	movs	r2, #249	; 0xf9
 800334e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003350:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <MX_TIM6_Init+0x6c>)
 8003352:	2200      	movs	r2, #0
 8003354:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003356:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <MX_TIM6_Init+0x6c>)
 8003358:	0018      	movs	r0, r3
 800335a:	f002 fe35 	bl	8005fc8 <HAL_TIM_Base_Init>
 800335e:	1e03      	subs	r3, r0, #0
 8003360:	d001      	beq.n	8003366 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003362:	f000 f94d 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003366:	003b      	movs	r3, r7
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800336c:	003b      	movs	r3, r7
 800336e:	2200      	movs	r2, #0
 8003370:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003372:	003a      	movs	r2, r7
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <MX_TIM6_Init+0x6c>)
 8003376:	0011      	movs	r1, r2
 8003378:	0018      	movs	r0, r3
 800337a:	f003 fbfa 	bl	8006b72 <HAL_TIMEx_MasterConfigSynchronization>
 800337e:	1e03      	subs	r3, r0, #0
 8003380:	d001      	beq.n	8003386 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003382:	f000 f93d 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	b002      	add	sp, #8
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	200002d8 	.word	0x200002d8
 8003394:	40001000 	.word	0x40001000
 8003398:	00000833 	.word	0x00000833

0800339c <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b08d      	sub	sp, #52	; 0x34
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80033a2:	240c      	movs	r4, #12
 80033a4:	193b      	adds	r3, r7, r4
 80033a6:	0018      	movs	r0, r3
 80033a8:	2324      	movs	r3, #36	; 0x24
 80033aa:	001a      	movs	r2, r3
 80033ac:	2100      	movs	r1, #0
 80033ae:	f003 fc94 	bl	8006cda <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033b2:	1d3b      	adds	r3, r7, #4
 80033b4:	0018      	movs	r0, r3
 80033b6:	2308      	movs	r3, #8
 80033b8:	001a      	movs	r2, r3
 80033ba:	2100      	movs	r1, #0
 80033bc:	f003 fc8d 	bl	8006cda <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 80033c0:	4b2a      	ldr	r3, [pc, #168]	; (800346c <MX_TIM22_Init+0xd0>)
 80033c2:	4a2b      	ldr	r2, [pc, #172]	; (8003470 <MX_TIM22_Init+0xd4>)
 80033c4:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 80033c6:	4b29      	ldr	r3, [pc, #164]	; (800346c <MX_TIM22_Init+0xd0>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033cc:	4b27      	ldr	r3, [pc, #156]	; (800346c <MX_TIM22_Init+0xd0>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 65000;
 80033d2:	4b26      	ldr	r3, [pc, #152]	; (800346c <MX_TIM22_Init+0xd0>)
 80033d4:	4a27      	ldr	r2, [pc, #156]	; (8003474 <MX_TIM22_Init+0xd8>)
 80033d6:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80033d8:	4b24      	ldr	r3, [pc, #144]	; (800346c <MX_TIM22_Init+0xd0>)
 80033da:	2280      	movs	r2, #128	; 0x80
 80033dc:	0092      	lsls	r2, r2, #2
 80033de:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e0:	4b22      	ldr	r3, [pc, #136]	; (800346c <MX_TIM22_Init+0xd0>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80033e6:	0021      	movs	r1, r4
 80033e8:	187b      	adds	r3, r7, r1
 80033ea:	2203      	movs	r2, #3
 80033ec:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80033ee:	187b      	adds	r3, r7, r1
 80033f0:	2202      	movs	r2, #2
 80033f2:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033f4:	187b      	adds	r3, r7, r1
 80033f6:	2201      	movs	r2, #1
 80033f8:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033fa:	187b      	adds	r3, r7, r1
 80033fc:	2200      	movs	r2, #0
 80033fe:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 4;
 8003400:	187b      	adds	r3, r7, r1
 8003402:	2204      	movs	r2, #4
 8003404:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003406:	187b      	adds	r3, r7, r1
 8003408:	2202      	movs	r2, #2
 800340a:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800340c:	187b      	adds	r3, r7, r1
 800340e:	2201      	movs	r2, #1
 8003410:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8003412:	187b      	adds	r3, r7, r1
 8003414:	2208      	movs	r2, #8
 8003416:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003418:	187b      	adds	r3, r7, r1
 800341a:	2200      	movs	r2, #0
 800341c:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim22, &sConfig) != HAL_OK)
 800341e:	187a      	adds	r2, r7, r1
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <MX_TIM22_Init+0xd0>)
 8003422:	0011      	movs	r1, r2
 8003424:	0018      	movs	r0, r3
 8003426:	f002 fe6b 	bl	8006100 <HAL_TIM_Encoder_Init>
 800342a:	1e03      	subs	r3, r0, #0
 800342c:	d001      	beq.n	8003432 <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 800342e:	f000 f8e7 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	2200      	movs	r2, #0
 800343c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 800343e:	1d3a      	adds	r2, r7, #4
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <MX_TIM22_Init+0xd0>)
 8003442:	0011      	movs	r1, r2
 8003444:	0018      	movs	r0, r3
 8003446:	f003 fb94 	bl	8006b72 <HAL_TIMEx_MasterConfigSynchronization>
 800344a:	1e03      	subs	r3, r0, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM22_Init+0xb6>
  {
    Error_Handler();
 800344e:	f000 f8d7 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM3_TI1_GPIO) != HAL_OK)
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <MX_TIM22_Init+0xd0>)
 8003454:	2104      	movs	r1, #4
 8003456:	0018      	movs	r0, r3
 8003458:	f003 fbce 	bl	8006bf8 <HAL_TIMEx_RemapConfig>
 800345c:	1e03      	subs	r3, r0, #0
 800345e:	d001      	beq.n	8003464 <MX_TIM22_Init+0xc8>
  {
    Error_Handler();
 8003460:	f000 f8ce 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b00d      	add	sp, #52	; 0x34
 800346a:	bd90      	pop	{r4, r7, pc}
 800346c:	200001ac 	.word	0x200001ac
 8003470:	40011400 	.word	0x40011400
 8003474:	0000fde8 	.word	0x0000fde8

08003478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347e:	240c      	movs	r4, #12
 8003480:	193b      	adds	r3, r7, r4
 8003482:	0018      	movs	r0, r3
 8003484:	2314      	movs	r3, #20
 8003486:	001a      	movs	r2, r3
 8003488:	2100      	movs	r1, #0
 800348a:	f003 fc26 	bl	8006cda <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800348e:	4b57      	ldr	r3, [pc, #348]	; (80035ec <MX_GPIO_Init+0x174>)
 8003490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003492:	4b56      	ldr	r3, [pc, #344]	; (80035ec <MX_GPIO_Init+0x174>)
 8003494:	2104      	movs	r1, #4
 8003496:	430a      	orrs	r2, r1
 8003498:	62da      	str	r2, [r3, #44]	; 0x2c
 800349a:	4b54      	ldr	r3, [pc, #336]	; (80035ec <MX_GPIO_Init+0x174>)
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	2204      	movs	r2, #4
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	4b51      	ldr	r3, [pc, #324]	; (80035ec <MX_GPIO_Init+0x174>)
 80034a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034aa:	4b50      	ldr	r3, [pc, #320]	; (80035ec <MX_GPIO_Init+0x174>)
 80034ac:	2101      	movs	r1, #1
 80034ae:	430a      	orrs	r2, r1
 80034b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80034b2:	4b4e      	ldr	r3, [pc, #312]	; (80035ec <MX_GPIO_Init+0x174>)
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	2201      	movs	r2, #1
 80034b8:	4013      	ands	r3, r2
 80034ba:	607b      	str	r3, [r7, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034be:	4b4b      	ldr	r3, [pc, #300]	; (80035ec <MX_GPIO_Init+0x174>)
 80034c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c2:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <MX_GPIO_Init+0x174>)
 80034c4:	2102      	movs	r1, #2
 80034c6:	430a      	orrs	r2, r1
 80034c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80034ca:	4b48      	ldr	r3, [pc, #288]	; (80035ec <MX_GPIO_Init+0x174>)
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	2202      	movs	r2, #2
 80034d0:	4013      	ands	r3, r2
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ultrasonic_B_GPIO_Port, Ultrasonic_B_Pin, GPIO_PIN_RESET);
 80034d6:	2380      	movs	r3, #128	; 0x80
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	4845      	ldr	r0, [pc, #276]	; (80035f0 <MX_GPIO_Init+0x178>)
 80034dc:	2200      	movs	r2, #0
 80034de:	0019      	movs	r1, r3
 80034e0:	f001 ffb1 	bl	8005446 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ultrasonic_A_GPIO_Port, Ultrasonic_A_Pin, GPIO_PIN_RESET);
 80034e4:	23a0      	movs	r3, #160	; 0xa0
 80034e6:	05db      	lsls	r3, r3, #23
 80034e8:	2200      	movs	r2, #0
 80034ea:	2110      	movs	r1, #16
 80034ec:	0018      	movs	r0, r3
 80034ee:	f001 ffaa 	bl	8005446 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Ultrasonic_B_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_B_Pin;
 80034f2:	193b      	adds	r3, r7, r4
 80034f4:	2280      	movs	r2, #128	; 0x80
 80034f6:	0192      	lsls	r2, r2, #6
 80034f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034fa:	193b      	adds	r3, r7, r4
 80034fc:	2201      	movs	r2, #1
 80034fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	193b      	adds	r3, r7, r4
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003506:	193b      	adds	r3, r7, r4
 8003508:	2200      	movs	r2, #0
 800350a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Ultrasonic_B_GPIO_Port, &GPIO_InitStruct);
 800350c:	193b      	adds	r3, r7, r4
 800350e:	4a38      	ldr	r2, [pc, #224]	; (80035f0 <MX_GPIO_Init+0x178>)
 8003510:	0019      	movs	r1, r3
 8003512:	0010      	movs	r0, r2
 8003514:	f001 fdfc 	bl	8005110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 L_MTR_ENC_Pin R_MTR_ENC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|L_MTR_ENC_Pin|R_MTR_ENC_Pin;
 8003518:	0021      	movs	r1, r4
 800351a:	187b      	adds	r3, r7, r1
 800351c:	2298      	movs	r2, #152	; 0x98
 800351e:	0212      	lsls	r2, r2, #8
 8003520:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003522:	000c      	movs	r4, r1
 8003524:	193b      	adds	r3, r7, r4
 8003526:	4a33      	ldr	r2, [pc, #204]	; (80035f4 <MX_GPIO_Init+0x17c>)
 8003528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	193b      	adds	r3, r7, r4
 800352c:	2200      	movs	r2, #0
 800352e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003530:	193b      	adds	r3, r7, r4
 8003532:	4a2f      	ldr	r2, [pc, #188]	; (80035f0 <MX_GPIO_Init+0x178>)
 8003534:	0019      	movs	r1, r3
 8003536:	0010      	movs	r0, r2
 8003538:	f001 fdea 	bl	8005110 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ultrasonic_Echo_Pin CLIFF_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_Echo_Pin|CLIFF_Pin;
 800353c:	193b      	adds	r3, r7, r4
 800353e:	4a2e      	ldr	r2, [pc, #184]	; (80035f8 <MX_GPIO_Init+0x180>)
 8003540:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003542:	193b      	adds	r3, r7, r4
 8003544:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <MX_GPIO_Init+0x17c>)
 8003546:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	193b      	adds	r3, r7, r4
 800354a:	2200      	movs	r2, #0
 800354c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354e:	193a      	adds	r2, r7, r4
 8003550:	23a0      	movs	r3, #160	; 0xa0
 8003552:	05db      	lsls	r3, r3, #23
 8003554:	0011      	movs	r1, r2
 8003556:	0018      	movs	r0, r3
 8003558:	f001 fdda 	bl	8005110 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ultrasonic_A_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_A_Pin;
 800355c:	193b      	adds	r3, r7, r4
 800355e:	2210      	movs	r2, #16
 8003560:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003562:	193b      	adds	r3, r7, r4
 8003564:	2201      	movs	r2, #1
 8003566:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	193b      	adds	r3, r7, r4
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356e:	193b      	adds	r3, r7, r4
 8003570:	2200      	movs	r2, #0
 8003572:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Ultrasonic_A_GPIO_Port, &GPIO_InitStruct);
 8003574:	193a      	adds	r2, r7, r4
 8003576:	23a0      	movs	r3, #160	; 0xa0
 8003578:	05db      	lsls	r3, r3, #23
 800357a:	0011      	movs	r1, r2
 800357c:	0018      	movs	r0, r3
 800357e:	f001 fdc7 	bl	8005110 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_MI_Pin IR_LE_Pin IR_RI_Pin */
  GPIO_InitStruct.Pin = IR_MI_Pin|IR_LE_Pin|IR_RI_Pin;
 8003582:	193b      	adds	r3, r7, r4
 8003584:	22e0      	movs	r2, #224	; 0xe0
 8003586:	0152      	lsls	r2, r2, #5
 8003588:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800358a:	193b      	adds	r3, r7, r4
 800358c:	2200      	movs	r2, #0
 800358e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003590:	193b      	adds	r3, r7, r4
 8003592:	2200      	movs	r2, #0
 8003594:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003596:	193a      	adds	r2, r7, r4
 8003598:	23a0      	movs	r3, #160	; 0xa0
 800359a:	05db      	lsls	r3, r3, #23
 800359c:	0011      	movs	r1, r2
 800359e:	0018      	movs	r0, r3
 80035a0:	f001 fdb6 	bl	8005110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035a4:	193b      	adds	r3, r7, r4
 80035a6:	2240      	movs	r2, #64	; 0x40
 80035a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035aa:	193b      	adds	r3, r7, r4
 80035ac:	4a11      	ldr	r2, [pc, #68]	; (80035f4 <MX_GPIO_Init+0x17c>)
 80035ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	193b      	adds	r3, r7, r4
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b6:	193b      	adds	r3, r7, r4
 80035b8:	4a10      	ldr	r2, [pc, #64]	; (80035fc <MX_GPIO_Init+0x184>)
 80035ba:	0019      	movs	r1, r3
 80035bc:	0010      	movs	r0, r2
 80035be:	f001 fda7 	bl	8005110 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80035c2:	2200      	movs	r2, #0
 80035c4:	2100      	movs	r1, #0
 80035c6:	2005      	movs	r0, #5
 80035c8:	f001 fd70 	bl	80050ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80035cc:	2005      	movs	r0, #5
 80035ce:	f001 fd82 	bl	80050d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80035d2:	2200      	movs	r2, #0
 80035d4:	2100      	movs	r1, #0
 80035d6:	2007      	movs	r0, #7
 80035d8:	f001 fd68 	bl	80050ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80035dc:	2007      	movs	r0, #7
 80035de:	f001 fd7a 	bl	80050d6 <HAL_NVIC_EnableIRQ>

}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b009      	add	sp, #36	; 0x24
 80035e8:	bd90      	pop	{r4, r7, pc}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	40021000 	.word	0x40021000
 80035f0:	50000800 	.word	0x50000800
 80035f4:	10110000 	.word	0x10110000
 80035f8:	00000202 	.word	0x00000202
 80035fc:	50000400 	.word	0x50000400

08003600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003604:	46c0      	nop			; (mov r8, r8)
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <bitbang_init_lcd>:
	  else if (ChangeMen == 3){
		  displayTop(WaterL);
		  displayBottom("Done <-");
	  }
}
void bitbang_init_lcd(void) {
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
    GPIOB->BSRR = 1<<12; // set NSS high
 8003610:	4b13      	ldr	r3, [pc, #76]	; (8003660 <bitbang_init_lcd+0x54>)
 8003612:	2280      	movs	r2, #128	; 0x80
 8003614:	0152      	lsls	r2, r2, #5
 8003616:	619a      	str	r2, [r3, #24]
    GPIOB->BRR = (1<<13) + (1<<15); // set SCK and MOSI low
 8003618:	4b11      	ldr	r3, [pc, #68]	; (8003660 <bitbang_init_lcd+0x54>)
 800361a:	22a0      	movs	r2, #160	; 0xa0
 800361c:	0212      	lsls	r2, r2, #8
 800361e:	629a      	str	r2, [r3, #40]	; 0x28
    // Now, configure pins for output.
    GPIOB->MODER &= ~(3<<(2*12));
 8003620:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <bitbang_init_lcd+0x54>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <bitbang_init_lcd+0x54>)
 8003626:	490f      	ldr	r1, [pc, #60]	; (8003664 <bitbang_init_lcd+0x58>)
 8003628:	400a      	ands	r2, r1
 800362a:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |=  (1<<(2*12));
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <bitbang_init_lcd+0x54>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <bitbang_init_lcd+0x54>)
 8003632:	2180      	movs	r1, #128	; 0x80
 8003634:	0449      	lsls	r1, r1, #17
 8003636:	430a      	orrs	r2, r1
 8003638:	601a      	str	r2, [r3, #0]
    GPIOB->MODER &= ~( (3<<(2*13)) | (3<<(2*15)) );
 800363a:	4b09      	ldr	r3, [pc, #36]	; (8003660 <bitbang_init_lcd+0x54>)
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4b08      	ldr	r3, [pc, #32]	; (8003660 <bitbang_init_lcd+0x54>)
 8003640:	4909      	ldr	r1, [pc, #36]	; (8003668 <bitbang_init_lcd+0x5c>)
 8003642:	400a      	ands	r2, r1
 8003644:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |=    (1<<(2*13)) | (1<<(2*15));
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <bitbang_init_lcd+0x54>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <bitbang_init_lcd+0x54>)
 800364c:	2188      	movs	r1, #136	; 0x88
 800364e:	05c9      	lsls	r1, r1, #23
 8003650:	430a      	orrs	r2, r1
 8003652:	601a      	str	r2, [r3, #0]

    generic_lcd_startup();
 8003654:	f000 f80a 	bl	800366c <generic_lcd_startup>
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	50000400 	.word	0x50000400
 8003664:	fcffffff 	.word	0xfcffffff
 8003668:	33ffffff 	.word	0x33ffffff

0800366c <generic_lcd_startup>:
void generic_lcd_startup(void) {
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
    nano_wait(100000000); // Give it 100ms to initialize
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <generic_lcd_startup+0x38>)
 8003672:	0018      	movs	r0, r3
 8003674:	f000 f81a 	bl	80036ac <nano_wait>
    cmd(0x38);  // 0011 NF00 N=1, F=0: two lines
 8003678:	2038      	movs	r0, #56	; 0x38
 800367a:	f000 f823 	bl	80036c4 <cmd>
    cmd(0x0c);  // 0000 1DCB: display on, no cursor, no blink
 800367e:	200c      	movs	r0, #12
 8003680:	f000 f820 	bl	80036c4 <cmd>
    cmd(0x01);  // clear entire display
 8003684:	2001      	movs	r0, #1
 8003686:	f000 f81d 	bl	80036c4 <cmd>
    nano_wait(6200000); // clear takes 6.2ms to complete
 800368a:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <generic_lcd_startup+0x3c>)
 800368c:	0018      	movs	r0, r3
 800368e:	f000 f80d 	bl	80036ac <nano_wait>
    cmd(0x02);  // put the cursor in the home position
 8003692:	2002      	movs	r0, #2
 8003694:	f000 f816 	bl	80036c4 <cmd>
    cmd(0x06);  // 0000 01IS: set display to increment
 8003698:	2006      	movs	r0, #6
 800369a:	f000 f813 	bl	80036c4 <cmd>
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	05f5e100 	.word	0x05f5e100
 80036a8:	005e9ac0 	.word	0x005e9ac0

080036ac <nano_wait>:
void nano_wait(unsigned int n) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
    asm(    "        mov r0,%0\n"
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	1c18      	adds	r0, r3, #0

080036b8 <repeat>:
 80036b8:	3853      	subs	r0, #83	; 0x53
 80036ba:	dcfd      	bgt.n	80036b8 <repeat>
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b002      	add	sp, #8
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <cmd>:
void cmd(char b) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	0002      	movs	r2, r0
 80036cc:	1dfb      	adds	r3, r7, #7
 80036ce:	701a      	strb	r2, [r3, #0]
    const int NSS = 1<<12;
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	015b      	lsls	r3, r3, #5
 80036d4:	60fb      	str	r3, [r7, #12]
    GPIOB->BRR = NSS; // NSS low
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <cmd+0x54>)
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28
    nano_wait(SPI_DELAY);
 80036dc:	4b0f      	ldr	r3, [pc, #60]	; (800371c <cmd+0x58>)
 80036de:	0018      	movs	r0, r3
 80036e0:	f7ff ffe4 	bl	80036ac <nano_wait>
    bitbang_sendbit(0); // RS = 0 for command.
 80036e4:	2000      	movs	r0, #0
 80036e6:	f000 f81b 	bl	8003720 <bitbang_sendbit>
    bitbang_sendbit(0); // R/W = 0 for write.
 80036ea:	2000      	movs	r0, #0
 80036ec:	f000 f818 	bl	8003720 <bitbang_sendbit>
    bitbang_sendbyte(b);
 80036f0:	1dfb      	adds	r3, r7, #7
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f000 f83d 	bl	8003774 <bitbang_sendbyte>
    nano_wait(SPI_DELAY);
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <cmd+0x58>)
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7ff ffd5 	bl	80036ac <nano_wait>
    GPIOB->BSRR = NSS; // set NSS back to high
 8003702:	4b05      	ldr	r3, [pc, #20]	; (8003718 <cmd+0x54>)
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	619a      	str	r2, [r3, #24]
    nano_wait(SPI_DELAY);
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <cmd+0x58>)
 800370a:	0018      	movs	r0, r3
 800370c:	f7ff ffce 	bl	80036ac <nano_wait>
}
 8003710:	46c0      	nop			; (mov r8, r8)
 8003712:	46bd      	mov	sp, r7
 8003714:	b004      	add	sp, #16
 8003716:	bd80      	pop	{r7, pc}
 8003718:	50000400 	.word	0x50000400
 800371c:	00000539 	.word	0x00000539

08003720 <bitbang_sendbit>:
void bitbang_sendbit(int b) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
    const int SCK = 1<<13;
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	019b      	lsls	r3, r3, #6
 800372c:	60fb      	str	r3, [r7, #12]
    const int MOSI = 1<<15;
 800372e:	2380      	movs	r3, #128	; 0x80
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	60bb      	str	r3, [r7, #8]
    // We do this slowly to make sure we don't exceed the
    // speed of the device.
    GPIOB->BRR = SCK;
 8003734:	4b0d      	ldr	r3, [pc, #52]	; (800376c <bitbang_sendbit+0x4c>)
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	629a      	str	r2, [r3, #40]	; 0x28
    if (b)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <bitbang_sendbit+0x28>
        GPIOB->BSRR = MOSI;
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <bitbang_sendbit+0x4c>)
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	619a      	str	r2, [r3, #24]
 8003746:	e002      	b.n	800374e <bitbang_sendbit+0x2e>
    else
        GPIOB->BRR = MOSI;
 8003748:	4b08      	ldr	r3, [pc, #32]	; (800376c <bitbang_sendbit+0x4c>)
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	629a      	str	r2, [r3, #40]	; 0x28
    //GPIOB->BSRR = b ? MOSI : (MOSI << 16);
    nano_wait(SPI_DELAY);
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <bitbang_sendbit+0x50>)
 8003750:	0018      	movs	r0, r3
 8003752:	f7ff ffab 	bl	80036ac <nano_wait>
    GPIOB->BSRR = SCK;
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <bitbang_sendbit+0x4c>)
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	619a      	str	r2, [r3, #24]
    nano_wait(SPI_DELAY);
 800375c:	4b04      	ldr	r3, [pc, #16]	; (8003770 <bitbang_sendbit+0x50>)
 800375e:	0018      	movs	r0, r3
 8003760:	f7ff ffa4 	bl	80036ac <nano_wait>
}
 8003764:	46c0      	nop			; (mov r8, r8)
 8003766:	46bd      	mov	sp, r7
 8003768:	b004      	add	sp, #16
 800376a:	bd80      	pop	{r7, pc}
 800376c:	50000400 	.word	0x50000400
 8003770:	00000539 	.word	0x00000539

08003774 <bitbang_sendbyte>:
void bitbang_sendbyte(int b) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
    int x;
    // Send the eight bits of a byte to the SPI channel.
    // Send the MSB first (big endian bits).
    for(x=8; x>0; x--) {
 800377c:	2308      	movs	r3, #8
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e00b      	b.n	800379a <bitbang_sendbyte+0x26>
        bitbang_sendbit(b & 0x80);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2280      	movs	r2, #128	; 0x80
 8003786:	4013      	ands	r3, r2
 8003788:	0018      	movs	r0, r3
 800378a:	f7ff ffc9 	bl	8003720 <bitbang_sendbit>
        b <<= 1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	607b      	str	r3, [r7, #4]
    for(x=8; x>0; x--) {
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3b01      	subs	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	dcf0      	bgt.n	8003782 <bitbang_sendbyte+0xe>
    }
}
 80037a0:	46c0      	nop			; (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b004      	add	sp, #16
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <pwm_gen>:
#include "movement.h"

/**
 * Function to generate PWM signals to move motors. Should never be called directly, rather should be called by more general movement functions
 */
void pwm_gen(Motor* motor, int speed){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]

	// if dir is 0 or speed is 0 set to brake mode (both channels full duty cycle)
	if(speed == 0 || motor->dir == 0){
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d004      	beq.n	80037c2 <pwm_gen+0x1a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b25b      	sxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d146      	bne.n	8003850 <pwm_gen+0xa8>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch1, MAX_SPEED);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d105      	bne.n	80037d6 <pwm_gen+0x2e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a74      	ldr	r2, [pc, #464]	; (80039a4 <pwm_gen+0x1fc>)
 80037d2:	635a      	str	r2, [r3, #52]	; 0x34
 80037d4:	e018      	b.n	8003808 <pwm_gen+0x60>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d105      	bne.n	80037ea <pwm_gen+0x42>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a6f      	ldr	r2, [pc, #444]	; (80039a4 <pwm_gen+0x1fc>)
 80037e6:	639a      	str	r2, [r3, #56]	; 0x38
 80037e8:	e00e      	b.n	8003808 <pwm_gen+0x60>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d105      	bne.n	80037fe <pwm_gen+0x56>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a6a      	ldr	r2, [pc, #424]	; (80039a4 <pwm_gen+0x1fc>)
 80037fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80037fc:	e004      	b.n	8003808 <pwm_gen+0x60>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a67      	ldr	r2, [pc, #412]	; (80039a4 <pwm_gen+0x1fc>)
 8003806:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch2, MAX_SPEED);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d105      	bne.n	800381c <pwm_gen+0x74>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a63      	ldr	r2, [pc, #396]	; (80039a4 <pwm_gen+0x1fc>)
 8003818:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 800381a:	e0c0      	b.n	800399e <pwm_gen+0x1f6>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch2, MAX_SPEED);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	2b04      	cmp	r3, #4
 8003822:	d105      	bne.n	8003830 <pwm_gen+0x88>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a5e      	ldr	r2, [pc, #376]	; (80039a4 <pwm_gen+0x1fc>)
 800382c:	639a      	str	r2, [r3, #56]	; 0x38
		return;
 800382e:	e0b6      	b.n	800399e <pwm_gen+0x1f6>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch2, MAX_SPEED);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b08      	cmp	r3, #8
 8003836:	d105      	bne.n	8003844 <pwm_gen+0x9c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a59      	ldr	r2, [pc, #356]	; (80039a4 <pwm_gen+0x1fc>)
 8003840:	63da      	str	r2, [r3, #60]	; 0x3c
		return;
 8003842:	e0ac      	b.n	800399e <pwm_gen+0x1f6>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch2, MAX_SPEED);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a56      	ldr	r2, [pc, #344]	; (80039a4 <pwm_gen+0x1fc>)
 800384c:	641a      	str	r2, [r3, #64]	; 0x40
		return;
 800384e:	e0a6      	b.n	800399e <pwm_gen+0x1f6>
	}

	// Negative speed -> reverse direction and positive speed
	if(speed < 0){
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	da0b      	bge.n	800386e <pwm_gen+0xc6>
		speed = -speed;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	425b      	negs	r3, r3
 800385a:	603b      	str	r3, [r7, #0]
		motor->dir = -motor->dir;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	b25b      	sxtb	r3, r3
 8003862:	b2db      	uxtb	r3, r3
 8003864:	425b      	negs	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	b25a      	sxtb	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	701a      	strb	r2, [r3, #0]
	}
	if(speed > MAX_SPEED) speed = MAX_SPEED;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	4a4c      	ldr	r2, [pc, #304]	; (80039a4 <pwm_gen+0x1fc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	dd01      	ble.n	800387a <pwm_gen+0xd2>
 8003876:	4b4b      	ldr	r3, [pc, #300]	; (80039a4 <pwm_gen+0x1fc>)
 8003878:	603b      	str	r3, [r7, #0]

	// Set which channel gets PWM input based on dir
	if(motor->dir > 0){
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	b25b      	sxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	dd46      	ble.n	8003912 <pwm_gen+0x16a>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch1, speed);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d105      	bne.n	8003898 <pwm_gen+0xf0>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	635a      	str	r2, [r3, #52]	; 0x34
 8003896:	e018      	b.n	80038ca <pwm_gen+0x122>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	2b04      	cmp	r3, #4
 800389e:	d105      	bne.n	80038ac <pwm_gen+0x104>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	639a      	str	r2, [r3, #56]	; 0x38
 80038aa:	e00e      	b.n	80038ca <pwm_gen+0x122>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d105      	bne.n	80038c0 <pwm_gen+0x118>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80038be:	e004      	b.n	80038ca <pwm_gen+0x122>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch2, 0);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d105      	bne.n	80038de <pwm_gen+0x136>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2200      	movs	r2, #0
 80038da:	635a      	str	r2, [r3, #52]	; 0x34
 80038dc:	e05f      	b.n	800399e <pwm_gen+0x1f6>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d105      	bne.n	80038f2 <pwm_gen+0x14a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2200      	movs	r2, #0
 80038ee:	639a      	str	r2, [r3, #56]	; 0x38
 80038f0:	e055      	b.n	800399e <pwm_gen+0x1f6>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d105      	bne.n	8003906 <pwm_gen+0x15e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2200      	movs	r2, #0
 8003902:	63da      	str	r2, [r3, #60]	; 0x3c
 8003904:	e04b      	b.n	800399e <pwm_gen+0x1f6>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2200      	movs	r2, #0
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
 8003910:	e045      	b.n	800399e <pwm_gen+0x1f6>
	} else {
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch1, 0);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d105      	bne.n	8003926 <pwm_gen+0x17e>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2200      	movs	r2, #0
 8003922:	635a      	str	r2, [r3, #52]	; 0x34
 8003924:	e018      	b.n	8003958 <pwm_gen+0x1b0>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2b04      	cmp	r3, #4
 800392c:	d105      	bne.n	800393a <pwm_gen+0x192>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2200      	movs	r2, #0
 8003936:	639a      	str	r2, [r3, #56]	; 0x38
 8003938:	e00e      	b.n	8003958 <pwm_gen+0x1b0>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	2b08      	cmp	r3, #8
 8003940:	d105      	bne.n	800394e <pwm_gen+0x1a6>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2200      	movs	r2, #0
 800394a:	63da      	str	r2, [r3, #60]	; 0x3c
 800394c:	e004      	b.n	8003958 <pwm_gen+0x1b0>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2200      	movs	r2, #0
 8003956:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch2, speed);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <pwm_gen+0x1c4>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	635a      	str	r2, [r3, #52]	; 0x34
 800396a:	e018      	b.n	800399e <pwm_gen+0x1f6>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	2b04      	cmp	r3, #4
 8003972:	d105      	bne.n	8003980 <pwm_gen+0x1d8>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	639a      	str	r2, [r3, #56]	; 0x38
 800397e:	e00e      	b.n	800399e <pwm_gen+0x1f6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	2b08      	cmp	r3, #8
 8003986:	d105      	bne.n	8003994 <pwm_gen+0x1ec>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	63da      	str	r2, [r3, #60]	; 0x3c
 8003992:	e004      	b.n	800399e <pwm_gen+0x1f6>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40
	}

}
 800399e:	46bd      	mov	sp, r7
 80039a0:	b002      	add	sp, #8
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	0000ffff 	.word	0x0000ffff

080039a8 <update_pos>:

void update_pos(Robot* robot){
 80039a8:	b5b0      	push	{r4, r5, r7, lr}
 80039aa:	b08c      	sub	sp, #48	; 0x30
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6178      	str	r0, [r7, #20]
	float dLeft = robot->left.encoder * ENC_FRAC;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7ff f839 	bl	8002a2c <__aeabi_i2d>
 80039ba:	4a64      	ldr	r2, [pc, #400]	; (8003b4c <update_pos+0x1a4>)
 80039bc:	4b64      	ldr	r3, [pc, #400]	; (8003b50 <update_pos+0x1a8>)
 80039be:	f7fe fa29 	bl	8001e14 <__aeabi_dmul>
 80039c2:	0003      	movs	r3, r0
 80039c4:	000c      	movs	r4, r1
 80039c6:	0018      	movs	r0, r3
 80039c8:	0021      	movs	r1, r4
 80039ca:	f7ff f8bb 	bl	8002b44 <__aeabi_d2f>
 80039ce:	1c03      	adds	r3, r0, #0
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	float dRight = robot->right.encoder * ENC_FRAC;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d6:	0018      	movs	r0, r3
 80039d8:	f7ff f828 	bl	8002a2c <__aeabi_i2d>
 80039dc:	4a5b      	ldr	r2, [pc, #364]	; (8003b4c <update_pos+0x1a4>)
 80039de:	4b5c      	ldr	r3, [pc, #368]	; (8003b50 <update_pos+0x1a8>)
 80039e0:	f7fe fa18 	bl	8001e14 <__aeabi_dmul>
 80039e4:	0003      	movs	r3, r0
 80039e6:	000c      	movs	r4, r1
 80039e8:	0018      	movs	r0, r3
 80039ea:	0021      	movs	r1, r4
 80039ec:	f7ff f8aa 	bl	8002b44 <__aeabi_d2f>
 80039f0:	1c03      	adds	r3, r0, #0
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
	robot->left.encoder = 0;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2200      	movs	r2, #0
 80039f8:	605a      	str	r2, [r3, #4]
	robot->right.encoder = 0;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2200      	movs	r2, #0
 80039fe:	661a      	str	r2, [r3, #96]	; 0x60
	float phi = (dRight - dLeft) / WHEEL_SEP;
 8003a00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a04:	f7fd f91c 	bl	8000c40 <__aeabi_fsub>
 8003a08:	1c03      	adds	r3, r0, #0
 8003a0a:	4952      	ldr	r1, [pc, #328]	; (8003b54 <update_pos+0x1ac>)
 8003a0c:	1c18      	adds	r0, r3, #0
 8003a0e:	f7fc fed3 	bl	80007b8 <__aeabi_fdiv>
 8003a12:	1c03      	adds	r3, r0, #0
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
	float phi_2 = phi / 2;
 8003a16:	2180      	movs	r1, #128	; 0x80
 8003a18:	05c9      	lsls	r1, r1, #23
 8003a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a1c:	f7fc fecc 	bl	80007b8 <__aeabi_fdiv>
 8003a20:	1c03      	adds	r3, r0, #0
 8003a22:	623b      	str	r3, [r7, #32]
	float dCenter = (dLeft + dRight) / 2;
 8003a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a28:	f7fc fd2c 	bl	8000484 <__aeabi_fadd>
 8003a2c:	1c03      	adds	r3, r0, #0
 8003a2e:	2180      	movs	r1, #128	; 0x80
 8003a30:	05c9      	lsls	r1, r1, #23
 8003a32:	1c18      	adds	r0, r3, #0
 8003a34:	f7fc fec0 	bl	80007b8 <__aeabi_fdiv>
 8003a38:	1c03      	adds	r3, r0, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
	robot->x += dCenter * cos(robot->theta + phi_2);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	33c0      	adds	r3, #192	; 0xc0
 8003a40:	681c      	ldr	r4, [r3, #0]
 8003a42:	685d      	ldr	r5, [r3, #4]
 8003a44:	69f8      	ldr	r0, [r7, #28]
 8003a46:	f7ff f82b 	bl	8002aa0 <__aeabi_f2d>
 8003a4a:	60b8      	str	r0, [r7, #8]
 8003a4c:	60f9      	str	r1, [r7, #12]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	33d0      	adds	r3, #208	; 0xd0
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	603a      	str	r2, [r7, #0]
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	6a38      	ldr	r0, [r7, #32]
 8003a5c:	f7ff f820 	bl	8002aa0 <__aeabi_f2d>
 8003a60:	0002      	movs	r2, r0
 8003a62:	000b      	movs	r3, r1
 8003a64:	6838      	ldr	r0, [r7, #0]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	f7fd faae 	bl	8000fc8 <__aeabi_dadd>
 8003a6c:	0002      	movs	r2, r0
 8003a6e:	000b      	movs	r3, r1
 8003a70:	0010      	movs	r0, r2
 8003a72:	0019      	movs	r1, r3
 8003a74:	f003 fde2 	bl	800763c <cos>
 8003a78:	0002      	movs	r2, r0
 8003a7a:	000b      	movs	r3, r1
 8003a7c:	68b8      	ldr	r0, [r7, #8]
 8003a7e:	68f9      	ldr	r1, [r7, #12]
 8003a80:	f7fe f9c8 	bl	8001e14 <__aeabi_dmul>
 8003a84:	0002      	movs	r2, r0
 8003a86:	000b      	movs	r3, r1
 8003a88:	0020      	movs	r0, r4
 8003a8a:	0029      	movs	r1, r5
 8003a8c:	f7fd fa9c 	bl	8000fc8 <__aeabi_dadd>
 8003a90:	0003      	movs	r3, r0
 8003a92:	000c      	movs	r4, r1
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	32c0      	adds	r2, #192	; 0xc0
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	6054      	str	r4, [r2, #4]
	robot->y += dCenter * sin(robot->theta + phi_2);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	33c8      	adds	r3, #200	; 0xc8
 8003aa0:	681c      	ldr	r4, [r3, #0]
 8003aa2:	685d      	ldr	r5, [r3, #4]
 8003aa4:	69f8      	ldr	r0, [r7, #28]
 8003aa6:	f7fe fffb 	bl	8002aa0 <__aeabi_f2d>
 8003aaa:	60b8      	str	r0, [r7, #8]
 8003aac:	60f9      	str	r1, [r7, #12]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	33d0      	adds	r3, #208	; 0xd0
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	603a      	str	r2, [r7, #0]
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	6a38      	ldr	r0, [r7, #32]
 8003abc:	f7fe fff0 	bl	8002aa0 <__aeabi_f2d>
 8003ac0:	0002      	movs	r2, r0
 8003ac2:	000b      	movs	r3, r1
 8003ac4:	6838      	ldr	r0, [r7, #0]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	f7fd fa7e 	bl	8000fc8 <__aeabi_dadd>
 8003acc:	0002      	movs	r2, r0
 8003ace:	000b      	movs	r3, r1
 8003ad0:	0010      	movs	r0, r2
 8003ad2:	0019      	movs	r1, r3
 8003ad4:	f003 fdf4 	bl	80076c0 <sin>
 8003ad8:	0002      	movs	r2, r0
 8003ada:	000b      	movs	r3, r1
 8003adc:	68b8      	ldr	r0, [r7, #8]
 8003ade:	68f9      	ldr	r1, [r7, #12]
 8003ae0:	f7fe f998 	bl	8001e14 <__aeabi_dmul>
 8003ae4:	0002      	movs	r2, r0
 8003ae6:	000b      	movs	r3, r1
 8003ae8:	0020      	movs	r0, r4
 8003aea:	0029      	movs	r1, r5
 8003aec:	f7fd fa6c 	bl	8000fc8 <__aeabi_dadd>
 8003af0:	0003      	movs	r3, r0
 8003af2:	000c      	movs	r4, r1
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	32c8      	adds	r2, #200	; 0xc8
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	6054      	str	r4, [r2, #4]
	robot->theta += phi;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	33d0      	adds	r3, #208	; 0xd0
 8003b00:	681c      	ldr	r4, [r3, #0]
 8003b02:	685d      	ldr	r5, [r3, #4]
 8003b04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b06:	f7fe ffcb 	bl	8002aa0 <__aeabi_f2d>
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	000b      	movs	r3, r1
 8003b0e:	0020      	movs	r0, r4
 8003b10:	0029      	movs	r1, r5
 8003b12:	f7fd fa59 	bl	8000fc8 <__aeabi_dadd>
 8003b16:	0003      	movs	r3, r0
 8003b18:	000c      	movs	r4, r1
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	32d0      	adds	r2, #208	; 0xd0
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	6054      	str	r4, [r2, #4]
	robot->theta = fmod(robot->theta,(2*M_PI));
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	33d0      	adds	r3, #208	; 0xd0
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	6859      	ldr	r1, [r3, #4]
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <update_pos+0x1b0>)
 8003b2c:	4c0b      	ldr	r4, [pc, #44]	; (8003b5c <update_pos+0x1b4>)
 8003b2e:	001a      	movs	r2, r3
 8003b30:	0023      	movs	r3, r4
 8003b32:	f003 fe0b 	bl	800774c <fmod>
 8003b36:	0003      	movs	r3, r0
 8003b38:	000c      	movs	r4, r1
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	32d0      	adds	r2, #208	; 0xd0
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	6054      	str	r4, [r2, #4]
}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b00c      	add	sp, #48	; 0x30
 8003b48:	bdb0      	pop	{r4, r5, r7, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	9999999a 	.word	0x9999999a
 8003b50:	3f699999 	.word	0x3f699999
 8003b54:	41300000 	.word	0x41300000
 8003b58:	54442d18 	.word	0x54442d18
 8003b5c:	401921fb 	.word	0x401921fb

08003b60 <move_until>:

/**
 * @Brief move the robot forward until compare returns compare value
 * Returns 1 when compare == compare_value, 0 otherwise (call in a loop).
 */
int move_until(Robot* robot, int (*compare)(), int compare_value){
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
	if(compare() != compare_value){
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4798      	blx	r3
 8003b70:	0002      	movs	r2, r0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d015      	beq.n	8003ba4 <move_until+0x44>
		robot->left.dir = FORWARD;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	701a      	strb	r2, [r3, #0]
		robot->right.dir = FORWARD;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	225c      	movs	r2, #92	; 0x5c
 8003b82:	2101      	movs	r1, #1
 8003b84:	5499      	strb	r1, [r3, r2]
		pwm_gen(&robot->left, MAX_SPEED/2);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4a12      	ldr	r2, [pc, #72]	; (8003bd4 <move_until+0x74>)
 8003b8a:	0011      	movs	r1, r2
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f7ff fe0b 	bl	80037a8 <pwm_gen>
		pwm_gen(&robot->right, MAX_SPEED/2);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	335c      	adds	r3, #92	; 0x5c
 8003b96:	4a0f      	ldr	r2, [pc, #60]	; (8003bd4 <move_until+0x74>)
 8003b98:	0011      	movs	r1, r2
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f7ff fe04 	bl	80037a8 <pwm_gen>
		return 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e012      	b.n	8003bca <move_until+0x6a>
	} else {
		robot->left.dir = BRAKE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]
		robot->right.dir = BRAKE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	225c      	movs	r2, #92	; 0x5c
 8003bae:	2100      	movs	r1, #0
 8003bb0:	5499      	strb	r1, [r3, r2]
		pwm_gen(&robot->left, 0);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f7ff fdf6 	bl	80037a8 <pwm_gen>
		pwm_gen(&robot->right, 0);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	335c      	adds	r3, #92	; 0x5c
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f7ff fdf0 	bl	80037a8 <pwm_gen>
		return 1;
 8003bc8:	2301      	movs	r3, #1
	}
}
 8003bca:	0018      	movs	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b004      	add	sp, #16
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	00007fff 	.word	0x00007fff

08003bd8 <turn_until>:
/**
 * @Brief turn the robot until compare returns 0
 * compare < 0 turns counterclockwise, >0 turns clockwise
 * Returns 1 when compare == compare_value, 0 otherwise (call in a loop).
 */
int turn_until(Robot* robot, int (*compare)()){
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
	int comp = compare();
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	4798      	blx	r3
 8003be6:	0003      	movs	r3, r0
 8003be8:	60fb      	str	r3, [r7, #12]
	if(comp == 0){
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d108      	bne.n	8003c02 <turn_until+0x2a>
		robot->left.dir = BRAKE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
		robot->right.dir = BRAKE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	225c      	movs	r2, #92	; 0x5c
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	5499      	strb	r1, [r3, r2]
		return 1;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e035      	b.n	8003c6e <turn_until+0x96>
	} else if(robot->left.dir == robot->right.dir){
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	569a      	ldrsb	r2, [r3, r2]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	215c      	movs	r1, #92	; 0x5c
 8003c0c:	565b      	ldrsb	r3, [r3, r1]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d12c      	bne.n	8003c6c <turn_until+0x94>
		if(comp > 0){
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	dd15      	ble.n	8003c44 <turn_until+0x6c>
			robot->left.dir = FORWARD;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	701a      	strb	r2, [r3, #0]
			robot->right.dir = REVERSE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	225c      	movs	r2, #92	; 0x5c
 8003c22:	21ff      	movs	r1, #255	; 0xff
 8003c24:	5499      	strb	r1, [r3, r2]
			pwm_gen(&robot->left, MAX_SPEED/2);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <turn_until+0xa0>)
 8003c2a:	0011      	movs	r1, r2
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7ff fdbb 	bl	80037a8 <pwm_gen>
			pwm_gen(&robot->right, MAX_SPEED/2);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	335c      	adds	r3, #92	; 0x5c
 8003c36:	4a10      	ldr	r2, [pc, #64]	; (8003c78 <turn_until+0xa0>)
 8003c38:	0011      	movs	r1, r2
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f7ff fdb4 	bl	80037a8 <pwm_gen>
			return 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	e014      	b.n	8003c6e <turn_until+0x96>
		} else{
			robot->left.dir = REVERSE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	22ff      	movs	r2, #255	; 0xff
 8003c48:	701a      	strb	r2, [r3, #0]
			robot->right.dir = FORWARD;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	225c      	movs	r2, #92	; 0x5c
 8003c4e:	2101      	movs	r1, #1
 8003c50:	5499      	strb	r1, [r3, r2]
			pwm_gen(&robot->left, MAX_SPEED/2);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <turn_until+0xa0>)
 8003c56:	0011      	movs	r1, r2
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f7ff fda5 	bl	80037a8 <pwm_gen>
			pwm_gen(&robot->right, MAX_SPEED/2);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	335c      	adds	r3, #92	; 0x5c
 8003c62:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <turn_until+0xa0>)
 8003c64:	0011      	movs	r1, r2
 8003c66:	0018      	movs	r0, r3
 8003c68:	f7ff fd9e 	bl	80037a8 <pwm_gen>
		}
	}
	return 0;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	0018      	movs	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b004      	add	sp, #16
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	00007fff 	.word	0x00007fff

08003c7c <stop>:

void stop(Robot* robot){
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	robot->left.dir = BRAKE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	701a      	strb	r2, [r3, #0]
	robot->right.dir = BRAKE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	225c      	movs	r2, #92	; 0x5c
 8003c8e:	2100      	movs	r1, #0
 8003c90:	5499      	strb	r1, [r3, r2]
	pwm_gen(&robot->left, 0);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2100      	movs	r1, #0
 8003c96:	0018      	movs	r0, r3
 8003c98:	f7ff fd86 	bl	80037a8 <pwm_gen>
	pwm_gen(&robot->right, 0);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	335c      	adds	r3, #92	; 0x5c
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f7ff fd80 	bl	80037a8 <pwm_gen>
}
 8003ca8:	46c0      	nop			; (mov r8, r8)
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b002      	add	sp, #8
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <DMAInit>:

/**
 * Light Sensors
 * Author: Andrew Hoover
 */
void DMAInit(uint32_t* buffer, uint32_t length){
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8003cba:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <DMAInit+0x128>)
 8003cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cbe:	4b46      	ldr	r3, [pc, #280]	; (8003dd8 <DMAInit+0x128>)
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30
	DMA1_Channel1->CCR &= ~DMA_CCR_MEM2MEM;
 8003cc6:	4b45      	ldr	r3, [pc, #276]	; (8003ddc <DMAInit+0x12c>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4b44      	ldr	r3, [pc, #272]	; (8003ddc <DMAInit+0x12c>)
 8003ccc:	4944      	ldr	r1, [pc, #272]	; (8003de0 <DMAInit+0x130>)
 8003cce:	400a      	ands	r2, r1
 8003cd0:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PL;
 8003cd2:	4b42      	ldr	r3, [pc, #264]	; (8003ddc <DMAInit+0x12c>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <DMAInit+0x12c>)
 8003cd8:	4942      	ldr	r1, [pc, #264]	; (8003de4 <DMAInit+0x134>)
 8003cda:	400a      	ands	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_PL_1;
 8003cde:	4b3f      	ldr	r3, [pc, #252]	; (8003ddc <DMAInit+0x12c>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4b3e      	ldr	r3, [pc, #248]	; (8003ddc <DMAInit+0x12c>)
 8003ce4:	2180      	movs	r1, #128	; 0x80
 8003ce6:	0189      	lsls	r1, r1, #6
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PSIZE;
 8003cec:	4b3b      	ldr	r3, [pc, #236]	; (8003ddc <DMAInit+0x12c>)
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4b3a      	ldr	r3, [pc, #232]	; (8003ddc <DMAInit+0x12c>)
 8003cf2:	493d      	ldr	r1, [pc, #244]	; (8003de8 <DMAInit+0x138>)
 8003cf4:	400a      	ands	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0; // 16bits
 8003cf8:	4b38      	ldr	r3, [pc, #224]	; (8003ddc <DMAInit+0x12c>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b37      	ldr	r3, [pc, #220]	; (8003ddc <DMAInit+0x12c>)
 8003cfe:	2180      	movs	r1, #128	; 0x80
 8003d00:	0049      	lsls	r1, r1, #1
 8003d02:	430a      	orrs	r2, r1
 8003d04:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_MSIZE;
 8003d06:	4b35      	ldr	r3, [pc, #212]	; (8003ddc <DMAInit+0x12c>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	4b34      	ldr	r3, [pc, #208]	; (8003ddc <DMAInit+0x12c>)
 8003d0c:	4937      	ldr	r1, [pc, #220]	; (8003dec <DMAInit+0x13c>)
 8003d0e:	400a      	ands	r2, r1
 8003d10:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MSIZE_0; // 16bits
 8003d12:	4b32      	ldr	r3, [pc, #200]	; (8003ddc <DMAInit+0x12c>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	4b31      	ldr	r3, [pc, #196]	; (8003ddc <DMAInit+0x12c>)
 8003d18:	2180      	movs	r1, #128	; 0x80
 8003d1a:	00c9      	lsls	r1, r1, #3
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PINC;
 8003d20:	4b2e      	ldr	r3, [pc, #184]	; (8003ddc <DMAInit+0x12c>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <DMAInit+0x12c>)
 8003d26:	2140      	movs	r1, #64	; 0x40
 8003d28:	438a      	bics	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 8003d2c:	4b2b      	ldr	r3, [pc, #172]	; (8003ddc <DMAInit+0x12c>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <DMAInit+0x12c>)
 8003d32:	2180      	movs	r1, #128	; 0x80
 8003d34:	430a      	orrs	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_CIRC;
 8003d38:	4b28      	ldr	r3, [pc, #160]	; (8003ddc <DMAInit+0x12c>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <DMAInit+0x12c>)
 8003d3e:	2120      	movs	r1, #32
 8003d40:	438a      	bics	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <DMAInit+0x12c>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <DMAInit+0x12c>)
 8003d4a:	2120      	movs	r1, #32
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_DIR;
 8003d50:	4b22      	ldr	r3, [pc, #136]	; (8003ddc <DMAInit+0x12c>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <DMAInit+0x12c>)
 8003d56:	2110      	movs	r1, #16
 8003d58:	438a      	bics	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CNDTR = length;
 8003d5c:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <DMAInit+0x12c>)
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	605a      	str	r2, [r3, #4]

	DMA1_Channel1->CPAR = (uint32_t) &(ADC1->DR);
 8003d62:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <DMAInit+0x12c>)
 8003d64:	4a22      	ldr	r2, [pc, #136]	; (8003df0 <DMAInit+0x140>)
 8003d66:	609a      	str	r2, [r3, #8]

	DMA1_Channel1->CMAR = (uint32_t) buffer;
 8003d68:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <DMAInit+0x12c>)
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	60da      	str	r2, [r3, #12]

	DMA1_CSELR->CSELR &= ~DMA_CSELR_C1S;
 8003d6e:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <DMAInit+0x144>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <DMAInit+0x144>)
 8003d74:	210f      	movs	r1, #15
 8003d76:	438a      	bics	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_EN;
 8003d7a:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <DMAInit+0x12c>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <DMAInit+0x12c>)
 8003d80:	2101      	movs	r1, #1
 8003d82:	430a      	orrs	r2, r1
 8003d84:	601a      	str	r2, [r3, #0]

	ADC1->CFGR1 |= ADC_CFGR1_DMACFG;
 8003d86:	4b1c      	ldr	r3, [pc, #112]	; (8003df8 <DMAInit+0x148>)
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <DMAInit+0x148>)
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	60da      	str	r2, [r3, #12]
	ADC1->CFGR1 |= ADC_CFGR1_DMAEN;
 8003d92:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <DMAInit+0x148>)
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	4b18      	ldr	r3, [pc, #96]	; (8003df8 <DMAInit+0x148>)
 8003d98:	2101      	movs	r1, #1
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	60da      	str	r2, [r3, #12]
	ADC1->CFGR1 |= ADC_CFGR1_CONT;
 8003d9e:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <DMAInit+0x148>)
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <DMAInit+0x148>)
 8003da4:	2180      	movs	r1, #128	; 0x80
 8003da6:	0189      	lsls	r1, r1, #6
 8003da8:	430a      	orrs	r2, r1
 8003daa:	60da      	str	r2, [r3, #12]
	ADC1->IER |= ADC_IER_EOSIE;
 8003dac:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <DMAInit+0x148>)
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <DMAInit+0x148>)
 8003db2:	2108      	movs	r1, #8
 8003db4:	430a      	orrs	r2, r1
 8003db6:	605a      	str	r2, [r3, #4]
	ADC1->CR |= ADC_CR_ADEN;
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <DMAInit+0x148>)
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <DMAInit+0x148>)
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]
	ADC1->CR |= ADC_CR_ADSTART;
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <DMAInit+0x148>)
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <DMAInit+0x148>)
 8003dca:	2104      	movs	r1, #4
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	609a      	str	r2, [r3, #8]
}
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40020008 	.word	0x40020008
 8003de0:	ffffbfff 	.word	0xffffbfff
 8003de4:	ffffcfff 	.word	0xffffcfff
 8003de8:	fffffcff 	.word	0xfffffcff
 8003dec:	fffff3ff 	.word	0xfffff3ff
 8003df0:	40012440 	.word	0x40012440
 8003df4:	400200a8 	.word	0x400200a8
 8003df8:	40012400 	.word	0x40012400

08003dfc <IR_align>:
	// If the left and right are too similar, move forward a bit
	if(maxIndex != REAR && abs(buffer[LEFT] - buffer[RIGHT]) < 200) return 0;
	return maxIndex == LEFT ? -1 : 1;
}

int IR_align(void){
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
	int IR_Pins = ((GPIOA->IDR>>10) & 7);
 8003e02:	23a0      	movs	r3, #160	; 0xa0
 8003e04:	05db      	lsls	r3, r3, #23
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	0a9b      	lsrs	r3, r3, #10
 8003e0a:	001a      	movs	r2, r3
 8003e0c:	2307      	movs	r3, #7
 8003e0e:	4013      	ands	r3, r2
 8003e10:	607b      	str	r3, [r7, #4]
             	if(IR_Pins == 1 || IR_Pins == 5) return -1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d002      	beq.n	8003e1e <IR_align+0x22>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b05      	cmp	r3, #5
 8003e1c:	d102      	bne.n	8003e24 <IR_align+0x28>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	425b      	negs	r3, r3
 8003e22:	e008      	b.n	8003e36 <IR_align+0x3a>
	if(IR_Pins == 2 || IR_Pins == 6) return 1;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d002      	beq.n	8003e30 <IR_align+0x34>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b06      	cmp	r3, #6
 8003e2e:	d101      	bne.n	8003e34 <IR_align+0x38>
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <IR_align+0x3a>
	return 0;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b002      	add	sp, #8
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <IR_dock>:

int IR_dock(void){
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
	int IR_Pins = ((GPIOA->IDR>>10) & 7);
 8003e44:	23a0      	movs	r3, #160	; 0xa0
 8003e46:	05db      	lsls	r3, r3, #23
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	0a9b      	lsrs	r3, r3, #10
 8003e4c:	001a      	movs	r2, r3
 8003e4e:	2307      	movs	r3, #7
 8003e50:	4013      	ands	r3, r2
 8003e52:	607b      	str	r3, [r7, #4]
	return IR_Pins != 0;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	1e5a      	subs	r2, r3, #1
 8003e58:	4193      	sbcs	r3, r2
 8003e5a:	b2db      	uxtb	r3, r3
}
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b002      	add	sp, #8
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <TIM6_UltraSonic_Handler>:

/***
 * Ultrasonic Sensors
 * 	Author: Phill Spiritoso
 */
void TIM6_UltraSonic_Handler(void){
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
	if (TrackSet == 0){
 8003e68:	4b2b      	ldr	r3, [pc, #172]	; (8003f18 <TIM6_UltraSonic_Handler+0xb4>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d136      	bne.n	8003ede <TIM6_UltraSonic_Handler+0x7a>
		if (UltraTurn > 0){
 8003e70:	4b2a      	ldr	r3, [pc, #168]	; (8003f1c <TIM6_UltraSonic_Handler+0xb8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	dd02      	ble.n	8003e7e <TIM6_UltraSonic_Handler+0x1a>
			checkTurn();
 8003e78:	f000 f85e 	bl	8003f38 <checkTurn>
 8003e7c:	e026      	b.n	8003ecc <TIM6_UltraSonic_Handler+0x68>
		}
		else if ((left == right) && (LCheck == RCheck)){
 8003e7e:	4b28      	ldr	r3, [pc, #160]	; (8003f20 <TIM6_UltraSonic_Handler+0xbc>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4b28      	ldr	r3, [pc, #160]	; (8003f24 <TIM6_UltraSonic_Handler+0xc0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d108      	bne.n	8003e9c <TIM6_UltraSonic_Handler+0x38>
 8003e8a:	4b27      	ldr	r3, [pc, #156]	; (8003f28 <TIM6_UltraSonic_Handler+0xc4>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4b27      	ldr	r3, [pc, #156]	; (8003f2c <TIM6_UltraSonic_Handler+0xc8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d102      	bne.n	8003e9c <TIM6_UltraSonic_Handler+0x38>
			checkStraight();
 8003e96:	f000 f88d 	bl	8003fb4 <checkStraight>
 8003e9a:	e017      	b.n	8003ecc <TIM6_UltraSonic_Handler+0x68>
		}
		else if(left > 0){
 8003e9c:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <TIM6_UltraSonic_Handler+0xbc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	dd02      	ble.n	8003eaa <TIM6_UltraSonic_Handler+0x46>
			checkLeft();
 8003ea4:	f000 f8aa 	bl	8003ffc <checkLeft>
 8003ea8:	e010      	b.n	8003ecc <TIM6_UltraSonic_Handler+0x68>
		}
		else if(right > 0){
 8003eaa:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <TIM6_UltraSonic_Handler+0xc0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	dd02      	ble.n	8003eb8 <TIM6_UltraSonic_Handler+0x54>
			checkRight();
 8003eb2:	f000 f8d7 	bl	8004064 <checkRight>
 8003eb6:	e009      	b.n	8003ecc <TIM6_UltraSonic_Handler+0x68>
		}
		else if ((RCheck > 0) && (LCheck > 0)){
 8003eb8:	4b1c      	ldr	r3, [pc, #112]	; (8003f2c <TIM6_UltraSonic_Handler+0xc8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	dd05      	ble.n	8003ecc <TIM6_UltraSonic_Handler+0x68>
 8003ec0:	4b19      	ldr	r3, [pc, #100]	; (8003f28 <TIM6_UltraSonic_Handler+0xc4>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	dd01      	ble.n	8003ecc <TIM6_UltraSonic_Handler+0x68>
			determineDir();
 8003ec8:	f000 f8fe 	bl	80040c8 <determineDir>
		}
		if (UltraTurn == 0) {
 8003ecc:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <TIM6_UltraSonic_Handler+0xb8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d104      	bne.n	8003ede <TIM6_UltraSonic_Handler+0x7a>
		Track++;
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <TIM6_UltraSonic_Handler+0xcc>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <TIM6_UltraSonic_Handler+0xcc>)
 8003edc:	601a      	str	r2, [r3, #0]
		}
	}
		if (UltraTurn == 0) {
 8003ede:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <TIM6_UltraSonic_Handler+0xb8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d112      	bne.n	8003f0c <TIM6_UltraSonic_Handler+0xa8>
			if (Track == 2){
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <TIM6_UltraSonic_Handler+0xcc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d103      	bne.n	8003ef6 <TIM6_UltraSonic_Handler+0x92>
				init_Left();
 8003eee:	f000 f917 	bl	8004120 <init_Left>
				TrackLeft();
 8003ef2:	f000 f95b 	bl	80041ac <TrackLeft>
			}
			if (Track == 3){
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <TIM6_UltraSonic_Handler+0xcc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	d106      	bne.n	8003f0c <TIM6_UltraSonic_Handler+0xa8>
				init_Right();
 8003efe:	f000 f927 	bl	8004150 <init_Right>
				TrackRight();
 8003f02:	f000 f971 	bl	80041e8 <TrackRight>
				Track = 0;
 8003f06:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <TIM6_UltraSonic_Handler+0xcc>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
			}
	}
	count = 0;
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <TIM6_UltraSonic_Handler+0xd0>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]

}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	200000a4 	.word	0x200000a4
 8003f1c:	2000008c 	.word	0x2000008c
 8003f20:	20000094 	.word	0x20000094
 8003f24:	20000098 	.word	0x20000098
 8003f28:	2000009c 	.word	0x2000009c
 8003f2c:	200000a0 	.word	0x200000a0
 8003f30:	200000a8 	.word	0x200000a8
 8003f34:	20000090 	.word	0x20000090

08003f38 <checkTurn>:
void checkTurn(void){
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
	if ((UltraTurn == UltraLeft) && (count > 50)){
 8003f3c:	4b17      	ldr	r3, [pc, #92]	; (8003f9c <checkTurn+0x64>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d108      	bne.n	8003f56 <checkTurn+0x1e>
 8003f44:	4b16      	ldr	r3, [pc, #88]	; (8003fa0 <checkTurn+0x68>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b32      	cmp	r3, #50	; 0x32
 8003f4a:	dd04      	ble.n	8003f56 <checkTurn+0x1e>
		printf("Keep turning left\r\n");
 8003f4c:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <checkTurn+0x6c>)
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f002 ff2c 	bl	8006dac <puts>
	if ((UltraTurn == UltraLeft) && (count > 50)){
 8003f54:	e01f      	b.n	8003f96 <checkTurn+0x5e>
	}
	else if ((UltraTurn == UltraRight) && (count > 50)){
 8003f56:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <checkTurn+0x64>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d108      	bne.n	8003f70 <checkTurn+0x38>
 8003f5e:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <checkTurn+0x68>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b32      	cmp	r3, #50	; 0x32
 8003f64:	dd04      	ble.n	8003f70 <checkTurn+0x38>
		printf("Keep turning right\r\n");
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <checkTurn+0x70>)
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f002 ff1f 	bl	8006dac <puts>
	else if ((UltraTurn == UltraRight) && (count > 50)){
 8003f6e:	e012      	b.n	8003f96 <checkTurn+0x5e>
	}
	else {
		printf("Good to go Forward\r\n");
 8003f70:	4b0e      	ldr	r3, [pc, #56]	; (8003fac <checkTurn+0x74>)
 8003f72:	0018      	movs	r0, r3
 8003f74:	f002 ff1a 	bl	8006dac <puts>
		robot.obstacle[1] = 0;
 8003f78:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <checkTurn+0x78>)
 8003f7a:	22da      	movs	r2, #218	; 0xda
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	5499      	strb	r1, [r3, r2]
		robot.obstacle[2] = 0;
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <checkTurn+0x78>)
 8003f82:	22db      	movs	r2, #219	; 0xdb
 8003f84:	2100      	movs	r1, #0
 8003f86:	5499      	strb	r1, [r3, r2]
		robot.obstacle[0] = 0;
 8003f88:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <checkTurn+0x78>)
 8003f8a:	22d9      	movs	r2, #217	; 0xd9
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	5499      	strb	r1, [r3, r2]
		UltraTurn = 0;
 8003f90:	4b02      	ldr	r3, [pc, #8]	; (8003f9c <checkTurn+0x64>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
	}
}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	2000008c 	.word	0x2000008c
 8003fa0:	20000090 	.word	0x20000090
 8003fa4:	080089c0 	.word	0x080089c0
 8003fa8:	080089d4 	.word	0x080089d4
 8003fac:	080089e8 	.word	0x080089e8
 8003fb0:	200001f8 	.word	0x200001f8

08003fb4 <checkStraight>:
void checkStraight(void){
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
	if (count > 50){
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <checkStraight+0x38>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b32      	cmp	r3, #50	; 0x32
 8003fbe:	dd0d      	ble.n	8003fdc <checkStraight+0x28>
		robot.obstacle[1] = 1;
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <checkStraight+0x3c>)
 8003fc2:	22da      	movs	r2, #218	; 0xda
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	5499      	strb	r1, [r3, r2]
		printf("checkDirection\r\n");
 8003fc8:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <checkStraight+0x40>)
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f002 feee 	bl	8006dac <puts>
		left = 1;
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <checkStraight+0x44>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]
		init_Left();
 8003fd6:	f000 f8a3 	bl	8004120 <init_Left>
	} else {
		robot.obstacle[1] = 0;
	}
}
 8003fda:	e003      	b.n	8003fe4 <checkStraight+0x30>
		robot.obstacle[1] = 0;
 8003fdc:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <checkStraight+0x3c>)
 8003fde:	22da      	movs	r2, #218	; 0xda
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	5499      	strb	r1, [r3, r2]
}
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	20000090 	.word	0x20000090
 8003ff0:	200001f8 	.word	0x200001f8
 8003ff4:	080089fc 	.word	0x080089fc
 8003ff8:	20000094 	.word	0x20000094

08003ffc <checkLeft>:
void checkLeft(void){
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
	left++;
 8004000:	4b13      	ldr	r3, [pc, #76]	; (8004050 <checkLeft+0x54>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <checkLeft+0x54>)
 8004008:	601a      	str	r2, [r3, #0]
	if (count > 50){
 800400a:	4b12      	ldr	r3, [pc, #72]	; (8004054 <checkLeft+0x58>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b32      	cmp	r3, #50	; 0x32
 8004010:	dd04      	ble.n	800401c <checkLeft+0x20>
		robot.obstacle[0] = 1;
 8004012:	4b11      	ldr	r3, [pc, #68]	; (8004058 <checkLeft+0x5c>)
 8004014:	22d9      	movs	r2, #217	; 0xd9
 8004016:	2101      	movs	r1, #1
 8004018:	5499      	strb	r1, [r3, r2]
 800401a:	e003      	b.n	8004024 <checkLeft+0x28>
	} else robot.obstacle[0] = 0;
 800401c:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <checkLeft+0x5c>)
 800401e:	22d9      	movs	r2, #217	; 0xd9
 8004020:	2100      	movs	r1, #0
 8004022:	5499      	strb	r1, [r3, r2]
	if (left > 3){
 8004024:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <checkLeft+0x54>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b03      	cmp	r3, #3
 800402a:	dd07      	ble.n	800403c <checkLeft+0x40>
		left = 0;
 800402c:	4b08      	ldr	r3, [pc, #32]	; (8004050 <checkLeft+0x54>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
		right = 1;
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <checkLeft+0x60>)
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]
		init_Right();
 8004038:	f000 f88a 	bl	8004150 <init_Right>
	}
	LCheck += count;
 800403c:	4b08      	ldr	r3, [pc, #32]	; (8004060 <checkLeft+0x64>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b04      	ldr	r3, [pc, #16]	; (8004054 <checkLeft+0x58>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	18d2      	adds	r2, r2, r3
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <checkLeft+0x64>)
 8004048:	601a      	str	r2, [r3, #0]
}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20000094 	.word	0x20000094
 8004054:	20000090 	.word	0x20000090
 8004058:	200001f8 	.word	0x200001f8
 800405c:	20000098 	.word	0x20000098
 8004060:	2000009c 	.word	0x2000009c

08004064 <checkRight>:
void checkRight(void){
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
	right++;
 8004068:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <checkRight+0x50>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <checkRight+0x50>)
 8004070:	601a      	str	r2, [r3, #0]
	if (count > 50){
 8004072:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <checkRight+0x54>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b32      	cmp	r3, #50	; 0x32
 8004078:	dd04      	ble.n	8004084 <checkRight+0x20>
		robot.obstacle[2] = 1;
 800407a:	4b10      	ldr	r3, [pc, #64]	; (80040bc <checkRight+0x58>)
 800407c:	22db      	movs	r2, #219	; 0xdb
 800407e:	2101      	movs	r1, #1
 8004080:	5499      	strb	r1, [r3, r2]
 8004082:	e003      	b.n	800408c <checkRight+0x28>
	} else robot.obstacle[2] = 0;
 8004084:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <checkRight+0x58>)
 8004086:	22db      	movs	r2, #219	; 0xdb
 8004088:	2100      	movs	r1, #0
 800408a:	5499      	strb	r1, [r3, r2]
	if (right > 3){
 800408c:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <checkRight+0x50>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b03      	cmp	r3, #3
 8004092:	dd05      	ble.n	80040a0 <checkRight+0x3c>
		left = 0;
 8004094:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <checkRight+0x5c>)
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
		right = 0;
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <checkRight+0x50>)
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
	}
	RCheck += count;
 80040a0:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <checkRight+0x60>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <checkRight+0x54>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	18d2      	adds	r2, r2, r3
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <checkRight+0x60>)
 80040ac:	601a      	str	r2, [r3, #0]
}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000098 	.word	0x20000098
 80040b8:	20000090 	.word	0x20000090
 80040bc:	200001f8 	.word	0x200001f8
 80040c0:	20000094 	.word	0x20000094
 80040c4:	200000a0 	.word	0x200000a0

080040c8 <determineDir>:
void determineDir(void){
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
	if (LCheck < RCheck){
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <determineDir+0x44>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <determineDir+0x48>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	da07      	bge.n	80040e8 <determineDir+0x20>
		printf("Turn Left\r\n");
 80040d8:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <determineDir+0x4c>)
 80040da:	0018      	movs	r0, r3
 80040dc:	f002 fe66 	bl	8006dac <puts>
		UltraTurn = UltraLeft;
 80040e0:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <determineDir+0x50>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	e006      	b.n	80040f6 <determineDir+0x2e>
	}
	else {
		printf("Turn Right\r\n");
 80040e8:	4b0c      	ldr	r3, [pc, #48]	; (800411c <determineDir+0x54>)
 80040ea:	0018      	movs	r0, r3
 80040ec:	f002 fe5e 	bl	8006dac <puts>
		UltraTurn = UltraRight;
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <determineDir+0x50>)
 80040f2:	2202      	movs	r2, #2
 80040f4:	601a      	str	r2, [r3, #0]
	}
	init_Straight();
 80040f6:	f000 f841 	bl	800417c <init_Straight>
	LCheck = 0;
 80040fa:	4b04      	ldr	r3, [pc, #16]	; (800410c <determineDir+0x44>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
	RCheck = 0;
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <determineDir+0x48>)
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	2000009c 	.word	0x2000009c
 8004110:	200000a0 	.word	0x200000a0
 8004114:	08008a0c 	.word	0x08008a0c
 8004118:	2000008c 	.word	0x2000008c
 800411c:	08008a18 	.word	0x08008a18

08004120 <init_Left>:
void init_Left(){
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
	GPIOA->ODR |= 1 << 4;
 8004124:	23a0      	movs	r3, #160	; 0xa0
 8004126:	05db      	lsls	r3, r3, #23
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	23a0      	movs	r3, #160	; 0xa0
 800412c:	05db      	lsls	r3, r3, #23
 800412e:	2110      	movs	r1, #16
 8004130:	430a      	orrs	r2, r1
 8004132:	615a      	str	r2, [r3, #20]
	GPIOC->ODR &= ~(1 << 13);
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <init_Left+0x28>)
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <init_Left+0x28>)
 800413a:	4904      	ldr	r1, [pc, #16]	; (800414c <init_Left+0x2c>)
 800413c:	400a      	ands	r2, r1
 800413e:	615a      	str	r2, [r3, #20]
}
 8004140:	46c0      	nop			; (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	50000800 	.word	0x50000800
 800414c:	ffffdfff 	.word	0xffffdfff

08004150 <init_Right>:
void init_Right() {
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~(1 << 4);
 8004154:	23a0      	movs	r3, #160	; 0xa0
 8004156:	05db      	lsls	r3, r3, #23
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	23a0      	movs	r3, #160	; 0xa0
 800415c:	05db      	lsls	r3, r3, #23
 800415e:	2110      	movs	r1, #16
 8004160:	438a      	bics	r2, r1
 8004162:	615a      	str	r2, [r3, #20]
	GPIOC->ODR |= (1 << 13);
 8004164:	4b04      	ldr	r3, [pc, #16]	; (8004178 <init_Right+0x28>)
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <init_Right+0x28>)
 800416a:	2180      	movs	r1, #128	; 0x80
 800416c:	0189      	lsls	r1, r1, #6
 800416e:	430a      	orrs	r2, r1
 8004170:	615a      	str	r2, [r3, #20]
}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	50000800 	.word	0x50000800

0800417c <init_Straight>:
void init_Straight() {
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~(1 << 4);
 8004180:	23a0      	movs	r3, #160	; 0xa0
 8004182:	05db      	lsls	r3, r3, #23
 8004184:	695a      	ldr	r2, [r3, #20]
 8004186:	23a0      	movs	r3, #160	; 0xa0
 8004188:	05db      	lsls	r3, r3, #23
 800418a:	2110      	movs	r1, #16
 800418c:	438a      	bics	r2, r1
 800418e:	615a      	str	r2, [r3, #20]
	GPIOC->ODR &= ~(1 << 13);
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <init_Straight+0x28>)
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <init_Straight+0x28>)
 8004196:	4904      	ldr	r1, [pc, #16]	; (80041a8 <init_Straight+0x2c>)
 8004198:	400a      	ands	r2, r1
 800419a:	615a      	str	r2, [r3, #20]
}
 800419c:	46c0      	nop			; (mov r8, r8)
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	50000800 	.word	0x50000800
 80041a8:	ffffdfff 	.word	0xffffdfff

080041ac <TrackLeft>:
void TrackLeft(){
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
	if (count > 50){
 80041b0:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <TrackLeft+0x30>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b32      	cmp	r3, #50	; 0x32
 80041b6:	dd07      	ble.n	80041c8 <TrackLeft+0x1c>
		robot.obstacle[0] = 1;
 80041b8:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <TrackLeft+0x34>)
 80041ba:	22d9      	movs	r2, #217	; 0xd9
 80041bc:	2101      	movs	r1, #1
 80041be:	5499      	strb	r1, [r3, r2]
		TrackSet=1;
 80041c0:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <TrackLeft+0x38>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	701a      	strb	r2, [r3, #0]
	}
	else{
		robot.obstacle[0] = 0;
		TrackSet = 0;
	}
}
 80041c6:	e006      	b.n	80041d6 <TrackLeft+0x2a>
		robot.obstacle[0] = 0;
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <TrackLeft+0x34>)
 80041ca:	22d9      	movs	r2, #217	; 0xd9
 80041cc:	2100      	movs	r1, #0
 80041ce:	5499      	strb	r1, [r3, r2]
		TrackSet = 0;
 80041d0:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <TrackLeft+0x38>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	701a      	strb	r2, [r3, #0]
}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20000090 	.word	0x20000090
 80041e0:	200001f8 	.word	0x200001f8
 80041e4:	200000a4 	.word	0x200000a4

080041e8 <TrackRight>:
void TrackRight(){
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
	if (count > 50){
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <TrackRight+0x30>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b32      	cmp	r3, #50	; 0x32
 80041f2:	dd07      	ble.n	8004204 <TrackRight+0x1c>
		robot.obstacle[2] = 1;
 80041f4:	4b09      	ldr	r3, [pc, #36]	; (800421c <TrackRight+0x34>)
 80041f6:	22db      	movs	r2, #219	; 0xdb
 80041f8:	2101      	movs	r1, #1
 80041fa:	5499      	strb	r1, [r3, r2]
		TrackSet=1;
 80041fc:	4b08      	ldr	r3, [pc, #32]	; (8004220 <TrackRight+0x38>)
 80041fe:	2201      	movs	r2, #1
 8004200:	701a      	strb	r2, [r3, #0]
	}
	else {
		robot.obstacle[2] = 0;
		TrackSet = 0;
	}
}
 8004202:	e006      	b.n	8004212 <TrackRight+0x2a>
		robot.obstacle[2] = 0;
 8004204:	4b05      	ldr	r3, [pc, #20]	; (800421c <TrackRight+0x34>)
 8004206:	22db      	movs	r2, #219	; 0xdb
 8004208:	2100      	movs	r1, #0
 800420a:	5499      	strb	r1, [r3, r2]
		TrackSet = 0;
 800420c:	4b04      	ldr	r3, [pc, #16]	; (8004220 <TrackRight+0x38>)
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000090 	.word	0x20000090
 800421c:	200001f8 	.word	0x200001f8
 8004220:	200000a4 	.word	0x200000a4

08004224 <TIM2_conf>:

void TIM2_conf(void){
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_IOPAEN;
 8004228:	4b2b      	ldr	r3, [pc, #172]	; (80042d8 <TIM2_conf+0xb4>)
 800422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422c:	4b2a      	ldr	r3, [pc, #168]	; (80042d8 <TIM2_conf+0xb4>)
 800422e:	2101      	movs	r1, #1
 8004230:	430a      	orrs	r2, r1
 8004232:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004234:	4b28      	ldr	r3, [pc, #160]	; (80042d8 <TIM2_conf+0xb4>)
 8004236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004238:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <TIM2_conf+0xb4>)
 800423a:	2101      	movs	r1, #1
 800423c:	430a      	orrs	r2, r1
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
	GPIOA->MODER |= 2;
 8004240:	23a0      	movs	r3, #160	; 0xa0
 8004242:	05db      	lsls	r3, r3, #23
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	23a0      	movs	r3, #160	; 0xa0
 8004248:	05db      	lsls	r3, r3, #23
 800424a:	2102      	movs	r1, #2
 800424c:	430a      	orrs	r2, r1
 800424e:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= 2;
 8004250:	23a0      	movs	r3, #160	; 0xa0
 8004252:	05db      	lsls	r3, r3, #23
 8004254:	6a1a      	ldr	r2, [r3, #32]
 8004256:	23a0      	movs	r3, #160	; 0xa0
 8004258:	05db      	lsls	r3, r3, #23
 800425a:	2102      	movs	r1, #2
 800425c:	430a      	orrs	r2, r1
 800425e:	621a      	str	r2, [r3, #32]
	GPIOA->OSPEEDR |= 2;
 8004260:	23a0      	movs	r3, #160	; 0xa0
 8004262:	05db      	lsls	r3, r3, #23
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	23a0      	movs	r3, #160	; 0xa0
 8004268:	05db      	lsls	r3, r3, #23
 800426a:	2102      	movs	r1, #2
 800426c:	430a      	orrs	r2, r1
 800426e:	609a      	str	r2, [r3, #8]
	TIM2->PSC = 20;
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	05db      	lsls	r3, r3, #23
 8004274:	2214      	movs	r2, #20
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 9;
 8004278:	2380      	movs	r3, #128	; 0x80
 800427a:	05db      	lsls	r3, r3, #23
 800427c:	2209      	movs	r2, #9
 800427e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	05db      	lsls	r3, r3, #23
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	2380      	movs	r3, #128	; 0x80
 8004288:	05db      	lsls	r3, r3, #23
 800428a:	2160      	movs	r1, #96	; 0x60
 800428c:	430a      	orrs	r2, r1
 800428e:	619a      	str	r2, [r3, #24]
	TIM2->CCR1 = 9;
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	05db      	lsls	r3, r3, #23
 8004294:	2209      	movs	r2, #9
 8004296:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCER |= 1;
 8004298:	2380      	movs	r3, #128	; 0x80
 800429a:	05db      	lsls	r3, r3, #23
 800429c:	6a1a      	ldr	r2, [r3, #32]
 800429e:	2380      	movs	r3, #128	; 0x80
 80042a0:	05db      	lsls	r3, r3, #23
 80042a2:	2101      	movs	r1, #1
 80042a4:	430a      	orrs	r2, r1
 80042a6:	621a      	str	r2, [r3, #32]
	TIM2->CR1 |= 1;
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	05db      	lsls	r3, r3, #23
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	05db      	lsls	r3, r3, #23
 80042b2:	2101      	movs	r1, #1
 80042b4:	430a      	orrs	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80042b8:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <TIM2_conf+0xb4>)
 80042ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <TIM2_conf+0xb4>)
 80042be:	2101      	movs	r1, #1
 80042c0:	430a      	orrs	r2, r1
 80042c2:	639a      	str	r2, [r3, #56]	; 0x38
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <TIM2_conf+0xb4>)
 80042c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c8:	4b03      	ldr	r3, [pc, #12]	; (80042d8 <TIM2_conf+0xb4>)
 80042ca:	2110      	movs	r1, #16
 80042cc:	430a      	orrs	r2, r1
 80042ce:	639a      	str	r2, [r3, #56]	; 0x38
}
 80042d0:	46c0      	nop			; (mov r8, r8)
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	40021000 	.word	0x40021000

080042dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042e0:	4b07      	ldr	r3, [pc, #28]	; (8004300 <HAL_MspInit+0x24>)
 80042e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e4:	4b06      	ldr	r3, [pc, #24]	; (8004300 <HAL_MspInit+0x24>)
 80042e6:	2101      	movs	r1, #1
 80042e8:	430a      	orrs	r2, r1
 80042ea:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80042ec:	4b04      	ldr	r3, [pc, #16]	; (8004300 <HAL_MspInit+0x24>)
 80042ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f0:	4b03      	ldr	r3, [pc, #12]	; (8004300 <HAL_MspInit+0x24>)
 80042f2:	2180      	movs	r1, #128	; 0x80
 80042f4:	0549      	lsls	r1, r1, #21
 80042f6:	430a      	orrs	r2, r1
 80042f8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40021000 	.word	0x40021000

08004304 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800430c:	230c      	movs	r3, #12
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	0018      	movs	r0, r3
 8004312:	2314      	movs	r3, #20
 8004314:	001a      	movs	r2, r3
 8004316:	2100      	movs	r1, #0
 8004318:	f002 fcdf 	bl	8006cda <memset>
  if(hadc->Instance==ADC1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a14      	ldr	r2, [pc, #80]	; (8004374 <HAL_ADC_MspInit+0x70>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d122      	bne.n	800436c <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004326:	4b14      	ldr	r3, [pc, #80]	; (8004378 <HAL_ADC_MspInit+0x74>)
 8004328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432a:	4b13      	ldr	r3, [pc, #76]	; (8004378 <HAL_ADC_MspInit+0x74>)
 800432c:	2180      	movs	r1, #128	; 0x80
 800432e:	0089      	lsls	r1, r1, #2
 8004330:	430a      	orrs	r2, r1
 8004332:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004334:	4b10      	ldr	r3, [pc, #64]	; (8004378 <HAL_ADC_MspInit+0x74>)
 8004336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004338:	4b0f      	ldr	r3, [pc, #60]	; (8004378 <HAL_ADC_MspInit+0x74>)
 800433a:	2104      	movs	r1, #4
 800433c:	430a      	orrs	r2, r1
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004340:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <HAL_ADC_MspInit+0x74>)
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	2204      	movs	r2, #4
 8004346:	4013      	ands	r3, r2
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC_IN11
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14 
    */
    GPIO_InitStruct.Pin = LS_FR_Pin|LS_RI_Pin|LS_RE_Pin|LS_LE_Pin 
 800434c:	210c      	movs	r1, #12
 800434e:	187b      	adds	r3, r7, r1
 8004350:	221f      	movs	r2, #31
 8004352:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004354:	187b      	adds	r3, r7, r1
 8004356:	2203      	movs	r2, #3
 8004358:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435a:	187b      	adds	r3, r7, r1
 800435c:	2200      	movs	r2, #0
 800435e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004360:	187b      	adds	r3, r7, r1
 8004362:	4a06      	ldr	r2, [pc, #24]	; (800437c <HAL_ADC_MspInit+0x78>)
 8004364:	0019      	movs	r1, r3
 8004366:	0010      	movs	r0, r2
 8004368:	f000 fed2 	bl	8005110 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	b008      	add	sp, #32
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40012400 	.word	0x40012400
 8004378:	40021000 	.word	0x40021000
 800437c:	50000800 	.word	0x50000800

08004380 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	2380      	movs	r3, #128	; 0x80
 800438e:	05db      	lsls	r3, r3, #23
 8004390:	429a      	cmp	r2, r3
 8004392:	d105      	bne.n	80043a0 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004394:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <HAL_TIM_PWM_MspInit+0x28>)
 8004396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004398:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <HAL_TIM_PWM_MspInit+0x28>)
 800439a:	2101      	movs	r1, #1
 800439c:	430a      	orrs	r2, r1
 800439e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80043a0:	46c0      	nop			; (mov r8, r8)
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b002      	add	sp, #8
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40021000 	.word	0x40021000

080043ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a10      	ldr	r2, [pc, #64]	; (80043fc <HAL_TIM_Base_MspInit+0x50>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d106      	bne.n	80043cc <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <HAL_TIM_Base_MspInit+0x54>)
 80043c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c2:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <HAL_TIM_Base_MspInit+0x54>)
 80043c4:	2102      	movs	r1, #2
 80043c6:	430a      	orrs	r2, r1
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80043ca:	e012      	b.n	80043f2 <HAL_TIM_Base_MspInit+0x46>
  else if(htim_base->Instance==TIM6)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a0c      	ldr	r2, [pc, #48]	; (8004404 <HAL_TIM_Base_MspInit+0x58>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d10d      	bne.n	80043f2 <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80043d6:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <HAL_TIM_Base_MspInit+0x54>)
 80043d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043da:	4b09      	ldr	r3, [pc, #36]	; (8004400 <HAL_TIM_Base_MspInit+0x54>)
 80043dc:	2110      	movs	r1, #16
 80043de:	430a      	orrs	r2, r1
 80043e0:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80043e2:	2200      	movs	r2, #0
 80043e4:	2100      	movs	r1, #0
 80043e6:	2011      	movs	r0, #17
 80043e8:	f000 fe60 	bl	80050ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80043ec:	2011      	movs	r0, #17
 80043ee:	f000 fe72 	bl	80050d6 <HAL_NVIC_EnableIRQ>
}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b002      	add	sp, #8
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	40000400 	.word	0x40000400
 8004400:	40021000 	.word	0x40021000
 8004404:	40001000 	.word	0x40001000

08004408 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004410:	230c      	movs	r3, #12
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	0018      	movs	r0, r3
 8004416:	2314      	movs	r3, #20
 8004418:	001a      	movs	r2, r3
 800441a:	2100      	movs	r1, #0
 800441c:	f002 fc5d 	bl	8006cda <memset>
  if(htim_encoder->Instance==TIM22)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1b      	ldr	r2, [pc, #108]	; (8004494 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d12f      	bne.n	800448a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM22_MspInit 0 */

  /* USER CODE END TIM22_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM22_CLK_ENABLE();
 800442a:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <HAL_TIM_Encoder_MspInit+0x90>)
 800442c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800442e:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <HAL_TIM_Encoder_MspInit+0x90>)
 8004430:	2120      	movs	r1, #32
 8004432:	430a      	orrs	r2, r1
 8004434:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004436:	4b18      	ldr	r3, [pc, #96]	; (8004498 <HAL_TIM_Encoder_MspInit+0x90>)
 8004438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443a:	4b17      	ldr	r3, [pc, #92]	; (8004498 <HAL_TIM_Encoder_MspInit+0x90>)
 800443c:	2104      	movs	r1, #4
 800443e:	430a      	orrs	r2, r1
 8004440:	62da      	str	r2, [r3, #44]	; 0x2c
 8004442:	4b15      	ldr	r3, [pc, #84]	; (8004498 <HAL_TIM_Encoder_MspInit+0x90>)
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	2204      	movs	r2, #4
 8004448:	4013      	ands	r3, r2
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	68bb      	ldr	r3, [r7, #8]
    /**TIM22 GPIO Configuration    
    PC6     ------> TIM22_CH1
    PC7     ------> TIM22_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800444e:	210c      	movs	r1, #12
 8004450:	187b      	adds	r3, r7, r1
 8004452:	22c0      	movs	r2, #192	; 0xc0
 8004454:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004456:	187b      	adds	r3, r7, r1
 8004458:	2202      	movs	r2, #2
 800445a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445c:	187b      	adds	r3, r7, r1
 800445e:	2200      	movs	r2, #0
 8004460:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004462:	187b      	adds	r3, r7, r1
 8004464:	2200      	movs	r2, #0
 8004466:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM22;
 8004468:	187b      	adds	r3, r7, r1
 800446a:	2200      	movs	r2, #0
 800446c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800446e:	187b      	adds	r3, r7, r1
 8004470:	4a0a      	ldr	r2, [pc, #40]	; (800449c <HAL_TIM_Encoder_MspInit+0x94>)
 8004472:	0019      	movs	r1, r3
 8004474:	0010      	movs	r0, r2
 8004476:	f000 fe4b 	bl	8005110 <HAL_GPIO_Init>

    /* TIM22 interrupt Init */
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 800447a:	2200      	movs	r2, #0
 800447c:	2100      	movs	r1, #0
 800447e:	2016      	movs	r0, #22
 8004480:	f000 fe14 	bl	80050ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8004484:	2016      	movs	r0, #22
 8004486:	f000 fe26 	bl	80050d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	46bd      	mov	sp, r7
 800448e:	b008      	add	sp, #32
 8004490:	bd80      	pop	{r7, pc}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	40011400 	.word	0x40011400
 8004498:	40021000 	.word	0x40021000
 800449c:	50000800 	.word	0x50000800

080044a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80044a0:	b590      	push	{r4, r7, lr}
 80044a2:	b08b      	sub	sp, #44	; 0x2c
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a8:	2314      	movs	r3, #20
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	0018      	movs	r0, r3
 80044ae:	2314      	movs	r3, #20
 80044b0:	001a      	movs	r2, r3
 80044b2:	2100      	movs	r1, #0
 80044b4:	f002 fc11 	bl	8006cda <memset>
  if(htim->Instance==TIM2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	05db      	lsls	r3, r3, #23
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d123      	bne.n	800450c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c4:	4b38      	ldr	r3, [pc, #224]	; (80045a8 <HAL_TIM_MspPostInit+0x108>)
 80044c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c8:	4b37      	ldr	r3, [pc, #220]	; (80045a8 <HAL_TIM_MspPostInit+0x108>)
 80044ca:	2101      	movs	r1, #1
 80044cc:	430a      	orrs	r2, r1
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80044d0:	4b35      	ldr	r3, [pc, #212]	; (80045a8 <HAL_TIM_MspPostInit+0x108>)
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	2201      	movs	r2, #1
 80044d6:	4013      	ands	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Ultrasonic_Trig_Pin;
 80044dc:	2114      	movs	r1, #20
 80044de:	187b      	adds	r3, r7, r1
 80044e0:	2201      	movs	r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e4:	187b      	adds	r3, r7, r1
 80044e6:	2202      	movs	r2, #2
 80044e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ea:	187b      	adds	r3, r7, r1
 80044ec:	2200      	movs	r2, #0
 80044ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f0:	187b      	adds	r3, r7, r1
 80044f2:	2200      	movs	r2, #0
 80044f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80044f6:	187b      	adds	r3, r7, r1
 80044f8:	2202      	movs	r2, #2
 80044fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Ultrasonic_Trig_GPIO_Port, &GPIO_InitStruct);
 80044fc:	187a      	adds	r2, r7, r1
 80044fe:	23a0      	movs	r3, #160	; 0xa0
 8004500:	05db      	lsls	r3, r3, #23
 8004502:	0011      	movs	r1, r2
 8004504:	0018      	movs	r0, r3
 8004506:	f000 fe03 	bl	8005110 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800450a:	e049      	b.n	80045a0 <HAL_TIM_MspPostInit+0x100>
  else if(htim->Instance==TIM3)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a26      	ldr	r2, [pc, #152]	; (80045ac <HAL_TIM_MspPostInit+0x10c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d144      	bne.n	80045a0 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004516:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <HAL_TIM_MspPostInit+0x108>)
 8004518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451a:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <HAL_TIM_MspPostInit+0x108>)
 800451c:	2101      	movs	r1, #1
 800451e:	430a      	orrs	r2, r1
 8004520:	62da      	str	r2, [r3, #44]	; 0x2c
 8004522:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <HAL_TIM_MspPostInit+0x108>)
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	2201      	movs	r2, #1
 8004528:	4013      	ands	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800452e:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <HAL_TIM_MspPostInit+0x108>)
 8004530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004532:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <HAL_TIM_MspPostInit+0x108>)
 8004534:	2102      	movs	r1, #2
 8004536:	430a      	orrs	r2, r1
 8004538:	62da      	str	r2, [r3, #44]	; 0x2c
 800453a:	4b1b      	ldr	r3, [pc, #108]	; (80045a8 <HAL_TIM_MspPostInit+0x108>)
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	2202      	movs	r2, #2
 8004540:	4013      	ands	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LM_PWM_1_Pin|LM_PWM_2_Pin;
 8004546:	2414      	movs	r4, #20
 8004548:	193b      	adds	r3, r7, r4
 800454a:	22c0      	movs	r2, #192	; 0xc0
 800454c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454e:	193b      	adds	r3, r7, r4
 8004550:	2202      	movs	r2, #2
 8004552:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004554:	193b      	adds	r3, r7, r4
 8004556:	2200      	movs	r2, #0
 8004558:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800455a:	193b      	adds	r3, r7, r4
 800455c:	2200      	movs	r2, #0
 800455e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004560:	193b      	adds	r3, r7, r4
 8004562:	2202      	movs	r2, #2
 8004564:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004566:	193a      	adds	r2, r7, r4
 8004568:	23a0      	movs	r3, #160	; 0xa0
 800456a:	05db      	lsls	r3, r3, #23
 800456c:	0011      	movs	r1, r2
 800456e:	0018      	movs	r0, r3
 8004570:	f000 fdce 	bl	8005110 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RM_PWM_1_Pin|RM_PWM_2_Pin;
 8004574:	0021      	movs	r1, r4
 8004576:	187b      	adds	r3, r7, r1
 8004578:	2203      	movs	r2, #3
 800457a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457c:	187b      	adds	r3, r7, r1
 800457e:	2202      	movs	r2, #2
 8004580:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004582:	187b      	adds	r3, r7, r1
 8004584:	2200      	movs	r2, #0
 8004586:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004588:	187b      	adds	r3, r7, r1
 800458a:	2200      	movs	r2, #0
 800458c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800458e:	187b      	adds	r3, r7, r1
 8004590:	2202      	movs	r2, #2
 8004592:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004594:	187b      	adds	r3, r7, r1
 8004596:	4a06      	ldr	r2, [pc, #24]	; (80045b0 <HAL_TIM_MspPostInit+0x110>)
 8004598:	0019      	movs	r1, r3
 800459a:	0010      	movs	r0, r2
 800459c:	f000 fdb8 	bl	8005110 <HAL_GPIO_Init>
}
 80045a0:	46c0      	nop			; (mov r8, r8)
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b00b      	add	sp, #44	; 0x2c
 80045a6:	bd90      	pop	{r4, r7, pc}
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40000400 	.word	0x40000400
 80045b0:	50000400 	.word	0x50000400

080045b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80045b8:	46c0      	nop			; (mov r8, r8)
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045c2:	e7fe      	b.n	80045c2 <HardFault_Handler+0x4>

080045c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045dc:	f000 f9e0 	bl	80049a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045e0:	46c0      	nop			; (mov r8, r8)
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80045ea:	2002      	movs	r0, #2
 80045ec:	f000 ff48 	bl	8005480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80045f0:	46c0      	nop			; (mov r8, r8)
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(L_MTR_ENC_Pin)){
 80045fc:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <EXTI4_15_IRQHandler+0xe0>)
 80045fe:	695a      	ldr	r2, [r3, #20]
 8004600:	2380      	movs	r3, #128	; 0x80
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	4013      	ands	r3, r2
 8004606:	d012      	beq.n	800462e <EXTI4_15_IRQHandler+0x36>
		extern Robot robot;
		robot.left.encoder+= robot.left.dir;
 8004608:	4b34      	ldr	r3, [pc, #208]	; (80046dc <EXTI4_15_IRQHandler+0xe4>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4a33      	ldr	r2, [pc, #204]	; (80046dc <EXTI4_15_IRQHandler+0xe4>)
 800460e:	7812      	ldrb	r2, [r2, #0]
 8004610:	b252      	sxtb	r2, r2
 8004612:	189a      	adds	r2, r3, r2
 8004614:	4b31      	ldr	r3, [pc, #196]	; (80046dc <EXTI4_15_IRQHandler+0xe4>)
 8004616:	605a      	str	r2, [r3, #4]
//		Menu_Main();
		if(abs(robot.left.encoder) > 50) update_pos(&robot);
 8004618:	4b30      	ldr	r3, [pc, #192]	; (80046dc <EXTI4_15_IRQHandler+0xe4>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	17da      	asrs	r2, r3, #31
 800461e:	189b      	adds	r3, r3, r2
 8004620:	4053      	eors	r3, r2
 8004622:	2b32      	cmp	r3, #50	; 0x32
 8004624:	dd03      	ble.n	800462e <EXTI4_15_IRQHandler+0x36>
 8004626:	4b2d      	ldr	r3, [pc, #180]	; (80046dc <EXTI4_15_IRQHandler+0xe4>)
 8004628:	0018      	movs	r0, r3
 800462a:	f7ff f9bd 	bl	80039a8 <update_pos>
	}
	if(__HAL_GPIO_EXTI_GET_FLAG(R_MTR_ENC_Pin)){
 800462e:	4b2a      	ldr	r3, [pc, #168]	; (80046d8 <EXTI4_15_IRQHandler+0xe0>)
 8004630:	695a      	ldr	r2, [r3, #20]
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	015b      	lsls	r3, r3, #5
 8004636:	4013      	ands	r3, r2
 8004638:	d012      	beq.n	8004660 <EXTI4_15_IRQHandler+0x68>
		extern Robot robot;
		robot.right.encoder+= robot.right.dir;
 800463a:	4b28      	ldr	r3, [pc, #160]	; (80046dc <EXTI4_15_IRQHandler+0xe4>)
 800463c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463e:	4a27      	ldr	r2, [pc, #156]	; (80046dc <EXTI4_15_IRQHandler+0xe4>)
 8004640:	215c      	movs	r1, #92	; 0x5c
 8004642:	5652      	ldrsb	r2, [r2, r1]
 8004644:	189a      	adds	r2, r3, r2
 8004646:	4b25      	ldr	r3, [pc, #148]	; (80046dc <EXTI4_15_IRQHandler+0xe4>)
 8004648:	661a      	str	r2, [r3, #96]	; 0x60
		if(abs(robot.right.encoder) > 50) update_pos(&robot);
 800464a:	4b24      	ldr	r3, [pc, #144]	; (80046dc <EXTI4_15_IRQHandler+0xe4>)
 800464c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464e:	17da      	asrs	r2, r3, #31
 8004650:	189b      	adds	r3, r3, r2
 8004652:	4053      	eors	r3, r2
 8004654:	2b32      	cmp	r3, #50	; 0x32
 8004656:	dd03      	ble.n	8004660 <EXTI4_15_IRQHandler+0x68>
 8004658:	4b20      	ldr	r3, [pc, #128]	; (80046dc <EXTI4_15_IRQHandler+0xe4>)
 800465a:	0018      	movs	r0, r3
 800465c:	f7ff f9a4 	bl	80039a8 <update_pos>
	}

	if(__HAL_GPIO_EXTI_GET_FLAG(CLIFF_Pin)){
 8004660:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <EXTI4_15_IRQHandler+0xe0>)
 8004662:	695a      	ldr	r2, [r3, #20]
 8004664:	2380      	movs	r3, #128	; 0x80
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4013      	ands	r3, r2
 800466a:	d00f      	beq.n	800468c <EXTI4_15_IRQHandler+0x94>
		extern Robot robot;
		robot.cliff = !HAL_GPIO_ReadPin(CLIFF_GPIO_Port, CLIFF_Pin);
 800466c:	2380      	movs	r3, #128	; 0x80
 800466e:	009a      	lsls	r2, r3, #2
 8004670:	23a0      	movs	r3, #160	; 0xa0
 8004672:	05db      	lsls	r3, r3, #23
 8004674:	0011      	movs	r1, r2
 8004676:	0018      	movs	r0, r3
 8004678:	f000 fec8 	bl	800540c <HAL_GPIO_ReadPin>
 800467c:	0003      	movs	r3, r0
 800467e:	425a      	negs	r2, r3
 8004680:	4153      	adcs	r3, r2
 8004682:	b2db      	uxtb	r3, r3
 8004684:	0019      	movs	r1, r3
 8004686:	4b15      	ldr	r3, [pc, #84]	; (80046dc <EXTI4_15_IRQHandler+0xe4>)
 8004688:	22b8      	movs	r2, #184	; 0xb8
 800468a:	5499      	strb	r1, [r3, r2]
	}
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15)){
 800468c:	4b12      	ldr	r3, [pc, #72]	; (80046d8 <EXTI4_15_IRQHandler+0xe0>)
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	021b      	lsls	r3, r3, #8
 8004694:	4013      	ands	r3, r2
 8004696:	d004      	beq.n	80046a2 <EXTI4_15_IRQHandler+0xaa>
				extern count;
				count++;
 8004698:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <EXTI4_15_IRQHandler+0xe8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <EXTI4_15_IRQHandler+0xe8>)
 80046a0:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80046a2:	2040      	movs	r0, #64	; 0x40
 80046a4:	f000 feec 	bl	8005480 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	0018      	movs	r0, r3
 80046ae:	f000 fee7 	bl	8005480 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80046b2:	2380      	movs	r3, #128	; 0x80
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	0018      	movs	r0, r3
 80046b8:	f000 fee2 	bl	8005480 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80046bc:	2380      	movs	r3, #128	; 0x80
 80046be:	015b      	lsls	r3, r3, #5
 80046c0:	0018      	movs	r0, r3
 80046c2:	f000 fedd 	bl	8005480 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80046c6:	2380      	movs	r3, #128	; 0x80
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	0018      	movs	r0, r3
 80046cc:	f000 fed8 	bl	8005480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80046d0:	46c0      	nop			; (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	40010400 	.word	0x40010400
 80046dc:	200001f8 	.word	0x200001f8
 80046e0:	20000090 	.word	0x20000090

080046e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	TIM6_UltraSonic_Handler();
 80046e8:	f7ff fbbc 	bl	8003e64 <TIM6_UltraSonic_Handler>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80046ec:	4b03      	ldr	r3, [pc, #12]	; (80046fc <TIM6_DAC_IRQHandler+0x18>)
 80046ee:	0018      	movs	r0, r3
 80046f0:	f001 fd9a 	bl	8006228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	200002d8 	.word	0x200002d8

08004700 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8004704:	4b03      	ldr	r3, [pc, #12]	; (8004714 <TIM22_IRQHandler+0x14>)
 8004706:	0018      	movs	r0, r3
 8004708:	f001 fd8e 	bl	8006228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 800470c:	46c0      	nop			; (mov r8, r8)
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	200001ac 	.word	0x200001ac

08004718 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e00a      	b.n	8004740 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800472a:	e000      	b.n	800472e <_read+0x16>
 800472c:	bf00      	nop
 800472e:	0001      	movs	r1, r0
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	60ba      	str	r2, [r7, #8]
 8004736:	b2ca      	uxtb	r2, r1
 8004738:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	3301      	adds	r3, #1
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	429a      	cmp	r2, r3
 8004746:	dbf0      	blt.n	800472a <_read+0x12>
	}

return len;
 8004748:	687b      	ldr	r3, [r7, #4]
}
 800474a:	0018      	movs	r0, r3
 800474c:	46bd      	mov	sp, r7
 800474e:	b006      	add	sp, #24
 8004750:	bd80      	pop	{r7, pc}

08004752 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b086      	sub	sp, #24
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	e009      	b.n	8004778 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	60ba      	str	r2, [r7, #8]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	0018      	movs	r0, r3
 800476e:	e000      	b.n	8004772 <_write+0x20>
 8004770:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	3301      	adds	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	429a      	cmp	r2, r3
 800477e:	dbf1      	blt.n	8004764 <_write+0x12>
	}
	return len;
 8004780:	687b      	ldr	r3, [r7, #4]
}
 8004782:	0018      	movs	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	b006      	add	sp, #24
 8004788:	bd80      	pop	{r7, pc}

0800478a <_close>:

int _close(int file)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
	return -1;
 8004792:	2301      	movs	r3, #1
 8004794:	425b      	negs	r3, r3
}
 8004796:	0018      	movs	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	b002      	add	sp, #8
 800479c:	bd80      	pop	{r7, pc}

0800479e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2280      	movs	r2, #128	; 0x80
 80047ac:	0192      	lsls	r2, r2, #6
 80047ae:	605a      	str	r2, [r3, #4]
	return 0;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	0018      	movs	r0, r3
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b002      	add	sp, #8
 80047b8:	bd80      	pop	{r7, pc}

080047ba <_isatty>:

int _isatty(int file)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b082      	sub	sp, #8
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
	return 1;
 80047c2:	2301      	movs	r3, #1
}
 80047c4:	0018      	movs	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	b002      	add	sp, #8
 80047ca:	bd80      	pop	{r7, pc}

080047cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
	return 0;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	0018      	movs	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	b004      	add	sp, #16
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80047ec:	4b11      	ldr	r3, [pc, #68]	; (8004834 <_sbrk+0x50>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d102      	bne.n	80047fa <_sbrk+0x16>
		heap_end = &end;
 80047f4:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <_sbrk+0x50>)
 80047f6:	4a10      	ldr	r2, [pc, #64]	; (8004838 <_sbrk+0x54>)
 80047f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80047fa:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <_sbrk+0x50>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <_sbrk+0x50>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	18d3      	adds	r3, r2, r3
 8004808:	466a      	mov	r2, sp
 800480a:	4293      	cmp	r3, r2
 800480c:	d907      	bls.n	800481e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800480e:	f002 fa31 	bl	8006c74 <__errno>
 8004812:	0003      	movs	r3, r0
 8004814:	220c      	movs	r2, #12
 8004816:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004818:	2301      	movs	r3, #1
 800481a:	425b      	negs	r3, r3
 800481c:	e006      	b.n	800482c <_sbrk+0x48>
	}

	heap_end += incr;
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <_sbrk+0x50>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	18d2      	adds	r2, r2, r3
 8004826:	4b03      	ldr	r3, [pc, #12]	; (8004834 <_sbrk+0x50>)
 8004828:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800482a:	68fb      	ldr	r3, [r7, #12]
}
 800482c:	0018      	movs	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	b004      	add	sp, #16
 8004832:	bd80      	pop	{r7, pc}
 8004834:	200000ac 	.word	0x200000ac
 8004838:	200003c0 	.word	0x200003c0

0800483c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004840:	4b17      	ldr	r3, [pc, #92]	; (80048a0 <SystemInit+0x64>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <SystemInit+0x64>)
 8004846:	2180      	movs	r1, #128	; 0x80
 8004848:	0049      	lsls	r1, r1, #1
 800484a:	430a      	orrs	r2, r1
 800484c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800484e:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <SystemInit+0x64>)
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <SystemInit+0x64>)
 8004854:	4913      	ldr	r1, [pc, #76]	; (80048a4 <SystemInit+0x68>)
 8004856:	400a      	ands	r2, r1
 8004858:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800485a:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <SystemInit+0x64>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <SystemInit+0x64>)
 8004860:	4911      	ldr	r1, [pc, #68]	; (80048a8 <SystemInit+0x6c>)
 8004862:	400a      	ands	r2, r1
 8004864:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004866:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <SystemInit+0x64>)
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <SystemInit+0x64>)
 800486c:	2101      	movs	r1, #1
 800486e:	438a      	bics	r2, r1
 8004870:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004872:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <SystemInit+0x64>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <SystemInit+0x64>)
 8004878:	490c      	ldr	r1, [pc, #48]	; (80048ac <SystemInit+0x70>)
 800487a:	400a      	ands	r2, r1
 800487c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800487e:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <SystemInit+0x64>)
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <SystemInit+0x64>)
 8004884:	490a      	ldr	r1, [pc, #40]	; (80048b0 <SystemInit+0x74>)
 8004886:	400a      	ands	r2, r1
 8004888:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800488a:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <SystemInit+0x64>)
 800488c:	2200      	movs	r2, #0
 800488e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004890:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <SystemInit+0x78>)
 8004892:	2280      	movs	r2, #128	; 0x80
 8004894:	0512      	lsls	r2, r2, #20
 8004896:	609a      	str	r2, [r3, #8]
#endif
}
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	40021000 	.word	0x40021000
 80048a4:	88ff400c 	.word	0x88ff400c
 80048a8:	fef6fff6 	.word	0xfef6fff6
 80048ac:	fffbffff 	.word	0xfffbffff
 80048b0:	ff02ffff 	.word	0xff02ffff
 80048b4:	e000ed00 	.word	0xe000ed00

080048b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80048b8:	480d      	ldr	r0, [pc, #52]	; (80048f0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80048ba:	4685      	mov	sp, r0


/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80048bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80048be:	e003      	b.n	80048c8 <LoopCopyDataInit>

080048c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80048c0:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80048c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80048c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80048c6:	3104      	adds	r1, #4

080048c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80048c8:	480b      	ldr	r0, [pc, #44]	; (80048f8 <LoopForever+0xa>)
  ldr  r3, =_edata
 80048ca:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <LoopForever+0xe>)
  adds  r2, r0, r1
 80048cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80048ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80048d0:	d3f6      	bcc.n	80048c0 <CopyDataInit>
  ldr  r2, =_sbss
 80048d2:	4a0b      	ldr	r2, [pc, #44]	; (8004900 <LoopForever+0x12>)
  b  LoopFillZerobss
 80048d4:	e002      	b.n	80048dc <LoopFillZerobss>

080048d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80048d6:	2300      	movs	r3, #0
  str  r3, [r2]
 80048d8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048da:	3204      	adds	r2, #4

080048dc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80048dc:	4b09      	ldr	r3, [pc, #36]	; (8004904 <LoopForever+0x16>)
  cmp  r2, r3
 80048de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80048e0:	d3f9      	bcc.n	80048d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80048e2:	f7ff ffab 	bl	800483c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048e6:	f002 f9cb 	bl	8006c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048ea:	f7fe f9cd 	bl	8002c88 <main>

080048ee <LoopForever>:

LoopForever:
    b LoopForever
 80048ee:	e7fe      	b.n	80048ee <LoopForever>
   ldr   r0, =_estack
 80048f0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80048f4:	08008de8 	.word	0x08008de8
  ldr  r0, =_sdata
 80048f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80048fc:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8004900:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8004904:	200003c0 	.word	0x200003c0

08004908 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004908:	e7fe      	b.n	8004908 <ADC1_COMP_IRQHandler>
	...

0800490c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004912:	1dfb      	adds	r3, r7, #7
 8004914:	2200      	movs	r2, #0
 8004916:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <HAL_Init+0x3c>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <HAL_Init+0x3c>)
 800491e:	2140      	movs	r1, #64	; 0x40
 8004920:	430a      	orrs	r2, r1
 8004922:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004924:	2000      	movs	r0, #0
 8004926:	f000 f811 	bl	800494c <HAL_InitTick>
 800492a:	1e03      	subs	r3, r0, #0
 800492c:	d003      	beq.n	8004936 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800492e:	1dfb      	adds	r3, r7, #7
 8004930:	2201      	movs	r2, #1
 8004932:	701a      	strb	r2, [r3, #0]
 8004934:	e001      	b.n	800493a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004936:	f7ff fcd1 	bl	80042dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800493a:	1dfb      	adds	r3, r7, #7
 800493c:	781b      	ldrb	r3, [r3, #0]
}
 800493e:	0018      	movs	r0, r3
 8004940:	46bd      	mov	sp, r7
 8004942:	b002      	add	sp, #8
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	40022000 	.word	0x40022000

0800494c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004954:	230f      	movs	r3, #15
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800495c:	4b0f      	ldr	r3, [pc, #60]	; (800499c <HAL_InitTick+0x50>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	23fa      	movs	r3, #250	; 0xfa
 8004962:	0099      	lsls	r1, r3, #2
 8004964:	0010      	movs	r0, r2
 8004966:	f7fb fbd9 	bl	800011c <__udivsi3>
 800496a:	0003      	movs	r3, r0
 800496c:	0018      	movs	r0, r3
 800496e:	f000 fbc2 	bl	80050f6 <HAL_SYSTICK_Config>
 8004972:	1e03      	subs	r3, r0, #0
 8004974:	d004      	beq.n	8004980 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8004976:	230f      	movs	r3, #15
 8004978:	18fb      	adds	r3, r7, r3
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	e006      	b.n	800498e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	2301      	movs	r3, #1
 8004984:	425b      	negs	r3, r3
 8004986:	2200      	movs	r2, #0
 8004988:	0018      	movs	r0, r3
 800498a:	f000 fb8f 	bl	80050ac <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800498e:	230f      	movs	r3, #15
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	781b      	ldrb	r3, [r3, #0]
}
 8004994:	0018      	movs	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	b004      	add	sp, #16
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000000 	.word	0x20000000

080049a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  uwTick++;
 80049a4:	4b03      	ldr	r3, [pc, #12]	; (80049b4 <HAL_IncTick+0x14>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	4b02      	ldr	r3, [pc, #8]	; (80049b4 <HAL_IncTick+0x14>)
 80049ac:	601a      	str	r2, [r3, #0]
}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	200003b8 	.word	0x200003b8

080049b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  return uwTick;
 80049bc:	4b02      	ldr	r3, [pc, #8]	; (80049c8 <HAL_GetTick+0x10>)
 80049be:	681b      	ldr	r3, [r3, #0]
}
 80049c0:	0018      	movs	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	200003b8 	.word	0x200003b8

080049cc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e159      	b.n	8004c92 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2250      	movs	r2, #80	; 0x50
 80049f0:	2100      	movs	r1, #0
 80049f2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	0018      	movs	r0, r3
 80049f8:	f7ff fc84 	bl	8004304 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	2210      	movs	r2, #16
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d005      	beq.n	8004a14 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2204      	movs	r2, #4
 8004a10:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004a12:	d00b      	beq.n	8004a2c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a18:	2210      	movs	r2, #16
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2250      	movs	r2, #80	; 0x50
 8004a24:	2100      	movs	r1, #0
 8004a26:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e132      	b.n	8004c92 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a30:	4a9a      	ldr	r2, [pc, #616]	; (8004c9c <HAL_ADC_Init+0x2d0>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	2202      	movs	r2, #2
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2203      	movs	r2, #3
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d108      	bne.n	8004a5c <HAL_ADC_Init+0x90>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2201      	movs	r2, #1
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_ADC_Init+0x90>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <HAL_ADC_Init+0x92>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d149      	bne.n	8004af6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	23c0      	movs	r3, #192	; 0xc0
 8004a68:	061b      	lsls	r3, r3, #24
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d00b      	beq.n	8004a86 <HAL_ADC_Init+0xba>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	2380      	movs	r3, #128	; 0x80
 8004a74:	05db      	lsls	r3, r3, #23
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d005      	beq.n	8004a86 <HAL_ADC_Init+0xba>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	2380      	movs	r3, #128	; 0x80
 8004a80:	061b      	lsls	r3, r3, #24
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d111      	bne.n	8004aaa <HAL_ADC_Init+0xde>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	0092      	lsls	r2, r2, #2
 8004a92:	0892      	lsrs	r2, r2, #2
 8004a94:	611a      	str	r2, [r3, #16]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6919      	ldr	r1, [r3, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	611a      	str	r2, [r3, #16]
 8004aa8:	e014      	b.n	8004ad4 <HAL_ADC_Init+0x108>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691a      	ldr	r2, [r3, #16]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	0092      	lsls	r2, r2, #2
 8004ab6:	0892      	lsrs	r2, r2, #2
 8004ab8:	611a      	str	r2, [r3, #16]
 8004aba:	4b79      	ldr	r3, [pc, #484]	; (8004ca0 <HAL_ADC_Init+0x2d4>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	4b78      	ldr	r3, [pc, #480]	; (8004ca0 <HAL_ADC_Init+0x2d4>)
 8004ac0:	4978      	ldr	r1, [pc, #480]	; (8004ca4 <HAL_ADC_Init+0x2d8>)
 8004ac2:	400a      	ands	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	4b76      	ldr	r3, [pc, #472]	; (8004ca0 <HAL_ADC_Init+0x2d4>)
 8004ac8:	6819      	ldr	r1, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	4b74      	ldr	r3, [pc, #464]	; (8004ca0 <HAL_ADC_Init+0x2d4>)
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2118      	movs	r1, #24
 8004ae0:	438a      	bics	r2, r1
 8004ae2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68d9      	ldr	r1, [r3, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004af6:	4b6a      	ldr	r3, [pc, #424]	; (8004ca0 <HAL_ADC_Init+0x2d4>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b69      	ldr	r3, [pc, #420]	; (8004ca0 <HAL_ADC_Init+0x2d4>)
 8004afc:	496a      	ldr	r1, [pc, #424]	; (8004ca8 <HAL_ADC_Init+0x2dc>)
 8004afe:	400a      	ands	r2, r1
 8004b00:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8004b02:	4b67      	ldr	r3, [pc, #412]	; (8004ca0 <HAL_ADC_Init+0x2d4>)
 8004b04:	6819      	ldr	r1, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0a:	065a      	lsls	r2, r3, #25
 8004b0c:	4b64      	ldr	r3, [pc, #400]	; (8004ca0 <HAL_ADC_Init+0x2d4>)
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	2380      	movs	r3, #128	; 0x80
 8004b1a:	055b      	lsls	r3, r3, #21
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	d108      	bne.n	8004b32 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2180      	movs	r1, #128	; 0x80
 8004b2c:	0549      	lsls	r1, r1, #21
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	495b      	ldr	r1, [pc, #364]	; (8004cac <HAL_ADC_Init+0x2e0>)
 8004b3e:	400a      	ands	r2, r1
 8004b40:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68d9      	ldr	r1, [r3, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d101      	bne.n	8004b58 <HAL_ADC_Init+0x18c>
 8004b54:	2304      	movs	r3, #4
 8004b56:	e000      	b.n	8004b5a <HAL_ADC_Init+0x18e>
 8004b58:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004b5a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2020      	movs	r0, #32
 8004b60:	5c1b      	ldrb	r3, [r3, r0]
 8004b62:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004b64:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	202c      	movs	r0, #44	; 0x2c
 8004b6a:	5c1b      	ldrb	r3, [r3, r0]
 8004b6c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004b6e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004b74:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004b7c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004b84:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b92:	23c2      	movs	r3, #194	; 0xc2
 8004b94:	33ff      	adds	r3, #255	; 0xff
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d00b      	beq.n	8004bb2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68d9      	ldr	r1, [r3, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2221      	movs	r2, #33	; 0x21
 8004bb6:	5c9b      	ldrb	r3, [r3, r2]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d11a      	bne.n	8004bf2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	5c9b      	ldrb	r3, [r3, r2]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2180      	movs	r1, #128	; 0x80
 8004bd2:	0249      	lsls	r1, r1, #9
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	60da      	str	r2, [r3, #12]
 8004bd8:	e00b      	b.n	8004bf2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	2220      	movs	r2, #32
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	2201      	movs	r2, #1
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d11f      	bne.n	8004c3a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	492a      	ldr	r1, [pc, #168]	; (8004cb0 <HAL_ADC_Init+0x2e4>)
 8004c06:	400a      	ands	r2, r1
 8004c08:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6919      	ldr	r1, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004c18:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8004c1e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691a      	ldr	r2, [r3, #16]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2101      	movs	r1, #1
 8004c34:	430a      	orrs	r2, r1
 8004c36:	611a      	str	r2, [r3, #16]
 8004c38:	e00e      	b.n	8004c58 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	2201      	movs	r2, #1
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d107      	bne.n	8004c58 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2101      	movs	r1, #1
 8004c54:	438a      	bics	r2, r1
 8004c56:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2107      	movs	r1, #7
 8004c64:	438a      	bics	r2, r1
 8004c66:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6959      	ldr	r1, [r3, #20]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c84:	2203      	movs	r2, #3
 8004c86:	4393      	bics	r3, r2
 8004c88:	2201      	movs	r2, #1
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	0018      	movs	r0, r3
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b002      	add	sp, #8
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	fffffefd 	.word	0xfffffefd
 8004ca0:	40012708 	.word	0x40012708
 8004ca4:	ffc3ffff 	.word	0xffc3ffff
 8004ca8:	fdffffff 	.word	0xfdffffff
 8004cac:	fffe0219 	.word	0xfffe0219
 8004cb0:	fffffc03 	.word	0xfffffc03

08004cb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2250      	movs	r2, #80	; 0x50
 8004cc2:	5c9b      	ldrb	r3, [r3, r2]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x18>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e085      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x124>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2250      	movs	r2, #80	; 0x50
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2204      	movs	r2, #4
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d00b      	beq.n	8004cf8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2250      	movs	r2, #80	; 0x50
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e06f      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4a38      	ldr	r2, [pc, #224]	; (8004de0 <HAL_ADC_ConfigChannel+0x12c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d035      	beq.n	8004d6e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	035b      	lsls	r3, r3, #13
 8004d0e:	0b5a      	lsrs	r2, r3, #13
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	02db      	lsls	r3, r3, #11
 8004d20:	4013      	ands	r3, r2
 8004d22:	d009      	beq.n	8004d38 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8004d24:	4b2f      	ldr	r3, [pc, #188]	; (8004de4 <HAL_ADC_ConfigChannel+0x130>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	4b2e      	ldr	r3, [pc, #184]	; (8004de4 <HAL_ADC_ConfigChannel+0x130>)
 8004d2a:	2180      	movs	r1, #128	; 0x80
 8004d2c:	0409      	lsls	r1, r1, #16
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004d32:	200a      	movs	r0, #10
 8004d34:	f000 f85e 	bl	8004df4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	2380      	movs	r3, #128	; 0x80
 8004d3e:	029b      	lsls	r3, r3, #10
 8004d40:	4013      	ands	r3, r2
 8004d42:	d006      	beq.n	8004d52 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004d44:	4b27      	ldr	r3, [pc, #156]	; (8004de4 <HAL_ADC_ConfigChannel+0x130>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	4b26      	ldr	r3, [pc, #152]	; (8004de4 <HAL_ADC_ConfigChannel+0x130>)
 8004d4a:	2180      	movs	r1, #128	; 0x80
 8004d4c:	03c9      	lsls	r1, r1, #15
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	2380      	movs	r3, #128	; 0x80
 8004d58:	025b      	lsls	r3, r3, #9
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	d037      	beq.n	8004dce <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8004d5e:	4b21      	ldr	r3, [pc, #132]	; (8004de4 <HAL_ADC_ConfigChannel+0x130>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	4b20      	ldr	r3, [pc, #128]	; (8004de4 <HAL_ADC_ConfigChannel+0x130>)
 8004d64:	2180      	movs	r1, #128	; 0x80
 8004d66:	0449      	lsls	r1, r1, #17
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	e02f      	b.n	8004dce <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	035b      	lsls	r3, r3, #13
 8004d7a:	0b5b      	lsrs	r3, r3, #13
 8004d7c:	43d9      	mvns	r1, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	400a      	ands	r2, r1
 8004d84:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	2380      	movs	r3, #128	; 0x80
 8004d8c:	02db      	lsls	r3, r3, #11
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d005      	beq.n	8004d9e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8004d92:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <HAL_ADC_ConfigChannel+0x130>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b13      	ldr	r3, [pc, #76]	; (8004de4 <HAL_ADC_ConfigChannel+0x130>)
 8004d98:	4913      	ldr	r1, [pc, #76]	; (8004de8 <HAL_ADC_ConfigChannel+0x134>)
 8004d9a:	400a      	ands	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	029b      	lsls	r3, r3, #10
 8004da6:	4013      	ands	r3, r2
 8004da8:	d005      	beq.n	8004db6 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004daa:	4b0e      	ldr	r3, [pc, #56]	; (8004de4 <HAL_ADC_ConfigChannel+0x130>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <HAL_ADC_ConfigChannel+0x130>)
 8004db0:	490e      	ldr	r1, [pc, #56]	; (8004dec <HAL_ADC_ConfigChannel+0x138>)
 8004db2:	400a      	ands	r2, r1
 8004db4:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	2380      	movs	r3, #128	; 0x80
 8004dbc:	025b      	lsls	r3, r3, #9
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	d005      	beq.n	8004dce <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <HAL_ADC_ConfigChannel+0x130>)
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <HAL_ADC_ConfigChannel+0x130>)
 8004dc8:	4909      	ldr	r1, [pc, #36]	; (8004df0 <HAL_ADC_ConfigChannel+0x13c>)
 8004dca:	400a      	ands	r2, r1
 8004dcc:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2250      	movs	r2, #80	; 0x50
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	0018      	movs	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b002      	add	sp, #8
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	00001001 	.word	0x00001001
 8004de4:	40012708 	.word	0x40012708
 8004de8:	ff7fffff 	.word	0xff7fffff
 8004dec:	ffbfffff 	.word	0xffbfffff
 8004df0:	feffffff 	.word	0xfeffffff

08004df4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <ADC_DelayMicroSecond+0x34>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	490a      	ldr	r1, [pc, #40]	; (8004e2c <ADC_DelayMicroSecond+0x38>)
 8004e02:	0018      	movs	r0, r3
 8004e04:	f7fb f98a 	bl	800011c <__udivsi3>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	001a      	movs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4353      	muls	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8004e12:	e002      	b.n	8004e1a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1f9      	bne.n	8004e14 <ADC_DelayMicroSecond+0x20>
  } 
}
 8004e20:	46c0      	nop			; (mov r8, r8)
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b004      	add	sp, #16
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	20000000 	.word	0x20000000
 8004e2c:	000f4240 	.word	0x000f4240

08004e30 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e3a:	2317      	movs	r3, #23
 8004e3c:	18fb      	adds	r3, r7, r3
 8004e3e:	2200      	movs	r2, #0
 8004e40:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2250      	movs	r2, #80	; 0x50
 8004e4e:	5c9b      	ldrb	r3, [r3, r2]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_ADCEx_Calibration_Start+0x28>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e07a      	b.n	8004f4e <HAL_ADCEx_Calibration_Start+0x11e>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2250      	movs	r2, #80	; 0x50
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2203      	movs	r2, #3
 8004e68:	4013      	ands	r3, r2
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d108      	bne.n	8004e80 <HAL_ADCEx_Calibration_Start+0x50>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2201      	movs	r2, #1
 8004e76:	4013      	ands	r3, r2
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_ADCEx_Calibration_Start+0x50>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <HAL_ADCEx_Calibration_Start+0x52>
 8004e80:	2300      	movs	r3, #0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d152      	bne.n	8004f2c <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	4a33      	ldr	r2, [pc, #204]	; (8004f58 <HAL_ADCEx_Calibration_Start+0x128>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2202      	movs	r2, #2
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	2203      	movs	r2, #3
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2103      	movs	r1, #3
 8004eae:	438a      	bics	r2, r1
 8004eb0:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2180      	movs	r1, #128	; 0x80
 8004ebe:	0609      	lsls	r1, r1, #24
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004ec4:	f7ff fd78 	bl	80049b8 <HAL_GetTick>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004ecc:	e014      	b.n	8004ef8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004ece:	f7ff fd73 	bl	80049b8 <HAL_GetTick>
 8004ed2:	0002      	movs	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b0a      	cmp	r3, #10
 8004eda:	d90d      	bls.n	8004ef8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee0:	2212      	movs	r2, #18
 8004ee2:	4393      	bics	r3, r2
 8004ee4:	2210      	movs	r2, #16
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2250      	movs	r2, #80	; 0x50
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e02a      	b.n	8004f4e <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	0fdb      	lsrs	r3, r3, #31
 8004f00:	07da      	lsls	r2, r3, #31
 8004f02:	2380      	movs	r3, #128	; 0x80
 8004f04:	061b      	lsls	r3, r3, #24
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d0e1      	beq.n	8004ece <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68d9      	ldr	r1, [r3, #12]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1e:	2203      	movs	r2, #3
 8004f20:	4393      	bics	r3, r2
 8004f22:	2201      	movs	r2, #1
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54
 8004f2a:	e009      	b.n	8004f40 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f30:	2220      	movs	r2, #32
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8004f38:	2317      	movs	r3, #23
 8004f3a:	18fb      	adds	r3, r7, r3
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2250      	movs	r2, #80	; 0x50
 8004f44:	2100      	movs	r1, #0
 8004f46:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004f48:	2317      	movs	r3, #23
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	781b      	ldrb	r3, [r3, #0]
}
 8004f4e:	0018      	movs	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b006      	add	sp, #24
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	fffffefd 	.word	0xfffffefd

08004f5c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	0002      	movs	r2, r0
 8004f64:	1dfb      	adds	r3, r7, #7
 8004f66:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004f68:	1dfb      	adds	r3, r7, #7
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	001a      	movs	r2, r3
 8004f6e:	231f      	movs	r3, #31
 8004f70:	401a      	ands	r2, r3
 8004f72:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <NVIC_EnableIRQ+0x28>)
 8004f74:	2101      	movs	r1, #1
 8004f76:	4091      	lsls	r1, r2
 8004f78:	000a      	movs	r2, r1
 8004f7a:	601a      	str	r2, [r3, #0]
}
 8004f7c:	46c0      	nop			; (mov r8, r8)
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b002      	add	sp, #8
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	e000e100 	.word	0xe000e100

08004f88 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f88:	b590      	push	{r4, r7, lr}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	0002      	movs	r2, r0
 8004f90:	6039      	str	r1, [r7, #0]
 8004f92:	1dfb      	adds	r3, r7, #7
 8004f94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8004f96:	1dfb      	adds	r3, r7, #7
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f9c:	d932      	bls.n	8005004 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f9e:	4a2f      	ldr	r2, [pc, #188]	; (800505c <NVIC_SetPriority+0xd4>)
 8004fa0:	1dfb      	adds	r3, r7, #7
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	0019      	movs	r1, r3
 8004fa6:	230f      	movs	r3, #15
 8004fa8:	400b      	ands	r3, r1
 8004faa:	3b08      	subs	r3, #8
 8004fac:	089b      	lsrs	r3, r3, #2
 8004fae:	3306      	adds	r3, #6
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	18d3      	adds	r3, r2, r3
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	1dfa      	adds	r2, r7, #7
 8004fba:	7812      	ldrb	r2, [r2, #0]
 8004fbc:	0011      	movs	r1, r2
 8004fbe:	2203      	movs	r2, #3
 8004fc0:	400a      	ands	r2, r1
 8004fc2:	00d2      	lsls	r2, r2, #3
 8004fc4:	21ff      	movs	r1, #255	; 0xff
 8004fc6:	4091      	lsls	r1, r2
 8004fc8:	000a      	movs	r2, r1
 8004fca:	43d2      	mvns	r2, r2
 8004fcc:	401a      	ands	r2, r3
 8004fce:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	019b      	lsls	r3, r3, #6
 8004fd4:	22ff      	movs	r2, #255	; 0xff
 8004fd6:	401a      	ands	r2, r3
 8004fd8:	1dfb      	adds	r3, r7, #7
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	0018      	movs	r0, r3
 8004fde:	2303      	movs	r3, #3
 8004fe0:	4003      	ands	r3, r0
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fe6:	481d      	ldr	r0, [pc, #116]	; (800505c <NVIC_SetPriority+0xd4>)
 8004fe8:	1dfb      	adds	r3, r7, #7
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	001c      	movs	r4, r3
 8004fee:	230f      	movs	r3, #15
 8004ff0:	4023      	ands	r3, r4
 8004ff2:	3b08      	subs	r3, #8
 8004ff4:	089b      	lsrs	r3, r3, #2
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	3306      	adds	r3, #6
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	18c3      	adds	r3, r0, r3
 8004ffe:	3304      	adds	r3, #4
 8005000:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005002:	e027      	b.n	8005054 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005004:	4a16      	ldr	r2, [pc, #88]	; (8005060 <NVIC_SetPriority+0xd8>)
 8005006:	1dfb      	adds	r3, r7, #7
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	b25b      	sxtb	r3, r3
 800500c:	089b      	lsrs	r3, r3, #2
 800500e:	33c0      	adds	r3, #192	; 0xc0
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	589b      	ldr	r3, [r3, r2]
 8005014:	1dfa      	adds	r2, r7, #7
 8005016:	7812      	ldrb	r2, [r2, #0]
 8005018:	0011      	movs	r1, r2
 800501a:	2203      	movs	r2, #3
 800501c:	400a      	ands	r2, r1
 800501e:	00d2      	lsls	r2, r2, #3
 8005020:	21ff      	movs	r1, #255	; 0xff
 8005022:	4091      	lsls	r1, r2
 8005024:	000a      	movs	r2, r1
 8005026:	43d2      	mvns	r2, r2
 8005028:	401a      	ands	r2, r3
 800502a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	019b      	lsls	r3, r3, #6
 8005030:	22ff      	movs	r2, #255	; 0xff
 8005032:	401a      	ands	r2, r3
 8005034:	1dfb      	adds	r3, r7, #7
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	0018      	movs	r0, r3
 800503a:	2303      	movs	r3, #3
 800503c:	4003      	ands	r3, r0
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005042:	4807      	ldr	r0, [pc, #28]	; (8005060 <NVIC_SetPriority+0xd8>)
 8005044:	1dfb      	adds	r3, r7, #7
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	b25b      	sxtb	r3, r3
 800504a:	089b      	lsrs	r3, r3, #2
 800504c:	430a      	orrs	r2, r1
 800504e:	33c0      	adds	r3, #192	; 0xc0
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	501a      	str	r2, [r3, r0]
}
 8005054:	46c0      	nop			; (mov r8, r8)
 8005056:	46bd      	mov	sp, r7
 8005058:	b003      	add	sp, #12
 800505a:	bd90      	pop	{r4, r7, pc}
 800505c:	e000ed00 	.word	0xe000ed00
 8005060:	e000e100 	.word	0xe000e100

08005064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3b01      	subs	r3, #1
 8005070:	4a0c      	ldr	r2, [pc, #48]	; (80050a4 <SysTick_Config+0x40>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d901      	bls.n	800507a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005076:	2301      	movs	r3, #1
 8005078:	e010      	b.n	800509c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800507a:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <SysTick_Config+0x44>)
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	3a01      	subs	r2, #1
 8005080:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005082:	2301      	movs	r3, #1
 8005084:	425b      	negs	r3, r3
 8005086:	2103      	movs	r1, #3
 8005088:	0018      	movs	r0, r3
 800508a:	f7ff ff7d 	bl	8004f88 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800508e:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <SysTick_Config+0x44>)
 8005090:	2200      	movs	r2, #0
 8005092:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005094:	4b04      	ldr	r3, [pc, #16]	; (80050a8 <SysTick_Config+0x44>)
 8005096:	2207      	movs	r2, #7
 8005098:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800509a:	2300      	movs	r3, #0
}
 800509c:	0018      	movs	r0, r3
 800509e:	46bd      	mov	sp, r7
 80050a0:	b002      	add	sp, #8
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	00ffffff 	.word	0x00ffffff
 80050a8:	e000e010 	.word	0xe000e010

080050ac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	210f      	movs	r1, #15
 80050b8:	187b      	adds	r3, r7, r1
 80050ba:	1c02      	adds	r2, r0, #0
 80050bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	187b      	adds	r3, r7, r1
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	b25b      	sxtb	r3, r3
 80050c6:	0011      	movs	r1, r2
 80050c8:	0018      	movs	r0, r3
 80050ca:	f7ff ff5d 	bl	8004f88 <NVIC_SetPriority>
}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b004      	add	sp, #16
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	0002      	movs	r2, r0
 80050de:	1dfb      	adds	r3, r7, #7
 80050e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050e2:	1dfb      	adds	r3, r7, #7
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	b25b      	sxtb	r3, r3
 80050e8:	0018      	movs	r0, r3
 80050ea:	f7ff ff37 	bl	8004f5c <NVIC_EnableIRQ>
}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b002      	add	sp, #8
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	0018      	movs	r0, r3
 8005102:	f7ff ffaf 	bl	8005064 <SysTick_Config>
 8005106:	0003      	movs	r3, r0
}
 8005108:	0018      	movs	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	b002      	add	sp, #8
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005122:	2300      	movs	r3, #0
 8005124:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005126:	e155      	b.n	80053d4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2101      	movs	r1, #1
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4091      	lsls	r1, r2
 8005132:	000a      	movs	r2, r1
 8005134:	4013      	ands	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d100      	bne.n	8005140 <HAL_GPIO_Init+0x30>
 800513e:	e146      	b.n	80053ce <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d003      	beq.n	8005150 <HAL_GPIO_Init+0x40>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b12      	cmp	r3, #18
 800514e:	d123      	bne.n	8005198 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	08da      	lsrs	r2, r3, #3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3208      	adds	r2, #8
 8005158:	0092      	lsls	r2, r2, #2
 800515a:	58d3      	ldr	r3, [r2, r3]
 800515c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2207      	movs	r2, #7
 8005162:	4013      	ands	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	220f      	movs	r2, #15
 8005168:	409a      	lsls	r2, r3
 800516a:	0013      	movs	r3, r2
 800516c:	43da      	mvns	r2, r3
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	4013      	ands	r3, r2
 8005172:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2107      	movs	r1, #7
 800517c:	400b      	ands	r3, r1
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	409a      	lsls	r2, r3
 8005182:	0013      	movs	r3, r2
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	08da      	lsrs	r2, r3, #3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3208      	adds	r2, #8
 8005192:	0092      	lsls	r2, r2, #2
 8005194:	6939      	ldr	r1, [r7, #16]
 8005196:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d00b      	beq.n	80051b8 <HAL_GPIO_Init+0xa8>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d007      	beq.n	80051b8 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051ac:	2b11      	cmp	r3, #17
 80051ae:	d003      	beq.n	80051b8 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b12      	cmp	r3, #18
 80051b6:	d130      	bne.n	800521a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	2203      	movs	r2, #3
 80051c4:	409a      	lsls	r2, r3
 80051c6:	0013      	movs	r3, r2
 80051c8:	43da      	mvns	r2, r3
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4013      	ands	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	409a      	lsls	r2, r3
 80051da:	0013      	movs	r3, r2
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051ee:	2201      	movs	r2, #1
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	409a      	lsls	r2, r3
 80051f4:	0013      	movs	r3, r2
 80051f6:	43da      	mvns	r2, r3
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	4013      	ands	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	091b      	lsrs	r3, r3, #4
 8005204:	2201      	movs	r2, #1
 8005206:	401a      	ands	r2, r3
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	409a      	lsls	r2, r3
 800520c:	0013      	movs	r3, r2
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	2203      	movs	r2, #3
 8005226:	409a      	lsls	r2, r3
 8005228:	0013      	movs	r3, r2
 800522a:	43da      	mvns	r2, r3
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4013      	ands	r3, r2
 8005230:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2203      	movs	r2, #3
 8005238:	401a      	ands	r2, r3
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	409a      	lsls	r2, r3
 8005240:	0013      	movs	r3, r2
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	2203      	movs	r2, #3
 800525a:	409a      	lsls	r2, r3
 800525c:	0013      	movs	r3, r2
 800525e:	43da      	mvns	r2, r3
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	4013      	ands	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	409a      	lsls	r2, r3
 8005270:	0013      	movs	r3, r2
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	2380      	movs	r3, #128	; 0x80
 8005284:	055b      	lsls	r3, r3, #21
 8005286:	4013      	ands	r3, r2
 8005288:	d100      	bne.n	800528c <HAL_GPIO_Init+0x17c>
 800528a:	e0a0      	b.n	80053ce <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800528c:	4b57      	ldr	r3, [pc, #348]	; (80053ec <HAL_GPIO_Init+0x2dc>)
 800528e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005290:	4b56      	ldr	r3, [pc, #344]	; (80053ec <HAL_GPIO_Init+0x2dc>)
 8005292:	2101      	movs	r1, #1
 8005294:	430a      	orrs	r2, r1
 8005296:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8005298:	4a55      	ldr	r2, [pc, #340]	; (80053f0 <HAL_GPIO_Init+0x2e0>)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	089b      	lsrs	r3, r3, #2
 800529e:	3302      	adds	r3, #2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	589b      	ldr	r3, [r3, r2]
 80052a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2203      	movs	r2, #3
 80052aa:	4013      	ands	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	220f      	movs	r2, #15
 80052b0:	409a      	lsls	r2, r3
 80052b2:	0013      	movs	r3, r2
 80052b4:	43da      	mvns	r2, r3
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4013      	ands	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	23a0      	movs	r3, #160	; 0xa0
 80052c0:	05db      	lsls	r3, r3, #23
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d01f      	beq.n	8005306 <HAL_GPIO_Init+0x1f6>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a4a      	ldr	r2, [pc, #296]	; (80053f4 <HAL_GPIO_Init+0x2e4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d019      	beq.n	8005302 <HAL_GPIO_Init+0x1f2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a49      	ldr	r2, [pc, #292]	; (80053f8 <HAL_GPIO_Init+0x2e8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <HAL_GPIO_Init+0x1ee>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a48      	ldr	r2, [pc, #288]	; (80053fc <HAL_GPIO_Init+0x2ec>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00d      	beq.n	80052fa <HAL_GPIO_Init+0x1ea>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a47      	ldr	r2, [pc, #284]	; (8005400 <HAL_GPIO_Init+0x2f0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d007      	beq.n	80052f6 <HAL_GPIO_Init+0x1e6>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a46      	ldr	r2, [pc, #280]	; (8005404 <HAL_GPIO_Init+0x2f4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d101      	bne.n	80052f2 <HAL_GPIO_Init+0x1e2>
 80052ee:	2305      	movs	r3, #5
 80052f0:	e00a      	b.n	8005308 <HAL_GPIO_Init+0x1f8>
 80052f2:	2306      	movs	r3, #6
 80052f4:	e008      	b.n	8005308 <HAL_GPIO_Init+0x1f8>
 80052f6:	2304      	movs	r3, #4
 80052f8:	e006      	b.n	8005308 <HAL_GPIO_Init+0x1f8>
 80052fa:	2303      	movs	r3, #3
 80052fc:	e004      	b.n	8005308 <HAL_GPIO_Init+0x1f8>
 80052fe:	2302      	movs	r3, #2
 8005300:	e002      	b.n	8005308 <HAL_GPIO_Init+0x1f8>
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <HAL_GPIO_Init+0x1f8>
 8005306:	2300      	movs	r3, #0
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	2103      	movs	r1, #3
 800530c:	400a      	ands	r2, r1
 800530e:	0092      	lsls	r2, r2, #2
 8005310:	4093      	lsls	r3, r2
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005318:	4935      	ldr	r1, [pc, #212]	; (80053f0 <HAL_GPIO_Init+0x2e0>)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	089b      	lsrs	r3, r3, #2
 800531e:	3302      	adds	r3, #2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005326:	4b38      	ldr	r3, [pc, #224]	; (8005408 <HAL_GPIO_Init+0x2f8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	43da      	mvns	r2, r3
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4013      	ands	r3, r2
 8005334:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	2380      	movs	r3, #128	; 0x80
 800533c:	025b      	lsls	r3, r3, #9
 800533e:	4013      	ands	r3, r2
 8005340:	d003      	beq.n	800534a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800534a:	4b2f      	ldr	r3, [pc, #188]	; (8005408 <HAL_GPIO_Init+0x2f8>)
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005350:	4b2d      	ldr	r3, [pc, #180]	; (8005408 <HAL_GPIO_Init+0x2f8>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	43da      	mvns	r2, r3
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4013      	ands	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	2380      	movs	r3, #128	; 0x80
 8005366:	029b      	lsls	r3, r3, #10
 8005368:	4013      	ands	r3, r2
 800536a:	d003      	beq.n	8005374 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005374:	4b24      	ldr	r3, [pc, #144]	; (8005408 <HAL_GPIO_Init+0x2f8>)
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800537a:	4b23      	ldr	r3, [pc, #140]	; (8005408 <HAL_GPIO_Init+0x2f8>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	43da      	mvns	r2, r3
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4013      	ands	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	2380      	movs	r3, #128	; 0x80
 8005390:	035b      	lsls	r3, r3, #13
 8005392:	4013      	ands	r3, r2
 8005394:	d003      	beq.n	800539e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800539e:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <HAL_GPIO_Init+0x2f8>)
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80053a4:	4b18      	ldr	r3, [pc, #96]	; (8005408 <HAL_GPIO_Init+0x2f8>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	43da      	mvns	r2, r3
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	4013      	ands	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	2380      	movs	r3, #128	; 0x80
 80053ba:	039b      	lsls	r3, r3, #14
 80053bc:	4013      	ands	r3, r2
 80053be:	d003      	beq.n	80053c8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80053c8:	4b0f      	ldr	r3, [pc, #60]	; (8005408 <HAL_GPIO_Init+0x2f8>)
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	3301      	adds	r3, #1
 80053d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	40da      	lsrs	r2, r3
 80053dc:	1e13      	subs	r3, r2, #0
 80053de:	d000      	beq.n	80053e2 <HAL_GPIO_Init+0x2d2>
 80053e0:	e6a2      	b.n	8005128 <HAL_GPIO_Init+0x18>
  }
}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	46bd      	mov	sp, r7
 80053e6:	b006      	add	sp, #24
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	40021000 	.word	0x40021000
 80053f0:	40010000 	.word	0x40010000
 80053f4:	50000400 	.word	0x50000400
 80053f8:	50000800 	.word	0x50000800
 80053fc:	50000c00 	.word	0x50000c00
 8005400:	50001000 	.word	0x50001000
 8005404:	50001c00 	.word	0x50001c00
 8005408:	40010400 	.word	0x40010400

0800540c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	000a      	movs	r2, r1
 8005416:	1cbb      	adds	r3, r7, #2
 8005418:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	1cba      	adds	r2, r7, #2
 8005420:	8812      	ldrh	r2, [r2, #0]
 8005422:	4013      	ands	r3, r2
 8005424:	d004      	beq.n	8005430 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005426:	230f      	movs	r3, #15
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	2201      	movs	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	e003      	b.n	8005438 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005430:	230f      	movs	r3, #15
 8005432:	18fb      	adds	r3, r7, r3
 8005434:	2200      	movs	r2, #0
 8005436:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005438:	230f      	movs	r3, #15
 800543a:	18fb      	adds	r3, r7, r3
 800543c:	781b      	ldrb	r3, [r3, #0]
}
 800543e:	0018      	movs	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	b004      	add	sp, #16
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b082      	sub	sp, #8
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	0008      	movs	r0, r1
 8005450:	0011      	movs	r1, r2
 8005452:	1cbb      	adds	r3, r7, #2
 8005454:	1c02      	adds	r2, r0, #0
 8005456:	801a      	strh	r2, [r3, #0]
 8005458:	1c7b      	adds	r3, r7, #1
 800545a:	1c0a      	adds	r2, r1, #0
 800545c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800545e:	1c7b      	adds	r3, r7, #1
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d004      	beq.n	8005470 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005466:	1cbb      	adds	r3, r7, #2
 8005468:	881a      	ldrh	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800546e:	e003      	b.n	8005478 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005470:	1cbb      	adds	r3, r7, #2
 8005472:	881a      	ldrh	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005478:	46c0      	nop			; (mov r8, r8)
 800547a:	46bd      	mov	sp, r7
 800547c:	b002      	add	sp, #8
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	0002      	movs	r2, r0
 8005488:	1dbb      	adds	r3, r7, #6
 800548a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	1dba      	adds	r2, r7, #6
 8005492:	8812      	ldrh	r2, [r2, #0]
 8005494:	4013      	ands	r3, r2
 8005496:	d008      	beq.n	80054aa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005498:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800549a:	1dba      	adds	r2, r7, #6
 800549c:	8812      	ldrh	r2, [r2, #0]
 800549e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054a0:	1dbb      	adds	r3, r7, #6
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	0018      	movs	r0, r3
 80054a6:	f000 f807 	bl	80054b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b002      	add	sp, #8
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	40010400 	.word	0x40010400

080054b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	0002      	movs	r2, r0
 80054c0:	1dbb      	adds	r3, r7, #6
 80054c2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80054c4:	46c0      	nop			; (mov r8, r8)
 80054c6:	46bd      	mov	sp, r7
 80054c8:	b002      	add	sp, #8
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054cc:	b5b0      	push	{r4, r5, r7, lr}
 80054ce:	b08a      	sub	sp, #40	; 0x28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d102      	bne.n	80054e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f000 fbbc 	bl	8005c58 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054e0:	4bc8      	ldr	r3, [pc, #800]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	220c      	movs	r2, #12
 80054e6:	4013      	ands	r3, r2
 80054e8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054ea:	4bc6      	ldr	r3, [pc, #792]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	2380      	movs	r3, #128	; 0x80
 80054f0:	025b      	lsls	r3, r3, #9
 80054f2:	4013      	ands	r3, r2
 80054f4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2201      	movs	r2, #1
 80054fc:	4013      	ands	r3, r2
 80054fe:	d100      	bne.n	8005502 <HAL_RCC_OscConfig+0x36>
 8005500:	e07e      	b.n	8005600 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d007      	beq.n	8005518 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	2b0c      	cmp	r3, #12
 800550c:	d112      	bne.n	8005534 <HAL_RCC_OscConfig+0x68>
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	025b      	lsls	r3, r3, #9
 8005514:	429a      	cmp	r2, r3
 8005516:	d10d      	bne.n	8005534 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005518:	4bba      	ldr	r3, [pc, #744]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	2380      	movs	r3, #128	; 0x80
 800551e:	029b      	lsls	r3, r3, #10
 8005520:	4013      	ands	r3, r2
 8005522:	d100      	bne.n	8005526 <HAL_RCC_OscConfig+0x5a>
 8005524:	e06b      	b.n	80055fe <HAL_RCC_OscConfig+0x132>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d167      	bne.n	80055fe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	f000 fb92 	bl	8005c58 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	2380      	movs	r3, #128	; 0x80
 800553a:	025b      	lsls	r3, r3, #9
 800553c:	429a      	cmp	r2, r3
 800553e:	d107      	bne.n	8005550 <HAL_RCC_OscConfig+0x84>
 8005540:	4bb0      	ldr	r3, [pc, #704]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	4baf      	ldr	r3, [pc, #700]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005546:	2180      	movs	r1, #128	; 0x80
 8005548:	0249      	lsls	r1, r1, #9
 800554a:	430a      	orrs	r2, r1
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e027      	b.n	80055a0 <HAL_RCC_OscConfig+0xd4>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	23a0      	movs	r3, #160	; 0xa0
 8005556:	02db      	lsls	r3, r3, #11
 8005558:	429a      	cmp	r2, r3
 800555a:	d10e      	bne.n	800557a <HAL_RCC_OscConfig+0xae>
 800555c:	4ba9      	ldr	r3, [pc, #676]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	4ba8      	ldr	r3, [pc, #672]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005562:	2180      	movs	r1, #128	; 0x80
 8005564:	02c9      	lsls	r1, r1, #11
 8005566:	430a      	orrs	r2, r1
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	4ba6      	ldr	r3, [pc, #664]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	4ba5      	ldr	r3, [pc, #660]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005570:	2180      	movs	r1, #128	; 0x80
 8005572:	0249      	lsls	r1, r1, #9
 8005574:	430a      	orrs	r2, r1
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	e012      	b.n	80055a0 <HAL_RCC_OscConfig+0xd4>
 800557a:	4ba2      	ldr	r3, [pc, #648]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4ba1      	ldr	r3, [pc, #644]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005580:	49a1      	ldr	r1, [pc, #644]	; (8005808 <HAL_RCC_OscConfig+0x33c>)
 8005582:	400a      	ands	r2, r1
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	4b9f      	ldr	r3, [pc, #636]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	2380      	movs	r3, #128	; 0x80
 800558c:	025b      	lsls	r3, r3, #9
 800558e:	4013      	ands	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4b9b      	ldr	r3, [pc, #620]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	4b9a      	ldr	r3, [pc, #616]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 800559a:	499c      	ldr	r1, [pc, #624]	; (800580c <HAL_RCC_OscConfig+0x340>)
 800559c:	400a      	ands	r2, r1
 800559e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d015      	beq.n	80055d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a8:	f7ff fa06 	bl	80049b8 <HAL_GetTick>
 80055ac:	0003      	movs	r3, r0
 80055ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055b0:	e009      	b.n	80055c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055b2:	f7ff fa01 	bl	80049b8 <HAL_GetTick>
 80055b6:	0002      	movs	r2, r0
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b64      	cmp	r3, #100	; 0x64
 80055be:	d902      	bls.n	80055c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	f000 fb49 	bl	8005c58 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055c6:	4b8f      	ldr	r3, [pc, #572]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	2380      	movs	r3, #128	; 0x80
 80055cc:	029b      	lsls	r3, r3, #10
 80055ce:	4013      	ands	r3, r2
 80055d0:	d0ef      	beq.n	80055b2 <HAL_RCC_OscConfig+0xe6>
 80055d2:	e015      	b.n	8005600 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d4:	f7ff f9f0 	bl	80049b8 <HAL_GetTick>
 80055d8:	0003      	movs	r3, r0
 80055da:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055de:	f7ff f9eb 	bl	80049b8 <HAL_GetTick>
 80055e2:	0002      	movs	r2, r0
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b64      	cmp	r3, #100	; 0x64
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e333      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055f0:	4b84      	ldr	r3, [pc, #528]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	2380      	movs	r3, #128	; 0x80
 80055f6:	029b      	lsls	r3, r3, #10
 80055f8:	4013      	ands	r3, r2
 80055fa:	d1f0      	bne.n	80055de <HAL_RCC_OscConfig+0x112>
 80055fc:	e000      	b.n	8005600 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2202      	movs	r2, #2
 8005606:	4013      	ands	r3, r2
 8005608:	d100      	bne.n	800560c <HAL_RCC_OscConfig+0x140>
 800560a:	e098      	b.n	800573e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	2220      	movs	r2, #32
 8005616:	4013      	ands	r3, r2
 8005618:	d009      	beq.n	800562e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800561a:	4b7a      	ldr	r3, [pc, #488]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	4b79      	ldr	r3, [pc, #484]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005620:	2120      	movs	r1, #32
 8005622:	430a      	orrs	r2, r1
 8005624:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	2220      	movs	r2, #32
 800562a:	4393      	bics	r3, r2
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	2b04      	cmp	r3, #4
 8005632:	d005      	beq.n	8005640 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	2b0c      	cmp	r3, #12
 8005638:	d13d      	bne.n	80056b6 <HAL_RCC_OscConfig+0x1ea>
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d13a      	bne.n	80056b6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005640:	4b70      	ldr	r3, [pc, #448]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2204      	movs	r2, #4
 8005646:	4013      	ands	r3, r2
 8005648:	d004      	beq.n	8005654 <HAL_RCC_OscConfig+0x188>
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e301      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005654:	4b6b      	ldr	r3, [pc, #428]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	4a6d      	ldr	r2, [pc, #436]	; (8005810 <HAL_RCC_OscConfig+0x344>)
 800565a:	4013      	ands	r3, r2
 800565c:	0019      	movs	r1, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	021a      	lsls	r2, r3, #8
 8005664:	4b67      	ldr	r3, [pc, #412]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800566a:	4b66      	ldr	r3, [pc, #408]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2209      	movs	r2, #9
 8005670:	4393      	bics	r3, r2
 8005672:	0019      	movs	r1, r3
 8005674:	4b63      	ldr	r3, [pc, #396]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005678:	430a      	orrs	r2, r1
 800567a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800567c:	f000 fc20 	bl	8005ec0 <HAL_RCC_GetSysClockFreq>
 8005680:	0001      	movs	r1, r0
 8005682:	4b60      	ldr	r3, [pc, #384]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	091b      	lsrs	r3, r3, #4
 8005688:	220f      	movs	r2, #15
 800568a:	4013      	ands	r3, r2
 800568c:	4a61      	ldr	r2, [pc, #388]	; (8005814 <HAL_RCC_OscConfig+0x348>)
 800568e:	5cd3      	ldrb	r3, [r2, r3]
 8005690:	000a      	movs	r2, r1
 8005692:	40da      	lsrs	r2, r3
 8005694:	4b60      	ldr	r3, [pc, #384]	; (8005818 <HAL_RCC_OscConfig+0x34c>)
 8005696:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8005698:	2513      	movs	r5, #19
 800569a:	197c      	adds	r4, r7, r5
 800569c:	2000      	movs	r0, #0
 800569e:	f7ff f955 	bl	800494c <HAL_InitTick>
 80056a2:	0003      	movs	r3, r0
 80056a4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80056a6:	197b      	adds	r3, r7, r5
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d047      	beq.n	800573e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80056ae:	2313      	movs	r3, #19
 80056b0:	18fb      	adds	r3, r7, r3
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	e2d0      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d027      	beq.n	800570c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80056bc:	4b51      	ldr	r3, [pc, #324]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2209      	movs	r2, #9
 80056c2:	4393      	bics	r3, r2
 80056c4:	0019      	movs	r1, r3
 80056c6:	4b4f      	ldr	r3, [pc, #316]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 80056c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ca:	430a      	orrs	r2, r1
 80056cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ce:	f7ff f973 	bl	80049b8 <HAL_GetTick>
 80056d2:	0003      	movs	r3, r0
 80056d4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056d8:	f7ff f96e 	bl	80049b8 <HAL_GetTick>
 80056dc:	0002      	movs	r2, r0
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e2b6      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056ea:	4b46      	ldr	r3, [pc, #280]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2204      	movs	r2, #4
 80056f0:	4013      	ands	r3, r2
 80056f2:	d0f1      	beq.n	80056d8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f4:	4b43      	ldr	r3, [pc, #268]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	4a45      	ldr	r2, [pc, #276]	; (8005810 <HAL_RCC_OscConfig+0x344>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	0019      	movs	r1, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	021a      	lsls	r2, r3, #8
 8005704:	4b3f      	ldr	r3, [pc, #252]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005706:	430a      	orrs	r2, r1
 8005708:	605a      	str	r2, [r3, #4]
 800570a:	e018      	b.n	800573e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800570c:	4b3d      	ldr	r3, [pc, #244]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	4b3c      	ldr	r3, [pc, #240]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005712:	2101      	movs	r1, #1
 8005714:	438a      	bics	r2, r1
 8005716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005718:	f7ff f94e 	bl	80049b8 <HAL_GetTick>
 800571c:	0003      	movs	r3, r0
 800571e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005722:	f7ff f949 	bl	80049b8 <HAL_GetTick>
 8005726:	0002      	movs	r2, r0
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e291      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005734:	4b33      	ldr	r3, [pc, #204]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2204      	movs	r2, #4
 800573a:	4013      	ands	r3, r2
 800573c:	d1f1      	bne.n	8005722 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2210      	movs	r2, #16
 8005744:	4013      	ands	r3, r2
 8005746:	d100      	bne.n	800574a <HAL_RCC_OscConfig+0x27e>
 8005748:	e09f      	b.n	800588a <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d13f      	bne.n	80057d0 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005750:	4b2c      	ldr	r3, [pc, #176]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	2380      	movs	r3, #128	; 0x80
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4013      	ands	r3, r2
 800575a:	d005      	beq.n	8005768 <HAL_RCC_OscConfig+0x29c>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e277      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005768:	4b26      	ldr	r3, [pc, #152]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	4a2b      	ldr	r2, [pc, #172]	; (800581c <HAL_RCC_OscConfig+0x350>)
 800576e:	4013      	ands	r3, r2
 8005770:	0019      	movs	r1, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005776:	4b23      	ldr	r3, [pc, #140]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 8005778:	430a      	orrs	r2, r1
 800577a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800577c:	4b21      	ldr	r3, [pc, #132]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	0a19      	lsrs	r1, r3, #8
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	061a      	lsls	r2, r3, #24
 800578a:	4b1e      	ldr	r3, [pc, #120]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 800578c:	430a      	orrs	r2, r1
 800578e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	0b5b      	lsrs	r3, r3, #13
 8005796:	3301      	adds	r3, #1
 8005798:	2280      	movs	r2, #128	; 0x80
 800579a:	0212      	lsls	r2, r2, #8
 800579c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800579e:	4b19      	ldr	r3, [pc, #100]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	091b      	lsrs	r3, r3, #4
 80057a4:	210f      	movs	r1, #15
 80057a6:	400b      	ands	r3, r1
 80057a8:	491a      	ldr	r1, [pc, #104]	; (8005814 <HAL_RCC_OscConfig+0x348>)
 80057aa:	5ccb      	ldrb	r3, [r1, r3]
 80057ac:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80057ae:	4b1a      	ldr	r3, [pc, #104]	; (8005818 <HAL_RCC_OscConfig+0x34c>)
 80057b0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80057b2:	2513      	movs	r5, #19
 80057b4:	197c      	adds	r4, r7, r5
 80057b6:	2000      	movs	r0, #0
 80057b8:	f7ff f8c8 	bl	800494c <HAL_InitTick>
 80057bc:	0003      	movs	r3, r0
 80057be:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80057c0:	197b      	adds	r3, r7, r5
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d060      	beq.n	800588a <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80057c8:	2313      	movs	r3, #19
 80057ca:	18fb      	adds	r3, r7, r3
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	e243      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d03e      	beq.n	8005856 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80057d8:	4b0a      	ldr	r3, [pc, #40]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	4b09      	ldr	r3, [pc, #36]	; (8005804 <HAL_RCC_OscConfig+0x338>)
 80057de:	2180      	movs	r1, #128	; 0x80
 80057e0:	0049      	lsls	r1, r1, #1
 80057e2:	430a      	orrs	r2, r1
 80057e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e6:	f7ff f8e7 	bl	80049b8 <HAL_GetTick>
 80057ea:	0003      	movs	r3, r0
 80057ec:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80057ee:	e017      	b.n	8005820 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057f0:	f7ff f8e2 	bl	80049b8 <HAL_GetTick>
 80057f4:	0002      	movs	r2, r0
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d910      	bls.n	8005820 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e22a      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
 8005802:	46c0      	nop			; (mov r8, r8)
 8005804:	40021000 	.word	0x40021000
 8005808:	fffeffff 	.word	0xfffeffff
 800580c:	fffbffff 	.word	0xfffbffff
 8005810:	ffffe0ff 	.word	0xffffe0ff
 8005814:	08008b64 	.word	0x08008b64
 8005818:	20000000 	.word	0x20000000
 800581c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005820:	4bc6      	ldr	r3, [pc, #792]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	2380      	movs	r3, #128	; 0x80
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4013      	ands	r3, r2
 800582a:	d0e1      	beq.n	80057f0 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800582c:	4bc3      	ldr	r3, [pc, #780]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	4ac3      	ldr	r2, [pc, #780]	; (8005b40 <HAL_RCC_OscConfig+0x674>)
 8005832:	4013      	ands	r3, r2
 8005834:	0019      	movs	r1, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800583a:	4bc0      	ldr	r3, [pc, #768]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 800583c:	430a      	orrs	r2, r1
 800583e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005840:	4bbe      	ldr	r3, [pc, #760]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	0a19      	lsrs	r1, r3, #8
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	061a      	lsls	r2, r3, #24
 800584e:	4bbb      	ldr	r3, [pc, #748]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005850:	430a      	orrs	r2, r1
 8005852:	605a      	str	r2, [r3, #4]
 8005854:	e019      	b.n	800588a <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005856:	4bb9      	ldr	r3, [pc, #740]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4bb8      	ldr	r3, [pc, #736]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 800585c:	49b9      	ldr	r1, [pc, #740]	; (8005b44 <HAL_RCC_OscConfig+0x678>)
 800585e:	400a      	ands	r2, r1
 8005860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005862:	f7ff f8a9 	bl	80049b8 <HAL_GetTick>
 8005866:	0003      	movs	r3, r0
 8005868:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800586c:	f7ff f8a4 	bl	80049b8 <HAL_GetTick>
 8005870:	0002      	movs	r2, r0
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e1ec      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800587e:	4baf      	ldr	r3, [pc, #700]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	2380      	movs	r3, #128	; 0x80
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4013      	ands	r3, r2
 8005888:	d1f0      	bne.n	800586c <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2208      	movs	r2, #8
 8005890:	4013      	ands	r3, r2
 8005892:	d036      	beq.n	8005902 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d019      	beq.n	80058d0 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800589c:	4ba7      	ldr	r3, [pc, #668]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 800589e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058a0:	4ba6      	ldr	r3, [pc, #664]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80058a2:	2101      	movs	r1, #1
 80058a4:	430a      	orrs	r2, r1
 80058a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058a8:	f7ff f886 	bl	80049b8 <HAL_GetTick>
 80058ac:	0003      	movs	r3, r0
 80058ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058b2:	f7ff f881 	bl	80049b8 <HAL_GetTick>
 80058b6:	0002      	movs	r2, r0
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e1c9      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058c4:	4b9d      	ldr	r3, [pc, #628]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80058c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c8:	2202      	movs	r2, #2
 80058ca:	4013      	ands	r3, r2
 80058cc:	d0f1      	beq.n	80058b2 <HAL_RCC_OscConfig+0x3e6>
 80058ce:	e018      	b.n	8005902 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d0:	4b9a      	ldr	r3, [pc, #616]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80058d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058d4:	4b99      	ldr	r3, [pc, #612]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80058d6:	2101      	movs	r1, #1
 80058d8:	438a      	bics	r2, r1
 80058da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058dc:	f7ff f86c 	bl	80049b8 <HAL_GetTick>
 80058e0:	0003      	movs	r3, r0
 80058e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058e6:	f7ff f867 	bl	80049b8 <HAL_GetTick>
 80058ea:	0002      	movs	r2, r0
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e1af      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058f8:	4b90      	ldr	r3, [pc, #576]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80058fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fc:	2202      	movs	r2, #2
 80058fe:	4013      	ands	r3, r2
 8005900:	d1f1      	bne.n	80058e6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2204      	movs	r2, #4
 8005908:	4013      	ands	r3, r2
 800590a:	d100      	bne.n	800590e <HAL_RCC_OscConfig+0x442>
 800590c:	e0af      	b.n	8005a6e <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800590e:	2323      	movs	r3, #35	; 0x23
 8005910:	18fb      	adds	r3, r7, r3
 8005912:	2200      	movs	r2, #0
 8005914:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005916:	4b89      	ldr	r3, [pc, #548]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800591a:	2380      	movs	r3, #128	; 0x80
 800591c:	055b      	lsls	r3, r3, #21
 800591e:	4013      	ands	r3, r2
 8005920:	d10a      	bne.n	8005938 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005922:	4b86      	ldr	r3, [pc, #536]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005926:	4b85      	ldr	r3, [pc, #532]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005928:	2180      	movs	r1, #128	; 0x80
 800592a:	0549      	lsls	r1, r1, #21
 800592c:	430a      	orrs	r2, r1
 800592e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005930:	2323      	movs	r3, #35	; 0x23
 8005932:	18fb      	adds	r3, r7, r3
 8005934:	2201      	movs	r2, #1
 8005936:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005938:	4b83      	ldr	r3, [pc, #524]	; (8005b48 <HAL_RCC_OscConfig+0x67c>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	4013      	ands	r3, r2
 8005942:	d11a      	bne.n	800597a <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005944:	4b80      	ldr	r3, [pc, #512]	; (8005b48 <HAL_RCC_OscConfig+0x67c>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	4b7f      	ldr	r3, [pc, #508]	; (8005b48 <HAL_RCC_OscConfig+0x67c>)
 800594a:	2180      	movs	r1, #128	; 0x80
 800594c:	0049      	lsls	r1, r1, #1
 800594e:	430a      	orrs	r2, r1
 8005950:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005952:	f7ff f831 	bl	80049b8 <HAL_GetTick>
 8005956:	0003      	movs	r3, r0
 8005958:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800595c:	f7ff f82c 	bl	80049b8 <HAL_GetTick>
 8005960:	0002      	movs	r2, r0
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b64      	cmp	r3, #100	; 0x64
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e174      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800596e:	4b76      	ldr	r3, [pc, #472]	; (8005b48 <HAL_RCC_OscConfig+0x67c>)
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	2380      	movs	r3, #128	; 0x80
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	4013      	ands	r3, r2
 8005978:	d0f0      	beq.n	800595c <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	2380      	movs	r3, #128	; 0x80
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	429a      	cmp	r2, r3
 8005984:	d107      	bne.n	8005996 <HAL_RCC_OscConfig+0x4ca>
 8005986:	4b6d      	ldr	r3, [pc, #436]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005988:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800598a:	4b6c      	ldr	r3, [pc, #432]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 800598c:	2180      	movs	r1, #128	; 0x80
 800598e:	0049      	lsls	r1, r1, #1
 8005990:	430a      	orrs	r2, r1
 8005992:	651a      	str	r2, [r3, #80]	; 0x50
 8005994:	e031      	b.n	80059fa <HAL_RCC_OscConfig+0x52e>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10c      	bne.n	80059b8 <HAL_RCC_OscConfig+0x4ec>
 800599e:	4b67      	ldr	r3, [pc, #412]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80059a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059a2:	4b66      	ldr	r3, [pc, #408]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80059a4:	4967      	ldr	r1, [pc, #412]	; (8005b44 <HAL_RCC_OscConfig+0x678>)
 80059a6:	400a      	ands	r2, r1
 80059a8:	651a      	str	r2, [r3, #80]	; 0x50
 80059aa:	4b64      	ldr	r3, [pc, #400]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80059ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059ae:	4b63      	ldr	r3, [pc, #396]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80059b0:	4966      	ldr	r1, [pc, #408]	; (8005b4c <HAL_RCC_OscConfig+0x680>)
 80059b2:	400a      	ands	r2, r1
 80059b4:	651a      	str	r2, [r3, #80]	; 0x50
 80059b6:	e020      	b.n	80059fa <HAL_RCC_OscConfig+0x52e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	23a0      	movs	r3, #160	; 0xa0
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d10e      	bne.n	80059e2 <HAL_RCC_OscConfig+0x516>
 80059c4:	4b5d      	ldr	r3, [pc, #372]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80059c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059c8:	4b5c      	ldr	r3, [pc, #368]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80059ca:	2180      	movs	r1, #128	; 0x80
 80059cc:	00c9      	lsls	r1, r1, #3
 80059ce:	430a      	orrs	r2, r1
 80059d0:	651a      	str	r2, [r3, #80]	; 0x50
 80059d2:	4b5a      	ldr	r3, [pc, #360]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80059d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059d6:	4b59      	ldr	r3, [pc, #356]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80059d8:	2180      	movs	r1, #128	; 0x80
 80059da:	0049      	lsls	r1, r1, #1
 80059dc:	430a      	orrs	r2, r1
 80059de:	651a      	str	r2, [r3, #80]	; 0x50
 80059e0:	e00b      	b.n	80059fa <HAL_RCC_OscConfig+0x52e>
 80059e2:	4b56      	ldr	r3, [pc, #344]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80059e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059e6:	4b55      	ldr	r3, [pc, #340]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80059e8:	4956      	ldr	r1, [pc, #344]	; (8005b44 <HAL_RCC_OscConfig+0x678>)
 80059ea:	400a      	ands	r2, r1
 80059ec:	651a      	str	r2, [r3, #80]	; 0x50
 80059ee:	4b53      	ldr	r3, [pc, #332]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80059f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059f2:	4b52      	ldr	r3, [pc, #328]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 80059f4:	4955      	ldr	r1, [pc, #340]	; (8005b4c <HAL_RCC_OscConfig+0x680>)
 80059f6:	400a      	ands	r2, r1
 80059f8:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d015      	beq.n	8005a2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a02:	f7fe ffd9 	bl	80049b8 <HAL_GetTick>
 8005a06:	0003      	movs	r3, r0
 8005a08:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a0a:	e009      	b.n	8005a20 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a0c:	f7fe ffd4 	bl	80049b8 <HAL_GetTick>
 8005a10:	0002      	movs	r2, r0
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	4a4e      	ldr	r2, [pc, #312]	; (8005b50 <HAL_RCC_OscConfig+0x684>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e11b      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a20:	4b46      	ldr	r3, [pc, #280]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a24:	2380      	movs	r3, #128	; 0x80
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d0ef      	beq.n	8005a0c <HAL_RCC_OscConfig+0x540>
 8005a2c:	e014      	b.n	8005a58 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a2e:	f7fe ffc3 	bl	80049b8 <HAL_GetTick>
 8005a32:	0003      	movs	r3, r0
 8005a34:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a36:	e009      	b.n	8005a4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a38:	f7fe ffbe 	bl	80049b8 <HAL_GetTick>
 8005a3c:	0002      	movs	r2, r0
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	4a43      	ldr	r2, [pc, #268]	; (8005b50 <HAL_RCC_OscConfig+0x684>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e105      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a4c:	4b3b      	ldr	r3, [pc, #236]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005a4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a50:	2380      	movs	r3, #128	; 0x80
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4013      	ands	r3, r2
 8005a56:	d1ef      	bne.n	8005a38 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a58:	2323      	movs	r3, #35	; 0x23
 8005a5a:	18fb      	adds	r3, r7, r3
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d105      	bne.n	8005a6e <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a62:	4b36      	ldr	r3, [pc, #216]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a66:	4b35      	ldr	r3, [pc, #212]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005a68:	493a      	ldr	r1, [pc, #232]	; (8005b54 <HAL_RCC_OscConfig+0x688>)
 8005a6a:	400a      	ands	r2, r1
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2220      	movs	r2, #32
 8005a74:	4013      	ands	r3, r2
 8005a76:	d049      	beq.n	8005b0c <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d026      	beq.n	8005ace <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005a80:	4b2e      	ldr	r3, [pc, #184]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	4b2d      	ldr	r3, [pc, #180]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005a86:	2101      	movs	r1, #1
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	609a      	str	r2, [r3, #8]
 8005a8c:	4b2b      	ldr	r3, [pc, #172]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a90:	4b2a      	ldr	r3, [pc, #168]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005a92:	2101      	movs	r1, #1
 8005a94:	430a      	orrs	r2, r1
 8005a96:	635a      	str	r2, [r3, #52]	; 0x34
 8005a98:	4b2f      	ldr	r3, [pc, #188]	; (8005b58 <HAL_RCC_OscConfig+0x68c>)
 8005a9a:	6a1a      	ldr	r2, [r3, #32]
 8005a9c:	4b2e      	ldr	r3, [pc, #184]	; (8005b58 <HAL_RCC_OscConfig+0x68c>)
 8005a9e:	2180      	movs	r1, #128	; 0x80
 8005aa0:	0189      	lsls	r1, r1, #6
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa6:	f7fe ff87 	bl	80049b8 <HAL_GetTick>
 8005aaa:	0003      	movs	r3, r0
 8005aac:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ab0:	f7fe ff82 	bl	80049b8 <HAL_GetTick>
 8005ab4:	0002      	movs	r2, r0
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e0ca      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ac2:	4b1e      	ldr	r3, [pc, #120]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	4013      	ands	r3, r2
 8005aca:	d0f1      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x5e4>
 8005acc:	e01e      	b.n	8005b0c <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005ace:	4b1b      	ldr	r3, [pc, #108]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	438a      	bics	r2, r1
 8005ad8:	609a      	str	r2, [r3, #8]
 8005ada:	4b1f      	ldr	r3, [pc, #124]	; (8005b58 <HAL_RCC_OscConfig+0x68c>)
 8005adc:	6a1a      	ldr	r2, [r3, #32]
 8005ade:	4b1e      	ldr	r3, [pc, #120]	; (8005b58 <HAL_RCC_OscConfig+0x68c>)
 8005ae0:	491e      	ldr	r1, [pc, #120]	; (8005b5c <HAL_RCC_OscConfig+0x690>)
 8005ae2:	400a      	ands	r2, r1
 8005ae4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae6:	f7fe ff67 	bl	80049b8 <HAL_GetTick>
 8005aea:	0003      	movs	r3, r0
 8005aec:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005af0:	f7fe ff62 	bl	80049b8 <HAL_GetTick>
 8005af4:	0002      	movs	r2, r0
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e0aa      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b02:	4b0e      	ldr	r3, [pc, #56]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	2202      	movs	r2, #2
 8005b08:	4013      	ands	r3, r2
 8005b0a:	d1f1      	bne.n	8005af0 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d100      	bne.n	8005b16 <HAL_RCC_OscConfig+0x64a>
 8005b14:	e09f      	b.n	8005c56 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	2b0c      	cmp	r3, #12
 8005b1a:	d100      	bne.n	8005b1e <HAL_RCC_OscConfig+0x652>
 8005b1c:	e078      	b.n	8005c10 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d159      	bne.n	8005bda <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b26:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b04      	ldr	r3, [pc, #16]	; (8005b3c <HAL_RCC_OscConfig+0x670>)
 8005b2c:	490c      	ldr	r1, [pc, #48]	; (8005b60 <HAL_RCC_OscConfig+0x694>)
 8005b2e:	400a      	ands	r2, r1
 8005b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b32:	f7fe ff41 	bl	80049b8 <HAL_GetTick>
 8005b36:	0003      	movs	r3, r0
 8005b38:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005b3a:	e01c      	b.n	8005b76 <HAL_RCC_OscConfig+0x6aa>
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	ffff1fff 	.word	0xffff1fff
 8005b44:	fffffeff 	.word	0xfffffeff
 8005b48:	40007000 	.word	0x40007000
 8005b4c:	fffffbff 	.word	0xfffffbff
 8005b50:	00001388 	.word	0x00001388
 8005b54:	efffffff 	.word	0xefffffff
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	ffffdfff 	.word	0xffffdfff
 8005b60:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b64:	f7fe ff28 	bl	80049b8 <HAL_GetTick>
 8005b68:	0002      	movs	r2, r0
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e070      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005b76:	4b3a      	ldr	r3, [pc, #232]	; (8005c60 <HAL_RCC_OscConfig+0x794>)
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	2380      	movs	r3, #128	; 0x80
 8005b7c:	049b      	lsls	r3, r3, #18
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d1f0      	bne.n	8005b64 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b82:	4b37      	ldr	r3, [pc, #220]	; (8005c60 <HAL_RCC_OscConfig+0x794>)
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	4a37      	ldr	r2, [pc, #220]	; (8005c64 <HAL_RCC_OscConfig+0x798>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	0019      	movs	r1, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	4b30      	ldr	r3, [pc, #192]	; (8005c60 <HAL_RCC_OscConfig+0x794>)
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ba2:	4b2f      	ldr	r3, [pc, #188]	; (8005c60 <HAL_RCC_OscConfig+0x794>)
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	4b2e      	ldr	r3, [pc, #184]	; (8005c60 <HAL_RCC_OscConfig+0x794>)
 8005ba8:	2180      	movs	r1, #128	; 0x80
 8005baa:	0449      	lsls	r1, r1, #17
 8005bac:	430a      	orrs	r2, r1
 8005bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb0:	f7fe ff02 	bl	80049b8 <HAL_GetTick>
 8005bb4:	0003      	movs	r3, r0
 8005bb6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005bb8:	e008      	b.n	8005bcc <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bba:	f7fe fefd 	bl	80049b8 <HAL_GetTick>
 8005bbe:	0002      	movs	r2, r0
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e045      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005bcc:	4b24      	ldr	r3, [pc, #144]	; (8005c60 <HAL_RCC_OscConfig+0x794>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	2380      	movs	r3, #128	; 0x80
 8005bd2:	049b      	lsls	r3, r3, #18
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	d0f0      	beq.n	8005bba <HAL_RCC_OscConfig+0x6ee>
 8005bd8:	e03d      	b.n	8005c56 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bda:	4b21      	ldr	r3, [pc, #132]	; (8005c60 <HAL_RCC_OscConfig+0x794>)
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b20      	ldr	r3, [pc, #128]	; (8005c60 <HAL_RCC_OscConfig+0x794>)
 8005be0:	4921      	ldr	r1, [pc, #132]	; (8005c68 <HAL_RCC_OscConfig+0x79c>)
 8005be2:	400a      	ands	r2, r1
 8005be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be6:	f7fe fee7 	bl	80049b8 <HAL_GetTick>
 8005bea:	0003      	movs	r3, r0
 8005bec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bf0:	f7fe fee2 	bl	80049b8 <HAL_GetTick>
 8005bf4:	0002      	movs	r2, r0
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e02a      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005c02:	4b17      	ldr	r3, [pc, #92]	; (8005c60 <HAL_RCC_OscConfig+0x794>)
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	2380      	movs	r3, #128	; 0x80
 8005c08:	049b      	lsls	r3, r3, #18
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	d1f0      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x724>
 8005c0e:	e022      	b.n	8005c56 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e01d      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c1c:	4b10      	ldr	r3, [pc, #64]	; (8005c60 <HAL_RCC_OscConfig+0x794>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	2380      	movs	r3, #128	; 0x80
 8005c26:	025b      	lsls	r3, r3, #9
 8005c28:	401a      	ands	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d10f      	bne.n	8005c52 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	23f0      	movs	r3, #240	; 0xf0
 8005c36:	039b      	lsls	r3, r3, #14
 8005c38:	401a      	ands	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d107      	bne.n	8005c52 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	23c0      	movs	r3, #192	; 0xc0
 8005c46:	041b      	lsls	r3, r3, #16
 8005c48:	401a      	ands	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d001      	beq.n	8005c56 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	0018      	movs	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b00a      	add	sp, #40	; 0x28
 8005c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8005c60:	40021000 	.word	0x40021000
 8005c64:	ff02ffff 	.word	0xff02ffff
 8005c68:	feffffff 	.word	0xfeffffff

08005c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c6c:	b5b0      	push	{r4, r5, r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e10d      	b.n	8005e9c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c80:	4b88      	ldr	r3, [pc, #544]	; (8005ea4 <HAL_RCC_ClockConfig+0x238>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2201      	movs	r2, #1
 8005c86:	4013      	ands	r3, r2
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d911      	bls.n	8005cb2 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8e:	4b85      	ldr	r3, [pc, #532]	; (8005ea4 <HAL_RCC_ClockConfig+0x238>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2201      	movs	r2, #1
 8005c94:	4393      	bics	r3, r2
 8005c96:	0019      	movs	r1, r3
 8005c98:	4b82      	ldr	r3, [pc, #520]	; (8005ea4 <HAL_RCC_ClockConfig+0x238>)
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca0:	4b80      	ldr	r3, [pc, #512]	; (8005ea4 <HAL_RCC_ClockConfig+0x238>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d001      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e0f4      	b.n	8005e9c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d009      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cbc:	4b7a      	ldr	r3, [pc, #488]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	22f0      	movs	r2, #240	; 0xf0
 8005cc2:	4393      	bics	r3, r2
 8005cc4:	0019      	movs	r1, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	4b77      	ldr	r3, [pc, #476]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	d100      	bne.n	8005cdc <HAL_RCC_ClockConfig+0x70>
 8005cda:	e089      	b.n	8005df0 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d107      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ce4:	4b70      	ldr	r3, [pc, #448]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	2380      	movs	r3, #128	; 0x80
 8005cea:	029b      	lsls	r3, r3, #10
 8005cec:	4013      	ands	r3, r2
 8005cee:	d120      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e0d3      	b.n	8005e9c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d107      	bne.n	8005d0c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cfc:	4b6a      	ldr	r3, [pc, #424]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	2380      	movs	r3, #128	; 0x80
 8005d02:	049b      	lsls	r3, r3, #18
 8005d04:	4013      	ands	r3, r2
 8005d06:	d114      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e0c7      	b.n	8005e9c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d106      	bne.n	8005d22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d14:	4b64      	ldr	r3, [pc, #400]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2204      	movs	r2, #4
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	d109      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e0bc      	b.n	8005e9c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005d22:	4b61      	ldr	r3, [pc, #388]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	2380      	movs	r3, #128	; 0x80
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d101      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e0b4      	b.n	8005e9c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d32:	4b5d      	ldr	r3, [pc, #372]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	2203      	movs	r2, #3
 8005d38:	4393      	bics	r3, r2
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	4b59      	ldr	r3, [pc, #356]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005d42:	430a      	orrs	r2, r1
 8005d44:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d46:	f7fe fe37 	bl	80049b8 <HAL_GetTick>
 8005d4a:	0003      	movs	r3, r0
 8005d4c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d111      	bne.n	8005d7a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d56:	e009      	b.n	8005d6c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d58:	f7fe fe2e 	bl	80049b8 <HAL_GetTick>
 8005d5c:	0002      	movs	r2, r0
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	4a52      	ldr	r2, [pc, #328]	; (8005eac <HAL_RCC_ClockConfig+0x240>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e097      	b.n	8005e9c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d6c:	4b4e      	ldr	r3, [pc, #312]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	220c      	movs	r2, #12
 8005d72:	4013      	ands	r3, r2
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d1ef      	bne.n	8005d58 <HAL_RCC_ClockConfig+0xec>
 8005d78:	e03a      	b.n	8005df0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d111      	bne.n	8005da6 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d82:	e009      	b.n	8005d98 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d84:	f7fe fe18 	bl	80049b8 <HAL_GetTick>
 8005d88:	0002      	movs	r2, r0
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	4a47      	ldr	r2, [pc, #284]	; (8005eac <HAL_RCC_ClockConfig+0x240>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e081      	b.n	8005e9c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d98:	4b43      	ldr	r3, [pc, #268]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	220c      	movs	r2, #12
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b0c      	cmp	r3, #12
 8005da2:	d1ef      	bne.n	8005d84 <HAL_RCC_ClockConfig+0x118>
 8005da4:	e024      	b.n	8005df0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d11b      	bne.n	8005de6 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dae:	e009      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005db0:	f7fe fe02 	bl	80049b8 <HAL_GetTick>
 8005db4:	0002      	movs	r2, r0
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	4a3c      	ldr	r2, [pc, #240]	; (8005eac <HAL_RCC_ClockConfig+0x240>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e06b      	b.n	8005e9c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dc4:	4b38      	ldr	r3, [pc, #224]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	220c      	movs	r2, #12
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d1ef      	bne.n	8005db0 <HAL_RCC_ClockConfig+0x144>
 8005dd0:	e00e      	b.n	8005df0 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd2:	f7fe fdf1 	bl	80049b8 <HAL_GetTick>
 8005dd6:	0002      	movs	r2, r0
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	4a33      	ldr	r2, [pc, #204]	; (8005eac <HAL_RCC_ClockConfig+0x240>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e05a      	b.n	8005e9c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005de6:	4b30      	ldr	r3, [pc, #192]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	220c      	movs	r2, #12
 8005dec:	4013      	ands	r3, r2
 8005dee:	d1f0      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005df0:	4b2c      	ldr	r3, [pc, #176]	; (8005ea4 <HAL_RCC_ClockConfig+0x238>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2201      	movs	r2, #1
 8005df6:	4013      	ands	r3, r2
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d211      	bcs.n	8005e22 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dfe:	4b29      	ldr	r3, [pc, #164]	; (8005ea4 <HAL_RCC_ClockConfig+0x238>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2201      	movs	r2, #1
 8005e04:	4393      	bics	r3, r2
 8005e06:	0019      	movs	r1, r3
 8005e08:	4b26      	ldr	r3, [pc, #152]	; (8005ea4 <HAL_RCC_ClockConfig+0x238>)
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e10:	4b24      	ldr	r3, [pc, #144]	; (8005ea4 <HAL_RCC_ClockConfig+0x238>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2201      	movs	r2, #1
 8005e16:	4013      	ands	r3, r2
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d001      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e03c      	b.n	8005e9c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2204      	movs	r2, #4
 8005e28:	4013      	ands	r3, r2
 8005e2a:	d009      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e2c:	4b1e      	ldr	r3, [pc, #120]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	4a1f      	ldr	r2, [pc, #124]	; (8005eb0 <HAL_RCC_ClockConfig+0x244>)
 8005e32:	4013      	ands	r3, r2
 8005e34:	0019      	movs	r1, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2208      	movs	r2, #8
 8005e46:	4013      	ands	r3, r2
 8005e48:	d00a      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e4a:	4b17      	ldr	r3, [pc, #92]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	4a19      	ldr	r2, [pc, #100]	; (8005eb4 <HAL_RCC_ClockConfig+0x248>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	0019      	movs	r1, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	00da      	lsls	r2, r3, #3
 8005e5a:	4b13      	ldr	r3, [pc, #76]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e60:	f000 f82e 	bl	8005ec0 <HAL_RCC_GetSysClockFreq>
 8005e64:	0001      	movs	r1, r0
 8005e66:	4b10      	ldr	r3, [pc, #64]	; (8005ea8 <HAL_RCC_ClockConfig+0x23c>)
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	091b      	lsrs	r3, r3, #4
 8005e6c:	220f      	movs	r2, #15
 8005e6e:	4013      	ands	r3, r2
 8005e70:	4a11      	ldr	r2, [pc, #68]	; (8005eb8 <HAL_RCC_ClockConfig+0x24c>)
 8005e72:	5cd3      	ldrb	r3, [r2, r3]
 8005e74:	000a      	movs	r2, r1
 8005e76:	40da      	lsrs	r2, r3
 8005e78:	4b10      	ldr	r3, [pc, #64]	; (8005ebc <HAL_RCC_ClockConfig+0x250>)
 8005e7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8005e7c:	250b      	movs	r5, #11
 8005e7e:	197c      	adds	r4, r7, r5
 8005e80:	2000      	movs	r0, #0
 8005e82:	f7fe fd63 	bl	800494c <HAL_InitTick>
 8005e86:	0003      	movs	r3, r0
 8005e88:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005e8a:	197b      	adds	r3, r7, r5
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8005e92:	230b      	movs	r3, #11
 8005e94:	18fb      	adds	r3, r7, r3
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	e000      	b.n	8005e9c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	b004      	add	sp, #16
 8005ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ea4:	40022000 	.word	0x40022000
 8005ea8:	40021000 	.word	0x40021000
 8005eac:	00001388 	.word	0x00001388
 8005eb0:	fffff8ff 	.word	0xfffff8ff
 8005eb4:	ffffc7ff 	.word	0xffffc7ff
 8005eb8:	08008b64 	.word	0x08008b64
 8005ebc:	20000000 	.word	0x20000000

08005ec0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005ec6:	4b3b      	ldr	r3, [pc, #236]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	220c      	movs	r2, #12
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d00e      	beq.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8005ed6:	2b0c      	cmp	r3, #12
 8005ed8:	d00f      	beq.n	8005efa <HAL_RCC_GetSysClockFreq+0x3a>
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d157      	bne.n	8005f8e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005ede:	4b35      	ldr	r3, [pc, #212]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2210      	movs	r2, #16
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d002      	beq.n	8005eee <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005ee8:	4b33      	ldr	r3, [pc, #204]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005eea:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005eec:	e05d      	b.n	8005faa <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8005eee:	4b33      	ldr	r3, [pc, #204]	; (8005fbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8005ef0:	613b      	str	r3, [r7, #16]
      break;
 8005ef2:	e05a      	b.n	8005faa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ef4:	4b32      	ldr	r3, [pc, #200]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005ef6:	613b      	str	r3, [r7, #16]
      break;
 8005ef8:	e057      	b.n	8005faa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	0c9b      	lsrs	r3, r3, #18
 8005efe:	220f      	movs	r2, #15
 8005f00:	4013      	ands	r3, r2
 8005f02:	4a30      	ldr	r2, [pc, #192]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005f04:	5cd3      	ldrb	r3, [r2, r3]
 8005f06:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	0d9b      	lsrs	r3, r3, #22
 8005f0c:	2203      	movs	r2, #3
 8005f0e:	4013      	ands	r3, r2
 8005f10:	3301      	adds	r3, #1
 8005f12:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f14:	4b27      	ldr	r3, [pc, #156]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	2380      	movs	r3, #128	; 0x80
 8005f1a:	025b      	lsls	r3, r3, #9
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	d00f      	beq.n	8005f40 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	000a      	movs	r2, r1
 8005f24:	0152      	lsls	r2, r2, #5
 8005f26:	1a52      	subs	r2, r2, r1
 8005f28:	0193      	lsls	r3, r2, #6
 8005f2a:	1a9b      	subs	r3, r3, r2
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	185b      	adds	r3, r3, r1
 8005f30:	025b      	lsls	r3, r3, #9
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	0018      	movs	r0, r3
 8005f36:	f7fa f8f1 	bl	800011c <__udivsi3>
 8005f3a:	0003      	movs	r3, r0
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	e023      	b.n	8005f88 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005f40:	4b1c      	ldr	r3, [pc, #112]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2210      	movs	r2, #16
 8005f46:	4013      	ands	r3, r2
 8005f48:	d00f      	beq.n	8005f6a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	000a      	movs	r2, r1
 8005f4e:	0152      	lsls	r2, r2, #5
 8005f50:	1a52      	subs	r2, r2, r1
 8005f52:	0193      	lsls	r3, r2, #6
 8005f54:	1a9b      	subs	r3, r3, r2
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	185b      	adds	r3, r3, r1
 8005f5a:	021b      	lsls	r3, r3, #8
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	0018      	movs	r0, r3
 8005f60:	f7fa f8dc 	bl	800011c <__udivsi3>
 8005f64:	0003      	movs	r3, r0
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	e00e      	b.n	8005f88 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	000a      	movs	r2, r1
 8005f6e:	0152      	lsls	r2, r2, #5
 8005f70:	1a52      	subs	r2, r2, r1
 8005f72:	0193      	lsls	r3, r2, #6
 8005f74:	1a9b      	subs	r3, r3, r2
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	185b      	adds	r3, r3, r1
 8005f7a:	029b      	lsls	r3, r3, #10
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	0018      	movs	r0, r3
 8005f80:	f7fa f8cc 	bl	800011c <__udivsi3>
 8005f84:	0003      	movs	r3, r0
 8005f86:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	613b      	str	r3, [r7, #16]
      break;
 8005f8c:	e00d      	b.n	8005faa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005f8e:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	0b5b      	lsrs	r3, r3, #13
 8005f94:	2207      	movs	r2, #7
 8005f96:	4013      	ands	r3, r2
 8005f98:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	2280      	movs	r2, #128	; 0x80
 8005fa0:	0212      	lsls	r2, r2, #8
 8005fa2:	409a      	lsls	r2, r3
 8005fa4:	0013      	movs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
      break;
 8005fa8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005faa:	693b      	ldr	r3, [r7, #16]
}
 8005fac:	0018      	movs	r0, r3
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b006      	add	sp, #24
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	003d0900 	.word	0x003d0900
 8005fbc:	00f42400 	.word	0x00f42400
 8005fc0:	007a1200 	.word	0x007a1200
 8005fc4:	08008b74 	.word	0x08008b74

08005fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e01e      	b.n	8006018 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2239      	movs	r2, #57	; 0x39
 8005fde:	5c9b      	ldrb	r3, [r3, r2]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d107      	bne.n	8005ff6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2238      	movs	r2, #56	; 0x38
 8005fea:	2100      	movs	r1, #0
 8005fec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f7fe f9db 	bl	80043ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2239      	movs	r2, #57	; 0x39
 8005ffa:	2102      	movs	r1, #2
 8005ffc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3304      	adds	r3, #4
 8006006:	0019      	movs	r1, r3
 8006008:	0010      	movs	r0, r2
 800600a:	f000 fb93 	bl	8006734 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2239      	movs	r2, #57	; 0x39
 8006012:	2101      	movs	r1, #1
 8006014:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	0018      	movs	r0, r3
 800601a:	46bd      	mov	sp, r7
 800601c:	b002      	add	sp, #8
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2101      	movs	r1, #1
 8006034:	430a      	orrs	r2, r1
 8006036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	2207      	movs	r2, #7
 8006040:	4013      	ands	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b06      	cmp	r3, #6
 8006048:	d007      	beq.n	800605a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2101      	movs	r1, #1
 8006056:	430a      	orrs	r2, r1
 8006058:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	0018      	movs	r0, r3
 800605e:	46bd      	mov	sp, r7
 8006060:	b004      	add	sp, #16
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e01e      	b.n	80060b4 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2239      	movs	r2, #57	; 0x39
 800607a:	5c9b      	ldrb	r3, [r3, r2]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d107      	bne.n	8006092 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2238      	movs	r2, #56	; 0x38
 8006086:	2100      	movs	r1, #0
 8006088:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	0018      	movs	r0, r3
 800608e:	f7fe f977 	bl	8004380 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2239      	movs	r2, #57	; 0x39
 8006096:	2102      	movs	r1, #2
 8006098:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3304      	adds	r3, #4
 80060a2:	0019      	movs	r1, r3
 80060a4:	0010      	movs	r0, r2
 80060a6:	f000 fb45 	bl	8006734 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2239      	movs	r2, #57	; 0x39
 80060ae:	2101      	movs	r1, #1
 80060b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	0018      	movs	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b002      	add	sp, #8
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	2201      	movs	r2, #1
 80060ce:	0018      	movs	r0, r3
 80060d0:	f000 fd2c 	bl	8006b2c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	2207      	movs	r2, #7
 80060dc:	4013      	ands	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d007      	beq.n	80060f6 <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2101      	movs	r1, #1
 80060f2:	430a      	orrs	r2, r1
 80060f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	0018      	movs	r0, r3
 80060fa:	46bd      	mov	sp, r7
 80060fc:	b004      	add	sp, #16
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e07c      	b.n	800620e <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2239      	movs	r2, #57	; 0x39
 8006118:	5c9b      	ldrb	r3, [r3, r2]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d107      	bne.n	8006130 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2238      	movs	r2, #56	; 0x38
 8006124:	2100      	movs	r1, #0
 8006126:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	0018      	movs	r0, r3
 800612c:	f7fe f96c 	bl	8004408 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2239      	movs	r2, #57	; 0x39
 8006134:	2102      	movs	r1, #2
 8006136:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4935      	ldr	r1, [pc, #212]	; (8006218 <HAL_TIM_Encoder_Init+0x118>)
 8006144:	400a      	ands	r2, r1
 8006146:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3304      	adds	r3, #4
 8006150:	0019      	movs	r1, r3
 8006152:	0010      	movs	r0, r2
 8006154:	f000 faee 	bl	8006734 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	4313      	orrs	r3, r2
 8006178:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	4a27      	ldr	r2, [pc, #156]	; (800621c <HAL_TIM_Encoder_Init+0x11c>)
 800617e:	4013      	ands	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	021b      	lsls	r3, r3, #8
 800618c:	4313      	orrs	r3, r2
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4a22      	ldr	r2, [pc, #136]	; (8006220 <HAL_TIM_Encoder_Init+0x120>)
 8006198:	4013      	ands	r3, r2
 800619a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	4a21      	ldr	r2, [pc, #132]	; (8006224 <HAL_TIM_Encoder_Init+0x124>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	021b      	lsls	r3, r3, #8
 80061ae:	4313      	orrs	r3, r2
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	011a      	lsls	r2, r3, #4
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	031b      	lsls	r3, r3, #12
 80061c2:	4313      	orrs	r3, r2
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2222      	movs	r2, #34	; 0x22
 80061ce:	4393      	bics	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2288      	movs	r2, #136	; 0x88
 80061d6:	4393      	bics	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	4313      	orrs	r3, r2
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2239      	movs	r2, #57	; 0x39
 8006208:	2101      	movs	r1, #1
 800620a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	0018      	movs	r0, r3
 8006210:	46bd      	mov	sp, r7
 8006212:	b006      	add	sp, #24
 8006214:	bd80      	pop	{r7, pc}
 8006216:	46c0      	nop			; (mov r8, r8)
 8006218:	ffffbff8 	.word	0xffffbff8
 800621c:	fffffcfc 	.word	0xfffffcfc
 8006220:	fffff3f3 	.word	0xfffff3f3
 8006224:	ffff0f0f 	.word	0xffff0f0f

08006228 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2202      	movs	r2, #2
 8006238:	4013      	ands	r3, r2
 800623a:	2b02      	cmp	r3, #2
 800623c:	d124      	bne.n	8006288 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	2202      	movs	r2, #2
 8006246:	4013      	ands	r3, r2
 8006248:	2b02      	cmp	r3, #2
 800624a:	d11d      	bne.n	8006288 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2203      	movs	r2, #3
 8006252:	4252      	negs	r2, r2
 8006254:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	2203      	movs	r2, #3
 8006264:	4013      	ands	r3, r2
 8006266:	d004      	beq.n	8006272 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	0018      	movs	r0, r3
 800626c:	f000 fa4a 	bl	8006704 <HAL_TIM_IC_CaptureCallback>
 8006270:	e007      	b.n	8006282 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	0018      	movs	r0, r3
 8006276:	f000 fa3d 	bl	80066f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	0018      	movs	r0, r3
 800627e:	f000 fa49 	bl	8006714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2204      	movs	r2, #4
 8006290:	4013      	ands	r3, r2
 8006292:	2b04      	cmp	r3, #4
 8006294:	d125      	bne.n	80062e2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	2204      	movs	r2, #4
 800629e:	4013      	ands	r3, r2
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	d11e      	bne.n	80062e2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2205      	movs	r2, #5
 80062aa:	4252      	negs	r2, r2
 80062ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2202      	movs	r2, #2
 80062b2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	23c0      	movs	r3, #192	; 0xc0
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4013      	ands	r3, r2
 80062c0:	d004      	beq.n	80062cc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	0018      	movs	r0, r3
 80062c6:	f000 fa1d 	bl	8006704 <HAL_TIM_IC_CaptureCallback>
 80062ca:	e007      	b.n	80062dc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	0018      	movs	r0, r3
 80062d0:	f000 fa10 	bl	80066f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	0018      	movs	r0, r3
 80062d8:	f000 fa1c 	bl	8006714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2208      	movs	r2, #8
 80062ea:	4013      	ands	r3, r2
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d124      	bne.n	800633a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	2208      	movs	r2, #8
 80062f8:	4013      	ands	r3, r2
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d11d      	bne.n	800633a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2209      	movs	r2, #9
 8006304:	4252      	negs	r2, r2
 8006306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2204      	movs	r2, #4
 800630c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	2203      	movs	r2, #3
 8006316:	4013      	ands	r3, r2
 8006318:	d004      	beq.n	8006324 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	0018      	movs	r0, r3
 800631e:	f000 f9f1 	bl	8006704 <HAL_TIM_IC_CaptureCallback>
 8006322:	e007      	b.n	8006334 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	0018      	movs	r0, r3
 8006328:	f000 f9e4 	bl	80066f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	0018      	movs	r0, r3
 8006330:	f000 f9f0 	bl	8006714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	2210      	movs	r2, #16
 8006342:	4013      	ands	r3, r2
 8006344:	2b10      	cmp	r3, #16
 8006346:	d125      	bne.n	8006394 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	2210      	movs	r2, #16
 8006350:	4013      	ands	r3, r2
 8006352:	2b10      	cmp	r3, #16
 8006354:	d11e      	bne.n	8006394 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2211      	movs	r2, #17
 800635c:	4252      	negs	r2, r2
 800635e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2208      	movs	r2, #8
 8006364:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69da      	ldr	r2, [r3, #28]
 800636c:	23c0      	movs	r3, #192	; 0xc0
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4013      	ands	r3, r2
 8006372:	d004      	beq.n	800637e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	0018      	movs	r0, r3
 8006378:	f000 f9c4 	bl	8006704 <HAL_TIM_IC_CaptureCallback>
 800637c:	e007      	b.n	800638e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	0018      	movs	r0, r3
 8006382:	f000 f9b7 	bl	80066f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	0018      	movs	r0, r3
 800638a:	f000 f9c3 	bl	8006714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2201      	movs	r2, #1
 800639c:	4013      	ands	r3, r2
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d10f      	bne.n	80063c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	2201      	movs	r2, #1
 80063aa:	4013      	ands	r3, r2
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d108      	bne.n	80063c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2202      	movs	r2, #2
 80063b6:	4252      	negs	r2, r2
 80063b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	0018      	movs	r0, r3
 80063be:	f000 f991 	bl	80066e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	2240      	movs	r2, #64	; 0x40
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d10f      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	2240      	movs	r2, #64	; 0x40
 80063d8:	4013      	ands	r3, r2
 80063da:	2b40      	cmp	r3, #64	; 0x40
 80063dc:	d108      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2241      	movs	r2, #65	; 0x41
 80063e4:	4252      	negs	r2, r2
 80063e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	0018      	movs	r0, r3
 80063ec:	f000 f99a 	bl	8006724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063f0:	46c0      	nop			; (mov r8, r8)
 80063f2:	46bd      	mov	sp, r7
 80063f4:	b002      	add	sp, #8
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2238      	movs	r2, #56	; 0x38
 8006408:	5c9b      	ldrb	r3, [r3, r2]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800640e:	2302      	movs	r3, #2
 8006410:	e0a4      	b.n	800655c <HAL_TIM_PWM_ConfigChannel+0x164>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2238      	movs	r2, #56	; 0x38
 8006416:	2101      	movs	r1, #1
 8006418:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2239      	movs	r2, #57	; 0x39
 800641e:	2102      	movs	r1, #2
 8006420:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b04      	cmp	r3, #4
 8006426:	d029      	beq.n	800647c <HAL_TIM_PWM_ConfigChannel+0x84>
 8006428:	d802      	bhi.n	8006430 <HAL_TIM_PWM_ConfigChannel+0x38>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800642e:	e08c      	b.n	800654a <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8006430:	2b08      	cmp	r3, #8
 8006432:	d046      	beq.n	80064c2 <HAL_TIM_PWM_ConfigChannel+0xca>
 8006434:	2b0c      	cmp	r3, #12
 8006436:	d065      	beq.n	8006504 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8006438:	e087      	b.n	800654a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	0011      	movs	r1, r2
 8006442:	0018      	movs	r0, r3
 8006444:	f000 f9d4 	bl	80067f0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2108      	movs	r1, #8
 8006454:	430a      	orrs	r2, r1
 8006456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2104      	movs	r1, #4
 8006464:	438a      	bics	r2, r1
 8006466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6999      	ldr	r1, [r3, #24]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	619a      	str	r2, [r3, #24]
      break;
 800647a:	e066      	b.n	800654a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	0011      	movs	r1, r2
 8006484:	0018      	movs	r0, r3
 8006486:	f000 f9ef 	bl	8006868 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699a      	ldr	r2, [r3, #24]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2180      	movs	r1, #128	; 0x80
 8006496:	0109      	lsls	r1, r1, #4
 8006498:	430a      	orrs	r2, r1
 800649a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699a      	ldr	r2, [r3, #24]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	492f      	ldr	r1, [pc, #188]	; (8006564 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80064a8:	400a      	ands	r2, r1
 80064aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6999      	ldr	r1, [r3, #24]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	021a      	lsls	r2, r3, #8
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	619a      	str	r2, [r3, #24]
      break;
 80064c0:	e043      	b.n	800654a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	0011      	movs	r1, r2
 80064ca:	0018      	movs	r0, r3
 80064cc:	f000 fa0e 	bl	80068ec <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69da      	ldr	r2, [r3, #28]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2108      	movs	r1, #8
 80064dc:	430a      	orrs	r2, r1
 80064de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	69da      	ldr	r2, [r3, #28]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2104      	movs	r1, #4
 80064ec:	438a      	bics	r2, r1
 80064ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	69d9      	ldr	r1, [r3, #28]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	61da      	str	r2, [r3, #28]
      break;
 8006502:	e022      	b.n	800654a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	0011      	movs	r1, r2
 800650c:	0018      	movs	r0, r3
 800650e:	f000 fa2d 	bl	800696c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2180      	movs	r1, #128	; 0x80
 800651e:	0109      	lsls	r1, r1, #4
 8006520:	430a      	orrs	r2, r1
 8006522:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69da      	ldr	r2, [r3, #28]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	490d      	ldr	r1, [pc, #52]	; (8006564 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8006530:	400a      	ands	r2, r1
 8006532:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	69d9      	ldr	r1, [r3, #28]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	021a      	lsls	r2, r3, #8
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	61da      	str	r2, [r3, #28]
      break;
 8006548:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2239      	movs	r2, #57	; 0x39
 800654e:	2101      	movs	r1, #1
 8006550:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2238      	movs	r2, #56	; 0x38
 8006556:	2100      	movs	r1, #0
 8006558:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	0018      	movs	r0, r3
 800655e:	46bd      	mov	sp, r7
 8006560:	b004      	add	sp, #16
 8006562:	bd80      	pop	{r7, pc}
 8006564:	fffffbff 	.word	0xfffffbff

08006568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2238      	movs	r2, #56	; 0x38
 8006576:	5c9b      	ldrb	r3, [r3, r2]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_TIM_ConfigClockSource+0x18>
 800657c:	2302      	movs	r3, #2
 800657e:	e0ab      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x170>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2238      	movs	r2, #56	; 0x38
 8006584:	2101      	movs	r1, #1
 8006586:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2239      	movs	r2, #57	; 0x39
 800658c:	2102      	movs	r1, #2
 800658e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2277      	movs	r2, #119	; 0x77
 800659c:	4393      	bics	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4a4f      	ldr	r2, [pc, #316]	; (80066e0 <HAL_TIM_ConfigClockSource+0x178>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b40      	cmp	r3, #64	; 0x40
 80065b6:	d100      	bne.n	80065ba <HAL_TIM_ConfigClockSource+0x52>
 80065b8:	e06b      	b.n	8006692 <HAL_TIM_ConfigClockSource+0x12a>
 80065ba:	d80e      	bhi.n	80065da <HAL_TIM_ConfigClockSource+0x72>
 80065bc:	2b10      	cmp	r3, #16
 80065be:	d100      	bne.n	80065c2 <HAL_TIM_ConfigClockSource+0x5a>
 80065c0:	e077      	b.n	80066b2 <HAL_TIM_ConfigClockSource+0x14a>
 80065c2:	d803      	bhi.n	80065cc <HAL_TIM_ConfigClockSource+0x64>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d100      	bne.n	80065ca <HAL_TIM_ConfigClockSource+0x62>
 80065c8:	e073      	b.n	80066b2 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80065ca:	e07c      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d100      	bne.n	80065d2 <HAL_TIM_ConfigClockSource+0x6a>
 80065d0:	e06f      	b.n	80066b2 <HAL_TIM_ConfigClockSource+0x14a>
 80065d2:	2b30      	cmp	r3, #48	; 0x30
 80065d4:	d100      	bne.n	80065d8 <HAL_TIM_ConfigClockSource+0x70>
 80065d6:	e06c      	b.n	80066b2 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80065d8:	e075      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80065da:	2b70      	cmp	r3, #112	; 0x70
 80065dc:	d00e      	beq.n	80065fc <HAL_TIM_ConfigClockSource+0x94>
 80065de:	d804      	bhi.n	80065ea <HAL_TIM_ConfigClockSource+0x82>
 80065e0:	2b50      	cmp	r3, #80	; 0x50
 80065e2:	d036      	beq.n	8006652 <HAL_TIM_ConfigClockSource+0xea>
 80065e4:	2b60      	cmp	r3, #96	; 0x60
 80065e6:	d044      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80065e8:	e06d      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80065ea:	2280      	movs	r2, #128	; 0x80
 80065ec:	0152      	lsls	r2, r2, #5
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d068      	beq.n	80066c4 <HAL_TIM_ConfigClockSource+0x15c>
 80065f2:	2280      	movs	r2, #128	; 0x80
 80065f4:	0192      	lsls	r2, r2, #6
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d017      	beq.n	800662a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80065fa:	e064      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	6899      	ldr	r1, [r3, #8]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f000 fa6e 	bl	8006aec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2277      	movs	r2, #119	; 0x77
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	609a      	str	r2, [r3, #8]
      break;
 8006628:	e04d      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6899      	ldr	r1, [r3, #8]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f000 fa57 	bl	8006aec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2180      	movs	r1, #128	; 0x80
 800664a:	01c9      	lsls	r1, r1, #7
 800664c:	430a      	orrs	r2, r1
 800664e:	609a      	str	r2, [r3, #8]
      break;
 8006650:	e039      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	6859      	ldr	r1, [r3, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	001a      	movs	r2, r3
 8006660:	f000 f9ca 	bl	80069f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2150      	movs	r1, #80	; 0x50
 800666a:	0018      	movs	r0, r3
 800666c:	f000 fa24 	bl	8006ab8 <TIM_ITRx_SetConfig>
      break;
 8006670:	e029      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	6859      	ldr	r1, [r3, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	001a      	movs	r2, r3
 8006680:	f000 f9e8 	bl	8006a54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2160      	movs	r1, #96	; 0x60
 800668a:	0018      	movs	r0, r3
 800668c:	f000 fa14 	bl	8006ab8 <TIM_ITRx_SetConfig>
      break;
 8006690:	e019      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	6859      	ldr	r1, [r3, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	001a      	movs	r2, r3
 80066a0:	f000 f9aa 	bl	80069f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2140      	movs	r1, #64	; 0x40
 80066aa:	0018      	movs	r0, r3
 80066ac:	f000 fa04 	bl	8006ab8 <TIM_ITRx_SetConfig>
      break;
 80066b0:	e009      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	0019      	movs	r1, r3
 80066bc:	0010      	movs	r0, r2
 80066be:	f000 f9fb 	bl	8006ab8 <TIM_ITRx_SetConfig>
      break;
 80066c2:	e000      	b.n	80066c6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80066c4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2239      	movs	r2, #57	; 0x39
 80066ca:	2101      	movs	r1, #1
 80066cc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2238      	movs	r2, #56	; 0x38
 80066d2:	2100      	movs	r1, #0
 80066d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	0018      	movs	r0, r3
 80066da:	46bd      	mov	sp, r7
 80066dc:	b004      	add	sp, #16
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	ffff00ff 	.word	0xffff00ff

080066e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066ec:	46c0      	nop			; (mov r8, r8)
 80066ee:	46bd      	mov	sp, r7
 80066f0:	b002      	add	sp, #8
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066fc:	46c0      	nop			; (mov r8, r8)
 80066fe:	46bd      	mov	sp, r7
 8006700:	b002      	add	sp, #8
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800670c:	46c0      	nop			; (mov r8, r8)
 800670e:	46bd      	mov	sp, r7
 8006710:	b002      	add	sp, #8
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800671c:	46c0      	nop			; (mov r8, r8)
 800671e:	46bd      	mov	sp, r7
 8006720:	b002      	add	sp, #8
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800672c:	46c0      	nop			; (mov r8, r8)
 800672e:	46bd      	mov	sp, r7
 8006730:	b002      	add	sp, #8
 8006732:	bd80      	pop	{r7, pc}

08006734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	2380      	movs	r3, #128	; 0x80
 8006748:	05db      	lsls	r3, r3, #23
 800674a:	429a      	cmp	r2, r3
 800674c:	d00b      	beq.n	8006766 <TIM_Base_SetConfig+0x32>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a23      	ldr	r2, [pc, #140]	; (80067e0 <TIM_Base_SetConfig+0xac>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d007      	beq.n	8006766 <TIM_Base_SetConfig+0x32>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a22      	ldr	r2, [pc, #136]	; (80067e4 <TIM_Base_SetConfig+0xb0>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d003      	beq.n	8006766 <TIM_Base_SetConfig+0x32>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a21      	ldr	r2, [pc, #132]	; (80067e8 <TIM_Base_SetConfig+0xb4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d108      	bne.n	8006778 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2270      	movs	r2, #112	; 0x70
 800676a:	4393      	bics	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	4313      	orrs	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	2380      	movs	r3, #128	; 0x80
 800677c:	05db      	lsls	r3, r3, #23
 800677e:	429a      	cmp	r2, r3
 8006780:	d00b      	beq.n	800679a <TIM_Base_SetConfig+0x66>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a16      	ldr	r2, [pc, #88]	; (80067e0 <TIM_Base_SetConfig+0xac>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d007      	beq.n	800679a <TIM_Base_SetConfig+0x66>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a15      	ldr	r2, [pc, #84]	; (80067e4 <TIM_Base_SetConfig+0xb0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_Base_SetConfig+0x66>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a14      	ldr	r2, [pc, #80]	; (80067e8 <TIM_Base_SetConfig+0xb4>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d108      	bne.n	80067ac <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4a13      	ldr	r2, [pc, #76]	; (80067ec <TIM_Base_SetConfig+0xb8>)
 800679e:	4013      	ands	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2280      	movs	r2, #128	; 0x80
 80067b0:	4393      	bics	r3, r2
 80067b2:	001a      	movs	r2, r3
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	689a      	ldr	r2, [r3, #8]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	615a      	str	r2, [r3, #20]
}
 80067d8:	46c0      	nop			; (mov r8, r8)
 80067da:	46bd      	mov	sp, r7
 80067dc:	b004      	add	sp, #16
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40000400 	.word	0x40000400
 80067e4:	40010800 	.word	0x40010800
 80067e8:	40011400 	.word	0x40011400
 80067ec:	fffffcff 	.word	0xfffffcff

080067f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	2201      	movs	r2, #1
 8006800:	4393      	bics	r3, r2
 8006802:	001a      	movs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2270      	movs	r2, #112	; 0x70
 800681e:	4393      	bics	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2203      	movs	r2, #3
 8006826:	4393      	bics	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	4313      	orrs	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2202      	movs	r2, #2
 8006838:	4393      	bics	r3, r2
 800683a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	4313      	orrs	r3, r2
 8006844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	621a      	str	r2, [r3, #32]
}
 8006860:	46c0      	nop			; (mov r8, r8)
 8006862:	46bd      	mov	sp, r7
 8006864:	b006      	add	sp, #24
 8006866:	bd80      	pop	{r7, pc}

08006868 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	2210      	movs	r2, #16
 8006878:	4393      	bics	r3, r2
 800687a:	001a      	movs	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4a13      	ldr	r2, [pc, #76]	; (80068e4 <TIM_OC2_SetConfig+0x7c>)
 8006896:	4013      	ands	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4a12      	ldr	r2, [pc, #72]	; (80068e8 <TIM_OC2_SetConfig+0x80>)
 800689e:	4013      	ands	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	021b      	lsls	r3, r3, #8
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2220      	movs	r2, #32
 80068b2:	4393      	bics	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	4313      	orrs	r3, r2
 80068c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	621a      	str	r2, [r3, #32]
}
 80068dc:	46c0      	nop			; (mov r8, r8)
 80068de:	46bd      	mov	sp, r7
 80068e0:	b006      	add	sp, #24
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	ffff8fff 	.word	0xffff8fff
 80068e8:	fffffcff 	.word	0xfffffcff

080068ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	4a1a      	ldr	r2, [pc, #104]	; (8006964 <TIM_OC3_SetConfig+0x78>)
 80068fc:	401a      	ands	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2270      	movs	r2, #112	; 0x70
 8006918:	4393      	bics	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2203      	movs	r2, #3
 8006920:	4393      	bics	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	4a0d      	ldr	r2, [pc, #52]	; (8006968 <TIM_OC3_SetConfig+0x7c>)
 8006932:	4013      	ands	r3, r2
 8006934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	021b      	lsls	r3, r3, #8
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	621a      	str	r2, [r3, #32]
}
 800695c:	46c0      	nop			; (mov r8, r8)
 800695e:	46bd      	mov	sp, r7
 8006960:	b006      	add	sp, #24
 8006962:	bd80      	pop	{r7, pc}
 8006964:	fffffeff 	.word	0xfffffeff
 8006968:	fffffdff 	.word	0xfffffdff

0800696c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	4a1b      	ldr	r2, [pc, #108]	; (80069e8 <TIM_OC4_SetConfig+0x7c>)
 800697c:	401a      	ands	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4a15      	ldr	r2, [pc, #84]	; (80069ec <TIM_OC4_SetConfig+0x80>)
 8006998:	4013      	ands	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4a14      	ldr	r2, [pc, #80]	; (80069f0 <TIM_OC4_SetConfig+0x84>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	021b      	lsls	r3, r3, #8
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	4a10      	ldr	r2, [pc, #64]	; (80069f4 <TIM_OC4_SetConfig+0x88>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	031b      	lsls	r3, r3, #12
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	46c0      	nop			; (mov r8, r8)
 80069e0:	46bd      	mov	sp, r7
 80069e2:	b006      	add	sp, #24
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	46c0      	nop			; (mov r8, r8)
 80069e8:	ffffefff 	.word	0xffffefff
 80069ec:	ffff8fff 	.word	0xffff8fff
 80069f0:	fffffcff 	.word	0xfffffcff
 80069f4:	ffffdfff 	.word	0xffffdfff

080069f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	4393      	bics	r3, r2
 8006a12:	001a      	movs	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	22f0      	movs	r2, #240	; 0xf0
 8006a22:	4393      	bics	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	220a      	movs	r2, #10
 8006a34:	4393      	bics	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	621a      	str	r2, [r3, #32]
}
 8006a4c:	46c0      	nop			; (mov r8, r8)
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	b006      	add	sp, #24
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	2210      	movs	r2, #16
 8006a66:	4393      	bics	r3, r2
 8006a68:	001a      	movs	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	4a0d      	ldr	r2, [pc, #52]	; (8006ab4 <TIM_TI2_ConfigInputStage+0x60>)
 8006a7e:	4013      	ands	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	031b      	lsls	r3, r3, #12
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	22a0      	movs	r2, #160	; 0xa0
 8006a90:	4393      	bics	r3, r2
 8006a92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	621a      	str	r2, [r3, #32]
}
 8006aaa:	46c0      	nop			; (mov r8, r8)
 8006aac:	46bd      	mov	sp, r7
 8006aae:	b006      	add	sp, #24
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	46c0      	nop			; (mov r8, r8)
 8006ab4:	ffff0fff 	.word	0xffff0fff

08006ab8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2270      	movs	r2, #112	; 0x70
 8006acc:	4393      	bics	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	2207      	movs	r2, #7
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	609a      	str	r2, [r3, #8]
}
 8006ae2:	46c0      	nop			; (mov r8, r8)
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b004      	add	sp, #16
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	4a09      	ldr	r2, [pc, #36]	; (8006b28 <TIM_ETR_SetConfig+0x3c>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	021a      	lsls	r2, r3, #8
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	609a      	str	r2, [r3, #8]
}
 8006b20:	46c0      	nop			; (mov r8, r8)
 8006b22:	46bd      	mov	sp, r7
 8006b24:	b006      	add	sp, #24
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	ffff00ff 	.word	0xffff00ff

08006b2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	221f      	movs	r2, #31
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2201      	movs	r2, #1
 8006b40:	409a      	lsls	r2, r3
 8006b42:	0013      	movs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	43d2      	mvns	r2, r2
 8006b4e:	401a      	ands	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a1a      	ldr	r2, [r3, #32]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	211f      	movs	r1, #31
 8006b5c:	400b      	ands	r3, r1
 8006b5e:	6879      	ldr	r1, [r7, #4]
 8006b60:	4099      	lsls	r1, r3
 8006b62:	000b      	movs	r3, r1
 8006b64:	431a      	orrs	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	621a      	str	r2, [r3, #32]
}
 8006b6a:	46c0      	nop			; (mov r8, r8)
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	b006      	add	sp, #24
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2238      	movs	r2, #56	; 0x38
 8006b80:	5c9b      	ldrb	r3, [r3, r2]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e032      	b.n	8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2238      	movs	r2, #56	; 0x38
 8006b8e:	2101      	movs	r1, #1
 8006b90:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2239      	movs	r2, #57	; 0x39
 8006b96:	2102      	movs	r1, #2
 8006b98:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2270      	movs	r2, #112	; 0x70
 8006bae:	4393      	bics	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2280      	movs	r2, #128	; 0x80
 8006bc0:	4393      	bics	r3, r2
 8006bc2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2239      	movs	r2, #57	; 0x39
 8006be2:	2101      	movs	r1, #1
 8006be4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2238      	movs	r2, #56	; 0x38
 8006bea:	2100      	movs	r1, #0
 8006bec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	b004      	add	sp, #16
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2238      	movs	r2, #56	; 0x38
 8006c06:	5c9b      	ldrb	r3, [r3, r2]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_TIMEx_RemapConfig+0x18>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e00c      	b.n	8006c2a <HAL_TIMEx_RemapConfig+0x32>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2238      	movs	r2, #56	; 0x38
 8006c14:	2101      	movs	r1, #1
 8006c16:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2238      	movs	r2, #56	; 0x38
 8006c24:	2100      	movs	r1, #0
 8006c26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	b002      	add	sp, #8
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <arm_pid_init_f32>:
 8006c32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c34:	b081      	sub	sp, #4
 8006c36:	460d      	mov	r5, r1
 8006c38:	4604      	mov	r4, r0
 8006c3a:	6a06      	ldr	r6, [r0, #32]
 8006c3c:	6086      	str	r6, [r0, #8]
 8006c3e:	2003      	movs	r0, #3
 8006c40:	0781      	lsls	r1, r0, #30
 8006c42:	4630      	mov	r0, r6
 8006c44:	f7f9 feca 	bl	80009dc <__aeabi_fmul>
 8006c48:	69a7      	ldr	r7, [r4, #24]
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	f7f9 fff8 	bl	8000c40 <__aeabi_fsub>
 8006c50:	6060      	str	r0, [r4, #4]
 8006c52:	69e1      	ldr	r1, [r4, #28]
 8006c54:	4638      	mov	r0, r7
 8006c56:	f7f9 fc15 	bl	8000484 <__aeabi_fadd>
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	f7f9 fc12 	bl	8000484 <__aeabi_fadd>
 8006c60:	6020      	str	r0, [r4, #0]
 8006c62:	2d00      	cmp	r5, #0
 8006c64:	d003      	beq.n	8006c6e <arm_pid_init_f32+0x3c>
 8006c66:	2000      	movs	r0, #0
 8006c68:	60e0      	str	r0, [r4, #12]
 8006c6a:	6120      	str	r0, [r4, #16]
 8006c6c:	6160      	str	r0, [r4, #20]
 8006c6e:	b001      	add	sp, #4
 8006c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006c74 <__errno>:
 8006c74:	4b01      	ldr	r3, [pc, #4]	; (8006c7c <__errno+0x8>)
 8006c76:	6818      	ldr	r0, [r3, #0]
 8006c78:	4770      	bx	lr
 8006c7a:	46c0      	nop			; (mov r8, r8)
 8006c7c:	20000004 	.word	0x20000004

08006c80 <__libc_init_array>:
 8006c80:	b570      	push	{r4, r5, r6, lr}
 8006c82:	2600      	movs	r6, #0
 8006c84:	4d0c      	ldr	r5, [pc, #48]	; (8006cb8 <__libc_init_array+0x38>)
 8006c86:	4c0d      	ldr	r4, [pc, #52]	; (8006cbc <__libc_init_array+0x3c>)
 8006c88:	1b64      	subs	r4, r4, r5
 8006c8a:	10a4      	asrs	r4, r4, #2
 8006c8c:	42a6      	cmp	r6, r4
 8006c8e:	d109      	bne.n	8006ca4 <__libc_init_array+0x24>
 8006c90:	2600      	movs	r6, #0
 8006c92:	f001 fe87 	bl	80089a4 <_init>
 8006c96:	4d0a      	ldr	r5, [pc, #40]	; (8006cc0 <__libc_init_array+0x40>)
 8006c98:	4c0a      	ldr	r4, [pc, #40]	; (8006cc4 <__libc_init_array+0x44>)
 8006c9a:	1b64      	subs	r4, r4, r5
 8006c9c:	10a4      	asrs	r4, r4, #2
 8006c9e:	42a6      	cmp	r6, r4
 8006ca0:	d105      	bne.n	8006cae <__libc_init_array+0x2e>
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}
 8006ca4:	00b3      	lsls	r3, r6, #2
 8006ca6:	58eb      	ldr	r3, [r5, r3]
 8006ca8:	4798      	blx	r3
 8006caa:	3601      	adds	r6, #1
 8006cac:	e7ee      	b.n	8006c8c <__libc_init_array+0xc>
 8006cae:	00b3      	lsls	r3, r6, #2
 8006cb0:	58eb      	ldr	r3, [r5, r3]
 8006cb2:	4798      	blx	r3
 8006cb4:	3601      	adds	r6, #1
 8006cb6:	e7f2      	b.n	8006c9e <__libc_init_array+0x1e>
 8006cb8:	08008de0 	.word	0x08008de0
 8006cbc:	08008de0 	.word	0x08008de0
 8006cc0:	08008de0 	.word	0x08008de0
 8006cc4:	08008de4 	.word	0x08008de4

08006cc8 <memcpy>:
 8006cc8:	2300      	movs	r3, #0
 8006cca:	b510      	push	{r4, lr}
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d100      	bne.n	8006cd2 <memcpy+0xa>
 8006cd0:	bd10      	pop	{r4, pc}
 8006cd2:	5ccc      	ldrb	r4, [r1, r3]
 8006cd4:	54c4      	strb	r4, [r0, r3]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	e7f8      	b.n	8006ccc <memcpy+0x4>

08006cda <memset>:
 8006cda:	0003      	movs	r3, r0
 8006cdc:	1812      	adds	r2, r2, r0
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d100      	bne.n	8006ce4 <memset+0xa>
 8006ce2:	4770      	bx	lr
 8006ce4:	7019      	strb	r1, [r3, #0]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	e7f9      	b.n	8006cde <memset+0x4>
	...

08006cec <_puts_r>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	0005      	movs	r5, r0
 8006cf0:	000e      	movs	r6, r1
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d004      	beq.n	8006d00 <_puts_r+0x14>
 8006cf6:	6983      	ldr	r3, [r0, #24]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <_puts_r+0x14>
 8006cfc:	f000 fa24 	bl	8007148 <__sinit>
 8006d00:	69ab      	ldr	r3, [r5, #24]
 8006d02:	68ac      	ldr	r4, [r5, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <_puts_r+0x22>
 8006d08:	0028      	movs	r0, r5
 8006d0a:	f000 fa1d 	bl	8007148 <__sinit>
 8006d0e:	4b24      	ldr	r3, [pc, #144]	; (8006da0 <_puts_r+0xb4>)
 8006d10:	429c      	cmp	r4, r3
 8006d12:	d10f      	bne.n	8006d34 <_puts_r+0x48>
 8006d14:	686c      	ldr	r4, [r5, #4]
 8006d16:	89a3      	ldrh	r3, [r4, #12]
 8006d18:	071b      	lsls	r3, r3, #28
 8006d1a:	d502      	bpl.n	8006d22 <_puts_r+0x36>
 8006d1c:	6923      	ldr	r3, [r4, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d11f      	bne.n	8006d62 <_puts_r+0x76>
 8006d22:	0021      	movs	r1, r4
 8006d24:	0028      	movs	r0, r5
 8006d26:	f000 f8a1 	bl	8006e6c <__swsetup_r>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d019      	beq.n	8006d62 <_puts_r+0x76>
 8006d2e:	2001      	movs	r0, #1
 8006d30:	4240      	negs	r0, r0
 8006d32:	bd70      	pop	{r4, r5, r6, pc}
 8006d34:	4b1b      	ldr	r3, [pc, #108]	; (8006da4 <_puts_r+0xb8>)
 8006d36:	429c      	cmp	r4, r3
 8006d38:	d101      	bne.n	8006d3e <_puts_r+0x52>
 8006d3a:	68ac      	ldr	r4, [r5, #8]
 8006d3c:	e7eb      	b.n	8006d16 <_puts_r+0x2a>
 8006d3e:	4b1a      	ldr	r3, [pc, #104]	; (8006da8 <_puts_r+0xbc>)
 8006d40:	429c      	cmp	r4, r3
 8006d42:	d1e8      	bne.n	8006d16 <_puts_r+0x2a>
 8006d44:	68ec      	ldr	r4, [r5, #12]
 8006d46:	e7e6      	b.n	8006d16 <_puts_r+0x2a>
 8006d48:	3601      	adds	r6, #1
 8006d4a:	60a3      	str	r3, [r4, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	da04      	bge.n	8006d5a <_puts_r+0x6e>
 8006d50:	69a2      	ldr	r2, [r4, #24]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	dc16      	bgt.n	8006d84 <_puts_r+0x98>
 8006d56:	290a      	cmp	r1, #10
 8006d58:	d014      	beq.n	8006d84 <_puts_r+0x98>
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	1c5a      	adds	r2, r3, #1
 8006d5e:	6022      	str	r2, [r4, #0]
 8006d60:	7019      	strb	r1, [r3, #0]
 8006d62:	68a3      	ldr	r3, [r4, #8]
 8006d64:	7831      	ldrb	r1, [r6, #0]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	2900      	cmp	r1, #0
 8006d6a:	d1ed      	bne.n	8006d48 <_puts_r+0x5c>
 8006d6c:	60a3      	str	r3, [r4, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	da0f      	bge.n	8006d92 <_puts_r+0xa6>
 8006d72:	0022      	movs	r2, r4
 8006d74:	310a      	adds	r1, #10
 8006d76:	0028      	movs	r0, r5
 8006d78:	f000 f822 	bl	8006dc0 <__swbuf_r>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d0d6      	beq.n	8006d2e <_puts_r+0x42>
 8006d80:	200a      	movs	r0, #10
 8006d82:	e7d6      	b.n	8006d32 <_puts_r+0x46>
 8006d84:	0022      	movs	r2, r4
 8006d86:	0028      	movs	r0, r5
 8006d88:	f000 f81a 	bl	8006dc0 <__swbuf_r>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d1e8      	bne.n	8006d62 <_puts_r+0x76>
 8006d90:	e7cd      	b.n	8006d2e <_puts_r+0x42>
 8006d92:	200a      	movs	r0, #10
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	6022      	str	r2, [r4, #0]
 8006d9a:	7018      	strb	r0, [r3, #0]
 8006d9c:	e7c9      	b.n	8006d32 <_puts_r+0x46>
 8006d9e:	46c0      	nop			; (mov r8, r8)
 8006da0:	08008ba4 	.word	0x08008ba4
 8006da4:	08008bc4 	.word	0x08008bc4
 8006da8:	08008b84 	.word	0x08008b84

08006dac <puts>:
 8006dac:	b510      	push	{r4, lr}
 8006dae:	4b03      	ldr	r3, [pc, #12]	; (8006dbc <puts+0x10>)
 8006db0:	0001      	movs	r1, r0
 8006db2:	6818      	ldr	r0, [r3, #0]
 8006db4:	f7ff ff9a 	bl	8006cec <_puts_r>
 8006db8:	bd10      	pop	{r4, pc}
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	20000004 	.word	0x20000004

08006dc0 <__swbuf_r>:
 8006dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc2:	0005      	movs	r5, r0
 8006dc4:	000e      	movs	r6, r1
 8006dc6:	0014      	movs	r4, r2
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d004      	beq.n	8006dd6 <__swbuf_r+0x16>
 8006dcc:	6983      	ldr	r3, [r0, #24]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <__swbuf_r+0x16>
 8006dd2:	f000 f9b9 	bl	8007148 <__sinit>
 8006dd6:	4b22      	ldr	r3, [pc, #136]	; (8006e60 <__swbuf_r+0xa0>)
 8006dd8:	429c      	cmp	r4, r3
 8006dda:	d12d      	bne.n	8006e38 <__swbuf_r+0x78>
 8006ddc:	686c      	ldr	r4, [r5, #4]
 8006dde:	69a3      	ldr	r3, [r4, #24]
 8006de0:	60a3      	str	r3, [r4, #8]
 8006de2:	89a3      	ldrh	r3, [r4, #12]
 8006de4:	071b      	lsls	r3, r3, #28
 8006de6:	d531      	bpl.n	8006e4c <__swbuf_r+0x8c>
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d02e      	beq.n	8006e4c <__swbuf_r+0x8c>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	6922      	ldr	r2, [r4, #16]
 8006df2:	b2f7      	uxtb	r7, r6
 8006df4:	1a98      	subs	r0, r3, r2
 8006df6:	6963      	ldr	r3, [r4, #20]
 8006df8:	b2f6      	uxtb	r6, r6
 8006dfa:	4283      	cmp	r3, r0
 8006dfc:	dc05      	bgt.n	8006e0a <__swbuf_r+0x4a>
 8006dfe:	0021      	movs	r1, r4
 8006e00:	0028      	movs	r0, r5
 8006e02:	f000 f933 	bl	800706c <_fflush_r>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d126      	bne.n	8006e58 <__swbuf_r+0x98>
 8006e0a:	68a3      	ldr	r3, [r4, #8]
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	60a3      	str	r3, [r4, #8]
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	6022      	str	r2, [r4, #0]
 8006e18:	701f      	strb	r7, [r3, #0]
 8006e1a:	6963      	ldr	r3, [r4, #20]
 8006e1c:	4283      	cmp	r3, r0
 8006e1e:	d004      	beq.n	8006e2a <__swbuf_r+0x6a>
 8006e20:	89a3      	ldrh	r3, [r4, #12]
 8006e22:	07db      	lsls	r3, r3, #31
 8006e24:	d51a      	bpl.n	8006e5c <__swbuf_r+0x9c>
 8006e26:	2e0a      	cmp	r6, #10
 8006e28:	d118      	bne.n	8006e5c <__swbuf_r+0x9c>
 8006e2a:	0021      	movs	r1, r4
 8006e2c:	0028      	movs	r0, r5
 8006e2e:	f000 f91d 	bl	800706c <_fflush_r>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d012      	beq.n	8006e5c <__swbuf_r+0x9c>
 8006e36:	e00f      	b.n	8006e58 <__swbuf_r+0x98>
 8006e38:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <__swbuf_r+0xa4>)
 8006e3a:	429c      	cmp	r4, r3
 8006e3c:	d101      	bne.n	8006e42 <__swbuf_r+0x82>
 8006e3e:	68ac      	ldr	r4, [r5, #8]
 8006e40:	e7cd      	b.n	8006dde <__swbuf_r+0x1e>
 8006e42:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <__swbuf_r+0xa8>)
 8006e44:	429c      	cmp	r4, r3
 8006e46:	d1ca      	bne.n	8006dde <__swbuf_r+0x1e>
 8006e48:	68ec      	ldr	r4, [r5, #12]
 8006e4a:	e7c8      	b.n	8006dde <__swbuf_r+0x1e>
 8006e4c:	0021      	movs	r1, r4
 8006e4e:	0028      	movs	r0, r5
 8006e50:	f000 f80c 	bl	8006e6c <__swsetup_r>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d0ca      	beq.n	8006dee <__swbuf_r+0x2e>
 8006e58:	2601      	movs	r6, #1
 8006e5a:	4276      	negs	r6, r6
 8006e5c:	0030      	movs	r0, r6
 8006e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e60:	08008ba4 	.word	0x08008ba4
 8006e64:	08008bc4 	.word	0x08008bc4
 8006e68:	08008b84 	.word	0x08008b84

08006e6c <__swsetup_r>:
 8006e6c:	4b36      	ldr	r3, [pc, #216]	; (8006f48 <__swsetup_r+0xdc>)
 8006e6e:	b570      	push	{r4, r5, r6, lr}
 8006e70:	681d      	ldr	r5, [r3, #0]
 8006e72:	0006      	movs	r6, r0
 8006e74:	000c      	movs	r4, r1
 8006e76:	2d00      	cmp	r5, #0
 8006e78:	d005      	beq.n	8006e86 <__swsetup_r+0x1a>
 8006e7a:	69ab      	ldr	r3, [r5, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d102      	bne.n	8006e86 <__swsetup_r+0x1a>
 8006e80:	0028      	movs	r0, r5
 8006e82:	f000 f961 	bl	8007148 <__sinit>
 8006e86:	4b31      	ldr	r3, [pc, #196]	; (8006f4c <__swsetup_r+0xe0>)
 8006e88:	429c      	cmp	r4, r3
 8006e8a:	d10f      	bne.n	8006eac <__swsetup_r+0x40>
 8006e8c:	686c      	ldr	r4, [r5, #4]
 8006e8e:	230c      	movs	r3, #12
 8006e90:	5ee2      	ldrsh	r2, [r4, r3]
 8006e92:	b293      	uxth	r3, r2
 8006e94:	0719      	lsls	r1, r3, #28
 8006e96:	d42d      	bmi.n	8006ef4 <__swsetup_r+0x88>
 8006e98:	06d9      	lsls	r1, r3, #27
 8006e9a:	d411      	bmi.n	8006ec0 <__swsetup_r+0x54>
 8006e9c:	2309      	movs	r3, #9
 8006e9e:	2001      	movs	r0, #1
 8006ea0:	6033      	str	r3, [r6, #0]
 8006ea2:	3337      	adds	r3, #55	; 0x37
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	81a3      	strh	r3, [r4, #12]
 8006ea8:	4240      	negs	r0, r0
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}
 8006eac:	4b28      	ldr	r3, [pc, #160]	; (8006f50 <__swsetup_r+0xe4>)
 8006eae:	429c      	cmp	r4, r3
 8006eb0:	d101      	bne.n	8006eb6 <__swsetup_r+0x4a>
 8006eb2:	68ac      	ldr	r4, [r5, #8]
 8006eb4:	e7eb      	b.n	8006e8e <__swsetup_r+0x22>
 8006eb6:	4b27      	ldr	r3, [pc, #156]	; (8006f54 <__swsetup_r+0xe8>)
 8006eb8:	429c      	cmp	r4, r3
 8006eba:	d1e8      	bne.n	8006e8e <__swsetup_r+0x22>
 8006ebc:	68ec      	ldr	r4, [r5, #12]
 8006ebe:	e7e6      	b.n	8006e8e <__swsetup_r+0x22>
 8006ec0:	075b      	lsls	r3, r3, #29
 8006ec2:	d513      	bpl.n	8006eec <__swsetup_r+0x80>
 8006ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ec6:	2900      	cmp	r1, #0
 8006ec8:	d008      	beq.n	8006edc <__swsetup_r+0x70>
 8006eca:	0023      	movs	r3, r4
 8006ecc:	3344      	adds	r3, #68	; 0x44
 8006ece:	4299      	cmp	r1, r3
 8006ed0:	d002      	beq.n	8006ed8 <__swsetup_r+0x6c>
 8006ed2:	0030      	movs	r0, r6
 8006ed4:	f000 fa38 	bl	8007348 <_free_r>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	6363      	str	r3, [r4, #52]	; 0x34
 8006edc:	2224      	movs	r2, #36	; 0x24
 8006ede:	89a3      	ldrh	r3, [r4, #12]
 8006ee0:	4393      	bics	r3, r2
 8006ee2:	81a3      	strh	r3, [r4, #12]
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	6063      	str	r3, [r4, #4]
 8006ee8:	6923      	ldr	r3, [r4, #16]
 8006eea:	6023      	str	r3, [r4, #0]
 8006eec:	2308      	movs	r3, #8
 8006eee:	89a2      	ldrh	r2, [r4, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	81a3      	strh	r3, [r4, #12]
 8006ef4:	6923      	ldr	r3, [r4, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10b      	bne.n	8006f12 <__swsetup_r+0xa6>
 8006efa:	21a0      	movs	r1, #160	; 0xa0
 8006efc:	2280      	movs	r2, #128	; 0x80
 8006efe:	89a3      	ldrh	r3, [r4, #12]
 8006f00:	0089      	lsls	r1, r1, #2
 8006f02:	0092      	lsls	r2, r2, #2
 8006f04:	400b      	ands	r3, r1
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d003      	beq.n	8006f12 <__swsetup_r+0xa6>
 8006f0a:	0021      	movs	r1, r4
 8006f0c:	0030      	movs	r0, r6
 8006f0e:	f000 f9d7 	bl	80072c0 <__smakebuf_r>
 8006f12:	2301      	movs	r3, #1
 8006f14:	89a2      	ldrh	r2, [r4, #12]
 8006f16:	4013      	ands	r3, r2
 8006f18:	d011      	beq.n	8006f3e <__swsetup_r+0xd2>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60a3      	str	r3, [r4, #8]
 8006f1e:	6963      	ldr	r3, [r4, #20]
 8006f20:	425b      	negs	r3, r3
 8006f22:	61a3      	str	r3, [r4, #24]
 8006f24:	2000      	movs	r0, #0
 8006f26:	6923      	ldr	r3, [r4, #16]
 8006f28:	4283      	cmp	r3, r0
 8006f2a:	d1be      	bne.n	8006eaa <__swsetup_r+0x3e>
 8006f2c:	230c      	movs	r3, #12
 8006f2e:	5ee2      	ldrsh	r2, [r4, r3]
 8006f30:	0613      	lsls	r3, r2, #24
 8006f32:	d5ba      	bpl.n	8006eaa <__swsetup_r+0x3e>
 8006f34:	2340      	movs	r3, #64	; 0x40
 8006f36:	4313      	orrs	r3, r2
 8006f38:	81a3      	strh	r3, [r4, #12]
 8006f3a:	3801      	subs	r0, #1
 8006f3c:	e7b5      	b.n	8006eaa <__swsetup_r+0x3e>
 8006f3e:	0792      	lsls	r2, r2, #30
 8006f40:	d400      	bmi.n	8006f44 <__swsetup_r+0xd8>
 8006f42:	6963      	ldr	r3, [r4, #20]
 8006f44:	60a3      	str	r3, [r4, #8]
 8006f46:	e7ed      	b.n	8006f24 <__swsetup_r+0xb8>
 8006f48:	20000004 	.word	0x20000004
 8006f4c:	08008ba4 	.word	0x08008ba4
 8006f50:	08008bc4 	.word	0x08008bc4
 8006f54:	08008b84 	.word	0x08008b84

08006f58 <__sflush_r>:
 8006f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f5a:	898a      	ldrh	r2, [r1, #12]
 8006f5c:	0005      	movs	r5, r0
 8006f5e:	000c      	movs	r4, r1
 8006f60:	0713      	lsls	r3, r2, #28
 8006f62:	d460      	bmi.n	8007026 <__sflush_r+0xce>
 8006f64:	684b      	ldr	r3, [r1, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	dc04      	bgt.n	8006f74 <__sflush_r+0x1c>
 8006f6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	dc01      	bgt.n	8006f74 <__sflush_r+0x1c>
 8006f70:	2000      	movs	r0, #0
 8006f72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f74:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006f76:	2f00      	cmp	r7, #0
 8006f78:	d0fa      	beq.n	8006f70 <__sflush_r+0x18>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	682e      	ldr	r6, [r5, #0]
 8006f7e:	602b      	str	r3, [r5, #0]
 8006f80:	2380      	movs	r3, #128	; 0x80
 8006f82:	015b      	lsls	r3, r3, #5
 8006f84:	6a21      	ldr	r1, [r4, #32]
 8006f86:	401a      	ands	r2, r3
 8006f88:	d034      	beq.n	8006ff4 <__sflush_r+0x9c>
 8006f8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	075b      	lsls	r3, r3, #29
 8006f90:	d506      	bpl.n	8006fa0 <__sflush_r+0x48>
 8006f92:	6863      	ldr	r3, [r4, #4]
 8006f94:	1ac0      	subs	r0, r0, r3
 8006f96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <__sflush_r+0x48>
 8006f9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f9e:	1ac0      	subs	r0, r0, r3
 8006fa0:	0002      	movs	r2, r0
 8006fa2:	6a21      	ldr	r1, [r4, #32]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	0028      	movs	r0, r5
 8006fa8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006faa:	47b8      	blx	r7
 8006fac:	89a1      	ldrh	r1, [r4, #12]
 8006fae:	1c43      	adds	r3, r0, #1
 8006fb0:	d106      	bne.n	8006fc0 <__sflush_r+0x68>
 8006fb2:	682b      	ldr	r3, [r5, #0]
 8006fb4:	2b1d      	cmp	r3, #29
 8006fb6:	d830      	bhi.n	800701a <__sflush_r+0xc2>
 8006fb8:	4a2b      	ldr	r2, [pc, #172]	; (8007068 <__sflush_r+0x110>)
 8006fba:	40da      	lsrs	r2, r3
 8006fbc:	07d3      	lsls	r3, r2, #31
 8006fbe:	d52c      	bpl.n	800701a <__sflush_r+0xc2>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	6063      	str	r3, [r4, #4]
 8006fc4:	6923      	ldr	r3, [r4, #16]
 8006fc6:	6023      	str	r3, [r4, #0]
 8006fc8:	04cb      	lsls	r3, r1, #19
 8006fca:	d505      	bpl.n	8006fd8 <__sflush_r+0x80>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <__sflush_r+0x7e>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d100      	bne.n	8006fd8 <__sflush_r+0x80>
 8006fd6:	6560      	str	r0, [r4, #84]	; 0x54
 8006fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fda:	602e      	str	r6, [r5, #0]
 8006fdc:	2900      	cmp	r1, #0
 8006fde:	d0c7      	beq.n	8006f70 <__sflush_r+0x18>
 8006fe0:	0023      	movs	r3, r4
 8006fe2:	3344      	adds	r3, #68	; 0x44
 8006fe4:	4299      	cmp	r1, r3
 8006fe6:	d002      	beq.n	8006fee <__sflush_r+0x96>
 8006fe8:	0028      	movs	r0, r5
 8006fea:	f000 f9ad 	bl	8007348 <_free_r>
 8006fee:	2000      	movs	r0, #0
 8006ff0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ff2:	e7be      	b.n	8006f72 <__sflush_r+0x1a>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	0028      	movs	r0, r5
 8006ff8:	47b8      	blx	r7
 8006ffa:	1c43      	adds	r3, r0, #1
 8006ffc:	d1c6      	bne.n	8006f8c <__sflush_r+0x34>
 8006ffe:	682b      	ldr	r3, [r5, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0c3      	beq.n	8006f8c <__sflush_r+0x34>
 8007004:	2b1d      	cmp	r3, #29
 8007006:	d001      	beq.n	800700c <__sflush_r+0xb4>
 8007008:	2b16      	cmp	r3, #22
 800700a:	d101      	bne.n	8007010 <__sflush_r+0xb8>
 800700c:	602e      	str	r6, [r5, #0]
 800700e:	e7af      	b.n	8006f70 <__sflush_r+0x18>
 8007010:	2340      	movs	r3, #64	; 0x40
 8007012:	89a2      	ldrh	r2, [r4, #12]
 8007014:	4313      	orrs	r3, r2
 8007016:	81a3      	strh	r3, [r4, #12]
 8007018:	e7ab      	b.n	8006f72 <__sflush_r+0x1a>
 800701a:	2340      	movs	r3, #64	; 0x40
 800701c:	430b      	orrs	r3, r1
 800701e:	2001      	movs	r0, #1
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	4240      	negs	r0, r0
 8007024:	e7a5      	b.n	8006f72 <__sflush_r+0x1a>
 8007026:	690f      	ldr	r7, [r1, #16]
 8007028:	2f00      	cmp	r7, #0
 800702a:	d0a1      	beq.n	8006f70 <__sflush_r+0x18>
 800702c:	680b      	ldr	r3, [r1, #0]
 800702e:	600f      	str	r7, [r1, #0]
 8007030:	1bdb      	subs	r3, r3, r7
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	2300      	movs	r3, #0
 8007036:	0792      	lsls	r2, r2, #30
 8007038:	d100      	bne.n	800703c <__sflush_r+0xe4>
 800703a:	694b      	ldr	r3, [r1, #20]
 800703c:	60a3      	str	r3, [r4, #8]
 800703e:	9b01      	ldr	r3, [sp, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	dc00      	bgt.n	8007046 <__sflush_r+0xee>
 8007044:	e794      	b.n	8006f70 <__sflush_r+0x18>
 8007046:	9b01      	ldr	r3, [sp, #4]
 8007048:	003a      	movs	r2, r7
 800704a:	6a21      	ldr	r1, [r4, #32]
 800704c:	0028      	movs	r0, r5
 800704e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007050:	47b0      	blx	r6
 8007052:	2800      	cmp	r0, #0
 8007054:	dc03      	bgt.n	800705e <__sflush_r+0x106>
 8007056:	2340      	movs	r3, #64	; 0x40
 8007058:	89a2      	ldrh	r2, [r4, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	e7df      	b.n	800701e <__sflush_r+0xc6>
 800705e:	9b01      	ldr	r3, [sp, #4]
 8007060:	183f      	adds	r7, r7, r0
 8007062:	1a1b      	subs	r3, r3, r0
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	e7ea      	b.n	800703e <__sflush_r+0xe6>
 8007068:	20400001 	.word	0x20400001

0800706c <_fflush_r>:
 800706c:	690b      	ldr	r3, [r1, #16]
 800706e:	b570      	push	{r4, r5, r6, lr}
 8007070:	0005      	movs	r5, r0
 8007072:	000c      	movs	r4, r1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <_fflush_r+0x10>
 8007078:	2000      	movs	r0, #0
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	2800      	cmp	r0, #0
 800707e:	d004      	beq.n	800708a <_fflush_r+0x1e>
 8007080:	6983      	ldr	r3, [r0, #24]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <_fflush_r+0x1e>
 8007086:	f000 f85f 	bl	8007148 <__sinit>
 800708a:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <_fflush_r+0x4c>)
 800708c:	429c      	cmp	r4, r3
 800708e:	d109      	bne.n	80070a4 <_fflush_r+0x38>
 8007090:	686c      	ldr	r4, [r5, #4]
 8007092:	220c      	movs	r2, #12
 8007094:	5ea3      	ldrsh	r3, [r4, r2]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0ee      	beq.n	8007078 <_fflush_r+0xc>
 800709a:	0021      	movs	r1, r4
 800709c:	0028      	movs	r0, r5
 800709e:	f7ff ff5b 	bl	8006f58 <__sflush_r>
 80070a2:	e7ea      	b.n	800707a <_fflush_r+0xe>
 80070a4:	4b05      	ldr	r3, [pc, #20]	; (80070bc <_fflush_r+0x50>)
 80070a6:	429c      	cmp	r4, r3
 80070a8:	d101      	bne.n	80070ae <_fflush_r+0x42>
 80070aa:	68ac      	ldr	r4, [r5, #8]
 80070ac:	e7f1      	b.n	8007092 <_fflush_r+0x26>
 80070ae:	4b04      	ldr	r3, [pc, #16]	; (80070c0 <_fflush_r+0x54>)
 80070b0:	429c      	cmp	r4, r3
 80070b2:	d1ee      	bne.n	8007092 <_fflush_r+0x26>
 80070b4:	68ec      	ldr	r4, [r5, #12]
 80070b6:	e7ec      	b.n	8007092 <_fflush_r+0x26>
 80070b8:	08008ba4 	.word	0x08008ba4
 80070bc:	08008bc4 	.word	0x08008bc4
 80070c0:	08008b84 	.word	0x08008b84

080070c4 <std>:
 80070c4:	2300      	movs	r3, #0
 80070c6:	b510      	push	{r4, lr}
 80070c8:	0004      	movs	r4, r0
 80070ca:	6003      	str	r3, [r0, #0]
 80070cc:	6043      	str	r3, [r0, #4]
 80070ce:	6083      	str	r3, [r0, #8]
 80070d0:	8181      	strh	r1, [r0, #12]
 80070d2:	6643      	str	r3, [r0, #100]	; 0x64
 80070d4:	81c2      	strh	r2, [r0, #14]
 80070d6:	6103      	str	r3, [r0, #16]
 80070d8:	6143      	str	r3, [r0, #20]
 80070da:	6183      	str	r3, [r0, #24]
 80070dc:	0019      	movs	r1, r3
 80070de:	2208      	movs	r2, #8
 80070e0:	305c      	adds	r0, #92	; 0x5c
 80070e2:	f7ff fdfa 	bl	8006cda <memset>
 80070e6:	4b05      	ldr	r3, [pc, #20]	; (80070fc <std+0x38>)
 80070e8:	6224      	str	r4, [r4, #32]
 80070ea:	6263      	str	r3, [r4, #36]	; 0x24
 80070ec:	4b04      	ldr	r3, [pc, #16]	; (8007100 <std+0x3c>)
 80070ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80070f0:	4b04      	ldr	r3, [pc, #16]	; (8007104 <std+0x40>)
 80070f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070f4:	4b04      	ldr	r3, [pc, #16]	; (8007108 <std+0x44>)
 80070f6:	6323      	str	r3, [r4, #48]	; 0x30
 80070f8:	bd10      	pop	{r4, pc}
 80070fa:	46c0      	nop			; (mov r8, r8)
 80070fc:	080074bd 	.word	0x080074bd
 8007100:	080074e5 	.word	0x080074e5
 8007104:	0800751d 	.word	0x0800751d
 8007108:	08007549 	.word	0x08007549

0800710c <_cleanup_r>:
 800710c:	b510      	push	{r4, lr}
 800710e:	4902      	ldr	r1, [pc, #8]	; (8007118 <_cleanup_r+0xc>)
 8007110:	f000 f88c 	bl	800722c <_fwalk_reent>
 8007114:	bd10      	pop	{r4, pc}
 8007116:	46c0      	nop			; (mov r8, r8)
 8007118:	0800706d 	.word	0x0800706d

0800711c <__sfmoreglue>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	2568      	movs	r5, #104	; 0x68
 8007120:	1e4a      	subs	r2, r1, #1
 8007122:	4355      	muls	r5, r2
 8007124:	000e      	movs	r6, r1
 8007126:	0029      	movs	r1, r5
 8007128:	3174      	adds	r1, #116	; 0x74
 800712a:	f000 f957 	bl	80073dc <_malloc_r>
 800712e:	1e04      	subs	r4, r0, #0
 8007130:	d008      	beq.n	8007144 <__sfmoreglue+0x28>
 8007132:	2100      	movs	r1, #0
 8007134:	002a      	movs	r2, r5
 8007136:	6001      	str	r1, [r0, #0]
 8007138:	6046      	str	r6, [r0, #4]
 800713a:	300c      	adds	r0, #12
 800713c:	60a0      	str	r0, [r4, #8]
 800713e:	3268      	adds	r2, #104	; 0x68
 8007140:	f7ff fdcb 	bl	8006cda <memset>
 8007144:	0020      	movs	r0, r4
 8007146:	bd70      	pop	{r4, r5, r6, pc}

08007148 <__sinit>:
 8007148:	6983      	ldr	r3, [r0, #24]
 800714a:	b513      	push	{r0, r1, r4, lr}
 800714c:	0004      	movs	r4, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d128      	bne.n	80071a4 <__sinit+0x5c>
 8007152:	6483      	str	r3, [r0, #72]	; 0x48
 8007154:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007156:	6503      	str	r3, [r0, #80]	; 0x50
 8007158:	4b13      	ldr	r3, [pc, #76]	; (80071a8 <__sinit+0x60>)
 800715a:	4a14      	ldr	r2, [pc, #80]	; (80071ac <__sinit+0x64>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6282      	str	r2, [r0, #40]	; 0x28
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	4298      	cmp	r0, r3
 8007164:	d101      	bne.n	800716a <__sinit+0x22>
 8007166:	2301      	movs	r3, #1
 8007168:	6183      	str	r3, [r0, #24]
 800716a:	0020      	movs	r0, r4
 800716c:	f000 f820 	bl	80071b0 <__sfp>
 8007170:	6060      	str	r0, [r4, #4]
 8007172:	0020      	movs	r0, r4
 8007174:	f000 f81c 	bl	80071b0 <__sfp>
 8007178:	60a0      	str	r0, [r4, #8]
 800717a:	0020      	movs	r0, r4
 800717c:	f000 f818 	bl	80071b0 <__sfp>
 8007180:	2200      	movs	r2, #0
 8007182:	60e0      	str	r0, [r4, #12]
 8007184:	2104      	movs	r1, #4
 8007186:	6860      	ldr	r0, [r4, #4]
 8007188:	f7ff ff9c 	bl	80070c4 <std>
 800718c:	2201      	movs	r2, #1
 800718e:	2109      	movs	r1, #9
 8007190:	68a0      	ldr	r0, [r4, #8]
 8007192:	f7ff ff97 	bl	80070c4 <std>
 8007196:	2202      	movs	r2, #2
 8007198:	2112      	movs	r1, #18
 800719a:	68e0      	ldr	r0, [r4, #12]
 800719c:	f7ff ff92 	bl	80070c4 <std>
 80071a0:	2301      	movs	r3, #1
 80071a2:	61a3      	str	r3, [r4, #24]
 80071a4:	bd13      	pop	{r0, r1, r4, pc}
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	08008b80 	.word	0x08008b80
 80071ac:	0800710d 	.word	0x0800710d

080071b0 <__sfp>:
 80071b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b2:	4b1c      	ldr	r3, [pc, #112]	; (8007224 <__sfp+0x74>)
 80071b4:	0007      	movs	r7, r0
 80071b6:	681e      	ldr	r6, [r3, #0]
 80071b8:	69b3      	ldr	r3, [r6, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d102      	bne.n	80071c4 <__sfp+0x14>
 80071be:	0030      	movs	r0, r6
 80071c0:	f7ff ffc2 	bl	8007148 <__sinit>
 80071c4:	3648      	adds	r6, #72	; 0x48
 80071c6:	68b4      	ldr	r4, [r6, #8]
 80071c8:	6873      	ldr	r3, [r6, #4]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	d504      	bpl.n	80071d8 <__sfp+0x28>
 80071ce:	6833      	ldr	r3, [r6, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d007      	beq.n	80071e4 <__sfp+0x34>
 80071d4:	6836      	ldr	r6, [r6, #0]
 80071d6:	e7f6      	b.n	80071c6 <__sfp+0x16>
 80071d8:	220c      	movs	r2, #12
 80071da:	5ea5      	ldrsh	r5, [r4, r2]
 80071dc:	2d00      	cmp	r5, #0
 80071de:	d00d      	beq.n	80071fc <__sfp+0x4c>
 80071e0:	3468      	adds	r4, #104	; 0x68
 80071e2:	e7f2      	b.n	80071ca <__sfp+0x1a>
 80071e4:	2104      	movs	r1, #4
 80071e6:	0038      	movs	r0, r7
 80071e8:	f7ff ff98 	bl	800711c <__sfmoreglue>
 80071ec:	6030      	str	r0, [r6, #0]
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d1f0      	bne.n	80071d4 <__sfp+0x24>
 80071f2:	230c      	movs	r3, #12
 80071f4:	0004      	movs	r4, r0
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	0020      	movs	r0, r4
 80071fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071fc:	0020      	movs	r0, r4
 80071fe:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <__sfp+0x78>)
 8007200:	6665      	str	r5, [r4, #100]	; 0x64
 8007202:	6025      	str	r5, [r4, #0]
 8007204:	6065      	str	r5, [r4, #4]
 8007206:	60a5      	str	r5, [r4, #8]
 8007208:	60e3      	str	r3, [r4, #12]
 800720a:	6125      	str	r5, [r4, #16]
 800720c:	6165      	str	r5, [r4, #20]
 800720e:	61a5      	str	r5, [r4, #24]
 8007210:	2208      	movs	r2, #8
 8007212:	0029      	movs	r1, r5
 8007214:	305c      	adds	r0, #92	; 0x5c
 8007216:	f7ff fd60 	bl	8006cda <memset>
 800721a:	6365      	str	r5, [r4, #52]	; 0x34
 800721c:	63a5      	str	r5, [r4, #56]	; 0x38
 800721e:	64a5      	str	r5, [r4, #72]	; 0x48
 8007220:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007222:	e7e9      	b.n	80071f8 <__sfp+0x48>
 8007224:	08008b80 	.word	0x08008b80
 8007228:	ffff0001 	.word	0xffff0001

0800722c <_fwalk_reent>:
 800722c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800722e:	0004      	movs	r4, r0
 8007230:	0007      	movs	r7, r0
 8007232:	2600      	movs	r6, #0
 8007234:	9101      	str	r1, [sp, #4]
 8007236:	3448      	adds	r4, #72	; 0x48
 8007238:	2c00      	cmp	r4, #0
 800723a:	d101      	bne.n	8007240 <_fwalk_reent+0x14>
 800723c:	0030      	movs	r0, r6
 800723e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007240:	6863      	ldr	r3, [r4, #4]
 8007242:	68a5      	ldr	r5, [r4, #8]
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	9b00      	ldr	r3, [sp, #0]
 8007248:	3b01      	subs	r3, #1
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	d501      	bpl.n	8007252 <_fwalk_reent+0x26>
 800724e:	6824      	ldr	r4, [r4, #0]
 8007250:	e7f2      	b.n	8007238 <_fwalk_reent+0xc>
 8007252:	89ab      	ldrh	r3, [r5, #12]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d908      	bls.n	800726a <_fwalk_reent+0x3e>
 8007258:	220e      	movs	r2, #14
 800725a:	5eab      	ldrsh	r3, [r5, r2]
 800725c:	3301      	adds	r3, #1
 800725e:	d004      	beq.n	800726a <_fwalk_reent+0x3e>
 8007260:	0029      	movs	r1, r5
 8007262:	0038      	movs	r0, r7
 8007264:	9b01      	ldr	r3, [sp, #4]
 8007266:	4798      	blx	r3
 8007268:	4306      	orrs	r6, r0
 800726a:	3568      	adds	r5, #104	; 0x68
 800726c:	e7eb      	b.n	8007246 <_fwalk_reent+0x1a>
	...

08007270 <__swhatbuf_r>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	000e      	movs	r6, r1
 8007274:	001d      	movs	r5, r3
 8007276:	230e      	movs	r3, #14
 8007278:	5ec9      	ldrsh	r1, [r1, r3]
 800727a:	b096      	sub	sp, #88	; 0x58
 800727c:	0014      	movs	r4, r2
 800727e:	2900      	cmp	r1, #0
 8007280:	da07      	bge.n	8007292 <__swhatbuf_r+0x22>
 8007282:	2300      	movs	r3, #0
 8007284:	602b      	str	r3, [r5, #0]
 8007286:	89b3      	ldrh	r3, [r6, #12]
 8007288:	061b      	lsls	r3, r3, #24
 800728a:	d411      	bmi.n	80072b0 <__swhatbuf_r+0x40>
 800728c:	2380      	movs	r3, #128	; 0x80
 800728e:	00db      	lsls	r3, r3, #3
 8007290:	e00f      	b.n	80072b2 <__swhatbuf_r+0x42>
 8007292:	466a      	mov	r2, sp
 8007294:	f000 f984 	bl	80075a0 <_fstat_r>
 8007298:	2800      	cmp	r0, #0
 800729a:	dbf2      	blt.n	8007282 <__swhatbuf_r+0x12>
 800729c:	22f0      	movs	r2, #240	; 0xf0
 800729e:	9b01      	ldr	r3, [sp, #4]
 80072a0:	0212      	lsls	r2, r2, #8
 80072a2:	4013      	ands	r3, r2
 80072a4:	4a05      	ldr	r2, [pc, #20]	; (80072bc <__swhatbuf_r+0x4c>)
 80072a6:	189b      	adds	r3, r3, r2
 80072a8:	425a      	negs	r2, r3
 80072aa:	4153      	adcs	r3, r2
 80072ac:	602b      	str	r3, [r5, #0]
 80072ae:	e7ed      	b.n	800728c <__swhatbuf_r+0x1c>
 80072b0:	2340      	movs	r3, #64	; 0x40
 80072b2:	2000      	movs	r0, #0
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	b016      	add	sp, #88	; 0x58
 80072b8:	bd70      	pop	{r4, r5, r6, pc}
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	ffffe000 	.word	0xffffe000

080072c0 <__smakebuf_r>:
 80072c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072c2:	2602      	movs	r6, #2
 80072c4:	898b      	ldrh	r3, [r1, #12]
 80072c6:	0005      	movs	r5, r0
 80072c8:	000c      	movs	r4, r1
 80072ca:	4233      	tst	r3, r6
 80072cc:	d006      	beq.n	80072dc <__smakebuf_r+0x1c>
 80072ce:	0023      	movs	r3, r4
 80072d0:	3347      	adds	r3, #71	; 0x47
 80072d2:	6023      	str	r3, [r4, #0]
 80072d4:	6123      	str	r3, [r4, #16]
 80072d6:	2301      	movs	r3, #1
 80072d8:	6163      	str	r3, [r4, #20]
 80072da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80072dc:	ab01      	add	r3, sp, #4
 80072de:	466a      	mov	r2, sp
 80072e0:	f7ff ffc6 	bl	8007270 <__swhatbuf_r>
 80072e4:	9900      	ldr	r1, [sp, #0]
 80072e6:	0007      	movs	r7, r0
 80072e8:	0028      	movs	r0, r5
 80072ea:	f000 f877 	bl	80073dc <_malloc_r>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	d108      	bne.n	8007304 <__smakebuf_r+0x44>
 80072f2:	220c      	movs	r2, #12
 80072f4:	5ea3      	ldrsh	r3, [r4, r2]
 80072f6:	059a      	lsls	r2, r3, #22
 80072f8:	d4ef      	bmi.n	80072da <__smakebuf_r+0x1a>
 80072fa:	2203      	movs	r2, #3
 80072fc:	4393      	bics	r3, r2
 80072fe:	431e      	orrs	r6, r3
 8007300:	81a6      	strh	r6, [r4, #12]
 8007302:	e7e4      	b.n	80072ce <__smakebuf_r+0xe>
 8007304:	4b0f      	ldr	r3, [pc, #60]	; (8007344 <__smakebuf_r+0x84>)
 8007306:	62ab      	str	r3, [r5, #40]	; 0x28
 8007308:	2380      	movs	r3, #128	; 0x80
 800730a:	89a2      	ldrh	r2, [r4, #12]
 800730c:	6020      	str	r0, [r4, #0]
 800730e:	4313      	orrs	r3, r2
 8007310:	81a3      	strh	r3, [r4, #12]
 8007312:	9b00      	ldr	r3, [sp, #0]
 8007314:	6120      	str	r0, [r4, #16]
 8007316:	6163      	str	r3, [r4, #20]
 8007318:	9b01      	ldr	r3, [sp, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00d      	beq.n	800733a <__smakebuf_r+0x7a>
 800731e:	230e      	movs	r3, #14
 8007320:	5ee1      	ldrsh	r1, [r4, r3]
 8007322:	0028      	movs	r0, r5
 8007324:	f000 f94e 	bl	80075c4 <_isatty_r>
 8007328:	2800      	cmp	r0, #0
 800732a:	d006      	beq.n	800733a <__smakebuf_r+0x7a>
 800732c:	2203      	movs	r2, #3
 800732e:	89a3      	ldrh	r3, [r4, #12]
 8007330:	4393      	bics	r3, r2
 8007332:	001a      	movs	r2, r3
 8007334:	2301      	movs	r3, #1
 8007336:	4313      	orrs	r3, r2
 8007338:	81a3      	strh	r3, [r4, #12]
 800733a:	89a0      	ldrh	r0, [r4, #12]
 800733c:	4338      	orrs	r0, r7
 800733e:	81a0      	strh	r0, [r4, #12]
 8007340:	e7cb      	b.n	80072da <__smakebuf_r+0x1a>
 8007342:	46c0      	nop			; (mov r8, r8)
 8007344:	0800710d 	.word	0x0800710d

08007348 <_free_r>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	0005      	movs	r5, r0
 800734c:	2900      	cmp	r1, #0
 800734e:	d010      	beq.n	8007372 <_free_r+0x2a>
 8007350:	1f0c      	subs	r4, r1, #4
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	da00      	bge.n	800735a <_free_r+0x12>
 8007358:	18e4      	adds	r4, r4, r3
 800735a:	0028      	movs	r0, r5
 800735c:	f000 f958 	bl	8007610 <__malloc_lock>
 8007360:	4a1d      	ldr	r2, [pc, #116]	; (80073d8 <_free_r+0x90>)
 8007362:	6813      	ldr	r3, [r2, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d105      	bne.n	8007374 <_free_r+0x2c>
 8007368:	6063      	str	r3, [r4, #4]
 800736a:	6014      	str	r4, [r2, #0]
 800736c:	0028      	movs	r0, r5
 800736e:	f000 f950 	bl	8007612 <__malloc_unlock>
 8007372:	bd70      	pop	{r4, r5, r6, pc}
 8007374:	42a3      	cmp	r3, r4
 8007376:	d909      	bls.n	800738c <_free_r+0x44>
 8007378:	6821      	ldr	r1, [r4, #0]
 800737a:	1860      	adds	r0, r4, r1
 800737c:	4283      	cmp	r3, r0
 800737e:	d1f3      	bne.n	8007368 <_free_r+0x20>
 8007380:	6818      	ldr	r0, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	1841      	adds	r1, r0, r1
 8007386:	6021      	str	r1, [r4, #0]
 8007388:	e7ee      	b.n	8007368 <_free_r+0x20>
 800738a:	0013      	movs	r3, r2
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	2a00      	cmp	r2, #0
 8007390:	d001      	beq.n	8007396 <_free_r+0x4e>
 8007392:	42a2      	cmp	r2, r4
 8007394:	d9f9      	bls.n	800738a <_free_r+0x42>
 8007396:	6819      	ldr	r1, [r3, #0]
 8007398:	1858      	adds	r0, r3, r1
 800739a:	42a0      	cmp	r0, r4
 800739c:	d10b      	bne.n	80073b6 <_free_r+0x6e>
 800739e:	6820      	ldr	r0, [r4, #0]
 80073a0:	1809      	adds	r1, r1, r0
 80073a2:	1858      	adds	r0, r3, r1
 80073a4:	6019      	str	r1, [r3, #0]
 80073a6:	4282      	cmp	r2, r0
 80073a8:	d1e0      	bne.n	800736c <_free_r+0x24>
 80073aa:	6810      	ldr	r0, [r2, #0]
 80073ac:	6852      	ldr	r2, [r2, #4]
 80073ae:	1841      	adds	r1, r0, r1
 80073b0:	6019      	str	r1, [r3, #0]
 80073b2:	605a      	str	r2, [r3, #4]
 80073b4:	e7da      	b.n	800736c <_free_r+0x24>
 80073b6:	42a0      	cmp	r0, r4
 80073b8:	d902      	bls.n	80073c0 <_free_r+0x78>
 80073ba:	230c      	movs	r3, #12
 80073bc:	602b      	str	r3, [r5, #0]
 80073be:	e7d5      	b.n	800736c <_free_r+0x24>
 80073c0:	6821      	ldr	r1, [r4, #0]
 80073c2:	1860      	adds	r0, r4, r1
 80073c4:	4282      	cmp	r2, r0
 80073c6:	d103      	bne.n	80073d0 <_free_r+0x88>
 80073c8:	6810      	ldr	r0, [r2, #0]
 80073ca:	6852      	ldr	r2, [r2, #4]
 80073cc:	1841      	adds	r1, r0, r1
 80073ce:	6021      	str	r1, [r4, #0]
 80073d0:	6062      	str	r2, [r4, #4]
 80073d2:	605c      	str	r4, [r3, #4]
 80073d4:	e7ca      	b.n	800736c <_free_r+0x24>
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	200000b0 	.word	0x200000b0

080073dc <_malloc_r>:
 80073dc:	2303      	movs	r3, #3
 80073de:	b570      	push	{r4, r5, r6, lr}
 80073e0:	1ccd      	adds	r5, r1, #3
 80073e2:	439d      	bics	r5, r3
 80073e4:	3508      	adds	r5, #8
 80073e6:	0006      	movs	r6, r0
 80073e8:	2d0c      	cmp	r5, #12
 80073ea:	d21e      	bcs.n	800742a <_malloc_r+0x4e>
 80073ec:	250c      	movs	r5, #12
 80073ee:	42a9      	cmp	r1, r5
 80073f0:	d81d      	bhi.n	800742e <_malloc_r+0x52>
 80073f2:	0030      	movs	r0, r6
 80073f4:	f000 f90c 	bl	8007610 <__malloc_lock>
 80073f8:	4a25      	ldr	r2, [pc, #148]	; (8007490 <_malloc_r+0xb4>)
 80073fa:	6814      	ldr	r4, [r2, #0]
 80073fc:	0021      	movs	r1, r4
 80073fe:	2900      	cmp	r1, #0
 8007400:	d119      	bne.n	8007436 <_malloc_r+0x5a>
 8007402:	4c24      	ldr	r4, [pc, #144]	; (8007494 <_malloc_r+0xb8>)
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d103      	bne.n	8007412 <_malloc_r+0x36>
 800740a:	0030      	movs	r0, r6
 800740c:	f000 f844 	bl	8007498 <_sbrk_r>
 8007410:	6020      	str	r0, [r4, #0]
 8007412:	0029      	movs	r1, r5
 8007414:	0030      	movs	r0, r6
 8007416:	f000 f83f 	bl	8007498 <_sbrk_r>
 800741a:	1c43      	adds	r3, r0, #1
 800741c:	d12b      	bne.n	8007476 <_malloc_r+0x9a>
 800741e:	230c      	movs	r3, #12
 8007420:	0030      	movs	r0, r6
 8007422:	6033      	str	r3, [r6, #0]
 8007424:	f000 f8f5 	bl	8007612 <__malloc_unlock>
 8007428:	e003      	b.n	8007432 <_malloc_r+0x56>
 800742a:	2d00      	cmp	r5, #0
 800742c:	dadf      	bge.n	80073ee <_malloc_r+0x12>
 800742e:	230c      	movs	r3, #12
 8007430:	6033      	str	r3, [r6, #0]
 8007432:	2000      	movs	r0, #0
 8007434:	bd70      	pop	{r4, r5, r6, pc}
 8007436:	680b      	ldr	r3, [r1, #0]
 8007438:	1b5b      	subs	r3, r3, r5
 800743a:	d419      	bmi.n	8007470 <_malloc_r+0x94>
 800743c:	2b0b      	cmp	r3, #11
 800743e:	d903      	bls.n	8007448 <_malloc_r+0x6c>
 8007440:	600b      	str	r3, [r1, #0]
 8007442:	18cc      	adds	r4, r1, r3
 8007444:	6025      	str	r5, [r4, #0]
 8007446:	e003      	b.n	8007450 <_malloc_r+0x74>
 8007448:	684b      	ldr	r3, [r1, #4]
 800744a:	428c      	cmp	r4, r1
 800744c:	d10d      	bne.n	800746a <_malloc_r+0x8e>
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	0030      	movs	r0, r6
 8007452:	f000 f8de 	bl	8007612 <__malloc_unlock>
 8007456:	0020      	movs	r0, r4
 8007458:	2207      	movs	r2, #7
 800745a:	300b      	adds	r0, #11
 800745c:	1d23      	adds	r3, r4, #4
 800745e:	4390      	bics	r0, r2
 8007460:	1ac3      	subs	r3, r0, r3
 8007462:	d0e7      	beq.n	8007434 <_malloc_r+0x58>
 8007464:	425a      	negs	r2, r3
 8007466:	50e2      	str	r2, [r4, r3]
 8007468:	e7e4      	b.n	8007434 <_malloc_r+0x58>
 800746a:	6063      	str	r3, [r4, #4]
 800746c:	000c      	movs	r4, r1
 800746e:	e7ef      	b.n	8007450 <_malloc_r+0x74>
 8007470:	000c      	movs	r4, r1
 8007472:	6849      	ldr	r1, [r1, #4]
 8007474:	e7c3      	b.n	80073fe <_malloc_r+0x22>
 8007476:	2303      	movs	r3, #3
 8007478:	1cc4      	adds	r4, r0, #3
 800747a:	439c      	bics	r4, r3
 800747c:	42a0      	cmp	r0, r4
 800747e:	d0e1      	beq.n	8007444 <_malloc_r+0x68>
 8007480:	1a21      	subs	r1, r4, r0
 8007482:	0030      	movs	r0, r6
 8007484:	f000 f808 	bl	8007498 <_sbrk_r>
 8007488:	1c43      	adds	r3, r0, #1
 800748a:	d1db      	bne.n	8007444 <_malloc_r+0x68>
 800748c:	e7c7      	b.n	800741e <_malloc_r+0x42>
 800748e:	46c0      	nop			; (mov r8, r8)
 8007490:	200000b0 	.word	0x200000b0
 8007494:	200000b4 	.word	0x200000b4

08007498 <_sbrk_r>:
 8007498:	2300      	movs	r3, #0
 800749a:	b570      	push	{r4, r5, r6, lr}
 800749c:	4c06      	ldr	r4, [pc, #24]	; (80074b8 <_sbrk_r+0x20>)
 800749e:	0005      	movs	r5, r0
 80074a0:	0008      	movs	r0, r1
 80074a2:	6023      	str	r3, [r4, #0]
 80074a4:	f7fd f99e 	bl	80047e4 <_sbrk>
 80074a8:	1c43      	adds	r3, r0, #1
 80074aa:	d103      	bne.n	80074b4 <_sbrk_r+0x1c>
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d000      	beq.n	80074b4 <_sbrk_r+0x1c>
 80074b2:	602b      	str	r3, [r5, #0]
 80074b4:	bd70      	pop	{r4, r5, r6, pc}
 80074b6:	46c0      	nop			; (mov r8, r8)
 80074b8:	200003bc 	.word	0x200003bc

080074bc <__sread>:
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	000c      	movs	r4, r1
 80074c0:	250e      	movs	r5, #14
 80074c2:	5f49      	ldrsh	r1, [r1, r5]
 80074c4:	f000 f8a6 	bl	8007614 <_read_r>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	db03      	blt.n	80074d4 <__sread+0x18>
 80074cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80074ce:	181b      	adds	r3, r3, r0
 80074d0:	6563      	str	r3, [r4, #84]	; 0x54
 80074d2:	bd70      	pop	{r4, r5, r6, pc}
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	4a02      	ldr	r2, [pc, #8]	; (80074e0 <__sread+0x24>)
 80074d8:	4013      	ands	r3, r2
 80074da:	81a3      	strh	r3, [r4, #12]
 80074dc:	e7f9      	b.n	80074d2 <__sread+0x16>
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	ffffefff 	.word	0xffffefff

080074e4 <__swrite>:
 80074e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e6:	001f      	movs	r7, r3
 80074e8:	898b      	ldrh	r3, [r1, #12]
 80074ea:	0005      	movs	r5, r0
 80074ec:	000c      	movs	r4, r1
 80074ee:	0016      	movs	r6, r2
 80074f0:	05db      	lsls	r3, r3, #23
 80074f2:	d505      	bpl.n	8007500 <__swrite+0x1c>
 80074f4:	230e      	movs	r3, #14
 80074f6:	5ec9      	ldrsh	r1, [r1, r3]
 80074f8:	2200      	movs	r2, #0
 80074fa:	2302      	movs	r3, #2
 80074fc:	f000 f874 	bl	80075e8 <_lseek_r>
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	4a05      	ldr	r2, [pc, #20]	; (8007518 <__swrite+0x34>)
 8007504:	0028      	movs	r0, r5
 8007506:	4013      	ands	r3, r2
 8007508:	81a3      	strh	r3, [r4, #12]
 800750a:	0032      	movs	r2, r6
 800750c:	230e      	movs	r3, #14
 800750e:	5ee1      	ldrsh	r1, [r4, r3]
 8007510:	003b      	movs	r3, r7
 8007512:	f000 f81f 	bl	8007554 <_write_r>
 8007516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007518:	ffffefff 	.word	0xffffefff

0800751c <__sseek>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	000c      	movs	r4, r1
 8007520:	250e      	movs	r5, #14
 8007522:	5f49      	ldrsh	r1, [r1, r5]
 8007524:	f000 f860 	bl	80075e8 <_lseek_r>
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	1c42      	adds	r2, r0, #1
 800752c:	d103      	bne.n	8007536 <__sseek+0x1a>
 800752e:	4a05      	ldr	r2, [pc, #20]	; (8007544 <__sseek+0x28>)
 8007530:	4013      	ands	r3, r2
 8007532:	81a3      	strh	r3, [r4, #12]
 8007534:	bd70      	pop	{r4, r5, r6, pc}
 8007536:	2280      	movs	r2, #128	; 0x80
 8007538:	0152      	lsls	r2, r2, #5
 800753a:	4313      	orrs	r3, r2
 800753c:	81a3      	strh	r3, [r4, #12]
 800753e:	6560      	str	r0, [r4, #84]	; 0x54
 8007540:	e7f8      	b.n	8007534 <__sseek+0x18>
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	ffffefff 	.word	0xffffefff

08007548 <__sclose>:
 8007548:	b510      	push	{r4, lr}
 800754a:	230e      	movs	r3, #14
 800754c:	5ec9      	ldrsh	r1, [r1, r3]
 800754e:	f000 f815 	bl	800757c <_close_r>
 8007552:	bd10      	pop	{r4, pc}

08007554 <_write_r>:
 8007554:	b570      	push	{r4, r5, r6, lr}
 8007556:	0005      	movs	r5, r0
 8007558:	0008      	movs	r0, r1
 800755a:	0011      	movs	r1, r2
 800755c:	2200      	movs	r2, #0
 800755e:	4c06      	ldr	r4, [pc, #24]	; (8007578 <_write_r+0x24>)
 8007560:	6022      	str	r2, [r4, #0]
 8007562:	001a      	movs	r2, r3
 8007564:	f7fd f8f5 	bl	8004752 <_write>
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	d103      	bne.n	8007574 <_write_r+0x20>
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d000      	beq.n	8007574 <_write_r+0x20>
 8007572:	602b      	str	r3, [r5, #0]
 8007574:	bd70      	pop	{r4, r5, r6, pc}
 8007576:	46c0      	nop			; (mov r8, r8)
 8007578:	200003bc 	.word	0x200003bc

0800757c <_close_r>:
 800757c:	2300      	movs	r3, #0
 800757e:	b570      	push	{r4, r5, r6, lr}
 8007580:	4c06      	ldr	r4, [pc, #24]	; (800759c <_close_r+0x20>)
 8007582:	0005      	movs	r5, r0
 8007584:	0008      	movs	r0, r1
 8007586:	6023      	str	r3, [r4, #0]
 8007588:	f7fd f8ff 	bl	800478a <_close>
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	d103      	bne.n	8007598 <_close_r+0x1c>
 8007590:	6823      	ldr	r3, [r4, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d000      	beq.n	8007598 <_close_r+0x1c>
 8007596:	602b      	str	r3, [r5, #0]
 8007598:	bd70      	pop	{r4, r5, r6, pc}
 800759a:	46c0      	nop			; (mov r8, r8)
 800759c:	200003bc 	.word	0x200003bc

080075a0 <_fstat_r>:
 80075a0:	2300      	movs	r3, #0
 80075a2:	b570      	push	{r4, r5, r6, lr}
 80075a4:	4c06      	ldr	r4, [pc, #24]	; (80075c0 <_fstat_r+0x20>)
 80075a6:	0005      	movs	r5, r0
 80075a8:	0008      	movs	r0, r1
 80075aa:	0011      	movs	r1, r2
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	f7fd f8f6 	bl	800479e <_fstat>
 80075b2:	1c43      	adds	r3, r0, #1
 80075b4:	d103      	bne.n	80075be <_fstat_r+0x1e>
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d000      	beq.n	80075be <_fstat_r+0x1e>
 80075bc:	602b      	str	r3, [r5, #0]
 80075be:	bd70      	pop	{r4, r5, r6, pc}
 80075c0:	200003bc 	.word	0x200003bc

080075c4 <_isatty_r>:
 80075c4:	2300      	movs	r3, #0
 80075c6:	b570      	push	{r4, r5, r6, lr}
 80075c8:	4c06      	ldr	r4, [pc, #24]	; (80075e4 <_isatty_r+0x20>)
 80075ca:	0005      	movs	r5, r0
 80075cc:	0008      	movs	r0, r1
 80075ce:	6023      	str	r3, [r4, #0]
 80075d0:	f7fd f8f3 	bl	80047ba <_isatty>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d103      	bne.n	80075e0 <_isatty_r+0x1c>
 80075d8:	6823      	ldr	r3, [r4, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d000      	beq.n	80075e0 <_isatty_r+0x1c>
 80075de:	602b      	str	r3, [r5, #0]
 80075e0:	bd70      	pop	{r4, r5, r6, pc}
 80075e2:	46c0      	nop			; (mov r8, r8)
 80075e4:	200003bc 	.word	0x200003bc

080075e8 <_lseek_r>:
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	0005      	movs	r5, r0
 80075ec:	0008      	movs	r0, r1
 80075ee:	0011      	movs	r1, r2
 80075f0:	2200      	movs	r2, #0
 80075f2:	4c06      	ldr	r4, [pc, #24]	; (800760c <_lseek_r+0x24>)
 80075f4:	6022      	str	r2, [r4, #0]
 80075f6:	001a      	movs	r2, r3
 80075f8:	f7fd f8e8 	bl	80047cc <_lseek>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d103      	bne.n	8007608 <_lseek_r+0x20>
 8007600:	6823      	ldr	r3, [r4, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d000      	beq.n	8007608 <_lseek_r+0x20>
 8007606:	602b      	str	r3, [r5, #0]
 8007608:	bd70      	pop	{r4, r5, r6, pc}
 800760a:	46c0      	nop			; (mov r8, r8)
 800760c:	200003bc 	.word	0x200003bc

08007610 <__malloc_lock>:
 8007610:	4770      	bx	lr

08007612 <__malloc_unlock>:
 8007612:	4770      	bx	lr

08007614 <_read_r>:
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	0005      	movs	r5, r0
 8007618:	0008      	movs	r0, r1
 800761a:	0011      	movs	r1, r2
 800761c:	2200      	movs	r2, #0
 800761e:	4c06      	ldr	r4, [pc, #24]	; (8007638 <_read_r+0x24>)
 8007620:	6022      	str	r2, [r4, #0]
 8007622:	001a      	movs	r2, r3
 8007624:	f7fd f878 	bl	8004718 <_read>
 8007628:	1c43      	adds	r3, r0, #1
 800762a:	d103      	bne.n	8007634 <_read_r+0x20>
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d000      	beq.n	8007634 <_read_r+0x20>
 8007632:	602b      	str	r3, [r5, #0]
 8007634:	bd70      	pop	{r4, r5, r6, pc}
 8007636:	46c0      	nop			; (mov r8, r8)
 8007638:	200003bc 	.word	0x200003bc

0800763c <cos>:
 800763c:	b530      	push	{r4, r5, lr}
 800763e:	4a1e      	ldr	r2, [pc, #120]	; (80076b8 <cos+0x7c>)
 8007640:	004b      	lsls	r3, r1, #1
 8007642:	b087      	sub	sp, #28
 8007644:	085b      	lsrs	r3, r3, #1
 8007646:	4293      	cmp	r3, r2
 8007648:	dc04      	bgt.n	8007654 <cos+0x18>
 800764a:	2200      	movs	r2, #0
 800764c:	2300      	movs	r3, #0
 800764e:	f000 fbdf 	bl	8007e10 <__kernel_cos>
 8007652:	e006      	b.n	8007662 <cos+0x26>
 8007654:	4a19      	ldr	r2, [pc, #100]	; (80076bc <cos+0x80>)
 8007656:	4293      	cmp	r3, r2
 8007658:	dd05      	ble.n	8007666 <cos+0x2a>
 800765a:	0002      	movs	r2, r0
 800765c:	000b      	movs	r3, r1
 800765e:	f7fa fe4b 	bl	80022f8 <__aeabi_dsub>
 8007662:	b007      	add	sp, #28
 8007664:	bd30      	pop	{r4, r5, pc}
 8007666:	aa02      	add	r2, sp, #8
 8007668:	f000 f9ea 	bl	8007a40 <__ieee754_rem_pio2>
 800766c:	9c04      	ldr	r4, [sp, #16]
 800766e:	9d05      	ldr	r5, [sp, #20]
 8007670:	2303      	movs	r3, #3
 8007672:	4003      	ands	r3, r0
 8007674:	2b01      	cmp	r3, #1
 8007676:	d008      	beq.n	800768a <cos+0x4e>
 8007678:	9802      	ldr	r0, [sp, #8]
 800767a:	9903      	ldr	r1, [sp, #12]
 800767c:	2b02      	cmp	r3, #2
 800767e:	d00f      	beq.n	80076a0 <cos+0x64>
 8007680:	2b00      	cmp	r3, #0
 8007682:	d112      	bne.n	80076aa <cos+0x6e>
 8007684:	0022      	movs	r2, r4
 8007686:	002b      	movs	r3, r5
 8007688:	e7e1      	b.n	800764e <cos+0x12>
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	0022      	movs	r2, r4
 800768e:	9802      	ldr	r0, [sp, #8]
 8007690:	9903      	ldr	r1, [sp, #12]
 8007692:	002b      	movs	r3, r5
 8007694:	f000 ffe4 	bl	8008660 <__kernel_sin>
 8007698:	2380      	movs	r3, #128	; 0x80
 800769a:	061b      	lsls	r3, r3, #24
 800769c:	18c9      	adds	r1, r1, r3
 800769e:	e7e0      	b.n	8007662 <cos+0x26>
 80076a0:	0022      	movs	r2, r4
 80076a2:	002b      	movs	r3, r5
 80076a4:	f000 fbb4 	bl	8007e10 <__kernel_cos>
 80076a8:	e7f6      	b.n	8007698 <cos+0x5c>
 80076aa:	2301      	movs	r3, #1
 80076ac:	0022      	movs	r2, r4
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	002b      	movs	r3, r5
 80076b2:	f000 ffd5 	bl	8008660 <__kernel_sin>
 80076b6:	e7d4      	b.n	8007662 <cos+0x26>
 80076b8:	3fe921fb 	.word	0x3fe921fb
 80076bc:	7fefffff 	.word	0x7fefffff

080076c0 <sin>:
 80076c0:	b530      	push	{r4, r5, lr}
 80076c2:	4a20      	ldr	r2, [pc, #128]	; (8007744 <sin+0x84>)
 80076c4:	004b      	lsls	r3, r1, #1
 80076c6:	b087      	sub	sp, #28
 80076c8:	085b      	lsrs	r3, r3, #1
 80076ca:	4293      	cmp	r3, r2
 80076cc:	dc06      	bgt.n	80076dc <sin+0x1c>
 80076ce:	2300      	movs	r3, #0
 80076d0:	2200      	movs	r2, #0
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	2300      	movs	r3, #0
 80076d6:	f000 ffc3 	bl	8008660 <__kernel_sin>
 80076da:	e006      	b.n	80076ea <sin+0x2a>
 80076dc:	4a1a      	ldr	r2, [pc, #104]	; (8007748 <sin+0x88>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	dd05      	ble.n	80076ee <sin+0x2e>
 80076e2:	0002      	movs	r2, r0
 80076e4:	000b      	movs	r3, r1
 80076e6:	f7fa fe07 	bl	80022f8 <__aeabi_dsub>
 80076ea:	b007      	add	sp, #28
 80076ec:	bd30      	pop	{r4, r5, pc}
 80076ee:	aa02      	add	r2, sp, #8
 80076f0:	f000 f9a6 	bl	8007a40 <__ieee754_rem_pio2>
 80076f4:	9c04      	ldr	r4, [sp, #16]
 80076f6:	9d05      	ldr	r5, [sp, #20]
 80076f8:	2303      	movs	r3, #3
 80076fa:	4003      	ands	r3, r0
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d00a      	beq.n	8007716 <sin+0x56>
 8007700:	9802      	ldr	r0, [sp, #8]
 8007702:	9903      	ldr	r1, [sp, #12]
 8007704:	2b02      	cmp	r3, #2
 8007706:	d00d      	beq.n	8007724 <sin+0x64>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d115      	bne.n	8007738 <sin+0x78>
 800770c:	3301      	adds	r3, #1
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	0022      	movs	r2, r4
 8007712:	002b      	movs	r3, r5
 8007714:	e7df      	b.n	80076d6 <sin+0x16>
 8007716:	0022      	movs	r2, r4
 8007718:	9802      	ldr	r0, [sp, #8]
 800771a:	9903      	ldr	r1, [sp, #12]
 800771c:	002b      	movs	r3, r5
 800771e:	f000 fb77 	bl	8007e10 <__kernel_cos>
 8007722:	e7e2      	b.n	80076ea <sin+0x2a>
 8007724:	2301      	movs	r3, #1
 8007726:	0022      	movs	r2, r4
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	002b      	movs	r3, r5
 800772c:	f000 ff98 	bl	8008660 <__kernel_sin>
 8007730:	2380      	movs	r3, #128	; 0x80
 8007732:	061b      	lsls	r3, r3, #24
 8007734:	18c9      	adds	r1, r1, r3
 8007736:	e7d8      	b.n	80076ea <sin+0x2a>
 8007738:	0022      	movs	r2, r4
 800773a:	002b      	movs	r3, r5
 800773c:	f000 fb68 	bl	8007e10 <__kernel_cos>
 8007740:	e7f6      	b.n	8007730 <sin+0x70>
 8007742:	46c0      	nop			; (mov r8, r8)
 8007744:	3fe921fb 	.word	0x3fe921fb
 8007748:	7fefffff 	.word	0x7fefffff

0800774c <fmod>:
 800774c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800774e:	b08f      	sub	sp, #60	; 0x3c
 8007750:	001d      	movs	r5, r3
 8007752:	0006      	movs	r6, r0
 8007754:	000f      	movs	r7, r1
 8007756:	0014      	movs	r4, r2
 8007758:	f000 f85a 	bl	8007810 <__ieee754_fmod>
 800775c:	4b2a      	ldr	r3, [pc, #168]	; (8007808 <fmod+0xbc>)
 800775e:	9000      	str	r0, [sp, #0]
 8007760:	9101      	str	r1, [sp, #4]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	b25b      	sxtb	r3, r3
 8007766:	9302      	str	r3, [sp, #8]
 8007768:	3301      	adds	r3, #1
 800776a:	d039      	beq.n	80077e0 <fmod+0x94>
 800776c:	0022      	movs	r2, r4
 800776e:	002b      	movs	r3, r5
 8007770:	0020      	movs	r0, r4
 8007772:	0029      	movs	r1, r5
 8007774:	f7fb f908 	bl	8002988 <__aeabi_dcmpun>
 8007778:	2800      	cmp	r0, #0
 800777a:	d131      	bne.n	80077e0 <fmod+0x94>
 800777c:	0032      	movs	r2, r6
 800777e:	003b      	movs	r3, r7
 8007780:	0030      	movs	r0, r6
 8007782:	0039      	movs	r1, r7
 8007784:	f7fb f900 	bl	8002988 <__aeabi_dcmpun>
 8007788:	9003      	str	r0, [sp, #12]
 800778a:	2800      	cmp	r0, #0
 800778c:	d128      	bne.n	80077e0 <fmod+0x94>
 800778e:	2200      	movs	r2, #0
 8007790:	2300      	movs	r3, #0
 8007792:	0020      	movs	r0, r4
 8007794:	0029      	movs	r1, r5
 8007796:	f7f8 fe47 	bl	8000428 <__aeabi_dcmpeq>
 800779a:	2800      	cmp	r0, #0
 800779c:	d020      	beq.n	80077e0 <fmod+0x94>
 800779e:	2301      	movs	r3, #1
 80077a0:	9304      	str	r3, [sp, #16]
 80077a2:	4b1a      	ldr	r3, [pc, #104]	; (800780c <fmod+0xc0>)
 80077a4:	9606      	str	r6, [sp, #24]
 80077a6:	9707      	str	r7, [sp, #28]
 80077a8:	9305      	str	r3, [sp, #20]
 80077aa:	9b03      	ldr	r3, [sp, #12]
 80077ac:	9408      	str	r4, [sp, #32]
 80077ae:	9509      	str	r5, [sp, #36]	; 0x24
 80077b0:	930c      	str	r3, [sp, #48]	; 0x30
 80077b2:	9b02      	ldr	r3, [sp, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d117      	bne.n	80077e8 <fmod+0x9c>
 80077b8:	960a      	str	r6, [sp, #40]	; 0x28
 80077ba:	970b      	str	r7, [sp, #44]	; 0x2c
 80077bc:	a804      	add	r0, sp, #16
 80077be:	f001 f883 	bl	80088c8 <matherr>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d01b      	beq.n	80077fe <fmod+0xb2>
 80077c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077c8:	9302      	str	r3, [sp, #8]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d004      	beq.n	80077d8 <fmod+0x8c>
 80077ce:	f7ff fa51 	bl	8006c74 <__errno>
 80077d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077d4:	9302      	str	r3, [sp, #8]
 80077d6:	6003      	str	r3, [r0, #0]
 80077d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	9401      	str	r4, [sp, #4]
 80077e0:	9800      	ldr	r0, [sp, #0]
 80077e2:	9901      	ldr	r1, [sp, #4]
 80077e4:	b00f      	add	sp, #60	; 0x3c
 80077e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077e8:	2300      	movs	r3, #0
 80077ea:	2200      	movs	r2, #0
 80077ec:	0019      	movs	r1, r3
 80077ee:	0010      	movs	r0, r2
 80077f0:	f7f9 ff06 	bl	8001600 <__aeabi_ddiv>
 80077f4:	9b02      	ldr	r3, [sp, #8]
 80077f6:	900a      	str	r0, [sp, #40]	; 0x28
 80077f8:	910b      	str	r1, [sp, #44]	; 0x2c
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d1de      	bne.n	80077bc <fmod+0x70>
 80077fe:	f7ff fa39 	bl	8006c74 <__errno>
 8007802:	2321      	movs	r3, #33	; 0x21
 8007804:	6003      	str	r3, [r0, #0]
 8007806:	e7de      	b.n	80077c6 <fmod+0x7a>
 8007808:	20000068 	.word	0x20000068
 800780c:	08008be4 	.word	0x08008be4

08007810 <__ieee754_fmod>:
 8007810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007812:	b087      	sub	sp, #28
 8007814:	9304      	str	r3, [sp, #16]
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	085b      	lsrs	r3, r3, #1
 800781a:	001c      	movs	r4, r3
 800781c:	9001      	str	r0, [sp, #4]
 800781e:	0016      	movs	r6, r2
 8007820:	9203      	str	r2, [sp, #12]
 8007822:	4314      	orrs	r4, r2
 8007824:	d00c      	beq.n	8007840 <__ieee754_fmod+0x30>
 8007826:	4d7b      	ldr	r5, [pc, #492]	; (8007a14 <__ieee754_fmod+0x204>)
 8007828:	004c      	lsls	r4, r1, #1
 800782a:	9105      	str	r1, [sp, #20]
 800782c:	0864      	lsrs	r4, r4, #1
 800782e:	42ac      	cmp	r4, r5
 8007830:	dc06      	bgt.n	8007840 <__ieee754_fmod+0x30>
 8007832:	4255      	negs	r5, r2
 8007834:	4315      	orrs	r5, r2
 8007836:	4f78      	ldr	r7, [pc, #480]	; (8007a18 <__ieee754_fmod+0x208>)
 8007838:	0fed      	lsrs	r5, r5, #31
 800783a:	431d      	orrs	r5, r3
 800783c:	42bd      	cmp	r5, r7
 800783e:	d90b      	bls.n	8007858 <__ieee754_fmod+0x48>
 8007840:	9d04      	ldr	r5, [sp, #16]
 8007842:	9c01      	ldr	r4, [sp, #4]
 8007844:	002b      	movs	r3, r5
 8007846:	0020      	movs	r0, r4
 8007848:	f7fa fae4 	bl	8001e14 <__aeabi_dmul>
 800784c:	0002      	movs	r2, r0
 800784e:	000b      	movs	r3, r1
 8007850:	f7f9 fed6 	bl	8001600 <__aeabi_ddiv>
 8007854:	9001      	str	r0, [sp, #4]
 8007856:	e013      	b.n	8007880 <__ieee754_fmod+0x70>
 8007858:	9801      	ldr	r0, [sp, #4]
 800785a:	0fcd      	lsrs	r5, r1, #31
 800785c:	4684      	mov	ip, r0
 800785e:	0007      	movs	r7, r0
 8007860:	07e8      	lsls	r0, r5, #31
 8007862:	9002      	str	r0, [sp, #8]
 8007864:	429c      	cmp	r4, r3
 8007866:	dc0f      	bgt.n	8007888 <__ieee754_fmod+0x78>
 8007868:	db0a      	blt.n	8007880 <__ieee754_fmod+0x70>
 800786a:	4594      	cmp	ip, r2
 800786c:	d308      	bcc.n	8007880 <__ieee754_fmod+0x70>
 800786e:	d10b      	bne.n	8007888 <__ieee754_fmod+0x78>
 8007870:	0003      	movs	r3, r0
 8007872:	0fdb      	lsrs	r3, r3, #31
 8007874:	4a69      	ldr	r2, [pc, #420]	; (8007a1c <__ieee754_fmod+0x20c>)
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	18d2      	adds	r2, r2, r3
 800787a:	6813      	ldr	r3, [r2, #0]
 800787c:	6851      	ldr	r1, [r2, #4]
 800787e:	9301      	str	r3, [sp, #4]
 8007880:	9a01      	ldr	r2, [sp, #4]
 8007882:	0010      	movs	r0, r2
 8007884:	b007      	add	sp, #28
 8007886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007888:	4965      	ldr	r1, [pc, #404]	; (8007a20 <__ieee754_fmod+0x210>)
 800788a:	428c      	cmp	r4, r1
 800788c:	dc4b      	bgt.n	8007926 <__ieee754_fmod+0x116>
 800788e:	2c00      	cmp	r4, #0
 8007890:	d142      	bne.n	8007918 <__ieee754_fmod+0x108>
 8007892:	4661      	mov	r1, ip
 8007894:	4863      	ldr	r0, [pc, #396]	; (8007a24 <__ieee754_fmod+0x214>)
 8007896:	2900      	cmp	r1, #0
 8007898:	dc3b      	bgt.n	8007912 <__ieee754_fmod+0x102>
 800789a:	4961      	ldr	r1, [pc, #388]	; (8007a20 <__ieee754_fmod+0x210>)
 800789c:	428b      	cmp	r3, r1
 800789e:	dc50      	bgt.n	8007942 <__ieee754_fmod+0x132>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d147      	bne.n	8007934 <__ieee754_fmod+0x124>
 80078a4:	495f      	ldr	r1, [pc, #380]	; (8007a24 <__ieee754_fmod+0x214>)
 80078a6:	2e00      	cmp	r6, #0
 80078a8:	dc41      	bgt.n	800792e <__ieee754_fmod+0x11e>
 80078aa:	4d5f      	ldr	r5, [pc, #380]	; (8007a28 <__ieee754_fmod+0x218>)
 80078ac:	42a8      	cmp	r0, r5
 80078ae:	db4c      	blt.n	800794a <__ieee754_fmod+0x13a>
 80078b0:	9c05      	ldr	r4, [sp, #20]
 80078b2:	0325      	lsls	r5, r4, #12
 80078b4:	2480      	movs	r4, #128	; 0x80
 80078b6:	0b2d      	lsrs	r5, r5, #12
 80078b8:	0364      	lsls	r4, r4, #13
 80078ba:	4325      	orrs	r5, r4
 80078bc:	4c5a      	ldr	r4, [pc, #360]	; (8007a28 <__ieee754_fmod+0x218>)
 80078be:	42a1      	cmp	r1, r4
 80078c0:	db58      	blt.n	8007974 <__ieee754_fmod+0x164>
 80078c2:	2280      	movs	r2, #128	; 0x80
 80078c4:	9b04      	ldr	r3, [sp, #16]
 80078c6:	0352      	lsls	r2, r2, #13
 80078c8:	031b      	lsls	r3, r3, #12
 80078ca:	0b1b      	lsrs	r3, r3, #12
 80078cc:	4313      	orrs	r3, r2
 80078ce:	1a40      	subs	r0, r0, r1
 80078d0:	9c03      	ldr	r4, [sp, #12]
 80078d2:	1aea      	subs	r2, r5, r3
 80078d4:	1b3c      	subs	r4, r7, r4
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d164      	bne.n	80079a4 <__ieee754_fmod+0x194>
 80078da:	9b03      	ldr	r3, [sp, #12]
 80078dc:	429f      	cmp	r7, r3
 80078de:	419b      	sbcs	r3, r3
 80078e0:	425b      	negs	r3, r3
 80078e2:	1ad2      	subs	r2, r2, r3
 80078e4:	d501      	bpl.n	80078ea <__ieee754_fmod+0xda>
 80078e6:	003c      	movs	r4, r7
 80078e8:	002a      	movs	r2, r5
 80078ea:	0013      	movs	r3, r2
 80078ec:	4323      	orrs	r3, r4
 80078ee:	d068      	beq.n	80079c2 <__ieee754_fmod+0x1b2>
 80078f0:	4b4b      	ldr	r3, [pc, #300]	; (8007a20 <__ieee754_fmod+0x210>)
 80078f2:	429a      	cmp	r2, r3
 80078f4:	dd6c      	ble.n	80079d0 <__ieee754_fmod+0x1c0>
 80078f6:	4b4c      	ldr	r3, [pc, #304]	; (8007a28 <__ieee754_fmod+0x218>)
 80078f8:	4299      	cmp	r1, r3
 80078fa:	db6f      	blt.n	80079dc <__ieee754_fmod+0x1cc>
 80078fc:	4b4b      	ldr	r3, [pc, #300]	; (8007a2c <__ieee754_fmod+0x21c>)
 80078fe:	18cb      	adds	r3, r1, r3
 8007900:	494b      	ldr	r1, [pc, #300]	; (8007a30 <__ieee754_fmod+0x220>)
 8007902:	051b      	lsls	r3, r3, #20
 8007904:	1852      	adds	r2, r2, r1
 8007906:	9902      	ldr	r1, [sp, #8]
 8007908:	430a      	orrs	r2, r1
 800790a:	4313      	orrs	r3, r2
 800790c:	0019      	movs	r1, r3
 800790e:	0020      	movs	r0, r4
 8007910:	e7a0      	b.n	8007854 <__ieee754_fmod+0x44>
 8007912:	3801      	subs	r0, #1
 8007914:	0049      	lsls	r1, r1, #1
 8007916:	e7be      	b.n	8007896 <__ieee754_fmod+0x86>
 8007918:	4843      	ldr	r0, [pc, #268]	; (8007a28 <__ieee754_fmod+0x218>)
 800791a:	02e1      	lsls	r1, r4, #11
 800791c:	3801      	subs	r0, #1
 800791e:	0049      	lsls	r1, r1, #1
 8007920:	2900      	cmp	r1, #0
 8007922:	dcfb      	bgt.n	800791c <__ieee754_fmod+0x10c>
 8007924:	e7b9      	b.n	800789a <__ieee754_fmod+0x8a>
 8007926:	4943      	ldr	r1, [pc, #268]	; (8007a34 <__ieee754_fmod+0x224>)
 8007928:	1520      	asrs	r0, r4, #20
 800792a:	1840      	adds	r0, r0, r1
 800792c:	e7b5      	b.n	800789a <__ieee754_fmod+0x8a>
 800792e:	3901      	subs	r1, #1
 8007930:	0076      	lsls	r6, r6, #1
 8007932:	e7b8      	b.n	80078a6 <__ieee754_fmod+0x96>
 8007934:	493c      	ldr	r1, [pc, #240]	; (8007a28 <__ieee754_fmod+0x218>)
 8007936:	02dd      	lsls	r5, r3, #11
 8007938:	3901      	subs	r1, #1
 800793a:	006d      	lsls	r5, r5, #1
 800793c:	2d00      	cmp	r5, #0
 800793e:	dcfb      	bgt.n	8007938 <__ieee754_fmod+0x128>
 8007940:	e7b3      	b.n	80078aa <__ieee754_fmod+0x9a>
 8007942:	4d3c      	ldr	r5, [pc, #240]	; (8007a34 <__ieee754_fmod+0x224>)
 8007944:	1519      	asrs	r1, r3, #20
 8007946:	1949      	adds	r1, r1, r5
 8007948:	e7af      	b.n	80078aa <__ieee754_fmod+0x9a>
 800794a:	4d37      	ldr	r5, [pc, #220]	; (8007a28 <__ieee754_fmod+0x218>)
 800794c:	1a2f      	subs	r7, r5, r0
 800794e:	2f1f      	cmp	r7, #31
 8007950:	dc0a      	bgt.n	8007968 <__ieee754_fmod+0x158>
 8007952:	4666      	mov	r6, ip
 8007954:	4d38      	ldr	r5, [pc, #224]	; (8007a38 <__ieee754_fmod+0x228>)
 8007956:	40bc      	lsls	r4, r7
 8007958:	1945      	adds	r5, r0, r5
 800795a:	40ee      	lsrs	r6, r5
 800795c:	0035      	movs	r5, r6
 800795e:	4325      	orrs	r5, r4
 8007960:	4664      	mov	r4, ip
 8007962:	40bc      	lsls	r4, r7
 8007964:	0027      	movs	r7, r4
 8007966:	e7a9      	b.n	80078bc <__ieee754_fmod+0xac>
 8007968:	4665      	mov	r5, ip
 800796a:	4c34      	ldr	r4, [pc, #208]	; (8007a3c <__ieee754_fmod+0x22c>)
 800796c:	2700      	movs	r7, #0
 800796e:	1a24      	subs	r4, r4, r0
 8007970:	40a5      	lsls	r5, r4
 8007972:	e7a3      	b.n	80078bc <__ieee754_fmod+0xac>
 8007974:	4c2c      	ldr	r4, [pc, #176]	; (8007a28 <__ieee754_fmod+0x218>)
 8007976:	1a64      	subs	r4, r4, r1
 8007978:	9401      	str	r4, [sp, #4]
 800797a:	2c1f      	cmp	r4, #31
 800797c:	dc0c      	bgt.n	8007998 <__ieee754_fmod+0x188>
 800797e:	4e2e      	ldr	r6, [pc, #184]	; (8007a38 <__ieee754_fmod+0x228>)
 8007980:	46b4      	mov	ip, r6
 8007982:	448c      	add	ip, r1
 8007984:	0016      	movs	r6, r2
 8007986:	4664      	mov	r4, ip
 8007988:	40e6      	lsrs	r6, r4
 800798a:	9c01      	ldr	r4, [sp, #4]
 800798c:	40a3      	lsls	r3, r4
 800798e:	9c01      	ldr	r4, [sp, #4]
 8007990:	4333      	orrs	r3, r6
 8007992:	40a2      	lsls	r2, r4
 8007994:	9203      	str	r2, [sp, #12]
 8007996:	e79a      	b.n	80078ce <__ieee754_fmod+0xbe>
 8007998:	4b28      	ldr	r3, [pc, #160]	; (8007a3c <__ieee754_fmod+0x22c>)
 800799a:	1a5b      	subs	r3, r3, r1
 800799c:	409a      	lsls	r2, r3
 800799e:	0013      	movs	r3, r2
 80079a0:	2200      	movs	r2, #0
 80079a2:	e7f7      	b.n	8007994 <__ieee754_fmod+0x184>
 80079a4:	9e03      	ldr	r6, [sp, #12]
 80079a6:	42b7      	cmp	r7, r6
 80079a8:	41b6      	sbcs	r6, r6
 80079aa:	4276      	negs	r6, r6
 80079ac:	1b92      	subs	r2, r2, r6
 80079ae:	d505      	bpl.n	80079bc <__ieee754_fmod+0x1ac>
 80079b0:	0ffc      	lsrs	r4, r7, #31
 80079b2:	006d      	lsls	r5, r5, #1
 80079b4:	192d      	adds	r5, r5, r4
 80079b6:	007f      	lsls	r7, r7, #1
 80079b8:	3801      	subs	r0, #1
 80079ba:	e789      	b.n	80078d0 <__ieee754_fmod+0xc0>
 80079bc:	0015      	movs	r5, r2
 80079be:	4325      	orrs	r5, r4
 80079c0:	d101      	bne.n	80079c6 <__ieee754_fmod+0x1b6>
 80079c2:	9b02      	ldr	r3, [sp, #8]
 80079c4:	e755      	b.n	8007872 <__ieee754_fmod+0x62>
 80079c6:	0052      	lsls	r2, r2, #1
 80079c8:	0fe5      	lsrs	r5, r4, #31
 80079ca:	1955      	adds	r5, r2, r5
 80079cc:	0067      	lsls	r7, r4, #1
 80079ce:	e7f3      	b.n	80079b8 <__ieee754_fmod+0x1a8>
 80079d0:	0fe3      	lsrs	r3, r4, #31
 80079d2:	0052      	lsls	r2, r2, #1
 80079d4:	18d2      	adds	r2, r2, r3
 80079d6:	0064      	lsls	r4, r4, #1
 80079d8:	3901      	subs	r1, #1
 80079da:	e789      	b.n	80078f0 <__ieee754_fmod+0xe0>
 80079dc:	4b12      	ldr	r3, [pc, #72]	; (8007a28 <__ieee754_fmod+0x218>)
 80079de:	1a5e      	subs	r6, r3, r1
 80079e0:	2e14      	cmp	r6, #20
 80079e2:	dc09      	bgt.n	80079f8 <__ieee754_fmod+0x1e8>
 80079e4:	0023      	movs	r3, r4
 80079e6:	0014      	movs	r4, r2
 80079e8:	4813      	ldr	r0, [pc, #76]	; (8007a38 <__ieee754_fmod+0x228>)
 80079ea:	40f3      	lsrs	r3, r6
 80079ec:	1809      	adds	r1, r1, r0
 80079ee:	408c      	lsls	r4, r1
 80079f0:	4132      	asrs	r2, r6
 80079f2:	431c      	orrs	r4, r3
 80079f4:	9b02      	ldr	r3, [sp, #8]
 80079f6:	e788      	b.n	800790a <__ieee754_fmod+0xfa>
 80079f8:	2e1f      	cmp	r6, #31
 80079fa:	dc06      	bgt.n	8007a0a <__ieee754_fmod+0x1fa>
 80079fc:	4b0e      	ldr	r3, [pc, #56]	; (8007a38 <__ieee754_fmod+0x228>)
 80079fe:	40f4      	lsrs	r4, r6
 8007a00:	18c9      	adds	r1, r1, r3
 8007a02:	408a      	lsls	r2, r1
 8007a04:	4314      	orrs	r4, r2
 8007a06:	9a02      	ldr	r2, [sp, #8]
 8007a08:	e7f4      	b.n	80079f4 <__ieee754_fmod+0x1e4>
 8007a0a:	4b0c      	ldr	r3, [pc, #48]	; (8007a3c <__ieee754_fmod+0x22c>)
 8007a0c:	1a59      	subs	r1, r3, r1
 8007a0e:	410a      	asrs	r2, r1
 8007a10:	0014      	movs	r4, r2
 8007a12:	e7f8      	b.n	8007a06 <__ieee754_fmod+0x1f6>
 8007a14:	7fefffff 	.word	0x7fefffff
 8007a18:	7ff00000 	.word	0x7ff00000
 8007a1c:	08008bf0 	.word	0x08008bf0
 8007a20:	000fffff 	.word	0x000fffff
 8007a24:	fffffbed 	.word	0xfffffbed
 8007a28:	fffffc02 	.word	0xfffffc02
 8007a2c:	000003ff 	.word	0x000003ff
 8007a30:	fff00000 	.word	0xfff00000
 8007a34:	fffffc01 	.word	0xfffffc01
 8007a38:	0000041e 	.word	0x0000041e
 8007a3c:	fffffbe2 	.word	0xfffffbe2

08007a40 <__ieee754_rem_pio2>:
 8007a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a42:	004b      	lsls	r3, r1, #1
 8007a44:	b091      	sub	sp, #68	; 0x44
 8007a46:	085b      	lsrs	r3, r3, #1
 8007a48:	9302      	str	r3, [sp, #8]
 8007a4a:	0017      	movs	r7, r2
 8007a4c:	4bb3      	ldr	r3, [pc, #716]	; (8007d1c <__ieee754_rem_pio2+0x2dc>)
 8007a4e:	9a02      	ldr	r2, [sp, #8]
 8007a50:	0004      	movs	r4, r0
 8007a52:	9109      	str	r1, [sp, #36]	; 0x24
 8007a54:	429a      	cmp	r2, r3
 8007a56:	dc09      	bgt.n	8007a6c <__ieee754_rem_pio2+0x2c>
 8007a58:	0002      	movs	r2, r0
 8007a5a:	000b      	movs	r3, r1
 8007a5c:	603a      	str	r2, [r7, #0]
 8007a5e:	607b      	str	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	2300      	movs	r3, #0
 8007a64:	60ba      	str	r2, [r7, #8]
 8007a66:	60fb      	str	r3, [r7, #12]
 8007a68:	2600      	movs	r6, #0
 8007a6a:	e024      	b.n	8007ab6 <__ieee754_rem_pio2+0x76>
 8007a6c:	4bac      	ldr	r3, [pc, #688]	; (8007d20 <__ieee754_rem_pio2+0x2e0>)
 8007a6e:	9a02      	ldr	r2, [sp, #8]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	dd00      	ble.n	8007a76 <__ieee754_rem_pio2+0x36>
 8007a74:	e06d      	b.n	8007b52 <__ieee754_rem_pio2+0x112>
 8007a76:	4aab      	ldr	r2, [pc, #684]	; (8007d24 <__ieee754_rem_pio2+0x2e4>)
 8007a78:	2900      	cmp	r1, #0
 8007a7a:	dd35      	ble.n	8007ae8 <__ieee754_rem_pio2+0xa8>
 8007a7c:	4baa      	ldr	r3, [pc, #680]	; (8007d28 <__ieee754_rem_pio2+0x2e8>)
 8007a7e:	f7fa fc3b 	bl	80022f8 <__aeabi_dsub>
 8007a82:	9b02      	ldr	r3, [sp, #8]
 8007a84:	0004      	movs	r4, r0
 8007a86:	001a      	movs	r2, r3
 8007a88:	4ba7      	ldr	r3, [pc, #668]	; (8007d28 <__ieee754_rem_pio2+0x2e8>)
 8007a8a:	000d      	movs	r5, r1
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d015      	beq.n	8007abc <__ieee754_rem_pio2+0x7c>
 8007a90:	4aa6      	ldr	r2, [pc, #664]	; (8007d2c <__ieee754_rem_pio2+0x2ec>)
 8007a92:	4ba7      	ldr	r3, [pc, #668]	; (8007d30 <__ieee754_rem_pio2+0x2f0>)
 8007a94:	f7fa fc30 	bl	80022f8 <__aeabi_dsub>
 8007a98:	0002      	movs	r2, r0
 8007a9a:	000b      	movs	r3, r1
 8007a9c:	0020      	movs	r0, r4
 8007a9e:	603a      	str	r2, [r7, #0]
 8007aa0:	607b      	str	r3, [r7, #4]
 8007aa2:	0029      	movs	r1, r5
 8007aa4:	f7fa fc28 	bl	80022f8 <__aeabi_dsub>
 8007aa8:	4aa0      	ldr	r2, [pc, #640]	; (8007d2c <__ieee754_rem_pio2+0x2ec>)
 8007aaa:	4ba1      	ldr	r3, [pc, #644]	; (8007d30 <__ieee754_rem_pio2+0x2f0>)
 8007aac:	f7fa fc24 	bl	80022f8 <__aeabi_dsub>
 8007ab0:	2601      	movs	r6, #1
 8007ab2:	60b8      	str	r0, [r7, #8]
 8007ab4:	60f9      	str	r1, [r7, #12]
 8007ab6:	0030      	movs	r0, r6
 8007ab8:	b011      	add	sp, #68	; 0x44
 8007aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007abc:	22d3      	movs	r2, #211	; 0xd3
 8007abe:	4b9c      	ldr	r3, [pc, #624]	; (8007d30 <__ieee754_rem_pio2+0x2f0>)
 8007ac0:	0552      	lsls	r2, r2, #21
 8007ac2:	f7fa fc19 	bl	80022f8 <__aeabi_dsub>
 8007ac6:	4a9b      	ldr	r2, [pc, #620]	; (8007d34 <__ieee754_rem_pio2+0x2f4>)
 8007ac8:	4b9b      	ldr	r3, [pc, #620]	; (8007d38 <__ieee754_rem_pio2+0x2f8>)
 8007aca:	0004      	movs	r4, r0
 8007acc:	000d      	movs	r5, r1
 8007ace:	f7fa fc13 	bl	80022f8 <__aeabi_dsub>
 8007ad2:	0002      	movs	r2, r0
 8007ad4:	000b      	movs	r3, r1
 8007ad6:	0020      	movs	r0, r4
 8007ad8:	603a      	str	r2, [r7, #0]
 8007ada:	607b      	str	r3, [r7, #4]
 8007adc:	0029      	movs	r1, r5
 8007ade:	f7fa fc0b 	bl	80022f8 <__aeabi_dsub>
 8007ae2:	4a94      	ldr	r2, [pc, #592]	; (8007d34 <__ieee754_rem_pio2+0x2f4>)
 8007ae4:	4b94      	ldr	r3, [pc, #592]	; (8007d38 <__ieee754_rem_pio2+0x2f8>)
 8007ae6:	e7e1      	b.n	8007aac <__ieee754_rem_pio2+0x6c>
 8007ae8:	4b8f      	ldr	r3, [pc, #572]	; (8007d28 <__ieee754_rem_pio2+0x2e8>)
 8007aea:	f7f9 fa6d 	bl	8000fc8 <__aeabi_dadd>
 8007aee:	9b02      	ldr	r3, [sp, #8]
 8007af0:	0004      	movs	r4, r0
 8007af2:	001a      	movs	r2, r3
 8007af4:	4b8c      	ldr	r3, [pc, #560]	; (8007d28 <__ieee754_rem_pio2+0x2e8>)
 8007af6:	000d      	movs	r5, r1
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d014      	beq.n	8007b26 <__ieee754_rem_pio2+0xe6>
 8007afc:	4a8b      	ldr	r2, [pc, #556]	; (8007d2c <__ieee754_rem_pio2+0x2ec>)
 8007afe:	4b8c      	ldr	r3, [pc, #560]	; (8007d30 <__ieee754_rem_pio2+0x2f0>)
 8007b00:	f7f9 fa62 	bl	8000fc8 <__aeabi_dadd>
 8007b04:	0002      	movs	r2, r0
 8007b06:	000b      	movs	r3, r1
 8007b08:	0020      	movs	r0, r4
 8007b0a:	603a      	str	r2, [r7, #0]
 8007b0c:	607b      	str	r3, [r7, #4]
 8007b0e:	0029      	movs	r1, r5
 8007b10:	f7fa fbf2 	bl	80022f8 <__aeabi_dsub>
 8007b14:	4a85      	ldr	r2, [pc, #532]	; (8007d2c <__ieee754_rem_pio2+0x2ec>)
 8007b16:	4b86      	ldr	r3, [pc, #536]	; (8007d30 <__ieee754_rem_pio2+0x2f0>)
 8007b18:	f7f9 fa56 	bl	8000fc8 <__aeabi_dadd>
 8007b1c:	2601      	movs	r6, #1
 8007b1e:	60b8      	str	r0, [r7, #8]
 8007b20:	60f9      	str	r1, [r7, #12]
 8007b22:	4276      	negs	r6, r6
 8007b24:	e7c7      	b.n	8007ab6 <__ieee754_rem_pio2+0x76>
 8007b26:	22d3      	movs	r2, #211	; 0xd3
 8007b28:	4b81      	ldr	r3, [pc, #516]	; (8007d30 <__ieee754_rem_pio2+0x2f0>)
 8007b2a:	0552      	lsls	r2, r2, #21
 8007b2c:	f7f9 fa4c 	bl	8000fc8 <__aeabi_dadd>
 8007b30:	4a80      	ldr	r2, [pc, #512]	; (8007d34 <__ieee754_rem_pio2+0x2f4>)
 8007b32:	4b81      	ldr	r3, [pc, #516]	; (8007d38 <__ieee754_rem_pio2+0x2f8>)
 8007b34:	0004      	movs	r4, r0
 8007b36:	000d      	movs	r5, r1
 8007b38:	f7f9 fa46 	bl	8000fc8 <__aeabi_dadd>
 8007b3c:	0002      	movs	r2, r0
 8007b3e:	000b      	movs	r3, r1
 8007b40:	0020      	movs	r0, r4
 8007b42:	603a      	str	r2, [r7, #0]
 8007b44:	607b      	str	r3, [r7, #4]
 8007b46:	0029      	movs	r1, r5
 8007b48:	f7fa fbd6 	bl	80022f8 <__aeabi_dsub>
 8007b4c:	4a79      	ldr	r2, [pc, #484]	; (8007d34 <__ieee754_rem_pio2+0x2f4>)
 8007b4e:	4b7a      	ldr	r3, [pc, #488]	; (8007d38 <__ieee754_rem_pio2+0x2f8>)
 8007b50:	e7e2      	b.n	8007b18 <__ieee754_rem_pio2+0xd8>
 8007b52:	4b7a      	ldr	r3, [pc, #488]	; (8007d3c <__ieee754_rem_pio2+0x2fc>)
 8007b54:	9a02      	ldr	r2, [sp, #8]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	dd00      	ble.n	8007b5c <__ieee754_rem_pio2+0x11c>
 8007b5a:	e0d1      	b.n	8007d00 <__ieee754_rem_pio2+0x2c0>
 8007b5c:	f000 fe2e 	bl	80087bc <fabs>
 8007b60:	4a77      	ldr	r2, [pc, #476]	; (8007d40 <__ieee754_rem_pio2+0x300>)
 8007b62:	4b78      	ldr	r3, [pc, #480]	; (8007d44 <__ieee754_rem_pio2+0x304>)
 8007b64:	0004      	movs	r4, r0
 8007b66:	000d      	movs	r5, r1
 8007b68:	f7fa f954 	bl	8001e14 <__aeabi_dmul>
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4b76      	ldr	r3, [pc, #472]	; (8007d48 <__ieee754_rem_pio2+0x308>)
 8007b70:	f7f9 fa2a 	bl	8000fc8 <__aeabi_dadd>
 8007b74:	f7fa ff24 	bl	80029c0 <__aeabi_d2iz>
 8007b78:	0006      	movs	r6, r0
 8007b7a:	f7fa ff57 	bl	8002a2c <__aeabi_i2d>
 8007b7e:	4a69      	ldr	r2, [pc, #420]	; (8007d24 <__ieee754_rem_pio2+0x2e4>)
 8007b80:	4b69      	ldr	r3, [pc, #420]	; (8007d28 <__ieee754_rem_pio2+0x2e8>)
 8007b82:	9006      	str	r0, [sp, #24]
 8007b84:	9107      	str	r1, [sp, #28]
 8007b86:	f7fa f945 	bl	8001e14 <__aeabi_dmul>
 8007b8a:	0002      	movs	r2, r0
 8007b8c:	000b      	movs	r3, r1
 8007b8e:	0020      	movs	r0, r4
 8007b90:	0029      	movs	r1, r5
 8007b92:	f7fa fbb1 	bl	80022f8 <__aeabi_dsub>
 8007b96:	4a65      	ldr	r2, [pc, #404]	; (8007d2c <__ieee754_rem_pio2+0x2ec>)
 8007b98:	9004      	str	r0, [sp, #16]
 8007b9a:	9105      	str	r1, [sp, #20]
 8007b9c:	9806      	ldr	r0, [sp, #24]
 8007b9e:	9907      	ldr	r1, [sp, #28]
 8007ba0:	4b63      	ldr	r3, [pc, #396]	; (8007d30 <__ieee754_rem_pio2+0x2f0>)
 8007ba2:	f7fa f937 	bl	8001e14 <__aeabi_dmul>
 8007ba6:	0004      	movs	r4, r0
 8007ba8:	000d      	movs	r5, r1
 8007baa:	2e1f      	cmp	r6, #31
 8007bac:	dc0f      	bgt.n	8007bce <__ieee754_rem_pio2+0x18e>
 8007bae:	4a67      	ldr	r2, [pc, #412]	; (8007d4c <__ieee754_rem_pio2+0x30c>)
 8007bb0:	1e73      	subs	r3, r6, #1
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	589b      	ldr	r3, [r3, r2]
 8007bb6:	9a02      	ldr	r2, [sp, #8]
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d008      	beq.n	8007bce <__ieee754_rem_pio2+0x18e>
 8007bbc:	9804      	ldr	r0, [sp, #16]
 8007bbe:	9905      	ldr	r1, [sp, #20]
 8007bc0:	0022      	movs	r2, r4
 8007bc2:	002b      	movs	r3, r5
 8007bc4:	f7fa fb98 	bl	80022f8 <__aeabi_dsub>
 8007bc8:	6038      	str	r0, [r7, #0]
 8007bca:	6079      	str	r1, [r7, #4]
 8007bcc:	e012      	b.n	8007bf4 <__ieee754_rem_pio2+0x1b4>
 8007bce:	0022      	movs	r2, r4
 8007bd0:	9804      	ldr	r0, [sp, #16]
 8007bd2:	9905      	ldr	r1, [sp, #20]
 8007bd4:	002b      	movs	r3, r5
 8007bd6:	f7fa fb8f 	bl	80022f8 <__aeabi_dsub>
 8007bda:	9b02      	ldr	r3, [sp, #8]
 8007bdc:	151b      	asrs	r3, r3, #20
 8007bde:	9308      	str	r3, [sp, #32]
 8007be0:	9a08      	ldr	r2, [sp, #32]
 8007be2:	004b      	lsls	r3, r1, #1
 8007be4:	0d5b      	lsrs	r3, r3, #21
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	2b10      	cmp	r3, #16
 8007bea:	dc21      	bgt.n	8007c30 <__ieee754_rem_pio2+0x1f0>
 8007bec:	0002      	movs	r2, r0
 8007bee:	000b      	movs	r3, r1
 8007bf0:	603a      	str	r2, [r7, #0]
 8007bf2:	607b      	str	r3, [r7, #4]
 8007bf4:	9804      	ldr	r0, [sp, #16]
 8007bf6:	9905      	ldr	r1, [sp, #20]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	9302      	str	r3, [sp, #8]
 8007bfe:	9b02      	ldr	r3, [sp, #8]
 8007c00:	f7fa fb7a 	bl	80022f8 <__aeabi_dsub>
 8007c04:	0022      	movs	r2, r4
 8007c06:	002b      	movs	r3, r5
 8007c08:	f7fa fb76 	bl	80022f8 <__aeabi_dsub>
 8007c0c:	000b      	movs	r3, r1
 8007c0e:	0002      	movs	r2, r0
 8007c10:	60ba      	str	r2, [r7, #8]
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	db00      	blt.n	8007c1c <__ieee754_rem_pio2+0x1dc>
 8007c1a:	e74c      	b.n	8007ab6 <__ieee754_rem_pio2+0x76>
 8007c1c:	2280      	movs	r2, #128	; 0x80
 8007c1e:	0612      	lsls	r2, r2, #24
 8007c20:	4694      	mov	ip, r2
 8007c22:	9b02      	ldr	r3, [sp, #8]
 8007c24:	1889      	adds	r1, r1, r2
 8007c26:	4463      	add	r3, ip
 8007c28:	607b      	str	r3, [r7, #4]
 8007c2a:	60b8      	str	r0, [r7, #8]
 8007c2c:	60f9      	str	r1, [r7, #12]
 8007c2e:	e778      	b.n	8007b22 <__ieee754_rem_pio2+0xe2>
 8007c30:	22d3      	movs	r2, #211	; 0xd3
 8007c32:	9806      	ldr	r0, [sp, #24]
 8007c34:	9907      	ldr	r1, [sp, #28]
 8007c36:	0552      	lsls	r2, r2, #21
 8007c38:	4b3d      	ldr	r3, [pc, #244]	; (8007d30 <__ieee754_rem_pio2+0x2f0>)
 8007c3a:	f7fa f8eb 	bl	8001e14 <__aeabi_dmul>
 8007c3e:	0004      	movs	r4, r0
 8007c40:	000d      	movs	r5, r1
 8007c42:	0002      	movs	r2, r0
 8007c44:	000b      	movs	r3, r1
 8007c46:	9804      	ldr	r0, [sp, #16]
 8007c48:	9905      	ldr	r1, [sp, #20]
 8007c4a:	f7fa fb55 	bl	80022f8 <__aeabi_dsub>
 8007c4e:	0002      	movs	r2, r0
 8007c50:	000b      	movs	r3, r1
 8007c52:	9002      	str	r0, [sp, #8]
 8007c54:	9103      	str	r1, [sp, #12]
 8007c56:	9804      	ldr	r0, [sp, #16]
 8007c58:	9905      	ldr	r1, [sp, #20]
 8007c5a:	f7fa fb4d 	bl	80022f8 <__aeabi_dsub>
 8007c5e:	0022      	movs	r2, r4
 8007c60:	002b      	movs	r3, r5
 8007c62:	f7fa fb49 	bl	80022f8 <__aeabi_dsub>
 8007c66:	0004      	movs	r4, r0
 8007c68:	000d      	movs	r5, r1
 8007c6a:	9806      	ldr	r0, [sp, #24]
 8007c6c:	9907      	ldr	r1, [sp, #28]
 8007c6e:	4a31      	ldr	r2, [pc, #196]	; (8007d34 <__ieee754_rem_pio2+0x2f4>)
 8007c70:	4b31      	ldr	r3, [pc, #196]	; (8007d38 <__ieee754_rem_pio2+0x2f8>)
 8007c72:	f7fa f8cf 	bl	8001e14 <__aeabi_dmul>
 8007c76:	0022      	movs	r2, r4
 8007c78:	002b      	movs	r3, r5
 8007c7a:	f7fa fb3d 	bl	80022f8 <__aeabi_dsub>
 8007c7e:	0002      	movs	r2, r0
 8007c80:	000b      	movs	r3, r1
 8007c82:	0004      	movs	r4, r0
 8007c84:	000d      	movs	r5, r1
 8007c86:	9802      	ldr	r0, [sp, #8]
 8007c88:	9903      	ldr	r1, [sp, #12]
 8007c8a:	f7fa fb35 	bl	80022f8 <__aeabi_dsub>
 8007c8e:	9a08      	ldr	r2, [sp, #32]
 8007c90:	004b      	lsls	r3, r1, #1
 8007c92:	0d5b      	lsrs	r3, r3, #21
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	2b31      	cmp	r3, #49	; 0x31
 8007c98:	dc08      	bgt.n	8007cac <__ieee754_rem_pio2+0x26c>
 8007c9a:	0002      	movs	r2, r0
 8007c9c:	000b      	movs	r3, r1
 8007c9e:	603a      	str	r2, [r7, #0]
 8007ca0:	607b      	str	r3, [r7, #4]
 8007ca2:	9a02      	ldr	r2, [sp, #8]
 8007ca4:	9b03      	ldr	r3, [sp, #12]
 8007ca6:	9204      	str	r2, [sp, #16]
 8007ca8:	9305      	str	r3, [sp, #20]
 8007caa:	e7a3      	b.n	8007bf4 <__ieee754_rem_pio2+0x1b4>
 8007cac:	22b8      	movs	r2, #184	; 0xb8
 8007cae:	9806      	ldr	r0, [sp, #24]
 8007cb0:	9907      	ldr	r1, [sp, #28]
 8007cb2:	0592      	lsls	r2, r2, #22
 8007cb4:	4b20      	ldr	r3, [pc, #128]	; (8007d38 <__ieee754_rem_pio2+0x2f8>)
 8007cb6:	f7fa f8ad 	bl	8001e14 <__aeabi_dmul>
 8007cba:	0004      	movs	r4, r0
 8007cbc:	000d      	movs	r5, r1
 8007cbe:	0002      	movs	r2, r0
 8007cc0:	000b      	movs	r3, r1
 8007cc2:	9802      	ldr	r0, [sp, #8]
 8007cc4:	9903      	ldr	r1, [sp, #12]
 8007cc6:	f7fa fb17 	bl	80022f8 <__aeabi_dsub>
 8007cca:	0002      	movs	r2, r0
 8007ccc:	000b      	movs	r3, r1
 8007cce:	9004      	str	r0, [sp, #16]
 8007cd0:	9105      	str	r1, [sp, #20]
 8007cd2:	9802      	ldr	r0, [sp, #8]
 8007cd4:	9903      	ldr	r1, [sp, #12]
 8007cd6:	f7fa fb0f 	bl	80022f8 <__aeabi_dsub>
 8007cda:	0022      	movs	r2, r4
 8007cdc:	002b      	movs	r3, r5
 8007cde:	f7fa fb0b 	bl	80022f8 <__aeabi_dsub>
 8007ce2:	0004      	movs	r4, r0
 8007ce4:	000d      	movs	r5, r1
 8007ce6:	9806      	ldr	r0, [sp, #24]
 8007ce8:	9907      	ldr	r1, [sp, #28]
 8007cea:	4a19      	ldr	r2, [pc, #100]	; (8007d50 <__ieee754_rem_pio2+0x310>)
 8007cec:	4b19      	ldr	r3, [pc, #100]	; (8007d54 <__ieee754_rem_pio2+0x314>)
 8007cee:	f7fa f891 	bl	8001e14 <__aeabi_dmul>
 8007cf2:	0022      	movs	r2, r4
 8007cf4:	002b      	movs	r3, r5
 8007cf6:	f7fa faff 	bl	80022f8 <__aeabi_dsub>
 8007cfa:	0004      	movs	r4, r0
 8007cfc:	000d      	movs	r5, r1
 8007cfe:	e75d      	b.n	8007bbc <__ieee754_rem_pio2+0x17c>
 8007d00:	4b15      	ldr	r3, [pc, #84]	; (8007d58 <__ieee754_rem_pio2+0x318>)
 8007d02:	9a02      	ldr	r2, [sp, #8]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	dd29      	ble.n	8007d5c <__ieee754_rem_pio2+0x31c>
 8007d08:	0002      	movs	r2, r0
 8007d0a:	000b      	movs	r3, r1
 8007d0c:	f7fa faf4 	bl	80022f8 <__aeabi_dsub>
 8007d10:	60b8      	str	r0, [r7, #8]
 8007d12:	60f9      	str	r1, [r7, #12]
 8007d14:	6038      	str	r0, [r7, #0]
 8007d16:	6079      	str	r1, [r7, #4]
 8007d18:	e6a6      	b.n	8007a68 <__ieee754_rem_pio2+0x28>
 8007d1a:	46c0      	nop			; (mov r8, r8)
 8007d1c:	3fe921fb 	.word	0x3fe921fb
 8007d20:	4002d97b 	.word	0x4002d97b
 8007d24:	54400000 	.word	0x54400000
 8007d28:	3ff921fb 	.word	0x3ff921fb
 8007d2c:	1a626331 	.word	0x1a626331
 8007d30:	3dd0b461 	.word	0x3dd0b461
 8007d34:	2e037073 	.word	0x2e037073
 8007d38:	3ba3198a 	.word	0x3ba3198a
 8007d3c:	413921fb 	.word	0x413921fb
 8007d40:	6dc9c883 	.word	0x6dc9c883
 8007d44:	3fe45f30 	.word	0x3fe45f30
 8007d48:	3fe00000 	.word	0x3fe00000
 8007d4c:	08008c00 	.word	0x08008c00
 8007d50:	252049c1 	.word	0x252049c1
 8007d54:	397b839a 	.word	0x397b839a
 8007d58:	7fefffff 	.word	0x7fefffff
 8007d5c:	9b02      	ldr	r3, [sp, #8]
 8007d5e:	4a29      	ldr	r2, [pc, #164]	; (8007e04 <__ieee754_rem_pio2+0x3c4>)
 8007d60:	151b      	asrs	r3, r3, #20
 8007d62:	189b      	adds	r3, r3, r2
 8007d64:	9a02      	ldr	r2, [sp, #8]
 8007d66:	9304      	str	r3, [sp, #16]
 8007d68:	051b      	lsls	r3, r3, #20
 8007d6a:	1ad5      	subs	r5, r2, r3
 8007d6c:	0029      	movs	r1, r5
 8007d6e:	f7fa fe27 	bl	80029c0 <__aeabi_d2iz>
 8007d72:	f7fa fe5b 	bl	8002a2c <__aeabi_i2d>
 8007d76:	0002      	movs	r2, r0
 8007d78:	000b      	movs	r3, r1
 8007d7a:	0020      	movs	r0, r4
 8007d7c:	0029      	movs	r1, r5
 8007d7e:	920a      	str	r2, [sp, #40]	; 0x28
 8007d80:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d82:	f7fa fab9 	bl	80022f8 <__aeabi_dsub>
 8007d86:	2200      	movs	r2, #0
 8007d88:	4b1f      	ldr	r3, [pc, #124]	; (8007e08 <__ieee754_rem_pio2+0x3c8>)
 8007d8a:	f7fa f843 	bl	8001e14 <__aeabi_dmul>
 8007d8e:	0004      	movs	r4, r0
 8007d90:	000d      	movs	r5, r1
 8007d92:	f7fa fe15 	bl	80029c0 <__aeabi_d2iz>
 8007d96:	f7fa fe49 	bl	8002a2c <__aeabi_i2d>
 8007d9a:	0002      	movs	r2, r0
 8007d9c:	000b      	movs	r3, r1
 8007d9e:	ae0a      	add	r6, sp, #40	; 0x28
 8007da0:	60b2      	str	r2, [r6, #8]
 8007da2:	60f3      	str	r3, [r6, #12]
 8007da4:	0020      	movs	r0, r4
 8007da6:	0029      	movs	r1, r5
 8007da8:	f7fa faa6 	bl	80022f8 <__aeabi_dsub>
 8007dac:	2200      	movs	r2, #0
 8007dae:	4b16      	ldr	r3, [pc, #88]	; (8007e08 <__ieee754_rem_pio2+0x3c8>)
 8007db0:	f7fa f830 	bl	8001e14 <__aeabi_dmul>
 8007db4:	2403      	movs	r4, #3
 8007db6:	6130      	str	r0, [r6, #16]
 8007db8:	6171      	str	r1, [r6, #20]
 8007dba:	1e65      	subs	r5, r4, #1
 8007dbc:	00eb      	lsls	r3, r5, #3
 8007dbe:	18f3      	adds	r3, r6, r3
 8007dc0:	6818      	ldr	r0, [r3, #0]
 8007dc2:	6859      	ldr	r1, [r3, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f7f8 fb2e 	bl	8000428 <__aeabi_dcmpeq>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d117      	bne.n	8007e00 <__ieee754_rem_pio2+0x3c0>
 8007dd0:	4b0e      	ldr	r3, [pc, #56]	; (8007e0c <__ieee754_rem_pio2+0x3cc>)
 8007dd2:	0030      	movs	r0, r6
 8007dd4:	9301      	str	r3, [sp, #4]
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	9a04      	ldr	r2, [sp, #16]
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	0039      	movs	r1, r7
 8007dde:	0023      	movs	r3, r4
 8007de0:	f000 f8d6 	bl	8007f90 <__kernel_rem_pio2>
 8007de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de6:	0006      	movs	r6, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	db00      	blt.n	8007dee <__ieee754_rem_pio2+0x3ae>
 8007dec:	e663      	b.n	8007ab6 <__ieee754_rem_pio2+0x76>
 8007dee:	2280      	movs	r2, #128	; 0x80
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	0612      	lsls	r2, r2, #24
 8007df4:	189b      	adds	r3, r3, r2
 8007df6:	607b      	str	r3, [r7, #4]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	189b      	adds	r3, r3, r2
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	e690      	b.n	8007b22 <__ieee754_rem_pio2+0xe2>
 8007e00:	002c      	movs	r4, r5
 8007e02:	e7da      	b.n	8007dba <__ieee754_rem_pio2+0x37a>
 8007e04:	fffffbea 	.word	0xfffffbea
 8007e08:	41700000 	.word	0x41700000
 8007e0c:	08008c80 	.word	0x08008c80

08007e10 <__kernel_cos>:
 8007e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e12:	b087      	sub	sp, #28
 8007e14:	9204      	str	r2, [sp, #16]
 8007e16:	9305      	str	r3, [sp, #20]
 8007e18:	004b      	lsls	r3, r1, #1
 8007e1a:	085b      	lsrs	r3, r3, #1
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	9a00      	ldr	r2, [sp, #0]
 8007e20:	4b48      	ldr	r3, [pc, #288]	; (8007f44 <__kernel_cos+0x134>)
 8007e22:	0005      	movs	r5, r0
 8007e24:	000c      	movs	r4, r1
 8007e26:	429a      	cmp	r2, r3
 8007e28:	dc04      	bgt.n	8007e34 <__kernel_cos+0x24>
 8007e2a:	f7fa fdc9 	bl	80029c0 <__aeabi_d2iz>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d100      	bne.n	8007e34 <__kernel_cos+0x24>
 8007e32:	e084      	b.n	8007f3e <__kernel_cos+0x12e>
 8007e34:	002a      	movs	r2, r5
 8007e36:	0023      	movs	r3, r4
 8007e38:	0028      	movs	r0, r5
 8007e3a:	0021      	movs	r1, r4
 8007e3c:	f7f9 ffea 	bl	8001e14 <__aeabi_dmul>
 8007e40:	2200      	movs	r2, #0
 8007e42:	4b41      	ldr	r3, [pc, #260]	; (8007f48 <__kernel_cos+0x138>)
 8007e44:	0006      	movs	r6, r0
 8007e46:	000f      	movs	r7, r1
 8007e48:	f7f9 ffe4 	bl	8001e14 <__aeabi_dmul>
 8007e4c:	4a3f      	ldr	r2, [pc, #252]	; (8007f4c <__kernel_cos+0x13c>)
 8007e4e:	9002      	str	r0, [sp, #8]
 8007e50:	9103      	str	r1, [sp, #12]
 8007e52:	4b3f      	ldr	r3, [pc, #252]	; (8007f50 <__kernel_cos+0x140>)
 8007e54:	0030      	movs	r0, r6
 8007e56:	0039      	movs	r1, r7
 8007e58:	f7f9 ffdc 	bl	8001e14 <__aeabi_dmul>
 8007e5c:	4a3d      	ldr	r2, [pc, #244]	; (8007f54 <__kernel_cos+0x144>)
 8007e5e:	4b3e      	ldr	r3, [pc, #248]	; (8007f58 <__kernel_cos+0x148>)
 8007e60:	f7f9 f8b2 	bl	8000fc8 <__aeabi_dadd>
 8007e64:	0032      	movs	r2, r6
 8007e66:	003b      	movs	r3, r7
 8007e68:	f7f9 ffd4 	bl	8001e14 <__aeabi_dmul>
 8007e6c:	4a3b      	ldr	r2, [pc, #236]	; (8007f5c <__kernel_cos+0x14c>)
 8007e6e:	4b3c      	ldr	r3, [pc, #240]	; (8007f60 <__kernel_cos+0x150>)
 8007e70:	f7fa fa42 	bl	80022f8 <__aeabi_dsub>
 8007e74:	0032      	movs	r2, r6
 8007e76:	003b      	movs	r3, r7
 8007e78:	f7f9 ffcc 	bl	8001e14 <__aeabi_dmul>
 8007e7c:	4a39      	ldr	r2, [pc, #228]	; (8007f64 <__kernel_cos+0x154>)
 8007e7e:	4b3a      	ldr	r3, [pc, #232]	; (8007f68 <__kernel_cos+0x158>)
 8007e80:	f7f9 f8a2 	bl	8000fc8 <__aeabi_dadd>
 8007e84:	0032      	movs	r2, r6
 8007e86:	003b      	movs	r3, r7
 8007e88:	f7f9 ffc4 	bl	8001e14 <__aeabi_dmul>
 8007e8c:	4a37      	ldr	r2, [pc, #220]	; (8007f6c <__kernel_cos+0x15c>)
 8007e8e:	4b38      	ldr	r3, [pc, #224]	; (8007f70 <__kernel_cos+0x160>)
 8007e90:	f7fa fa32 	bl	80022f8 <__aeabi_dsub>
 8007e94:	0032      	movs	r2, r6
 8007e96:	003b      	movs	r3, r7
 8007e98:	f7f9 ffbc 	bl	8001e14 <__aeabi_dmul>
 8007e9c:	4a35      	ldr	r2, [pc, #212]	; (8007f74 <__kernel_cos+0x164>)
 8007e9e:	4b36      	ldr	r3, [pc, #216]	; (8007f78 <__kernel_cos+0x168>)
 8007ea0:	f7f9 f892 	bl	8000fc8 <__aeabi_dadd>
 8007ea4:	0032      	movs	r2, r6
 8007ea6:	003b      	movs	r3, r7
 8007ea8:	f7f9 ffb4 	bl	8001e14 <__aeabi_dmul>
 8007eac:	0032      	movs	r2, r6
 8007eae:	003b      	movs	r3, r7
 8007eb0:	f7f9 ffb0 	bl	8001e14 <__aeabi_dmul>
 8007eb4:	9a04      	ldr	r2, [sp, #16]
 8007eb6:	9b05      	ldr	r3, [sp, #20]
 8007eb8:	0006      	movs	r6, r0
 8007eba:	000f      	movs	r7, r1
 8007ebc:	0028      	movs	r0, r5
 8007ebe:	0021      	movs	r1, r4
 8007ec0:	f7f9 ffa8 	bl	8001e14 <__aeabi_dmul>
 8007ec4:	0002      	movs	r2, r0
 8007ec6:	000b      	movs	r3, r1
 8007ec8:	0030      	movs	r0, r6
 8007eca:	0039      	movs	r1, r7
 8007ecc:	f7fa fa14 	bl	80022f8 <__aeabi_dsub>
 8007ed0:	4b2a      	ldr	r3, [pc, #168]	; (8007f7c <__kernel_cos+0x16c>)
 8007ed2:	9a00      	ldr	r2, [sp, #0]
 8007ed4:	0004      	movs	r4, r0
 8007ed6:	000d      	movs	r5, r1
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	dc0d      	bgt.n	8007ef8 <__kernel_cos+0xe8>
 8007edc:	0002      	movs	r2, r0
 8007ede:	000b      	movs	r3, r1
 8007ee0:	9802      	ldr	r0, [sp, #8]
 8007ee2:	9903      	ldr	r1, [sp, #12]
 8007ee4:	f7fa fa08 	bl	80022f8 <__aeabi_dsub>
 8007ee8:	0002      	movs	r2, r0
 8007eea:	2000      	movs	r0, #0
 8007eec:	000b      	movs	r3, r1
 8007eee:	4924      	ldr	r1, [pc, #144]	; (8007f80 <__kernel_cos+0x170>)
 8007ef0:	f7fa fa02 	bl	80022f8 <__aeabi_dsub>
 8007ef4:	b007      	add	sp, #28
 8007ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ef8:	4b22      	ldr	r3, [pc, #136]	; (8007f84 <__kernel_cos+0x174>)
 8007efa:	9a00      	ldr	r2, [sp, #0]
 8007efc:	2600      	movs	r6, #0
 8007efe:	429a      	cmp	r2, r3
 8007f00:	dc1b      	bgt.n	8007f3a <__kernel_cos+0x12a>
 8007f02:	0013      	movs	r3, r2
 8007f04:	4a20      	ldr	r2, [pc, #128]	; (8007f88 <__kernel_cos+0x178>)
 8007f06:	4694      	mov	ip, r2
 8007f08:	4463      	add	r3, ip
 8007f0a:	001f      	movs	r7, r3
 8007f0c:	0032      	movs	r2, r6
 8007f0e:	003b      	movs	r3, r7
 8007f10:	2000      	movs	r0, #0
 8007f12:	491b      	ldr	r1, [pc, #108]	; (8007f80 <__kernel_cos+0x170>)
 8007f14:	f7fa f9f0 	bl	80022f8 <__aeabi_dsub>
 8007f18:	0032      	movs	r2, r6
 8007f1a:	9000      	str	r0, [sp, #0]
 8007f1c:	9101      	str	r1, [sp, #4]
 8007f1e:	9802      	ldr	r0, [sp, #8]
 8007f20:	9903      	ldr	r1, [sp, #12]
 8007f22:	003b      	movs	r3, r7
 8007f24:	f7fa f9e8 	bl	80022f8 <__aeabi_dsub>
 8007f28:	0022      	movs	r2, r4
 8007f2a:	002b      	movs	r3, r5
 8007f2c:	f7fa f9e4 	bl	80022f8 <__aeabi_dsub>
 8007f30:	0002      	movs	r2, r0
 8007f32:	000b      	movs	r3, r1
 8007f34:	9800      	ldr	r0, [sp, #0]
 8007f36:	9901      	ldr	r1, [sp, #4]
 8007f38:	e7da      	b.n	8007ef0 <__kernel_cos+0xe0>
 8007f3a:	4f14      	ldr	r7, [pc, #80]	; (8007f8c <__kernel_cos+0x17c>)
 8007f3c:	e7e6      	b.n	8007f0c <__kernel_cos+0xfc>
 8007f3e:	2000      	movs	r0, #0
 8007f40:	490f      	ldr	r1, [pc, #60]	; (8007f80 <__kernel_cos+0x170>)
 8007f42:	e7d7      	b.n	8007ef4 <__kernel_cos+0xe4>
 8007f44:	3e3fffff 	.word	0x3e3fffff
 8007f48:	3fe00000 	.word	0x3fe00000
 8007f4c:	be8838d4 	.word	0xbe8838d4
 8007f50:	bda8fae9 	.word	0xbda8fae9
 8007f54:	bdb4b1c4 	.word	0xbdb4b1c4
 8007f58:	3e21ee9e 	.word	0x3e21ee9e
 8007f5c:	809c52ad 	.word	0x809c52ad
 8007f60:	3e927e4f 	.word	0x3e927e4f
 8007f64:	19cb1590 	.word	0x19cb1590
 8007f68:	3efa01a0 	.word	0x3efa01a0
 8007f6c:	16c15177 	.word	0x16c15177
 8007f70:	3f56c16c 	.word	0x3f56c16c
 8007f74:	5555554c 	.word	0x5555554c
 8007f78:	3fa55555 	.word	0x3fa55555
 8007f7c:	3fd33332 	.word	0x3fd33332
 8007f80:	3ff00000 	.word	0x3ff00000
 8007f84:	3fe90000 	.word	0x3fe90000
 8007f88:	ffe00000 	.word	0xffe00000
 8007f8c:	3fd20000 	.word	0x3fd20000

08007f90 <__kernel_rem_pio2>:
 8007f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f92:	0015      	movs	r5, r2
 8007f94:	4cdc      	ldr	r4, [pc, #880]	; (8008308 <__kernel_rem_pio2+0x378>)
 8007f96:	44a5      	add	sp, r4
 8007f98:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f9a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007f9c:	900d      	str	r0, [sp, #52]	; 0x34
 8007f9e:	009a      	lsls	r2, r3, #2
 8007fa0:	4bda      	ldr	r3, [pc, #872]	; (800830c <__kernel_rem_pio2+0x37c>)
 8007fa2:	9103      	str	r1, [sp, #12]
 8007fa4:	58d3      	ldr	r3, [r2, r3]
 8007fa6:	1ee8      	subs	r0, r5, #3
 8007fa8:	9306      	str	r3, [sp, #24]
 8007faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fac:	2118      	movs	r1, #24
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	9308      	str	r3, [sp, #32]
 8007fb2:	f7f8 f93d 	bl	8000230 <__divsi3>
 8007fb6:	43c3      	mvns	r3, r0
 8007fb8:	0004      	movs	r4, r0
 8007fba:	17db      	asrs	r3, r3, #31
 8007fbc:	401c      	ands	r4, r3
 8007fbe:	2318      	movs	r3, #24
 8007fc0:	1c62      	adds	r2, r4, #1
 8007fc2:	425b      	negs	r3, r3
 8007fc4:	4353      	muls	r3, r2
 8007fc6:	9a08      	ldr	r2, [sp, #32]
 8007fc8:	195b      	adds	r3, r3, r5
 8007fca:	4694      	mov	ip, r2
 8007fcc:	2500      	movs	r5, #0
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	9b06      	ldr	r3, [sp, #24]
 8007fd2:	1aa7      	subs	r7, r4, r2
 8007fd4:	4463      	add	r3, ip
 8007fd6:	9304      	str	r3, [sp, #16]
 8007fd8:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007fda:	00be      	lsls	r6, r7, #2
 8007fdc:	199e      	adds	r6, r3, r6
 8007fde:	9b04      	ldr	r3, [sp, #16]
 8007fe0:	429d      	cmp	r5, r3
 8007fe2:	dc00      	bgt.n	8007fe6 <__kernel_rem_pio2+0x56>
 8007fe4:	e094      	b.n	8008110 <__kernel_rem_pio2+0x180>
 8007fe6:	2600      	movs	r6, #0
 8007fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fea:	00dd      	lsls	r5, r3, #3
 8007fec:	ab28      	add	r3, sp, #160	; 0xa0
 8007fee:	195d      	adds	r5, r3, r5
 8007ff0:	9b06      	ldr	r3, [sp, #24]
 8007ff2:	429e      	cmp	r6, r3
 8007ff4:	dc00      	bgt.n	8007ff8 <__kernel_rem_pio2+0x68>
 8007ff6:	e0bc      	b.n	8008172 <__kernel_rem_pio2+0x1e2>
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	aa14      	add	r2, sp, #80	; 0x50
 8007ffc:	189b      	adds	r3, r3, r2
 8007ffe:	9312      	str	r3, [sp, #72]	; 0x48
 8008000:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008002:	00a4      	lsls	r4, r4, #2
 8008004:	191b      	adds	r3, r3, r4
 8008006:	9f06      	ldr	r7, [sp, #24]
 8008008:	930f      	str	r3, [sp, #60]	; 0x3c
 800800a:	003c      	movs	r4, r7
 800800c:	aa78      	add	r2, sp, #480	; 0x1e0
 800800e:	00fb      	lsls	r3, r7, #3
 8008010:	18d3      	adds	r3, r2, r3
 8008012:	681d      	ldr	r5, [r3, #0]
 8008014:	685e      	ldr	r6, [r3, #4]
 8008016:	a914      	add	r1, sp, #80	; 0x50
 8008018:	00bb      	lsls	r3, r7, #2
 800801a:	185b      	adds	r3, r3, r1
 800801c:	930a      	str	r3, [sp, #40]	; 0x28
 800801e:	920e      	str	r2, [sp, #56]	; 0x38
 8008020:	2c00      	cmp	r4, #0
 8008022:	dd00      	ble.n	8008026 <__kernel_rem_pio2+0x96>
 8008024:	e0ab      	b.n	800817e <__kernel_rem_pio2+0x1ee>
 8008026:	9a00      	ldr	r2, [sp, #0]
 8008028:	0028      	movs	r0, r5
 800802a:	0031      	movs	r1, r6
 800802c:	f000 fc4e 	bl	80088cc <scalbn>
 8008030:	23ff      	movs	r3, #255	; 0xff
 8008032:	2200      	movs	r2, #0
 8008034:	059b      	lsls	r3, r3, #22
 8008036:	0004      	movs	r4, r0
 8008038:	000d      	movs	r5, r1
 800803a:	f7f9 feeb 	bl	8001e14 <__aeabi_dmul>
 800803e:	f000 fbc1 	bl	80087c4 <floor>
 8008042:	2200      	movs	r2, #0
 8008044:	4bb2      	ldr	r3, [pc, #712]	; (8008310 <__kernel_rem_pio2+0x380>)
 8008046:	f7f9 fee5 	bl	8001e14 <__aeabi_dmul>
 800804a:	0002      	movs	r2, r0
 800804c:	000b      	movs	r3, r1
 800804e:	0020      	movs	r0, r4
 8008050:	0029      	movs	r1, r5
 8008052:	f7fa f951 	bl	80022f8 <__aeabi_dsub>
 8008056:	000d      	movs	r5, r1
 8008058:	0004      	movs	r4, r0
 800805a:	f7fa fcb1 	bl	80029c0 <__aeabi_d2iz>
 800805e:	900a      	str	r0, [sp, #40]	; 0x28
 8008060:	f7fa fce4 	bl	8002a2c <__aeabi_i2d>
 8008064:	000b      	movs	r3, r1
 8008066:	0002      	movs	r2, r0
 8008068:	0029      	movs	r1, r5
 800806a:	0020      	movs	r0, r4
 800806c:	f7fa f944 	bl	80022f8 <__aeabi_dsub>
 8008070:	9b00      	ldr	r3, [sp, #0]
 8008072:	0005      	movs	r5, r0
 8008074:	000e      	movs	r6, r1
 8008076:	2b00      	cmp	r3, #0
 8008078:	dc00      	bgt.n	800807c <__kernel_rem_pio2+0xec>
 800807a:	e0ab      	b.n	80081d4 <__kernel_rem_pio2+0x244>
 800807c:	2118      	movs	r1, #24
 800807e:	1e7b      	subs	r3, r7, #1
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	aa14      	add	r2, sp, #80	; 0x50
 8008084:	589a      	ldr	r2, [r3, r2]
 8008086:	9800      	ldr	r0, [sp, #0]
 8008088:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800808a:	1a09      	subs	r1, r1, r0
 800808c:	0010      	movs	r0, r2
 800808e:	4108      	asrs	r0, r1
 8008090:	1824      	adds	r4, r4, r0
 8008092:	4088      	lsls	r0, r1
 8008094:	1a10      	subs	r0, r2, r0
 8008096:	aa14      	add	r2, sp, #80	; 0x50
 8008098:	5098      	str	r0, [r3, r2]
 800809a:	2317      	movs	r3, #23
 800809c:	9a00      	ldr	r2, [sp, #0]
 800809e:	940a      	str	r4, [sp, #40]	; 0x28
 80080a0:	1a9b      	subs	r3, r3, r2
 80080a2:	4118      	asrs	r0, r3
 80080a4:	9004      	str	r0, [sp, #16]
 80080a6:	9b04      	ldr	r3, [sp, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	dc00      	bgt.n	80080ae <__kernel_rem_pio2+0x11e>
 80080ac:	e0a3      	b.n	80081f6 <__kernel_rem_pio2+0x266>
 80080ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b0:	2200      	movs	r2, #0
 80080b2:	3301      	adds	r3, #1
 80080b4:	930a      	str	r3, [sp, #40]	; 0x28
 80080b6:	2380      	movs	r3, #128	; 0x80
 80080b8:	045b      	lsls	r3, r3, #17
 80080ba:	0014      	movs	r4, r2
 80080bc:	469c      	mov	ip, r3
 80080be:	4297      	cmp	r7, r2
 80080c0:	dd00      	ble.n	80080c4 <__kernel_rem_pio2+0x134>
 80080c2:	e0d6      	b.n	8008272 <__kernel_rem_pio2+0x2e2>
 80080c4:	9b00      	ldr	r3, [sp, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	dd05      	ble.n	80080d6 <__kernel_rem_pio2+0x146>
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d100      	bne.n	80080d0 <__kernel_rem_pio2+0x140>
 80080ce:	e0e5      	b.n	800829c <__kernel_rem_pio2+0x30c>
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d100      	bne.n	80080d6 <__kernel_rem_pio2+0x146>
 80080d4:	e0ec      	b.n	80082b0 <__kernel_rem_pio2+0x320>
 80080d6:	9b04      	ldr	r3, [sp, #16]
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d000      	beq.n	80080de <__kernel_rem_pio2+0x14e>
 80080dc:	e08b      	b.n	80081f6 <__kernel_rem_pio2+0x266>
 80080de:	002a      	movs	r2, r5
 80080e0:	0033      	movs	r3, r6
 80080e2:	2000      	movs	r0, #0
 80080e4:	498b      	ldr	r1, [pc, #556]	; (8008314 <__kernel_rem_pio2+0x384>)
 80080e6:	f7fa f907 	bl	80022f8 <__aeabi_dsub>
 80080ea:	0005      	movs	r5, r0
 80080ec:	000e      	movs	r6, r1
 80080ee:	2c00      	cmp	r4, #0
 80080f0:	d100      	bne.n	80080f4 <__kernel_rem_pio2+0x164>
 80080f2:	e080      	b.n	80081f6 <__kernel_rem_pio2+0x266>
 80080f4:	9a00      	ldr	r2, [sp, #0]
 80080f6:	2000      	movs	r0, #0
 80080f8:	4986      	ldr	r1, [pc, #536]	; (8008314 <__kernel_rem_pio2+0x384>)
 80080fa:	f000 fbe7 	bl	80088cc <scalbn>
 80080fe:	0002      	movs	r2, r0
 8008100:	000b      	movs	r3, r1
 8008102:	0028      	movs	r0, r5
 8008104:	0031      	movs	r1, r6
 8008106:	f7fa f8f7 	bl	80022f8 <__aeabi_dsub>
 800810a:	0005      	movs	r5, r0
 800810c:	000e      	movs	r6, r1
 800810e:	e072      	b.n	80081f6 <__kernel_rem_pio2+0x266>
 8008110:	42ef      	cmn	r7, r5
 8008112:	d40a      	bmi.n	800812a <__kernel_rem_pio2+0x19a>
 8008114:	00ab      	lsls	r3, r5, #2
 8008116:	58f0      	ldr	r0, [r6, r3]
 8008118:	f7fa fc88 	bl	8002a2c <__aeabi_i2d>
 800811c:	00eb      	lsls	r3, r5, #3
 800811e:	aa28      	add	r2, sp, #160	; 0xa0
 8008120:	18d3      	adds	r3, r2, r3
 8008122:	6018      	str	r0, [r3, #0]
 8008124:	6059      	str	r1, [r3, #4]
 8008126:	3501      	adds	r5, #1
 8008128:	e759      	b.n	8007fde <__kernel_rem_pio2+0x4e>
 800812a:	2000      	movs	r0, #0
 800812c:	2100      	movs	r1, #0
 800812e:	e7f5      	b.n	800811c <__kernel_rem_pio2+0x18c>
 8008130:	00fb      	lsls	r3, r7, #3
 8008132:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008134:	1ae9      	subs	r1, r5, r3
 8008136:	3908      	subs	r1, #8
 8008138:	18d3      	adds	r3, r2, r3
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	6808      	ldr	r0, [r1, #0]
 8008140:	6849      	ldr	r1, [r1, #4]
 8008142:	f7f9 fe67 	bl	8001e14 <__aeabi_dmul>
 8008146:	0002      	movs	r2, r0
 8008148:	000b      	movs	r3, r1
 800814a:	9804      	ldr	r0, [sp, #16]
 800814c:	9905      	ldr	r1, [sp, #20]
 800814e:	f7f8 ff3b 	bl	8000fc8 <__aeabi_dadd>
 8008152:	9004      	str	r0, [sp, #16]
 8008154:	9105      	str	r1, [sp, #20]
 8008156:	3701      	adds	r7, #1
 8008158:	9b08      	ldr	r3, [sp, #32]
 800815a:	429f      	cmp	r7, r3
 800815c:	dde8      	ble.n	8008130 <__kernel_rem_pio2+0x1a0>
 800815e:	00f3      	lsls	r3, r6, #3
 8008160:	aa78      	add	r2, sp, #480	; 0x1e0
 8008162:	18d3      	adds	r3, r2, r3
 8008164:	3601      	adds	r6, #1
 8008166:	9904      	ldr	r1, [sp, #16]
 8008168:	9a05      	ldr	r2, [sp, #20]
 800816a:	3508      	adds	r5, #8
 800816c:	6019      	str	r1, [r3, #0]
 800816e:	605a      	str	r2, [r3, #4]
 8008170:	e73e      	b.n	8007ff0 <__kernel_rem_pio2+0x60>
 8008172:	2200      	movs	r2, #0
 8008174:	2300      	movs	r3, #0
 8008176:	2700      	movs	r7, #0
 8008178:	9204      	str	r2, [sp, #16]
 800817a:	9305      	str	r3, [sp, #20]
 800817c:	e7ec      	b.n	8008158 <__kernel_rem_pio2+0x1c8>
 800817e:	2200      	movs	r2, #0
 8008180:	4b65      	ldr	r3, [pc, #404]	; (8008318 <__kernel_rem_pio2+0x388>)
 8008182:	0028      	movs	r0, r5
 8008184:	0031      	movs	r1, r6
 8008186:	f7f9 fe45 	bl	8001e14 <__aeabi_dmul>
 800818a:	f7fa fc19 	bl	80029c0 <__aeabi_d2iz>
 800818e:	f7fa fc4d 	bl	8002a2c <__aeabi_i2d>
 8008192:	00a3      	lsls	r3, r4, #2
 8008194:	425b      	negs	r3, r3
 8008196:	930c      	str	r3, [sp, #48]	; 0x30
 8008198:	2200      	movs	r2, #0
 800819a:	4b60      	ldr	r3, [pc, #384]	; (800831c <__kernel_rem_pio2+0x38c>)
 800819c:	9004      	str	r0, [sp, #16]
 800819e:	9105      	str	r1, [sp, #20]
 80081a0:	f7f9 fe38 	bl	8001e14 <__aeabi_dmul>
 80081a4:	0002      	movs	r2, r0
 80081a6:	000b      	movs	r3, r1
 80081a8:	0028      	movs	r0, r5
 80081aa:	0031      	movs	r1, r6
 80081ac:	f7fa f8a4 	bl	80022f8 <__aeabi_dsub>
 80081b0:	f7fa fc06 	bl	80029c0 <__aeabi_d2iz>
 80081b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081b8:	3c01      	subs	r4, #1
 80081ba:	5098      	str	r0, [r3, r2]
 80081bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081be:	00e3      	lsls	r3, r4, #3
 80081c0:	18d3      	adds	r3, r2, r3
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	9804      	ldr	r0, [sp, #16]
 80081c8:	9905      	ldr	r1, [sp, #20]
 80081ca:	f7f8 fefd 	bl	8000fc8 <__aeabi_dadd>
 80081ce:	0005      	movs	r5, r0
 80081d0:	000e      	movs	r6, r1
 80081d2:	e725      	b.n	8008020 <__kernel_rem_pio2+0x90>
 80081d4:	9b00      	ldr	r3, [sp, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d106      	bne.n	80081e8 <__kernel_rem_pio2+0x258>
 80081da:	1e7b      	subs	r3, r7, #1
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	aa14      	add	r2, sp, #80	; 0x50
 80081e0:	5898      	ldr	r0, [r3, r2]
 80081e2:	15c3      	asrs	r3, r0, #23
 80081e4:	9304      	str	r3, [sp, #16]
 80081e6:	e75e      	b.n	80080a6 <__kernel_rem_pio2+0x116>
 80081e8:	2200      	movs	r2, #0
 80081ea:	4b4d      	ldr	r3, [pc, #308]	; (8008320 <__kernel_rem_pio2+0x390>)
 80081ec:	f7f8 f940 	bl	8000470 <__aeabi_dcmpge>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d13b      	bne.n	800826c <__kernel_rem_pio2+0x2dc>
 80081f4:	9004      	str	r0, [sp, #16]
 80081f6:	2200      	movs	r2, #0
 80081f8:	2300      	movs	r3, #0
 80081fa:	0028      	movs	r0, r5
 80081fc:	0031      	movs	r1, r6
 80081fe:	f7f8 f913 	bl	8000428 <__aeabi_dcmpeq>
 8008202:	2800      	cmp	r0, #0
 8008204:	d100      	bne.n	8008208 <__kernel_rem_pio2+0x278>
 8008206:	e0c9      	b.n	800839c <__kernel_rem_pio2+0x40c>
 8008208:	003b      	movs	r3, r7
 800820a:	2200      	movs	r2, #0
 800820c:	1e79      	subs	r1, r7, #1
 800820e:	9806      	ldr	r0, [sp, #24]
 8008210:	3b01      	subs	r3, #1
 8008212:	4298      	cmp	r0, r3
 8008214:	dd54      	ble.n	80082c0 <__kernel_rem_pio2+0x330>
 8008216:	2a00      	cmp	r2, #0
 8008218:	d074      	beq.n	8008304 <__kernel_rem_pio2+0x374>
 800821a:	000f      	movs	r7, r1
 800821c:	9b00      	ldr	r3, [sp, #0]
 800821e:	3b18      	subs	r3, #24
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	00bb      	lsls	r3, r7, #2
 8008224:	aa14      	add	r2, sp, #80	; 0x50
 8008226:	589b      	ldr	r3, [r3, r2]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d100      	bne.n	800822e <__kernel_rem_pio2+0x29e>
 800822c:	e0b1      	b.n	8008392 <__kernel_rem_pio2+0x402>
 800822e:	9a00      	ldr	r2, [sp, #0]
 8008230:	2000      	movs	r0, #0
 8008232:	4938      	ldr	r1, [pc, #224]	; (8008314 <__kernel_rem_pio2+0x384>)
 8008234:	f000 fb4a 	bl	80088cc <scalbn>
 8008238:	003c      	movs	r4, r7
 800823a:	0005      	movs	r5, r0
 800823c:	000e      	movs	r6, r1
 800823e:	2c00      	cmp	r4, #0
 8008240:	db00      	blt.n	8008244 <__kernel_rem_pio2+0x2b4>
 8008242:	e0e3      	b.n	800840c <__kernel_rem_pio2+0x47c>
 8008244:	2500      	movs	r5, #0
 8008246:	00fb      	lsls	r3, r7, #3
 8008248:	9308      	str	r3, [sp, #32]
 800824a:	00fa      	lsls	r2, r7, #3
 800824c:	ab78      	add	r3, sp, #480	; 0x1e0
 800824e:	189c      	adds	r4, r3, r2
 8008250:	1b7b      	subs	r3, r7, r5
 8008252:	d400      	bmi.n	8008256 <__kernel_rem_pio2+0x2c6>
 8008254:	e116      	b.n	8008484 <__kernel_rem_pio2+0x4f4>
 8008256:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008258:	2b03      	cmp	r3, #3
 800825a:	d900      	bls.n	800825e <__kernel_rem_pio2+0x2ce>
 800825c:	e15d      	b.n	800851a <__kernel_rem_pio2+0x58a>
 800825e:	0018      	movs	r0, r3
 8008260:	f7f7 ff52 	bl	8000108 <__gnu_thumb1_case_uhi>
 8008264:	01940163 	.word	0x01940163
 8008268:	01160194 	.word	0x01160194
 800826c:	2302      	movs	r3, #2
 800826e:	9304      	str	r3, [sp, #16]
 8008270:	e71d      	b.n	80080ae <__kernel_rem_pio2+0x11e>
 8008272:	0091      	lsls	r1, r2, #2
 8008274:	ab14      	add	r3, sp, #80	; 0x50
 8008276:	58cb      	ldr	r3, [r1, r3]
 8008278:	2c00      	cmp	r4, #0
 800827a:	d109      	bne.n	8008290 <__kernel_rem_pio2+0x300>
 800827c:	2b00      	cmp	r3, #0
 800827e:	d004      	beq.n	800828a <__kernel_rem_pio2+0x2fa>
 8008280:	4664      	mov	r4, ip
 8008282:	1ae3      	subs	r3, r4, r3
 8008284:	ac14      	add	r4, sp, #80	; 0x50
 8008286:	510b      	str	r3, [r1, r4]
 8008288:	2301      	movs	r3, #1
 800828a:	3201      	adds	r2, #1
 800828c:	001c      	movs	r4, r3
 800828e:	e716      	b.n	80080be <__kernel_rem_pio2+0x12e>
 8008290:	4824      	ldr	r0, [pc, #144]	; (8008324 <__kernel_rem_pio2+0x394>)
 8008292:	1ac3      	subs	r3, r0, r3
 8008294:	a814      	add	r0, sp, #80	; 0x50
 8008296:	500b      	str	r3, [r1, r0]
 8008298:	0023      	movs	r3, r4
 800829a:	e7f6      	b.n	800828a <__kernel_rem_pio2+0x2fa>
 800829c:	1e7b      	subs	r3, r7, #1
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	aa14      	add	r2, sp, #80	; 0x50
 80082a2:	589a      	ldr	r2, [r3, r2]
 80082a4:	920c      	str	r2, [sp, #48]	; 0x30
 80082a6:	0252      	lsls	r2, r2, #9
 80082a8:	0a52      	lsrs	r2, r2, #9
 80082aa:	a914      	add	r1, sp, #80	; 0x50
 80082ac:	505a      	str	r2, [r3, r1]
 80082ae:	e712      	b.n	80080d6 <__kernel_rem_pio2+0x146>
 80082b0:	1e7b      	subs	r3, r7, #1
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	aa14      	add	r2, sp, #80	; 0x50
 80082b6:	589a      	ldr	r2, [r3, r2]
 80082b8:	920c      	str	r2, [sp, #48]	; 0x30
 80082ba:	0292      	lsls	r2, r2, #10
 80082bc:	0a92      	lsrs	r2, r2, #10
 80082be:	e7f4      	b.n	80082aa <__kernel_rem_pio2+0x31a>
 80082c0:	0098      	lsls	r0, r3, #2
 80082c2:	ac14      	add	r4, sp, #80	; 0x50
 80082c4:	5900      	ldr	r0, [r0, r4]
 80082c6:	4302      	orrs	r2, r0
 80082c8:	e7a1      	b.n	800820e <__kernel_rem_pio2+0x27e>
 80082ca:	3301      	adds	r3, #1
 80082cc:	009a      	lsls	r2, r3, #2
 80082ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 80082d0:	4252      	negs	r2, r2
 80082d2:	588a      	ldr	r2, [r1, r2]
 80082d4:	2a00      	cmp	r2, #0
 80082d6:	d0f8      	beq.n	80082ca <__kernel_rem_pio2+0x33a>
 80082d8:	2400      	movs	r4, #0
 80082da:	1c7a      	adds	r2, r7, #1
 80082dc:	9204      	str	r2, [sp, #16]
 80082de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082e0:	18fb      	adds	r3, r7, r3
 80082e2:	18ba      	adds	r2, r7, r2
 80082e4:	00d2      	lsls	r2, r2, #3
 80082e6:	920c      	str	r2, [sp, #48]	; 0x30
 80082e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80082ea:	00fa      	lsls	r2, r7, #3
 80082ec:	920e      	str	r2, [sp, #56]	; 0x38
 80082ee:	aa28      	add	r2, sp, #160	; 0xa0
 80082f0:	1851      	adds	r1, r2, r1
 80082f2:	9110      	str	r1, [sp, #64]	; 0x40
 80082f4:	930a      	str	r3, [sp, #40]	; 0x28
 80082f6:	9213      	str	r2, [sp, #76]	; 0x4c
 80082f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082fa:	9a04      	ldr	r2, [sp, #16]
 80082fc:	4293      	cmp	r3, r2
 80082fe:	da13      	bge.n	8008328 <__kernel_rem_pio2+0x398>
 8008300:	001f      	movs	r7, r3
 8008302:	e682      	b.n	800800a <__kernel_rem_pio2+0x7a>
 8008304:	2301      	movs	r3, #1
 8008306:	e7e1      	b.n	80082cc <__kernel_rem_pio2+0x33c>
 8008308:	fffffd7c 	.word	0xfffffd7c
 800830c:	08008dc8 	.word	0x08008dc8
 8008310:	40200000 	.word	0x40200000
 8008314:	3ff00000 	.word	0x3ff00000
 8008318:	3e700000 	.word	0x3e700000
 800831c:	41700000 	.word	0x41700000
 8008320:	3fe00000 	.word	0x3fe00000
 8008324:	00ffffff 	.word	0x00ffffff
 8008328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800832a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800832c:	18e5      	adds	r5, r4, r3
 800832e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008330:	2600      	movs	r6, #0
 8008332:	195d      	adds	r5, r3, r5
 8008334:	9b04      	ldr	r3, [sp, #16]
 8008336:	2700      	movs	r7, #0
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	58d0      	ldr	r0, [r2, r3]
 800833c:	f7fa fb76 	bl	8002a2c <__aeabi_i2d>
 8008340:	6028      	str	r0, [r5, #0]
 8008342:	6069      	str	r1, [r5, #4]
 8008344:	2500      	movs	r5, #0
 8008346:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008348:	18e3      	adds	r3, r4, r3
 800834a:	9311      	str	r3, [sp, #68]	; 0x44
 800834c:	9b08      	ldr	r3, [sp, #32]
 800834e:	429d      	cmp	r5, r3
 8008350:	dd0a      	ble.n	8008368 <__kernel_rem_pio2+0x3d8>
 8008352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008354:	aa78      	add	r2, sp, #480	; 0x1e0
 8008356:	18e3      	adds	r3, r4, r3
 8008358:	18d3      	adds	r3, r2, r3
 800835a:	609e      	str	r6, [r3, #8]
 800835c:	60df      	str	r7, [r3, #12]
 800835e:	9b04      	ldr	r3, [sp, #16]
 8008360:	3408      	adds	r4, #8
 8008362:	3301      	adds	r3, #1
 8008364:	9304      	str	r3, [sp, #16]
 8008366:	e7c7      	b.n	80082f8 <__kernel_rem_pio2+0x368>
 8008368:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800836a:	00eb      	lsls	r3, r5, #3
 800836c:	18d1      	adds	r1, r2, r3
 800836e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008370:	6808      	ldr	r0, [r1, #0]
 8008372:	6849      	ldr	r1, [r1, #4]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	f7f9 fd4b 	bl	8001e14 <__aeabi_dmul>
 800837e:	0002      	movs	r2, r0
 8008380:	000b      	movs	r3, r1
 8008382:	0030      	movs	r0, r6
 8008384:	0039      	movs	r1, r7
 8008386:	f7f8 fe1f 	bl	8000fc8 <__aeabi_dadd>
 800838a:	3501      	adds	r5, #1
 800838c:	0006      	movs	r6, r0
 800838e:	000f      	movs	r7, r1
 8008390:	e7dc      	b.n	800834c <__kernel_rem_pio2+0x3bc>
 8008392:	9b00      	ldr	r3, [sp, #0]
 8008394:	3f01      	subs	r7, #1
 8008396:	3b18      	subs	r3, #24
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	e742      	b.n	8008222 <__kernel_rem_pio2+0x292>
 800839c:	9b00      	ldr	r3, [sp, #0]
 800839e:	0028      	movs	r0, r5
 80083a0:	425a      	negs	r2, r3
 80083a2:	0031      	movs	r1, r6
 80083a4:	f000 fa92 	bl	80088cc <scalbn>
 80083a8:	2200      	movs	r2, #0
 80083aa:	4baa      	ldr	r3, [pc, #680]	; (8008654 <__kernel_rem_pio2+0x6c4>)
 80083ac:	0004      	movs	r4, r0
 80083ae:	000d      	movs	r5, r1
 80083b0:	f7f8 f85e 	bl	8000470 <__aeabi_dcmpge>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d021      	beq.n	80083fc <__kernel_rem_pio2+0x46c>
 80083b8:	2200      	movs	r2, #0
 80083ba:	4ba7      	ldr	r3, [pc, #668]	; (8008658 <__kernel_rem_pio2+0x6c8>)
 80083bc:	0020      	movs	r0, r4
 80083be:	0029      	movs	r1, r5
 80083c0:	f7f9 fd28 	bl	8001e14 <__aeabi_dmul>
 80083c4:	f7fa fafc 	bl	80029c0 <__aeabi_d2iz>
 80083c8:	0006      	movs	r6, r0
 80083ca:	f7fa fb2f 	bl	8002a2c <__aeabi_i2d>
 80083ce:	2200      	movs	r2, #0
 80083d0:	4ba0      	ldr	r3, [pc, #640]	; (8008654 <__kernel_rem_pio2+0x6c4>)
 80083d2:	f7f9 fd1f 	bl	8001e14 <__aeabi_dmul>
 80083d6:	0002      	movs	r2, r0
 80083d8:	000b      	movs	r3, r1
 80083da:	0020      	movs	r0, r4
 80083dc:	0029      	movs	r1, r5
 80083de:	f7f9 ff8b 	bl	80022f8 <__aeabi_dsub>
 80083e2:	f7fa faed 	bl	80029c0 <__aeabi_d2iz>
 80083e6:	00ba      	lsls	r2, r7, #2
 80083e8:	ab14      	add	r3, sp, #80	; 0x50
 80083ea:	50d0      	str	r0, [r2, r3]
 80083ec:	9b00      	ldr	r3, [sp, #0]
 80083ee:	3701      	adds	r7, #1
 80083f0:	3318      	adds	r3, #24
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	aa14      	add	r2, sp, #80	; 0x50
 80083f6:	00bb      	lsls	r3, r7, #2
 80083f8:	509e      	str	r6, [r3, r2]
 80083fa:	e718      	b.n	800822e <__kernel_rem_pio2+0x29e>
 80083fc:	0020      	movs	r0, r4
 80083fe:	0029      	movs	r1, r5
 8008400:	f7fa fade 	bl	80029c0 <__aeabi_d2iz>
 8008404:	00be      	lsls	r6, r7, #2
 8008406:	ab14      	add	r3, sp, #80	; 0x50
 8008408:	50f0      	str	r0, [r6, r3]
 800840a:	e710      	b.n	800822e <__kernel_rem_pio2+0x29e>
 800840c:	00e3      	lsls	r3, r4, #3
 800840e:	aa78      	add	r2, sp, #480	; 0x1e0
 8008410:	18d3      	adds	r3, r2, r3
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	aa14      	add	r2, sp, #80	; 0x50
 8008416:	00a3      	lsls	r3, r4, #2
 8008418:	5898      	ldr	r0, [r3, r2]
 800841a:	f7fa fb07 	bl	8002a2c <__aeabi_i2d>
 800841e:	002a      	movs	r2, r5
 8008420:	0033      	movs	r3, r6
 8008422:	f7f9 fcf7 	bl	8001e14 <__aeabi_dmul>
 8008426:	9b00      	ldr	r3, [sp, #0]
 8008428:	2200      	movs	r2, #0
 800842a:	6018      	str	r0, [r3, #0]
 800842c:	6059      	str	r1, [r3, #4]
 800842e:	0028      	movs	r0, r5
 8008430:	0031      	movs	r1, r6
 8008432:	4b89      	ldr	r3, [pc, #548]	; (8008658 <__kernel_rem_pio2+0x6c8>)
 8008434:	f7f9 fcee 	bl	8001e14 <__aeabi_dmul>
 8008438:	3c01      	subs	r4, #1
 800843a:	0005      	movs	r5, r0
 800843c:	000e      	movs	r6, r1
 800843e:	e6fe      	b.n	800823e <__kernel_rem_pio2+0x2ae>
 8008440:	4a86      	ldr	r2, [pc, #536]	; (800865c <__kernel_rem_pio2+0x6cc>)
 8008442:	00f3      	lsls	r3, r6, #3
 8008444:	18d1      	adds	r1, r2, r3
 8008446:	18e3      	adds	r3, r4, r3
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	6808      	ldr	r0, [r1, #0]
 800844e:	6849      	ldr	r1, [r1, #4]
 8008450:	f7f9 fce0 	bl	8001e14 <__aeabi_dmul>
 8008454:	0002      	movs	r2, r0
 8008456:	000b      	movs	r3, r1
 8008458:	9800      	ldr	r0, [sp, #0]
 800845a:	9901      	ldr	r1, [sp, #4]
 800845c:	f7f8 fdb4 	bl	8000fc8 <__aeabi_dadd>
 8008460:	9000      	str	r0, [sp, #0]
 8008462:	9101      	str	r1, [sp, #4]
 8008464:	3601      	adds	r6, #1
 8008466:	9b06      	ldr	r3, [sp, #24]
 8008468:	429e      	cmp	r6, r3
 800846a:	dc01      	bgt.n	8008470 <__kernel_rem_pio2+0x4e0>
 800846c:	42b5      	cmp	r5, r6
 800846e:	dae7      	bge.n	8008440 <__kernel_rem_pio2+0x4b0>
 8008470:	00eb      	lsls	r3, r5, #3
 8008472:	aa50      	add	r2, sp, #320	; 0x140
 8008474:	18d3      	adds	r3, r2, r3
 8008476:	3501      	adds	r5, #1
 8008478:	9900      	ldr	r1, [sp, #0]
 800847a:	9a01      	ldr	r2, [sp, #4]
 800847c:	3c08      	subs	r4, #8
 800847e:	6019      	str	r1, [r3, #0]
 8008480:	605a      	str	r2, [r3, #4]
 8008482:	e6e5      	b.n	8008250 <__kernel_rem_pio2+0x2c0>
 8008484:	2200      	movs	r2, #0
 8008486:	2300      	movs	r3, #0
 8008488:	2600      	movs	r6, #0
 800848a:	9200      	str	r2, [sp, #0]
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	e7ea      	b.n	8008466 <__kernel_rem_pio2+0x4d6>
 8008490:	aa50      	add	r2, sp, #320	; 0x140
 8008492:	4694      	mov	ip, r2
 8008494:	9b08      	ldr	r3, [sp, #32]
 8008496:	003e      	movs	r6, r7
 8008498:	4463      	add	r3, ip
 800849a:	001c      	movs	r4, r3
 800849c:	001d      	movs	r5, r3
 800849e:	3d08      	subs	r5, #8
 80084a0:	2e00      	cmp	r6, #0
 80084a2:	dd00      	ble.n	80084a6 <__kernel_rem_pio2+0x516>
 80084a4:	e07f      	b.n	80085a6 <__kernel_rem_pio2+0x616>
 80084a6:	9700      	str	r7, [sp, #0]
 80084a8:	9b00      	ldr	r3, [sp, #0]
 80084aa:	3c08      	subs	r4, #8
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	dd00      	ble.n	80084b2 <__kernel_rem_pio2+0x522>
 80084b0:	e099      	b.n	80085e6 <__kernel_rem_pio2+0x656>
 80084b2:	2000      	movs	r0, #0
 80084b4:	0001      	movs	r1, r0
 80084b6:	2f01      	cmp	r7, #1
 80084b8:	dd00      	ble.n	80084bc <__kernel_rem_pio2+0x52c>
 80084ba:	e0b4      	b.n	8008626 <__kernel_rem_pio2+0x696>
 80084bc:	9b04      	ldr	r3, [sp, #16]
 80084be:	9f50      	ldr	r7, [sp, #320]	; 0x140
 80084c0:	9e51      	ldr	r6, [sp, #324]	; 0x144
 80084c2:	9d52      	ldr	r5, [sp, #328]	; 0x148
 80084c4:	9c53      	ldr	r4, [sp, #332]	; 0x14c
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d000      	beq.n	80084cc <__kernel_rem_pio2+0x53c>
 80084ca:	e0b5      	b.n	8008638 <__kernel_rem_pio2+0x6a8>
 80084cc:	0033      	movs	r3, r6
 80084ce:	003a      	movs	r2, r7
 80084d0:	9e03      	ldr	r6, [sp, #12]
 80084d2:	6032      	str	r2, [r6, #0]
 80084d4:	6073      	str	r3, [r6, #4]
 80084d6:	002a      	movs	r2, r5
 80084d8:	0023      	movs	r3, r4
 80084da:	60b2      	str	r2, [r6, #8]
 80084dc:	60f3      	str	r3, [r6, #12]
 80084de:	0002      	movs	r2, r0
 80084e0:	000b      	movs	r3, r1
 80084e2:	6132      	str	r2, [r6, #16]
 80084e4:	6173      	str	r3, [r6, #20]
 80084e6:	e018      	b.n	800851a <__kernel_rem_pio2+0x58a>
 80084e8:	00fb      	lsls	r3, r7, #3
 80084ea:	aa50      	add	r2, sp, #320	; 0x140
 80084ec:	18d3      	adds	r3, r2, r3
 80084ee:	0028      	movs	r0, r5
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	0021      	movs	r1, r4
 80084f6:	f7f8 fd67 	bl	8000fc8 <__aeabi_dadd>
 80084fa:	0005      	movs	r5, r0
 80084fc:	000c      	movs	r4, r1
 80084fe:	3f01      	subs	r7, #1
 8008500:	2f00      	cmp	r7, #0
 8008502:	daf1      	bge.n	80084e8 <__kernel_rem_pio2+0x558>
 8008504:	9b04      	ldr	r3, [sp, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d002      	beq.n	8008510 <__kernel_rem_pio2+0x580>
 800850a:	2380      	movs	r3, #128	; 0x80
 800850c:	061b      	lsls	r3, r3, #24
 800850e:	18e4      	adds	r4, r4, r3
 8008510:	002a      	movs	r2, r5
 8008512:	0023      	movs	r3, r4
 8008514:	9903      	ldr	r1, [sp, #12]
 8008516:	600a      	str	r2, [r1, #0]
 8008518:	604b      	str	r3, [r1, #4]
 800851a:	2007      	movs	r0, #7
 800851c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800851e:	4003      	ands	r3, r0
 8008520:	0018      	movs	r0, r3
 8008522:	23a1      	movs	r3, #161	; 0xa1
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	449d      	add	sp, r3
 8008528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800852a:	2500      	movs	r5, #0
 800852c:	002c      	movs	r4, r5
 800852e:	e7e7      	b.n	8008500 <__kernel_rem_pio2+0x570>
 8008530:	00e3      	lsls	r3, r4, #3
 8008532:	aa50      	add	r2, sp, #320	; 0x140
 8008534:	18d3      	adds	r3, r2, r3
 8008536:	0030      	movs	r0, r6
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	0029      	movs	r1, r5
 800853e:	f7f8 fd43 	bl	8000fc8 <__aeabi_dadd>
 8008542:	0006      	movs	r6, r0
 8008544:	000d      	movs	r5, r1
 8008546:	3c01      	subs	r4, #1
 8008548:	2c00      	cmp	r4, #0
 800854a:	daf1      	bge.n	8008530 <__kernel_rem_pio2+0x5a0>
 800854c:	9b04      	ldr	r3, [sp, #16]
 800854e:	0029      	movs	r1, r5
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <__kernel_rem_pio2+0x5ca>
 8008554:	2380      	movs	r3, #128	; 0x80
 8008556:	061b      	lsls	r3, r3, #24
 8008558:	18e9      	adds	r1, r5, r3
 800855a:	000b      	movs	r3, r1
 800855c:	0032      	movs	r2, r6
 800855e:	9903      	ldr	r1, [sp, #12]
 8008560:	2401      	movs	r4, #1
 8008562:	600a      	str	r2, [r1, #0]
 8008564:	604b      	str	r3, [r1, #4]
 8008566:	9850      	ldr	r0, [sp, #320]	; 0x140
 8008568:	9951      	ldr	r1, [sp, #324]	; 0x144
 800856a:	002b      	movs	r3, r5
 800856c:	f7f9 fec4 	bl	80022f8 <__aeabi_dsub>
 8008570:	42a7      	cmp	r7, r4
 8008572:	da0f      	bge.n	8008594 <__kernel_rem_pio2+0x604>
 8008574:	9b04      	ldr	r3, [sp, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d002      	beq.n	8008580 <__kernel_rem_pio2+0x5f0>
 800857a:	2380      	movs	r3, #128	; 0x80
 800857c:	061b      	lsls	r3, r3, #24
 800857e:	18c9      	adds	r1, r1, r3
 8008580:	000b      	movs	r3, r1
 8008582:	0002      	movs	r2, r0
 8008584:	9903      	ldr	r1, [sp, #12]
 8008586:	608a      	str	r2, [r1, #8]
 8008588:	60cb      	str	r3, [r1, #12]
 800858a:	e7c6      	b.n	800851a <__kernel_rem_pio2+0x58a>
 800858c:	2600      	movs	r6, #0
 800858e:	003c      	movs	r4, r7
 8008590:	0035      	movs	r5, r6
 8008592:	e7d9      	b.n	8008548 <__kernel_rem_pio2+0x5b8>
 8008594:	00e3      	lsls	r3, r4, #3
 8008596:	aa50      	add	r2, sp, #320	; 0x140
 8008598:	18d3      	adds	r3, r2, r3
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f7f8 fd13 	bl	8000fc8 <__aeabi_dadd>
 80085a2:	3401      	adds	r4, #1
 80085a4:	e7e4      	b.n	8008570 <__kernel_rem_pio2+0x5e0>
 80085a6:	682a      	ldr	r2, [r5, #0]
 80085a8:	686b      	ldr	r3, [r5, #4]
 80085aa:	9200      	str	r2, [sp, #0]
 80085ac:	9301      	str	r3, [sp, #4]
 80085ae:	9800      	ldr	r0, [sp, #0]
 80085b0:	9901      	ldr	r1, [sp, #4]
 80085b2:	68aa      	ldr	r2, [r5, #8]
 80085b4:	68eb      	ldr	r3, [r5, #12]
 80085b6:	9206      	str	r2, [sp, #24]
 80085b8:	9307      	str	r3, [sp, #28]
 80085ba:	f7f8 fd05 	bl	8000fc8 <__aeabi_dadd>
 80085be:	0002      	movs	r2, r0
 80085c0:	000b      	movs	r3, r1
 80085c2:	9008      	str	r0, [sp, #32]
 80085c4:	9109      	str	r1, [sp, #36]	; 0x24
 80085c6:	9800      	ldr	r0, [sp, #0]
 80085c8:	9901      	ldr	r1, [sp, #4]
 80085ca:	f7f9 fe95 	bl	80022f8 <__aeabi_dsub>
 80085ce:	9a06      	ldr	r2, [sp, #24]
 80085d0:	9b07      	ldr	r3, [sp, #28]
 80085d2:	f7f8 fcf9 	bl	8000fc8 <__aeabi_dadd>
 80085d6:	9a08      	ldr	r2, [sp, #32]
 80085d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085da:	3e01      	subs	r6, #1
 80085dc:	60a8      	str	r0, [r5, #8]
 80085de:	60e9      	str	r1, [r5, #12]
 80085e0:	602a      	str	r2, [r5, #0]
 80085e2:	606b      	str	r3, [r5, #4]
 80085e4:	e75b      	b.n	800849e <__kernel_rem_pio2+0x50e>
 80085e6:	9b00      	ldr	r3, [sp, #0]
 80085e8:	3b01      	subs	r3, #1
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	6822      	ldr	r2, [r4, #0]
 80085ee:	6863      	ldr	r3, [r4, #4]
 80085f0:	9206      	str	r2, [sp, #24]
 80085f2:	9307      	str	r3, [sp, #28]
 80085f4:	9806      	ldr	r0, [sp, #24]
 80085f6:	9907      	ldr	r1, [sp, #28]
 80085f8:	68a2      	ldr	r2, [r4, #8]
 80085fa:	68e3      	ldr	r3, [r4, #12]
 80085fc:	9208      	str	r2, [sp, #32]
 80085fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008600:	f7f8 fce2 	bl	8000fc8 <__aeabi_dadd>
 8008604:	0002      	movs	r2, r0
 8008606:	000b      	movs	r3, r1
 8008608:	0005      	movs	r5, r0
 800860a:	000e      	movs	r6, r1
 800860c:	9806      	ldr	r0, [sp, #24]
 800860e:	9907      	ldr	r1, [sp, #28]
 8008610:	f7f9 fe72 	bl	80022f8 <__aeabi_dsub>
 8008614:	9a08      	ldr	r2, [sp, #32]
 8008616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008618:	f7f8 fcd6 	bl	8000fc8 <__aeabi_dadd>
 800861c:	6025      	str	r5, [r4, #0]
 800861e:	6066      	str	r6, [r4, #4]
 8008620:	60a0      	str	r0, [r4, #8]
 8008622:	60e1      	str	r1, [r4, #12]
 8008624:	e740      	b.n	80084a8 <__kernel_rem_pio2+0x518>
 8008626:	00fb      	lsls	r3, r7, #3
 8008628:	aa50      	add	r2, sp, #320	; 0x140
 800862a:	18d3      	adds	r3, r2, r3
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f7f8 fcca 	bl	8000fc8 <__aeabi_dadd>
 8008634:	3f01      	subs	r7, #1
 8008636:	e73e      	b.n	80084b6 <__kernel_rem_pio2+0x526>
 8008638:	9b03      	ldr	r3, [sp, #12]
 800863a:	9a03      	ldr	r2, [sp, #12]
 800863c:	601f      	str	r7, [r3, #0]
 800863e:	2380      	movs	r3, #128	; 0x80
 8008640:	061b      	lsls	r3, r3, #24
 8008642:	18f6      	adds	r6, r6, r3
 8008644:	18e4      	adds	r4, r4, r3
 8008646:	18c9      	adds	r1, r1, r3
 8008648:	6056      	str	r6, [r2, #4]
 800864a:	6095      	str	r5, [r2, #8]
 800864c:	60d4      	str	r4, [r2, #12]
 800864e:	6110      	str	r0, [r2, #16]
 8008650:	6151      	str	r1, [r2, #20]
 8008652:	e762      	b.n	800851a <__kernel_rem_pio2+0x58a>
 8008654:	41700000 	.word	0x41700000
 8008658:	3e700000 	.word	0x3e700000
 800865c:	08008d88 	.word	0x08008d88

08008660 <__kernel_sin>:
 8008660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008662:	b089      	sub	sp, #36	; 0x24
 8008664:	9202      	str	r2, [sp, #8]
 8008666:	9303      	str	r3, [sp, #12]
 8008668:	4a46      	ldr	r2, [pc, #280]	; (8008784 <__kernel_sin+0x124>)
 800866a:	004b      	lsls	r3, r1, #1
 800866c:	0005      	movs	r5, r0
 800866e:	000c      	movs	r4, r1
 8008670:	085b      	lsrs	r3, r3, #1
 8008672:	4293      	cmp	r3, r2
 8008674:	dc03      	bgt.n	800867e <__kernel_sin+0x1e>
 8008676:	f7fa f9a3 	bl	80029c0 <__aeabi_d2iz>
 800867a:	2800      	cmp	r0, #0
 800867c:	d04c      	beq.n	8008718 <__kernel_sin+0xb8>
 800867e:	002a      	movs	r2, r5
 8008680:	0023      	movs	r3, r4
 8008682:	0028      	movs	r0, r5
 8008684:	0021      	movs	r1, r4
 8008686:	f7f9 fbc5 	bl	8001e14 <__aeabi_dmul>
 800868a:	0006      	movs	r6, r0
 800868c:	000f      	movs	r7, r1
 800868e:	0002      	movs	r2, r0
 8008690:	000b      	movs	r3, r1
 8008692:	0028      	movs	r0, r5
 8008694:	0021      	movs	r1, r4
 8008696:	f7f9 fbbd 	bl	8001e14 <__aeabi_dmul>
 800869a:	4a3b      	ldr	r2, [pc, #236]	; (8008788 <__kernel_sin+0x128>)
 800869c:	9000      	str	r0, [sp, #0]
 800869e:	9101      	str	r1, [sp, #4]
 80086a0:	4b3a      	ldr	r3, [pc, #232]	; (800878c <__kernel_sin+0x12c>)
 80086a2:	0030      	movs	r0, r6
 80086a4:	0039      	movs	r1, r7
 80086a6:	f7f9 fbb5 	bl	8001e14 <__aeabi_dmul>
 80086aa:	4a39      	ldr	r2, [pc, #228]	; (8008790 <__kernel_sin+0x130>)
 80086ac:	4b39      	ldr	r3, [pc, #228]	; (8008794 <__kernel_sin+0x134>)
 80086ae:	f7f9 fe23 	bl	80022f8 <__aeabi_dsub>
 80086b2:	0032      	movs	r2, r6
 80086b4:	003b      	movs	r3, r7
 80086b6:	f7f9 fbad 	bl	8001e14 <__aeabi_dmul>
 80086ba:	4a37      	ldr	r2, [pc, #220]	; (8008798 <__kernel_sin+0x138>)
 80086bc:	4b37      	ldr	r3, [pc, #220]	; (800879c <__kernel_sin+0x13c>)
 80086be:	f7f8 fc83 	bl	8000fc8 <__aeabi_dadd>
 80086c2:	0032      	movs	r2, r6
 80086c4:	003b      	movs	r3, r7
 80086c6:	f7f9 fba5 	bl	8001e14 <__aeabi_dmul>
 80086ca:	4a35      	ldr	r2, [pc, #212]	; (80087a0 <__kernel_sin+0x140>)
 80086cc:	4b35      	ldr	r3, [pc, #212]	; (80087a4 <__kernel_sin+0x144>)
 80086ce:	f7f9 fe13 	bl	80022f8 <__aeabi_dsub>
 80086d2:	0032      	movs	r2, r6
 80086d4:	003b      	movs	r3, r7
 80086d6:	f7f9 fb9d 	bl	8001e14 <__aeabi_dmul>
 80086da:	4b33      	ldr	r3, [pc, #204]	; (80087a8 <__kernel_sin+0x148>)
 80086dc:	4a33      	ldr	r2, [pc, #204]	; (80087ac <__kernel_sin+0x14c>)
 80086de:	f7f8 fc73 	bl	8000fc8 <__aeabi_dadd>
 80086e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086e4:	9004      	str	r0, [sp, #16]
 80086e6:	9105      	str	r1, [sp, #20]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d119      	bne.n	8008720 <__kernel_sin+0xc0>
 80086ec:	0002      	movs	r2, r0
 80086ee:	000b      	movs	r3, r1
 80086f0:	0030      	movs	r0, r6
 80086f2:	0039      	movs	r1, r7
 80086f4:	f7f9 fb8e 	bl	8001e14 <__aeabi_dmul>
 80086f8:	4a2d      	ldr	r2, [pc, #180]	; (80087b0 <__kernel_sin+0x150>)
 80086fa:	4b2e      	ldr	r3, [pc, #184]	; (80087b4 <__kernel_sin+0x154>)
 80086fc:	f7f9 fdfc 	bl	80022f8 <__aeabi_dsub>
 8008700:	9a00      	ldr	r2, [sp, #0]
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	f7f9 fb86 	bl	8001e14 <__aeabi_dmul>
 8008708:	0002      	movs	r2, r0
 800870a:	000b      	movs	r3, r1
 800870c:	0028      	movs	r0, r5
 800870e:	0021      	movs	r1, r4
 8008710:	f7f8 fc5a 	bl	8000fc8 <__aeabi_dadd>
 8008714:	0005      	movs	r5, r0
 8008716:	000c      	movs	r4, r1
 8008718:	0028      	movs	r0, r5
 800871a:	0021      	movs	r1, r4
 800871c:	b009      	add	sp, #36	; 0x24
 800871e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008720:	2200      	movs	r2, #0
 8008722:	9802      	ldr	r0, [sp, #8]
 8008724:	9903      	ldr	r1, [sp, #12]
 8008726:	4b24      	ldr	r3, [pc, #144]	; (80087b8 <__kernel_sin+0x158>)
 8008728:	f7f9 fb74 	bl	8001e14 <__aeabi_dmul>
 800872c:	9a04      	ldr	r2, [sp, #16]
 800872e:	9b05      	ldr	r3, [sp, #20]
 8008730:	9006      	str	r0, [sp, #24]
 8008732:	9107      	str	r1, [sp, #28]
 8008734:	9800      	ldr	r0, [sp, #0]
 8008736:	9901      	ldr	r1, [sp, #4]
 8008738:	f7f9 fb6c 	bl	8001e14 <__aeabi_dmul>
 800873c:	0002      	movs	r2, r0
 800873e:	000b      	movs	r3, r1
 8008740:	9806      	ldr	r0, [sp, #24]
 8008742:	9907      	ldr	r1, [sp, #28]
 8008744:	f7f9 fdd8 	bl	80022f8 <__aeabi_dsub>
 8008748:	0032      	movs	r2, r6
 800874a:	003b      	movs	r3, r7
 800874c:	f7f9 fb62 	bl	8001e14 <__aeabi_dmul>
 8008750:	9a02      	ldr	r2, [sp, #8]
 8008752:	9b03      	ldr	r3, [sp, #12]
 8008754:	f7f9 fdd0 	bl	80022f8 <__aeabi_dsub>
 8008758:	4a15      	ldr	r2, [pc, #84]	; (80087b0 <__kernel_sin+0x150>)
 800875a:	0006      	movs	r6, r0
 800875c:	000f      	movs	r7, r1
 800875e:	9800      	ldr	r0, [sp, #0]
 8008760:	9901      	ldr	r1, [sp, #4]
 8008762:	4b14      	ldr	r3, [pc, #80]	; (80087b4 <__kernel_sin+0x154>)
 8008764:	f7f9 fb56 	bl	8001e14 <__aeabi_dmul>
 8008768:	0002      	movs	r2, r0
 800876a:	000b      	movs	r3, r1
 800876c:	0030      	movs	r0, r6
 800876e:	0039      	movs	r1, r7
 8008770:	f7f8 fc2a 	bl	8000fc8 <__aeabi_dadd>
 8008774:	0002      	movs	r2, r0
 8008776:	000b      	movs	r3, r1
 8008778:	0028      	movs	r0, r5
 800877a:	0021      	movs	r1, r4
 800877c:	f7f9 fdbc 	bl	80022f8 <__aeabi_dsub>
 8008780:	e7c8      	b.n	8008714 <__kernel_sin+0xb4>
 8008782:	46c0      	nop			; (mov r8, r8)
 8008784:	3e3fffff 	.word	0x3e3fffff
 8008788:	5acfd57c 	.word	0x5acfd57c
 800878c:	3de5d93a 	.word	0x3de5d93a
 8008790:	8a2b9ceb 	.word	0x8a2b9ceb
 8008794:	3e5ae5e6 	.word	0x3e5ae5e6
 8008798:	57b1fe7d 	.word	0x57b1fe7d
 800879c:	3ec71de3 	.word	0x3ec71de3
 80087a0:	19c161d5 	.word	0x19c161d5
 80087a4:	3f2a01a0 	.word	0x3f2a01a0
 80087a8:	3f811111 	.word	0x3f811111
 80087ac:	1110f8a6 	.word	0x1110f8a6
 80087b0:	55555549 	.word	0x55555549
 80087b4:	3fc55555 	.word	0x3fc55555
 80087b8:	3fe00000 	.word	0x3fe00000

080087bc <fabs>:
 80087bc:	0049      	lsls	r1, r1, #1
 80087be:	084b      	lsrs	r3, r1, #1
 80087c0:	0019      	movs	r1, r3
 80087c2:	4770      	bx	lr

080087c4 <floor>:
 80087c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087c6:	004b      	lsls	r3, r1, #1
 80087c8:	4a39      	ldr	r2, [pc, #228]	; (80088b0 <floor+0xec>)
 80087ca:	0d5b      	lsrs	r3, r3, #21
 80087cc:	b085      	sub	sp, #20
 80087ce:	189e      	adds	r6, r3, r2
 80087d0:	000c      	movs	r4, r1
 80087d2:	0005      	movs	r5, r0
 80087d4:	9003      	str	r0, [sp, #12]
 80087d6:	2e13      	cmp	r6, #19
 80087d8:	dc34      	bgt.n	8008844 <floor+0x80>
 80087da:	2e00      	cmp	r6, #0
 80087dc:	da15      	bge.n	800880a <floor+0x46>
 80087de:	4a35      	ldr	r2, [pc, #212]	; (80088b4 <floor+0xf0>)
 80087e0:	4b35      	ldr	r3, [pc, #212]	; (80088b8 <floor+0xf4>)
 80087e2:	f7f8 fbf1 	bl	8000fc8 <__aeabi_dadd>
 80087e6:	2200      	movs	r2, #0
 80087e8:	2300      	movs	r3, #0
 80087ea:	f7f7 fe37 	bl	800045c <__aeabi_dcmpgt>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d008      	beq.n	8008804 <floor+0x40>
 80087f2:	2c00      	cmp	r4, #0
 80087f4:	da59      	bge.n	80088aa <floor+0xe6>
 80087f6:	0063      	lsls	r3, r4, #1
 80087f8:	085b      	lsrs	r3, r3, #1
 80087fa:	432b      	orrs	r3, r5
 80087fc:	2500      	movs	r5, #0
 80087fe:	42ab      	cmp	r3, r5
 8008800:	d000      	beq.n	8008804 <floor+0x40>
 8008802:	4c2e      	ldr	r4, [pc, #184]	; (80088bc <floor+0xf8>)
 8008804:	0028      	movs	r0, r5
 8008806:	0021      	movs	r1, r4
 8008808:	e026      	b.n	8008858 <floor+0x94>
 800880a:	4f2d      	ldr	r7, [pc, #180]	; (80088c0 <floor+0xfc>)
 800880c:	4137      	asrs	r7, r6
 800880e:	003b      	movs	r3, r7
 8008810:	400b      	ands	r3, r1
 8008812:	4303      	orrs	r3, r0
 8008814:	d020      	beq.n	8008858 <floor+0x94>
 8008816:	9000      	str	r0, [sp, #0]
 8008818:	9101      	str	r1, [sp, #4]
 800881a:	4a26      	ldr	r2, [pc, #152]	; (80088b4 <floor+0xf0>)
 800881c:	4b26      	ldr	r3, [pc, #152]	; (80088b8 <floor+0xf4>)
 800881e:	9800      	ldr	r0, [sp, #0]
 8008820:	9901      	ldr	r1, [sp, #4]
 8008822:	f7f8 fbd1 	bl	8000fc8 <__aeabi_dadd>
 8008826:	2200      	movs	r2, #0
 8008828:	2300      	movs	r3, #0
 800882a:	f7f7 fe17 	bl	800045c <__aeabi_dcmpgt>
 800882e:	2800      	cmp	r0, #0
 8008830:	d0e8      	beq.n	8008804 <floor+0x40>
 8008832:	2c00      	cmp	r4, #0
 8008834:	da03      	bge.n	800883e <floor+0x7a>
 8008836:	2380      	movs	r3, #128	; 0x80
 8008838:	035b      	lsls	r3, r3, #13
 800883a:	4133      	asrs	r3, r6
 800883c:	18e4      	adds	r4, r4, r3
 800883e:	43bc      	bics	r4, r7
 8008840:	2500      	movs	r5, #0
 8008842:	e7df      	b.n	8008804 <floor+0x40>
 8008844:	2e33      	cmp	r6, #51	; 0x33
 8008846:	dd09      	ble.n	800885c <floor+0x98>
 8008848:	2380      	movs	r3, #128	; 0x80
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	429e      	cmp	r6, r3
 800884e:	d103      	bne.n	8008858 <floor+0x94>
 8008850:	0002      	movs	r2, r0
 8008852:	000b      	movs	r3, r1
 8008854:	f7f8 fbb8 	bl	8000fc8 <__aeabi_dadd>
 8008858:	b005      	add	sp, #20
 800885a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800885c:	2701      	movs	r7, #1
 800885e:	4a19      	ldr	r2, [pc, #100]	; (80088c4 <floor+0x100>)
 8008860:	427f      	negs	r7, r7
 8008862:	189b      	adds	r3, r3, r2
 8008864:	40df      	lsrs	r7, r3
 8008866:	4238      	tst	r0, r7
 8008868:	d0f6      	beq.n	8008858 <floor+0x94>
 800886a:	9000      	str	r0, [sp, #0]
 800886c:	9101      	str	r1, [sp, #4]
 800886e:	4a11      	ldr	r2, [pc, #68]	; (80088b4 <floor+0xf0>)
 8008870:	4b11      	ldr	r3, [pc, #68]	; (80088b8 <floor+0xf4>)
 8008872:	9800      	ldr	r0, [sp, #0]
 8008874:	9901      	ldr	r1, [sp, #4]
 8008876:	f7f8 fba7 	bl	8000fc8 <__aeabi_dadd>
 800887a:	2200      	movs	r2, #0
 800887c:	2300      	movs	r3, #0
 800887e:	f7f7 fded 	bl	800045c <__aeabi_dcmpgt>
 8008882:	2800      	cmp	r0, #0
 8008884:	d0be      	beq.n	8008804 <floor+0x40>
 8008886:	2c00      	cmp	r4, #0
 8008888:	da02      	bge.n	8008890 <floor+0xcc>
 800888a:	2e14      	cmp	r6, #20
 800888c:	d102      	bne.n	8008894 <floor+0xd0>
 800888e:	3401      	adds	r4, #1
 8008890:	43bd      	bics	r5, r7
 8008892:	e7b7      	b.n	8008804 <floor+0x40>
 8008894:	2334      	movs	r3, #52	; 0x34
 8008896:	1b9e      	subs	r6, r3, r6
 8008898:	3b33      	subs	r3, #51	; 0x33
 800889a:	40b3      	lsls	r3, r6
 800889c:	18ed      	adds	r5, r5, r3
 800889e:	9b03      	ldr	r3, [sp, #12]
 80088a0:	429d      	cmp	r5, r3
 80088a2:	419b      	sbcs	r3, r3
 80088a4:	425b      	negs	r3, r3
 80088a6:	18e4      	adds	r4, r4, r3
 80088a8:	e7f2      	b.n	8008890 <floor+0xcc>
 80088aa:	2500      	movs	r5, #0
 80088ac:	002c      	movs	r4, r5
 80088ae:	e7a9      	b.n	8008804 <floor+0x40>
 80088b0:	fffffc01 	.word	0xfffffc01
 80088b4:	8800759c 	.word	0x8800759c
 80088b8:	7e37e43c 	.word	0x7e37e43c
 80088bc:	bff00000 	.word	0xbff00000
 80088c0:	000fffff 	.word	0x000fffff
 80088c4:	fffffbed 	.word	0xfffffbed

080088c8 <matherr>:
 80088c8:	2000      	movs	r0, #0
 80088ca:	4770      	bx	lr

080088cc <scalbn>:
 80088cc:	004b      	lsls	r3, r1, #1
 80088ce:	b570      	push	{r4, r5, r6, lr}
 80088d0:	0d5b      	lsrs	r3, r3, #21
 80088d2:	0014      	movs	r4, r2
 80088d4:	000a      	movs	r2, r1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10d      	bne.n	80088f6 <scalbn+0x2a>
 80088da:	004b      	lsls	r3, r1, #1
 80088dc:	085b      	lsrs	r3, r3, #1
 80088de:	4303      	orrs	r3, r0
 80088e0:	d010      	beq.n	8008904 <scalbn+0x38>
 80088e2:	4b21      	ldr	r3, [pc, #132]	; (8008968 <scalbn+0x9c>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	f7f9 fa95 	bl	8001e14 <__aeabi_dmul>
 80088ea:	4b20      	ldr	r3, [pc, #128]	; (800896c <scalbn+0xa0>)
 80088ec:	429c      	cmp	r4, r3
 80088ee:	da0a      	bge.n	8008906 <scalbn+0x3a>
 80088f0:	4a1f      	ldr	r2, [pc, #124]	; (8008970 <scalbn+0xa4>)
 80088f2:	4b20      	ldr	r3, [pc, #128]	; (8008974 <scalbn+0xa8>)
 80088f4:	e017      	b.n	8008926 <scalbn+0x5a>
 80088f6:	4d20      	ldr	r5, [pc, #128]	; (8008978 <scalbn+0xac>)
 80088f8:	42ab      	cmp	r3, r5
 80088fa:	d108      	bne.n	800890e <scalbn+0x42>
 80088fc:	0002      	movs	r2, r0
 80088fe:	000b      	movs	r3, r1
 8008900:	f7f8 fb62 	bl	8000fc8 <__aeabi_dadd>
 8008904:	bd70      	pop	{r4, r5, r6, pc}
 8008906:	000a      	movs	r2, r1
 8008908:	004b      	lsls	r3, r1, #1
 800890a:	0d5b      	lsrs	r3, r3, #21
 800890c:	3b36      	subs	r3, #54	; 0x36
 800890e:	4d1b      	ldr	r5, [pc, #108]	; (800897c <scalbn+0xb0>)
 8008910:	18e3      	adds	r3, r4, r3
 8008912:	42ab      	cmp	r3, r5
 8008914:	dd0a      	ble.n	800892c <scalbn+0x60>
 8008916:	0002      	movs	r2, r0
 8008918:	000b      	movs	r3, r1
 800891a:	4819      	ldr	r0, [pc, #100]	; (8008980 <scalbn+0xb4>)
 800891c:	4919      	ldr	r1, [pc, #100]	; (8008984 <scalbn+0xb8>)
 800891e:	f000 f839 	bl	8008994 <copysign>
 8008922:	4a17      	ldr	r2, [pc, #92]	; (8008980 <scalbn+0xb4>)
 8008924:	4b17      	ldr	r3, [pc, #92]	; (8008984 <scalbn+0xb8>)
 8008926:	f7f9 fa75 	bl	8001e14 <__aeabi_dmul>
 800892a:	e7eb      	b.n	8008904 <scalbn+0x38>
 800892c:	2b00      	cmp	r3, #0
 800892e:	dd05      	ble.n	800893c <scalbn+0x70>
 8008930:	4c15      	ldr	r4, [pc, #84]	; (8008988 <scalbn+0xbc>)
 8008932:	051b      	lsls	r3, r3, #20
 8008934:	4022      	ands	r2, r4
 8008936:	431a      	orrs	r2, r3
 8008938:	0011      	movs	r1, r2
 800893a:	e7e3      	b.n	8008904 <scalbn+0x38>
 800893c:	001d      	movs	r5, r3
 800893e:	3535      	adds	r5, #53	; 0x35
 8008940:	da09      	bge.n	8008956 <scalbn+0x8a>
 8008942:	4b12      	ldr	r3, [pc, #72]	; (800898c <scalbn+0xc0>)
 8008944:	0002      	movs	r2, r0
 8008946:	429c      	cmp	r4, r3
 8008948:	dce6      	bgt.n	8008918 <scalbn+0x4c>
 800894a:	000b      	movs	r3, r1
 800894c:	4808      	ldr	r0, [pc, #32]	; (8008970 <scalbn+0xa4>)
 800894e:	4909      	ldr	r1, [pc, #36]	; (8008974 <scalbn+0xa8>)
 8008950:	f000 f820 	bl	8008994 <copysign>
 8008954:	e7cc      	b.n	80088f0 <scalbn+0x24>
 8008956:	4c0c      	ldr	r4, [pc, #48]	; (8008988 <scalbn+0xbc>)
 8008958:	3336      	adds	r3, #54	; 0x36
 800895a:	4022      	ands	r2, r4
 800895c:	051b      	lsls	r3, r3, #20
 800895e:	4313      	orrs	r3, r2
 8008960:	0019      	movs	r1, r3
 8008962:	2200      	movs	r2, #0
 8008964:	4b0a      	ldr	r3, [pc, #40]	; (8008990 <scalbn+0xc4>)
 8008966:	e7de      	b.n	8008926 <scalbn+0x5a>
 8008968:	43500000 	.word	0x43500000
 800896c:	ffff3cb0 	.word	0xffff3cb0
 8008970:	c2f8f359 	.word	0xc2f8f359
 8008974:	01a56e1f 	.word	0x01a56e1f
 8008978:	000007ff 	.word	0x000007ff
 800897c:	000007fe 	.word	0x000007fe
 8008980:	8800759c 	.word	0x8800759c
 8008984:	7e37e43c 	.word	0x7e37e43c
 8008988:	800fffff 	.word	0x800fffff
 800898c:	0000c350 	.word	0x0000c350
 8008990:	3c900000 	.word	0x3c900000

08008994 <copysign>:
 8008994:	b530      	push	{r4, r5, lr}
 8008996:	004a      	lsls	r2, r1, #1
 8008998:	0fdb      	lsrs	r3, r3, #31
 800899a:	07db      	lsls	r3, r3, #31
 800899c:	0852      	lsrs	r2, r2, #1
 800899e:	431a      	orrs	r2, r3
 80089a0:	0011      	movs	r1, r2
 80089a2:	bd30      	pop	{r4, r5, pc}

080089a4 <_init>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	46c0      	nop			; (mov r8, r8)
 80089a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089aa:	bc08      	pop	{r3}
 80089ac:	469e      	mov	lr, r3
 80089ae:	4770      	bx	lr

080089b0 <_fini>:
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	46c0      	nop			; (mov r8, r8)
 80089b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b6:	bc08      	pop	{r3}
 80089b8:	469e      	mov	lr, r3
 80089ba:	4770      	bx	lr
