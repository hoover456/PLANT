
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cbc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08008d80  08008d80  00018d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009198  08009198  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08009198  08009198  00019198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091a0  080091a0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091a0  080091a0  000191a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091a4  080091a4  000191a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080091a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000070  08009214  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08009214  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002c  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fde9  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000255b  00000000  00000000  0002fe81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bd8  00000000  00000000  000323e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac0  00000000  00000000  00032fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000163ed  00000000  00000000  00033a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a671  00000000  00000000  00049e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000842b0  00000000  00000000  000544d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000b2  00000000  00000000  000d8786  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000354c  00000000  00000000  000d8838  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000003c  00000000  00000000  000dbd84  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macinfo 00000001  00000000  00000000  000dbdc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008d64 	.word	0x08008d64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08008d64 	.word	0x08008d64

08000108 <__gnu_thumb1_case_uhi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5a09      	ldrh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c10      	adds	r0, r2, #0
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	1c19      	adds	r1, r3, #0
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 fcfd 	bl	8001e18 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f001 fc55 	bl	8001cd8 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fcef 	bl	8001e18 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fce5 	bl	8001e18 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fc77 	bl	8001d50 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 fc6d 	bl	8001d50 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_fadd>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	4647      	mov	r7, r8
 8000488:	46ce      	mov	lr, r9
 800048a:	0243      	lsls	r3, r0, #9
 800048c:	0a5b      	lsrs	r3, r3, #9
 800048e:	0044      	lsls	r4, r0, #1
 8000490:	0fc2      	lsrs	r2, r0, #31
 8000492:	469c      	mov	ip, r3
 8000494:	0048      	lsls	r0, r1, #1
 8000496:	00dd      	lsls	r5, r3, #3
 8000498:	024b      	lsls	r3, r1, #9
 800049a:	0e24      	lsrs	r4, r4, #24
 800049c:	0a5b      	lsrs	r3, r3, #9
 800049e:	0e00      	lsrs	r0, r0, #24
 80004a0:	b580      	push	{r7, lr}
 80004a2:	4698      	mov	r8, r3
 80004a4:	0026      	movs	r6, r4
 80004a6:	4691      	mov	r9, r2
 80004a8:	0fc9      	lsrs	r1, r1, #31
 80004aa:	00db      	lsls	r3, r3, #3
 80004ac:	1a27      	subs	r7, r4, r0
 80004ae:	428a      	cmp	r2, r1
 80004b0:	d029      	beq.n	8000506 <__aeabi_fadd+0x82>
 80004b2:	2f00      	cmp	r7, #0
 80004b4:	dd15      	ble.n	80004e2 <__aeabi_fadd+0x5e>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d14a      	bne.n	8000550 <__aeabi_fadd+0xcc>
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d000      	beq.n	80004c0 <__aeabi_fadd+0x3c>
 80004be:	e095      	b.n	80005ec <__aeabi_fadd+0x168>
 80004c0:	08ed      	lsrs	r5, r5, #3
 80004c2:	2cff      	cmp	r4, #255	; 0xff
 80004c4:	d100      	bne.n	80004c8 <__aeabi_fadd+0x44>
 80004c6:	e088      	b.n	80005da <__aeabi_fadd+0x156>
 80004c8:	026b      	lsls	r3, r5, #9
 80004ca:	0a5b      	lsrs	r3, r3, #9
 80004cc:	b2e6      	uxtb	r6, r4
 80004ce:	025b      	lsls	r3, r3, #9
 80004d0:	05f6      	lsls	r6, r6, #23
 80004d2:	0a58      	lsrs	r0, r3, #9
 80004d4:	4330      	orrs	r0, r6
 80004d6:	07d2      	lsls	r2, r2, #31
 80004d8:	4310      	orrs	r0, r2
 80004da:	bc0c      	pop	{r2, r3}
 80004dc:	4690      	mov	r8, r2
 80004de:	4699      	mov	r9, r3
 80004e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004e2:	2f00      	cmp	r7, #0
 80004e4:	d000      	beq.n	80004e8 <__aeabi_fadd+0x64>
 80004e6:	e087      	b.n	80005f8 <__aeabi_fadd+0x174>
 80004e8:	1c60      	adds	r0, r4, #1
 80004ea:	b2c0      	uxtb	r0, r0
 80004ec:	2801      	cmp	r0, #1
 80004ee:	dc00      	bgt.n	80004f2 <__aeabi_fadd+0x6e>
 80004f0:	e0b6      	b.n	8000660 <__aeabi_fadd+0x1dc>
 80004f2:	1aee      	subs	r6, r5, r3
 80004f4:	0172      	lsls	r2, r6, #5
 80004f6:	d500      	bpl.n	80004fa <__aeabi_fadd+0x76>
 80004f8:	e0c5      	b.n	8000686 <__aeabi_fadd+0x202>
 80004fa:	2e00      	cmp	r6, #0
 80004fc:	d13d      	bne.n	800057a <__aeabi_fadd+0xf6>
 80004fe:	2200      	movs	r2, #0
 8000500:	2600      	movs	r6, #0
 8000502:	2300      	movs	r3, #0
 8000504:	e7e3      	b.n	80004ce <__aeabi_fadd+0x4a>
 8000506:	2f00      	cmp	r7, #0
 8000508:	dc00      	bgt.n	800050c <__aeabi_fadd+0x88>
 800050a:	e096      	b.n	800063a <__aeabi_fadd+0x1b6>
 800050c:	2800      	cmp	r0, #0
 800050e:	d05d      	beq.n	80005cc <__aeabi_fadd+0x148>
 8000510:	2cff      	cmp	r4, #255	; 0xff
 8000512:	d060      	beq.n	80005d6 <__aeabi_fadd+0x152>
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	04d2      	lsls	r2, r2, #19
 8000518:	4313      	orrs	r3, r2
 800051a:	2f1b      	cmp	r7, #27
 800051c:	dd00      	ble.n	8000520 <__aeabi_fadd+0x9c>
 800051e:	e0ec      	b.n	80006fa <__aeabi_fadd+0x276>
 8000520:	2220      	movs	r2, #32
 8000522:	1bd2      	subs	r2, r2, r7
 8000524:	0018      	movs	r0, r3
 8000526:	4093      	lsls	r3, r2
 8000528:	40f8      	lsrs	r0, r7
 800052a:	1e5a      	subs	r2, r3, #1
 800052c:	4193      	sbcs	r3, r2
 800052e:	4303      	orrs	r3, r0
 8000530:	18ed      	adds	r5, r5, r3
 8000532:	016b      	lsls	r3, r5, #5
 8000534:	d57b      	bpl.n	800062e <__aeabi_fadd+0x1aa>
 8000536:	3401      	adds	r4, #1
 8000538:	2cff      	cmp	r4, #255	; 0xff
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0xba>
 800053c:	e0b7      	b.n	80006ae <__aeabi_fadd+0x22a>
 800053e:	2201      	movs	r2, #1
 8000540:	2607      	movs	r6, #7
 8000542:	402a      	ands	r2, r5
 8000544:	086b      	lsrs	r3, r5, #1
 8000546:	4d9a      	ldr	r5, [pc, #616]	; (80007b0 <__aeabi_fadd+0x32c>)
 8000548:	401d      	ands	r5, r3
 800054a:	4315      	orrs	r5, r2
 800054c:	402e      	ands	r6, r5
 800054e:	e029      	b.n	80005a4 <__aeabi_fadd+0x120>
 8000550:	2cff      	cmp	r4, #255	; 0xff
 8000552:	d0b5      	beq.n	80004c0 <__aeabi_fadd+0x3c>
 8000554:	2280      	movs	r2, #128	; 0x80
 8000556:	04d2      	lsls	r2, r2, #19
 8000558:	4313      	orrs	r3, r2
 800055a:	2f1b      	cmp	r7, #27
 800055c:	dd00      	ble.n	8000560 <__aeabi_fadd+0xdc>
 800055e:	e0b2      	b.n	80006c6 <__aeabi_fadd+0x242>
 8000560:	2220      	movs	r2, #32
 8000562:	1bd2      	subs	r2, r2, r7
 8000564:	0019      	movs	r1, r3
 8000566:	4093      	lsls	r3, r2
 8000568:	40f9      	lsrs	r1, r7
 800056a:	1e5a      	subs	r2, r3, #1
 800056c:	4193      	sbcs	r3, r2
 800056e:	430b      	orrs	r3, r1
 8000570:	1aed      	subs	r5, r5, r3
 8000572:	016b      	lsls	r3, r5, #5
 8000574:	d55b      	bpl.n	800062e <__aeabi_fadd+0x1aa>
 8000576:	01ad      	lsls	r5, r5, #6
 8000578:	09ae      	lsrs	r6, r5, #6
 800057a:	0030      	movs	r0, r6
 800057c:	f002 fbd0 	bl	8002d20 <__clzsi2>
 8000580:	3805      	subs	r0, #5
 8000582:	4086      	lsls	r6, r0
 8000584:	4284      	cmp	r4, r0
 8000586:	dc65      	bgt.n	8000654 <__aeabi_fadd+0x1d0>
 8000588:	1b04      	subs	r4, r0, r4
 800058a:	0033      	movs	r3, r6
 800058c:	2020      	movs	r0, #32
 800058e:	3401      	adds	r4, #1
 8000590:	40e3      	lsrs	r3, r4
 8000592:	1b04      	subs	r4, r0, r4
 8000594:	40a6      	lsls	r6, r4
 8000596:	1e75      	subs	r5, r6, #1
 8000598:	41ae      	sbcs	r6, r5
 800059a:	4333      	orrs	r3, r6
 800059c:	2607      	movs	r6, #7
 800059e:	001d      	movs	r5, r3
 80005a0:	2400      	movs	r4, #0
 80005a2:	401e      	ands	r6, r3
 80005a4:	2201      	movs	r2, #1
 80005a6:	464b      	mov	r3, r9
 80005a8:	401a      	ands	r2, r3
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d004      	beq.n	80005b8 <__aeabi_fadd+0x134>
 80005ae:	230f      	movs	r3, #15
 80005b0:	402b      	ands	r3, r5
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d000      	beq.n	80005b8 <__aeabi_fadd+0x134>
 80005b6:	3504      	adds	r5, #4
 80005b8:	016b      	lsls	r3, r5, #5
 80005ba:	d400      	bmi.n	80005be <__aeabi_fadd+0x13a>
 80005bc:	e780      	b.n	80004c0 <__aeabi_fadd+0x3c>
 80005be:	3401      	adds	r4, #1
 80005c0:	b2e6      	uxtb	r6, r4
 80005c2:	2cff      	cmp	r4, #255	; 0xff
 80005c4:	d12f      	bne.n	8000626 <__aeabi_fadd+0x1a2>
 80005c6:	26ff      	movs	r6, #255	; 0xff
 80005c8:	2300      	movs	r3, #0
 80005ca:	e780      	b.n	80004ce <__aeabi_fadd+0x4a>
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d152      	bne.n	8000676 <__aeabi_fadd+0x1f2>
 80005d0:	2cff      	cmp	r4, #255	; 0xff
 80005d2:	d000      	beq.n	80005d6 <__aeabi_fadd+0x152>
 80005d4:	e774      	b.n	80004c0 <__aeabi_fadd+0x3c>
 80005d6:	000a      	movs	r2, r1
 80005d8:	08ed      	lsrs	r5, r5, #3
 80005da:	2d00      	cmp	r5, #0
 80005dc:	d0f3      	beq.n	80005c6 <__aeabi_fadd+0x142>
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	03db      	lsls	r3, r3, #15
 80005e2:	432b      	orrs	r3, r5
 80005e4:	025b      	lsls	r3, r3, #9
 80005e6:	0a5b      	lsrs	r3, r3, #9
 80005e8:	26ff      	movs	r6, #255	; 0xff
 80005ea:	e770      	b.n	80004ce <__aeabi_fadd+0x4a>
 80005ec:	3f01      	subs	r7, #1
 80005ee:	2f00      	cmp	r7, #0
 80005f0:	d0be      	beq.n	8000570 <__aeabi_fadd+0xec>
 80005f2:	2cff      	cmp	r4, #255	; 0xff
 80005f4:	d1b1      	bne.n	800055a <__aeabi_fadd+0xd6>
 80005f6:	e763      	b.n	80004c0 <__aeabi_fadd+0x3c>
 80005f8:	2c00      	cmp	r4, #0
 80005fa:	d047      	beq.n	800068c <__aeabi_fadd+0x208>
 80005fc:	28ff      	cmp	r0, #255	; 0xff
 80005fe:	d069      	beq.n	80006d4 <__aeabi_fadd+0x250>
 8000600:	2480      	movs	r4, #128	; 0x80
 8000602:	04e4      	lsls	r4, r4, #19
 8000604:	427a      	negs	r2, r7
 8000606:	4325      	orrs	r5, r4
 8000608:	2a1b      	cmp	r2, #27
 800060a:	dd00      	ble.n	800060e <__aeabi_fadd+0x18a>
 800060c:	e0c5      	b.n	800079a <__aeabi_fadd+0x316>
 800060e:	002c      	movs	r4, r5
 8000610:	2620      	movs	r6, #32
 8000612:	40d4      	lsrs	r4, r2
 8000614:	1ab2      	subs	r2, r6, r2
 8000616:	4095      	lsls	r5, r2
 8000618:	1e6a      	subs	r2, r5, #1
 800061a:	4195      	sbcs	r5, r2
 800061c:	4325      	orrs	r5, r4
 800061e:	1b5d      	subs	r5, r3, r5
 8000620:	0004      	movs	r4, r0
 8000622:	4689      	mov	r9, r1
 8000624:	e7a5      	b.n	8000572 <__aeabi_fadd+0xee>
 8000626:	01ab      	lsls	r3, r5, #6
 8000628:	0a5b      	lsrs	r3, r3, #9
 800062a:	e750      	b.n	80004ce <__aeabi_fadd+0x4a>
 800062c:	2400      	movs	r4, #0
 800062e:	2201      	movs	r2, #1
 8000630:	464b      	mov	r3, r9
 8000632:	401a      	ands	r2, r3
 8000634:	076b      	lsls	r3, r5, #29
 8000636:	d1ba      	bne.n	80005ae <__aeabi_fadd+0x12a>
 8000638:	e742      	b.n	80004c0 <__aeabi_fadd+0x3c>
 800063a:	2f00      	cmp	r7, #0
 800063c:	d13b      	bne.n	80006b6 <__aeabi_fadd+0x232>
 800063e:	3401      	adds	r4, #1
 8000640:	b2e0      	uxtb	r0, r4
 8000642:	2801      	cmp	r0, #1
 8000644:	dd4a      	ble.n	80006dc <__aeabi_fadd+0x258>
 8000646:	2cff      	cmp	r4, #255	; 0xff
 8000648:	d0bd      	beq.n	80005c6 <__aeabi_fadd+0x142>
 800064a:	2607      	movs	r6, #7
 800064c:	18ed      	adds	r5, r5, r3
 800064e:	086d      	lsrs	r5, r5, #1
 8000650:	402e      	ands	r6, r5
 8000652:	e7a7      	b.n	80005a4 <__aeabi_fadd+0x120>
 8000654:	2307      	movs	r3, #7
 8000656:	4d57      	ldr	r5, [pc, #348]	; (80007b4 <__aeabi_fadd+0x330>)
 8000658:	1a24      	subs	r4, r4, r0
 800065a:	4035      	ands	r5, r6
 800065c:	401e      	ands	r6, r3
 800065e:	e7a1      	b.n	80005a4 <__aeabi_fadd+0x120>
 8000660:	2c00      	cmp	r4, #0
 8000662:	d11b      	bne.n	800069c <__aeabi_fadd+0x218>
 8000664:	2d00      	cmp	r5, #0
 8000666:	d16e      	bne.n	8000746 <__aeabi_fadd+0x2c2>
 8000668:	2b00      	cmp	r3, #0
 800066a:	d100      	bne.n	800066e <__aeabi_fadd+0x1ea>
 800066c:	e09a      	b.n	80007a4 <__aeabi_fadd+0x320>
 800066e:	000a      	movs	r2, r1
 8000670:	001d      	movs	r5, r3
 8000672:	003c      	movs	r4, r7
 8000674:	e724      	b.n	80004c0 <__aeabi_fadd+0x3c>
 8000676:	3f01      	subs	r7, #1
 8000678:	2f00      	cmp	r7, #0
 800067a:	d100      	bne.n	800067e <__aeabi_fadd+0x1fa>
 800067c:	e758      	b.n	8000530 <__aeabi_fadd+0xac>
 800067e:	2cff      	cmp	r4, #255	; 0xff
 8000680:	d000      	beq.n	8000684 <__aeabi_fadd+0x200>
 8000682:	e74a      	b.n	800051a <__aeabi_fadd+0x96>
 8000684:	e7a7      	b.n	80005d6 <__aeabi_fadd+0x152>
 8000686:	1b5e      	subs	r6, r3, r5
 8000688:	4689      	mov	r9, r1
 800068a:	e776      	b.n	800057a <__aeabi_fadd+0xf6>
 800068c:	2d00      	cmp	r5, #0
 800068e:	d11c      	bne.n	80006ca <__aeabi_fadd+0x246>
 8000690:	000a      	movs	r2, r1
 8000692:	28ff      	cmp	r0, #255	; 0xff
 8000694:	d01f      	beq.n	80006d6 <__aeabi_fadd+0x252>
 8000696:	0004      	movs	r4, r0
 8000698:	001d      	movs	r5, r3
 800069a:	e711      	b.n	80004c0 <__aeabi_fadd+0x3c>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d15d      	bne.n	800075c <__aeabi_fadd+0x2d8>
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d117      	bne.n	80006d4 <__aeabi_fadd+0x250>
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	2200      	movs	r2, #0
 80006a8:	03db      	lsls	r3, r3, #15
 80006aa:	26ff      	movs	r6, #255	; 0xff
 80006ac:	e70f      	b.n	80004ce <__aeabi_fadd+0x4a>
 80006ae:	000a      	movs	r2, r1
 80006b0:	26ff      	movs	r6, #255	; 0xff
 80006b2:	2300      	movs	r3, #0
 80006b4:	e70b      	b.n	80004ce <__aeabi_fadd+0x4a>
 80006b6:	2c00      	cmp	r4, #0
 80006b8:	d121      	bne.n	80006fe <__aeabi_fadd+0x27a>
 80006ba:	2d00      	cmp	r5, #0
 80006bc:	d166      	bne.n	800078c <__aeabi_fadd+0x308>
 80006be:	28ff      	cmp	r0, #255	; 0xff
 80006c0:	d1e9      	bne.n	8000696 <__aeabi_fadd+0x212>
 80006c2:	001d      	movs	r5, r3
 80006c4:	e787      	b.n	80005d6 <__aeabi_fadd+0x152>
 80006c6:	2301      	movs	r3, #1
 80006c8:	e752      	b.n	8000570 <__aeabi_fadd+0xec>
 80006ca:	1c7a      	adds	r2, r7, #1
 80006cc:	d0a7      	beq.n	800061e <__aeabi_fadd+0x19a>
 80006ce:	43fa      	mvns	r2, r7
 80006d0:	28ff      	cmp	r0, #255	; 0xff
 80006d2:	d199      	bne.n	8000608 <__aeabi_fadd+0x184>
 80006d4:	000a      	movs	r2, r1
 80006d6:	001d      	movs	r5, r3
 80006d8:	24ff      	movs	r4, #255	; 0xff
 80006da:	e6f1      	b.n	80004c0 <__aeabi_fadd+0x3c>
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d121      	bne.n	8000724 <__aeabi_fadd+0x2a0>
 80006e0:	2d00      	cmp	r5, #0
 80006e2:	d04f      	beq.n	8000784 <__aeabi_fadd+0x300>
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d04c      	beq.n	8000782 <__aeabi_fadd+0x2fe>
 80006e8:	18ed      	adds	r5, r5, r3
 80006ea:	016b      	lsls	r3, r5, #5
 80006ec:	d59e      	bpl.n	800062c <__aeabi_fadd+0x1a8>
 80006ee:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <__aeabi_fadd+0x330>)
 80006f0:	3607      	adds	r6, #7
 80006f2:	402e      	ands	r6, r5
 80006f4:	2401      	movs	r4, #1
 80006f6:	401d      	ands	r5, r3
 80006f8:	e754      	b.n	80005a4 <__aeabi_fadd+0x120>
 80006fa:	2301      	movs	r3, #1
 80006fc:	e718      	b.n	8000530 <__aeabi_fadd+0xac>
 80006fe:	28ff      	cmp	r0, #255	; 0xff
 8000700:	d0df      	beq.n	80006c2 <__aeabi_fadd+0x23e>
 8000702:	2480      	movs	r4, #128	; 0x80
 8000704:	04e4      	lsls	r4, r4, #19
 8000706:	427f      	negs	r7, r7
 8000708:	4325      	orrs	r5, r4
 800070a:	2f1b      	cmp	r7, #27
 800070c:	dc4d      	bgt.n	80007aa <__aeabi_fadd+0x326>
 800070e:	2620      	movs	r6, #32
 8000710:	1bf6      	subs	r6, r6, r7
 8000712:	002c      	movs	r4, r5
 8000714:	40b5      	lsls	r5, r6
 8000716:	40fc      	lsrs	r4, r7
 8000718:	1e6a      	subs	r2, r5, #1
 800071a:	4195      	sbcs	r5, r2
 800071c:	4325      	orrs	r5, r4
 800071e:	18ed      	adds	r5, r5, r3
 8000720:	0004      	movs	r4, r0
 8000722:	e706      	b.n	8000532 <__aeabi_fadd+0xae>
 8000724:	2d00      	cmp	r5, #0
 8000726:	d0cc      	beq.n	80006c2 <__aeabi_fadd+0x23e>
 8000728:	2b00      	cmp	r3, #0
 800072a:	d100      	bne.n	800072e <__aeabi_fadd+0x2aa>
 800072c:	e753      	b.n	80005d6 <__aeabi_fadd+0x152>
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	4660      	mov	r0, ip
 8000732:	03c9      	lsls	r1, r1, #15
 8000734:	4208      	tst	r0, r1
 8000736:	d003      	beq.n	8000740 <__aeabi_fadd+0x2bc>
 8000738:	4640      	mov	r0, r8
 800073a:	4208      	tst	r0, r1
 800073c:	d100      	bne.n	8000740 <__aeabi_fadd+0x2bc>
 800073e:	001d      	movs	r5, r3
 8000740:	2101      	movs	r1, #1
 8000742:	4011      	ands	r1, r2
 8000744:	e747      	b.n	80005d6 <__aeabi_fadd+0x152>
 8000746:	2b00      	cmp	r3, #0
 8000748:	d100      	bne.n	800074c <__aeabi_fadd+0x2c8>
 800074a:	e6b9      	b.n	80004c0 <__aeabi_fadd+0x3c>
 800074c:	1aea      	subs	r2, r5, r3
 800074e:	0150      	lsls	r0, r2, #5
 8000750:	d525      	bpl.n	800079e <__aeabi_fadd+0x31a>
 8000752:	2607      	movs	r6, #7
 8000754:	1b5d      	subs	r5, r3, r5
 8000756:	402e      	ands	r6, r5
 8000758:	4689      	mov	r9, r1
 800075a:	e723      	b.n	80005a4 <__aeabi_fadd+0x120>
 800075c:	24ff      	movs	r4, #255	; 0xff
 800075e:	2b00      	cmp	r3, #0
 8000760:	d100      	bne.n	8000764 <__aeabi_fadd+0x2e0>
 8000762:	e6ad      	b.n	80004c0 <__aeabi_fadd+0x3c>
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	4660      	mov	r0, ip
 8000768:	03d2      	lsls	r2, r2, #15
 800076a:	4210      	tst	r0, r2
 800076c:	d004      	beq.n	8000778 <__aeabi_fadd+0x2f4>
 800076e:	4640      	mov	r0, r8
 8000770:	4210      	tst	r0, r2
 8000772:	d101      	bne.n	8000778 <__aeabi_fadd+0x2f4>
 8000774:	001d      	movs	r5, r3
 8000776:	4689      	mov	r9, r1
 8000778:	2201      	movs	r2, #1
 800077a:	464b      	mov	r3, r9
 800077c:	24ff      	movs	r4, #255	; 0xff
 800077e:	401a      	ands	r2, r3
 8000780:	e69e      	b.n	80004c0 <__aeabi_fadd+0x3c>
 8000782:	002b      	movs	r3, r5
 8000784:	08dd      	lsrs	r5, r3, #3
 8000786:	000a      	movs	r2, r1
 8000788:	2400      	movs	r4, #0
 800078a:	e69d      	b.n	80004c8 <__aeabi_fadd+0x44>
 800078c:	1c7a      	adds	r2, r7, #1
 800078e:	d0c6      	beq.n	800071e <__aeabi_fadd+0x29a>
 8000790:	43ff      	mvns	r7, r7
 8000792:	28ff      	cmp	r0, #255	; 0xff
 8000794:	d1b9      	bne.n	800070a <__aeabi_fadd+0x286>
 8000796:	001d      	movs	r5, r3
 8000798:	e71d      	b.n	80005d6 <__aeabi_fadd+0x152>
 800079a:	2501      	movs	r5, #1
 800079c:	e73f      	b.n	800061e <__aeabi_fadd+0x19a>
 800079e:	1e15      	subs	r5, r2, #0
 80007a0:	d000      	beq.n	80007a4 <__aeabi_fadd+0x320>
 80007a2:	e744      	b.n	800062e <__aeabi_fadd+0x1aa>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	e691      	b.n	80004ce <__aeabi_fadd+0x4a>
 80007aa:	2501      	movs	r5, #1
 80007ac:	e7b7      	b.n	800071e <__aeabi_fadd+0x29a>
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	7dffffff 	.word	0x7dffffff
 80007b4:	fbffffff 	.word	0xfbffffff

080007b8 <__aeabi_fdiv>:
 80007b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ba:	4657      	mov	r7, sl
 80007bc:	464e      	mov	r6, r9
 80007be:	4645      	mov	r5, r8
 80007c0:	46de      	mov	lr, fp
 80007c2:	0244      	lsls	r4, r0, #9
 80007c4:	b5e0      	push	{r5, r6, r7, lr}
 80007c6:	0046      	lsls	r6, r0, #1
 80007c8:	4688      	mov	r8, r1
 80007ca:	0a64      	lsrs	r4, r4, #9
 80007cc:	0e36      	lsrs	r6, r6, #24
 80007ce:	0fc7      	lsrs	r7, r0, #31
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d063      	beq.n	800089c <__aeabi_fdiv+0xe4>
 80007d4:	2eff      	cmp	r6, #255	; 0xff
 80007d6:	d024      	beq.n	8000822 <__aeabi_fdiv+0x6a>
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	00e4      	lsls	r4, r4, #3
 80007dc:	04db      	lsls	r3, r3, #19
 80007de:	431c      	orrs	r4, r3
 80007e0:	2300      	movs	r3, #0
 80007e2:	4699      	mov	r9, r3
 80007e4:	469b      	mov	fp, r3
 80007e6:	3e7f      	subs	r6, #127	; 0x7f
 80007e8:	4643      	mov	r3, r8
 80007ea:	4642      	mov	r2, r8
 80007ec:	025d      	lsls	r5, r3, #9
 80007ee:	0fd2      	lsrs	r2, r2, #31
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	0a6d      	lsrs	r5, r5, #9
 80007f4:	0e1b      	lsrs	r3, r3, #24
 80007f6:	4690      	mov	r8, r2
 80007f8:	4692      	mov	sl, r2
 80007fa:	d065      	beq.n	80008c8 <__aeabi_fdiv+0x110>
 80007fc:	2bff      	cmp	r3, #255	; 0xff
 80007fe:	d055      	beq.n	80008ac <__aeabi_fdiv+0xf4>
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	2100      	movs	r1, #0
 8000804:	00ed      	lsls	r5, r5, #3
 8000806:	04d2      	lsls	r2, r2, #19
 8000808:	3b7f      	subs	r3, #127	; 0x7f
 800080a:	4315      	orrs	r5, r2
 800080c:	1af6      	subs	r6, r6, r3
 800080e:	4643      	mov	r3, r8
 8000810:	464a      	mov	r2, r9
 8000812:	407b      	eors	r3, r7
 8000814:	2a0f      	cmp	r2, #15
 8000816:	d900      	bls.n	800081a <__aeabi_fdiv+0x62>
 8000818:	e08d      	b.n	8000936 <__aeabi_fdiv+0x17e>
 800081a:	486d      	ldr	r0, [pc, #436]	; (80009d0 <__aeabi_fdiv+0x218>)
 800081c:	0092      	lsls	r2, r2, #2
 800081e:	5882      	ldr	r2, [r0, r2]
 8000820:	4697      	mov	pc, r2
 8000822:	2c00      	cmp	r4, #0
 8000824:	d154      	bne.n	80008d0 <__aeabi_fdiv+0x118>
 8000826:	2308      	movs	r3, #8
 8000828:	4699      	mov	r9, r3
 800082a:	3b06      	subs	r3, #6
 800082c:	26ff      	movs	r6, #255	; 0xff
 800082e:	469b      	mov	fp, r3
 8000830:	e7da      	b.n	80007e8 <__aeabi_fdiv+0x30>
 8000832:	2500      	movs	r5, #0
 8000834:	4653      	mov	r3, sl
 8000836:	2902      	cmp	r1, #2
 8000838:	d01b      	beq.n	8000872 <__aeabi_fdiv+0xba>
 800083a:	2903      	cmp	r1, #3
 800083c:	d100      	bne.n	8000840 <__aeabi_fdiv+0x88>
 800083e:	e0bf      	b.n	80009c0 <__aeabi_fdiv+0x208>
 8000840:	2901      	cmp	r1, #1
 8000842:	d028      	beq.n	8000896 <__aeabi_fdiv+0xde>
 8000844:	0030      	movs	r0, r6
 8000846:	307f      	adds	r0, #127	; 0x7f
 8000848:	2800      	cmp	r0, #0
 800084a:	dd20      	ble.n	800088e <__aeabi_fdiv+0xd6>
 800084c:	076a      	lsls	r2, r5, #29
 800084e:	d004      	beq.n	800085a <__aeabi_fdiv+0xa2>
 8000850:	220f      	movs	r2, #15
 8000852:	402a      	ands	r2, r5
 8000854:	2a04      	cmp	r2, #4
 8000856:	d000      	beq.n	800085a <__aeabi_fdiv+0xa2>
 8000858:	3504      	adds	r5, #4
 800085a:	012a      	lsls	r2, r5, #4
 800085c:	d503      	bpl.n	8000866 <__aeabi_fdiv+0xae>
 800085e:	0030      	movs	r0, r6
 8000860:	4a5c      	ldr	r2, [pc, #368]	; (80009d4 <__aeabi_fdiv+0x21c>)
 8000862:	3080      	adds	r0, #128	; 0x80
 8000864:	4015      	ands	r5, r2
 8000866:	28fe      	cmp	r0, #254	; 0xfe
 8000868:	dc03      	bgt.n	8000872 <__aeabi_fdiv+0xba>
 800086a:	01ac      	lsls	r4, r5, #6
 800086c:	0a64      	lsrs	r4, r4, #9
 800086e:	b2c2      	uxtb	r2, r0
 8000870:	e001      	b.n	8000876 <__aeabi_fdiv+0xbe>
 8000872:	22ff      	movs	r2, #255	; 0xff
 8000874:	2400      	movs	r4, #0
 8000876:	0264      	lsls	r4, r4, #9
 8000878:	05d2      	lsls	r2, r2, #23
 800087a:	0a60      	lsrs	r0, r4, #9
 800087c:	07db      	lsls	r3, r3, #31
 800087e:	4310      	orrs	r0, r2
 8000880:	4318      	orrs	r0, r3
 8000882:	bc3c      	pop	{r2, r3, r4, r5}
 8000884:	4690      	mov	r8, r2
 8000886:	4699      	mov	r9, r3
 8000888:	46a2      	mov	sl, r4
 800088a:	46ab      	mov	fp, r5
 800088c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800088e:	2201      	movs	r2, #1
 8000890:	1a10      	subs	r0, r2, r0
 8000892:	281b      	cmp	r0, #27
 8000894:	dd7c      	ble.n	8000990 <__aeabi_fdiv+0x1d8>
 8000896:	2200      	movs	r2, #0
 8000898:	2400      	movs	r4, #0
 800089a:	e7ec      	b.n	8000876 <__aeabi_fdiv+0xbe>
 800089c:	2c00      	cmp	r4, #0
 800089e:	d11d      	bne.n	80008dc <__aeabi_fdiv+0x124>
 80008a0:	2304      	movs	r3, #4
 80008a2:	4699      	mov	r9, r3
 80008a4:	3b03      	subs	r3, #3
 80008a6:	2600      	movs	r6, #0
 80008a8:	469b      	mov	fp, r3
 80008aa:	e79d      	b.n	80007e8 <__aeabi_fdiv+0x30>
 80008ac:	3eff      	subs	r6, #255	; 0xff
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d120      	bne.n	80008f4 <__aeabi_fdiv+0x13c>
 80008b2:	2102      	movs	r1, #2
 80008b4:	4643      	mov	r3, r8
 80008b6:	464a      	mov	r2, r9
 80008b8:	407b      	eors	r3, r7
 80008ba:	430a      	orrs	r2, r1
 80008bc:	2a0f      	cmp	r2, #15
 80008be:	d8d8      	bhi.n	8000872 <__aeabi_fdiv+0xba>
 80008c0:	4845      	ldr	r0, [pc, #276]	; (80009d8 <__aeabi_fdiv+0x220>)
 80008c2:	0092      	lsls	r2, r2, #2
 80008c4:	5882      	ldr	r2, [r0, r2]
 80008c6:	4697      	mov	pc, r2
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d119      	bne.n	8000900 <__aeabi_fdiv+0x148>
 80008cc:	2101      	movs	r1, #1
 80008ce:	e7f1      	b.n	80008b4 <__aeabi_fdiv+0xfc>
 80008d0:	230c      	movs	r3, #12
 80008d2:	4699      	mov	r9, r3
 80008d4:	3b09      	subs	r3, #9
 80008d6:	26ff      	movs	r6, #255	; 0xff
 80008d8:	469b      	mov	fp, r3
 80008da:	e785      	b.n	80007e8 <__aeabi_fdiv+0x30>
 80008dc:	0020      	movs	r0, r4
 80008de:	f002 fa1f 	bl	8002d20 <__clzsi2>
 80008e2:	2676      	movs	r6, #118	; 0x76
 80008e4:	1f43      	subs	r3, r0, #5
 80008e6:	409c      	lsls	r4, r3
 80008e8:	2300      	movs	r3, #0
 80008ea:	4276      	negs	r6, r6
 80008ec:	1a36      	subs	r6, r6, r0
 80008ee:	4699      	mov	r9, r3
 80008f0:	469b      	mov	fp, r3
 80008f2:	e779      	b.n	80007e8 <__aeabi_fdiv+0x30>
 80008f4:	464a      	mov	r2, r9
 80008f6:	2303      	movs	r3, #3
 80008f8:	431a      	orrs	r2, r3
 80008fa:	4691      	mov	r9, r2
 80008fc:	2103      	movs	r1, #3
 80008fe:	e786      	b.n	800080e <__aeabi_fdiv+0x56>
 8000900:	0028      	movs	r0, r5
 8000902:	f002 fa0d 	bl	8002d20 <__clzsi2>
 8000906:	1f43      	subs	r3, r0, #5
 8000908:	1836      	adds	r6, r6, r0
 800090a:	409d      	lsls	r5, r3
 800090c:	3676      	adds	r6, #118	; 0x76
 800090e:	2100      	movs	r1, #0
 8000910:	e77d      	b.n	800080e <__aeabi_fdiv+0x56>
 8000912:	2480      	movs	r4, #128	; 0x80
 8000914:	2300      	movs	r3, #0
 8000916:	03e4      	lsls	r4, r4, #15
 8000918:	22ff      	movs	r2, #255	; 0xff
 800091a:	e7ac      	b.n	8000876 <__aeabi_fdiv+0xbe>
 800091c:	2500      	movs	r5, #0
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	03db      	lsls	r3, r3, #15
 8000922:	421c      	tst	r4, r3
 8000924:	d028      	beq.n	8000978 <__aeabi_fdiv+0x1c0>
 8000926:	421d      	tst	r5, r3
 8000928:	d126      	bne.n	8000978 <__aeabi_fdiv+0x1c0>
 800092a:	432b      	orrs	r3, r5
 800092c:	025c      	lsls	r4, r3, #9
 800092e:	0a64      	lsrs	r4, r4, #9
 8000930:	4643      	mov	r3, r8
 8000932:	22ff      	movs	r2, #255	; 0xff
 8000934:	e79f      	b.n	8000876 <__aeabi_fdiv+0xbe>
 8000936:	0162      	lsls	r2, r4, #5
 8000938:	016c      	lsls	r4, r5, #5
 800093a:	42a2      	cmp	r2, r4
 800093c:	d224      	bcs.n	8000988 <__aeabi_fdiv+0x1d0>
 800093e:	211b      	movs	r1, #27
 8000940:	2500      	movs	r5, #0
 8000942:	3e01      	subs	r6, #1
 8000944:	2701      	movs	r7, #1
 8000946:	0010      	movs	r0, r2
 8000948:	006d      	lsls	r5, r5, #1
 800094a:	0052      	lsls	r2, r2, #1
 800094c:	2800      	cmp	r0, #0
 800094e:	db01      	blt.n	8000954 <__aeabi_fdiv+0x19c>
 8000950:	4294      	cmp	r4, r2
 8000952:	d801      	bhi.n	8000958 <__aeabi_fdiv+0x1a0>
 8000954:	1b12      	subs	r2, r2, r4
 8000956:	433d      	orrs	r5, r7
 8000958:	3901      	subs	r1, #1
 800095a:	2900      	cmp	r1, #0
 800095c:	d1f3      	bne.n	8000946 <__aeabi_fdiv+0x18e>
 800095e:	0014      	movs	r4, r2
 8000960:	1e62      	subs	r2, r4, #1
 8000962:	4194      	sbcs	r4, r2
 8000964:	4325      	orrs	r5, r4
 8000966:	e76d      	b.n	8000844 <__aeabi_fdiv+0x8c>
 8000968:	46ba      	mov	sl, r7
 800096a:	4659      	mov	r1, fp
 800096c:	0025      	movs	r5, r4
 800096e:	4653      	mov	r3, sl
 8000970:	2902      	cmp	r1, #2
 8000972:	d000      	beq.n	8000976 <__aeabi_fdiv+0x1be>
 8000974:	e761      	b.n	800083a <__aeabi_fdiv+0x82>
 8000976:	e77c      	b.n	8000872 <__aeabi_fdiv+0xba>
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	03db      	lsls	r3, r3, #15
 800097c:	431c      	orrs	r4, r3
 800097e:	0264      	lsls	r4, r4, #9
 8000980:	0a64      	lsrs	r4, r4, #9
 8000982:	003b      	movs	r3, r7
 8000984:	22ff      	movs	r2, #255	; 0xff
 8000986:	e776      	b.n	8000876 <__aeabi_fdiv+0xbe>
 8000988:	1b12      	subs	r2, r2, r4
 800098a:	211a      	movs	r1, #26
 800098c:	2501      	movs	r5, #1
 800098e:	e7d9      	b.n	8000944 <__aeabi_fdiv+0x18c>
 8000990:	369e      	adds	r6, #158	; 0x9e
 8000992:	002a      	movs	r2, r5
 8000994:	40b5      	lsls	r5, r6
 8000996:	002c      	movs	r4, r5
 8000998:	40c2      	lsrs	r2, r0
 800099a:	1e65      	subs	r5, r4, #1
 800099c:	41ac      	sbcs	r4, r5
 800099e:	4314      	orrs	r4, r2
 80009a0:	0762      	lsls	r2, r4, #29
 80009a2:	d004      	beq.n	80009ae <__aeabi_fdiv+0x1f6>
 80009a4:	220f      	movs	r2, #15
 80009a6:	4022      	ands	r2, r4
 80009a8:	2a04      	cmp	r2, #4
 80009aa:	d000      	beq.n	80009ae <__aeabi_fdiv+0x1f6>
 80009ac:	3404      	adds	r4, #4
 80009ae:	0162      	lsls	r2, r4, #5
 80009b0:	d403      	bmi.n	80009ba <__aeabi_fdiv+0x202>
 80009b2:	01a4      	lsls	r4, r4, #6
 80009b4:	0a64      	lsrs	r4, r4, #9
 80009b6:	2200      	movs	r2, #0
 80009b8:	e75d      	b.n	8000876 <__aeabi_fdiv+0xbe>
 80009ba:	2201      	movs	r2, #1
 80009bc:	2400      	movs	r4, #0
 80009be:	e75a      	b.n	8000876 <__aeabi_fdiv+0xbe>
 80009c0:	2480      	movs	r4, #128	; 0x80
 80009c2:	03e4      	lsls	r4, r4, #15
 80009c4:	432c      	orrs	r4, r5
 80009c6:	0264      	lsls	r4, r4, #9
 80009c8:	0a64      	lsrs	r4, r4, #9
 80009ca:	22ff      	movs	r2, #255	; 0xff
 80009cc:	e753      	b.n	8000876 <__aeabi_fdiv+0xbe>
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	08008de4 	.word	0x08008de4
 80009d4:	f7ffffff 	.word	0xf7ffffff
 80009d8:	08008e24 	.word	0x08008e24

080009dc <__aeabi_fmul>:
 80009dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009de:	464e      	mov	r6, r9
 80009e0:	4657      	mov	r7, sl
 80009e2:	4645      	mov	r5, r8
 80009e4:	46de      	mov	lr, fp
 80009e6:	b5e0      	push	{r5, r6, r7, lr}
 80009e8:	0243      	lsls	r3, r0, #9
 80009ea:	0a5b      	lsrs	r3, r3, #9
 80009ec:	0045      	lsls	r5, r0, #1
 80009ee:	b083      	sub	sp, #12
 80009f0:	1c0f      	adds	r7, r1, #0
 80009f2:	4699      	mov	r9, r3
 80009f4:	0e2d      	lsrs	r5, r5, #24
 80009f6:	0fc6      	lsrs	r6, r0, #31
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	d057      	beq.n	8000aac <__aeabi_fmul+0xd0>
 80009fc:	2dff      	cmp	r5, #255	; 0xff
 80009fe:	d024      	beq.n	8000a4a <__aeabi_fmul+0x6e>
 8000a00:	2080      	movs	r0, #128	; 0x80
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	04c0      	lsls	r0, r0, #19
 8000a06:	4318      	orrs	r0, r3
 8000a08:	2300      	movs	r3, #0
 8000a0a:	4681      	mov	r9, r0
 8000a0c:	469a      	mov	sl, r3
 8000a0e:	469b      	mov	fp, r3
 8000a10:	3d7f      	subs	r5, #127	; 0x7f
 8000a12:	027c      	lsls	r4, r7, #9
 8000a14:	007a      	lsls	r2, r7, #1
 8000a16:	0ffb      	lsrs	r3, r7, #31
 8000a18:	0a64      	lsrs	r4, r4, #9
 8000a1a:	0e12      	lsrs	r2, r2, #24
 8000a1c:	4698      	mov	r8, r3
 8000a1e:	d023      	beq.n	8000a68 <__aeabi_fmul+0x8c>
 8000a20:	2aff      	cmp	r2, #255	; 0xff
 8000a22:	d04b      	beq.n	8000abc <__aeabi_fmul+0xe0>
 8000a24:	00e3      	lsls	r3, r4, #3
 8000a26:	2480      	movs	r4, #128	; 0x80
 8000a28:	2000      	movs	r0, #0
 8000a2a:	04e4      	lsls	r4, r4, #19
 8000a2c:	3a7f      	subs	r2, #127	; 0x7f
 8000a2e:	431c      	orrs	r4, r3
 8000a30:	18ad      	adds	r5, r5, r2
 8000a32:	1c6b      	adds	r3, r5, #1
 8000a34:	4647      	mov	r7, r8
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	4653      	mov	r3, sl
 8000a3a:	4077      	eors	r7, r6
 8000a3c:	003a      	movs	r2, r7
 8000a3e:	2b0f      	cmp	r3, #15
 8000a40:	d848      	bhi.n	8000ad4 <__aeabi_fmul+0xf8>
 8000a42:	497d      	ldr	r1, [pc, #500]	; (8000c38 <__aeabi_fmul+0x25c>)
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	58cb      	ldr	r3, [r1, r3]
 8000a48:	469f      	mov	pc, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_fmul+0x74>
 8000a4e:	e085      	b.n	8000b5c <__aeabi_fmul+0x180>
 8000a50:	3308      	adds	r3, #8
 8000a52:	469a      	mov	sl, r3
 8000a54:	3b06      	subs	r3, #6
 8000a56:	469b      	mov	fp, r3
 8000a58:	027c      	lsls	r4, r7, #9
 8000a5a:	007a      	lsls	r2, r7, #1
 8000a5c:	0ffb      	lsrs	r3, r7, #31
 8000a5e:	25ff      	movs	r5, #255	; 0xff
 8000a60:	0a64      	lsrs	r4, r4, #9
 8000a62:	0e12      	lsrs	r2, r2, #24
 8000a64:	4698      	mov	r8, r3
 8000a66:	d1db      	bne.n	8000a20 <__aeabi_fmul+0x44>
 8000a68:	2c00      	cmp	r4, #0
 8000a6a:	d000      	beq.n	8000a6e <__aeabi_fmul+0x92>
 8000a6c:	e090      	b.n	8000b90 <__aeabi_fmul+0x1b4>
 8000a6e:	4652      	mov	r2, sl
 8000a70:	2301      	movs	r3, #1
 8000a72:	431a      	orrs	r2, r3
 8000a74:	4692      	mov	sl, r2
 8000a76:	2001      	movs	r0, #1
 8000a78:	e7db      	b.n	8000a32 <__aeabi_fmul+0x56>
 8000a7a:	464c      	mov	r4, r9
 8000a7c:	4658      	mov	r0, fp
 8000a7e:	0017      	movs	r7, r2
 8000a80:	2802      	cmp	r0, #2
 8000a82:	d024      	beq.n	8000ace <__aeabi_fmul+0xf2>
 8000a84:	2803      	cmp	r0, #3
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fmul+0xae>
 8000a88:	e0cf      	b.n	8000c2a <__aeabi_fmul+0x24e>
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	2801      	cmp	r0, #1
 8000a90:	d14d      	bne.n	8000b2e <__aeabi_fmul+0x152>
 8000a92:	0258      	lsls	r0, r3, #9
 8000a94:	05d2      	lsls	r2, r2, #23
 8000a96:	0a40      	lsrs	r0, r0, #9
 8000a98:	07ff      	lsls	r7, r7, #31
 8000a9a:	4310      	orrs	r0, r2
 8000a9c:	4338      	orrs	r0, r7
 8000a9e:	b003      	add	sp, #12
 8000aa0:	bc3c      	pop	{r2, r3, r4, r5}
 8000aa2:	4690      	mov	r8, r2
 8000aa4:	4699      	mov	r9, r3
 8000aa6:	46a2      	mov	sl, r4
 8000aa8:	46ab      	mov	fp, r5
 8000aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d15b      	bne.n	8000b68 <__aeabi_fmul+0x18c>
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	469a      	mov	sl, r3
 8000ab4:	3b03      	subs	r3, #3
 8000ab6:	2500      	movs	r5, #0
 8000ab8:	469b      	mov	fp, r3
 8000aba:	e7aa      	b.n	8000a12 <__aeabi_fmul+0x36>
 8000abc:	35ff      	adds	r5, #255	; 0xff
 8000abe:	2c00      	cmp	r4, #0
 8000ac0:	d160      	bne.n	8000b84 <__aeabi_fmul+0x1a8>
 8000ac2:	4652      	mov	r2, sl
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	4692      	mov	sl, r2
 8000aca:	2002      	movs	r0, #2
 8000acc:	e7b1      	b.n	8000a32 <__aeabi_fmul+0x56>
 8000ace:	22ff      	movs	r2, #255	; 0xff
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e7de      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000ad4:	464b      	mov	r3, r9
 8000ad6:	0c1b      	lsrs	r3, r3, #16
 8000ad8:	469c      	mov	ip, r3
 8000ada:	464b      	mov	r3, r9
 8000adc:	0426      	lsls	r6, r4, #16
 8000ade:	0c36      	lsrs	r6, r6, #16
 8000ae0:	0418      	lsls	r0, r3, #16
 8000ae2:	4661      	mov	r1, ip
 8000ae4:	0033      	movs	r3, r6
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	4664      	mov	r4, ip
 8000aea:	0c00      	lsrs	r0, r0, #16
 8000aec:	4343      	muls	r3, r0
 8000aee:	434e      	muls	r6, r1
 8000af0:	4350      	muls	r0, r2
 8000af2:	4354      	muls	r4, r2
 8000af4:	1980      	adds	r0, r0, r6
 8000af6:	0c1a      	lsrs	r2, r3, #16
 8000af8:	1812      	adds	r2, r2, r0
 8000afa:	4296      	cmp	r6, r2
 8000afc:	d903      	bls.n	8000b06 <__aeabi_fmul+0x12a>
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	0249      	lsls	r1, r1, #9
 8000b02:	468c      	mov	ip, r1
 8000b04:	4464      	add	r4, ip
 8000b06:	041b      	lsls	r3, r3, #16
 8000b08:	0c1b      	lsrs	r3, r3, #16
 8000b0a:	0410      	lsls	r0, r2, #16
 8000b0c:	18c0      	adds	r0, r0, r3
 8000b0e:	0183      	lsls	r3, r0, #6
 8000b10:	1e5e      	subs	r6, r3, #1
 8000b12:	41b3      	sbcs	r3, r6
 8000b14:	0e80      	lsrs	r0, r0, #26
 8000b16:	4318      	orrs	r0, r3
 8000b18:	0c13      	lsrs	r3, r2, #16
 8000b1a:	191b      	adds	r3, r3, r4
 8000b1c:	019b      	lsls	r3, r3, #6
 8000b1e:	4303      	orrs	r3, r0
 8000b20:	001c      	movs	r4, r3
 8000b22:	0123      	lsls	r3, r4, #4
 8000b24:	d579      	bpl.n	8000c1a <__aeabi_fmul+0x23e>
 8000b26:	2301      	movs	r3, #1
 8000b28:	0862      	lsrs	r2, r4, #1
 8000b2a:	401c      	ands	r4, r3
 8000b2c:	4314      	orrs	r4, r2
 8000b2e:	9a01      	ldr	r2, [sp, #4]
 8000b30:	327f      	adds	r2, #127	; 0x7f
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	dd4d      	ble.n	8000bd2 <__aeabi_fmul+0x1f6>
 8000b36:	0763      	lsls	r3, r4, #29
 8000b38:	d004      	beq.n	8000b44 <__aeabi_fmul+0x168>
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	4023      	ands	r3, r4
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d000      	beq.n	8000b44 <__aeabi_fmul+0x168>
 8000b42:	3404      	adds	r4, #4
 8000b44:	0123      	lsls	r3, r4, #4
 8000b46:	d503      	bpl.n	8000b50 <__aeabi_fmul+0x174>
 8000b48:	4b3c      	ldr	r3, [pc, #240]	; (8000c3c <__aeabi_fmul+0x260>)
 8000b4a:	9a01      	ldr	r2, [sp, #4]
 8000b4c:	401c      	ands	r4, r3
 8000b4e:	3280      	adds	r2, #128	; 0x80
 8000b50:	2afe      	cmp	r2, #254	; 0xfe
 8000b52:	dcbc      	bgt.n	8000ace <__aeabi_fmul+0xf2>
 8000b54:	01a3      	lsls	r3, r4, #6
 8000b56:	0a5b      	lsrs	r3, r3, #9
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	e79a      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000b5c:	230c      	movs	r3, #12
 8000b5e:	469a      	mov	sl, r3
 8000b60:	3b09      	subs	r3, #9
 8000b62:	25ff      	movs	r5, #255	; 0xff
 8000b64:	469b      	mov	fp, r3
 8000b66:	e754      	b.n	8000a12 <__aeabi_fmul+0x36>
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f002 f8d9 	bl	8002d20 <__clzsi2>
 8000b6e:	464a      	mov	r2, r9
 8000b70:	1f43      	subs	r3, r0, #5
 8000b72:	2576      	movs	r5, #118	; 0x76
 8000b74:	409a      	lsls	r2, r3
 8000b76:	2300      	movs	r3, #0
 8000b78:	426d      	negs	r5, r5
 8000b7a:	4691      	mov	r9, r2
 8000b7c:	1a2d      	subs	r5, r5, r0
 8000b7e:	469a      	mov	sl, r3
 8000b80:	469b      	mov	fp, r3
 8000b82:	e746      	b.n	8000a12 <__aeabi_fmul+0x36>
 8000b84:	4652      	mov	r2, sl
 8000b86:	2303      	movs	r3, #3
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	4692      	mov	sl, r2
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	e750      	b.n	8000a32 <__aeabi_fmul+0x56>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 f8c5 	bl	8002d20 <__clzsi2>
 8000b96:	1f43      	subs	r3, r0, #5
 8000b98:	1a2d      	subs	r5, r5, r0
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	3d76      	subs	r5, #118	; 0x76
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	e747      	b.n	8000a32 <__aeabi_fmul+0x56>
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	2700      	movs	r7, #0
 8000ba6:	03db      	lsls	r3, r3, #15
 8000ba8:	22ff      	movs	r2, #255	; 0xff
 8000baa:	e772      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000bac:	4642      	mov	r2, r8
 8000bae:	e766      	b.n	8000a7e <__aeabi_fmul+0xa2>
 8000bb0:	464c      	mov	r4, r9
 8000bb2:	0032      	movs	r2, r6
 8000bb4:	4658      	mov	r0, fp
 8000bb6:	e762      	b.n	8000a7e <__aeabi_fmul+0xa2>
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	464a      	mov	r2, r9
 8000bbc:	03db      	lsls	r3, r3, #15
 8000bbe:	421a      	tst	r2, r3
 8000bc0:	d022      	beq.n	8000c08 <__aeabi_fmul+0x22c>
 8000bc2:	421c      	tst	r4, r3
 8000bc4:	d120      	bne.n	8000c08 <__aeabi_fmul+0x22c>
 8000bc6:	4323      	orrs	r3, r4
 8000bc8:	025b      	lsls	r3, r3, #9
 8000bca:	0a5b      	lsrs	r3, r3, #9
 8000bcc:	4647      	mov	r7, r8
 8000bce:	22ff      	movs	r2, #255	; 0xff
 8000bd0:	e75f      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	1a9a      	subs	r2, r3, r2
 8000bd6:	2a1b      	cmp	r2, #27
 8000bd8:	dc21      	bgt.n	8000c1e <__aeabi_fmul+0x242>
 8000bda:	0023      	movs	r3, r4
 8000bdc:	9901      	ldr	r1, [sp, #4]
 8000bde:	40d3      	lsrs	r3, r2
 8000be0:	319e      	adds	r1, #158	; 0x9e
 8000be2:	408c      	lsls	r4, r1
 8000be4:	001a      	movs	r2, r3
 8000be6:	0023      	movs	r3, r4
 8000be8:	1e5c      	subs	r4, r3, #1
 8000bea:	41a3      	sbcs	r3, r4
 8000bec:	4313      	orrs	r3, r2
 8000bee:	075a      	lsls	r2, r3, #29
 8000bf0:	d004      	beq.n	8000bfc <__aeabi_fmul+0x220>
 8000bf2:	220f      	movs	r2, #15
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	2a04      	cmp	r2, #4
 8000bf8:	d000      	beq.n	8000bfc <__aeabi_fmul+0x220>
 8000bfa:	3304      	adds	r3, #4
 8000bfc:	015a      	lsls	r2, r3, #5
 8000bfe:	d411      	bmi.n	8000c24 <__aeabi_fmul+0x248>
 8000c00:	019b      	lsls	r3, r3, #6
 8000c02:	0a5b      	lsrs	r3, r3, #9
 8000c04:	2200      	movs	r2, #0
 8000c06:	e744      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	464a      	mov	r2, r9
 8000c0c:	03db      	lsls	r3, r3, #15
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	025b      	lsls	r3, r3, #9
 8000c12:	0a5b      	lsrs	r3, r3, #9
 8000c14:	0037      	movs	r7, r6
 8000c16:	22ff      	movs	r2, #255	; 0xff
 8000c18:	e73b      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000c1a:	9501      	str	r5, [sp, #4]
 8000c1c:	e787      	b.n	8000b2e <__aeabi_fmul+0x152>
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2300      	movs	r3, #0
 8000c22:	e736      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000c24:	2201      	movs	r2, #1
 8000c26:	2300      	movs	r3, #0
 8000c28:	e733      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	03db      	lsls	r3, r3, #15
 8000c2e:	4323      	orrs	r3, r4
 8000c30:	025b      	lsls	r3, r3, #9
 8000c32:	0a5b      	lsrs	r3, r3, #9
 8000c34:	22ff      	movs	r2, #255	; 0xff
 8000c36:	e72c      	b.n	8000a92 <__aeabi_fmul+0xb6>
 8000c38:	08008e64 	.word	0x08008e64
 8000c3c:	f7ffffff 	.word	0xf7ffffff

08000c40 <__aeabi_fsub>:
 8000c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c42:	4647      	mov	r7, r8
 8000c44:	46ce      	mov	lr, r9
 8000c46:	0044      	lsls	r4, r0, #1
 8000c48:	0fc2      	lsrs	r2, r0, #31
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	0247      	lsls	r7, r0, #9
 8000c4e:	0248      	lsls	r0, r1, #9
 8000c50:	0a40      	lsrs	r0, r0, #9
 8000c52:	4684      	mov	ip, r0
 8000c54:	4666      	mov	r6, ip
 8000c56:	0048      	lsls	r0, r1, #1
 8000c58:	0a7f      	lsrs	r7, r7, #9
 8000c5a:	0e24      	lsrs	r4, r4, #24
 8000c5c:	00f6      	lsls	r6, r6, #3
 8000c5e:	0025      	movs	r5, r4
 8000c60:	4690      	mov	r8, r2
 8000c62:	00fb      	lsls	r3, r7, #3
 8000c64:	0e00      	lsrs	r0, r0, #24
 8000c66:	0fc9      	lsrs	r1, r1, #31
 8000c68:	46b1      	mov	r9, r6
 8000c6a:	28ff      	cmp	r0, #255	; 0xff
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_fsub+0x30>
 8000c6e:	e085      	b.n	8000d7c <__aeabi_fsub+0x13c>
 8000c70:	2601      	movs	r6, #1
 8000c72:	4071      	eors	r1, r6
 8000c74:	1a26      	subs	r6, r4, r0
 8000c76:	4291      	cmp	r1, r2
 8000c78:	d057      	beq.n	8000d2a <__aeabi_fsub+0xea>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	dd43      	ble.n	8000d06 <__aeabi_fsub+0xc6>
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d000      	beq.n	8000c84 <__aeabi_fsub+0x44>
 8000c82:	e07f      	b.n	8000d84 <__aeabi_fsub+0x144>
 8000c84:	4649      	mov	r1, r9
 8000c86:	2900      	cmp	r1, #0
 8000c88:	d100      	bne.n	8000c8c <__aeabi_fsub+0x4c>
 8000c8a:	e0aa      	b.n	8000de2 <__aeabi_fsub+0x1a2>
 8000c8c:	3e01      	subs	r6, #1
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fsub+0x54>
 8000c92:	e0f7      	b.n	8000e84 <__aeabi_fsub+0x244>
 8000c94:	1a5b      	subs	r3, r3, r1
 8000c96:	015a      	lsls	r2, r3, #5
 8000c98:	d400      	bmi.n	8000c9c <__aeabi_fsub+0x5c>
 8000c9a:	e08b      	b.n	8000db4 <__aeabi_fsub+0x174>
 8000c9c:	019b      	lsls	r3, r3, #6
 8000c9e:	099c      	lsrs	r4, r3, #6
 8000ca0:	0020      	movs	r0, r4
 8000ca2:	f002 f83d 	bl	8002d20 <__clzsi2>
 8000ca6:	3805      	subs	r0, #5
 8000ca8:	4084      	lsls	r4, r0
 8000caa:	4285      	cmp	r5, r0
 8000cac:	dd00      	ble.n	8000cb0 <__aeabi_fsub+0x70>
 8000cae:	e0d3      	b.n	8000e58 <__aeabi_fsub+0x218>
 8000cb0:	1b45      	subs	r5, r0, r5
 8000cb2:	0023      	movs	r3, r4
 8000cb4:	2020      	movs	r0, #32
 8000cb6:	3501      	adds	r5, #1
 8000cb8:	40eb      	lsrs	r3, r5
 8000cba:	1b45      	subs	r5, r0, r5
 8000cbc:	40ac      	lsls	r4, r5
 8000cbe:	1e62      	subs	r2, r4, #1
 8000cc0:	4194      	sbcs	r4, r2
 8000cc2:	4323      	orrs	r3, r4
 8000cc4:	2407      	movs	r4, #7
 8000cc6:	2500      	movs	r5, #0
 8000cc8:	401c      	ands	r4, r3
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4641      	mov	r1, r8
 8000cce:	400a      	ands	r2, r1
 8000cd0:	2c00      	cmp	r4, #0
 8000cd2:	d004      	beq.n	8000cde <__aeabi_fsub+0x9e>
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	4019      	ands	r1, r3
 8000cd8:	2904      	cmp	r1, #4
 8000cda:	d000      	beq.n	8000cde <__aeabi_fsub+0x9e>
 8000cdc:	3304      	adds	r3, #4
 8000cde:	0159      	lsls	r1, r3, #5
 8000ce0:	d400      	bmi.n	8000ce4 <__aeabi_fsub+0xa4>
 8000ce2:	e080      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000ce4:	3501      	adds	r5, #1
 8000ce6:	b2ec      	uxtb	r4, r5
 8000ce8:	2dff      	cmp	r5, #255	; 0xff
 8000cea:	d000      	beq.n	8000cee <__aeabi_fsub+0xae>
 8000cec:	e0a3      	b.n	8000e36 <__aeabi_fsub+0x1f6>
 8000cee:	24ff      	movs	r4, #255	; 0xff
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	025b      	lsls	r3, r3, #9
 8000cf4:	05e4      	lsls	r4, r4, #23
 8000cf6:	0a58      	lsrs	r0, r3, #9
 8000cf8:	07d2      	lsls	r2, r2, #31
 8000cfa:	4320      	orrs	r0, r4
 8000cfc:	4310      	orrs	r0, r2
 8000cfe:	bc0c      	pop	{r2, r3}
 8000d00:	4690      	mov	r8, r2
 8000d02:	4699      	mov	r9, r3
 8000d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d174      	bne.n	8000df4 <__aeabi_fsub+0x1b4>
 8000d0a:	1c60      	adds	r0, r4, #1
 8000d0c:	b2c0      	uxtb	r0, r0
 8000d0e:	2801      	cmp	r0, #1
 8000d10:	dc00      	bgt.n	8000d14 <__aeabi_fsub+0xd4>
 8000d12:	e0a7      	b.n	8000e64 <__aeabi_fsub+0x224>
 8000d14:	464a      	mov	r2, r9
 8000d16:	1a9c      	subs	r4, r3, r2
 8000d18:	0162      	lsls	r2, r4, #5
 8000d1a:	d500      	bpl.n	8000d1e <__aeabi_fsub+0xde>
 8000d1c:	e0b6      	b.n	8000e8c <__aeabi_fsub+0x24c>
 8000d1e:	2c00      	cmp	r4, #0
 8000d20:	d1be      	bne.n	8000ca0 <__aeabi_fsub+0x60>
 8000d22:	2200      	movs	r2, #0
 8000d24:	2400      	movs	r4, #0
 8000d26:	2300      	movs	r3, #0
 8000d28:	e7e3      	b.n	8000cf2 <__aeabi_fsub+0xb2>
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	dc00      	bgt.n	8000d30 <__aeabi_fsub+0xf0>
 8000d2e:	e085      	b.n	8000e3c <__aeabi_fsub+0x1fc>
 8000d30:	2800      	cmp	r0, #0
 8000d32:	d046      	beq.n	8000dc2 <__aeabi_fsub+0x182>
 8000d34:	2cff      	cmp	r4, #255	; 0xff
 8000d36:	d049      	beq.n	8000dcc <__aeabi_fsub+0x18c>
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	04d2      	lsls	r2, r2, #19
 8000d3e:	4310      	orrs	r0, r2
 8000d40:	4681      	mov	r9, r0
 8000d42:	2201      	movs	r2, #1
 8000d44:	2e1b      	cmp	r6, #27
 8000d46:	dc09      	bgt.n	8000d5c <__aeabi_fsub+0x11c>
 8000d48:	2020      	movs	r0, #32
 8000d4a:	464c      	mov	r4, r9
 8000d4c:	1b80      	subs	r0, r0, r6
 8000d4e:	4084      	lsls	r4, r0
 8000d50:	464a      	mov	r2, r9
 8000d52:	0020      	movs	r0, r4
 8000d54:	40f2      	lsrs	r2, r6
 8000d56:	1e44      	subs	r4, r0, #1
 8000d58:	41a0      	sbcs	r0, r4
 8000d5a:	4302      	orrs	r2, r0
 8000d5c:	189b      	adds	r3, r3, r2
 8000d5e:	015a      	lsls	r2, r3, #5
 8000d60:	d528      	bpl.n	8000db4 <__aeabi_fsub+0x174>
 8000d62:	3501      	adds	r5, #1
 8000d64:	2dff      	cmp	r5, #255	; 0xff
 8000d66:	d100      	bne.n	8000d6a <__aeabi_fsub+0x12a>
 8000d68:	e0a8      	b.n	8000ebc <__aeabi_fsub+0x27c>
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2407      	movs	r4, #7
 8000d6e:	4994      	ldr	r1, [pc, #592]	; (8000fc0 <__aeabi_fsub+0x380>)
 8000d70:	401a      	ands	r2, r3
 8000d72:	085b      	lsrs	r3, r3, #1
 8000d74:	400b      	ands	r3, r1
 8000d76:	4313      	orrs	r3, r2
 8000d78:	401c      	ands	r4, r3
 8000d7a:	e7a6      	b.n	8000cca <__aeabi_fsub+0x8a>
 8000d7c:	2e00      	cmp	r6, #0
 8000d7e:	d000      	beq.n	8000d82 <__aeabi_fsub+0x142>
 8000d80:	e778      	b.n	8000c74 <__aeabi_fsub+0x34>
 8000d82:	e775      	b.n	8000c70 <__aeabi_fsub+0x30>
 8000d84:	2cff      	cmp	r4, #255	; 0xff
 8000d86:	d054      	beq.n	8000e32 <__aeabi_fsub+0x1f2>
 8000d88:	2280      	movs	r2, #128	; 0x80
 8000d8a:	4649      	mov	r1, r9
 8000d8c:	04d2      	lsls	r2, r2, #19
 8000d8e:	4311      	orrs	r1, r2
 8000d90:	4689      	mov	r9, r1
 8000d92:	2201      	movs	r2, #1
 8000d94:	2e1b      	cmp	r6, #27
 8000d96:	dc09      	bgt.n	8000dac <__aeabi_fsub+0x16c>
 8000d98:	2120      	movs	r1, #32
 8000d9a:	4648      	mov	r0, r9
 8000d9c:	1b89      	subs	r1, r1, r6
 8000d9e:	4088      	lsls	r0, r1
 8000da0:	464a      	mov	r2, r9
 8000da2:	0001      	movs	r1, r0
 8000da4:	40f2      	lsrs	r2, r6
 8000da6:	1e48      	subs	r0, r1, #1
 8000da8:	4181      	sbcs	r1, r0
 8000daa:	430a      	orrs	r2, r1
 8000dac:	1a9b      	subs	r3, r3, r2
 8000dae:	015a      	lsls	r2, r3, #5
 8000db0:	d500      	bpl.n	8000db4 <__aeabi_fsub+0x174>
 8000db2:	e773      	b.n	8000c9c <__aeabi_fsub+0x5c>
 8000db4:	2201      	movs	r2, #1
 8000db6:	4641      	mov	r1, r8
 8000db8:	400a      	ands	r2, r1
 8000dba:	0759      	lsls	r1, r3, #29
 8000dbc:	d000      	beq.n	8000dc0 <__aeabi_fsub+0x180>
 8000dbe:	e789      	b.n	8000cd4 <__aeabi_fsub+0x94>
 8000dc0:	e011      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000dc2:	4648      	mov	r0, r9
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	d158      	bne.n	8000e7a <__aeabi_fsub+0x23a>
 8000dc8:	2cff      	cmp	r4, #255	; 0xff
 8000dca:	d10c      	bne.n	8000de6 <__aeabi_fsub+0x1a6>
 8000dcc:	08db      	lsrs	r3, r3, #3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x194>
 8000dd2:	e78c      	b.n	8000cee <__aeabi_fsub+0xae>
 8000dd4:	2080      	movs	r0, #128	; 0x80
 8000dd6:	03c0      	lsls	r0, r0, #15
 8000dd8:	4303      	orrs	r3, r0
 8000dda:	025b      	lsls	r3, r3, #9
 8000ddc:	0a5b      	lsrs	r3, r3, #9
 8000dde:	24ff      	movs	r4, #255	; 0xff
 8000de0:	e787      	b.n	8000cf2 <__aeabi_fsub+0xb2>
 8000de2:	2cff      	cmp	r4, #255	; 0xff
 8000de4:	d025      	beq.n	8000e32 <__aeabi_fsub+0x1f2>
 8000de6:	08db      	lsrs	r3, r3, #3
 8000de8:	2dff      	cmp	r5, #255	; 0xff
 8000dea:	d0f0      	beq.n	8000dce <__aeabi_fsub+0x18e>
 8000dec:	025b      	lsls	r3, r3, #9
 8000dee:	0a5b      	lsrs	r3, r3, #9
 8000df0:	b2ec      	uxtb	r4, r5
 8000df2:	e77e      	b.n	8000cf2 <__aeabi_fsub+0xb2>
 8000df4:	2c00      	cmp	r4, #0
 8000df6:	d04d      	beq.n	8000e94 <__aeabi_fsub+0x254>
 8000df8:	28ff      	cmp	r0, #255	; 0xff
 8000dfa:	d018      	beq.n	8000e2e <__aeabi_fsub+0x1ee>
 8000dfc:	2480      	movs	r4, #128	; 0x80
 8000dfe:	04e4      	lsls	r4, r4, #19
 8000e00:	4272      	negs	r2, r6
 8000e02:	4323      	orrs	r3, r4
 8000e04:	2a1b      	cmp	r2, #27
 8000e06:	dd00      	ble.n	8000e0a <__aeabi_fsub+0x1ca>
 8000e08:	e0c4      	b.n	8000f94 <__aeabi_fsub+0x354>
 8000e0a:	001c      	movs	r4, r3
 8000e0c:	2520      	movs	r5, #32
 8000e0e:	40d4      	lsrs	r4, r2
 8000e10:	1aaa      	subs	r2, r5, r2
 8000e12:	4093      	lsls	r3, r2
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	4193      	sbcs	r3, r2
 8000e18:	4323      	orrs	r3, r4
 8000e1a:	464a      	mov	r2, r9
 8000e1c:	0005      	movs	r5, r0
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	4688      	mov	r8, r1
 8000e22:	e738      	b.n	8000c96 <__aeabi_fsub+0x56>
 8000e24:	1c72      	adds	r2, r6, #1
 8000e26:	d0f8      	beq.n	8000e1a <__aeabi_fsub+0x1da>
 8000e28:	43f2      	mvns	r2, r6
 8000e2a:	28ff      	cmp	r0, #255	; 0xff
 8000e2c:	d1ea      	bne.n	8000e04 <__aeabi_fsub+0x1c4>
 8000e2e:	000a      	movs	r2, r1
 8000e30:	464b      	mov	r3, r9
 8000e32:	25ff      	movs	r5, #255	; 0xff
 8000e34:	e7d7      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000e36:	019b      	lsls	r3, r3, #6
 8000e38:	0a5b      	lsrs	r3, r3, #9
 8000e3a:	e75a      	b.n	8000cf2 <__aeabi_fsub+0xb2>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d141      	bne.n	8000ec4 <__aeabi_fsub+0x284>
 8000e40:	1c65      	adds	r5, r4, #1
 8000e42:	b2e9      	uxtb	r1, r5
 8000e44:	2901      	cmp	r1, #1
 8000e46:	dd45      	ble.n	8000ed4 <__aeabi_fsub+0x294>
 8000e48:	2dff      	cmp	r5, #255	; 0xff
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_fsub+0x20e>
 8000e4c:	e74f      	b.n	8000cee <__aeabi_fsub+0xae>
 8000e4e:	2407      	movs	r4, #7
 8000e50:	444b      	add	r3, r9
 8000e52:	085b      	lsrs	r3, r3, #1
 8000e54:	401c      	ands	r4, r3
 8000e56:	e738      	b.n	8000cca <__aeabi_fsub+0x8a>
 8000e58:	2207      	movs	r2, #7
 8000e5a:	4b5a      	ldr	r3, [pc, #360]	; (8000fc4 <__aeabi_fsub+0x384>)
 8000e5c:	1a2d      	subs	r5, r5, r0
 8000e5e:	4023      	ands	r3, r4
 8000e60:	4014      	ands	r4, r2
 8000e62:	e732      	b.n	8000cca <__aeabi_fsub+0x8a>
 8000e64:	2c00      	cmp	r4, #0
 8000e66:	d11d      	bne.n	8000ea4 <__aeabi_fsub+0x264>
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d17a      	bne.n	8000f62 <__aeabi_fsub+0x322>
 8000e6c:	464b      	mov	r3, r9
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d100      	bne.n	8000e74 <__aeabi_fsub+0x234>
 8000e72:	e091      	b.n	8000f98 <__aeabi_fsub+0x358>
 8000e74:	000a      	movs	r2, r1
 8000e76:	2500      	movs	r5, #0
 8000e78:	e7b5      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000e7a:	3e01      	subs	r6, #1
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d119      	bne.n	8000eb4 <__aeabi_fsub+0x274>
 8000e80:	444b      	add	r3, r9
 8000e82:	e76c      	b.n	8000d5e <__aeabi_fsub+0x11e>
 8000e84:	2cff      	cmp	r4, #255	; 0xff
 8000e86:	d184      	bne.n	8000d92 <__aeabi_fsub+0x152>
 8000e88:	25ff      	movs	r5, #255	; 0xff
 8000e8a:	e7ac      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000e8c:	464a      	mov	r2, r9
 8000e8e:	4688      	mov	r8, r1
 8000e90:	1ad4      	subs	r4, r2, r3
 8000e92:	e705      	b.n	8000ca0 <__aeabi_fsub+0x60>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1c5      	bne.n	8000e24 <__aeabi_fsub+0x1e4>
 8000e98:	000a      	movs	r2, r1
 8000e9a:	28ff      	cmp	r0, #255	; 0xff
 8000e9c:	d0c8      	beq.n	8000e30 <__aeabi_fsub+0x1f0>
 8000e9e:	0005      	movs	r5, r0
 8000ea0:	464b      	mov	r3, r9
 8000ea2:	e7a0      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d149      	bne.n	8000f3c <__aeabi_fsub+0x2fc>
 8000ea8:	464b      	mov	r3, r9
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d077      	beq.n	8000f9e <__aeabi_fsub+0x35e>
 8000eae:	000a      	movs	r2, r1
 8000eb0:	25ff      	movs	r5, #255	; 0xff
 8000eb2:	e798      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000eb4:	2cff      	cmp	r4, #255	; 0xff
 8000eb6:	d000      	beq.n	8000eba <__aeabi_fsub+0x27a>
 8000eb8:	e743      	b.n	8000d42 <__aeabi_fsub+0x102>
 8000eba:	e787      	b.n	8000dcc <__aeabi_fsub+0x18c>
 8000ebc:	000a      	movs	r2, r1
 8000ebe:	24ff      	movs	r4, #255	; 0xff
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e716      	b.n	8000cf2 <__aeabi_fsub+0xb2>
 8000ec4:	2c00      	cmp	r4, #0
 8000ec6:	d115      	bne.n	8000ef4 <__aeabi_fsub+0x2b4>
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d157      	bne.n	8000f7c <__aeabi_fsub+0x33c>
 8000ecc:	28ff      	cmp	r0, #255	; 0xff
 8000ece:	d1e6      	bne.n	8000e9e <__aeabi_fsub+0x25e>
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	e77b      	b.n	8000dcc <__aeabi_fsub+0x18c>
 8000ed4:	2c00      	cmp	r4, #0
 8000ed6:	d120      	bne.n	8000f1a <__aeabi_fsub+0x2da>
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d057      	beq.n	8000f8c <__aeabi_fsub+0x34c>
 8000edc:	4649      	mov	r1, r9
 8000ede:	2900      	cmp	r1, #0
 8000ee0:	d053      	beq.n	8000f8a <__aeabi_fsub+0x34a>
 8000ee2:	444b      	add	r3, r9
 8000ee4:	015a      	lsls	r2, r3, #5
 8000ee6:	d568      	bpl.n	8000fba <__aeabi_fsub+0x37a>
 8000ee8:	2407      	movs	r4, #7
 8000eea:	4a36      	ldr	r2, [pc, #216]	; (8000fc4 <__aeabi_fsub+0x384>)
 8000eec:	401c      	ands	r4, r3
 8000eee:	2501      	movs	r5, #1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	e6ea      	b.n	8000cca <__aeabi_fsub+0x8a>
 8000ef4:	28ff      	cmp	r0, #255	; 0xff
 8000ef6:	d0eb      	beq.n	8000ed0 <__aeabi_fsub+0x290>
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	04d2      	lsls	r2, r2, #19
 8000efc:	4276      	negs	r6, r6
 8000efe:	4313      	orrs	r3, r2
 8000f00:	2e1b      	cmp	r6, #27
 8000f02:	dc53      	bgt.n	8000fac <__aeabi_fsub+0x36c>
 8000f04:	2520      	movs	r5, #32
 8000f06:	1bad      	subs	r5, r5, r6
 8000f08:	001a      	movs	r2, r3
 8000f0a:	40ab      	lsls	r3, r5
 8000f0c:	40f2      	lsrs	r2, r6
 8000f0e:	1e5c      	subs	r4, r3, #1
 8000f10:	41a3      	sbcs	r3, r4
 8000f12:	4313      	orrs	r3, r2
 8000f14:	444b      	add	r3, r9
 8000f16:	0005      	movs	r5, r0
 8000f18:	e721      	b.n	8000d5e <__aeabi_fsub+0x11e>
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0d8      	beq.n	8000ed0 <__aeabi_fsub+0x290>
 8000f1e:	4649      	mov	r1, r9
 8000f20:	2900      	cmp	r1, #0
 8000f22:	d100      	bne.n	8000f26 <__aeabi_fsub+0x2e6>
 8000f24:	e752      	b.n	8000dcc <__aeabi_fsub+0x18c>
 8000f26:	2180      	movs	r1, #128	; 0x80
 8000f28:	03c9      	lsls	r1, r1, #15
 8000f2a:	420f      	tst	r7, r1
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fsub+0x2f0>
 8000f2e:	e74d      	b.n	8000dcc <__aeabi_fsub+0x18c>
 8000f30:	4660      	mov	r0, ip
 8000f32:	4208      	tst	r0, r1
 8000f34:	d000      	beq.n	8000f38 <__aeabi_fsub+0x2f8>
 8000f36:	e749      	b.n	8000dcc <__aeabi_fsub+0x18c>
 8000f38:	464b      	mov	r3, r9
 8000f3a:	e747      	b.n	8000dcc <__aeabi_fsub+0x18c>
 8000f3c:	4648      	mov	r0, r9
 8000f3e:	25ff      	movs	r5, #255	; 0xff
 8000f40:	2800      	cmp	r0, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_fsub+0x306>
 8000f44:	e74f      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	03d2      	lsls	r2, r2, #15
 8000f4a:	4217      	tst	r7, r2
 8000f4c:	d004      	beq.n	8000f58 <__aeabi_fsub+0x318>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	4210      	tst	r0, r2
 8000f52:	d101      	bne.n	8000f58 <__aeabi_fsub+0x318>
 8000f54:	464b      	mov	r3, r9
 8000f56:	4688      	mov	r8, r1
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4641      	mov	r1, r8
 8000f5c:	25ff      	movs	r5, #255	; 0xff
 8000f5e:	400a      	ands	r2, r1
 8000f60:	e741      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000f62:	4648      	mov	r0, r9
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d01f      	beq.n	8000fa8 <__aeabi_fsub+0x368>
 8000f68:	1a1a      	subs	r2, r3, r0
 8000f6a:	0150      	lsls	r0, r2, #5
 8000f6c:	d520      	bpl.n	8000fb0 <__aeabi_fsub+0x370>
 8000f6e:	464a      	mov	r2, r9
 8000f70:	2407      	movs	r4, #7
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	401c      	ands	r4, r3
 8000f76:	4688      	mov	r8, r1
 8000f78:	2500      	movs	r5, #0
 8000f7a:	e6a6      	b.n	8000cca <__aeabi_fsub+0x8a>
 8000f7c:	1c74      	adds	r4, r6, #1
 8000f7e:	d0c9      	beq.n	8000f14 <__aeabi_fsub+0x2d4>
 8000f80:	43f6      	mvns	r6, r6
 8000f82:	28ff      	cmp	r0, #255	; 0xff
 8000f84:	d1bc      	bne.n	8000f00 <__aeabi_fsub+0x2c0>
 8000f86:	464b      	mov	r3, r9
 8000f88:	e720      	b.n	8000dcc <__aeabi_fsub+0x18c>
 8000f8a:	4699      	mov	r9, r3
 8000f8c:	464b      	mov	r3, r9
 8000f8e:	2500      	movs	r5, #0
 8000f90:	08db      	lsrs	r3, r3, #3
 8000f92:	e72b      	b.n	8000dec <__aeabi_fsub+0x1ac>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e740      	b.n	8000e1a <__aeabi_fsub+0x1da>
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e6a9      	b.n	8000cf2 <__aeabi_fsub+0xb2>
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	03db      	lsls	r3, r3, #15
 8000fa4:	24ff      	movs	r4, #255	; 0xff
 8000fa6:	e6a4      	b.n	8000cf2 <__aeabi_fsub+0xb2>
 8000fa8:	2500      	movs	r5, #0
 8000faa:	e71c      	b.n	8000de6 <__aeabi_fsub+0x1a6>
 8000fac:	2301      	movs	r3, #1
 8000fae:	e7b1      	b.n	8000f14 <__aeabi_fsub+0x2d4>
 8000fb0:	2a00      	cmp	r2, #0
 8000fb2:	d0f1      	beq.n	8000f98 <__aeabi_fsub+0x358>
 8000fb4:	0013      	movs	r3, r2
 8000fb6:	2500      	movs	r5, #0
 8000fb8:	e6fc      	b.n	8000db4 <__aeabi_fsub+0x174>
 8000fba:	2500      	movs	r5, #0
 8000fbc:	e6fa      	b.n	8000db4 <__aeabi_fsub+0x174>
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	7dffffff 	.word	0x7dffffff
 8000fc4:	fbffffff 	.word	0xfbffffff

08000fc8 <__aeabi_f2iz>:
 8000fc8:	0241      	lsls	r1, r0, #9
 8000fca:	0042      	lsls	r2, r0, #1
 8000fcc:	0fc3      	lsrs	r3, r0, #31
 8000fce:	0a49      	lsrs	r1, r1, #9
 8000fd0:	0e12      	lsrs	r2, r2, #24
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	2a7e      	cmp	r2, #126	; 0x7e
 8000fd6:	d90d      	bls.n	8000ff4 <__aeabi_f2iz+0x2c>
 8000fd8:	2a9d      	cmp	r2, #157	; 0x9d
 8000fda:	d80c      	bhi.n	8000ff6 <__aeabi_f2iz+0x2e>
 8000fdc:	2080      	movs	r0, #128	; 0x80
 8000fde:	0400      	lsls	r0, r0, #16
 8000fe0:	4301      	orrs	r1, r0
 8000fe2:	2a95      	cmp	r2, #149	; 0x95
 8000fe4:	dc0a      	bgt.n	8000ffc <__aeabi_f2iz+0x34>
 8000fe6:	2096      	movs	r0, #150	; 0x96
 8000fe8:	1a82      	subs	r2, r0, r2
 8000fea:	40d1      	lsrs	r1, r2
 8000fec:	4248      	negs	r0, r1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_f2iz+0x2c>
 8000ff2:	0008      	movs	r0, r1
 8000ff4:	4770      	bx	lr
 8000ff6:	4a03      	ldr	r2, [pc, #12]	; (8001004 <__aeabi_f2iz+0x3c>)
 8000ff8:	1898      	adds	r0, r3, r2
 8000ffa:	e7fb      	b.n	8000ff4 <__aeabi_f2iz+0x2c>
 8000ffc:	3a96      	subs	r2, #150	; 0x96
 8000ffe:	4091      	lsls	r1, r2
 8001000:	e7f4      	b.n	8000fec <__aeabi_f2iz+0x24>
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	7fffffff 	.word	0x7fffffff

08001008 <__aeabi_i2f>:
 8001008:	b570      	push	{r4, r5, r6, lr}
 800100a:	2800      	cmp	r0, #0
 800100c:	d03d      	beq.n	800108a <__aeabi_i2f+0x82>
 800100e:	17c3      	asrs	r3, r0, #31
 8001010:	18c5      	adds	r5, r0, r3
 8001012:	405d      	eors	r5, r3
 8001014:	0fc4      	lsrs	r4, r0, #31
 8001016:	0028      	movs	r0, r5
 8001018:	f001 fe82 	bl	8002d20 <__clzsi2>
 800101c:	229e      	movs	r2, #158	; 0x9e
 800101e:	1a12      	subs	r2, r2, r0
 8001020:	2a96      	cmp	r2, #150	; 0x96
 8001022:	dc07      	bgt.n	8001034 <__aeabi_i2f+0x2c>
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	2808      	cmp	r0, #8
 8001028:	dd33      	ble.n	8001092 <__aeabi_i2f+0x8a>
 800102a:	3808      	subs	r0, #8
 800102c:	4085      	lsls	r5, r0
 800102e:	0268      	lsls	r0, r5, #9
 8001030:	0a40      	lsrs	r0, r0, #9
 8001032:	e023      	b.n	800107c <__aeabi_i2f+0x74>
 8001034:	2a99      	cmp	r2, #153	; 0x99
 8001036:	dd0b      	ble.n	8001050 <__aeabi_i2f+0x48>
 8001038:	2305      	movs	r3, #5
 800103a:	0029      	movs	r1, r5
 800103c:	1a1b      	subs	r3, r3, r0
 800103e:	40d9      	lsrs	r1, r3
 8001040:	0003      	movs	r3, r0
 8001042:	331b      	adds	r3, #27
 8001044:	409d      	lsls	r5, r3
 8001046:	002b      	movs	r3, r5
 8001048:	1e5d      	subs	r5, r3, #1
 800104a:	41ab      	sbcs	r3, r5
 800104c:	4319      	orrs	r1, r3
 800104e:	000d      	movs	r5, r1
 8001050:	2805      	cmp	r0, #5
 8001052:	dd01      	ble.n	8001058 <__aeabi_i2f+0x50>
 8001054:	1f43      	subs	r3, r0, #5
 8001056:	409d      	lsls	r5, r3
 8001058:	002b      	movs	r3, r5
 800105a:	490f      	ldr	r1, [pc, #60]	; (8001098 <__aeabi_i2f+0x90>)
 800105c:	400b      	ands	r3, r1
 800105e:	076e      	lsls	r6, r5, #29
 8001060:	d009      	beq.n	8001076 <__aeabi_i2f+0x6e>
 8001062:	260f      	movs	r6, #15
 8001064:	4035      	ands	r5, r6
 8001066:	2d04      	cmp	r5, #4
 8001068:	d005      	beq.n	8001076 <__aeabi_i2f+0x6e>
 800106a:	3304      	adds	r3, #4
 800106c:	015d      	lsls	r5, r3, #5
 800106e:	d502      	bpl.n	8001076 <__aeabi_i2f+0x6e>
 8001070:	229f      	movs	r2, #159	; 0x9f
 8001072:	400b      	ands	r3, r1
 8001074:	1a12      	subs	r2, r2, r0
 8001076:	019b      	lsls	r3, r3, #6
 8001078:	0a58      	lsrs	r0, r3, #9
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	0240      	lsls	r0, r0, #9
 800107e:	05d2      	lsls	r2, r2, #23
 8001080:	0a40      	lsrs	r0, r0, #9
 8001082:	07e4      	lsls	r4, r4, #31
 8001084:	4310      	orrs	r0, r2
 8001086:	4320      	orrs	r0, r4
 8001088:	bd70      	pop	{r4, r5, r6, pc}
 800108a:	2400      	movs	r4, #0
 800108c:	2200      	movs	r2, #0
 800108e:	2000      	movs	r0, #0
 8001090:	e7f4      	b.n	800107c <__aeabi_i2f+0x74>
 8001092:	0268      	lsls	r0, r5, #9
 8001094:	0a40      	lsrs	r0, r0, #9
 8001096:	e7f1      	b.n	800107c <__aeabi_i2f+0x74>
 8001098:	fbffffff 	.word	0xfbffffff

0800109c <__aeabi_dadd>:
 800109c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800109e:	464f      	mov	r7, r9
 80010a0:	4646      	mov	r6, r8
 80010a2:	46d6      	mov	lr, sl
 80010a4:	000c      	movs	r4, r1
 80010a6:	0309      	lsls	r1, r1, #12
 80010a8:	b5c0      	push	{r6, r7, lr}
 80010aa:	0a49      	lsrs	r1, r1, #9
 80010ac:	0f47      	lsrs	r7, r0, #29
 80010ae:	005e      	lsls	r6, r3, #1
 80010b0:	4339      	orrs	r1, r7
 80010b2:	031f      	lsls	r7, r3, #12
 80010b4:	0fdb      	lsrs	r3, r3, #31
 80010b6:	469c      	mov	ip, r3
 80010b8:	0065      	lsls	r5, r4, #1
 80010ba:	0a7b      	lsrs	r3, r7, #9
 80010bc:	0f57      	lsrs	r7, r2, #29
 80010be:	431f      	orrs	r7, r3
 80010c0:	0d6d      	lsrs	r5, r5, #21
 80010c2:	0fe4      	lsrs	r4, r4, #31
 80010c4:	0d76      	lsrs	r6, r6, #21
 80010c6:	46a1      	mov	r9, r4
 80010c8:	00c0      	lsls	r0, r0, #3
 80010ca:	46b8      	mov	r8, r7
 80010cc:	00d2      	lsls	r2, r2, #3
 80010ce:	1bab      	subs	r3, r5, r6
 80010d0:	4564      	cmp	r4, ip
 80010d2:	d07b      	beq.n	80011cc <__aeabi_dadd+0x130>
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dd5f      	ble.n	8001198 <__aeabi_dadd+0xfc>
 80010d8:	2e00      	cmp	r6, #0
 80010da:	d000      	beq.n	80010de <__aeabi_dadd+0x42>
 80010dc:	e0a4      	b.n	8001228 <__aeabi_dadd+0x18c>
 80010de:	003e      	movs	r6, r7
 80010e0:	4316      	orrs	r6, r2
 80010e2:	d100      	bne.n	80010e6 <__aeabi_dadd+0x4a>
 80010e4:	e112      	b.n	800130c <__aeabi_dadd+0x270>
 80010e6:	1e5e      	subs	r6, r3, #1
 80010e8:	2e00      	cmp	r6, #0
 80010ea:	d000      	beq.n	80010ee <__aeabi_dadd+0x52>
 80010ec:	e19e      	b.n	800142c <__aeabi_dadd+0x390>
 80010ee:	1a87      	subs	r7, r0, r2
 80010f0:	4643      	mov	r3, r8
 80010f2:	42b8      	cmp	r0, r7
 80010f4:	4180      	sbcs	r0, r0
 80010f6:	2501      	movs	r5, #1
 80010f8:	1ac9      	subs	r1, r1, r3
 80010fa:	4240      	negs	r0, r0
 80010fc:	1a09      	subs	r1, r1, r0
 80010fe:	020b      	lsls	r3, r1, #8
 8001100:	d400      	bmi.n	8001104 <__aeabi_dadd+0x68>
 8001102:	e131      	b.n	8001368 <__aeabi_dadd+0x2cc>
 8001104:	0249      	lsls	r1, r1, #9
 8001106:	0a4e      	lsrs	r6, r1, #9
 8001108:	2e00      	cmp	r6, #0
 800110a:	d100      	bne.n	800110e <__aeabi_dadd+0x72>
 800110c:	e16e      	b.n	80013ec <__aeabi_dadd+0x350>
 800110e:	0030      	movs	r0, r6
 8001110:	f001 fe06 	bl	8002d20 <__clzsi2>
 8001114:	0003      	movs	r3, r0
 8001116:	3b08      	subs	r3, #8
 8001118:	2b1f      	cmp	r3, #31
 800111a:	dd00      	ble.n	800111e <__aeabi_dadd+0x82>
 800111c:	e161      	b.n	80013e2 <__aeabi_dadd+0x346>
 800111e:	2220      	movs	r2, #32
 8001120:	0039      	movs	r1, r7
 8001122:	1ad2      	subs	r2, r2, r3
 8001124:	409e      	lsls	r6, r3
 8001126:	40d1      	lsrs	r1, r2
 8001128:	409f      	lsls	r7, r3
 800112a:	430e      	orrs	r6, r1
 800112c:	429d      	cmp	r5, r3
 800112e:	dd00      	ble.n	8001132 <__aeabi_dadd+0x96>
 8001130:	e151      	b.n	80013d6 <__aeabi_dadd+0x33a>
 8001132:	1b5d      	subs	r5, r3, r5
 8001134:	1c6b      	adds	r3, r5, #1
 8001136:	2b1f      	cmp	r3, #31
 8001138:	dd00      	ble.n	800113c <__aeabi_dadd+0xa0>
 800113a:	e17c      	b.n	8001436 <__aeabi_dadd+0x39a>
 800113c:	2120      	movs	r1, #32
 800113e:	1ac9      	subs	r1, r1, r3
 8001140:	003d      	movs	r5, r7
 8001142:	0030      	movs	r0, r6
 8001144:	408f      	lsls	r7, r1
 8001146:	4088      	lsls	r0, r1
 8001148:	40dd      	lsrs	r5, r3
 800114a:	1e79      	subs	r1, r7, #1
 800114c:	418f      	sbcs	r7, r1
 800114e:	0031      	movs	r1, r6
 8001150:	2207      	movs	r2, #7
 8001152:	4328      	orrs	r0, r5
 8001154:	40d9      	lsrs	r1, r3
 8001156:	2500      	movs	r5, #0
 8001158:	4307      	orrs	r7, r0
 800115a:	403a      	ands	r2, r7
 800115c:	2a00      	cmp	r2, #0
 800115e:	d009      	beq.n	8001174 <__aeabi_dadd+0xd8>
 8001160:	230f      	movs	r3, #15
 8001162:	403b      	ands	r3, r7
 8001164:	2b04      	cmp	r3, #4
 8001166:	d005      	beq.n	8001174 <__aeabi_dadd+0xd8>
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	42bb      	cmp	r3, r7
 800116c:	41bf      	sbcs	r7, r7
 800116e:	427f      	negs	r7, r7
 8001170:	19c9      	adds	r1, r1, r7
 8001172:	001f      	movs	r7, r3
 8001174:	020b      	lsls	r3, r1, #8
 8001176:	d400      	bmi.n	800117a <__aeabi_dadd+0xde>
 8001178:	e226      	b.n	80015c8 <__aeabi_dadd+0x52c>
 800117a:	1c6a      	adds	r2, r5, #1
 800117c:	4bc6      	ldr	r3, [pc, #792]	; (8001498 <__aeabi_dadd+0x3fc>)
 800117e:	0555      	lsls	r5, r2, #21
 8001180:	0d6d      	lsrs	r5, r5, #21
 8001182:	429a      	cmp	r2, r3
 8001184:	d100      	bne.n	8001188 <__aeabi_dadd+0xec>
 8001186:	e106      	b.n	8001396 <__aeabi_dadd+0x2fa>
 8001188:	4ac4      	ldr	r2, [pc, #784]	; (800149c <__aeabi_dadd+0x400>)
 800118a:	08ff      	lsrs	r7, r7, #3
 800118c:	400a      	ands	r2, r1
 800118e:	0753      	lsls	r3, r2, #29
 8001190:	0252      	lsls	r2, r2, #9
 8001192:	433b      	orrs	r3, r7
 8001194:	0b12      	lsrs	r2, r2, #12
 8001196:	e08e      	b.n	80012b6 <__aeabi_dadd+0x21a>
 8001198:	2b00      	cmp	r3, #0
 800119a:	d000      	beq.n	800119e <__aeabi_dadd+0x102>
 800119c:	e0b8      	b.n	8001310 <__aeabi_dadd+0x274>
 800119e:	1c6b      	adds	r3, r5, #1
 80011a0:	055b      	lsls	r3, r3, #21
 80011a2:	0d5b      	lsrs	r3, r3, #21
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	dc00      	bgt.n	80011aa <__aeabi_dadd+0x10e>
 80011a8:	e130      	b.n	800140c <__aeabi_dadd+0x370>
 80011aa:	1a87      	subs	r7, r0, r2
 80011ac:	4643      	mov	r3, r8
 80011ae:	42b8      	cmp	r0, r7
 80011b0:	41b6      	sbcs	r6, r6
 80011b2:	1acb      	subs	r3, r1, r3
 80011b4:	4276      	negs	r6, r6
 80011b6:	1b9e      	subs	r6, r3, r6
 80011b8:	0233      	lsls	r3, r6, #8
 80011ba:	d500      	bpl.n	80011be <__aeabi_dadd+0x122>
 80011bc:	e14c      	b.n	8001458 <__aeabi_dadd+0x3bc>
 80011be:	003b      	movs	r3, r7
 80011c0:	4333      	orrs	r3, r6
 80011c2:	d1a1      	bne.n	8001108 <__aeabi_dadd+0x6c>
 80011c4:	2200      	movs	r2, #0
 80011c6:	2400      	movs	r4, #0
 80011c8:	2500      	movs	r5, #0
 80011ca:	e070      	b.n	80012ae <__aeabi_dadd+0x212>
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	dc00      	bgt.n	80011d2 <__aeabi_dadd+0x136>
 80011d0:	e0e5      	b.n	800139e <__aeabi_dadd+0x302>
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d100      	bne.n	80011d8 <__aeabi_dadd+0x13c>
 80011d6:	e083      	b.n	80012e0 <__aeabi_dadd+0x244>
 80011d8:	4eaf      	ldr	r6, [pc, #700]	; (8001498 <__aeabi_dadd+0x3fc>)
 80011da:	42b5      	cmp	r5, r6
 80011dc:	d060      	beq.n	80012a0 <__aeabi_dadd+0x204>
 80011de:	2680      	movs	r6, #128	; 0x80
 80011e0:	0436      	lsls	r6, r6, #16
 80011e2:	4337      	orrs	r7, r6
 80011e4:	46b8      	mov	r8, r7
 80011e6:	2b38      	cmp	r3, #56	; 0x38
 80011e8:	dc00      	bgt.n	80011ec <__aeabi_dadd+0x150>
 80011ea:	e13e      	b.n	800146a <__aeabi_dadd+0x3ce>
 80011ec:	4643      	mov	r3, r8
 80011ee:	4313      	orrs	r3, r2
 80011f0:	001f      	movs	r7, r3
 80011f2:	1e7a      	subs	r2, r7, #1
 80011f4:	4197      	sbcs	r7, r2
 80011f6:	183f      	adds	r7, r7, r0
 80011f8:	4287      	cmp	r7, r0
 80011fa:	4180      	sbcs	r0, r0
 80011fc:	4240      	negs	r0, r0
 80011fe:	1809      	adds	r1, r1, r0
 8001200:	020b      	lsls	r3, r1, #8
 8001202:	d400      	bmi.n	8001206 <__aeabi_dadd+0x16a>
 8001204:	e0b0      	b.n	8001368 <__aeabi_dadd+0x2cc>
 8001206:	4ba4      	ldr	r3, [pc, #656]	; (8001498 <__aeabi_dadd+0x3fc>)
 8001208:	3501      	adds	r5, #1
 800120a:	429d      	cmp	r5, r3
 800120c:	d100      	bne.n	8001210 <__aeabi_dadd+0x174>
 800120e:	e0c3      	b.n	8001398 <__aeabi_dadd+0x2fc>
 8001210:	4aa2      	ldr	r2, [pc, #648]	; (800149c <__aeabi_dadd+0x400>)
 8001212:	087b      	lsrs	r3, r7, #1
 8001214:	400a      	ands	r2, r1
 8001216:	2101      	movs	r1, #1
 8001218:	400f      	ands	r7, r1
 800121a:	431f      	orrs	r7, r3
 800121c:	0851      	lsrs	r1, r2, #1
 800121e:	07d3      	lsls	r3, r2, #31
 8001220:	2207      	movs	r2, #7
 8001222:	431f      	orrs	r7, r3
 8001224:	403a      	ands	r2, r7
 8001226:	e799      	b.n	800115c <__aeabi_dadd+0xc0>
 8001228:	4e9b      	ldr	r6, [pc, #620]	; (8001498 <__aeabi_dadd+0x3fc>)
 800122a:	42b5      	cmp	r5, r6
 800122c:	d038      	beq.n	80012a0 <__aeabi_dadd+0x204>
 800122e:	2680      	movs	r6, #128	; 0x80
 8001230:	0436      	lsls	r6, r6, #16
 8001232:	4337      	orrs	r7, r6
 8001234:	46b8      	mov	r8, r7
 8001236:	2b38      	cmp	r3, #56	; 0x38
 8001238:	dd00      	ble.n	800123c <__aeabi_dadd+0x1a0>
 800123a:	e0dc      	b.n	80013f6 <__aeabi_dadd+0x35a>
 800123c:	2b1f      	cmp	r3, #31
 800123e:	dc00      	bgt.n	8001242 <__aeabi_dadd+0x1a6>
 8001240:	e130      	b.n	80014a4 <__aeabi_dadd+0x408>
 8001242:	001e      	movs	r6, r3
 8001244:	4647      	mov	r7, r8
 8001246:	3e20      	subs	r6, #32
 8001248:	40f7      	lsrs	r7, r6
 800124a:	46bc      	mov	ip, r7
 800124c:	2b20      	cmp	r3, #32
 800124e:	d004      	beq.n	800125a <__aeabi_dadd+0x1be>
 8001250:	2640      	movs	r6, #64	; 0x40
 8001252:	1af3      	subs	r3, r6, r3
 8001254:	4646      	mov	r6, r8
 8001256:	409e      	lsls	r6, r3
 8001258:	4332      	orrs	r2, r6
 800125a:	0017      	movs	r7, r2
 800125c:	4663      	mov	r3, ip
 800125e:	1e7a      	subs	r2, r7, #1
 8001260:	4197      	sbcs	r7, r2
 8001262:	431f      	orrs	r7, r3
 8001264:	e0cc      	b.n	8001400 <__aeabi_dadd+0x364>
 8001266:	2b00      	cmp	r3, #0
 8001268:	d100      	bne.n	800126c <__aeabi_dadd+0x1d0>
 800126a:	e204      	b.n	8001676 <__aeabi_dadd+0x5da>
 800126c:	4643      	mov	r3, r8
 800126e:	4313      	orrs	r3, r2
 8001270:	d100      	bne.n	8001274 <__aeabi_dadd+0x1d8>
 8001272:	e159      	b.n	8001528 <__aeabi_dadd+0x48c>
 8001274:	074b      	lsls	r3, r1, #29
 8001276:	08c0      	lsrs	r0, r0, #3
 8001278:	4318      	orrs	r0, r3
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	08c9      	lsrs	r1, r1, #3
 800127e:	031b      	lsls	r3, r3, #12
 8001280:	4219      	tst	r1, r3
 8001282:	d008      	beq.n	8001296 <__aeabi_dadd+0x1fa>
 8001284:	4645      	mov	r5, r8
 8001286:	08ed      	lsrs	r5, r5, #3
 8001288:	421d      	tst	r5, r3
 800128a:	d104      	bne.n	8001296 <__aeabi_dadd+0x1fa>
 800128c:	4643      	mov	r3, r8
 800128e:	08d0      	lsrs	r0, r2, #3
 8001290:	0759      	lsls	r1, r3, #29
 8001292:	4308      	orrs	r0, r1
 8001294:	0029      	movs	r1, r5
 8001296:	0f42      	lsrs	r2, r0, #29
 8001298:	00c9      	lsls	r1, r1, #3
 800129a:	4d7f      	ldr	r5, [pc, #508]	; (8001498 <__aeabi_dadd+0x3fc>)
 800129c:	4311      	orrs	r1, r2
 800129e:	00c0      	lsls	r0, r0, #3
 80012a0:	074b      	lsls	r3, r1, #29
 80012a2:	08ca      	lsrs	r2, r1, #3
 80012a4:	497c      	ldr	r1, [pc, #496]	; (8001498 <__aeabi_dadd+0x3fc>)
 80012a6:	08c0      	lsrs	r0, r0, #3
 80012a8:	4303      	orrs	r3, r0
 80012aa:	428d      	cmp	r5, r1
 80012ac:	d068      	beq.n	8001380 <__aeabi_dadd+0x2e4>
 80012ae:	0312      	lsls	r2, r2, #12
 80012b0:	056d      	lsls	r5, r5, #21
 80012b2:	0b12      	lsrs	r2, r2, #12
 80012b4:	0d6d      	lsrs	r5, r5, #21
 80012b6:	2100      	movs	r1, #0
 80012b8:	0312      	lsls	r2, r2, #12
 80012ba:	0018      	movs	r0, r3
 80012bc:	0b13      	lsrs	r3, r2, #12
 80012be:	0d0a      	lsrs	r2, r1, #20
 80012c0:	0512      	lsls	r2, r2, #20
 80012c2:	431a      	orrs	r2, r3
 80012c4:	4b76      	ldr	r3, [pc, #472]	; (80014a0 <__aeabi_dadd+0x404>)
 80012c6:	052d      	lsls	r5, r5, #20
 80012c8:	4013      	ands	r3, r2
 80012ca:	432b      	orrs	r3, r5
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	07e4      	lsls	r4, r4, #31
 80012d0:	085b      	lsrs	r3, r3, #1
 80012d2:	4323      	orrs	r3, r4
 80012d4:	0019      	movs	r1, r3
 80012d6:	bc1c      	pop	{r2, r3, r4}
 80012d8:	4690      	mov	r8, r2
 80012da:	4699      	mov	r9, r3
 80012dc:	46a2      	mov	sl, r4
 80012de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e0:	003e      	movs	r6, r7
 80012e2:	4316      	orrs	r6, r2
 80012e4:	d012      	beq.n	800130c <__aeabi_dadd+0x270>
 80012e6:	1e5e      	subs	r6, r3, #1
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d000      	beq.n	80012ee <__aeabi_dadd+0x252>
 80012ec:	e100      	b.n	80014f0 <__aeabi_dadd+0x454>
 80012ee:	1887      	adds	r7, r0, r2
 80012f0:	4287      	cmp	r7, r0
 80012f2:	4180      	sbcs	r0, r0
 80012f4:	4441      	add	r1, r8
 80012f6:	4240      	negs	r0, r0
 80012f8:	1809      	adds	r1, r1, r0
 80012fa:	2501      	movs	r5, #1
 80012fc:	020b      	lsls	r3, r1, #8
 80012fe:	d533      	bpl.n	8001368 <__aeabi_dadd+0x2cc>
 8001300:	2502      	movs	r5, #2
 8001302:	e785      	b.n	8001210 <__aeabi_dadd+0x174>
 8001304:	4664      	mov	r4, ip
 8001306:	0033      	movs	r3, r6
 8001308:	4641      	mov	r1, r8
 800130a:	0010      	movs	r0, r2
 800130c:	001d      	movs	r5, r3
 800130e:	e7c7      	b.n	80012a0 <__aeabi_dadd+0x204>
 8001310:	2d00      	cmp	r5, #0
 8001312:	d000      	beq.n	8001316 <__aeabi_dadd+0x27a>
 8001314:	e0da      	b.n	80014cc <__aeabi_dadd+0x430>
 8001316:	000c      	movs	r4, r1
 8001318:	4304      	orrs	r4, r0
 800131a:	d0f3      	beq.n	8001304 <__aeabi_dadd+0x268>
 800131c:	1c5c      	adds	r4, r3, #1
 800131e:	d100      	bne.n	8001322 <__aeabi_dadd+0x286>
 8001320:	e19f      	b.n	8001662 <__aeabi_dadd+0x5c6>
 8001322:	4c5d      	ldr	r4, [pc, #372]	; (8001498 <__aeabi_dadd+0x3fc>)
 8001324:	42a6      	cmp	r6, r4
 8001326:	d100      	bne.n	800132a <__aeabi_dadd+0x28e>
 8001328:	e12f      	b.n	800158a <__aeabi_dadd+0x4ee>
 800132a:	43db      	mvns	r3, r3
 800132c:	2b38      	cmp	r3, #56	; 0x38
 800132e:	dd00      	ble.n	8001332 <__aeabi_dadd+0x296>
 8001330:	e166      	b.n	8001600 <__aeabi_dadd+0x564>
 8001332:	2b1f      	cmp	r3, #31
 8001334:	dd00      	ble.n	8001338 <__aeabi_dadd+0x29c>
 8001336:	e183      	b.n	8001640 <__aeabi_dadd+0x5a4>
 8001338:	2420      	movs	r4, #32
 800133a:	0005      	movs	r5, r0
 800133c:	1ae4      	subs	r4, r4, r3
 800133e:	000f      	movs	r7, r1
 8001340:	40dd      	lsrs	r5, r3
 8001342:	40d9      	lsrs	r1, r3
 8001344:	40a0      	lsls	r0, r4
 8001346:	4643      	mov	r3, r8
 8001348:	40a7      	lsls	r7, r4
 800134a:	1a5b      	subs	r3, r3, r1
 800134c:	1e44      	subs	r4, r0, #1
 800134e:	41a0      	sbcs	r0, r4
 8001350:	4698      	mov	r8, r3
 8001352:	432f      	orrs	r7, r5
 8001354:	4338      	orrs	r0, r7
 8001356:	1a17      	subs	r7, r2, r0
 8001358:	42ba      	cmp	r2, r7
 800135a:	4192      	sbcs	r2, r2
 800135c:	4643      	mov	r3, r8
 800135e:	4252      	negs	r2, r2
 8001360:	1a99      	subs	r1, r3, r2
 8001362:	4664      	mov	r4, ip
 8001364:	0035      	movs	r5, r6
 8001366:	e6ca      	b.n	80010fe <__aeabi_dadd+0x62>
 8001368:	2207      	movs	r2, #7
 800136a:	403a      	ands	r2, r7
 800136c:	2a00      	cmp	r2, #0
 800136e:	d000      	beq.n	8001372 <__aeabi_dadd+0x2d6>
 8001370:	e6f6      	b.n	8001160 <__aeabi_dadd+0xc4>
 8001372:	074b      	lsls	r3, r1, #29
 8001374:	08ca      	lsrs	r2, r1, #3
 8001376:	4948      	ldr	r1, [pc, #288]	; (8001498 <__aeabi_dadd+0x3fc>)
 8001378:	08ff      	lsrs	r7, r7, #3
 800137a:	433b      	orrs	r3, r7
 800137c:	428d      	cmp	r5, r1
 800137e:	d196      	bne.n	80012ae <__aeabi_dadd+0x212>
 8001380:	0019      	movs	r1, r3
 8001382:	4311      	orrs	r1, r2
 8001384:	d100      	bne.n	8001388 <__aeabi_dadd+0x2ec>
 8001386:	e19e      	b.n	80016c6 <__aeabi_dadd+0x62a>
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	0309      	lsls	r1, r1, #12
 800138c:	430a      	orrs	r2, r1
 800138e:	0312      	lsls	r2, r2, #12
 8001390:	0b12      	lsrs	r2, r2, #12
 8001392:	4d41      	ldr	r5, [pc, #260]	; (8001498 <__aeabi_dadd+0x3fc>)
 8001394:	e78f      	b.n	80012b6 <__aeabi_dadd+0x21a>
 8001396:	0015      	movs	r5, r2
 8001398:	2200      	movs	r2, #0
 800139a:	2300      	movs	r3, #0
 800139c:	e78b      	b.n	80012b6 <__aeabi_dadd+0x21a>
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d000      	beq.n	80013a4 <__aeabi_dadd+0x308>
 80013a2:	e0c7      	b.n	8001534 <__aeabi_dadd+0x498>
 80013a4:	1c6b      	adds	r3, r5, #1
 80013a6:	055f      	lsls	r7, r3, #21
 80013a8:	0d7f      	lsrs	r7, r7, #21
 80013aa:	2f01      	cmp	r7, #1
 80013ac:	dc00      	bgt.n	80013b0 <__aeabi_dadd+0x314>
 80013ae:	e0f1      	b.n	8001594 <__aeabi_dadd+0x4f8>
 80013b0:	4d39      	ldr	r5, [pc, #228]	; (8001498 <__aeabi_dadd+0x3fc>)
 80013b2:	42ab      	cmp	r3, r5
 80013b4:	d100      	bne.n	80013b8 <__aeabi_dadd+0x31c>
 80013b6:	e0b9      	b.n	800152c <__aeabi_dadd+0x490>
 80013b8:	1885      	adds	r5, r0, r2
 80013ba:	000a      	movs	r2, r1
 80013bc:	4285      	cmp	r5, r0
 80013be:	4189      	sbcs	r1, r1
 80013c0:	4442      	add	r2, r8
 80013c2:	4249      	negs	r1, r1
 80013c4:	1851      	adds	r1, r2, r1
 80013c6:	2207      	movs	r2, #7
 80013c8:	07cf      	lsls	r7, r1, #31
 80013ca:	086d      	lsrs	r5, r5, #1
 80013cc:	432f      	orrs	r7, r5
 80013ce:	0849      	lsrs	r1, r1, #1
 80013d0:	403a      	ands	r2, r7
 80013d2:	001d      	movs	r5, r3
 80013d4:	e6c2      	b.n	800115c <__aeabi_dadd+0xc0>
 80013d6:	2207      	movs	r2, #7
 80013d8:	4930      	ldr	r1, [pc, #192]	; (800149c <__aeabi_dadd+0x400>)
 80013da:	1aed      	subs	r5, r5, r3
 80013dc:	4031      	ands	r1, r6
 80013de:	403a      	ands	r2, r7
 80013e0:	e6bc      	b.n	800115c <__aeabi_dadd+0xc0>
 80013e2:	003e      	movs	r6, r7
 80013e4:	3828      	subs	r0, #40	; 0x28
 80013e6:	4086      	lsls	r6, r0
 80013e8:	2700      	movs	r7, #0
 80013ea:	e69f      	b.n	800112c <__aeabi_dadd+0x90>
 80013ec:	0038      	movs	r0, r7
 80013ee:	f001 fc97 	bl	8002d20 <__clzsi2>
 80013f2:	3020      	adds	r0, #32
 80013f4:	e68e      	b.n	8001114 <__aeabi_dadd+0x78>
 80013f6:	4643      	mov	r3, r8
 80013f8:	4313      	orrs	r3, r2
 80013fa:	001f      	movs	r7, r3
 80013fc:	1e7a      	subs	r2, r7, #1
 80013fe:	4197      	sbcs	r7, r2
 8001400:	1bc7      	subs	r7, r0, r7
 8001402:	42b8      	cmp	r0, r7
 8001404:	4180      	sbcs	r0, r0
 8001406:	4240      	negs	r0, r0
 8001408:	1a09      	subs	r1, r1, r0
 800140a:	e678      	b.n	80010fe <__aeabi_dadd+0x62>
 800140c:	000e      	movs	r6, r1
 800140e:	003b      	movs	r3, r7
 8001410:	4306      	orrs	r6, r0
 8001412:	4313      	orrs	r3, r2
 8001414:	2d00      	cmp	r5, #0
 8001416:	d161      	bne.n	80014dc <__aeabi_dadd+0x440>
 8001418:	2e00      	cmp	r6, #0
 800141a:	d000      	beq.n	800141e <__aeabi_dadd+0x382>
 800141c:	e0f4      	b.n	8001608 <__aeabi_dadd+0x56c>
 800141e:	2b00      	cmp	r3, #0
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x388>
 8001422:	e11b      	b.n	800165c <__aeabi_dadd+0x5c0>
 8001424:	4664      	mov	r4, ip
 8001426:	0039      	movs	r1, r7
 8001428:	0010      	movs	r0, r2
 800142a:	e739      	b.n	80012a0 <__aeabi_dadd+0x204>
 800142c:	4f1a      	ldr	r7, [pc, #104]	; (8001498 <__aeabi_dadd+0x3fc>)
 800142e:	42bb      	cmp	r3, r7
 8001430:	d07a      	beq.n	8001528 <__aeabi_dadd+0x48c>
 8001432:	0033      	movs	r3, r6
 8001434:	e6ff      	b.n	8001236 <__aeabi_dadd+0x19a>
 8001436:	0030      	movs	r0, r6
 8001438:	3d1f      	subs	r5, #31
 800143a:	40e8      	lsrs	r0, r5
 800143c:	2b20      	cmp	r3, #32
 800143e:	d003      	beq.n	8001448 <__aeabi_dadd+0x3ac>
 8001440:	2140      	movs	r1, #64	; 0x40
 8001442:	1acb      	subs	r3, r1, r3
 8001444:	409e      	lsls	r6, r3
 8001446:	4337      	orrs	r7, r6
 8001448:	1e7b      	subs	r3, r7, #1
 800144a:	419f      	sbcs	r7, r3
 800144c:	2207      	movs	r2, #7
 800144e:	4307      	orrs	r7, r0
 8001450:	403a      	ands	r2, r7
 8001452:	2100      	movs	r1, #0
 8001454:	2500      	movs	r5, #0
 8001456:	e789      	b.n	800136c <__aeabi_dadd+0x2d0>
 8001458:	1a17      	subs	r7, r2, r0
 800145a:	4643      	mov	r3, r8
 800145c:	42ba      	cmp	r2, r7
 800145e:	41b6      	sbcs	r6, r6
 8001460:	1a59      	subs	r1, r3, r1
 8001462:	4276      	negs	r6, r6
 8001464:	1b8e      	subs	r6, r1, r6
 8001466:	4664      	mov	r4, ip
 8001468:	e64e      	b.n	8001108 <__aeabi_dadd+0x6c>
 800146a:	2b1f      	cmp	r3, #31
 800146c:	dd00      	ble.n	8001470 <__aeabi_dadd+0x3d4>
 800146e:	e0ad      	b.n	80015cc <__aeabi_dadd+0x530>
 8001470:	2620      	movs	r6, #32
 8001472:	4647      	mov	r7, r8
 8001474:	1af6      	subs	r6, r6, r3
 8001476:	40b7      	lsls	r7, r6
 8001478:	46b9      	mov	r9, r7
 800147a:	0017      	movs	r7, r2
 800147c:	46b2      	mov	sl, r6
 800147e:	40df      	lsrs	r7, r3
 8001480:	464e      	mov	r6, r9
 8001482:	433e      	orrs	r6, r7
 8001484:	0037      	movs	r7, r6
 8001486:	4656      	mov	r6, sl
 8001488:	40b2      	lsls	r2, r6
 800148a:	1e56      	subs	r6, r2, #1
 800148c:	41b2      	sbcs	r2, r6
 800148e:	4317      	orrs	r7, r2
 8001490:	4642      	mov	r2, r8
 8001492:	40da      	lsrs	r2, r3
 8001494:	1889      	adds	r1, r1, r2
 8001496:	e6ae      	b.n	80011f6 <__aeabi_dadd+0x15a>
 8001498:	000007ff 	.word	0x000007ff
 800149c:	ff7fffff 	.word	0xff7fffff
 80014a0:	800fffff 	.word	0x800fffff
 80014a4:	2620      	movs	r6, #32
 80014a6:	4647      	mov	r7, r8
 80014a8:	1af6      	subs	r6, r6, r3
 80014aa:	40b7      	lsls	r7, r6
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0017      	movs	r7, r2
 80014b0:	46b2      	mov	sl, r6
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464e      	mov	r6, r9
 80014b6:	433e      	orrs	r6, r7
 80014b8:	0037      	movs	r7, r6
 80014ba:	4656      	mov	r6, sl
 80014bc:	40b2      	lsls	r2, r6
 80014be:	1e56      	subs	r6, r2, #1
 80014c0:	41b2      	sbcs	r2, r6
 80014c2:	4317      	orrs	r7, r2
 80014c4:	4642      	mov	r2, r8
 80014c6:	40da      	lsrs	r2, r3
 80014c8:	1a89      	subs	r1, r1, r2
 80014ca:	e799      	b.n	8001400 <__aeabi_dadd+0x364>
 80014cc:	4c7f      	ldr	r4, [pc, #508]	; (80016cc <__aeabi_dadd+0x630>)
 80014ce:	42a6      	cmp	r6, r4
 80014d0:	d05b      	beq.n	800158a <__aeabi_dadd+0x4ee>
 80014d2:	2480      	movs	r4, #128	; 0x80
 80014d4:	0424      	lsls	r4, r4, #16
 80014d6:	425b      	negs	r3, r3
 80014d8:	4321      	orrs	r1, r4
 80014da:	e727      	b.n	800132c <__aeabi_dadd+0x290>
 80014dc:	2e00      	cmp	r6, #0
 80014de:	d10c      	bne.n	80014fa <__aeabi_dadd+0x45e>
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d100      	bne.n	80014e6 <__aeabi_dadd+0x44a>
 80014e4:	e0cb      	b.n	800167e <__aeabi_dadd+0x5e2>
 80014e6:	4664      	mov	r4, ip
 80014e8:	0039      	movs	r1, r7
 80014ea:	0010      	movs	r0, r2
 80014ec:	4d77      	ldr	r5, [pc, #476]	; (80016cc <__aeabi_dadd+0x630>)
 80014ee:	e6d7      	b.n	80012a0 <__aeabi_dadd+0x204>
 80014f0:	4f76      	ldr	r7, [pc, #472]	; (80016cc <__aeabi_dadd+0x630>)
 80014f2:	42bb      	cmp	r3, r7
 80014f4:	d018      	beq.n	8001528 <__aeabi_dadd+0x48c>
 80014f6:	0033      	movs	r3, r6
 80014f8:	e675      	b.n	80011e6 <__aeabi_dadd+0x14a>
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d014      	beq.n	8001528 <__aeabi_dadd+0x48c>
 80014fe:	074b      	lsls	r3, r1, #29
 8001500:	08c0      	lsrs	r0, r0, #3
 8001502:	4318      	orrs	r0, r3
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	08c9      	lsrs	r1, r1, #3
 8001508:	031b      	lsls	r3, r3, #12
 800150a:	4219      	tst	r1, r3
 800150c:	d007      	beq.n	800151e <__aeabi_dadd+0x482>
 800150e:	08fc      	lsrs	r4, r7, #3
 8001510:	421c      	tst	r4, r3
 8001512:	d104      	bne.n	800151e <__aeabi_dadd+0x482>
 8001514:	0779      	lsls	r1, r7, #29
 8001516:	08d0      	lsrs	r0, r2, #3
 8001518:	4308      	orrs	r0, r1
 800151a:	46e1      	mov	r9, ip
 800151c:	0021      	movs	r1, r4
 800151e:	464c      	mov	r4, r9
 8001520:	0f42      	lsrs	r2, r0, #29
 8001522:	00c9      	lsls	r1, r1, #3
 8001524:	4311      	orrs	r1, r2
 8001526:	00c0      	lsls	r0, r0, #3
 8001528:	4d68      	ldr	r5, [pc, #416]	; (80016cc <__aeabi_dadd+0x630>)
 800152a:	e6b9      	b.n	80012a0 <__aeabi_dadd+0x204>
 800152c:	001d      	movs	r5, r3
 800152e:	2200      	movs	r2, #0
 8001530:	2300      	movs	r3, #0
 8001532:	e6c0      	b.n	80012b6 <__aeabi_dadd+0x21a>
 8001534:	2d00      	cmp	r5, #0
 8001536:	d15b      	bne.n	80015f0 <__aeabi_dadd+0x554>
 8001538:	000d      	movs	r5, r1
 800153a:	4305      	orrs	r5, r0
 800153c:	d100      	bne.n	8001540 <__aeabi_dadd+0x4a4>
 800153e:	e6e2      	b.n	8001306 <__aeabi_dadd+0x26a>
 8001540:	1c5d      	adds	r5, r3, #1
 8001542:	d100      	bne.n	8001546 <__aeabi_dadd+0x4aa>
 8001544:	e0b0      	b.n	80016a8 <__aeabi_dadd+0x60c>
 8001546:	4d61      	ldr	r5, [pc, #388]	; (80016cc <__aeabi_dadd+0x630>)
 8001548:	42ae      	cmp	r6, r5
 800154a:	d01f      	beq.n	800158c <__aeabi_dadd+0x4f0>
 800154c:	43db      	mvns	r3, r3
 800154e:	2b38      	cmp	r3, #56	; 0x38
 8001550:	dc71      	bgt.n	8001636 <__aeabi_dadd+0x59a>
 8001552:	2b1f      	cmp	r3, #31
 8001554:	dd00      	ble.n	8001558 <__aeabi_dadd+0x4bc>
 8001556:	e096      	b.n	8001686 <__aeabi_dadd+0x5ea>
 8001558:	2520      	movs	r5, #32
 800155a:	000f      	movs	r7, r1
 800155c:	1aed      	subs	r5, r5, r3
 800155e:	40af      	lsls	r7, r5
 8001560:	46b9      	mov	r9, r7
 8001562:	0007      	movs	r7, r0
 8001564:	46aa      	mov	sl, r5
 8001566:	40df      	lsrs	r7, r3
 8001568:	464d      	mov	r5, r9
 800156a:	433d      	orrs	r5, r7
 800156c:	002f      	movs	r7, r5
 800156e:	4655      	mov	r5, sl
 8001570:	40a8      	lsls	r0, r5
 8001572:	40d9      	lsrs	r1, r3
 8001574:	1e45      	subs	r5, r0, #1
 8001576:	41a8      	sbcs	r0, r5
 8001578:	4488      	add	r8, r1
 800157a:	4307      	orrs	r7, r0
 800157c:	18bf      	adds	r7, r7, r2
 800157e:	4297      	cmp	r7, r2
 8001580:	4192      	sbcs	r2, r2
 8001582:	4251      	negs	r1, r2
 8001584:	4441      	add	r1, r8
 8001586:	0035      	movs	r5, r6
 8001588:	e63a      	b.n	8001200 <__aeabi_dadd+0x164>
 800158a:	4664      	mov	r4, ip
 800158c:	0035      	movs	r5, r6
 800158e:	4641      	mov	r1, r8
 8001590:	0010      	movs	r0, r2
 8001592:	e685      	b.n	80012a0 <__aeabi_dadd+0x204>
 8001594:	000b      	movs	r3, r1
 8001596:	4303      	orrs	r3, r0
 8001598:	2d00      	cmp	r5, #0
 800159a:	d000      	beq.n	800159e <__aeabi_dadd+0x502>
 800159c:	e663      	b.n	8001266 <__aeabi_dadd+0x1ca>
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f5      	beq.n	800158e <__aeabi_dadd+0x4f2>
 80015a2:	4643      	mov	r3, r8
 80015a4:	4313      	orrs	r3, r2
 80015a6:	d100      	bne.n	80015aa <__aeabi_dadd+0x50e>
 80015a8:	e67a      	b.n	80012a0 <__aeabi_dadd+0x204>
 80015aa:	1887      	adds	r7, r0, r2
 80015ac:	4287      	cmp	r7, r0
 80015ae:	4180      	sbcs	r0, r0
 80015b0:	2207      	movs	r2, #7
 80015b2:	4441      	add	r1, r8
 80015b4:	4240      	negs	r0, r0
 80015b6:	1809      	adds	r1, r1, r0
 80015b8:	403a      	ands	r2, r7
 80015ba:	020b      	lsls	r3, r1, #8
 80015bc:	d400      	bmi.n	80015c0 <__aeabi_dadd+0x524>
 80015be:	e6d5      	b.n	800136c <__aeabi_dadd+0x2d0>
 80015c0:	4b43      	ldr	r3, [pc, #268]	; (80016d0 <__aeabi_dadd+0x634>)
 80015c2:	3501      	adds	r5, #1
 80015c4:	4019      	ands	r1, r3
 80015c6:	e5c9      	b.n	800115c <__aeabi_dadd+0xc0>
 80015c8:	0038      	movs	r0, r7
 80015ca:	e669      	b.n	80012a0 <__aeabi_dadd+0x204>
 80015cc:	001e      	movs	r6, r3
 80015ce:	4647      	mov	r7, r8
 80015d0:	3e20      	subs	r6, #32
 80015d2:	40f7      	lsrs	r7, r6
 80015d4:	46bc      	mov	ip, r7
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	d004      	beq.n	80015e4 <__aeabi_dadd+0x548>
 80015da:	2640      	movs	r6, #64	; 0x40
 80015dc:	1af3      	subs	r3, r6, r3
 80015de:	4646      	mov	r6, r8
 80015e0:	409e      	lsls	r6, r3
 80015e2:	4332      	orrs	r2, r6
 80015e4:	0017      	movs	r7, r2
 80015e6:	4663      	mov	r3, ip
 80015e8:	1e7a      	subs	r2, r7, #1
 80015ea:	4197      	sbcs	r7, r2
 80015ec:	431f      	orrs	r7, r3
 80015ee:	e602      	b.n	80011f6 <__aeabi_dadd+0x15a>
 80015f0:	4d36      	ldr	r5, [pc, #216]	; (80016cc <__aeabi_dadd+0x630>)
 80015f2:	42ae      	cmp	r6, r5
 80015f4:	d0ca      	beq.n	800158c <__aeabi_dadd+0x4f0>
 80015f6:	2580      	movs	r5, #128	; 0x80
 80015f8:	042d      	lsls	r5, r5, #16
 80015fa:	425b      	negs	r3, r3
 80015fc:	4329      	orrs	r1, r5
 80015fe:	e7a6      	b.n	800154e <__aeabi_dadd+0x4b2>
 8001600:	4308      	orrs	r0, r1
 8001602:	1e41      	subs	r1, r0, #1
 8001604:	4188      	sbcs	r0, r1
 8001606:	e6a6      	b.n	8001356 <__aeabi_dadd+0x2ba>
 8001608:	2b00      	cmp	r3, #0
 800160a:	d100      	bne.n	800160e <__aeabi_dadd+0x572>
 800160c:	e648      	b.n	80012a0 <__aeabi_dadd+0x204>
 800160e:	1a87      	subs	r7, r0, r2
 8001610:	4643      	mov	r3, r8
 8001612:	42b8      	cmp	r0, r7
 8001614:	41b6      	sbcs	r6, r6
 8001616:	1acb      	subs	r3, r1, r3
 8001618:	4276      	negs	r6, r6
 800161a:	1b9e      	subs	r6, r3, r6
 800161c:	0233      	lsls	r3, r6, #8
 800161e:	d54b      	bpl.n	80016b8 <__aeabi_dadd+0x61c>
 8001620:	1a17      	subs	r7, r2, r0
 8001622:	4643      	mov	r3, r8
 8001624:	42ba      	cmp	r2, r7
 8001626:	4192      	sbcs	r2, r2
 8001628:	1a59      	subs	r1, r3, r1
 800162a:	4252      	negs	r2, r2
 800162c:	1a89      	subs	r1, r1, r2
 800162e:	2207      	movs	r2, #7
 8001630:	4664      	mov	r4, ip
 8001632:	403a      	ands	r2, r7
 8001634:	e592      	b.n	800115c <__aeabi_dadd+0xc0>
 8001636:	4301      	orrs	r1, r0
 8001638:	000f      	movs	r7, r1
 800163a:	1e79      	subs	r1, r7, #1
 800163c:	418f      	sbcs	r7, r1
 800163e:	e79d      	b.n	800157c <__aeabi_dadd+0x4e0>
 8001640:	001c      	movs	r4, r3
 8001642:	000f      	movs	r7, r1
 8001644:	3c20      	subs	r4, #32
 8001646:	40e7      	lsrs	r7, r4
 8001648:	2b20      	cmp	r3, #32
 800164a:	d003      	beq.n	8001654 <__aeabi_dadd+0x5b8>
 800164c:	2440      	movs	r4, #64	; 0x40
 800164e:	1ae3      	subs	r3, r4, r3
 8001650:	4099      	lsls	r1, r3
 8001652:	4308      	orrs	r0, r1
 8001654:	1e41      	subs	r1, r0, #1
 8001656:	4188      	sbcs	r0, r1
 8001658:	4338      	orrs	r0, r7
 800165a:	e67c      	b.n	8001356 <__aeabi_dadd+0x2ba>
 800165c:	2200      	movs	r2, #0
 800165e:	2400      	movs	r4, #0
 8001660:	e625      	b.n	80012ae <__aeabi_dadd+0x212>
 8001662:	1a17      	subs	r7, r2, r0
 8001664:	4643      	mov	r3, r8
 8001666:	42ba      	cmp	r2, r7
 8001668:	4192      	sbcs	r2, r2
 800166a:	1a59      	subs	r1, r3, r1
 800166c:	4252      	negs	r2, r2
 800166e:	1a89      	subs	r1, r1, r2
 8001670:	4664      	mov	r4, ip
 8001672:	0035      	movs	r5, r6
 8001674:	e543      	b.n	80010fe <__aeabi_dadd+0x62>
 8001676:	4641      	mov	r1, r8
 8001678:	0010      	movs	r0, r2
 800167a:	4d14      	ldr	r5, [pc, #80]	; (80016cc <__aeabi_dadd+0x630>)
 800167c:	e610      	b.n	80012a0 <__aeabi_dadd+0x204>
 800167e:	2280      	movs	r2, #128	; 0x80
 8001680:	2400      	movs	r4, #0
 8001682:	0312      	lsls	r2, r2, #12
 8001684:	e680      	b.n	8001388 <__aeabi_dadd+0x2ec>
 8001686:	001d      	movs	r5, r3
 8001688:	000f      	movs	r7, r1
 800168a:	3d20      	subs	r5, #32
 800168c:	40ef      	lsrs	r7, r5
 800168e:	46bc      	mov	ip, r7
 8001690:	2b20      	cmp	r3, #32
 8001692:	d003      	beq.n	800169c <__aeabi_dadd+0x600>
 8001694:	2540      	movs	r5, #64	; 0x40
 8001696:	1aeb      	subs	r3, r5, r3
 8001698:	4099      	lsls	r1, r3
 800169a:	4308      	orrs	r0, r1
 800169c:	0007      	movs	r7, r0
 800169e:	4663      	mov	r3, ip
 80016a0:	1e78      	subs	r0, r7, #1
 80016a2:	4187      	sbcs	r7, r0
 80016a4:	431f      	orrs	r7, r3
 80016a6:	e769      	b.n	800157c <__aeabi_dadd+0x4e0>
 80016a8:	1887      	adds	r7, r0, r2
 80016aa:	4297      	cmp	r7, r2
 80016ac:	419b      	sbcs	r3, r3
 80016ae:	4441      	add	r1, r8
 80016b0:	425b      	negs	r3, r3
 80016b2:	18c9      	adds	r1, r1, r3
 80016b4:	0035      	movs	r5, r6
 80016b6:	e5a3      	b.n	8001200 <__aeabi_dadd+0x164>
 80016b8:	003b      	movs	r3, r7
 80016ba:	4333      	orrs	r3, r6
 80016bc:	d0ce      	beq.n	800165c <__aeabi_dadd+0x5c0>
 80016be:	2207      	movs	r2, #7
 80016c0:	0031      	movs	r1, r6
 80016c2:	403a      	ands	r2, r7
 80016c4:	e652      	b.n	800136c <__aeabi_dadd+0x2d0>
 80016c6:	2300      	movs	r3, #0
 80016c8:	001a      	movs	r2, r3
 80016ca:	e5f4      	b.n	80012b6 <__aeabi_dadd+0x21a>
 80016cc:	000007ff 	.word	0x000007ff
 80016d0:	ff7fffff 	.word	0xff7fffff

080016d4 <__aeabi_ddiv>:
 80016d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d6:	4657      	mov	r7, sl
 80016d8:	46de      	mov	lr, fp
 80016da:	464e      	mov	r6, r9
 80016dc:	4645      	mov	r5, r8
 80016de:	b5e0      	push	{r5, r6, r7, lr}
 80016e0:	4683      	mov	fp, r0
 80016e2:	0007      	movs	r7, r0
 80016e4:	030e      	lsls	r6, r1, #12
 80016e6:	0048      	lsls	r0, r1, #1
 80016e8:	b085      	sub	sp, #20
 80016ea:	4692      	mov	sl, r2
 80016ec:	001c      	movs	r4, r3
 80016ee:	0b36      	lsrs	r6, r6, #12
 80016f0:	0d40      	lsrs	r0, r0, #21
 80016f2:	0fcd      	lsrs	r5, r1, #31
 80016f4:	2800      	cmp	r0, #0
 80016f6:	d100      	bne.n	80016fa <__aeabi_ddiv+0x26>
 80016f8:	e09d      	b.n	8001836 <__aeabi_ddiv+0x162>
 80016fa:	4b95      	ldr	r3, [pc, #596]	; (8001950 <__aeabi_ddiv+0x27c>)
 80016fc:	4298      	cmp	r0, r3
 80016fe:	d039      	beq.n	8001774 <__aeabi_ddiv+0xa0>
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	00f6      	lsls	r6, r6, #3
 8001704:	041b      	lsls	r3, r3, #16
 8001706:	431e      	orrs	r6, r3
 8001708:	4a92      	ldr	r2, [pc, #584]	; (8001954 <__aeabi_ddiv+0x280>)
 800170a:	0f7b      	lsrs	r3, r7, #29
 800170c:	4333      	orrs	r3, r6
 800170e:	4699      	mov	r9, r3
 8001710:	4694      	mov	ip, r2
 8001712:	0003      	movs	r3, r0
 8001714:	4463      	add	r3, ip
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2300      	movs	r3, #0
 800171a:	2600      	movs	r6, #0
 800171c:	00ff      	lsls	r7, r7, #3
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	0323      	lsls	r3, r4, #12
 8001722:	0b1b      	lsrs	r3, r3, #12
 8001724:	4698      	mov	r8, r3
 8001726:	0063      	lsls	r3, r4, #1
 8001728:	0fe4      	lsrs	r4, r4, #31
 800172a:	4652      	mov	r2, sl
 800172c:	0d5b      	lsrs	r3, r3, #21
 800172e:	9401      	str	r4, [sp, #4]
 8001730:	d100      	bne.n	8001734 <__aeabi_ddiv+0x60>
 8001732:	e0b3      	b.n	800189c <__aeabi_ddiv+0x1c8>
 8001734:	4986      	ldr	r1, [pc, #536]	; (8001950 <__aeabi_ddiv+0x27c>)
 8001736:	428b      	cmp	r3, r1
 8001738:	d100      	bne.n	800173c <__aeabi_ddiv+0x68>
 800173a:	e09e      	b.n	800187a <__aeabi_ddiv+0x1a6>
 800173c:	4642      	mov	r2, r8
 800173e:	00d1      	lsls	r1, r2, #3
 8001740:	2280      	movs	r2, #128	; 0x80
 8001742:	0412      	lsls	r2, r2, #16
 8001744:	430a      	orrs	r2, r1
 8001746:	4651      	mov	r1, sl
 8001748:	0f49      	lsrs	r1, r1, #29
 800174a:	4311      	orrs	r1, r2
 800174c:	468b      	mov	fp, r1
 800174e:	4981      	ldr	r1, [pc, #516]	; (8001954 <__aeabi_ddiv+0x280>)
 8001750:	4652      	mov	r2, sl
 8001752:	468c      	mov	ip, r1
 8001754:	9900      	ldr	r1, [sp, #0]
 8001756:	4463      	add	r3, ip
 8001758:	1acb      	subs	r3, r1, r3
 800175a:	2100      	movs	r1, #0
 800175c:	00d2      	lsls	r2, r2, #3
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	002b      	movs	r3, r5
 8001762:	4063      	eors	r3, r4
 8001764:	469a      	mov	sl, r3
 8001766:	2e0f      	cmp	r6, #15
 8001768:	d900      	bls.n	800176c <__aeabi_ddiv+0x98>
 800176a:	e105      	b.n	8001978 <__aeabi_ddiv+0x2a4>
 800176c:	4b7a      	ldr	r3, [pc, #488]	; (8001958 <__aeabi_ddiv+0x284>)
 800176e:	00b6      	lsls	r6, r6, #2
 8001770:	599b      	ldr	r3, [r3, r6]
 8001772:	469f      	mov	pc, r3
 8001774:	465b      	mov	r3, fp
 8001776:	4333      	orrs	r3, r6
 8001778:	4699      	mov	r9, r3
 800177a:	d000      	beq.n	800177e <__aeabi_ddiv+0xaa>
 800177c:	e0b8      	b.n	80018f0 <__aeabi_ddiv+0x21c>
 800177e:	2302      	movs	r3, #2
 8001780:	2608      	movs	r6, #8
 8001782:	2700      	movs	r7, #0
 8001784:	9000      	str	r0, [sp, #0]
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	e7ca      	b.n	8001720 <__aeabi_ddiv+0x4c>
 800178a:	46cb      	mov	fp, r9
 800178c:	003a      	movs	r2, r7
 800178e:	9902      	ldr	r1, [sp, #8]
 8001790:	9501      	str	r5, [sp, #4]
 8001792:	9b01      	ldr	r3, [sp, #4]
 8001794:	469a      	mov	sl, r3
 8001796:	2902      	cmp	r1, #2
 8001798:	d027      	beq.n	80017ea <__aeabi_ddiv+0x116>
 800179a:	2903      	cmp	r1, #3
 800179c:	d100      	bne.n	80017a0 <__aeabi_ddiv+0xcc>
 800179e:	e280      	b.n	8001ca2 <__aeabi_ddiv+0x5ce>
 80017a0:	2901      	cmp	r1, #1
 80017a2:	d044      	beq.n	800182e <__aeabi_ddiv+0x15a>
 80017a4:	496d      	ldr	r1, [pc, #436]	; (800195c <__aeabi_ddiv+0x288>)
 80017a6:	9b00      	ldr	r3, [sp, #0]
 80017a8:	468c      	mov	ip, r1
 80017aa:	4463      	add	r3, ip
 80017ac:	001c      	movs	r4, r3
 80017ae:	2c00      	cmp	r4, #0
 80017b0:	dd38      	ble.n	8001824 <__aeabi_ddiv+0x150>
 80017b2:	0753      	lsls	r3, r2, #29
 80017b4:	d000      	beq.n	80017b8 <__aeabi_ddiv+0xe4>
 80017b6:	e213      	b.n	8001be0 <__aeabi_ddiv+0x50c>
 80017b8:	08d2      	lsrs	r2, r2, #3
 80017ba:	465b      	mov	r3, fp
 80017bc:	01db      	lsls	r3, r3, #7
 80017be:	d509      	bpl.n	80017d4 <__aeabi_ddiv+0x100>
 80017c0:	4659      	mov	r1, fp
 80017c2:	4b67      	ldr	r3, [pc, #412]	; (8001960 <__aeabi_ddiv+0x28c>)
 80017c4:	4019      	ands	r1, r3
 80017c6:	468b      	mov	fp, r1
 80017c8:	2180      	movs	r1, #128	; 0x80
 80017ca:	00c9      	lsls	r1, r1, #3
 80017cc:	468c      	mov	ip, r1
 80017ce:	9b00      	ldr	r3, [sp, #0]
 80017d0:	4463      	add	r3, ip
 80017d2:	001c      	movs	r4, r3
 80017d4:	4b63      	ldr	r3, [pc, #396]	; (8001964 <__aeabi_ddiv+0x290>)
 80017d6:	429c      	cmp	r4, r3
 80017d8:	dc07      	bgt.n	80017ea <__aeabi_ddiv+0x116>
 80017da:	465b      	mov	r3, fp
 80017dc:	0564      	lsls	r4, r4, #21
 80017de:	075f      	lsls	r7, r3, #29
 80017e0:	025b      	lsls	r3, r3, #9
 80017e2:	4317      	orrs	r7, r2
 80017e4:	0b1b      	lsrs	r3, r3, #12
 80017e6:	0d62      	lsrs	r2, r4, #21
 80017e8:	e002      	b.n	80017f0 <__aeabi_ddiv+0x11c>
 80017ea:	2300      	movs	r3, #0
 80017ec:	2700      	movs	r7, #0
 80017ee:	4a58      	ldr	r2, [pc, #352]	; (8001950 <__aeabi_ddiv+0x27c>)
 80017f0:	2100      	movs	r1, #0
 80017f2:	031b      	lsls	r3, r3, #12
 80017f4:	0b1c      	lsrs	r4, r3, #12
 80017f6:	0d0b      	lsrs	r3, r1, #20
 80017f8:	051b      	lsls	r3, r3, #20
 80017fa:	4323      	orrs	r3, r4
 80017fc:	0514      	lsls	r4, r2, #20
 80017fe:	4a5a      	ldr	r2, [pc, #360]	; (8001968 <__aeabi_ddiv+0x294>)
 8001800:	0038      	movs	r0, r7
 8001802:	4013      	ands	r3, r2
 8001804:	431c      	orrs	r4, r3
 8001806:	4653      	mov	r3, sl
 8001808:	0064      	lsls	r4, r4, #1
 800180a:	07db      	lsls	r3, r3, #31
 800180c:	0864      	lsrs	r4, r4, #1
 800180e:	431c      	orrs	r4, r3
 8001810:	0021      	movs	r1, r4
 8001812:	b005      	add	sp, #20
 8001814:	bc3c      	pop	{r2, r3, r4, r5}
 8001816:	4690      	mov	r8, r2
 8001818:	4699      	mov	r9, r3
 800181a:	46a2      	mov	sl, r4
 800181c:	46ab      	mov	fp, r5
 800181e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001820:	2201      	movs	r2, #1
 8001822:	4252      	negs	r2, r2
 8001824:	2301      	movs	r3, #1
 8001826:	1b1b      	subs	r3, r3, r4
 8001828:	2b38      	cmp	r3, #56	; 0x38
 800182a:	dc00      	bgt.n	800182e <__aeabi_ddiv+0x15a>
 800182c:	e1ad      	b.n	8001b8a <__aeabi_ddiv+0x4b6>
 800182e:	2200      	movs	r2, #0
 8001830:	2300      	movs	r3, #0
 8001832:	2700      	movs	r7, #0
 8001834:	e7dc      	b.n	80017f0 <__aeabi_ddiv+0x11c>
 8001836:	465b      	mov	r3, fp
 8001838:	4333      	orrs	r3, r6
 800183a:	4699      	mov	r9, r3
 800183c:	d05e      	beq.n	80018fc <__aeabi_ddiv+0x228>
 800183e:	2e00      	cmp	r6, #0
 8001840:	d100      	bne.n	8001844 <__aeabi_ddiv+0x170>
 8001842:	e18a      	b.n	8001b5a <__aeabi_ddiv+0x486>
 8001844:	0030      	movs	r0, r6
 8001846:	f001 fa6b 	bl	8002d20 <__clzsi2>
 800184a:	0003      	movs	r3, r0
 800184c:	3b0b      	subs	r3, #11
 800184e:	2b1c      	cmp	r3, #28
 8001850:	dd00      	ble.n	8001854 <__aeabi_ddiv+0x180>
 8001852:	e17b      	b.n	8001b4c <__aeabi_ddiv+0x478>
 8001854:	221d      	movs	r2, #29
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	465a      	mov	r2, fp
 800185a:	0001      	movs	r1, r0
 800185c:	40da      	lsrs	r2, r3
 800185e:	3908      	subs	r1, #8
 8001860:	408e      	lsls	r6, r1
 8001862:	0013      	movs	r3, r2
 8001864:	465f      	mov	r7, fp
 8001866:	4333      	orrs	r3, r6
 8001868:	4699      	mov	r9, r3
 800186a:	408f      	lsls	r7, r1
 800186c:	4b3f      	ldr	r3, [pc, #252]	; (800196c <__aeabi_ddiv+0x298>)
 800186e:	2600      	movs	r6, #0
 8001870:	1a1b      	subs	r3, r3, r0
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2300      	movs	r3, #0
 8001876:	9302      	str	r3, [sp, #8]
 8001878:	e752      	b.n	8001720 <__aeabi_ddiv+0x4c>
 800187a:	4641      	mov	r1, r8
 800187c:	4653      	mov	r3, sl
 800187e:	430b      	orrs	r3, r1
 8001880:	493b      	ldr	r1, [pc, #236]	; (8001970 <__aeabi_ddiv+0x29c>)
 8001882:	469b      	mov	fp, r3
 8001884:	468c      	mov	ip, r1
 8001886:	9b00      	ldr	r3, [sp, #0]
 8001888:	4463      	add	r3, ip
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	465b      	mov	r3, fp
 800188e:	2b00      	cmp	r3, #0
 8001890:	d13b      	bne.n	800190a <__aeabi_ddiv+0x236>
 8001892:	2302      	movs	r3, #2
 8001894:	2200      	movs	r2, #0
 8001896:	431e      	orrs	r6, r3
 8001898:	2102      	movs	r1, #2
 800189a:	e761      	b.n	8001760 <__aeabi_ddiv+0x8c>
 800189c:	4643      	mov	r3, r8
 800189e:	4313      	orrs	r3, r2
 80018a0:	469b      	mov	fp, r3
 80018a2:	d037      	beq.n	8001914 <__aeabi_ddiv+0x240>
 80018a4:	4643      	mov	r3, r8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d100      	bne.n	80018ac <__aeabi_ddiv+0x1d8>
 80018aa:	e162      	b.n	8001b72 <__aeabi_ddiv+0x49e>
 80018ac:	4640      	mov	r0, r8
 80018ae:	f001 fa37 	bl	8002d20 <__clzsi2>
 80018b2:	0003      	movs	r3, r0
 80018b4:	3b0b      	subs	r3, #11
 80018b6:	2b1c      	cmp	r3, #28
 80018b8:	dd00      	ble.n	80018bc <__aeabi_ddiv+0x1e8>
 80018ba:	e153      	b.n	8001b64 <__aeabi_ddiv+0x490>
 80018bc:	0002      	movs	r2, r0
 80018be:	4641      	mov	r1, r8
 80018c0:	3a08      	subs	r2, #8
 80018c2:	4091      	lsls	r1, r2
 80018c4:	4688      	mov	r8, r1
 80018c6:	211d      	movs	r1, #29
 80018c8:	1acb      	subs	r3, r1, r3
 80018ca:	4651      	mov	r1, sl
 80018cc:	40d9      	lsrs	r1, r3
 80018ce:	000b      	movs	r3, r1
 80018d0:	4641      	mov	r1, r8
 80018d2:	430b      	orrs	r3, r1
 80018d4:	469b      	mov	fp, r3
 80018d6:	4653      	mov	r3, sl
 80018d8:	4093      	lsls	r3, r2
 80018da:	001a      	movs	r2, r3
 80018dc:	9b00      	ldr	r3, [sp, #0]
 80018de:	4925      	ldr	r1, [pc, #148]	; (8001974 <__aeabi_ddiv+0x2a0>)
 80018e0:	469c      	mov	ip, r3
 80018e2:	4460      	add	r0, ip
 80018e4:	0003      	movs	r3, r0
 80018e6:	468c      	mov	ip, r1
 80018e8:	4463      	add	r3, ip
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2100      	movs	r1, #0
 80018ee:	e737      	b.n	8001760 <__aeabi_ddiv+0x8c>
 80018f0:	2303      	movs	r3, #3
 80018f2:	46b1      	mov	r9, r6
 80018f4:	9000      	str	r0, [sp, #0]
 80018f6:	260c      	movs	r6, #12
 80018f8:	9302      	str	r3, [sp, #8]
 80018fa:	e711      	b.n	8001720 <__aeabi_ddiv+0x4c>
 80018fc:	2300      	movs	r3, #0
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	2604      	movs	r6, #4
 8001904:	2700      	movs	r7, #0
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	e70a      	b.n	8001720 <__aeabi_ddiv+0x4c>
 800190a:	2303      	movs	r3, #3
 800190c:	46c3      	mov	fp, r8
 800190e:	431e      	orrs	r6, r3
 8001910:	2103      	movs	r1, #3
 8001912:	e725      	b.n	8001760 <__aeabi_ddiv+0x8c>
 8001914:	3301      	adds	r3, #1
 8001916:	431e      	orrs	r6, r3
 8001918:	2200      	movs	r2, #0
 800191a:	2101      	movs	r1, #1
 800191c:	e720      	b.n	8001760 <__aeabi_ddiv+0x8c>
 800191e:	2300      	movs	r3, #0
 8001920:	469a      	mov	sl, r3
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	2700      	movs	r7, #0
 8001926:	031b      	lsls	r3, r3, #12
 8001928:	4a09      	ldr	r2, [pc, #36]	; (8001950 <__aeabi_ddiv+0x27c>)
 800192a:	e761      	b.n	80017f0 <__aeabi_ddiv+0x11c>
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	4649      	mov	r1, r9
 8001930:	031b      	lsls	r3, r3, #12
 8001932:	4219      	tst	r1, r3
 8001934:	d100      	bne.n	8001938 <__aeabi_ddiv+0x264>
 8001936:	e0e2      	b.n	8001afe <__aeabi_ddiv+0x42a>
 8001938:	4659      	mov	r1, fp
 800193a:	4219      	tst	r1, r3
 800193c:	d000      	beq.n	8001940 <__aeabi_ddiv+0x26c>
 800193e:	e0de      	b.n	8001afe <__aeabi_ddiv+0x42a>
 8001940:	430b      	orrs	r3, r1
 8001942:	031b      	lsls	r3, r3, #12
 8001944:	0017      	movs	r7, r2
 8001946:	0b1b      	lsrs	r3, r3, #12
 8001948:	46a2      	mov	sl, r4
 800194a:	4a01      	ldr	r2, [pc, #4]	; (8001950 <__aeabi_ddiv+0x27c>)
 800194c:	e750      	b.n	80017f0 <__aeabi_ddiv+0x11c>
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	000007ff 	.word	0x000007ff
 8001954:	fffffc01 	.word	0xfffffc01
 8001958:	08008ea4 	.word	0x08008ea4
 800195c:	000003ff 	.word	0x000003ff
 8001960:	feffffff 	.word	0xfeffffff
 8001964:	000007fe 	.word	0x000007fe
 8001968:	800fffff 	.word	0x800fffff
 800196c:	fffffc0d 	.word	0xfffffc0d
 8001970:	fffff801 	.word	0xfffff801
 8001974:	000003f3 	.word	0x000003f3
 8001978:	45d9      	cmp	r9, fp
 800197a:	d900      	bls.n	800197e <__aeabi_ddiv+0x2aa>
 800197c:	e0cb      	b.n	8001b16 <__aeabi_ddiv+0x442>
 800197e:	d100      	bne.n	8001982 <__aeabi_ddiv+0x2ae>
 8001980:	e0c6      	b.n	8001b10 <__aeabi_ddiv+0x43c>
 8001982:	003c      	movs	r4, r7
 8001984:	4648      	mov	r0, r9
 8001986:	2700      	movs	r7, #0
 8001988:	9b00      	ldr	r3, [sp, #0]
 800198a:	3b01      	subs	r3, #1
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	465b      	mov	r3, fp
 8001990:	0e16      	lsrs	r6, r2, #24
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	431e      	orrs	r6, r3
 8001996:	0213      	lsls	r3, r2, #8
 8001998:	4698      	mov	r8, r3
 800199a:	0433      	lsls	r3, r6, #16
 800199c:	0c1b      	lsrs	r3, r3, #16
 800199e:	4699      	mov	r9, r3
 80019a0:	0c31      	lsrs	r1, r6, #16
 80019a2:	9101      	str	r1, [sp, #4]
 80019a4:	f7fe fc40 	bl	8000228 <__aeabi_uidivmod>
 80019a8:	464a      	mov	r2, r9
 80019aa:	4342      	muls	r2, r0
 80019ac:	040b      	lsls	r3, r1, #16
 80019ae:	0c21      	lsrs	r1, r4, #16
 80019b0:	0005      	movs	r5, r0
 80019b2:	4319      	orrs	r1, r3
 80019b4:	428a      	cmp	r2, r1
 80019b6:	d907      	bls.n	80019c8 <__aeabi_ddiv+0x2f4>
 80019b8:	1989      	adds	r1, r1, r6
 80019ba:	3d01      	subs	r5, #1
 80019bc:	428e      	cmp	r6, r1
 80019be:	d803      	bhi.n	80019c8 <__aeabi_ddiv+0x2f4>
 80019c0:	428a      	cmp	r2, r1
 80019c2:	d901      	bls.n	80019c8 <__aeabi_ddiv+0x2f4>
 80019c4:	1e85      	subs	r5, r0, #2
 80019c6:	1989      	adds	r1, r1, r6
 80019c8:	1a88      	subs	r0, r1, r2
 80019ca:	9901      	ldr	r1, [sp, #4]
 80019cc:	f7fe fc2c 	bl	8000228 <__aeabi_uidivmod>
 80019d0:	0409      	lsls	r1, r1, #16
 80019d2:	468c      	mov	ip, r1
 80019d4:	464a      	mov	r2, r9
 80019d6:	0421      	lsls	r1, r4, #16
 80019d8:	4664      	mov	r4, ip
 80019da:	4342      	muls	r2, r0
 80019dc:	0c09      	lsrs	r1, r1, #16
 80019de:	0003      	movs	r3, r0
 80019e0:	4321      	orrs	r1, r4
 80019e2:	428a      	cmp	r2, r1
 80019e4:	d904      	bls.n	80019f0 <__aeabi_ddiv+0x31c>
 80019e6:	1989      	adds	r1, r1, r6
 80019e8:	3b01      	subs	r3, #1
 80019ea:	428e      	cmp	r6, r1
 80019ec:	d800      	bhi.n	80019f0 <__aeabi_ddiv+0x31c>
 80019ee:	e0f1      	b.n	8001bd4 <__aeabi_ddiv+0x500>
 80019f0:	042d      	lsls	r5, r5, #16
 80019f2:	431d      	orrs	r5, r3
 80019f4:	46ab      	mov	fp, r5
 80019f6:	4643      	mov	r3, r8
 80019f8:	1a89      	subs	r1, r1, r2
 80019fa:	4642      	mov	r2, r8
 80019fc:	0c28      	lsrs	r0, r5, #16
 80019fe:	0412      	lsls	r2, r2, #16
 8001a00:	0c1d      	lsrs	r5, r3, #16
 8001a02:	465b      	mov	r3, fp
 8001a04:	0c14      	lsrs	r4, r2, #16
 8001a06:	0022      	movs	r2, r4
 8001a08:	041b      	lsls	r3, r3, #16
 8001a0a:	0c1b      	lsrs	r3, r3, #16
 8001a0c:	435a      	muls	r2, r3
 8001a0e:	9403      	str	r4, [sp, #12]
 8001a10:	436b      	muls	r3, r5
 8001a12:	4344      	muls	r4, r0
 8001a14:	9502      	str	r5, [sp, #8]
 8001a16:	4368      	muls	r0, r5
 8001a18:	191b      	adds	r3, r3, r4
 8001a1a:	0c15      	lsrs	r5, r2, #16
 8001a1c:	18eb      	adds	r3, r5, r3
 8001a1e:	429c      	cmp	r4, r3
 8001a20:	d903      	bls.n	8001a2a <__aeabi_ddiv+0x356>
 8001a22:	2480      	movs	r4, #128	; 0x80
 8001a24:	0264      	lsls	r4, r4, #9
 8001a26:	46a4      	mov	ip, r4
 8001a28:	4460      	add	r0, ip
 8001a2a:	0c1c      	lsrs	r4, r3, #16
 8001a2c:	0415      	lsls	r5, r2, #16
 8001a2e:	041b      	lsls	r3, r3, #16
 8001a30:	0c2d      	lsrs	r5, r5, #16
 8001a32:	1820      	adds	r0, r4, r0
 8001a34:	195d      	adds	r5, r3, r5
 8001a36:	4281      	cmp	r1, r0
 8001a38:	d377      	bcc.n	8001b2a <__aeabi_ddiv+0x456>
 8001a3a:	d073      	beq.n	8001b24 <__aeabi_ddiv+0x450>
 8001a3c:	1a0c      	subs	r4, r1, r0
 8001a3e:	4aa2      	ldr	r2, [pc, #648]	; (8001cc8 <__aeabi_ddiv+0x5f4>)
 8001a40:	1b7d      	subs	r5, r7, r5
 8001a42:	42af      	cmp	r7, r5
 8001a44:	41bf      	sbcs	r7, r7
 8001a46:	4694      	mov	ip, r2
 8001a48:	9b00      	ldr	r3, [sp, #0]
 8001a4a:	427f      	negs	r7, r7
 8001a4c:	4463      	add	r3, ip
 8001a4e:	1be0      	subs	r0, r4, r7
 8001a50:	001c      	movs	r4, r3
 8001a52:	4286      	cmp	r6, r0
 8001a54:	d100      	bne.n	8001a58 <__aeabi_ddiv+0x384>
 8001a56:	e0db      	b.n	8001c10 <__aeabi_ddiv+0x53c>
 8001a58:	9901      	ldr	r1, [sp, #4]
 8001a5a:	f7fe fbe5 	bl	8000228 <__aeabi_uidivmod>
 8001a5e:	464a      	mov	r2, r9
 8001a60:	4342      	muls	r2, r0
 8001a62:	040b      	lsls	r3, r1, #16
 8001a64:	0c29      	lsrs	r1, r5, #16
 8001a66:	0007      	movs	r7, r0
 8001a68:	4319      	orrs	r1, r3
 8001a6a:	428a      	cmp	r2, r1
 8001a6c:	d907      	bls.n	8001a7e <__aeabi_ddiv+0x3aa>
 8001a6e:	1989      	adds	r1, r1, r6
 8001a70:	3f01      	subs	r7, #1
 8001a72:	428e      	cmp	r6, r1
 8001a74:	d803      	bhi.n	8001a7e <__aeabi_ddiv+0x3aa>
 8001a76:	428a      	cmp	r2, r1
 8001a78:	d901      	bls.n	8001a7e <__aeabi_ddiv+0x3aa>
 8001a7a:	1e87      	subs	r7, r0, #2
 8001a7c:	1989      	adds	r1, r1, r6
 8001a7e:	1a88      	subs	r0, r1, r2
 8001a80:	9901      	ldr	r1, [sp, #4]
 8001a82:	f7fe fbd1 	bl	8000228 <__aeabi_uidivmod>
 8001a86:	0409      	lsls	r1, r1, #16
 8001a88:	464a      	mov	r2, r9
 8001a8a:	4689      	mov	r9, r1
 8001a8c:	0429      	lsls	r1, r5, #16
 8001a8e:	464d      	mov	r5, r9
 8001a90:	4342      	muls	r2, r0
 8001a92:	0c09      	lsrs	r1, r1, #16
 8001a94:	0003      	movs	r3, r0
 8001a96:	4329      	orrs	r1, r5
 8001a98:	428a      	cmp	r2, r1
 8001a9a:	d907      	bls.n	8001aac <__aeabi_ddiv+0x3d8>
 8001a9c:	1989      	adds	r1, r1, r6
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	428e      	cmp	r6, r1
 8001aa2:	d803      	bhi.n	8001aac <__aeabi_ddiv+0x3d8>
 8001aa4:	428a      	cmp	r2, r1
 8001aa6:	d901      	bls.n	8001aac <__aeabi_ddiv+0x3d8>
 8001aa8:	1e83      	subs	r3, r0, #2
 8001aaa:	1989      	adds	r1, r1, r6
 8001aac:	043f      	lsls	r7, r7, #16
 8001aae:	1a89      	subs	r1, r1, r2
 8001ab0:	003a      	movs	r2, r7
 8001ab2:	9f03      	ldr	r7, [sp, #12]
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	0038      	movs	r0, r7
 8001ab8:	0413      	lsls	r3, r2, #16
 8001aba:	0c1b      	lsrs	r3, r3, #16
 8001abc:	4358      	muls	r0, r3
 8001abe:	4681      	mov	r9, r0
 8001ac0:	9802      	ldr	r0, [sp, #8]
 8001ac2:	0c15      	lsrs	r5, r2, #16
 8001ac4:	436f      	muls	r7, r5
 8001ac6:	4343      	muls	r3, r0
 8001ac8:	4345      	muls	r5, r0
 8001aca:	4648      	mov	r0, r9
 8001acc:	0c00      	lsrs	r0, r0, #16
 8001ace:	4684      	mov	ip, r0
 8001ad0:	19db      	adds	r3, r3, r7
 8001ad2:	4463      	add	r3, ip
 8001ad4:	429f      	cmp	r7, r3
 8001ad6:	d903      	bls.n	8001ae0 <__aeabi_ddiv+0x40c>
 8001ad8:	2080      	movs	r0, #128	; 0x80
 8001ada:	0240      	lsls	r0, r0, #9
 8001adc:	4684      	mov	ip, r0
 8001ade:	4465      	add	r5, ip
 8001ae0:	4648      	mov	r0, r9
 8001ae2:	0c1f      	lsrs	r7, r3, #16
 8001ae4:	0400      	lsls	r0, r0, #16
 8001ae6:	041b      	lsls	r3, r3, #16
 8001ae8:	0c00      	lsrs	r0, r0, #16
 8001aea:	197d      	adds	r5, r7, r5
 8001aec:	1818      	adds	r0, r3, r0
 8001aee:	42a9      	cmp	r1, r5
 8001af0:	d200      	bcs.n	8001af4 <__aeabi_ddiv+0x420>
 8001af2:	e084      	b.n	8001bfe <__aeabi_ddiv+0x52a>
 8001af4:	d100      	bne.n	8001af8 <__aeabi_ddiv+0x424>
 8001af6:	e07f      	b.n	8001bf8 <__aeabi_ddiv+0x524>
 8001af8:	2301      	movs	r3, #1
 8001afa:	431a      	orrs	r2, r3
 8001afc:	e657      	b.n	80017ae <__aeabi_ddiv+0xda>
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	464a      	mov	r2, r9
 8001b02:	031b      	lsls	r3, r3, #12
 8001b04:	4313      	orrs	r3, r2
 8001b06:	031b      	lsls	r3, r3, #12
 8001b08:	0b1b      	lsrs	r3, r3, #12
 8001b0a:	46aa      	mov	sl, r5
 8001b0c:	4a6f      	ldr	r2, [pc, #444]	; (8001ccc <__aeabi_ddiv+0x5f8>)
 8001b0e:	e66f      	b.n	80017f0 <__aeabi_ddiv+0x11c>
 8001b10:	42ba      	cmp	r2, r7
 8001b12:	d900      	bls.n	8001b16 <__aeabi_ddiv+0x442>
 8001b14:	e735      	b.n	8001982 <__aeabi_ddiv+0x2ae>
 8001b16:	464b      	mov	r3, r9
 8001b18:	07dc      	lsls	r4, r3, #31
 8001b1a:	0858      	lsrs	r0, r3, #1
 8001b1c:	087b      	lsrs	r3, r7, #1
 8001b1e:	431c      	orrs	r4, r3
 8001b20:	07ff      	lsls	r7, r7, #31
 8001b22:	e734      	b.n	800198e <__aeabi_ddiv+0x2ba>
 8001b24:	2400      	movs	r4, #0
 8001b26:	42af      	cmp	r7, r5
 8001b28:	d289      	bcs.n	8001a3e <__aeabi_ddiv+0x36a>
 8001b2a:	4447      	add	r7, r8
 8001b2c:	4547      	cmp	r7, r8
 8001b2e:	41a4      	sbcs	r4, r4
 8001b30:	465b      	mov	r3, fp
 8001b32:	4264      	negs	r4, r4
 8001b34:	19a4      	adds	r4, r4, r6
 8001b36:	1864      	adds	r4, r4, r1
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	42a6      	cmp	r6, r4
 8001b3c:	d21e      	bcs.n	8001b7c <__aeabi_ddiv+0x4a8>
 8001b3e:	42a0      	cmp	r0, r4
 8001b40:	d86d      	bhi.n	8001c1e <__aeabi_ddiv+0x54a>
 8001b42:	d100      	bne.n	8001b46 <__aeabi_ddiv+0x472>
 8001b44:	e0b6      	b.n	8001cb4 <__aeabi_ddiv+0x5e0>
 8001b46:	1a24      	subs	r4, r4, r0
 8001b48:	469b      	mov	fp, r3
 8001b4a:	e778      	b.n	8001a3e <__aeabi_ddiv+0x36a>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	465a      	mov	r2, fp
 8001b50:	3b28      	subs	r3, #40	; 0x28
 8001b52:	409a      	lsls	r2, r3
 8001b54:	2700      	movs	r7, #0
 8001b56:	4691      	mov	r9, r2
 8001b58:	e688      	b.n	800186c <__aeabi_ddiv+0x198>
 8001b5a:	4658      	mov	r0, fp
 8001b5c:	f001 f8e0 	bl	8002d20 <__clzsi2>
 8001b60:	3020      	adds	r0, #32
 8001b62:	e672      	b.n	800184a <__aeabi_ddiv+0x176>
 8001b64:	0003      	movs	r3, r0
 8001b66:	4652      	mov	r2, sl
 8001b68:	3b28      	subs	r3, #40	; 0x28
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	4693      	mov	fp, r2
 8001b6e:	2200      	movs	r2, #0
 8001b70:	e6b4      	b.n	80018dc <__aeabi_ddiv+0x208>
 8001b72:	4650      	mov	r0, sl
 8001b74:	f001 f8d4 	bl	8002d20 <__clzsi2>
 8001b78:	3020      	adds	r0, #32
 8001b7a:	e69a      	b.n	80018b2 <__aeabi_ddiv+0x1de>
 8001b7c:	42a6      	cmp	r6, r4
 8001b7e:	d1e2      	bne.n	8001b46 <__aeabi_ddiv+0x472>
 8001b80:	45b8      	cmp	r8, r7
 8001b82:	d9dc      	bls.n	8001b3e <__aeabi_ddiv+0x46a>
 8001b84:	1a34      	subs	r4, r6, r0
 8001b86:	469b      	mov	fp, r3
 8001b88:	e759      	b.n	8001a3e <__aeabi_ddiv+0x36a>
 8001b8a:	2b1f      	cmp	r3, #31
 8001b8c:	dc65      	bgt.n	8001c5a <__aeabi_ddiv+0x586>
 8001b8e:	4c50      	ldr	r4, [pc, #320]	; (8001cd0 <__aeabi_ddiv+0x5fc>)
 8001b90:	9900      	ldr	r1, [sp, #0]
 8001b92:	46a4      	mov	ip, r4
 8001b94:	465c      	mov	r4, fp
 8001b96:	4461      	add	r1, ip
 8001b98:	0008      	movs	r0, r1
 8001b9a:	408c      	lsls	r4, r1
 8001b9c:	0011      	movs	r1, r2
 8001b9e:	4082      	lsls	r2, r0
 8001ba0:	40d9      	lsrs	r1, r3
 8001ba2:	1e50      	subs	r0, r2, #1
 8001ba4:	4182      	sbcs	r2, r0
 8001ba6:	430c      	orrs	r4, r1
 8001ba8:	4314      	orrs	r4, r2
 8001baa:	465a      	mov	r2, fp
 8001bac:	40da      	lsrs	r2, r3
 8001bae:	0013      	movs	r3, r2
 8001bb0:	0762      	lsls	r2, r4, #29
 8001bb2:	d009      	beq.n	8001bc8 <__aeabi_ddiv+0x4f4>
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	4022      	ands	r2, r4
 8001bb8:	2a04      	cmp	r2, #4
 8001bba:	d005      	beq.n	8001bc8 <__aeabi_ddiv+0x4f4>
 8001bbc:	0022      	movs	r2, r4
 8001bbe:	1d14      	adds	r4, r2, #4
 8001bc0:	4294      	cmp	r4, r2
 8001bc2:	4189      	sbcs	r1, r1
 8001bc4:	4249      	negs	r1, r1
 8001bc6:	185b      	adds	r3, r3, r1
 8001bc8:	021a      	lsls	r2, r3, #8
 8001bca:	d562      	bpl.n	8001c92 <__aeabi_ddiv+0x5be>
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2300      	movs	r3, #0
 8001bd0:	2700      	movs	r7, #0
 8001bd2:	e60d      	b.n	80017f0 <__aeabi_ddiv+0x11c>
 8001bd4:	428a      	cmp	r2, r1
 8001bd6:	d800      	bhi.n	8001bda <__aeabi_ddiv+0x506>
 8001bd8:	e70a      	b.n	80019f0 <__aeabi_ddiv+0x31c>
 8001bda:	1e83      	subs	r3, r0, #2
 8001bdc:	1989      	adds	r1, r1, r6
 8001bde:	e707      	b.n	80019f0 <__aeabi_ddiv+0x31c>
 8001be0:	230f      	movs	r3, #15
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d100      	bne.n	8001bea <__aeabi_ddiv+0x516>
 8001be8:	e5e6      	b.n	80017b8 <__aeabi_ddiv+0xe4>
 8001bea:	1d17      	adds	r7, r2, #4
 8001bec:	4297      	cmp	r7, r2
 8001bee:	4192      	sbcs	r2, r2
 8001bf0:	4253      	negs	r3, r2
 8001bf2:	449b      	add	fp, r3
 8001bf4:	08fa      	lsrs	r2, r7, #3
 8001bf6:	e5e0      	b.n	80017ba <__aeabi_ddiv+0xe6>
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_ddiv+0x52a>
 8001bfc:	e5d7      	b.n	80017ae <__aeabi_ddiv+0xda>
 8001bfe:	1871      	adds	r1, r6, r1
 8001c00:	1e53      	subs	r3, r2, #1
 8001c02:	42b1      	cmp	r1, r6
 8001c04:	d327      	bcc.n	8001c56 <__aeabi_ddiv+0x582>
 8001c06:	42a9      	cmp	r1, r5
 8001c08:	d315      	bcc.n	8001c36 <__aeabi_ddiv+0x562>
 8001c0a:	d058      	beq.n	8001cbe <__aeabi_ddiv+0x5ea>
 8001c0c:	001a      	movs	r2, r3
 8001c0e:	e773      	b.n	8001af8 <__aeabi_ddiv+0x424>
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	dc00      	bgt.n	8001c16 <__aeabi_ddiv+0x542>
 8001c14:	e604      	b.n	8001820 <__aeabi_ddiv+0x14c>
 8001c16:	2301      	movs	r3, #1
 8001c18:	2200      	movs	r2, #0
 8001c1a:	449b      	add	fp, r3
 8001c1c:	e5cd      	b.n	80017ba <__aeabi_ddiv+0xe6>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	4447      	add	r7, r8
 8001c22:	4547      	cmp	r7, r8
 8001c24:	4189      	sbcs	r1, r1
 8001c26:	425b      	negs	r3, r3
 8001c28:	469c      	mov	ip, r3
 8001c2a:	4249      	negs	r1, r1
 8001c2c:	1989      	adds	r1, r1, r6
 8001c2e:	190c      	adds	r4, r1, r4
 8001c30:	44e3      	add	fp, ip
 8001c32:	1a24      	subs	r4, r4, r0
 8001c34:	e703      	b.n	8001a3e <__aeabi_ddiv+0x36a>
 8001c36:	4643      	mov	r3, r8
 8001c38:	005f      	lsls	r7, r3, #1
 8001c3a:	4547      	cmp	r7, r8
 8001c3c:	419b      	sbcs	r3, r3
 8001c3e:	46b8      	mov	r8, r7
 8001c40:	425b      	negs	r3, r3
 8001c42:	199e      	adds	r6, r3, r6
 8001c44:	3a02      	subs	r2, #2
 8001c46:	1989      	adds	r1, r1, r6
 8001c48:	42a9      	cmp	r1, r5
 8001c4a:	d000      	beq.n	8001c4e <__aeabi_ddiv+0x57a>
 8001c4c:	e754      	b.n	8001af8 <__aeabi_ddiv+0x424>
 8001c4e:	4540      	cmp	r0, r8
 8001c50:	d000      	beq.n	8001c54 <__aeabi_ddiv+0x580>
 8001c52:	e751      	b.n	8001af8 <__aeabi_ddiv+0x424>
 8001c54:	e5ab      	b.n	80017ae <__aeabi_ddiv+0xda>
 8001c56:	001a      	movs	r2, r3
 8001c58:	e7f6      	b.n	8001c48 <__aeabi_ddiv+0x574>
 8001c5a:	211f      	movs	r1, #31
 8001c5c:	465f      	mov	r7, fp
 8001c5e:	4249      	negs	r1, r1
 8001c60:	1b0c      	subs	r4, r1, r4
 8001c62:	40e7      	lsrs	r7, r4
 8001c64:	2b20      	cmp	r3, #32
 8001c66:	d007      	beq.n	8001c78 <__aeabi_ddiv+0x5a4>
 8001c68:	491a      	ldr	r1, [pc, #104]	; (8001cd4 <__aeabi_ddiv+0x600>)
 8001c6a:	9b00      	ldr	r3, [sp, #0]
 8001c6c:	468c      	mov	ip, r1
 8001c6e:	4463      	add	r3, ip
 8001c70:	0018      	movs	r0, r3
 8001c72:	465b      	mov	r3, fp
 8001c74:	4083      	lsls	r3, r0
 8001c76:	431a      	orrs	r2, r3
 8001c78:	1e50      	subs	r0, r2, #1
 8001c7a:	4182      	sbcs	r2, r0
 8001c7c:	433a      	orrs	r2, r7
 8001c7e:	2707      	movs	r7, #7
 8001c80:	2300      	movs	r3, #0
 8001c82:	4017      	ands	r7, r2
 8001c84:	d009      	beq.n	8001c9a <__aeabi_ddiv+0x5c6>
 8001c86:	210f      	movs	r1, #15
 8001c88:	2300      	movs	r3, #0
 8001c8a:	4011      	ands	r1, r2
 8001c8c:	0014      	movs	r4, r2
 8001c8e:	2904      	cmp	r1, #4
 8001c90:	d195      	bne.n	8001bbe <__aeabi_ddiv+0x4ea>
 8001c92:	0022      	movs	r2, r4
 8001c94:	075f      	lsls	r7, r3, #29
 8001c96:	025b      	lsls	r3, r3, #9
 8001c98:	0b1b      	lsrs	r3, r3, #12
 8001c9a:	08d2      	lsrs	r2, r2, #3
 8001c9c:	4317      	orrs	r7, r2
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	e5a6      	b.n	80017f0 <__aeabi_ddiv+0x11c>
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	4659      	mov	r1, fp
 8001ca6:	031b      	lsls	r3, r3, #12
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	031b      	lsls	r3, r3, #12
 8001cac:	0017      	movs	r7, r2
 8001cae:	0b1b      	lsrs	r3, r3, #12
 8001cb0:	4a06      	ldr	r2, [pc, #24]	; (8001ccc <__aeabi_ddiv+0x5f8>)
 8001cb2:	e59d      	b.n	80017f0 <__aeabi_ddiv+0x11c>
 8001cb4:	42bd      	cmp	r5, r7
 8001cb6:	d8b2      	bhi.n	8001c1e <__aeabi_ddiv+0x54a>
 8001cb8:	469b      	mov	fp, r3
 8001cba:	2400      	movs	r4, #0
 8001cbc:	e6bf      	b.n	8001a3e <__aeabi_ddiv+0x36a>
 8001cbe:	4580      	cmp	r8, r0
 8001cc0:	d3b9      	bcc.n	8001c36 <__aeabi_ddiv+0x562>
 8001cc2:	001a      	movs	r2, r3
 8001cc4:	e7c3      	b.n	8001c4e <__aeabi_ddiv+0x57a>
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	000003ff 	.word	0x000003ff
 8001ccc:	000007ff 	.word	0x000007ff
 8001cd0:	0000041e 	.word	0x0000041e
 8001cd4:	0000043e 	.word	0x0000043e

08001cd8 <__eqdf2>:
 8001cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cda:	464f      	mov	r7, r9
 8001cdc:	4646      	mov	r6, r8
 8001cde:	46d6      	mov	lr, sl
 8001ce0:	4684      	mov	ip, r0
 8001ce2:	b5c0      	push	{r6, r7, lr}
 8001ce4:	4680      	mov	r8, r0
 8001ce6:	4e19      	ldr	r6, [pc, #100]	; (8001d4c <__eqdf2+0x74>)
 8001ce8:	0318      	lsls	r0, r3, #12
 8001cea:	030f      	lsls	r7, r1, #12
 8001cec:	004d      	lsls	r5, r1, #1
 8001cee:	0b00      	lsrs	r0, r0, #12
 8001cf0:	005c      	lsls	r4, r3, #1
 8001cf2:	4682      	mov	sl, r0
 8001cf4:	0b3f      	lsrs	r7, r7, #12
 8001cf6:	0d6d      	lsrs	r5, r5, #21
 8001cf8:	0fc9      	lsrs	r1, r1, #31
 8001cfa:	4691      	mov	r9, r2
 8001cfc:	0d64      	lsrs	r4, r4, #21
 8001cfe:	0fdb      	lsrs	r3, r3, #31
 8001d00:	2001      	movs	r0, #1
 8001d02:	42b5      	cmp	r5, r6
 8001d04:	d00a      	beq.n	8001d1c <__eqdf2+0x44>
 8001d06:	42b4      	cmp	r4, r6
 8001d08:	d003      	beq.n	8001d12 <__eqdf2+0x3a>
 8001d0a:	42a5      	cmp	r5, r4
 8001d0c:	d101      	bne.n	8001d12 <__eqdf2+0x3a>
 8001d0e:	4557      	cmp	r7, sl
 8001d10:	d00c      	beq.n	8001d2c <__eqdf2+0x54>
 8001d12:	bc1c      	pop	{r2, r3, r4}
 8001d14:	4690      	mov	r8, r2
 8001d16:	4699      	mov	r9, r3
 8001d18:	46a2      	mov	sl, r4
 8001d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1c:	4666      	mov	r6, ip
 8001d1e:	433e      	orrs	r6, r7
 8001d20:	d1f7      	bne.n	8001d12 <__eqdf2+0x3a>
 8001d22:	42ac      	cmp	r4, r5
 8001d24:	d1f5      	bne.n	8001d12 <__eqdf2+0x3a>
 8001d26:	4654      	mov	r4, sl
 8001d28:	4314      	orrs	r4, r2
 8001d2a:	d1f2      	bne.n	8001d12 <__eqdf2+0x3a>
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	45c8      	cmp	r8, r9
 8001d30:	d1ef      	bne.n	8001d12 <__eqdf2+0x3a>
 8001d32:	4299      	cmp	r1, r3
 8001d34:	d007      	beq.n	8001d46 <__eqdf2+0x6e>
 8001d36:	2d00      	cmp	r5, #0
 8001d38:	d1eb      	bne.n	8001d12 <__eqdf2+0x3a>
 8001d3a:	4663      	mov	r3, ip
 8001d3c:	431f      	orrs	r7, r3
 8001d3e:	0038      	movs	r0, r7
 8001d40:	1e47      	subs	r7, r0, #1
 8001d42:	41b8      	sbcs	r0, r7
 8001d44:	e7e5      	b.n	8001d12 <__eqdf2+0x3a>
 8001d46:	2000      	movs	r0, #0
 8001d48:	e7e3      	b.n	8001d12 <__eqdf2+0x3a>
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	000007ff 	.word	0x000007ff

08001d50 <__gedf2>:
 8001d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d52:	464f      	mov	r7, r9
 8001d54:	4646      	mov	r6, r8
 8001d56:	46d6      	mov	lr, sl
 8001d58:	004d      	lsls	r5, r1, #1
 8001d5a:	b5c0      	push	{r6, r7, lr}
 8001d5c:	030e      	lsls	r6, r1, #12
 8001d5e:	0fc9      	lsrs	r1, r1, #31
 8001d60:	468a      	mov	sl, r1
 8001d62:	492c      	ldr	r1, [pc, #176]	; (8001e14 <__gedf2+0xc4>)
 8001d64:	031f      	lsls	r7, r3, #12
 8001d66:	005c      	lsls	r4, r3, #1
 8001d68:	4680      	mov	r8, r0
 8001d6a:	0b36      	lsrs	r6, r6, #12
 8001d6c:	0d6d      	lsrs	r5, r5, #21
 8001d6e:	4691      	mov	r9, r2
 8001d70:	0b3f      	lsrs	r7, r7, #12
 8001d72:	0d64      	lsrs	r4, r4, #21
 8001d74:	0fdb      	lsrs	r3, r3, #31
 8001d76:	428d      	cmp	r5, r1
 8001d78:	d01e      	beq.n	8001db8 <__gedf2+0x68>
 8001d7a:	428c      	cmp	r4, r1
 8001d7c:	d016      	beq.n	8001dac <__gedf2+0x5c>
 8001d7e:	2d00      	cmp	r5, #0
 8001d80:	d11e      	bne.n	8001dc0 <__gedf2+0x70>
 8001d82:	4330      	orrs	r0, r6
 8001d84:	4684      	mov	ip, r0
 8001d86:	2c00      	cmp	r4, #0
 8001d88:	d101      	bne.n	8001d8e <__gedf2+0x3e>
 8001d8a:	433a      	orrs	r2, r7
 8001d8c:	d023      	beq.n	8001dd6 <__gedf2+0x86>
 8001d8e:	4662      	mov	r2, ip
 8001d90:	2a00      	cmp	r2, #0
 8001d92:	d01a      	beq.n	8001dca <__gedf2+0x7a>
 8001d94:	459a      	cmp	sl, r3
 8001d96:	d029      	beq.n	8001dec <__gedf2+0x9c>
 8001d98:	4651      	mov	r1, sl
 8001d9a:	2002      	movs	r0, #2
 8001d9c:	3901      	subs	r1, #1
 8001d9e:	4008      	ands	r0, r1
 8001da0:	3801      	subs	r0, #1
 8001da2:	bc1c      	pop	{r2, r3, r4}
 8001da4:	4690      	mov	r8, r2
 8001da6:	4699      	mov	r9, r3
 8001da8:	46a2      	mov	sl, r4
 8001daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dac:	0039      	movs	r1, r7
 8001dae:	4311      	orrs	r1, r2
 8001db0:	d0e5      	beq.n	8001d7e <__gedf2+0x2e>
 8001db2:	2002      	movs	r0, #2
 8001db4:	4240      	negs	r0, r0
 8001db6:	e7f4      	b.n	8001da2 <__gedf2+0x52>
 8001db8:	4330      	orrs	r0, r6
 8001dba:	d1fa      	bne.n	8001db2 <__gedf2+0x62>
 8001dbc:	42ac      	cmp	r4, r5
 8001dbe:	d00f      	beq.n	8001de0 <__gedf2+0x90>
 8001dc0:	2c00      	cmp	r4, #0
 8001dc2:	d10f      	bne.n	8001de4 <__gedf2+0x94>
 8001dc4:	433a      	orrs	r2, r7
 8001dc6:	d0e7      	beq.n	8001d98 <__gedf2+0x48>
 8001dc8:	e00c      	b.n	8001de4 <__gedf2+0x94>
 8001dca:	2201      	movs	r2, #1
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	4393      	bics	r3, r2
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	3001      	adds	r0, #1
 8001dd4:	e7e5      	b.n	8001da2 <__gedf2+0x52>
 8001dd6:	4663      	mov	r3, ip
 8001dd8:	2000      	movs	r0, #0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0e1      	beq.n	8001da2 <__gedf2+0x52>
 8001dde:	e7db      	b.n	8001d98 <__gedf2+0x48>
 8001de0:	433a      	orrs	r2, r7
 8001de2:	d1e6      	bne.n	8001db2 <__gedf2+0x62>
 8001de4:	459a      	cmp	sl, r3
 8001de6:	d1d7      	bne.n	8001d98 <__gedf2+0x48>
 8001de8:	42a5      	cmp	r5, r4
 8001dea:	dcd5      	bgt.n	8001d98 <__gedf2+0x48>
 8001dec:	42a5      	cmp	r5, r4
 8001dee:	db05      	blt.n	8001dfc <__gedf2+0xac>
 8001df0:	42be      	cmp	r6, r7
 8001df2:	d8d1      	bhi.n	8001d98 <__gedf2+0x48>
 8001df4:	d008      	beq.n	8001e08 <__gedf2+0xb8>
 8001df6:	2000      	movs	r0, #0
 8001df8:	42be      	cmp	r6, r7
 8001dfa:	d2d2      	bcs.n	8001da2 <__gedf2+0x52>
 8001dfc:	4650      	mov	r0, sl
 8001dfe:	2301      	movs	r3, #1
 8001e00:	3801      	subs	r0, #1
 8001e02:	4398      	bics	r0, r3
 8001e04:	3001      	adds	r0, #1
 8001e06:	e7cc      	b.n	8001da2 <__gedf2+0x52>
 8001e08:	45c8      	cmp	r8, r9
 8001e0a:	d8c5      	bhi.n	8001d98 <__gedf2+0x48>
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	45c8      	cmp	r8, r9
 8001e10:	d3f4      	bcc.n	8001dfc <__gedf2+0xac>
 8001e12:	e7c6      	b.n	8001da2 <__gedf2+0x52>
 8001e14:	000007ff 	.word	0x000007ff

08001e18 <__ledf2>:
 8001e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1a:	464f      	mov	r7, r9
 8001e1c:	4646      	mov	r6, r8
 8001e1e:	46d6      	mov	lr, sl
 8001e20:	004d      	lsls	r5, r1, #1
 8001e22:	b5c0      	push	{r6, r7, lr}
 8001e24:	030e      	lsls	r6, r1, #12
 8001e26:	0fc9      	lsrs	r1, r1, #31
 8001e28:	468a      	mov	sl, r1
 8001e2a:	492e      	ldr	r1, [pc, #184]	; (8001ee4 <__ledf2+0xcc>)
 8001e2c:	031f      	lsls	r7, r3, #12
 8001e2e:	005c      	lsls	r4, r3, #1
 8001e30:	4680      	mov	r8, r0
 8001e32:	0b36      	lsrs	r6, r6, #12
 8001e34:	0d6d      	lsrs	r5, r5, #21
 8001e36:	4691      	mov	r9, r2
 8001e38:	0b3f      	lsrs	r7, r7, #12
 8001e3a:	0d64      	lsrs	r4, r4, #21
 8001e3c:	0fdb      	lsrs	r3, r3, #31
 8001e3e:	428d      	cmp	r5, r1
 8001e40:	d018      	beq.n	8001e74 <__ledf2+0x5c>
 8001e42:	428c      	cmp	r4, r1
 8001e44:	d011      	beq.n	8001e6a <__ledf2+0x52>
 8001e46:	2d00      	cmp	r5, #0
 8001e48:	d118      	bne.n	8001e7c <__ledf2+0x64>
 8001e4a:	4330      	orrs	r0, r6
 8001e4c:	4684      	mov	ip, r0
 8001e4e:	2c00      	cmp	r4, #0
 8001e50:	d11e      	bne.n	8001e90 <__ledf2+0x78>
 8001e52:	433a      	orrs	r2, r7
 8001e54:	d11c      	bne.n	8001e90 <__ledf2+0x78>
 8001e56:	4663      	mov	r3, ip
 8001e58:	2000      	movs	r0, #0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d030      	beq.n	8001ec0 <__ledf2+0xa8>
 8001e5e:	4651      	mov	r1, sl
 8001e60:	2002      	movs	r0, #2
 8001e62:	3901      	subs	r1, #1
 8001e64:	4008      	ands	r0, r1
 8001e66:	3801      	subs	r0, #1
 8001e68:	e02a      	b.n	8001ec0 <__ledf2+0xa8>
 8001e6a:	0039      	movs	r1, r7
 8001e6c:	4311      	orrs	r1, r2
 8001e6e:	d0ea      	beq.n	8001e46 <__ledf2+0x2e>
 8001e70:	2002      	movs	r0, #2
 8001e72:	e025      	b.n	8001ec0 <__ledf2+0xa8>
 8001e74:	4330      	orrs	r0, r6
 8001e76:	d1fb      	bne.n	8001e70 <__ledf2+0x58>
 8001e78:	42ac      	cmp	r4, r5
 8001e7a:	d026      	beq.n	8001eca <__ledf2+0xb2>
 8001e7c:	2c00      	cmp	r4, #0
 8001e7e:	d126      	bne.n	8001ece <__ledf2+0xb6>
 8001e80:	433a      	orrs	r2, r7
 8001e82:	d124      	bne.n	8001ece <__ledf2+0xb6>
 8001e84:	4651      	mov	r1, sl
 8001e86:	2002      	movs	r0, #2
 8001e88:	3901      	subs	r1, #1
 8001e8a:	4008      	ands	r0, r1
 8001e8c:	3801      	subs	r0, #1
 8001e8e:	e017      	b.n	8001ec0 <__ledf2+0xa8>
 8001e90:	4662      	mov	r2, ip
 8001e92:	2a00      	cmp	r2, #0
 8001e94:	d00f      	beq.n	8001eb6 <__ledf2+0x9e>
 8001e96:	459a      	cmp	sl, r3
 8001e98:	d1e1      	bne.n	8001e5e <__ledf2+0x46>
 8001e9a:	42a5      	cmp	r5, r4
 8001e9c:	db05      	blt.n	8001eaa <__ledf2+0x92>
 8001e9e:	42be      	cmp	r6, r7
 8001ea0:	d8dd      	bhi.n	8001e5e <__ledf2+0x46>
 8001ea2:	d019      	beq.n	8001ed8 <__ledf2+0xc0>
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	42be      	cmp	r6, r7
 8001ea8:	d20a      	bcs.n	8001ec0 <__ledf2+0xa8>
 8001eaa:	4650      	mov	r0, sl
 8001eac:	2301      	movs	r3, #1
 8001eae:	3801      	subs	r0, #1
 8001eb0:	4398      	bics	r0, r3
 8001eb2:	3001      	adds	r0, #1
 8001eb4:	e004      	b.n	8001ec0 <__ledf2+0xa8>
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	4393      	bics	r3, r2
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	3001      	adds	r0, #1
 8001ec0:	bc1c      	pop	{r2, r3, r4}
 8001ec2:	4690      	mov	r8, r2
 8001ec4:	4699      	mov	r9, r3
 8001ec6:	46a2      	mov	sl, r4
 8001ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eca:	433a      	orrs	r2, r7
 8001ecc:	d1d0      	bne.n	8001e70 <__ledf2+0x58>
 8001ece:	459a      	cmp	sl, r3
 8001ed0:	d1c5      	bne.n	8001e5e <__ledf2+0x46>
 8001ed2:	42a5      	cmp	r5, r4
 8001ed4:	dcc3      	bgt.n	8001e5e <__ledf2+0x46>
 8001ed6:	e7e0      	b.n	8001e9a <__ledf2+0x82>
 8001ed8:	45c8      	cmp	r8, r9
 8001eda:	d8c0      	bhi.n	8001e5e <__ledf2+0x46>
 8001edc:	2000      	movs	r0, #0
 8001ede:	45c8      	cmp	r8, r9
 8001ee0:	d3e3      	bcc.n	8001eaa <__ledf2+0x92>
 8001ee2:	e7ed      	b.n	8001ec0 <__ledf2+0xa8>
 8001ee4:	000007ff 	.word	0x000007ff

08001ee8 <__aeabi_dmul>:
 8001ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eea:	4657      	mov	r7, sl
 8001eec:	46de      	mov	lr, fp
 8001eee:	464e      	mov	r6, r9
 8001ef0:	4645      	mov	r5, r8
 8001ef2:	b5e0      	push	{r5, r6, r7, lr}
 8001ef4:	4683      	mov	fp, r0
 8001ef6:	0006      	movs	r6, r0
 8001ef8:	030f      	lsls	r7, r1, #12
 8001efa:	0048      	lsls	r0, r1, #1
 8001efc:	b087      	sub	sp, #28
 8001efe:	4692      	mov	sl, r2
 8001f00:	001d      	movs	r5, r3
 8001f02:	0b3f      	lsrs	r7, r7, #12
 8001f04:	0d40      	lsrs	r0, r0, #21
 8001f06:	0fcc      	lsrs	r4, r1, #31
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	d100      	bne.n	8001f0e <__aeabi_dmul+0x26>
 8001f0c:	e06f      	b.n	8001fee <__aeabi_dmul+0x106>
 8001f0e:	4bde      	ldr	r3, [pc, #888]	; (8002288 <__aeabi_dmul+0x3a0>)
 8001f10:	4298      	cmp	r0, r3
 8001f12:	d038      	beq.n	8001f86 <__aeabi_dmul+0x9e>
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	00ff      	lsls	r7, r7, #3
 8001f18:	041b      	lsls	r3, r3, #16
 8001f1a:	431f      	orrs	r7, r3
 8001f1c:	0f73      	lsrs	r3, r6, #29
 8001f1e:	433b      	orrs	r3, r7
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	4bda      	ldr	r3, [pc, #872]	; (800228c <__aeabi_dmul+0x3a4>)
 8001f24:	2700      	movs	r7, #0
 8001f26:	4699      	mov	r9, r3
 8001f28:	2300      	movs	r3, #0
 8001f2a:	469b      	mov	fp, r3
 8001f2c:	00f6      	lsls	r6, r6, #3
 8001f2e:	4481      	add	r9, r0
 8001f30:	032b      	lsls	r3, r5, #12
 8001f32:	0069      	lsls	r1, r5, #1
 8001f34:	0b1b      	lsrs	r3, r3, #12
 8001f36:	4652      	mov	r2, sl
 8001f38:	4698      	mov	r8, r3
 8001f3a:	0d49      	lsrs	r1, r1, #21
 8001f3c:	0fed      	lsrs	r5, r5, #31
 8001f3e:	2900      	cmp	r1, #0
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x5c>
 8001f42:	e085      	b.n	8002050 <__aeabi_dmul+0x168>
 8001f44:	4bd0      	ldr	r3, [pc, #832]	; (8002288 <__aeabi_dmul+0x3a0>)
 8001f46:	4299      	cmp	r1, r3
 8001f48:	d100      	bne.n	8001f4c <__aeabi_dmul+0x64>
 8001f4a:	e073      	b.n	8002034 <__aeabi_dmul+0x14c>
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	00da      	lsls	r2, r3, #3
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	041b      	lsls	r3, r3, #16
 8001f54:	4313      	orrs	r3, r2
 8001f56:	4652      	mov	r2, sl
 8001f58:	48cc      	ldr	r0, [pc, #816]	; (800228c <__aeabi_dmul+0x3a4>)
 8001f5a:	0f52      	lsrs	r2, r2, #29
 8001f5c:	4684      	mov	ip, r0
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	4652      	mov	r2, sl
 8001f62:	2000      	movs	r0, #0
 8001f64:	4461      	add	r1, ip
 8001f66:	00d2      	lsls	r2, r2, #3
 8001f68:	4489      	add	r9, r1
 8001f6a:	0021      	movs	r1, r4
 8001f6c:	4069      	eors	r1, r5
 8001f6e:	9100      	str	r1, [sp, #0]
 8001f70:	468c      	mov	ip, r1
 8001f72:	2101      	movs	r1, #1
 8001f74:	4449      	add	r1, r9
 8001f76:	468a      	mov	sl, r1
 8001f78:	2f0f      	cmp	r7, #15
 8001f7a:	d900      	bls.n	8001f7e <__aeabi_dmul+0x96>
 8001f7c:	e090      	b.n	80020a0 <__aeabi_dmul+0x1b8>
 8001f7e:	49c4      	ldr	r1, [pc, #784]	; (8002290 <__aeabi_dmul+0x3a8>)
 8001f80:	00bf      	lsls	r7, r7, #2
 8001f82:	59cf      	ldr	r7, [r1, r7]
 8001f84:	46bf      	mov	pc, r7
 8001f86:	465b      	mov	r3, fp
 8001f88:	433b      	orrs	r3, r7
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	d000      	beq.n	8001f90 <__aeabi_dmul+0xa8>
 8001f8e:	e16a      	b.n	8002266 <__aeabi_dmul+0x37e>
 8001f90:	2302      	movs	r3, #2
 8001f92:	2708      	movs	r7, #8
 8001f94:	2600      	movs	r6, #0
 8001f96:	4681      	mov	r9, r0
 8001f98:	469b      	mov	fp, r3
 8001f9a:	e7c9      	b.n	8001f30 <__aeabi_dmul+0x48>
 8001f9c:	0032      	movs	r2, r6
 8001f9e:	4658      	mov	r0, fp
 8001fa0:	9b01      	ldr	r3, [sp, #4]
 8001fa2:	4661      	mov	r1, ip
 8001fa4:	9100      	str	r1, [sp, #0]
 8001fa6:	2802      	cmp	r0, #2
 8001fa8:	d100      	bne.n	8001fac <__aeabi_dmul+0xc4>
 8001faa:	e075      	b.n	8002098 <__aeabi_dmul+0x1b0>
 8001fac:	2803      	cmp	r0, #3
 8001fae:	d100      	bne.n	8001fb2 <__aeabi_dmul+0xca>
 8001fb0:	e1fe      	b.n	80023b0 <__aeabi_dmul+0x4c8>
 8001fb2:	2801      	cmp	r0, #1
 8001fb4:	d000      	beq.n	8001fb8 <__aeabi_dmul+0xd0>
 8001fb6:	e12c      	b.n	8002212 <__aeabi_dmul+0x32a>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2700      	movs	r7, #0
 8001fbc:	2600      	movs	r6, #0
 8001fbe:	2500      	movs	r5, #0
 8001fc0:	033f      	lsls	r7, r7, #12
 8001fc2:	0d2a      	lsrs	r2, r5, #20
 8001fc4:	0b3f      	lsrs	r7, r7, #12
 8001fc6:	48b3      	ldr	r0, [pc, #716]	; (8002294 <__aeabi_dmul+0x3ac>)
 8001fc8:	0512      	lsls	r2, r2, #20
 8001fca:	433a      	orrs	r2, r7
 8001fcc:	4002      	ands	r2, r0
 8001fce:	051b      	lsls	r3, r3, #20
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	9a00      	ldr	r2, [sp, #0]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	07d1      	lsls	r1, r2, #31
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	430b      	orrs	r3, r1
 8001fdc:	0030      	movs	r0, r6
 8001fde:	0019      	movs	r1, r3
 8001fe0:	b007      	add	sp, #28
 8001fe2:	bc3c      	pop	{r2, r3, r4, r5}
 8001fe4:	4690      	mov	r8, r2
 8001fe6:	4699      	mov	r9, r3
 8001fe8:	46a2      	mov	sl, r4
 8001fea:	46ab      	mov	fp, r5
 8001fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fee:	465b      	mov	r3, fp
 8001ff0:	433b      	orrs	r3, r7
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	d100      	bne.n	8001ff8 <__aeabi_dmul+0x110>
 8001ff6:	e12f      	b.n	8002258 <__aeabi_dmul+0x370>
 8001ff8:	2f00      	cmp	r7, #0
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dmul+0x116>
 8001ffc:	e1a5      	b.n	800234a <__aeabi_dmul+0x462>
 8001ffe:	0038      	movs	r0, r7
 8002000:	f000 fe8e 	bl	8002d20 <__clzsi2>
 8002004:	0003      	movs	r3, r0
 8002006:	3b0b      	subs	r3, #11
 8002008:	2b1c      	cmp	r3, #28
 800200a:	dd00      	ble.n	800200e <__aeabi_dmul+0x126>
 800200c:	e196      	b.n	800233c <__aeabi_dmul+0x454>
 800200e:	221d      	movs	r2, #29
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	465a      	mov	r2, fp
 8002014:	0001      	movs	r1, r0
 8002016:	40da      	lsrs	r2, r3
 8002018:	465e      	mov	r6, fp
 800201a:	3908      	subs	r1, #8
 800201c:	408f      	lsls	r7, r1
 800201e:	0013      	movs	r3, r2
 8002020:	408e      	lsls	r6, r1
 8002022:	433b      	orrs	r3, r7
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	4b9c      	ldr	r3, [pc, #624]	; (8002298 <__aeabi_dmul+0x3b0>)
 8002028:	2700      	movs	r7, #0
 800202a:	1a1b      	subs	r3, r3, r0
 800202c:	4699      	mov	r9, r3
 800202e:	2300      	movs	r3, #0
 8002030:	469b      	mov	fp, r3
 8002032:	e77d      	b.n	8001f30 <__aeabi_dmul+0x48>
 8002034:	4641      	mov	r1, r8
 8002036:	4653      	mov	r3, sl
 8002038:	430b      	orrs	r3, r1
 800203a:	4993      	ldr	r1, [pc, #588]	; (8002288 <__aeabi_dmul+0x3a0>)
 800203c:	468c      	mov	ip, r1
 800203e:	44e1      	add	r9, ip
 8002040:	2b00      	cmp	r3, #0
 8002042:	d000      	beq.n	8002046 <__aeabi_dmul+0x15e>
 8002044:	e11a      	b.n	800227c <__aeabi_dmul+0x394>
 8002046:	2202      	movs	r2, #2
 8002048:	2002      	movs	r0, #2
 800204a:	4317      	orrs	r7, r2
 800204c:	2200      	movs	r2, #0
 800204e:	e78c      	b.n	8001f6a <__aeabi_dmul+0x82>
 8002050:	4313      	orrs	r3, r2
 8002052:	d100      	bne.n	8002056 <__aeabi_dmul+0x16e>
 8002054:	e10d      	b.n	8002272 <__aeabi_dmul+0x38a>
 8002056:	4643      	mov	r3, r8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d100      	bne.n	800205e <__aeabi_dmul+0x176>
 800205c:	e181      	b.n	8002362 <__aeabi_dmul+0x47a>
 800205e:	4640      	mov	r0, r8
 8002060:	f000 fe5e 	bl	8002d20 <__clzsi2>
 8002064:	0002      	movs	r2, r0
 8002066:	3a0b      	subs	r2, #11
 8002068:	2a1c      	cmp	r2, #28
 800206a:	dd00      	ble.n	800206e <__aeabi_dmul+0x186>
 800206c:	e172      	b.n	8002354 <__aeabi_dmul+0x46c>
 800206e:	0001      	movs	r1, r0
 8002070:	4643      	mov	r3, r8
 8002072:	3908      	subs	r1, #8
 8002074:	408b      	lsls	r3, r1
 8002076:	4698      	mov	r8, r3
 8002078:	231d      	movs	r3, #29
 800207a:	1a9a      	subs	r2, r3, r2
 800207c:	4653      	mov	r3, sl
 800207e:	40d3      	lsrs	r3, r2
 8002080:	001a      	movs	r2, r3
 8002082:	4643      	mov	r3, r8
 8002084:	4313      	orrs	r3, r2
 8002086:	4652      	mov	r2, sl
 8002088:	408a      	lsls	r2, r1
 800208a:	4649      	mov	r1, r9
 800208c:	1a08      	subs	r0, r1, r0
 800208e:	4982      	ldr	r1, [pc, #520]	; (8002298 <__aeabi_dmul+0x3b0>)
 8002090:	4689      	mov	r9, r1
 8002092:	4481      	add	r9, r0
 8002094:	2000      	movs	r0, #0
 8002096:	e768      	b.n	8001f6a <__aeabi_dmul+0x82>
 8002098:	4b7b      	ldr	r3, [pc, #492]	; (8002288 <__aeabi_dmul+0x3a0>)
 800209a:	2700      	movs	r7, #0
 800209c:	2600      	movs	r6, #0
 800209e:	e78e      	b.n	8001fbe <__aeabi_dmul+0xd6>
 80020a0:	0c14      	lsrs	r4, r2, #16
 80020a2:	0412      	lsls	r2, r2, #16
 80020a4:	0c12      	lsrs	r2, r2, #16
 80020a6:	0011      	movs	r1, r2
 80020a8:	0c37      	lsrs	r7, r6, #16
 80020aa:	0436      	lsls	r6, r6, #16
 80020ac:	0c35      	lsrs	r5, r6, #16
 80020ae:	4379      	muls	r1, r7
 80020b0:	0028      	movs	r0, r5
 80020b2:	468c      	mov	ip, r1
 80020b4:	002e      	movs	r6, r5
 80020b6:	4360      	muls	r0, r4
 80020b8:	4460      	add	r0, ip
 80020ba:	4683      	mov	fp, r0
 80020bc:	4356      	muls	r6, r2
 80020be:	0021      	movs	r1, r4
 80020c0:	0c30      	lsrs	r0, r6, #16
 80020c2:	4680      	mov	r8, r0
 80020c4:	4658      	mov	r0, fp
 80020c6:	4379      	muls	r1, r7
 80020c8:	4440      	add	r0, r8
 80020ca:	9102      	str	r1, [sp, #8]
 80020cc:	4584      	cmp	ip, r0
 80020ce:	d906      	bls.n	80020de <__aeabi_dmul+0x1f6>
 80020d0:	4688      	mov	r8, r1
 80020d2:	2180      	movs	r1, #128	; 0x80
 80020d4:	0249      	lsls	r1, r1, #9
 80020d6:	468c      	mov	ip, r1
 80020d8:	44e0      	add	r8, ip
 80020da:	4641      	mov	r1, r8
 80020dc:	9102      	str	r1, [sp, #8]
 80020de:	0436      	lsls	r6, r6, #16
 80020e0:	0c01      	lsrs	r1, r0, #16
 80020e2:	0c36      	lsrs	r6, r6, #16
 80020e4:	0400      	lsls	r0, r0, #16
 80020e6:	468b      	mov	fp, r1
 80020e8:	1981      	adds	r1, r0, r6
 80020ea:	0c1e      	lsrs	r6, r3, #16
 80020ec:	041b      	lsls	r3, r3, #16
 80020ee:	0c1b      	lsrs	r3, r3, #16
 80020f0:	9103      	str	r1, [sp, #12]
 80020f2:	0019      	movs	r1, r3
 80020f4:	4379      	muls	r1, r7
 80020f6:	468c      	mov	ip, r1
 80020f8:	0028      	movs	r0, r5
 80020fa:	4375      	muls	r5, r6
 80020fc:	4465      	add	r5, ip
 80020fe:	46a8      	mov	r8, r5
 8002100:	4358      	muls	r0, r3
 8002102:	0c05      	lsrs	r5, r0, #16
 8002104:	4445      	add	r5, r8
 8002106:	4377      	muls	r7, r6
 8002108:	42a9      	cmp	r1, r5
 800210a:	d903      	bls.n	8002114 <__aeabi_dmul+0x22c>
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	0249      	lsls	r1, r1, #9
 8002110:	468c      	mov	ip, r1
 8002112:	4467      	add	r7, ip
 8002114:	0c29      	lsrs	r1, r5, #16
 8002116:	468c      	mov	ip, r1
 8002118:	0039      	movs	r1, r7
 800211a:	0400      	lsls	r0, r0, #16
 800211c:	0c00      	lsrs	r0, r0, #16
 800211e:	042d      	lsls	r5, r5, #16
 8002120:	182d      	adds	r5, r5, r0
 8002122:	4461      	add	r1, ip
 8002124:	44ab      	add	fp, r5
 8002126:	9105      	str	r1, [sp, #20]
 8002128:	4659      	mov	r1, fp
 800212a:	9104      	str	r1, [sp, #16]
 800212c:	9901      	ldr	r1, [sp, #4]
 800212e:	040f      	lsls	r7, r1, #16
 8002130:	0c3f      	lsrs	r7, r7, #16
 8002132:	0c08      	lsrs	r0, r1, #16
 8002134:	0039      	movs	r1, r7
 8002136:	4351      	muls	r1, r2
 8002138:	4342      	muls	r2, r0
 800213a:	4690      	mov	r8, r2
 800213c:	0002      	movs	r2, r0
 800213e:	468c      	mov	ip, r1
 8002140:	0c09      	lsrs	r1, r1, #16
 8002142:	468b      	mov	fp, r1
 8002144:	4362      	muls	r2, r4
 8002146:	437c      	muls	r4, r7
 8002148:	4444      	add	r4, r8
 800214a:	445c      	add	r4, fp
 800214c:	45a0      	cmp	r8, r4
 800214e:	d903      	bls.n	8002158 <__aeabi_dmul+0x270>
 8002150:	2180      	movs	r1, #128	; 0x80
 8002152:	0249      	lsls	r1, r1, #9
 8002154:	4688      	mov	r8, r1
 8002156:	4442      	add	r2, r8
 8002158:	0c21      	lsrs	r1, r4, #16
 800215a:	4688      	mov	r8, r1
 800215c:	4661      	mov	r1, ip
 800215e:	0409      	lsls	r1, r1, #16
 8002160:	0c09      	lsrs	r1, r1, #16
 8002162:	468c      	mov	ip, r1
 8002164:	0039      	movs	r1, r7
 8002166:	4359      	muls	r1, r3
 8002168:	4343      	muls	r3, r0
 800216a:	4370      	muls	r0, r6
 800216c:	437e      	muls	r6, r7
 800216e:	0c0f      	lsrs	r7, r1, #16
 8002170:	18f6      	adds	r6, r6, r3
 8002172:	0424      	lsls	r4, r4, #16
 8002174:	19be      	adds	r6, r7, r6
 8002176:	4464      	add	r4, ip
 8002178:	4442      	add	r2, r8
 800217a:	468c      	mov	ip, r1
 800217c:	42b3      	cmp	r3, r6
 800217e:	d903      	bls.n	8002188 <__aeabi_dmul+0x2a0>
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	025b      	lsls	r3, r3, #9
 8002184:	4698      	mov	r8, r3
 8002186:	4440      	add	r0, r8
 8002188:	9b02      	ldr	r3, [sp, #8]
 800218a:	4661      	mov	r1, ip
 800218c:	4698      	mov	r8, r3
 800218e:	9b04      	ldr	r3, [sp, #16]
 8002190:	0437      	lsls	r7, r6, #16
 8002192:	4443      	add	r3, r8
 8002194:	469b      	mov	fp, r3
 8002196:	45ab      	cmp	fp, r5
 8002198:	41ad      	sbcs	r5, r5
 800219a:	426b      	negs	r3, r5
 800219c:	040d      	lsls	r5, r1, #16
 800219e:	9905      	ldr	r1, [sp, #20]
 80021a0:	0c2d      	lsrs	r5, r5, #16
 80021a2:	468c      	mov	ip, r1
 80021a4:	197f      	adds	r7, r7, r5
 80021a6:	4467      	add	r7, ip
 80021a8:	18fd      	adds	r5, r7, r3
 80021aa:	46a8      	mov	r8, r5
 80021ac:	465d      	mov	r5, fp
 80021ae:	192d      	adds	r5, r5, r4
 80021b0:	42a5      	cmp	r5, r4
 80021b2:	41a4      	sbcs	r4, r4
 80021b4:	4693      	mov	fp, r2
 80021b6:	4264      	negs	r4, r4
 80021b8:	46a4      	mov	ip, r4
 80021ba:	44c3      	add	fp, r8
 80021bc:	44dc      	add	ip, fp
 80021be:	428f      	cmp	r7, r1
 80021c0:	41bf      	sbcs	r7, r7
 80021c2:	4598      	cmp	r8, r3
 80021c4:	419b      	sbcs	r3, r3
 80021c6:	4593      	cmp	fp, r2
 80021c8:	4192      	sbcs	r2, r2
 80021ca:	45a4      	cmp	ip, r4
 80021cc:	41a4      	sbcs	r4, r4
 80021ce:	425b      	negs	r3, r3
 80021d0:	427f      	negs	r7, r7
 80021d2:	431f      	orrs	r7, r3
 80021d4:	0c36      	lsrs	r6, r6, #16
 80021d6:	4252      	negs	r2, r2
 80021d8:	4264      	negs	r4, r4
 80021da:	19bf      	adds	r7, r7, r6
 80021dc:	4322      	orrs	r2, r4
 80021de:	18bf      	adds	r7, r7, r2
 80021e0:	4662      	mov	r2, ip
 80021e2:	1838      	adds	r0, r7, r0
 80021e4:	0243      	lsls	r3, r0, #9
 80021e6:	0dd2      	lsrs	r2, r2, #23
 80021e8:	9903      	ldr	r1, [sp, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	026a      	lsls	r2, r5, #9
 80021ee:	430a      	orrs	r2, r1
 80021f0:	1e50      	subs	r0, r2, #1
 80021f2:	4182      	sbcs	r2, r0
 80021f4:	4661      	mov	r1, ip
 80021f6:	0ded      	lsrs	r5, r5, #23
 80021f8:	432a      	orrs	r2, r5
 80021fa:	024e      	lsls	r6, r1, #9
 80021fc:	4332      	orrs	r2, r6
 80021fe:	01d9      	lsls	r1, r3, #7
 8002200:	d400      	bmi.n	8002204 <__aeabi_dmul+0x31c>
 8002202:	e0b3      	b.n	800236c <__aeabi_dmul+0x484>
 8002204:	2601      	movs	r6, #1
 8002206:	0850      	lsrs	r0, r2, #1
 8002208:	4032      	ands	r2, r6
 800220a:	4302      	orrs	r2, r0
 800220c:	07de      	lsls	r6, r3, #31
 800220e:	4332      	orrs	r2, r6
 8002210:	085b      	lsrs	r3, r3, #1
 8002212:	4c22      	ldr	r4, [pc, #136]	; (800229c <__aeabi_dmul+0x3b4>)
 8002214:	4454      	add	r4, sl
 8002216:	2c00      	cmp	r4, #0
 8002218:	dd62      	ble.n	80022e0 <__aeabi_dmul+0x3f8>
 800221a:	0751      	lsls	r1, r2, #29
 800221c:	d009      	beq.n	8002232 <__aeabi_dmul+0x34a>
 800221e:	200f      	movs	r0, #15
 8002220:	4010      	ands	r0, r2
 8002222:	2804      	cmp	r0, #4
 8002224:	d005      	beq.n	8002232 <__aeabi_dmul+0x34a>
 8002226:	1d10      	adds	r0, r2, #4
 8002228:	4290      	cmp	r0, r2
 800222a:	4192      	sbcs	r2, r2
 800222c:	4252      	negs	r2, r2
 800222e:	189b      	adds	r3, r3, r2
 8002230:	0002      	movs	r2, r0
 8002232:	01d9      	lsls	r1, r3, #7
 8002234:	d504      	bpl.n	8002240 <__aeabi_dmul+0x358>
 8002236:	2480      	movs	r4, #128	; 0x80
 8002238:	4819      	ldr	r0, [pc, #100]	; (80022a0 <__aeabi_dmul+0x3b8>)
 800223a:	00e4      	lsls	r4, r4, #3
 800223c:	4003      	ands	r3, r0
 800223e:	4454      	add	r4, sl
 8002240:	4818      	ldr	r0, [pc, #96]	; (80022a4 <__aeabi_dmul+0x3bc>)
 8002242:	4284      	cmp	r4, r0
 8002244:	dd00      	ble.n	8002248 <__aeabi_dmul+0x360>
 8002246:	e727      	b.n	8002098 <__aeabi_dmul+0x1b0>
 8002248:	075e      	lsls	r6, r3, #29
 800224a:	025b      	lsls	r3, r3, #9
 800224c:	08d2      	lsrs	r2, r2, #3
 800224e:	0b1f      	lsrs	r7, r3, #12
 8002250:	0563      	lsls	r3, r4, #21
 8002252:	4316      	orrs	r6, r2
 8002254:	0d5b      	lsrs	r3, r3, #21
 8002256:	e6b2      	b.n	8001fbe <__aeabi_dmul+0xd6>
 8002258:	2300      	movs	r3, #0
 800225a:	4699      	mov	r9, r3
 800225c:	3301      	adds	r3, #1
 800225e:	2704      	movs	r7, #4
 8002260:	2600      	movs	r6, #0
 8002262:	469b      	mov	fp, r3
 8002264:	e664      	b.n	8001f30 <__aeabi_dmul+0x48>
 8002266:	2303      	movs	r3, #3
 8002268:	9701      	str	r7, [sp, #4]
 800226a:	4681      	mov	r9, r0
 800226c:	270c      	movs	r7, #12
 800226e:	469b      	mov	fp, r3
 8002270:	e65e      	b.n	8001f30 <__aeabi_dmul+0x48>
 8002272:	2201      	movs	r2, #1
 8002274:	2001      	movs	r0, #1
 8002276:	4317      	orrs	r7, r2
 8002278:	2200      	movs	r2, #0
 800227a:	e676      	b.n	8001f6a <__aeabi_dmul+0x82>
 800227c:	2303      	movs	r3, #3
 800227e:	2003      	movs	r0, #3
 8002280:	431f      	orrs	r7, r3
 8002282:	4643      	mov	r3, r8
 8002284:	e671      	b.n	8001f6a <__aeabi_dmul+0x82>
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	000007ff 	.word	0x000007ff
 800228c:	fffffc01 	.word	0xfffffc01
 8002290:	08008ee4 	.word	0x08008ee4
 8002294:	800fffff 	.word	0x800fffff
 8002298:	fffffc0d 	.word	0xfffffc0d
 800229c:	000003ff 	.word	0x000003ff
 80022a0:	feffffff 	.word	0xfeffffff
 80022a4:	000007fe 	.word	0x000007fe
 80022a8:	2300      	movs	r3, #0
 80022aa:	2780      	movs	r7, #128	; 0x80
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	033f      	lsls	r7, r7, #12
 80022b0:	2600      	movs	r6, #0
 80022b2:	4b43      	ldr	r3, [pc, #268]	; (80023c0 <__aeabi_dmul+0x4d8>)
 80022b4:	e683      	b.n	8001fbe <__aeabi_dmul+0xd6>
 80022b6:	9b01      	ldr	r3, [sp, #4]
 80022b8:	0032      	movs	r2, r6
 80022ba:	46a4      	mov	ip, r4
 80022bc:	4658      	mov	r0, fp
 80022be:	e670      	b.n	8001fa2 <__aeabi_dmul+0xba>
 80022c0:	46ac      	mov	ip, r5
 80022c2:	e66e      	b.n	8001fa2 <__aeabi_dmul+0xba>
 80022c4:	2780      	movs	r7, #128	; 0x80
 80022c6:	9901      	ldr	r1, [sp, #4]
 80022c8:	033f      	lsls	r7, r7, #12
 80022ca:	4239      	tst	r1, r7
 80022cc:	d02d      	beq.n	800232a <__aeabi_dmul+0x442>
 80022ce:	423b      	tst	r3, r7
 80022d0:	d12b      	bne.n	800232a <__aeabi_dmul+0x442>
 80022d2:	431f      	orrs	r7, r3
 80022d4:	033f      	lsls	r7, r7, #12
 80022d6:	0b3f      	lsrs	r7, r7, #12
 80022d8:	9500      	str	r5, [sp, #0]
 80022da:	0016      	movs	r6, r2
 80022dc:	4b38      	ldr	r3, [pc, #224]	; (80023c0 <__aeabi_dmul+0x4d8>)
 80022de:	e66e      	b.n	8001fbe <__aeabi_dmul+0xd6>
 80022e0:	2501      	movs	r5, #1
 80022e2:	1b2d      	subs	r5, r5, r4
 80022e4:	2d38      	cmp	r5, #56	; 0x38
 80022e6:	dd00      	ble.n	80022ea <__aeabi_dmul+0x402>
 80022e8:	e666      	b.n	8001fb8 <__aeabi_dmul+0xd0>
 80022ea:	2d1f      	cmp	r5, #31
 80022ec:	dc40      	bgt.n	8002370 <__aeabi_dmul+0x488>
 80022ee:	4835      	ldr	r0, [pc, #212]	; (80023c4 <__aeabi_dmul+0x4dc>)
 80022f0:	001c      	movs	r4, r3
 80022f2:	4450      	add	r0, sl
 80022f4:	0016      	movs	r6, r2
 80022f6:	4082      	lsls	r2, r0
 80022f8:	4084      	lsls	r4, r0
 80022fa:	40ee      	lsrs	r6, r5
 80022fc:	1e50      	subs	r0, r2, #1
 80022fe:	4182      	sbcs	r2, r0
 8002300:	4334      	orrs	r4, r6
 8002302:	4314      	orrs	r4, r2
 8002304:	40eb      	lsrs	r3, r5
 8002306:	0762      	lsls	r2, r4, #29
 8002308:	d009      	beq.n	800231e <__aeabi_dmul+0x436>
 800230a:	220f      	movs	r2, #15
 800230c:	4022      	ands	r2, r4
 800230e:	2a04      	cmp	r2, #4
 8002310:	d005      	beq.n	800231e <__aeabi_dmul+0x436>
 8002312:	0022      	movs	r2, r4
 8002314:	1d14      	adds	r4, r2, #4
 8002316:	4294      	cmp	r4, r2
 8002318:	4180      	sbcs	r0, r0
 800231a:	4240      	negs	r0, r0
 800231c:	181b      	adds	r3, r3, r0
 800231e:	021a      	lsls	r2, r3, #8
 8002320:	d53e      	bpl.n	80023a0 <__aeabi_dmul+0x4b8>
 8002322:	2301      	movs	r3, #1
 8002324:	2700      	movs	r7, #0
 8002326:	2600      	movs	r6, #0
 8002328:	e649      	b.n	8001fbe <__aeabi_dmul+0xd6>
 800232a:	2780      	movs	r7, #128	; 0x80
 800232c:	9b01      	ldr	r3, [sp, #4]
 800232e:	033f      	lsls	r7, r7, #12
 8002330:	431f      	orrs	r7, r3
 8002332:	033f      	lsls	r7, r7, #12
 8002334:	0b3f      	lsrs	r7, r7, #12
 8002336:	9400      	str	r4, [sp, #0]
 8002338:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <__aeabi_dmul+0x4d8>)
 800233a:	e640      	b.n	8001fbe <__aeabi_dmul+0xd6>
 800233c:	0003      	movs	r3, r0
 800233e:	465a      	mov	r2, fp
 8002340:	3b28      	subs	r3, #40	; 0x28
 8002342:	409a      	lsls	r2, r3
 8002344:	2600      	movs	r6, #0
 8002346:	9201      	str	r2, [sp, #4]
 8002348:	e66d      	b.n	8002026 <__aeabi_dmul+0x13e>
 800234a:	4658      	mov	r0, fp
 800234c:	f000 fce8 	bl	8002d20 <__clzsi2>
 8002350:	3020      	adds	r0, #32
 8002352:	e657      	b.n	8002004 <__aeabi_dmul+0x11c>
 8002354:	0003      	movs	r3, r0
 8002356:	4652      	mov	r2, sl
 8002358:	3b28      	subs	r3, #40	; 0x28
 800235a:	409a      	lsls	r2, r3
 800235c:	0013      	movs	r3, r2
 800235e:	2200      	movs	r2, #0
 8002360:	e693      	b.n	800208a <__aeabi_dmul+0x1a2>
 8002362:	4650      	mov	r0, sl
 8002364:	f000 fcdc 	bl	8002d20 <__clzsi2>
 8002368:	3020      	adds	r0, #32
 800236a:	e67b      	b.n	8002064 <__aeabi_dmul+0x17c>
 800236c:	46ca      	mov	sl, r9
 800236e:	e750      	b.n	8002212 <__aeabi_dmul+0x32a>
 8002370:	201f      	movs	r0, #31
 8002372:	001e      	movs	r6, r3
 8002374:	4240      	negs	r0, r0
 8002376:	1b04      	subs	r4, r0, r4
 8002378:	40e6      	lsrs	r6, r4
 800237a:	2d20      	cmp	r5, #32
 800237c:	d003      	beq.n	8002386 <__aeabi_dmul+0x49e>
 800237e:	4c12      	ldr	r4, [pc, #72]	; (80023c8 <__aeabi_dmul+0x4e0>)
 8002380:	4454      	add	r4, sl
 8002382:	40a3      	lsls	r3, r4
 8002384:	431a      	orrs	r2, r3
 8002386:	1e50      	subs	r0, r2, #1
 8002388:	4182      	sbcs	r2, r0
 800238a:	4332      	orrs	r2, r6
 800238c:	2607      	movs	r6, #7
 800238e:	2700      	movs	r7, #0
 8002390:	4016      	ands	r6, r2
 8002392:	d009      	beq.n	80023a8 <__aeabi_dmul+0x4c0>
 8002394:	200f      	movs	r0, #15
 8002396:	2300      	movs	r3, #0
 8002398:	4010      	ands	r0, r2
 800239a:	0014      	movs	r4, r2
 800239c:	2804      	cmp	r0, #4
 800239e:	d1b9      	bne.n	8002314 <__aeabi_dmul+0x42c>
 80023a0:	0022      	movs	r2, r4
 80023a2:	075e      	lsls	r6, r3, #29
 80023a4:	025b      	lsls	r3, r3, #9
 80023a6:	0b1f      	lsrs	r7, r3, #12
 80023a8:	08d2      	lsrs	r2, r2, #3
 80023aa:	4316      	orrs	r6, r2
 80023ac:	2300      	movs	r3, #0
 80023ae:	e606      	b.n	8001fbe <__aeabi_dmul+0xd6>
 80023b0:	2780      	movs	r7, #128	; 0x80
 80023b2:	033f      	lsls	r7, r7, #12
 80023b4:	431f      	orrs	r7, r3
 80023b6:	033f      	lsls	r7, r7, #12
 80023b8:	0b3f      	lsrs	r7, r7, #12
 80023ba:	0016      	movs	r6, r2
 80023bc:	4b00      	ldr	r3, [pc, #0]	; (80023c0 <__aeabi_dmul+0x4d8>)
 80023be:	e5fe      	b.n	8001fbe <__aeabi_dmul+0xd6>
 80023c0:	000007ff 	.word	0x000007ff
 80023c4:	0000041e 	.word	0x0000041e
 80023c8:	0000043e 	.word	0x0000043e

080023cc <__aeabi_dsub>:
 80023cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ce:	4657      	mov	r7, sl
 80023d0:	464e      	mov	r6, r9
 80023d2:	4645      	mov	r5, r8
 80023d4:	46de      	mov	lr, fp
 80023d6:	000c      	movs	r4, r1
 80023d8:	0309      	lsls	r1, r1, #12
 80023da:	b5e0      	push	{r5, r6, r7, lr}
 80023dc:	0a49      	lsrs	r1, r1, #9
 80023de:	0f46      	lsrs	r6, r0, #29
 80023e0:	005f      	lsls	r7, r3, #1
 80023e2:	4331      	orrs	r1, r6
 80023e4:	031e      	lsls	r6, r3, #12
 80023e6:	0fdb      	lsrs	r3, r3, #31
 80023e8:	0a76      	lsrs	r6, r6, #9
 80023ea:	469b      	mov	fp, r3
 80023ec:	0f53      	lsrs	r3, r2, #29
 80023ee:	4333      	orrs	r3, r6
 80023f0:	4ec8      	ldr	r6, [pc, #800]	; (8002714 <__aeabi_dsub+0x348>)
 80023f2:	0065      	lsls	r5, r4, #1
 80023f4:	00c0      	lsls	r0, r0, #3
 80023f6:	0fe4      	lsrs	r4, r4, #31
 80023f8:	00d2      	lsls	r2, r2, #3
 80023fa:	0d6d      	lsrs	r5, r5, #21
 80023fc:	46a2      	mov	sl, r4
 80023fe:	4681      	mov	r9, r0
 8002400:	0d7f      	lsrs	r7, r7, #21
 8002402:	469c      	mov	ip, r3
 8002404:	4690      	mov	r8, r2
 8002406:	42b7      	cmp	r7, r6
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x40>
 800240a:	e0b9      	b.n	8002580 <__aeabi_dsub+0x1b4>
 800240c:	465b      	mov	r3, fp
 800240e:	2601      	movs	r6, #1
 8002410:	4073      	eors	r3, r6
 8002412:	469b      	mov	fp, r3
 8002414:	1bee      	subs	r6, r5, r7
 8002416:	45a3      	cmp	fp, r4
 8002418:	d100      	bne.n	800241c <__aeabi_dsub+0x50>
 800241a:	e083      	b.n	8002524 <__aeabi_dsub+0x158>
 800241c:	2e00      	cmp	r6, #0
 800241e:	dd63      	ble.n	80024e8 <__aeabi_dsub+0x11c>
 8002420:	2f00      	cmp	r7, #0
 8002422:	d000      	beq.n	8002426 <__aeabi_dsub+0x5a>
 8002424:	e0b1      	b.n	800258a <__aeabi_dsub+0x1be>
 8002426:	4663      	mov	r3, ip
 8002428:	4313      	orrs	r3, r2
 800242a:	d100      	bne.n	800242e <__aeabi_dsub+0x62>
 800242c:	e123      	b.n	8002676 <__aeabi_dsub+0x2aa>
 800242e:	1e73      	subs	r3, r6, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d000      	beq.n	8002436 <__aeabi_dsub+0x6a>
 8002434:	e1ba      	b.n	80027ac <__aeabi_dsub+0x3e0>
 8002436:	1a86      	subs	r6, r0, r2
 8002438:	4663      	mov	r3, ip
 800243a:	42b0      	cmp	r0, r6
 800243c:	4180      	sbcs	r0, r0
 800243e:	2501      	movs	r5, #1
 8002440:	1ac9      	subs	r1, r1, r3
 8002442:	4240      	negs	r0, r0
 8002444:	1a09      	subs	r1, r1, r0
 8002446:	020b      	lsls	r3, r1, #8
 8002448:	d400      	bmi.n	800244c <__aeabi_dsub+0x80>
 800244a:	e147      	b.n	80026dc <__aeabi_dsub+0x310>
 800244c:	0249      	lsls	r1, r1, #9
 800244e:	0a4b      	lsrs	r3, r1, #9
 8002450:	4698      	mov	r8, r3
 8002452:	4643      	mov	r3, r8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d100      	bne.n	800245a <__aeabi_dsub+0x8e>
 8002458:	e189      	b.n	800276e <__aeabi_dsub+0x3a2>
 800245a:	4640      	mov	r0, r8
 800245c:	f000 fc60 	bl	8002d20 <__clzsi2>
 8002460:	0003      	movs	r3, r0
 8002462:	3b08      	subs	r3, #8
 8002464:	2b1f      	cmp	r3, #31
 8002466:	dd00      	ble.n	800246a <__aeabi_dsub+0x9e>
 8002468:	e17c      	b.n	8002764 <__aeabi_dsub+0x398>
 800246a:	2220      	movs	r2, #32
 800246c:	0030      	movs	r0, r6
 800246e:	1ad2      	subs	r2, r2, r3
 8002470:	4641      	mov	r1, r8
 8002472:	40d0      	lsrs	r0, r2
 8002474:	4099      	lsls	r1, r3
 8002476:	0002      	movs	r2, r0
 8002478:	409e      	lsls	r6, r3
 800247a:	430a      	orrs	r2, r1
 800247c:	429d      	cmp	r5, r3
 800247e:	dd00      	ble.n	8002482 <__aeabi_dsub+0xb6>
 8002480:	e16a      	b.n	8002758 <__aeabi_dsub+0x38c>
 8002482:	1b5d      	subs	r5, r3, r5
 8002484:	1c6b      	adds	r3, r5, #1
 8002486:	2b1f      	cmp	r3, #31
 8002488:	dd00      	ble.n	800248c <__aeabi_dsub+0xc0>
 800248a:	e194      	b.n	80027b6 <__aeabi_dsub+0x3ea>
 800248c:	2120      	movs	r1, #32
 800248e:	0010      	movs	r0, r2
 8002490:	0035      	movs	r5, r6
 8002492:	1ac9      	subs	r1, r1, r3
 8002494:	408e      	lsls	r6, r1
 8002496:	40da      	lsrs	r2, r3
 8002498:	4088      	lsls	r0, r1
 800249a:	40dd      	lsrs	r5, r3
 800249c:	1e71      	subs	r1, r6, #1
 800249e:	418e      	sbcs	r6, r1
 80024a0:	0011      	movs	r1, r2
 80024a2:	2207      	movs	r2, #7
 80024a4:	4328      	orrs	r0, r5
 80024a6:	2500      	movs	r5, #0
 80024a8:	4306      	orrs	r6, r0
 80024aa:	4032      	ands	r2, r6
 80024ac:	2a00      	cmp	r2, #0
 80024ae:	d009      	beq.n	80024c4 <__aeabi_dsub+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4033      	ands	r3, r6
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d005      	beq.n	80024c4 <__aeabi_dsub+0xf8>
 80024b8:	1d33      	adds	r3, r6, #4
 80024ba:	42b3      	cmp	r3, r6
 80024bc:	41b6      	sbcs	r6, r6
 80024be:	4276      	negs	r6, r6
 80024c0:	1989      	adds	r1, r1, r6
 80024c2:	001e      	movs	r6, r3
 80024c4:	020b      	lsls	r3, r1, #8
 80024c6:	d400      	bmi.n	80024ca <__aeabi_dsub+0xfe>
 80024c8:	e23d      	b.n	8002946 <__aeabi_dsub+0x57a>
 80024ca:	1c6a      	adds	r2, r5, #1
 80024cc:	4b91      	ldr	r3, [pc, #580]	; (8002714 <__aeabi_dsub+0x348>)
 80024ce:	0555      	lsls	r5, r2, #21
 80024d0:	0d6d      	lsrs	r5, r5, #21
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d100      	bne.n	80024d8 <__aeabi_dsub+0x10c>
 80024d6:	e119      	b.n	800270c <__aeabi_dsub+0x340>
 80024d8:	4a8f      	ldr	r2, [pc, #572]	; (8002718 <__aeabi_dsub+0x34c>)
 80024da:	08f6      	lsrs	r6, r6, #3
 80024dc:	400a      	ands	r2, r1
 80024de:	0757      	lsls	r7, r2, #29
 80024e0:	0252      	lsls	r2, r2, #9
 80024e2:	4337      	orrs	r7, r6
 80024e4:	0b12      	lsrs	r2, r2, #12
 80024e6:	e09b      	b.n	8002620 <__aeabi_dsub+0x254>
 80024e8:	2e00      	cmp	r6, #0
 80024ea:	d000      	beq.n	80024ee <__aeabi_dsub+0x122>
 80024ec:	e0c5      	b.n	800267a <__aeabi_dsub+0x2ae>
 80024ee:	1c6e      	adds	r6, r5, #1
 80024f0:	0576      	lsls	r6, r6, #21
 80024f2:	0d76      	lsrs	r6, r6, #21
 80024f4:	2e01      	cmp	r6, #1
 80024f6:	dc00      	bgt.n	80024fa <__aeabi_dsub+0x12e>
 80024f8:	e148      	b.n	800278c <__aeabi_dsub+0x3c0>
 80024fa:	4667      	mov	r7, ip
 80024fc:	1a86      	subs	r6, r0, r2
 80024fe:	1bcb      	subs	r3, r1, r7
 8002500:	42b0      	cmp	r0, r6
 8002502:	41bf      	sbcs	r7, r7
 8002504:	427f      	negs	r7, r7
 8002506:	46b8      	mov	r8, r7
 8002508:	001f      	movs	r7, r3
 800250a:	4643      	mov	r3, r8
 800250c:	1aff      	subs	r7, r7, r3
 800250e:	003b      	movs	r3, r7
 8002510:	46b8      	mov	r8, r7
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	d500      	bpl.n	8002518 <__aeabi_dsub+0x14c>
 8002516:	e15f      	b.n	80027d8 <__aeabi_dsub+0x40c>
 8002518:	4337      	orrs	r7, r6
 800251a:	d19a      	bne.n	8002452 <__aeabi_dsub+0x86>
 800251c:	2200      	movs	r2, #0
 800251e:	2400      	movs	r4, #0
 8002520:	2500      	movs	r5, #0
 8002522:	e079      	b.n	8002618 <__aeabi_dsub+0x24c>
 8002524:	2e00      	cmp	r6, #0
 8002526:	dc00      	bgt.n	800252a <__aeabi_dsub+0x15e>
 8002528:	e0fa      	b.n	8002720 <__aeabi_dsub+0x354>
 800252a:	2f00      	cmp	r7, #0
 800252c:	d100      	bne.n	8002530 <__aeabi_dsub+0x164>
 800252e:	e08d      	b.n	800264c <__aeabi_dsub+0x280>
 8002530:	4b78      	ldr	r3, [pc, #480]	; (8002714 <__aeabi_dsub+0x348>)
 8002532:	429d      	cmp	r5, r3
 8002534:	d067      	beq.n	8002606 <__aeabi_dsub+0x23a>
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	4667      	mov	r7, ip
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	431f      	orrs	r7, r3
 800253e:	46bc      	mov	ip, r7
 8002540:	2e38      	cmp	r6, #56	; 0x38
 8002542:	dc00      	bgt.n	8002546 <__aeabi_dsub+0x17a>
 8002544:	e152      	b.n	80027ec <__aeabi_dsub+0x420>
 8002546:	4663      	mov	r3, ip
 8002548:	4313      	orrs	r3, r2
 800254a:	1e5a      	subs	r2, r3, #1
 800254c:	4193      	sbcs	r3, r2
 800254e:	181e      	adds	r6, r3, r0
 8002550:	4286      	cmp	r6, r0
 8002552:	4180      	sbcs	r0, r0
 8002554:	4240      	negs	r0, r0
 8002556:	1809      	adds	r1, r1, r0
 8002558:	020b      	lsls	r3, r1, #8
 800255a:	d400      	bmi.n	800255e <__aeabi_dsub+0x192>
 800255c:	e0be      	b.n	80026dc <__aeabi_dsub+0x310>
 800255e:	4b6d      	ldr	r3, [pc, #436]	; (8002714 <__aeabi_dsub+0x348>)
 8002560:	3501      	adds	r5, #1
 8002562:	429d      	cmp	r5, r3
 8002564:	d100      	bne.n	8002568 <__aeabi_dsub+0x19c>
 8002566:	e0d2      	b.n	800270e <__aeabi_dsub+0x342>
 8002568:	4a6b      	ldr	r2, [pc, #428]	; (8002718 <__aeabi_dsub+0x34c>)
 800256a:	0873      	lsrs	r3, r6, #1
 800256c:	400a      	ands	r2, r1
 800256e:	2101      	movs	r1, #1
 8002570:	400e      	ands	r6, r1
 8002572:	431e      	orrs	r6, r3
 8002574:	0851      	lsrs	r1, r2, #1
 8002576:	07d3      	lsls	r3, r2, #31
 8002578:	2207      	movs	r2, #7
 800257a:	431e      	orrs	r6, r3
 800257c:	4032      	ands	r2, r6
 800257e:	e795      	b.n	80024ac <__aeabi_dsub+0xe0>
 8002580:	001e      	movs	r6, r3
 8002582:	4316      	orrs	r6, r2
 8002584:	d000      	beq.n	8002588 <__aeabi_dsub+0x1bc>
 8002586:	e745      	b.n	8002414 <__aeabi_dsub+0x48>
 8002588:	e740      	b.n	800240c <__aeabi_dsub+0x40>
 800258a:	4b62      	ldr	r3, [pc, #392]	; (8002714 <__aeabi_dsub+0x348>)
 800258c:	429d      	cmp	r5, r3
 800258e:	d03a      	beq.n	8002606 <__aeabi_dsub+0x23a>
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	4667      	mov	r7, ip
 8002594:	041b      	lsls	r3, r3, #16
 8002596:	431f      	orrs	r7, r3
 8002598:	46bc      	mov	ip, r7
 800259a:	2e38      	cmp	r6, #56	; 0x38
 800259c:	dd00      	ble.n	80025a0 <__aeabi_dsub+0x1d4>
 800259e:	e0eb      	b.n	8002778 <__aeabi_dsub+0x3ac>
 80025a0:	2e1f      	cmp	r6, #31
 80025a2:	dc00      	bgt.n	80025a6 <__aeabi_dsub+0x1da>
 80025a4:	e13a      	b.n	800281c <__aeabi_dsub+0x450>
 80025a6:	0033      	movs	r3, r6
 80025a8:	4667      	mov	r7, ip
 80025aa:	3b20      	subs	r3, #32
 80025ac:	40df      	lsrs	r7, r3
 80025ae:	003b      	movs	r3, r7
 80025b0:	2e20      	cmp	r6, #32
 80025b2:	d005      	beq.n	80025c0 <__aeabi_dsub+0x1f4>
 80025b4:	2740      	movs	r7, #64	; 0x40
 80025b6:	1bbf      	subs	r7, r7, r6
 80025b8:	4666      	mov	r6, ip
 80025ba:	40be      	lsls	r6, r7
 80025bc:	4332      	orrs	r2, r6
 80025be:	4690      	mov	r8, r2
 80025c0:	4646      	mov	r6, r8
 80025c2:	1e72      	subs	r2, r6, #1
 80025c4:	4196      	sbcs	r6, r2
 80025c6:	4333      	orrs	r3, r6
 80025c8:	e0da      	b.n	8002780 <__aeabi_dsub+0x3b4>
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d100      	bne.n	80025d0 <__aeabi_dsub+0x204>
 80025ce:	e214      	b.n	80029fa <__aeabi_dsub+0x62e>
 80025d0:	4663      	mov	r3, ip
 80025d2:	4313      	orrs	r3, r2
 80025d4:	d100      	bne.n	80025d8 <__aeabi_dsub+0x20c>
 80025d6:	e168      	b.n	80028aa <__aeabi_dsub+0x4de>
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	074e      	lsls	r6, r1, #29
 80025dc:	08c0      	lsrs	r0, r0, #3
 80025de:	08c9      	lsrs	r1, r1, #3
 80025e0:	031b      	lsls	r3, r3, #12
 80025e2:	4306      	orrs	r6, r0
 80025e4:	4219      	tst	r1, r3
 80025e6:	d008      	beq.n	80025fa <__aeabi_dsub+0x22e>
 80025e8:	4660      	mov	r0, ip
 80025ea:	08c0      	lsrs	r0, r0, #3
 80025ec:	4218      	tst	r0, r3
 80025ee:	d104      	bne.n	80025fa <__aeabi_dsub+0x22e>
 80025f0:	4663      	mov	r3, ip
 80025f2:	0001      	movs	r1, r0
 80025f4:	08d2      	lsrs	r2, r2, #3
 80025f6:	075e      	lsls	r6, r3, #29
 80025f8:	4316      	orrs	r6, r2
 80025fa:	00f3      	lsls	r3, r6, #3
 80025fc:	4699      	mov	r9, r3
 80025fe:	00c9      	lsls	r1, r1, #3
 8002600:	0f72      	lsrs	r2, r6, #29
 8002602:	4d44      	ldr	r5, [pc, #272]	; (8002714 <__aeabi_dsub+0x348>)
 8002604:	4311      	orrs	r1, r2
 8002606:	464b      	mov	r3, r9
 8002608:	08de      	lsrs	r6, r3, #3
 800260a:	4b42      	ldr	r3, [pc, #264]	; (8002714 <__aeabi_dsub+0x348>)
 800260c:	074f      	lsls	r7, r1, #29
 800260e:	4337      	orrs	r7, r6
 8002610:	08ca      	lsrs	r2, r1, #3
 8002612:	429d      	cmp	r5, r3
 8002614:	d100      	bne.n	8002618 <__aeabi_dsub+0x24c>
 8002616:	e06e      	b.n	80026f6 <__aeabi_dsub+0x32a>
 8002618:	0312      	lsls	r2, r2, #12
 800261a:	056d      	lsls	r5, r5, #21
 800261c:	0b12      	lsrs	r2, r2, #12
 800261e:	0d6d      	lsrs	r5, r5, #21
 8002620:	2100      	movs	r1, #0
 8002622:	0312      	lsls	r2, r2, #12
 8002624:	0b13      	lsrs	r3, r2, #12
 8002626:	0d0a      	lsrs	r2, r1, #20
 8002628:	0512      	lsls	r2, r2, #20
 800262a:	431a      	orrs	r2, r3
 800262c:	4b3b      	ldr	r3, [pc, #236]	; (800271c <__aeabi_dsub+0x350>)
 800262e:	052d      	lsls	r5, r5, #20
 8002630:	4013      	ands	r3, r2
 8002632:	432b      	orrs	r3, r5
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	07e4      	lsls	r4, r4, #31
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	4323      	orrs	r3, r4
 800263c:	0038      	movs	r0, r7
 800263e:	0019      	movs	r1, r3
 8002640:	bc3c      	pop	{r2, r3, r4, r5}
 8002642:	4690      	mov	r8, r2
 8002644:	4699      	mov	r9, r3
 8002646:	46a2      	mov	sl, r4
 8002648:	46ab      	mov	fp, r5
 800264a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800264c:	4663      	mov	r3, ip
 800264e:	4313      	orrs	r3, r2
 8002650:	d011      	beq.n	8002676 <__aeabi_dsub+0x2aa>
 8002652:	1e73      	subs	r3, r6, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d000      	beq.n	800265a <__aeabi_dsub+0x28e>
 8002658:	e107      	b.n	800286a <__aeabi_dsub+0x49e>
 800265a:	1886      	adds	r6, r0, r2
 800265c:	4286      	cmp	r6, r0
 800265e:	4180      	sbcs	r0, r0
 8002660:	4461      	add	r1, ip
 8002662:	4240      	negs	r0, r0
 8002664:	1809      	adds	r1, r1, r0
 8002666:	2501      	movs	r5, #1
 8002668:	020b      	lsls	r3, r1, #8
 800266a:	d537      	bpl.n	80026dc <__aeabi_dsub+0x310>
 800266c:	2502      	movs	r5, #2
 800266e:	e77b      	b.n	8002568 <__aeabi_dsub+0x19c>
 8002670:	003e      	movs	r6, r7
 8002672:	4661      	mov	r1, ip
 8002674:	4691      	mov	r9, r2
 8002676:	0035      	movs	r5, r6
 8002678:	e7c5      	b.n	8002606 <__aeabi_dsub+0x23a>
 800267a:	465c      	mov	r4, fp
 800267c:	2d00      	cmp	r5, #0
 800267e:	d000      	beq.n	8002682 <__aeabi_dsub+0x2b6>
 8002680:	e0e1      	b.n	8002846 <__aeabi_dsub+0x47a>
 8002682:	000b      	movs	r3, r1
 8002684:	4303      	orrs	r3, r0
 8002686:	d0f3      	beq.n	8002670 <__aeabi_dsub+0x2a4>
 8002688:	1c73      	adds	r3, r6, #1
 800268a:	d100      	bne.n	800268e <__aeabi_dsub+0x2c2>
 800268c:	e1ac      	b.n	80029e8 <__aeabi_dsub+0x61c>
 800268e:	4b21      	ldr	r3, [pc, #132]	; (8002714 <__aeabi_dsub+0x348>)
 8002690:	429f      	cmp	r7, r3
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x2ca>
 8002694:	e13a      	b.n	800290c <__aeabi_dsub+0x540>
 8002696:	43f3      	mvns	r3, r6
 8002698:	2b38      	cmp	r3, #56	; 0x38
 800269a:	dd00      	ble.n	800269e <__aeabi_dsub+0x2d2>
 800269c:	e16f      	b.n	800297e <__aeabi_dsub+0x5b2>
 800269e:	2b1f      	cmp	r3, #31
 80026a0:	dd00      	ble.n	80026a4 <__aeabi_dsub+0x2d8>
 80026a2:	e18c      	b.n	80029be <__aeabi_dsub+0x5f2>
 80026a4:	2520      	movs	r5, #32
 80026a6:	000e      	movs	r6, r1
 80026a8:	1aed      	subs	r5, r5, r3
 80026aa:	40ae      	lsls	r6, r5
 80026ac:	46b0      	mov	r8, r6
 80026ae:	0006      	movs	r6, r0
 80026b0:	46aa      	mov	sl, r5
 80026b2:	40de      	lsrs	r6, r3
 80026b4:	4645      	mov	r5, r8
 80026b6:	4335      	orrs	r5, r6
 80026b8:	002e      	movs	r6, r5
 80026ba:	4655      	mov	r5, sl
 80026bc:	40d9      	lsrs	r1, r3
 80026be:	40a8      	lsls	r0, r5
 80026c0:	4663      	mov	r3, ip
 80026c2:	1e45      	subs	r5, r0, #1
 80026c4:	41a8      	sbcs	r0, r5
 80026c6:	1a5b      	subs	r3, r3, r1
 80026c8:	469c      	mov	ip, r3
 80026ca:	4330      	orrs	r0, r6
 80026cc:	1a16      	subs	r6, r2, r0
 80026ce:	42b2      	cmp	r2, r6
 80026d0:	4192      	sbcs	r2, r2
 80026d2:	4663      	mov	r3, ip
 80026d4:	4252      	negs	r2, r2
 80026d6:	1a99      	subs	r1, r3, r2
 80026d8:	003d      	movs	r5, r7
 80026da:	e6b4      	b.n	8002446 <__aeabi_dsub+0x7a>
 80026dc:	2207      	movs	r2, #7
 80026de:	4032      	ands	r2, r6
 80026e0:	2a00      	cmp	r2, #0
 80026e2:	d000      	beq.n	80026e6 <__aeabi_dsub+0x31a>
 80026e4:	e6e4      	b.n	80024b0 <__aeabi_dsub+0xe4>
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <__aeabi_dsub+0x348>)
 80026e8:	08f6      	lsrs	r6, r6, #3
 80026ea:	074f      	lsls	r7, r1, #29
 80026ec:	4337      	orrs	r7, r6
 80026ee:	08ca      	lsrs	r2, r1, #3
 80026f0:	429d      	cmp	r5, r3
 80026f2:	d000      	beq.n	80026f6 <__aeabi_dsub+0x32a>
 80026f4:	e790      	b.n	8002618 <__aeabi_dsub+0x24c>
 80026f6:	003b      	movs	r3, r7
 80026f8:	4313      	orrs	r3, r2
 80026fa:	d100      	bne.n	80026fe <__aeabi_dsub+0x332>
 80026fc:	e1a6      	b.n	8002a4c <__aeabi_dsub+0x680>
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	031b      	lsls	r3, r3, #12
 8002702:	431a      	orrs	r2, r3
 8002704:	0312      	lsls	r2, r2, #12
 8002706:	0b12      	lsrs	r2, r2, #12
 8002708:	4d02      	ldr	r5, [pc, #8]	; (8002714 <__aeabi_dsub+0x348>)
 800270a:	e789      	b.n	8002620 <__aeabi_dsub+0x254>
 800270c:	0015      	movs	r5, r2
 800270e:	2200      	movs	r2, #0
 8002710:	2700      	movs	r7, #0
 8002712:	e785      	b.n	8002620 <__aeabi_dsub+0x254>
 8002714:	000007ff 	.word	0x000007ff
 8002718:	ff7fffff 	.word	0xff7fffff
 800271c:	800fffff 	.word	0x800fffff
 8002720:	2e00      	cmp	r6, #0
 8002722:	d000      	beq.n	8002726 <__aeabi_dsub+0x35a>
 8002724:	e0c7      	b.n	80028b6 <__aeabi_dsub+0x4ea>
 8002726:	1c6b      	adds	r3, r5, #1
 8002728:	055e      	lsls	r6, r3, #21
 800272a:	0d76      	lsrs	r6, r6, #21
 800272c:	2e01      	cmp	r6, #1
 800272e:	dc00      	bgt.n	8002732 <__aeabi_dsub+0x366>
 8002730:	e0f0      	b.n	8002914 <__aeabi_dsub+0x548>
 8002732:	4dc8      	ldr	r5, [pc, #800]	; (8002a54 <__aeabi_dsub+0x688>)
 8002734:	42ab      	cmp	r3, r5
 8002736:	d100      	bne.n	800273a <__aeabi_dsub+0x36e>
 8002738:	e0b9      	b.n	80028ae <__aeabi_dsub+0x4e2>
 800273a:	1885      	adds	r5, r0, r2
 800273c:	000a      	movs	r2, r1
 800273e:	4285      	cmp	r5, r0
 8002740:	4189      	sbcs	r1, r1
 8002742:	4462      	add	r2, ip
 8002744:	4249      	negs	r1, r1
 8002746:	1851      	adds	r1, r2, r1
 8002748:	2207      	movs	r2, #7
 800274a:	07ce      	lsls	r6, r1, #31
 800274c:	086d      	lsrs	r5, r5, #1
 800274e:	432e      	orrs	r6, r5
 8002750:	0849      	lsrs	r1, r1, #1
 8002752:	4032      	ands	r2, r6
 8002754:	001d      	movs	r5, r3
 8002756:	e6a9      	b.n	80024ac <__aeabi_dsub+0xe0>
 8002758:	49bf      	ldr	r1, [pc, #764]	; (8002a58 <__aeabi_dsub+0x68c>)
 800275a:	1aed      	subs	r5, r5, r3
 800275c:	4011      	ands	r1, r2
 800275e:	2207      	movs	r2, #7
 8002760:	4032      	ands	r2, r6
 8002762:	e6a3      	b.n	80024ac <__aeabi_dsub+0xe0>
 8002764:	0032      	movs	r2, r6
 8002766:	3828      	subs	r0, #40	; 0x28
 8002768:	4082      	lsls	r2, r0
 800276a:	2600      	movs	r6, #0
 800276c:	e686      	b.n	800247c <__aeabi_dsub+0xb0>
 800276e:	0030      	movs	r0, r6
 8002770:	f000 fad6 	bl	8002d20 <__clzsi2>
 8002774:	3020      	adds	r0, #32
 8002776:	e673      	b.n	8002460 <__aeabi_dsub+0x94>
 8002778:	4663      	mov	r3, ip
 800277a:	4313      	orrs	r3, r2
 800277c:	1e5a      	subs	r2, r3, #1
 800277e:	4193      	sbcs	r3, r2
 8002780:	1ac6      	subs	r6, r0, r3
 8002782:	42b0      	cmp	r0, r6
 8002784:	4180      	sbcs	r0, r0
 8002786:	4240      	negs	r0, r0
 8002788:	1a09      	subs	r1, r1, r0
 800278a:	e65c      	b.n	8002446 <__aeabi_dsub+0x7a>
 800278c:	000e      	movs	r6, r1
 800278e:	4667      	mov	r7, ip
 8002790:	4306      	orrs	r6, r0
 8002792:	4317      	orrs	r7, r2
 8002794:	2d00      	cmp	r5, #0
 8002796:	d15e      	bne.n	8002856 <__aeabi_dsub+0x48a>
 8002798:	2e00      	cmp	r6, #0
 800279a:	d000      	beq.n	800279e <__aeabi_dsub+0x3d2>
 800279c:	e0f3      	b.n	8002986 <__aeabi_dsub+0x5ba>
 800279e:	2f00      	cmp	r7, #0
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x3d8>
 80027a2:	e11e      	b.n	80029e2 <__aeabi_dsub+0x616>
 80027a4:	465c      	mov	r4, fp
 80027a6:	4661      	mov	r1, ip
 80027a8:	4691      	mov	r9, r2
 80027aa:	e72c      	b.n	8002606 <__aeabi_dsub+0x23a>
 80027ac:	4fa9      	ldr	r7, [pc, #676]	; (8002a54 <__aeabi_dsub+0x688>)
 80027ae:	42be      	cmp	r6, r7
 80027b0:	d07b      	beq.n	80028aa <__aeabi_dsub+0x4de>
 80027b2:	001e      	movs	r6, r3
 80027b4:	e6f1      	b.n	800259a <__aeabi_dsub+0x1ce>
 80027b6:	0010      	movs	r0, r2
 80027b8:	3d1f      	subs	r5, #31
 80027ba:	40e8      	lsrs	r0, r5
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d003      	beq.n	80027c8 <__aeabi_dsub+0x3fc>
 80027c0:	2140      	movs	r1, #64	; 0x40
 80027c2:	1acb      	subs	r3, r1, r3
 80027c4:	409a      	lsls	r2, r3
 80027c6:	4316      	orrs	r6, r2
 80027c8:	1e73      	subs	r3, r6, #1
 80027ca:	419e      	sbcs	r6, r3
 80027cc:	2207      	movs	r2, #7
 80027ce:	4306      	orrs	r6, r0
 80027d0:	4032      	ands	r2, r6
 80027d2:	2100      	movs	r1, #0
 80027d4:	2500      	movs	r5, #0
 80027d6:	e783      	b.n	80026e0 <__aeabi_dsub+0x314>
 80027d8:	1a16      	subs	r6, r2, r0
 80027da:	4663      	mov	r3, ip
 80027dc:	42b2      	cmp	r2, r6
 80027de:	4180      	sbcs	r0, r0
 80027e0:	1a59      	subs	r1, r3, r1
 80027e2:	4240      	negs	r0, r0
 80027e4:	1a0b      	subs	r3, r1, r0
 80027e6:	4698      	mov	r8, r3
 80027e8:	465c      	mov	r4, fp
 80027ea:	e632      	b.n	8002452 <__aeabi_dsub+0x86>
 80027ec:	2e1f      	cmp	r6, #31
 80027ee:	dd00      	ble.n	80027f2 <__aeabi_dsub+0x426>
 80027f0:	e0ab      	b.n	800294a <__aeabi_dsub+0x57e>
 80027f2:	2720      	movs	r7, #32
 80027f4:	1bbb      	subs	r3, r7, r6
 80027f6:	469a      	mov	sl, r3
 80027f8:	4663      	mov	r3, ip
 80027fa:	4657      	mov	r7, sl
 80027fc:	40bb      	lsls	r3, r7
 80027fe:	4699      	mov	r9, r3
 8002800:	0013      	movs	r3, r2
 8002802:	464f      	mov	r7, r9
 8002804:	40f3      	lsrs	r3, r6
 8002806:	431f      	orrs	r7, r3
 8002808:	003b      	movs	r3, r7
 800280a:	4657      	mov	r7, sl
 800280c:	40ba      	lsls	r2, r7
 800280e:	1e57      	subs	r7, r2, #1
 8002810:	41ba      	sbcs	r2, r7
 8002812:	4313      	orrs	r3, r2
 8002814:	4662      	mov	r2, ip
 8002816:	40f2      	lsrs	r2, r6
 8002818:	1889      	adds	r1, r1, r2
 800281a:	e698      	b.n	800254e <__aeabi_dsub+0x182>
 800281c:	2720      	movs	r7, #32
 800281e:	1bbb      	subs	r3, r7, r6
 8002820:	469a      	mov	sl, r3
 8002822:	4663      	mov	r3, ip
 8002824:	4657      	mov	r7, sl
 8002826:	40bb      	lsls	r3, r7
 8002828:	4699      	mov	r9, r3
 800282a:	0013      	movs	r3, r2
 800282c:	464f      	mov	r7, r9
 800282e:	40f3      	lsrs	r3, r6
 8002830:	431f      	orrs	r7, r3
 8002832:	003b      	movs	r3, r7
 8002834:	4657      	mov	r7, sl
 8002836:	40ba      	lsls	r2, r7
 8002838:	1e57      	subs	r7, r2, #1
 800283a:	41ba      	sbcs	r2, r7
 800283c:	4313      	orrs	r3, r2
 800283e:	4662      	mov	r2, ip
 8002840:	40f2      	lsrs	r2, r6
 8002842:	1a89      	subs	r1, r1, r2
 8002844:	e79c      	b.n	8002780 <__aeabi_dsub+0x3b4>
 8002846:	4b83      	ldr	r3, [pc, #524]	; (8002a54 <__aeabi_dsub+0x688>)
 8002848:	429f      	cmp	r7, r3
 800284a:	d05f      	beq.n	800290c <__aeabi_dsub+0x540>
 800284c:	2580      	movs	r5, #128	; 0x80
 800284e:	042d      	lsls	r5, r5, #16
 8002850:	4273      	negs	r3, r6
 8002852:	4329      	orrs	r1, r5
 8002854:	e720      	b.n	8002698 <__aeabi_dsub+0x2cc>
 8002856:	2e00      	cmp	r6, #0
 8002858:	d10c      	bne.n	8002874 <__aeabi_dsub+0x4a8>
 800285a:	2f00      	cmp	r7, #0
 800285c:	d100      	bne.n	8002860 <__aeabi_dsub+0x494>
 800285e:	e0d0      	b.n	8002a02 <__aeabi_dsub+0x636>
 8002860:	465c      	mov	r4, fp
 8002862:	4661      	mov	r1, ip
 8002864:	4691      	mov	r9, r2
 8002866:	4d7b      	ldr	r5, [pc, #492]	; (8002a54 <__aeabi_dsub+0x688>)
 8002868:	e6cd      	b.n	8002606 <__aeabi_dsub+0x23a>
 800286a:	4f7a      	ldr	r7, [pc, #488]	; (8002a54 <__aeabi_dsub+0x688>)
 800286c:	42be      	cmp	r6, r7
 800286e:	d01c      	beq.n	80028aa <__aeabi_dsub+0x4de>
 8002870:	001e      	movs	r6, r3
 8002872:	e665      	b.n	8002540 <__aeabi_dsub+0x174>
 8002874:	2f00      	cmp	r7, #0
 8002876:	d018      	beq.n	80028aa <__aeabi_dsub+0x4de>
 8002878:	08c0      	lsrs	r0, r0, #3
 800287a:	074e      	lsls	r6, r1, #29
 800287c:	4306      	orrs	r6, r0
 800287e:	2080      	movs	r0, #128	; 0x80
 8002880:	08c9      	lsrs	r1, r1, #3
 8002882:	0300      	lsls	r0, r0, #12
 8002884:	4201      	tst	r1, r0
 8002886:	d008      	beq.n	800289a <__aeabi_dsub+0x4ce>
 8002888:	4663      	mov	r3, ip
 800288a:	08dc      	lsrs	r4, r3, #3
 800288c:	4204      	tst	r4, r0
 800288e:	d104      	bne.n	800289a <__aeabi_dsub+0x4ce>
 8002890:	0021      	movs	r1, r4
 8002892:	46da      	mov	sl, fp
 8002894:	08d2      	lsrs	r2, r2, #3
 8002896:	075e      	lsls	r6, r3, #29
 8002898:	4316      	orrs	r6, r2
 800289a:	00f3      	lsls	r3, r6, #3
 800289c:	4699      	mov	r9, r3
 800289e:	2401      	movs	r4, #1
 80028a0:	4653      	mov	r3, sl
 80028a2:	00c9      	lsls	r1, r1, #3
 80028a4:	0f72      	lsrs	r2, r6, #29
 80028a6:	4311      	orrs	r1, r2
 80028a8:	401c      	ands	r4, r3
 80028aa:	4d6a      	ldr	r5, [pc, #424]	; (8002a54 <__aeabi_dsub+0x688>)
 80028ac:	e6ab      	b.n	8002606 <__aeabi_dsub+0x23a>
 80028ae:	001d      	movs	r5, r3
 80028b0:	2200      	movs	r2, #0
 80028b2:	2700      	movs	r7, #0
 80028b4:	e6b4      	b.n	8002620 <__aeabi_dsub+0x254>
 80028b6:	2d00      	cmp	r5, #0
 80028b8:	d159      	bne.n	800296e <__aeabi_dsub+0x5a2>
 80028ba:	000b      	movs	r3, r1
 80028bc:	4303      	orrs	r3, r0
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x4f6>
 80028c0:	e6d6      	b.n	8002670 <__aeabi_dsub+0x2a4>
 80028c2:	1c73      	adds	r3, r6, #1
 80028c4:	d100      	bne.n	80028c8 <__aeabi_dsub+0x4fc>
 80028c6:	e0b2      	b.n	8002a2e <__aeabi_dsub+0x662>
 80028c8:	4b62      	ldr	r3, [pc, #392]	; (8002a54 <__aeabi_dsub+0x688>)
 80028ca:	429f      	cmp	r7, r3
 80028cc:	d01e      	beq.n	800290c <__aeabi_dsub+0x540>
 80028ce:	43f3      	mvns	r3, r6
 80028d0:	2b38      	cmp	r3, #56	; 0x38
 80028d2:	dc6f      	bgt.n	80029b4 <__aeabi_dsub+0x5e8>
 80028d4:	2b1f      	cmp	r3, #31
 80028d6:	dd00      	ble.n	80028da <__aeabi_dsub+0x50e>
 80028d8:	e097      	b.n	8002a0a <__aeabi_dsub+0x63e>
 80028da:	2520      	movs	r5, #32
 80028dc:	000e      	movs	r6, r1
 80028de:	1aed      	subs	r5, r5, r3
 80028e0:	40ae      	lsls	r6, r5
 80028e2:	46b0      	mov	r8, r6
 80028e4:	0006      	movs	r6, r0
 80028e6:	46aa      	mov	sl, r5
 80028e8:	40de      	lsrs	r6, r3
 80028ea:	4645      	mov	r5, r8
 80028ec:	4335      	orrs	r5, r6
 80028ee:	002e      	movs	r6, r5
 80028f0:	4655      	mov	r5, sl
 80028f2:	40a8      	lsls	r0, r5
 80028f4:	40d9      	lsrs	r1, r3
 80028f6:	1e45      	subs	r5, r0, #1
 80028f8:	41a8      	sbcs	r0, r5
 80028fa:	448c      	add	ip, r1
 80028fc:	4306      	orrs	r6, r0
 80028fe:	18b6      	adds	r6, r6, r2
 8002900:	4296      	cmp	r6, r2
 8002902:	4192      	sbcs	r2, r2
 8002904:	4251      	negs	r1, r2
 8002906:	4461      	add	r1, ip
 8002908:	003d      	movs	r5, r7
 800290a:	e625      	b.n	8002558 <__aeabi_dsub+0x18c>
 800290c:	003d      	movs	r5, r7
 800290e:	4661      	mov	r1, ip
 8002910:	4691      	mov	r9, r2
 8002912:	e678      	b.n	8002606 <__aeabi_dsub+0x23a>
 8002914:	000b      	movs	r3, r1
 8002916:	4303      	orrs	r3, r0
 8002918:	2d00      	cmp	r5, #0
 800291a:	d000      	beq.n	800291e <__aeabi_dsub+0x552>
 800291c:	e655      	b.n	80025ca <__aeabi_dsub+0x1fe>
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f5      	beq.n	800290e <__aeabi_dsub+0x542>
 8002922:	4663      	mov	r3, ip
 8002924:	4313      	orrs	r3, r2
 8002926:	d100      	bne.n	800292a <__aeabi_dsub+0x55e>
 8002928:	e66d      	b.n	8002606 <__aeabi_dsub+0x23a>
 800292a:	1886      	adds	r6, r0, r2
 800292c:	4286      	cmp	r6, r0
 800292e:	4180      	sbcs	r0, r0
 8002930:	4461      	add	r1, ip
 8002932:	4240      	negs	r0, r0
 8002934:	1809      	adds	r1, r1, r0
 8002936:	2200      	movs	r2, #0
 8002938:	020b      	lsls	r3, r1, #8
 800293a:	d400      	bmi.n	800293e <__aeabi_dsub+0x572>
 800293c:	e6d0      	b.n	80026e0 <__aeabi_dsub+0x314>
 800293e:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <__aeabi_dsub+0x68c>)
 8002940:	3501      	adds	r5, #1
 8002942:	4019      	ands	r1, r3
 8002944:	e5b2      	b.n	80024ac <__aeabi_dsub+0xe0>
 8002946:	46b1      	mov	r9, r6
 8002948:	e65d      	b.n	8002606 <__aeabi_dsub+0x23a>
 800294a:	0033      	movs	r3, r6
 800294c:	4667      	mov	r7, ip
 800294e:	3b20      	subs	r3, #32
 8002950:	40df      	lsrs	r7, r3
 8002952:	003b      	movs	r3, r7
 8002954:	2e20      	cmp	r6, #32
 8002956:	d005      	beq.n	8002964 <__aeabi_dsub+0x598>
 8002958:	2740      	movs	r7, #64	; 0x40
 800295a:	1bbf      	subs	r7, r7, r6
 800295c:	4666      	mov	r6, ip
 800295e:	40be      	lsls	r6, r7
 8002960:	4332      	orrs	r2, r6
 8002962:	4690      	mov	r8, r2
 8002964:	4646      	mov	r6, r8
 8002966:	1e72      	subs	r2, r6, #1
 8002968:	4196      	sbcs	r6, r2
 800296a:	4333      	orrs	r3, r6
 800296c:	e5ef      	b.n	800254e <__aeabi_dsub+0x182>
 800296e:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <__aeabi_dsub+0x688>)
 8002970:	429f      	cmp	r7, r3
 8002972:	d0cb      	beq.n	800290c <__aeabi_dsub+0x540>
 8002974:	2580      	movs	r5, #128	; 0x80
 8002976:	042d      	lsls	r5, r5, #16
 8002978:	4273      	negs	r3, r6
 800297a:	4329      	orrs	r1, r5
 800297c:	e7a8      	b.n	80028d0 <__aeabi_dsub+0x504>
 800297e:	4308      	orrs	r0, r1
 8002980:	1e41      	subs	r1, r0, #1
 8002982:	4188      	sbcs	r0, r1
 8002984:	e6a2      	b.n	80026cc <__aeabi_dsub+0x300>
 8002986:	2f00      	cmp	r7, #0
 8002988:	d100      	bne.n	800298c <__aeabi_dsub+0x5c0>
 800298a:	e63c      	b.n	8002606 <__aeabi_dsub+0x23a>
 800298c:	4663      	mov	r3, ip
 800298e:	1a86      	subs	r6, r0, r2
 8002990:	1acf      	subs	r7, r1, r3
 8002992:	42b0      	cmp	r0, r6
 8002994:	419b      	sbcs	r3, r3
 8002996:	425b      	negs	r3, r3
 8002998:	1afb      	subs	r3, r7, r3
 800299a:	4698      	mov	r8, r3
 800299c:	021b      	lsls	r3, r3, #8
 800299e:	d54e      	bpl.n	8002a3e <__aeabi_dsub+0x672>
 80029a0:	1a16      	subs	r6, r2, r0
 80029a2:	4663      	mov	r3, ip
 80029a4:	42b2      	cmp	r2, r6
 80029a6:	4192      	sbcs	r2, r2
 80029a8:	1a59      	subs	r1, r3, r1
 80029aa:	4252      	negs	r2, r2
 80029ac:	1a89      	subs	r1, r1, r2
 80029ae:	465c      	mov	r4, fp
 80029b0:	2200      	movs	r2, #0
 80029b2:	e57b      	b.n	80024ac <__aeabi_dsub+0xe0>
 80029b4:	4301      	orrs	r1, r0
 80029b6:	000e      	movs	r6, r1
 80029b8:	1e71      	subs	r1, r6, #1
 80029ba:	418e      	sbcs	r6, r1
 80029bc:	e79f      	b.n	80028fe <__aeabi_dsub+0x532>
 80029be:	001d      	movs	r5, r3
 80029c0:	000e      	movs	r6, r1
 80029c2:	3d20      	subs	r5, #32
 80029c4:	40ee      	lsrs	r6, r5
 80029c6:	46b0      	mov	r8, r6
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d004      	beq.n	80029d6 <__aeabi_dsub+0x60a>
 80029cc:	2540      	movs	r5, #64	; 0x40
 80029ce:	1aeb      	subs	r3, r5, r3
 80029d0:	4099      	lsls	r1, r3
 80029d2:	4308      	orrs	r0, r1
 80029d4:	4681      	mov	r9, r0
 80029d6:	4648      	mov	r0, r9
 80029d8:	4643      	mov	r3, r8
 80029da:	1e41      	subs	r1, r0, #1
 80029dc:	4188      	sbcs	r0, r1
 80029de:	4318      	orrs	r0, r3
 80029e0:	e674      	b.n	80026cc <__aeabi_dsub+0x300>
 80029e2:	2200      	movs	r2, #0
 80029e4:	2400      	movs	r4, #0
 80029e6:	e617      	b.n	8002618 <__aeabi_dsub+0x24c>
 80029e8:	1a16      	subs	r6, r2, r0
 80029ea:	4663      	mov	r3, ip
 80029ec:	42b2      	cmp	r2, r6
 80029ee:	4192      	sbcs	r2, r2
 80029f0:	1a59      	subs	r1, r3, r1
 80029f2:	4252      	negs	r2, r2
 80029f4:	1a89      	subs	r1, r1, r2
 80029f6:	003d      	movs	r5, r7
 80029f8:	e525      	b.n	8002446 <__aeabi_dsub+0x7a>
 80029fa:	4661      	mov	r1, ip
 80029fc:	4691      	mov	r9, r2
 80029fe:	4d15      	ldr	r5, [pc, #84]	; (8002a54 <__aeabi_dsub+0x688>)
 8002a00:	e601      	b.n	8002606 <__aeabi_dsub+0x23a>
 8002a02:	2280      	movs	r2, #128	; 0x80
 8002a04:	2400      	movs	r4, #0
 8002a06:	0312      	lsls	r2, r2, #12
 8002a08:	e679      	b.n	80026fe <__aeabi_dsub+0x332>
 8002a0a:	001d      	movs	r5, r3
 8002a0c:	000e      	movs	r6, r1
 8002a0e:	3d20      	subs	r5, #32
 8002a10:	40ee      	lsrs	r6, r5
 8002a12:	46b0      	mov	r8, r6
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d004      	beq.n	8002a22 <__aeabi_dsub+0x656>
 8002a18:	2540      	movs	r5, #64	; 0x40
 8002a1a:	1aeb      	subs	r3, r5, r3
 8002a1c:	4099      	lsls	r1, r3
 8002a1e:	4308      	orrs	r0, r1
 8002a20:	4681      	mov	r9, r0
 8002a22:	464e      	mov	r6, r9
 8002a24:	4643      	mov	r3, r8
 8002a26:	1e71      	subs	r1, r6, #1
 8002a28:	418e      	sbcs	r6, r1
 8002a2a:	431e      	orrs	r6, r3
 8002a2c:	e767      	b.n	80028fe <__aeabi_dsub+0x532>
 8002a2e:	1886      	adds	r6, r0, r2
 8002a30:	4296      	cmp	r6, r2
 8002a32:	419b      	sbcs	r3, r3
 8002a34:	4461      	add	r1, ip
 8002a36:	425b      	negs	r3, r3
 8002a38:	18c9      	adds	r1, r1, r3
 8002a3a:	003d      	movs	r5, r7
 8002a3c:	e58c      	b.n	8002558 <__aeabi_dsub+0x18c>
 8002a3e:	4647      	mov	r7, r8
 8002a40:	4337      	orrs	r7, r6
 8002a42:	d0ce      	beq.n	80029e2 <__aeabi_dsub+0x616>
 8002a44:	2207      	movs	r2, #7
 8002a46:	4641      	mov	r1, r8
 8002a48:	4032      	ands	r2, r6
 8002a4a:	e649      	b.n	80026e0 <__aeabi_dsub+0x314>
 8002a4c:	2700      	movs	r7, #0
 8002a4e:	003a      	movs	r2, r7
 8002a50:	e5e6      	b.n	8002620 <__aeabi_dsub+0x254>
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	000007ff 	.word	0x000007ff
 8002a58:	ff7fffff 	.word	0xff7fffff

08002a5c <__aeabi_dcmpun>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	4e0c      	ldr	r6, [pc, #48]	; (8002a90 <__aeabi_dcmpun+0x34>)
 8002a60:	030d      	lsls	r5, r1, #12
 8002a62:	031c      	lsls	r4, r3, #12
 8002a64:	0049      	lsls	r1, r1, #1
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	0b2d      	lsrs	r5, r5, #12
 8002a6a:	0d49      	lsrs	r1, r1, #21
 8002a6c:	0b24      	lsrs	r4, r4, #12
 8002a6e:	0d5b      	lsrs	r3, r3, #21
 8002a70:	42b1      	cmp	r1, r6
 8002a72:	d008      	beq.n	8002a86 <__aeabi_dcmpun+0x2a>
 8002a74:	4906      	ldr	r1, [pc, #24]	; (8002a90 <__aeabi_dcmpun+0x34>)
 8002a76:	2000      	movs	r0, #0
 8002a78:	428b      	cmp	r3, r1
 8002a7a:	d103      	bne.n	8002a84 <__aeabi_dcmpun+0x28>
 8002a7c:	4314      	orrs	r4, r2
 8002a7e:	0020      	movs	r0, r4
 8002a80:	1e44      	subs	r4, r0, #1
 8002a82:	41a0      	sbcs	r0, r4
 8002a84:	bd70      	pop	{r4, r5, r6, pc}
 8002a86:	4305      	orrs	r5, r0
 8002a88:	2001      	movs	r0, #1
 8002a8a:	2d00      	cmp	r5, #0
 8002a8c:	d1fa      	bne.n	8002a84 <__aeabi_dcmpun+0x28>
 8002a8e:	e7f1      	b.n	8002a74 <__aeabi_dcmpun+0x18>
 8002a90:	000007ff 	.word	0x000007ff

08002a94 <__aeabi_d2iz>:
 8002a94:	b530      	push	{r4, r5, lr}
 8002a96:	4d14      	ldr	r5, [pc, #80]	; (8002ae8 <__aeabi_d2iz+0x54>)
 8002a98:	030a      	lsls	r2, r1, #12
 8002a9a:	004b      	lsls	r3, r1, #1
 8002a9c:	0b12      	lsrs	r2, r2, #12
 8002a9e:	0d5b      	lsrs	r3, r3, #21
 8002aa0:	0fc9      	lsrs	r1, r1, #31
 8002aa2:	2400      	movs	r4, #0
 8002aa4:	42ab      	cmp	r3, r5
 8002aa6:	dd11      	ble.n	8002acc <__aeabi_d2iz+0x38>
 8002aa8:	4c10      	ldr	r4, [pc, #64]	; (8002aec <__aeabi_d2iz+0x58>)
 8002aaa:	42a3      	cmp	r3, r4
 8002aac:	dc10      	bgt.n	8002ad0 <__aeabi_d2iz+0x3c>
 8002aae:	2480      	movs	r4, #128	; 0x80
 8002ab0:	0364      	lsls	r4, r4, #13
 8002ab2:	4322      	orrs	r2, r4
 8002ab4:	4c0e      	ldr	r4, [pc, #56]	; (8002af0 <__aeabi_d2iz+0x5c>)
 8002ab6:	1ae4      	subs	r4, r4, r3
 8002ab8:	2c1f      	cmp	r4, #31
 8002aba:	dd0c      	ble.n	8002ad6 <__aeabi_d2iz+0x42>
 8002abc:	480d      	ldr	r0, [pc, #52]	; (8002af4 <__aeabi_d2iz+0x60>)
 8002abe:	1ac3      	subs	r3, r0, r3
 8002ac0:	40da      	lsrs	r2, r3
 8002ac2:	0013      	movs	r3, r2
 8002ac4:	425c      	negs	r4, r3
 8002ac6:	2900      	cmp	r1, #0
 8002ac8:	d100      	bne.n	8002acc <__aeabi_d2iz+0x38>
 8002aca:	001c      	movs	r4, r3
 8002acc:	0020      	movs	r0, r4
 8002ace:	bd30      	pop	{r4, r5, pc}
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <__aeabi_d2iz+0x64>)
 8002ad2:	18cc      	adds	r4, r1, r3
 8002ad4:	e7fa      	b.n	8002acc <__aeabi_d2iz+0x38>
 8002ad6:	4d09      	ldr	r5, [pc, #36]	; (8002afc <__aeabi_d2iz+0x68>)
 8002ad8:	40e0      	lsrs	r0, r4
 8002ada:	46ac      	mov	ip, r5
 8002adc:	4463      	add	r3, ip
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	0013      	movs	r3, r2
 8002ae2:	4303      	orrs	r3, r0
 8002ae4:	e7ee      	b.n	8002ac4 <__aeabi_d2iz+0x30>
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	000003fe 	.word	0x000003fe
 8002aec:	0000041d 	.word	0x0000041d
 8002af0:	00000433 	.word	0x00000433
 8002af4:	00000413 	.word	0x00000413
 8002af8:	7fffffff 	.word	0x7fffffff
 8002afc:	fffffbed 	.word	0xfffffbed

08002b00 <__aeabi_i2d>:
 8002b00:	b570      	push	{r4, r5, r6, lr}
 8002b02:	2800      	cmp	r0, #0
 8002b04:	d02d      	beq.n	8002b62 <__aeabi_i2d+0x62>
 8002b06:	17c3      	asrs	r3, r0, #31
 8002b08:	18c5      	adds	r5, r0, r3
 8002b0a:	405d      	eors	r5, r3
 8002b0c:	0fc4      	lsrs	r4, r0, #31
 8002b0e:	0028      	movs	r0, r5
 8002b10:	f000 f906 	bl	8002d20 <__clzsi2>
 8002b14:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <__aeabi_i2d+0x6c>)
 8002b16:	1a1b      	subs	r3, r3, r0
 8002b18:	055b      	lsls	r3, r3, #21
 8002b1a:	0d5b      	lsrs	r3, r3, #21
 8002b1c:	280a      	cmp	r0, #10
 8002b1e:	dd15      	ble.n	8002b4c <__aeabi_i2d+0x4c>
 8002b20:	380b      	subs	r0, #11
 8002b22:	4085      	lsls	r5, r0
 8002b24:	2200      	movs	r2, #0
 8002b26:	032d      	lsls	r5, r5, #12
 8002b28:	0b2d      	lsrs	r5, r5, #12
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	0010      	movs	r0, r2
 8002b2e:	032d      	lsls	r5, r5, #12
 8002b30:	0d0a      	lsrs	r2, r1, #20
 8002b32:	0b2d      	lsrs	r5, r5, #12
 8002b34:	0512      	lsls	r2, r2, #20
 8002b36:	432a      	orrs	r2, r5
 8002b38:	4d0d      	ldr	r5, [pc, #52]	; (8002b70 <__aeabi_i2d+0x70>)
 8002b3a:	051b      	lsls	r3, r3, #20
 8002b3c:	402a      	ands	r2, r5
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	07e4      	lsls	r4, r4, #31
 8002b44:	085b      	lsrs	r3, r3, #1
 8002b46:	4323      	orrs	r3, r4
 8002b48:	0019      	movs	r1, r3
 8002b4a:	bd70      	pop	{r4, r5, r6, pc}
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	0029      	movs	r1, r5
 8002b50:	3215      	adds	r2, #21
 8002b52:	4091      	lsls	r1, r2
 8002b54:	000a      	movs	r2, r1
 8002b56:	210b      	movs	r1, #11
 8002b58:	1a08      	subs	r0, r1, r0
 8002b5a:	40c5      	lsrs	r5, r0
 8002b5c:	032d      	lsls	r5, r5, #12
 8002b5e:	0b2d      	lsrs	r5, r5, #12
 8002b60:	e7e3      	b.n	8002b2a <__aeabi_i2d+0x2a>
 8002b62:	2400      	movs	r4, #0
 8002b64:	2300      	movs	r3, #0
 8002b66:	2500      	movs	r5, #0
 8002b68:	2200      	movs	r2, #0
 8002b6a:	e7de      	b.n	8002b2a <__aeabi_i2d+0x2a>
 8002b6c:	0000041e 	.word	0x0000041e
 8002b70:	800fffff 	.word	0x800fffff

08002b74 <__aeabi_f2d>:
 8002b74:	0041      	lsls	r1, r0, #1
 8002b76:	0e09      	lsrs	r1, r1, #24
 8002b78:	1c4b      	adds	r3, r1, #1
 8002b7a:	b570      	push	{r4, r5, r6, lr}
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	0246      	lsls	r6, r0, #9
 8002b80:	0a75      	lsrs	r5, r6, #9
 8002b82:	0fc4      	lsrs	r4, r0, #31
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	dd14      	ble.n	8002bb2 <__aeabi_f2d+0x3e>
 8002b88:	23e0      	movs	r3, #224	; 0xe0
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	076d      	lsls	r5, r5, #29
 8002b8e:	0b36      	lsrs	r6, r6, #12
 8002b90:	18cb      	adds	r3, r1, r3
 8002b92:	2100      	movs	r1, #0
 8002b94:	0d0a      	lsrs	r2, r1, #20
 8002b96:	0028      	movs	r0, r5
 8002b98:	0512      	lsls	r2, r2, #20
 8002b9a:	4d1c      	ldr	r5, [pc, #112]	; (8002c0c <__aeabi_f2d+0x98>)
 8002b9c:	4332      	orrs	r2, r6
 8002b9e:	055b      	lsls	r3, r3, #21
 8002ba0:	402a      	ands	r2, r5
 8002ba2:	085b      	lsrs	r3, r3, #1
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	07e4      	lsls	r4, r4, #31
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	4323      	orrs	r3, r4
 8002bae:	0019      	movs	r1, r3
 8002bb0:	bd70      	pop	{r4, r5, r6, pc}
 8002bb2:	2900      	cmp	r1, #0
 8002bb4:	d114      	bne.n	8002be0 <__aeabi_f2d+0x6c>
 8002bb6:	2d00      	cmp	r5, #0
 8002bb8:	d01e      	beq.n	8002bf8 <__aeabi_f2d+0x84>
 8002bba:	0028      	movs	r0, r5
 8002bbc:	f000 f8b0 	bl	8002d20 <__clzsi2>
 8002bc0:	280a      	cmp	r0, #10
 8002bc2:	dc1c      	bgt.n	8002bfe <__aeabi_f2d+0x8a>
 8002bc4:	230b      	movs	r3, #11
 8002bc6:	002a      	movs	r2, r5
 8002bc8:	1a1b      	subs	r3, r3, r0
 8002bca:	40da      	lsrs	r2, r3
 8002bcc:	0003      	movs	r3, r0
 8002bce:	3315      	adds	r3, #21
 8002bd0:	409d      	lsls	r5, r3
 8002bd2:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <__aeabi_f2d+0x9c>)
 8002bd4:	0312      	lsls	r2, r2, #12
 8002bd6:	1a1b      	subs	r3, r3, r0
 8002bd8:	055b      	lsls	r3, r3, #21
 8002bda:	0b16      	lsrs	r6, r2, #12
 8002bdc:	0d5b      	lsrs	r3, r3, #21
 8002bde:	e7d8      	b.n	8002b92 <__aeabi_f2d+0x1e>
 8002be0:	2d00      	cmp	r5, #0
 8002be2:	d006      	beq.n	8002bf2 <__aeabi_f2d+0x7e>
 8002be4:	0b32      	lsrs	r2, r6, #12
 8002be6:	2680      	movs	r6, #128	; 0x80
 8002be8:	0336      	lsls	r6, r6, #12
 8002bea:	076d      	lsls	r5, r5, #29
 8002bec:	4316      	orrs	r6, r2
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <__aeabi_f2d+0xa0>)
 8002bf0:	e7cf      	b.n	8002b92 <__aeabi_f2d+0x1e>
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <__aeabi_f2d+0xa0>)
 8002bf4:	2600      	movs	r6, #0
 8002bf6:	e7cc      	b.n	8002b92 <__aeabi_f2d+0x1e>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	2600      	movs	r6, #0
 8002bfc:	e7c9      	b.n	8002b92 <__aeabi_f2d+0x1e>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	002a      	movs	r2, r5
 8002c02:	3b0b      	subs	r3, #11
 8002c04:	409a      	lsls	r2, r3
 8002c06:	2500      	movs	r5, #0
 8002c08:	e7e3      	b.n	8002bd2 <__aeabi_f2d+0x5e>
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	800fffff 	.word	0x800fffff
 8002c10:	00000389 	.word	0x00000389
 8002c14:	000007ff 	.word	0x000007ff

08002c18 <__aeabi_d2f>:
 8002c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c1a:	004c      	lsls	r4, r1, #1
 8002c1c:	0d64      	lsrs	r4, r4, #21
 8002c1e:	030b      	lsls	r3, r1, #12
 8002c20:	1c62      	adds	r2, r4, #1
 8002c22:	0a5b      	lsrs	r3, r3, #9
 8002c24:	0f46      	lsrs	r6, r0, #29
 8002c26:	0552      	lsls	r2, r2, #21
 8002c28:	0fc9      	lsrs	r1, r1, #31
 8002c2a:	431e      	orrs	r6, r3
 8002c2c:	00c5      	lsls	r5, r0, #3
 8002c2e:	0d52      	lsrs	r2, r2, #21
 8002c30:	2a01      	cmp	r2, #1
 8002c32:	dd29      	ble.n	8002c88 <__aeabi_d2f+0x70>
 8002c34:	4b37      	ldr	r3, [pc, #220]	; (8002d14 <__aeabi_d2f+0xfc>)
 8002c36:	18e7      	adds	r7, r4, r3
 8002c38:	2ffe      	cmp	r7, #254	; 0xfe
 8002c3a:	dc1c      	bgt.n	8002c76 <__aeabi_d2f+0x5e>
 8002c3c:	2f00      	cmp	r7, #0
 8002c3e:	dd3b      	ble.n	8002cb8 <__aeabi_d2f+0xa0>
 8002c40:	0180      	lsls	r0, r0, #6
 8002c42:	1e43      	subs	r3, r0, #1
 8002c44:	4198      	sbcs	r0, r3
 8002c46:	2207      	movs	r2, #7
 8002c48:	00f3      	lsls	r3, r6, #3
 8002c4a:	0f6d      	lsrs	r5, r5, #29
 8002c4c:	4303      	orrs	r3, r0
 8002c4e:	432b      	orrs	r3, r5
 8002c50:	401a      	ands	r2, r3
 8002c52:	2a00      	cmp	r2, #0
 8002c54:	d004      	beq.n	8002c60 <__aeabi_d2f+0x48>
 8002c56:	220f      	movs	r2, #15
 8002c58:	401a      	ands	r2, r3
 8002c5a:	2a04      	cmp	r2, #4
 8002c5c:	d000      	beq.n	8002c60 <__aeabi_d2f+0x48>
 8002c5e:	3304      	adds	r3, #4
 8002c60:	2280      	movs	r2, #128	; 0x80
 8002c62:	04d2      	lsls	r2, r2, #19
 8002c64:	401a      	ands	r2, r3
 8002c66:	d024      	beq.n	8002cb2 <__aeabi_d2f+0x9a>
 8002c68:	3701      	adds	r7, #1
 8002c6a:	b2fa      	uxtb	r2, r7
 8002c6c:	2fff      	cmp	r7, #255	; 0xff
 8002c6e:	d002      	beq.n	8002c76 <__aeabi_d2f+0x5e>
 8002c70:	019b      	lsls	r3, r3, #6
 8002c72:	0a58      	lsrs	r0, r3, #9
 8002c74:	e001      	b.n	8002c7a <__aeabi_d2f+0x62>
 8002c76:	22ff      	movs	r2, #255	; 0xff
 8002c78:	2000      	movs	r0, #0
 8002c7a:	0240      	lsls	r0, r0, #9
 8002c7c:	05d2      	lsls	r2, r2, #23
 8002c7e:	0a40      	lsrs	r0, r0, #9
 8002c80:	07c9      	lsls	r1, r1, #31
 8002c82:	4310      	orrs	r0, r2
 8002c84:	4308      	orrs	r0, r1
 8002c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c88:	4335      	orrs	r5, r6
 8002c8a:	2c00      	cmp	r4, #0
 8002c8c:	d104      	bne.n	8002c98 <__aeabi_d2f+0x80>
 8002c8e:	2d00      	cmp	r5, #0
 8002c90:	d10a      	bne.n	8002ca8 <__aeabi_d2f+0x90>
 8002c92:	2200      	movs	r2, #0
 8002c94:	2000      	movs	r0, #0
 8002c96:	e7f0      	b.n	8002c7a <__aeabi_d2f+0x62>
 8002c98:	2d00      	cmp	r5, #0
 8002c9a:	d0ec      	beq.n	8002c76 <__aeabi_d2f+0x5e>
 8002c9c:	2080      	movs	r0, #128	; 0x80
 8002c9e:	03c0      	lsls	r0, r0, #15
 8002ca0:	4330      	orrs	r0, r6
 8002ca2:	22ff      	movs	r2, #255	; 0xff
 8002ca4:	e7e9      	b.n	8002c7a <__aeabi_d2f+0x62>
 8002ca6:	2400      	movs	r4, #0
 8002ca8:	2300      	movs	r3, #0
 8002caa:	025b      	lsls	r3, r3, #9
 8002cac:	0a58      	lsrs	r0, r3, #9
 8002cae:	b2e2      	uxtb	r2, r4
 8002cb0:	e7e3      	b.n	8002c7a <__aeabi_d2f+0x62>
 8002cb2:	08db      	lsrs	r3, r3, #3
 8002cb4:	003c      	movs	r4, r7
 8002cb6:	e7f8      	b.n	8002caa <__aeabi_d2f+0x92>
 8002cb8:	003b      	movs	r3, r7
 8002cba:	3317      	adds	r3, #23
 8002cbc:	dbf3      	blt.n	8002ca6 <__aeabi_d2f+0x8e>
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	041b      	lsls	r3, r3, #16
 8002cc2:	4333      	orrs	r3, r6
 8002cc4:	261e      	movs	r6, #30
 8002cc6:	1bf6      	subs	r6, r6, r7
 8002cc8:	2e1f      	cmp	r6, #31
 8002cca:	dd14      	ble.n	8002cf6 <__aeabi_d2f+0xde>
 8002ccc:	2202      	movs	r2, #2
 8002cce:	4252      	negs	r2, r2
 8002cd0:	1bd7      	subs	r7, r2, r7
 8002cd2:	001a      	movs	r2, r3
 8002cd4:	40fa      	lsrs	r2, r7
 8002cd6:	0017      	movs	r7, r2
 8002cd8:	2e20      	cmp	r6, #32
 8002cda:	d004      	beq.n	8002ce6 <__aeabi_d2f+0xce>
 8002cdc:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <__aeabi_d2f+0x100>)
 8002cde:	4694      	mov	ip, r2
 8002ce0:	4464      	add	r4, ip
 8002ce2:	40a3      	lsls	r3, r4
 8002ce4:	431d      	orrs	r5, r3
 8002ce6:	002b      	movs	r3, r5
 8002ce8:	1e5d      	subs	r5, r3, #1
 8002cea:	41ab      	sbcs	r3, r5
 8002cec:	2207      	movs	r2, #7
 8002cee:	433b      	orrs	r3, r7
 8002cf0:	401a      	ands	r2, r3
 8002cf2:	2700      	movs	r7, #0
 8002cf4:	e7ad      	b.n	8002c52 <__aeabi_d2f+0x3a>
 8002cf6:	4a09      	ldr	r2, [pc, #36]	; (8002d1c <__aeabi_d2f+0x104>)
 8002cf8:	0028      	movs	r0, r5
 8002cfa:	18a2      	adds	r2, r4, r2
 8002cfc:	4095      	lsls	r5, r2
 8002cfe:	4093      	lsls	r3, r2
 8002d00:	1e6c      	subs	r4, r5, #1
 8002d02:	41a5      	sbcs	r5, r4
 8002d04:	40f0      	lsrs	r0, r6
 8002d06:	2207      	movs	r2, #7
 8002d08:	432b      	orrs	r3, r5
 8002d0a:	4303      	orrs	r3, r0
 8002d0c:	401a      	ands	r2, r3
 8002d0e:	2700      	movs	r7, #0
 8002d10:	e79f      	b.n	8002c52 <__aeabi_d2f+0x3a>
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	fffffc80 	.word	0xfffffc80
 8002d18:	fffffca2 	.word	0xfffffca2
 8002d1c:	fffffc82 	.word	0xfffffc82

08002d20 <__clzsi2>:
 8002d20:	211c      	movs	r1, #28
 8002d22:	2301      	movs	r3, #1
 8002d24:	041b      	lsls	r3, r3, #16
 8002d26:	4298      	cmp	r0, r3
 8002d28:	d301      	bcc.n	8002d2e <__clzsi2+0xe>
 8002d2a:	0c00      	lsrs	r0, r0, #16
 8002d2c:	3910      	subs	r1, #16
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	4298      	cmp	r0, r3
 8002d32:	d301      	bcc.n	8002d38 <__clzsi2+0x18>
 8002d34:	0a00      	lsrs	r0, r0, #8
 8002d36:	3908      	subs	r1, #8
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	4298      	cmp	r0, r3
 8002d3c:	d301      	bcc.n	8002d42 <__clzsi2+0x22>
 8002d3e:	0900      	lsrs	r0, r0, #4
 8002d40:	3904      	subs	r1, #4
 8002d42:	a202      	add	r2, pc, #8	; (adr r2, 8002d4c <__clzsi2+0x2c>)
 8002d44:	5c10      	ldrb	r0, [r2, r0]
 8002d46:	1840      	adds	r0, r0, r1
 8002d48:	4770      	bx	lr
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	02020304 	.word	0x02020304
 8002d50:	01010101 	.word	0x01010101
	...

08002d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b0e9      	sub	sp, #420	; 0x1a4
 8002d60:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d62:	f001 ff51 	bl	8004c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d66:	f000 f9ab 	bl	80030c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d6a:	f000 fc59 	bl	8003620 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002d6e:	f000 fb05 	bl	800337c <MX_TIM3_Init>
  MX_TIM2_Init();
 8002d72:	f000 fa9b 	bl	80032ac <MX_TIM2_Init>
  MX_TIM6_Init();
 8002d76:	f000 fba9 	bl	80034cc <MX_TIM6_Init>
  MX_ADC_Init();
 8002d7a:	f000 f9f5 	bl	8003168 <MX_ADC_Init>
  MX_TIM22_Init();
 8002d7e:	f000 fbe1 	bl	8003544 <MX_TIM22_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002d82:	4bbf      	ldr	r3, [pc, #764]	; (8003080 <main+0x324>)
 8002d84:	2100      	movs	r1, #0
 8002d86:	0018      	movs	r0, r3
 8002d88:	f003 fb34 	bl	80063f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002d8c:	4bbc      	ldr	r3, [pc, #752]	; (8003080 <main+0x324>)
 8002d8e:	2104      	movs	r1, #4
 8002d90:	0018      	movs	r0, r3
 8002d92:	f003 fb2f 	bl	80063f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002d96:	4bba      	ldr	r3, [pc, #744]	; (8003080 <main+0x324>)
 8002d98:	2108      	movs	r1, #8
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f003 fb2a 	bl	80063f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002da0:	4bb7      	ldr	r3, [pc, #732]	; (8003080 <main+0x324>)
 8002da2:	210c      	movs	r1, #12
 8002da4:	0018      	movs	r0, r3
 8002da6:	f003 fb25 	bl	80063f4 <HAL_TIM_PWM_Start>

	// right_motor
	Motor right_motor;
	right_motor.dir = 0;
 8002daa:	21a0      	movs	r1, #160	; 0xa0
 8002dac:	0049      	lsls	r1, r1, #1
 8002dae:	187b      	adds	r3, r7, r1
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
	right_motor.encoder = 0;
 8002db4:	000c      	movs	r4, r1
 8002db6:	193b      	adds	r3, r7, r4
 8002db8:	2200      	movs	r2, #0
 8002dba:	605a      	str	r2, [r3, #4]
	right_motor.timer = &htim3;
 8002dbc:	193b      	adds	r3, r7, r4
 8002dbe:	4ab0      	ldr	r2, [pc, #704]	; (8003080 <main+0x324>)
 8002dc0:	609a      	str	r2, [r3, #8]
	right_motor.ch1 = TIM_CHANNEL_1;
 8002dc2:	193b      	adds	r3, r7, r4
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	60da      	str	r2, [r3, #12]
	right_motor.ch2 = TIM_CHANNEL_2;
 8002dc8:	193b      	adds	r3, r7, r4
 8002dca:	2204      	movs	r2, #4
 8002dcc:	611a      	str	r2, [r3, #16]
	right_motor.rad_pid.Kp = 100.0;
 8002dce:	193b      	adds	r3, r7, r4
 8002dd0:	4aac      	ldr	r2, [pc, #688]	; (8003084 <main+0x328>)
 8002dd2:	62da      	str	r2, [r3, #44]	; 0x2c
	right_motor.rad_pid.Ki = 0;
 8002dd4:	193b      	adds	r3, r7, r4
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
	right_motor.rad_pid.Kd = 0;
 8002dda:	193b      	adds	r3, r7, r4
 8002ddc:	2200      	movs	r2, #0
 8002dde:	635a      	str	r2, [r3, #52]	; 0x34
	right_motor.pos_pid.Kp = 1000.0;
 8002de0:	193b      	adds	r3, r7, r4
 8002de2:	4aa9      	ldr	r2, [pc, #676]	; (8003088 <main+0x32c>)
 8002de4:	651a      	str	r2, [r3, #80]	; 0x50
	right_motor.pos_pid.Ki = 0;
 8002de6:	193b      	adds	r3, r7, r4
 8002de8:	2200      	movs	r2, #0
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
	right_motor.pos_pid.Kd = 0;
 8002dec:	193b      	adds	r3, r7, r4
 8002dee:	2200      	movs	r2, #0
 8002df0:	659a      	str	r2, [r3, #88]	; 0x58


	// left motor
	Motor left_motor;
	left_motor.dir = 0;
 8002df2:	21e4      	movs	r1, #228	; 0xe4
 8002df4:	187b      	adds	r3, r7, r1
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
	left_motor.encoder = 0;
 8002dfa:	187b      	adds	r3, r7, r1
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	605a      	str	r2, [r3, #4]
	left_motor.timer = &htim3;
 8002e00:	187b      	adds	r3, r7, r1
 8002e02:	4a9f      	ldr	r2, [pc, #636]	; (8003080 <main+0x324>)
 8002e04:	609a      	str	r2, [r3, #8]
	left_motor.ch1 = TIM_CHANNEL_3;
 8002e06:	187b      	adds	r3, r7, r1
 8002e08:	2208      	movs	r2, #8
 8002e0a:	60da      	str	r2, [r3, #12]
	left_motor.ch2 = TIM_CHANNEL_4;
 8002e0c:	187b      	adds	r3, r7, r1
 8002e0e:	220c      	movs	r2, #12
 8002e10:	611a      	str	r2, [r3, #16]
	left_motor.rad_pid.Kp = 100.0;
 8002e12:	187b      	adds	r3, r7, r1
 8002e14:	4a9b      	ldr	r2, [pc, #620]	; (8003084 <main+0x328>)
 8002e16:	62da      	str	r2, [r3, #44]	; 0x2c
	left_motor.rad_pid.Ki = 0;
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30
	left_motor.rad_pid.Kd = 0;
 8002e1e:	187b      	adds	r3, r7, r1
 8002e20:	2200      	movs	r2, #0
 8002e22:	635a      	str	r2, [r3, #52]	; 0x34
	left_motor.pos_pid.Kp = 1000.0;
 8002e24:	187b      	adds	r3, r7, r1
 8002e26:	4a98      	ldr	r2, [pc, #608]	; (8003088 <main+0x32c>)
 8002e28:	651a      	str	r2, [r3, #80]	; 0x50
	left_motor.pos_pid.Ki = 0;
 8002e2a:	187b      	adds	r3, r7, r1
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	655a      	str	r2, [r3, #84]	; 0x54
	left_motor.pos_pid.Kd = 0;
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	2200      	movs	r2, #0
 8002e34:	659a      	str	r2, [r3, #88]	; 0x58

	Robot robot;
	robot.left = left_motor;
 8002e36:	4b95      	ldr	r3, [pc, #596]	; (800308c <main+0x330>)
 8002e38:	22d0      	movs	r2, #208	; 0xd0
 8002e3a:	0052      	lsls	r2, r2, #1
 8002e3c:	18ba      	adds	r2, r7, r2
 8002e3e:	18d2      	adds	r2, r2, r3
 8002e40:	187b      	adds	r3, r7, r1
 8002e42:	0010      	movs	r0, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	235c      	movs	r3, #92	; 0x5c
 8002e48:	001a      	movs	r2, r3
 8002e4a:	f004 f8d9 	bl	8007000 <memcpy>
	robot.right = right_motor;
 8002e4e:	4b8f      	ldr	r3, [pc, #572]	; (800308c <main+0x330>)
 8002e50:	22d0      	movs	r2, #208	; 0xd0
 8002e52:	0052      	lsls	r2, r2, #1
 8002e54:	4694      	mov	ip, r2
 8002e56:	44bc      	add	ip, r7
 8002e58:	4463      	add	r3, ip
 8002e5a:	193a      	adds	r2, r7, r4
 8002e5c:	335c      	adds	r3, #92	; 0x5c
 8002e5e:	0011      	movs	r1, r2
 8002e60:	225c      	movs	r2, #92	; 0x5c
 8002e62:	0018      	movs	r0, r3
 8002e64:	f004 f8cc 	bl	8007000 <memcpy>
	robot.x = 0;
 8002e68:	4b88      	ldr	r3, [pc, #544]	; (800308c <main+0x330>)
 8002e6a:	22d0      	movs	r2, #208	; 0xd0
 8002e6c:	0052      	lsls	r2, r2, #1
 8002e6e:	4694      	mov	ip, r2
 8002e70:	44bc      	add	ip, r7
 8002e72:	4463      	add	r3, ip
 8002e74:	33c0      	adds	r3, #192	; 0xc0
 8002e76:	001a      	movs	r2, r3
 8002e78:	2300      	movs	r3, #0
 8002e7a:	2400      	movs	r4, #0
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	6054      	str	r4, [r2, #4]
	robot.y = 0;
 8002e80:	4b82      	ldr	r3, [pc, #520]	; (800308c <main+0x330>)
 8002e82:	22d0      	movs	r2, #208	; 0xd0
 8002e84:	0052      	lsls	r2, r2, #1
 8002e86:	4694      	mov	ip, r2
 8002e88:	44bc      	add	ip, r7
 8002e8a:	4463      	add	r3, ip
 8002e8c:	33c8      	adds	r3, #200	; 0xc8
 8002e8e:	001a      	movs	r2, r3
 8002e90:	2300      	movs	r3, #0
 8002e92:	2400      	movs	r4, #0
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	6054      	str	r4, [r2, #4]
	robot.theta = 0;
 8002e98:	4b7c      	ldr	r3, [pc, #496]	; (800308c <main+0x330>)
 8002e9a:	22d0      	movs	r2, #208	; 0xd0
 8002e9c:	0052      	lsls	r2, r2, #1
 8002e9e:	4694      	mov	ip, r2
 8002ea0:	44bc      	add	ip, r7
 8002ea2:	4463      	add	r3, ip
 8002ea4:	33d0      	adds	r3, #208	; 0xd0
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	2400      	movs	r4, #0
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	6054      	str	r4, [r2, #4]
	robot.stop = 0;
 8002eb0:	4b76      	ldr	r3, [pc, #472]	; (800308c <main+0x330>)
 8002eb2:	22d0      	movs	r2, #208	; 0xd0
 8002eb4:	0052      	lsls	r2, r2, #1
 8002eb6:	4694      	mov	ip, r2
 8002eb8:	44bc      	add	ip, r7
 8002eba:	4463      	add	r3, ip
 8002ebc:	22d8      	movs	r2, #216	; 0xd8
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	5499      	strb	r1, [r3, r2]
	robot.cliff = 0;
 8002ec2:	4b72      	ldr	r3, [pc, #456]	; (800308c <main+0x330>)
 8002ec4:	22d0      	movs	r2, #208	; 0xd0
 8002ec6:	0052      	lsls	r2, r2, #1
 8002ec8:	4694      	mov	ip, r2
 8002eca:	44bc      	add	ip, r7
 8002ecc:	4463      	add	r3, ip
 8002ece:	22b8      	movs	r2, #184	; 0xb8
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	5499      	strb	r1, [r3, r2]

	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8002ed4:	4b6e      	ldr	r3, [pc, #440]	; (8003090 <main+0x334>)
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f002 f945 	bl	8005168 <HAL_ADCEx_Calibration_Start>
	TIM22->CR1 |= TIM_CR1_CEN;
 8002ede:	4b6d      	ldr	r3, [pc, #436]	; (8003094 <main+0x338>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b6c      	ldr	r3, [pc, #432]	; (8003094 <main+0x338>)
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]
	  RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 8002eea:	4b6b      	ldr	r3, [pc, #428]	; (8003098 <main+0x33c>)
 8002eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eee:	4b6a      	ldr	r3, [pc, #424]	; (8003098 <main+0x33c>)
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	62da      	str	r2, [r3, #44]	; 0x2c
	  bitbang_init_lcd();
 8002ef6:	f000 fc5f 	bl	80037b8 <bitbang_init_lcd>
	  TIM22->CNT = 30000;
 8002efa:	4b66      	ldr	r3, [pc, #408]	; (8003094 <main+0x338>)
 8002efc:	4a67      	ldr	r2, [pc, #412]	; (800309c <main+0x340>)
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24


	  HAL_TIM_Base_Start_IT(&htim6);
 8002f00:	4b67      	ldr	r3, [pc, #412]	; (80030a0 <main+0x344>)
 8002f02:	0018      	movs	r0, r3
 8002f04:	f003 fa28 	bl	8006358 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	DMAInit((uint32_t*) buffer, 5);
 8002f08:	4b66      	ldr	r3, [pc, #408]	; (80030a4 <main+0x348>)
 8002f0a:	2105      	movs	r1, #5
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 ffa5 	bl	8003e5c <DMAInit>
	TIM2_conf();
 8002f12:	f001 faeb 	bl	80044ec <TIM2_conf>
	arm_pid_init_f32(&robot.right.pos_pid,1);
 8002f16:	003b      	movs	r3, r7
 8002f18:	3394      	adds	r3, #148	; 0x94
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f004 f824 	bl	8006f6a <arm_pid_init_f32>
	arm_pid_init_f32(&robot.right.rad_pid,1);
 8002f22:	003b      	movs	r3, r7
 8002f24:	3370      	adds	r3, #112	; 0x70
 8002f26:	2101      	movs	r1, #1
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f004 f81e 	bl	8006f6a <arm_pid_init_f32>
	arm_pid_init_f32(&robot.left.pos_pid,1);
 8002f2e:	003b      	movs	r3, r7
 8002f30:	3338      	adds	r3, #56	; 0x38
 8002f32:	2101      	movs	r1, #1
 8002f34:	0018      	movs	r0, r3
 8002f36:	f004 f818 	bl	8006f6a <arm_pid_init_f32>
	arm_pid_init_f32(&robot.left.rad_pid,1);
 8002f3a:	003b      	movs	r3, r7
 8002f3c:	3314      	adds	r3, #20
 8002f3e:	2101      	movs	r1, #1
 8002f40:	0018      	movs	r0, r3
 8002f42:	f004 f812 	bl	8006f6a <arm_pid_init_f32>

	HAL_GPIO_WritePin(SOIL_MTR_PWR_GPIO_Port, SOIL_MTR_PWR_Pin, GPIO_PIN_SET);
 8002f46:	4b58      	ldr	r3, [pc, #352]	; (80030a8 <main+0x34c>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	2120      	movs	r1, #32
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f002 fc16 	bl	800577e <HAL_GPIO_WritePin>

	int sw = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	22ce      	movs	r2, #206	; 0xce
 8002f56:	0052      	lsls	r2, r2, #1
 8002f58:	18ba      	adds	r2, r7, r2
 8002f5a:	6013      	str	r3, [r2, #0]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(robot.stop){
 8002f5c:	4b4b      	ldr	r3, [pc, #300]	; (800308c <main+0x330>)
 8002f5e:	22d0      	movs	r2, #208	; 0xd0
 8002f60:	0052      	lsls	r2, r2, #1
 8002f62:	4694      	mov	ip, r2
 8002f64:	44bc      	add	ip, r7
 8002f66:	4463      	add	r3, ip
 8002f68:	22d8      	movs	r2, #216	; 0xd8
 8002f6a:	5c9b      	ldrb	r3, [r3, r2]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d004      	beq.n	8002f7a <main+0x21e>
			stop(&robot);
 8002f70:	003b      	movs	r3, r7
 8002f72:	0018      	movs	r0, r3
 8002f74:	f000 ff58 	bl	8003e28 <stop>
 8002f78:	e7f0      	b.n	8002f5c <main+0x200>
		} else {
		if(robot.cliff){
 8002f7a:	4b44      	ldr	r3, [pc, #272]	; (800308c <main+0x330>)
 8002f7c:	22d0      	movs	r2, #208	; 0xd0
 8002f7e:	0052      	lsls	r2, r2, #1
 8002f80:	4694      	mov	ip, r2
 8002f82:	44bc      	add	ip, r7
 8002f84:	4463      	add	r3, ip
 8002f86:	22b8      	movs	r2, #184	; 0xb8
 8002f88:	5c9b      	ldrb	r3, [r3, r2]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d004      	beq.n	8002f98 <main+0x23c>
			stop(&robot);
 8002f8e:	003b      	movs	r3, r7
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 ff49 	bl	8003e28 <stop>
 8002f96:	e7e1      	b.n	8002f5c <main+0x200>
		} else {
			if(check_light_variance()){
 8002f98:	f001 f806 	bl	8003fa8 <check_light_variance>
 8002f9c:	1e03      	subs	r3, r0, #0
 8002f9e:	d054      	beq.n	800304a <main+0x2ee>
				if(turn_until(&robot, check_light_direction) && !robot.obstacle[1]){
 8002fa0:	4a42      	ldr	r2, [pc, #264]	; (80030ac <main+0x350>)
 8002fa2:	003b      	movs	r3, r7
 8002fa4:	0011      	movs	r1, r2
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f000 feec 	bl	8003d84 <turn_until>
 8002fac:	1e03      	subs	r3, r0, #0
 8002fae:	d050      	beq.n	8003052 <main+0x2f6>
 8002fb0:	4b36      	ldr	r3, [pc, #216]	; (800308c <main+0x330>)
 8002fb2:	22d0      	movs	r2, #208	; 0xd0
 8002fb4:	0052      	lsls	r2, r2, #1
 8002fb6:	4694      	mov	ip, r2
 8002fb8:	44bc      	add	ip, r7
 8002fba:	4463      	add	r3, ip
 8002fbc:	22da      	movs	r2, #218	; 0xda
 8002fbe:	5c9b      	ldrb	r3, [r3, r2]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d146      	bne.n	8003052 <main+0x2f6>
						if(robot.obstacle[0]){
 8002fc4:	4b31      	ldr	r3, [pc, #196]	; (800308c <main+0x330>)
 8002fc6:	22d0      	movs	r2, #208	; 0xd0
 8002fc8:	0052      	lsls	r2, r2, #1
 8002fca:	4694      	mov	ip, r2
 8002fcc:	44bc      	add	ip, r7
 8002fce:	4463      	add	r3, ip
 8002fd0:	22d9      	movs	r2, #217	; 0xd9
 8002fd2:	5c9b      	ldrb	r3, [r3, r2]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <main+0x2a4>
							if(turn_until(&robot, obstacle_left)){
 8002fd8:	4a35      	ldr	r2, [pc, #212]	; (80030b0 <main+0x354>)
 8002fda:	003b      	movs	r3, r7
 8002fdc:	0011      	movs	r1, r2
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f000 fed0 	bl	8003d84 <turn_until>
 8002fe4:	1e03      	subs	r3, r0, #0
 8002fe6:	d034      	beq.n	8003052 <main+0x2f6>
								move_until(&robot, ret_one, 1);
 8002fe8:	4932      	ldr	r1, [pc, #200]	; (80030b4 <main+0x358>)
 8002fea:	003b      	movs	r3, r7
 8002fec:	2201      	movs	r2, #1
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f000 fe8c 	bl	8003d0c <move_until>
								HAL_Delay(2000);
 8002ff4:	23fa      	movs	r3, #250	; 0xfa
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f001 fe65 	bl	8004cc8 <HAL_Delay>
 8002ffe:	e028      	b.n	8003052 <main+0x2f6>
							}
						} else if (robot.obstacle[2]){
 8003000:	4b22      	ldr	r3, [pc, #136]	; (800308c <main+0x330>)
 8003002:	22d0      	movs	r2, #208	; 0xd0
 8003004:	0052      	lsls	r2, r2, #1
 8003006:	4694      	mov	ip, r2
 8003008:	44bc      	add	ip, r7
 800300a:	4463      	add	r3, ip
 800300c:	22db      	movs	r2, #219	; 0xdb
 800300e:	5c9b      	ldrb	r3, [r3, r2]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d013      	beq.n	800303c <main+0x2e0>
							if(turn_until(&robot, obstacle_right)){
 8003014:	4a28      	ldr	r2, [pc, #160]	; (80030b8 <main+0x35c>)
 8003016:	003b      	movs	r3, r7
 8003018:	0011      	movs	r1, r2
 800301a:	0018      	movs	r0, r3
 800301c:	f000 feb2 	bl	8003d84 <turn_until>
 8003020:	1e03      	subs	r3, r0, #0
 8003022:	d016      	beq.n	8003052 <main+0x2f6>
								move_until(&robot, ret_one, 1);
 8003024:	4923      	ldr	r1, [pc, #140]	; (80030b4 <main+0x358>)
 8003026:	003b      	movs	r3, r7
 8003028:	2201      	movs	r2, #1
 800302a:	0018      	movs	r0, r3
 800302c:	f000 fe6e 	bl	8003d0c <move_until>
								HAL_Delay(2000);
 8003030:	23fa      	movs	r3, #250	; 0xfa
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	0018      	movs	r0, r3
 8003036:	f001 fe47 	bl	8004cc8 <HAL_Delay>
 800303a:	e00a      	b.n	8003052 <main+0x2f6>
							}
						} else move_until(&robot, check_light_variance, 0);
 800303c:	491f      	ldr	r1, [pc, #124]	; (80030bc <main+0x360>)
 800303e:	003b      	movs	r3, r7
 8003040:	2200      	movs	r2, #0
 8003042:	0018      	movs	r0, r3
 8003044:	f000 fe62 	bl	8003d0c <move_until>
 8003048:	e003      	b.n	8003052 <main+0x2f6>
					}
			} else{
				stop(&robot);
 800304a:	003b      	movs	r3, r7
 800304c:	0018      	movs	r0, r3
 800304e:	f000 feeb 	bl	8003e28 <stop>
			}

		if(buffer[4] < 500){
 8003052:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <main+0x348>)
 8003054:	891a      	ldrh	r2, [r3, #8]
 8003056:	23f4      	movs	r3, #244	; 0xf4
 8003058:	33ff      	adds	r3, #255	; 0xff
 800305a:	429a      	cmp	r2, r3
 800305c:	d807      	bhi.n	800306e <main+0x312>
			HAL_GPIO_WritePin(SOIL_LED_GPIO_Port, SOIL_LED_Pin, GPIO_PIN_SET);
 800305e:	23a0      	movs	r3, #160	; 0xa0
 8003060:	05db      	lsls	r3, r3, #23
 8003062:	2201      	movs	r2, #1
 8003064:	2102      	movs	r1, #2
 8003066:	0018      	movs	r0, r3
 8003068:	f002 fb89 	bl	800577e <HAL_GPIO_WritePin>
 800306c:	e776      	b.n	8002f5c <main+0x200>
		} else {
			HAL_GPIO_WritePin(SOIL_LED_GPIO_Port, SOIL_LED_Pin, GPIO_PIN_RESET);
 800306e:	23a0      	movs	r3, #160	; 0xa0
 8003070:	05db      	lsls	r3, r3, #23
 8003072:	2200      	movs	r2, #0
 8003074:	2102      	movs	r1, #2
 8003076:	0018      	movs	r0, r3
 8003078:	f002 fb81 	bl	800577e <HAL_GPIO_WritePin>
		if(robot.stop){
 800307c:	e76e      	b.n	8002f5c <main+0x200>
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	20000114 	.word	0x20000114
 8003084:	42c80000 	.word	0x42c80000
 8003088:	447a0000 	.word	0x447a0000
 800308c:	fffffe60 	.word	0xfffffe60
 8003090:	20000350 	.word	0x20000350
 8003094:	40011400 	.word	0x40011400
 8003098:	40021000 	.word	0x40021000
 800309c:	00007530 	.word	0x00007530
 80030a0:	200002d8 	.word	0x200002d8
 80030a4:	200001e8 	.word	0x200001e8
 80030a8:	50000800 	.word	0x50000800
 80030ac:	0800409d 	.word	0x0800409d
 80030b0:	080045b9 	.word	0x080045b9
 80030b4:	080045cd 	.word	0x080045cd
 80030b8:	080045a5 	.word	0x080045a5
 80030bc:	08003fa9 	.word	0x08003fa9

080030c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b095      	sub	sp, #84	; 0x54
 80030c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030c6:	2418      	movs	r4, #24
 80030c8:	193b      	adds	r3, r7, r4
 80030ca:	0018      	movs	r0, r3
 80030cc:	2338      	movs	r3, #56	; 0x38
 80030ce:	001a      	movs	r2, r3
 80030d0:	2100      	movs	r1, #0
 80030d2:	f003 ff9e 	bl	8007012 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	0018      	movs	r0, r3
 80030da:	2314      	movs	r3, #20
 80030dc:	001a      	movs	r2, r3
 80030de:	2100      	movs	r1, #0
 80030e0:	f003 ff97 	bl	8007012 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030e4:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <SystemClock_Config+0xa0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <SystemClock_Config+0xa4>)
 80030ea:	401a      	ands	r2, r3
 80030ec:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <SystemClock_Config+0xa0>)
 80030ee:	2180      	movs	r1, #128	; 0x80
 80030f0:	0109      	lsls	r1, r1, #4
 80030f2:	430a      	orrs	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80030f6:	0021      	movs	r1, r4
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	2210      	movs	r2, #16
 80030fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80030fe:	187b      	adds	r3, r7, r1
 8003100:	2201      	movs	r2, #1
 8003102:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003104:	187b      	adds	r3, r7, r1
 8003106:	2200      	movs	r2, #0
 8003108:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800310a:	187b      	adds	r3, r7, r1
 800310c:	22a0      	movs	r2, #160	; 0xa0
 800310e:	0212      	lsls	r2, r2, #8
 8003110:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003112:	187b      	adds	r3, r7, r1
 8003114:	2200      	movs	r2, #0
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003118:	187b      	adds	r3, r7, r1
 800311a:	0018      	movs	r0, r3
 800311c:	f002 fb72 	bl	8005804 <HAL_RCC_OscConfig>
 8003120:	1e03      	subs	r3, r0, #0
 8003122:	d001      	beq.n	8003128 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8003124:	f000 fb42 	bl	80037ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003128:	1d3b      	adds	r3, r7, #4
 800312a:	220f      	movs	r2, #15
 800312c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800312e:	1d3b      	adds	r3, r7, #4
 8003130:	2200      	movs	r2, #0
 8003132:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003134:	1d3b      	adds	r3, r7, #4
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800313a:	1d3b      	adds	r3, r7, #4
 800313c:	2200      	movs	r2, #0
 800313e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003140:	1d3b      	adds	r3, r7, #4
 8003142:	2200      	movs	r2, #0
 8003144:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	2100      	movs	r1, #0
 800314a:	0018      	movs	r0, r3
 800314c:	f002 ff2a 	bl	8005fa4 <HAL_RCC_ClockConfig>
 8003150:	1e03      	subs	r3, r0, #0
 8003152:	d001      	beq.n	8003158 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003154:	f000 fb2a 	bl	80037ac <Error_Handler>
  }
}
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	b015      	add	sp, #84	; 0x54
 800315e:	bd90      	pop	{r4, r7, pc}
 8003160:	40007000 	.word	0x40007000
 8003164:	ffffe7ff 	.word	0xffffe7ff

08003168 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800316e:	003b      	movs	r3, r7
 8003170:	0018      	movs	r0, r3
 8003172:	2308      	movs	r3, #8
 8003174:	001a      	movs	r2, r3
 8003176:	2100      	movs	r1, #0
 8003178:	f003 ff4b 	bl	8007012 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800317c:	4b44      	ldr	r3, [pc, #272]	; (8003290 <MX_ADC_Init+0x128>)
 800317e:	4a45      	ldr	r2, [pc, #276]	; (8003294 <MX_ADC_Init+0x12c>)
 8003180:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003182:	4b43      	ldr	r3, [pc, #268]	; (8003290 <MX_ADC_Init+0x128>)
 8003184:	2200      	movs	r2, #0
 8003186:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8003188:	4b41      	ldr	r3, [pc, #260]	; (8003290 <MX_ADC_Init+0x128>)
 800318a:	22c0      	movs	r2, #192	; 0xc0
 800318c:	0612      	lsls	r2, r2, #24
 800318e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003190:	4b3f      	ldr	r3, [pc, #252]	; (8003290 <MX_ADC_Init+0x128>)
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
 8003196:	4b3e      	ldr	r3, [pc, #248]	; (8003290 <MX_ADC_Init+0x128>)
 8003198:	2205      	movs	r2, #5
 800319a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800319c:	4b3c      	ldr	r3, [pc, #240]	; (8003290 <MX_ADC_Init+0x128>)
 800319e:	2201      	movs	r2, #1
 80031a0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031a2:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <MX_ADC_Init+0x128>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80031a8:	4b39      	ldr	r3, [pc, #228]	; (8003290 <MX_ADC_Init+0x128>)
 80031aa:	2220      	movs	r2, #32
 80031ac:	2100      	movs	r1, #0
 80031ae:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80031b0:	4b37      	ldr	r3, [pc, #220]	; (8003290 <MX_ADC_Init+0x128>)
 80031b2:	2221      	movs	r2, #33	; 0x21
 80031b4:	2100      	movs	r1, #0
 80031b6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031b8:	4b35      	ldr	r3, [pc, #212]	; (8003290 <MX_ADC_Init+0x128>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031be:	4b34      	ldr	r3, [pc, #208]	; (8003290 <MX_ADC_Init+0x128>)
 80031c0:	22c2      	movs	r2, #194	; 0xc2
 80031c2:	32ff      	adds	r2, #255	; 0xff
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80031c6:	4b32      	ldr	r3, [pc, #200]	; (8003290 <MX_ADC_Init+0x128>)
 80031c8:	222c      	movs	r2, #44	; 0x2c
 80031ca:	2100      	movs	r1, #0
 80031cc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031ce:	4b30      	ldr	r3, [pc, #192]	; (8003290 <MX_ADC_Init+0x128>)
 80031d0:	2204      	movs	r2, #4
 80031d2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80031d4:	4b2e      	ldr	r3, [pc, #184]	; (8003290 <MX_ADC_Init+0x128>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80031da:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <MX_ADC_Init+0x128>)
 80031dc:	2200      	movs	r2, #0
 80031de:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80031e0:	4b2b      	ldr	r3, [pc, #172]	; (8003290 <MX_ADC_Init+0x128>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80031e6:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <MX_ADC_Init+0x128>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80031ec:	4b28      	ldr	r3, [pc, #160]	; (8003290 <MX_ADC_Init+0x128>)
 80031ee:	0018      	movs	r0, r3
 80031f0:	f001 fd88 	bl	8004d04 <HAL_ADC_Init>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d001      	beq.n	80031fc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80031f8:	f000 fad8 	bl	80037ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80031fc:	003b      	movs	r3, r7
 80031fe:	4a26      	ldr	r2, [pc, #152]	; (8003298 <MX_ADC_Init+0x130>)
 8003200:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003202:	003b      	movs	r3, r7
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	0152      	lsls	r2, r2, #5
 8003208:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800320a:	003a      	movs	r2, r7
 800320c:	4b20      	ldr	r3, [pc, #128]	; (8003290 <MX_ADC_Init+0x128>)
 800320e:	0011      	movs	r1, r2
 8003210:	0018      	movs	r0, r3
 8003212:	f001 feeb 	bl	8004fec <HAL_ADC_ConfigChannel>
 8003216:	1e03      	subs	r3, r0, #0
 8003218:	d001      	beq.n	800321e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800321a:	f000 fac7 	bl	80037ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800321e:	003b      	movs	r3, r7
 8003220:	4a1e      	ldr	r2, [pc, #120]	; (800329c <MX_ADC_Init+0x134>)
 8003222:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003224:	003a      	movs	r2, r7
 8003226:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <MX_ADC_Init+0x128>)
 8003228:	0011      	movs	r1, r2
 800322a:	0018      	movs	r0, r3
 800322c:	f001 fede 	bl	8004fec <HAL_ADC_ConfigChannel>
 8003230:	1e03      	subs	r3, r0, #0
 8003232:	d001      	beq.n	8003238 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8003234:	f000 faba 	bl	80037ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003238:	003b      	movs	r3, r7
 800323a:	4a19      	ldr	r2, [pc, #100]	; (80032a0 <MX_ADC_Init+0x138>)
 800323c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800323e:	003a      	movs	r2, r7
 8003240:	4b13      	ldr	r3, [pc, #76]	; (8003290 <MX_ADC_Init+0x128>)
 8003242:	0011      	movs	r1, r2
 8003244:	0018      	movs	r0, r3
 8003246:	f001 fed1 	bl	8004fec <HAL_ADC_ConfigChannel>
 800324a:	1e03      	subs	r3, r0, #0
 800324c:	d001      	beq.n	8003252 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 800324e:	f000 faad 	bl	80037ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003252:	003b      	movs	r3, r7
 8003254:	4a13      	ldr	r2, [pc, #76]	; (80032a4 <MX_ADC_Init+0x13c>)
 8003256:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003258:	003a      	movs	r2, r7
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <MX_ADC_Init+0x128>)
 800325c:	0011      	movs	r1, r2
 800325e:	0018      	movs	r0, r3
 8003260:	f001 fec4 	bl	8004fec <HAL_ADC_ConfigChannel>
 8003264:	1e03      	subs	r3, r0, #0
 8003266:	d001      	beq.n	800326c <MX_ADC_Init+0x104>
  {
    Error_Handler();
 8003268:	f000 faa0 	bl	80037ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800326c:	003b      	movs	r3, r7
 800326e:	4a0e      	ldr	r2, [pc, #56]	; (80032a8 <MX_ADC_Init+0x140>)
 8003270:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003272:	003a      	movs	r2, r7
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <MX_ADC_Init+0x128>)
 8003276:	0011      	movs	r1, r2
 8003278:	0018      	movs	r0, r3
 800327a:	f001 feb7 	bl	8004fec <HAL_ADC_ConfigChannel>
 800327e:	1e03      	subs	r3, r0, #0
 8003280:	d001      	beq.n	8003286 <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 8003282:	f000 fa93 	bl	80037ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	46bd      	mov	sp, r7
 800328a:	b002      	add	sp, #8
 800328c:	bd80      	pop	{r7, pc}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	20000350 	.word	0x20000350
 8003294:	40012400 	.word	0x40012400
 8003298:	28000400 	.word	0x28000400
 800329c:	2c000800 	.word	0x2c000800
 80032a0:	30001000 	.word	0x30001000
 80032a4:	34002000 	.word	0x34002000
 80032a8:	38004000 	.word	0x38004000

080032ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032b2:	2310      	movs	r3, #16
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	0018      	movs	r0, r3
 80032b8:	2308      	movs	r3, #8
 80032ba:	001a      	movs	r2, r3
 80032bc:	2100      	movs	r1, #0
 80032be:	f003 fea8 	bl	8007012 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032c2:	003b      	movs	r3, r7
 80032c4:	0018      	movs	r0, r3
 80032c6:	2310      	movs	r3, #16
 80032c8:	001a      	movs	r2, r3
 80032ca:	2100      	movs	r1, #0
 80032cc:	f003 fea1 	bl	8007012 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032d0:	4b29      	ldr	r3, [pc, #164]	; (8003378 <MX_TIM2_Init+0xcc>)
 80032d2:	2280      	movs	r2, #128	; 0x80
 80032d4:	05d2      	lsls	r2, r2, #23
 80032d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80032d8:	4b27      	ldr	r3, [pc, #156]	; (8003378 <MX_TIM2_Init+0xcc>)
 80032da:	2200      	movs	r2, #0
 80032dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032de:	4b26      	ldr	r3, [pc, #152]	; (8003378 <MX_TIM2_Init+0xcc>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80032e4:	4b24      	ldr	r3, [pc, #144]	; (8003378 <MX_TIM2_Init+0xcc>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ea:	4b23      	ldr	r3, [pc, #140]	; (8003378 <MX_TIM2_Init+0xcc>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032f0:	4b21      	ldr	r3, [pc, #132]	; (8003378 <MX_TIM2_Init+0xcc>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <MX_TIM2_Init+0xcc>)
 80032f8:	0018      	movs	r0, r3
 80032fa:	f003 f84f 	bl	800639c <HAL_TIM_PWM_Init>
 80032fe:	1e03      	subs	r3, r0, #0
 8003300:	d001      	beq.n	8003306 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003302:	f000 fa53 	bl	80037ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003306:	2110      	movs	r1, #16
 8003308:	187b      	adds	r3, r7, r1
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800330e:	187b      	adds	r3, r7, r1
 8003310:	2200      	movs	r2, #0
 8003312:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003314:	187a      	adds	r2, r7, r1
 8003316:	4b18      	ldr	r3, [pc, #96]	; (8003378 <MX_TIM2_Init+0xcc>)
 8003318:	0011      	movs	r1, r2
 800331a:	0018      	movs	r0, r3
 800331c:	f003 fdc5 	bl	8006eaa <HAL_TIMEx_MasterConfigSynchronization>
 8003320:	1e03      	subs	r3, r0, #0
 8003322:	d001      	beq.n	8003328 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8003324:	f000 fa42 	bl	80037ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003328:	003b      	movs	r3, r7
 800332a:	2260      	movs	r2, #96	; 0x60
 800332c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800332e:	003b      	movs	r3, r7
 8003330:	2200      	movs	r2, #0
 8003332:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003334:	003b      	movs	r3, r7
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800333a:	003b      	movs	r3, r7
 800333c:	2200      	movs	r2, #0
 800333e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003340:	0039      	movs	r1, r7
 8003342:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <MX_TIM2_Init+0xcc>)
 8003344:	2200      	movs	r2, #0
 8003346:	0018      	movs	r0, r3
 8003348:	f003 f9f2 	bl	8006730 <HAL_TIM_PWM_ConfigChannel>
 800334c:	1e03      	subs	r3, r0, #0
 800334e:	d001      	beq.n	8003354 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8003350:	f000 fa2c 	bl	80037ac <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM3_TI1_GPIO) != HAL_OK)
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <MX_TIM2_Init+0xcc>)
 8003356:	2104      	movs	r1, #4
 8003358:	0018      	movs	r0, r3
 800335a:	f003 fde9 	bl	8006f30 <HAL_TIMEx_RemapConfig>
 800335e:	1e03      	subs	r3, r0, #0
 8003360:	d001      	beq.n	8003366 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8003362:	f000 fa23 	bl	80037ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003366:	4b04      	ldr	r3, [pc, #16]	; (8003378 <MX_TIM2_Init+0xcc>)
 8003368:	0018      	movs	r0, r3
 800336a:	f001 fa17 	bl	800479c <HAL_TIM_MspPostInit>

}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	46bd      	mov	sp, r7
 8003372:	b006      	add	sp, #24
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	20000314 	.word	0x20000314

0800337c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	; 0x28
 8003380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003382:	2318      	movs	r3, #24
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	0018      	movs	r0, r3
 8003388:	2310      	movs	r3, #16
 800338a:	001a      	movs	r2, r3
 800338c:	2100      	movs	r1, #0
 800338e:	f003 fe40 	bl	8007012 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003392:	2310      	movs	r3, #16
 8003394:	18fb      	adds	r3, r7, r3
 8003396:	0018      	movs	r0, r3
 8003398:	2308      	movs	r3, #8
 800339a:	001a      	movs	r2, r3
 800339c:	2100      	movs	r1, #0
 800339e:	f003 fe38 	bl	8007012 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033a2:	003b      	movs	r3, r7
 80033a4:	0018      	movs	r0, r3
 80033a6:	2310      	movs	r3, #16
 80033a8:	001a      	movs	r2, r3
 80033aa:	2100      	movs	r1, #0
 80033ac:	f003 fe31 	bl	8007012 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033b0:	4b43      	ldr	r3, [pc, #268]	; (80034c0 <MX_TIM3_Init+0x144>)
 80033b2:	4a44      	ldr	r2, [pc, #272]	; (80034c4 <MX_TIM3_Init+0x148>)
 80033b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033b6:	4b42      	ldr	r3, [pc, #264]	; (80034c0 <MX_TIM3_Init+0x144>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033bc:	4b40      	ldr	r3, [pc, #256]	; (80034c0 <MX_TIM3_Init+0x144>)
 80033be:	2200      	movs	r2, #0
 80033c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80033c2:	4b3f      	ldr	r3, [pc, #252]	; (80034c0 <MX_TIM3_Init+0x144>)
 80033c4:	4a40      	ldr	r2, [pc, #256]	; (80034c8 <MX_TIM3_Init+0x14c>)
 80033c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033c8:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <MX_TIM3_Init+0x144>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ce:	4b3c      	ldr	r3, [pc, #240]	; (80034c0 <MX_TIM3_Init+0x144>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033d4:	4b3a      	ldr	r3, [pc, #232]	; (80034c0 <MX_TIM3_Init+0x144>)
 80033d6:	0018      	movs	r0, r3
 80033d8:	f002 ff92 	bl	8006300 <HAL_TIM_Base_Init>
 80033dc:	1e03      	subs	r3, r0, #0
 80033de:	d001      	beq.n	80033e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80033e0:	f000 f9e4 	bl	80037ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033e4:	2118      	movs	r1, #24
 80033e6:	187b      	adds	r3, r7, r1
 80033e8:	2280      	movs	r2, #128	; 0x80
 80033ea:	0152      	lsls	r2, r2, #5
 80033ec:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033ee:	187a      	adds	r2, r7, r1
 80033f0:	4b33      	ldr	r3, [pc, #204]	; (80034c0 <MX_TIM3_Init+0x144>)
 80033f2:	0011      	movs	r1, r2
 80033f4:	0018      	movs	r0, r3
 80033f6:	f003 fa53 	bl	80068a0 <HAL_TIM_ConfigClockSource>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d001      	beq.n	8003402 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80033fe:	f000 f9d5 	bl	80037ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003402:	4b2f      	ldr	r3, [pc, #188]	; (80034c0 <MX_TIM3_Init+0x144>)
 8003404:	0018      	movs	r0, r3
 8003406:	f002 ffc9 	bl	800639c <HAL_TIM_PWM_Init>
 800340a:	1e03      	subs	r3, r0, #0
 800340c:	d001      	beq.n	8003412 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800340e:	f000 f9cd 	bl	80037ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003412:	2110      	movs	r1, #16
 8003414:	187b      	adds	r3, r7, r1
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800341a:	187b      	adds	r3, r7, r1
 800341c:	2200      	movs	r2, #0
 800341e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003420:	187a      	adds	r2, r7, r1
 8003422:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <MX_TIM3_Init+0x144>)
 8003424:	0011      	movs	r1, r2
 8003426:	0018      	movs	r0, r3
 8003428:	f003 fd3f 	bl	8006eaa <HAL_TIMEx_MasterConfigSynchronization>
 800342c:	1e03      	subs	r3, r0, #0
 800342e:	d001      	beq.n	8003434 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8003430:	f000 f9bc 	bl	80037ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003434:	003b      	movs	r3, r7
 8003436:	2260      	movs	r2, #96	; 0x60
 8003438:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800343a:	003b      	movs	r3, r7
 800343c:	2200      	movs	r2, #0
 800343e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003440:	003b      	movs	r3, r7
 8003442:	2200      	movs	r2, #0
 8003444:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003446:	003b      	movs	r3, r7
 8003448:	2200      	movs	r2, #0
 800344a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800344c:	0039      	movs	r1, r7
 800344e:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <MX_TIM3_Init+0x144>)
 8003450:	2200      	movs	r2, #0
 8003452:	0018      	movs	r0, r3
 8003454:	f003 f96c 	bl	8006730 <HAL_TIM_PWM_ConfigChannel>
 8003458:	1e03      	subs	r3, r0, #0
 800345a:	d001      	beq.n	8003460 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800345c:	f000 f9a6 	bl	80037ac <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8003460:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <MX_TIM3_Init+0x144>)
 8003462:	2104      	movs	r1, #4
 8003464:	0018      	movs	r0, r3
 8003466:	f003 fd63 	bl	8006f30 <HAL_TIMEx_RemapConfig>
 800346a:	1e03      	subs	r3, r0, #0
 800346c:	d001      	beq.n	8003472 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 800346e:	f000 f99d 	bl	80037ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003472:	0039      	movs	r1, r7
 8003474:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <MX_TIM3_Init+0x144>)
 8003476:	2204      	movs	r2, #4
 8003478:	0018      	movs	r0, r3
 800347a:	f003 f959 	bl	8006730 <HAL_TIM_PWM_ConfigChannel>
 800347e:	1e03      	subs	r3, r0, #0
 8003480:	d001      	beq.n	8003486 <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 8003482:	f000 f993 	bl	80037ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003486:	0039      	movs	r1, r7
 8003488:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <MX_TIM3_Init+0x144>)
 800348a:	2208      	movs	r2, #8
 800348c:	0018      	movs	r0, r3
 800348e:	f003 f94f 	bl	8006730 <HAL_TIM_PWM_ConfigChannel>
 8003492:	1e03      	subs	r3, r0, #0
 8003494:	d001      	beq.n	800349a <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 8003496:	f000 f989 	bl	80037ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800349a:	0039      	movs	r1, r7
 800349c:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <MX_TIM3_Init+0x144>)
 800349e:	220c      	movs	r2, #12
 80034a0:	0018      	movs	r0, r3
 80034a2:	f003 f945 	bl	8006730 <HAL_TIM_PWM_ConfigChannel>
 80034a6:	1e03      	subs	r3, r0, #0
 80034a8:	d001      	beq.n	80034ae <MX_TIM3_Init+0x132>
  {
    Error_Handler();
 80034aa:	f000 f97f 	bl	80037ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <MX_TIM3_Init+0x144>)
 80034b0:	0018      	movs	r0, r3
 80034b2:	f001 f973 	bl	800479c <HAL_TIM_MspPostInit>

}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b00a      	add	sp, #40	; 0x28
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	20000114 	.word	0x20000114
 80034c4:	40000400 	.word	0x40000400
 80034c8:	00002710 	.word	0x00002710

080034cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034d2:	003b      	movs	r3, r7
 80034d4:	0018      	movs	r0, r3
 80034d6:	2308      	movs	r3, #8
 80034d8:	001a      	movs	r2, r3
 80034da:	2100      	movs	r1, #0
 80034dc:	f003 fd99 	bl	8007012 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80034e0:	4b15      	ldr	r3, [pc, #84]	; (8003538 <MX_TIM6_Init+0x6c>)
 80034e2:	4a16      	ldr	r2, [pc, #88]	; (800353c <MX_TIM6_Init+0x70>)
 80034e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2099;
 80034e6:	4b14      	ldr	r3, [pc, #80]	; (8003538 <MX_TIM6_Init+0x6c>)
 80034e8:	4a15      	ldr	r2, [pc, #84]	; (8003540 <MX_TIM6_Init+0x74>)
 80034ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ec:	4b12      	ldr	r3, [pc, #72]	; (8003538 <MX_TIM6_Init+0x6c>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80034f2:	4b11      	ldr	r3, [pc, #68]	; (8003538 <MX_TIM6_Init+0x6c>)
 80034f4:	2263      	movs	r2, #99	; 0x63
 80034f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034f8:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <MX_TIM6_Init+0x6c>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80034fe:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <MX_TIM6_Init+0x6c>)
 8003500:	0018      	movs	r0, r3
 8003502:	f002 fefd 	bl	8006300 <HAL_TIM_Base_Init>
 8003506:	1e03      	subs	r3, r0, #0
 8003508:	d001      	beq.n	800350e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800350a:	f000 f94f 	bl	80037ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800350e:	003b      	movs	r3, r7
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003514:	003b      	movs	r3, r7
 8003516:	2200      	movs	r2, #0
 8003518:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800351a:	003a      	movs	r2, r7
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <MX_TIM6_Init+0x6c>)
 800351e:	0011      	movs	r1, r2
 8003520:	0018      	movs	r0, r3
 8003522:	f003 fcc2 	bl	8006eaa <HAL_TIMEx_MasterConfigSynchronization>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d001      	beq.n	800352e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800352a:	f000 f93f 	bl	80037ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	46bd      	mov	sp, r7
 8003532:	b002      	add	sp, #8
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	200002d8 	.word	0x200002d8
 800353c:	40001000 	.word	0x40001000
 8003540:	00000833 	.word	0x00000833

08003544 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8003544:	b590      	push	{r4, r7, lr}
 8003546:	b08d      	sub	sp, #52	; 0x34
 8003548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800354a:	240c      	movs	r4, #12
 800354c:	193b      	adds	r3, r7, r4
 800354e:	0018      	movs	r0, r3
 8003550:	2324      	movs	r3, #36	; 0x24
 8003552:	001a      	movs	r2, r3
 8003554:	2100      	movs	r1, #0
 8003556:	f003 fd5c 	bl	8007012 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	0018      	movs	r0, r3
 800355e:	2308      	movs	r3, #8
 8003560:	001a      	movs	r2, r3
 8003562:	2100      	movs	r1, #0
 8003564:	f003 fd55 	bl	8007012 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8003568:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <MX_TIM22_Init+0xd0>)
 800356a:	4a2b      	ldr	r2, [pc, #172]	; (8003618 <MX_TIM22_Init+0xd4>)
 800356c:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 800356e:	4b29      	ldr	r3, [pc, #164]	; (8003614 <MX_TIM22_Init+0xd0>)
 8003570:	2200      	movs	r2, #0
 8003572:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003574:	4b27      	ldr	r3, [pc, #156]	; (8003614 <MX_TIM22_Init+0xd0>)
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 65000;
 800357a:	4b26      	ldr	r3, [pc, #152]	; (8003614 <MX_TIM22_Init+0xd0>)
 800357c:	4a27      	ldr	r2, [pc, #156]	; (800361c <MX_TIM22_Init+0xd8>)
 800357e:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003580:	4b24      	ldr	r3, [pc, #144]	; (8003614 <MX_TIM22_Init+0xd0>)
 8003582:	2280      	movs	r2, #128	; 0x80
 8003584:	0092      	lsls	r2, r2, #2
 8003586:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <MX_TIM22_Init+0xd0>)
 800358a:	2200      	movs	r2, #0
 800358c:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800358e:	0021      	movs	r1, r4
 8003590:	187b      	adds	r3, r7, r1
 8003592:	2203      	movs	r2, #3
 8003594:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003596:	187b      	adds	r3, r7, r1
 8003598:	2202      	movs	r2, #2
 800359a:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800359c:	187b      	adds	r3, r7, r1
 800359e:	2201      	movs	r2, #1
 80035a0:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80035a2:	187b      	adds	r3, r7, r1
 80035a4:	2200      	movs	r2, #0
 80035a6:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 4;
 80035a8:	187b      	adds	r3, r7, r1
 80035aa:	2204      	movs	r2, #4
 80035ac:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80035ae:	187b      	adds	r3, r7, r1
 80035b0:	2202      	movs	r2, #2
 80035b2:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035b4:	187b      	adds	r3, r7, r1
 80035b6:	2201      	movs	r2, #1
 80035b8:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 80035ba:	187b      	adds	r3, r7, r1
 80035bc:	2208      	movs	r2, #8
 80035be:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80035c0:	187b      	adds	r3, r7, r1
 80035c2:	2200      	movs	r2, #0
 80035c4:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim22, &sConfig) != HAL_OK)
 80035c6:	187a      	adds	r2, r7, r1
 80035c8:	4b12      	ldr	r3, [pc, #72]	; (8003614 <MX_TIM22_Init+0xd0>)
 80035ca:	0011      	movs	r1, r2
 80035cc:	0018      	movs	r0, r3
 80035ce:	f002 ff33 	bl	8006438 <HAL_TIM_Encoder_Init>
 80035d2:	1e03      	subs	r3, r0, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 80035d6:	f000 f8e9 	bl	80037ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035da:	1d3b      	adds	r3, r7, #4
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035e0:	1d3b      	adds	r3, r7, #4
 80035e2:	2200      	movs	r2, #0
 80035e4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 80035e6:	1d3a      	adds	r2, r7, #4
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <MX_TIM22_Init+0xd0>)
 80035ea:	0011      	movs	r1, r2
 80035ec:	0018      	movs	r0, r3
 80035ee:	f003 fc5c 	bl	8006eaa <HAL_TIMEx_MasterConfigSynchronization>
 80035f2:	1e03      	subs	r3, r0, #0
 80035f4:	d001      	beq.n	80035fa <MX_TIM22_Init+0xb6>
  {
    Error_Handler();
 80035f6:	f000 f8d9 	bl	80037ac <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM3_TI1_GPIO) != HAL_OK)
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <MX_TIM22_Init+0xd0>)
 80035fc:	2104      	movs	r1, #4
 80035fe:	0018      	movs	r0, r3
 8003600:	f003 fc96 	bl	8006f30 <HAL_TIMEx_RemapConfig>
 8003604:	1e03      	subs	r3, r0, #0
 8003606:	d001      	beq.n	800360c <MX_TIM22_Init+0xc8>
  {
    Error_Handler();
 8003608:	f000 f8d0 	bl	80037ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b00d      	add	sp, #52	; 0x34
 8003612:	bd90      	pop	{r4, r7, pc}
 8003614:	200001ac 	.word	0x200001ac
 8003618:	40011400 	.word	0x40011400
 800361c:	0000fde8 	.word	0x0000fde8

08003620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003620:	b590      	push	{r4, r7, lr}
 8003622:	b089      	sub	sp, #36	; 0x24
 8003624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003626:	240c      	movs	r4, #12
 8003628:	193b      	adds	r3, r7, r4
 800362a:	0018      	movs	r0, r3
 800362c:	2314      	movs	r3, #20
 800362e:	001a      	movs	r2, r3
 8003630:	2100      	movs	r1, #0
 8003632:	f003 fcee 	bl	8007012 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003636:	4b57      	ldr	r3, [pc, #348]	; (8003794 <MX_GPIO_Init+0x174>)
 8003638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363a:	4b56      	ldr	r3, [pc, #344]	; (8003794 <MX_GPIO_Init+0x174>)
 800363c:	2104      	movs	r1, #4
 800363e:	430a      	orrs	r2, r1
 8003640:	62da      	str	r2, [r3, #44]	; 0x2c
 8003642:	4b54      	ldr	r3, [pc, #336]	; (8003794 <MX_GPIO_Init+0x174>)
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	2204      	movs	r2, #4
 8003648:	4013      	ands	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800364e:	4b51      	ldr	r3, [pc, #324]	; (8003794 <MX_GPIO_Init+0x174>)
 8003650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003652:	4b50      	ldr	r3, [pc, #320]	; (8003794 <MX_GPIO_Init+0x174>)
 8003654:	2101      	movs	r1, #1
 8003656:	430a      	orrs	r2, r1
 8003658:	62da      	str	r2, [r3, #44]	; 0x2c
 800365a:	4b4e      	ldr	r3, [pc, #312]	; (8003794 <MX_GPIO_Init+0x174>)
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	2201      	movs	r2, #1
 8003660:	4013      	ands	r3, r2
 8003662:	607b      	str	r3, [r7, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003666:	4b4b      	ldr	r3, [pc, #300]	; (8003794 <MX_GPIO_Init+0x174>)
 8003668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366a:	4b4a      	ldr	r3, [pc, #296]	; (8003794 <MX_GPIO_Init+0x174>)
 800366c:	2102      	movs	r1, #2
 800366e:	430a      	orrs	r2, r1
 8003670:	62da      	str	r2, [r3, #44]	; 0x2c
 8003672:	4b48      	ldr	r3, [pc, #288]	; (8003794 <MX_GPIO_Init+0x174>)
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	2202      	movs	r2, #2
 8003678:	4013      	ands	r3, r2
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Ultrasonic_B_Pin|SOIL_MTR_PWR_Pin, GPIO_PIN_RESET);
 800367e:	4946      	ldr	r1, [pc, #280]	; (8003798 <MX_GPIO_Init+0x178>)
 8003680:	4b46      	ldr	r3, [pc, #280]	; (800379c <MX_GPIO_Init+0x17c>)
 8003682:	2200      	movs	r2, #0
 8003684:	0018      	movs	r0, r3
 8003686:	f002 f87a 	bl	800577e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ultrasonic_A_GPIO_Port, Ultrasonic_A_Pin, GPIO_PIN_RESET);
 800368a:	23a0      	movs	r3, #160	; 0xa0
 800368c:	05db      	lsls	r3, r3, #23
 800368e:	2200      	movs	r2, #0
 8003690:	2110      	movs	r1, #16
 8003692:	0018      	movs	r0, r3
 8003694:	f002 f873 	bl	800577e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Ultrasonic_B_Pin SOIL_MTR_PWR_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_B_Pin|SOIL_MTR_PWR_Pin;
 8003698:	0021      	movs	r1, r4
 800369a:	187b      	adds	r3, r7, r1
 800369c:	4a3e      	ldr	r2, [pc, #248]	; (8003798 <MX_GPIO_Init+0x178>)
 800369e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	2201      	movs	r2, #1
 80036a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	2200      	movs	r2, #0
 80036aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	2200      	movs	r2, #0
 80036b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036b2:	000c      	movs	r4, r1
 80036b4:	187b      	adds	r3, r7, r1
 80036b6:	4a39      	ldr	r2, [pc, #228]	; (800379c <MX_GPIO_Init+0x17c>)
 80036b8:	0019      	movs	r1, r3
 80036ba:	0010      	movs	r0, r2
 80036bc:	f001 fec4 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ultrasonic_Echo_Pin L_MTR_ENC_Pin R_MTR_ENC_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_Echo_Pin|L_MTR_ENC_Pin|R_MTR_ENC_Pin;
 80036c0:	0021      	movs	r1, r4
 80036c2:	187b      	adds	r3, r7, r1
 80036c4:	2298      	movs	r2, #152	; 0x98
 80036c6:	0212      	lsls	r2, r2, #8
 80036c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036ca:	000c      	movs	r4, r1
 80036cc:	193b      	adds	r3, r7, r4
 80036ce:	4a34      	ldr	r2, [pc, #208]	; (80037a0 <MX_GPIO_Init+0x180>)
 80036d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d2:	193b      	adds	r3, r7, r4
 80036d4:	2200      	movs	r2, #0
 80036d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d8:	193b      	adds	r3, r7, r4
 80036da:	4a30      	ldr	r2, [pc, #192]	; (800379c <MX_GPIO_Init+0x17c>)
 80036dc:	0019      	movs	r1, r3
 80036de:	0010      	movs	r0, r2
 80036e0:	f001 feb2 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pins : SOIL_LED_Pin CLIFF_Pin */
  GPIO_InitStruct.Pin = SOIL_LED_Pin|CLIFF_Pin;
 80036e4:	193b      	adds	r3, r7, r4
 80036e6:	4a2f      	ldr	r2, [pc, #188]	; (80037a4 <MX_GPIO_Init+0x184>)
 80036e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036ea:	193b      	adds	r3, r7, r4
 80036ec:	4a2c      	ldr	r2, [pc, #176]	; (80037a0 <MX_GPIO_Init+0x180>)
 80036ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	193b      	adds	r3, r7, r4
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f6:	193a      	adds	r2, r7, r4
 80036f8:	23a0      	movs	r3, #160	; 0xa0
 80036fa:	05db      	lsls	r3, r3, #23
 80036fc:	0011      	movs	r1, r2
 80036fe:	0018      	movs	r0, r3
 8003700:	f001 fea2 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ultrasonic_A_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_A_Pin;
 8003704:	193b      	adds	r3, r7, r4
 8003706:	2210      	movs	r2, #16
 8003708:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800370a:	193b      	adds	r3, r7, r4
 800370c:	2201      	movs	r2, #1
 800370e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003710:	193b      	adds	r3, r7, r4
 8003712:	2200      	movs	r2, #0
 8003714:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003716:	193b      	adds	r3, r7, r4
 8003718:	2200      	movs	r2, #0
 800371a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Ultrasonic_A_GPIO_Port, &GPIO_InitStruct);
 800371c:	193a      	adds	r2, r7, r4
 800371e:	23a0      	movs	r3, #160	; 0xa0
 8003720:	05db      	lsls	r3, r3, #23
 8003722:	0011      	movs	r1, r2
 8003724:	0018      	movs	r0, r3
 8003726:	f001 fe8f 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_MI_Pin IR_LE_Pin IR_RI_Pin */
  GPIO_InitStruct.Pin = IR_MI_Pin|IR_LE_Pin|IR_RI_Pin;
 800372a:	193b      	adds	r3, r7, r4
 800372c:	22e0      	movs	r2, #224	; 0xe0
 800372e:	0152      	lsls	r2, r2, #5
 8003730:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003732:	193b      	adds	r3, r7, r4
 8003734:	2200      	movs	r2, #0
 8003736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	193b      	adds	r3, r7, r4
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800373e:	193a      	adds	r2, r7, r4
 8003740:	23a0      	movs	r3, #160	; 0xa0
 8003742:	05db      	lsls	r3, r3, #23
 8003744:	0011      	movs	r1, r2
 8003746:	0018      	movs	r0, r3
 8003748:	f001 fe7e 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800374c:	193b      	adds	r3, r7, r4
 800374e:	2240      	movs	r2, #64	; 0x40
 8003750:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003752:	193b      	adds	r3, r7, r4
 8003754:	4a12      	ldr	r2, [pc, #72]	; (80037a0 <MX_GPIO_Init+0x180>)
 8003756:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003758:	193b      	adds	r3, r7, r4
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800375e:	193b      	adds	r3, r7, r4
 8003760:	4a11      	ldr	r2, [pc, #68]	; (80037a8 <MX_GPIO_Init+0x188>)
 8003762:	0019      	movs	r1, r3
 8003764:	0010      	movs	r0, r2
 8003766:	f001 fe6f 	bl	8005448 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800376a:	2200      	movs	r2, #0
 800376c:	2100      	movs	r1, #0
 800376e:	2005      	movs	r0, #5
 8003770:	f001 fe38 	bl	80053e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003774:	2005      	movs	r0, #5
 8003776:	f001 fe4a 	bl	800540e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800377a:	2200      	movs	r2, #0
 800377c:	2100      	movs	r1, #0
 800377e:	2007      	movs	r0, #7
 8003780:	f001 fe30 	bl	80053e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003784:	2007      	movs	r0, #7
 8003786:	f001 fe42 	bl	800540e <HAL_NVIC_EnableIRQ>

}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	46bd      	mov	sp, r7
 800378e:	b009      	add	sp, #36	; 0x24
 8003790:	bd90      	pop	{r4, r7, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	40021000 	.word	0x40021000
 8003798:	00002020 	.word	0x00002020
 800379c:	50000800 	.word	0x50000800
 80037a0:	10110000 	.word	0x10110000
 80037a4:	00000202 	.word	0x00000202
 80037a8:	50000400 	.word	0x50000400

080037ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80037b0:	46c0      	nop			; (mov r8, r8)
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <bitbang_init_lcd>:
	  else if (ChangeMen == 3){
		  displayTop(WaterL);
		  displayBottom("Done <-");
	  }
}
void bitbang_init_lcd(void) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
    GPIOB->BSRR = 1<<12; // set NSS high
 80037bc:	4b13      	ldr	r3, [pc, #76]	; (800380c <bitbang_init_lcd+0x54>)
 80037be:	2280      	movs	r2, #128	; 0x80
 80037c0:	0152      	lsls	r2, r2, #5
 80037c2:	619a      	str	r2, [r3, #24]
    GPIOB->BRR = (1<<13) + (1<<15); // set SCK and MOSI low
 80037c4:	4b11      	ldr	r3, [pc, #68]	; (800380c <bitbang_init_lcd+0x54>)
 80037c6:	22a0      	movs	r2, #160	; 0xa0
 80037c8:	0212      	lsls	r2, r2, #8
 80037ca:	629a      	str	r2, [r3, #40]	; 0x28
    // Now, configure pins for output.
    GPIOB->MODER &= ~(3<<(2*12));
 80037cc:	4b0f      	ldr	r3, [pc, #60]	; (800380c <bitbang_init_lcd+0x54>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <bitbang_init_lcd+0x54>)
 80037d2:	490f      	ldr	r1, [pc, #60]	; (8003810 <bitbang_init_lcd+0x58>)
 80037d4:	400a      	ands	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |=  (1<<(2*12));
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <bitbang_init_lcd+0x54>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <bitbang_init_lcd+0x54>)
 80037de:	2180      	movs	r1, #128	; 0x80
 80037e0:	0449      	lsls	r1, r1, #17
 80037e2:	430a      	orrs	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]
    GPIOB->MODER &= ~( (3<<(2*13)) | (3<<(2*15)) );
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <bitbang_init_lcd+0x54>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <bitbang_init_lcd+0x54>)
 80037ec:	4909      	ldr	r1, [pc, #36]	; (8003814 <bitbang_init_lcd+0x5c>)
 80037ee:	400a      	ands	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |=    (1<<(2*13)) | (1<<(2*15));
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <bitbang_init_lcd+0x54>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b05      	ldr	r3, [pc, #20]	; (800380c <bitbang_init_lcd+0x54>)
 80037f8:	2188      	movs	r1, #136	; 0x88
 80037fa:	05c9      	lsls	r1, r1, #23
 80037fc:	430a      	orrs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]

    generic_lcd_startup();
 8003800:	f000 f80a 	bl	8003818 <generic_lcd_startup>
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	50000400 	.word	0x50000400
 8003810:	fcffffff 	.word	0xfcffffff
 8003814:	33ffffff 	.word	0x33ffffff

08003818 <generic_lcd_startup>:
void generic_lcd_startup(void) {
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
    nano_wait(100000000); // Give it 100ms to initialize
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <generic_lcd_startup+0x38>)
 800381e:	0018      	movs	r0, r3
 8003820:	f000 f81a 	bl	8003858 <nano_wait>
    cmd(0x38);  // 0011 NF00 N=1, F=0: two lines
 8003824:	2038      	movs	r0, #56	; 0x38
 8003826:	f000 f823 	bl	8003870 <cmd>
    cmd(0x0c);  // 0000 1DCB: display on, no cursor, no blink
 800382a:	200c      	movs	r0, #12
 800382c:	f000 f820 	bl	8003870 <cmd>
    cmd(0x01);  // clear entire display
 8003830:	2001      	movs	r0, #1
 8003832:	f000 f81d 	bl	8003870 <cmd>
    nano_wait(6200000); // clear takes 6.2ms to complete
 8003836:	4b07      	ldr	r3, [pc, #28]	; (8003854 <generic_lcd_startup+0x3c>)
 8003838:	0018      	movs	r0, r3
 800383a:	f000 f80d 	bl	8003858 <nano_wait>
    cmd(0x02);  // put the cursor in the home position
 800383e:	2002      	movs	r0, #2
 8003840:	f000 f816 	bl	8003870 <cmd>
    cmd(0x06);  // 0000 01IS: set display to increment
 8003844:	2006      	movs	r0, #6
 8003846:	f000 f813 	bl	8003870 <cmd>
}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	05f5e100 	.word	0x05f5e100
 8003854:	005e9ac0 	.word	0x005e9ac0

08003858 <nano_wait>:
void nano_wait(unsigned int n) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
    asm(    "        mov r0,%0\n"
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	1c18      	adds	r0, r3, #0

08003864 <repeat>:
 8003864:	3853      	subs	r0, #83	; 0x53
 8003866:	dcfd      	bgt.n	8003864 <repeat>
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}
 8003868:	46c0      	nop			; (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	b002      	add	sp, #8
 800386e:	bd80      	pop	{r7, pc}

08003870 <cmd>:
void cmd(char b) {
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	0002      	movs	r2, r0
 8003878:	1dfb      	adds	r3, r7, #7
 800387a:	701a      	strb	r2, [r3, #0]
    const int NSS = 1<<12;
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	015b      	lsls	r3, r3, #5
 8003880:	60fb      	str	r3, [r7, #12]
    GPIOB->BRR = NSS; // NSS low
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <cmd+0x54>)
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
    nano_wait(SPI_DELAY);
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <cmd+0x58>)
 800388a:	0018      	movs	r0, r3
 800388c:	f7ff ffe4 	bl	8003858 <nano_wait>
    bitbang_sendbit(0); // RS = 0 for command.
 8003890:	2000      	movs	r0, #0
 8003892:	f000 f81b 	bl	80038cc <bitbang_sendbit>
    bitbang_sendbit(0); // R/W = 0 for write.
 8003896:	2000      	movs	r0, #0
 8003898:	f000 f818 	bl	80038cc <bitbang_sendbit>
    bitbang_sendbyte(b);
 800389c:	1dfb      	adds	r3, r7, #7
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	0018      	movs	r0, r3
 80038a2:	f000 f83d 	bl	8003920 <bitbang_sendbyte>
    nano_wait(SPI_DELAY);
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <cmd+0x58>)
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7ff ffd5 	bl	8003858 <nano_wait>
    GPIOB->BSRR = NSS; // set NSS back to high
 80038ae:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <cmd+0x54>)
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	619a      	str	r2, [r3, #24]
    nano_wait(SPI_DELAY);
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <cmd+0x58>)
 80038b6:	0018      	movs	r0, r3
 80038b8:	f7ff ffce 	bl	8003858 <nano_wait>
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b004      	add	sp, #16
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	50000400 	.word	0x50000400
 80038c8:	00000539 	.word	0x00000539

080038cc <bitbang_sendbit>:
void bitbang_sendbit(int b) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
    const int SCK = 1<<13;
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	019b      	lsls	r3, r3, #6
 80038d8:	60fb      	str	r3, [r7, #12]
    const int MOSI = 1<<15;
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	60bb      	str	r3, [r7, #8]
    // We do this slowly to make sure we don't exceed the
    // speed of the device.
    GPIOB->BRR = SCK;
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <bitbang_sendbit+0x4c>)
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (b)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <bitbang_sendbit+0x28>
        GPIOB->BSRR = MOSI;
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <bitbang_sendbit+0x4c>)
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	619a      	str	r2, [r3, #24]
 80038f2:	e002      	b.n	80038fa <bitbang_sendbit+0x2e>
    else
        GPIOB->BRR = MOSI;
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <bitbang_sendbit+0x4c>)
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	629a      	str	r2, [r3, #40]	; 0x28
    //GPIOB->BSRR = b ? MOSI : (MOSI << 16);
    nano_wait(SPI_DELAY);
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <bitbang_sendbit+0x50>)
 80038fc:	0018      	movs	r0, r3
 80038fe:	f7ff ffab 	bl	8003858 <nano_wait>
    GPIOB->BSRR = SCK;
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <bitbang_sendbit+0x4c>)
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	619a      	str	r2, [r3, #24]
    nano_wait(SPI_DELAY);
 8003908:	4b04      	ldr	r3, [pc, #16]	; (800391c <bitbang_sendbit+0x50>)
 800390a:	0018      	movs	r0, r3
 800390c:	f7ff ffa4 	bl	8003858 <nano_wait>
}
 8003910:	46c0      	nop			; (mov r8, r8)
 8003912:	46bd      	mov	sp, r7
 8003914:	b004      	add	sp, #16
 8003916:	bd80      	pop	{r7, pc}
 8003918:	50000400 	.word	0x50000400
 800391c:	00000539 	.word	0x00000539

08003920 <bitbang_sendbyte>:
void bitbang_sendbyte(int b) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
    int x;
    // Send the eight bits of a byte to the SPI channel.
    // Send the MSB first (big endian bits).
    for(x=8; x>0; x--) {
 8003928:	2308      	movs	r3, #8
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	e00b      	b.n	8003946 <bitbang_sendbyte+0x26>
        bitbang_sendbit(b & 0x80);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2280      	movs	r2, #128	; 0x80
 8003932:	4013      	ands	r3, r2
 8003934:	0018      	movs	r0, r3
 8003936:	f7ff ffc9 	bl	80038cc <bitbang_sendbit>
        b <<= 1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	607b      	str	r3, [r7, #4]
    for(x=8; x>0; x--) {
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3b01      	subs	r3, #1
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	dcf0      	bgt.n	800392e <bitbang_sendbyte+0xe>
    }
}
 800394c:	46c0      	nop			; (mov r8, r8)
 800394e:	46bd      	mov	sp, r7
 8003950:	b004      	add	sp, #16
 8003952:	bd80      	pop	{r7, pc}

08003954 <pwm_gen>:
#include "movement.h"

/**
 * Function to generate PWM signals to move motors. Should never be called directly, rather should be called by more general movement functions
 */
void pwm_gen(Motor* motor, int speed){
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]

	// if dir is 0 or speed is 0 set to brake mode (both channels full duty cycle)
	if(speed == 0 || motor->dir == 0){
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d004      	beq.n	800396e <pwm_gen+0x1a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	b25b      	sxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d146      	bne.n	80039fc <pwm_gen+0xa8>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch1, MAX_SPEED);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d105      	bne.n	8003982 <pwm_gen+0x2e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a74      	ldr	r2, [pc, #464]	; (8003b50 <pwm_gen+0x1fc>)
 800397e:	635a      	str	r2, [r3, #52]	; 0x34
 8003980:	e018      	b.n	80039b4 <pwm_gen+0x60>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2b04      	cmp	r3, #4
 8003988:	d105      	bne.n	8003996 <pwm_gen+0x42>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a6f      	ldr	r2, [pc, #444]	; (8003b50 <pwm_gen+0x1fc>)
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
 8003994:	e00e      	b.n	80039b4 <pwm_gen+0x60>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	2b08      	cmp	r3, #8
 800399c:	d105      	bne.n	80039aa <pwm_gen+0x56>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a6a      	ldr	r2, [pc, #424]	; (8003b50 <pwm_gen+0x1fc>)
 80039a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80039a8:	e004      	b.n	80039b4 <pwm_gen+0x60>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a67      	ldr	r2, [pc, #412]	; (8003b50 <pwm_gen+0x1fc>)
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch2, MAX_SPEED);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <pwm_gen+0x74>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a63      	ldr	r2, [pc, #396]	; (8003b50 <pwm_gen+0x1fc>)
 80039c4:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 80039c6:	e0c0      	b.n	8003b4a <pwm_gen+0x1f6>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch2, MAX_SPEED);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d105      	bne.n	80039dc <pwm_gen+0x88>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a5e      	ldr	r2, [pc, #376]	; (8003b50 <pwm_gen+0x1fc>)
 80039d8:	639a      	str	r2, [r3, #56]	; 0x38
		return;
 80039da:	e0b6      	b.n	8003b4a <pwm_gen+0x1f6>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch2, MAX_SPEED);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d105      	bne.n	80039f0 <pwm_gen+0x9c>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a59      	ldr	r2, [pc, #356]	; (8003b50 <pwm_gen+0x1fc>)
 80039ec:	63da      	str	r2, [r3, #60]	; 0x3c
		return;
 80039ee:	e0ac      	b.n	8003b4a <pwm_gen+0x1f6>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch2, MAX_SPEED);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a56      	ldr	r2, [pc, #344]	; (8003b50 <pwm_gen+0x1fc>)
 80039f8:	641a      	str	r2, [r3, #64]	; 0x40
		return;
 80039fa:	e0a6      	b.n	8003b4a <pwm_gen+0x1f6>
	}

	// Negative speed -> reverse direction and positive speed
	if(speed < 0){
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	da0b      	bge.n	8003a1a <pwm_gen+0xc6>
		speed = -speed;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	425b      	negs	r3, r3
 8003a06:	603b      	str	r3, [r7, #0]
		motor->dir = -motor->dir;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	b25b      	sxtb	r3, r3
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	425b      	negs	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	b25a      	sxtb	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	701a      	strb	r2, [r3, #0]
	}
	if(speed > MAX_SPEED) speed = MAX_SPEED;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	4a4c      	ldr	r2, [pc, #304]	; (8003b50 <pwm_gen+0x1fc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	dd01      	ble.n	8003a26 <pwm_gen+0xd2>
 8003a22:	4b4b      	ldr	r3, [pc, #300]	; (8003b50 <pwm_gen+0x1fc>)
 8003a24:	603b      	str	r3, [r7, #0]

	// Set which channel gets PWM input based on dir
	if(motor->dir > 0){
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	b25b      	sxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	dd46      	ble.n	8003abe <pwm_gen+0x16a>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch1, speed);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <pwm_gen+0xf0>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	635a      	str	r2, [r3, #52]	; 0x34
 8003a42:	e018      	b.n	8003a76 <pwm_gen+0x122>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d105      	bne.n	8003a58 <pwm_gen+0x104>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	639a      	str	r2, [r3, #56]	; 0x38
 8003a56:	e00e      	b.n	8003a76 <pwm_gen+0x122>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d105      	bne.n	8003a6c <pwm_gen+0x118>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a6a:	e004      	b.n	8003a76 <pwm_gen+0x122>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch2, 0);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d105      	bne.n	8003a8a <pwm_gen+0x136>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2200      	movs	r2, #0
 8003a86:	635a      	str	r2, [r3, #52]	; 0x34
 8003a88:	e05f      	b.n	8003b4a <pwm_gen+0x1f6>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d105      	bne.n	8003a9e <pwm_gen+0x14a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38
 8003a9c:	e055      	b.n	8003b4a <pwm_gen+0x1f6>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d105      	bne.n	8003ab2 <pwm_gen+0x15e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2200      	movs	r2, #0
 8003aae:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ab0:	e04b      	b.n	8003b4a <pwm_gen+0x1f6>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40
 8003abc:	e045      	b.n	8003b4a <pwm_gen+0x1f6>
	} else {
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch1, 0);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d105      	bne.n	8003ad2 <pwm_gen+0x17e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2200      	movs	r2, #0
 8003ace:	635a      	str	r2, [r3, #52]	; 0x34
 8003ad0:	e018      	b.n	8003b04 <pwm_gen+0x1b0>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d105      	bne.n	8003ae6 <pwm_gen+0x192>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	639a      	str	r2, [r3, #56]	; 0x38
 8003ae4:	e00e      	b.n	8003b04 <pwm_gen+0x1b0>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d105      	bne.n	8003afa <pwm_gen+0x1a6>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2200      	movs	r2, #0
 8003af6:	63da      	str	r2, [r3, #60]	; 0x3c
 8003af8:	e004      	b.n	8003b04 <pwm_gen+0x1b0>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2200      	movs	r2, #0
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->timer, motor->ch2, speed);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d105      	bne.n	8003b18 <pwm_gen+0x1c4>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	635a      	str	r2, [r3, #52]	; 0x34
 8003b16:	e018      	b.n	8003b4a <pwm_gen+0x1f6>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d105      	bne.n	8003b2c <pwm_gen+0x1d8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	639a      	str	r2, [r3, #56]	; 0x38
 8003b2a:	e00e      	b.n	8003b4a <pwm_gen+0x1f6>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d105      	bne.n	8003b40 <pwm_gen+0x1ec>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b3e:	e004      	b.n	8003b4a <pwm_gen+0x1f6>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
	}

}
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b002      	add	sp, #8
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	0000ffff 	.word	0x0000ffff

08003b54 <update_pos>:

void update_pos(Robot* robot){
 8003b54:	b5b0      	push	{r4, r5, r7, lr}
 8003b56:	b08c      	sub	sp, #48	; 0x30
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6178      	str	r0, [r7, #20]
	float dLeft = robot->left.encoder * ENC_FRAC;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f7fe ffcd 	bl	8002b00 <__aeabi_i2d>
 8003b66:	4a64      	ldr	r2, [pc, #400]	; (8003cf8 <update_pos+0x1a4>)
 8003b68:	4b64      	ldr	r3, [pc, #400]	; (8003cfc <update_pos+0x1a8>)
 8003b6a:	f7fe f9bd 	bl	8001ee8 <__aeabi_dmul>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	000c      	movs	r4, r1
 8003b72:	0018      	movs	r0, r3
 8003b74:	0021      	movs	r1, r4
 8003b76:	f7ff f84f 	bl	8002c18 <__aeabi_d2f>
 8003b7a:	1c03      	adds	r3, r0, #0
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	float dRight = robot->right.encoder * ENC_FRAC;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b82:	0018      	movs	r0, r3
 8003b84:	f7fe ffbc 	bl	8002b00 <__aeabi_i2d>
 8003b88:	4a5b      	ldr	r2, [pc, #364]	; (8003cf8 <update_pos+0x1a4>)
 8003b8a:	4b5c      	ldr	r3, [pc, #368]	; (8003cfc <update_pos+0x1a8>)
 8003b8c:	f7fe f9ac 	bl	8001ee8 <__aeabi_dmul>
 8003b90:	0003      	movs	r3, r0
 8003b92:	000c      	movs	r4, r1
 8003b94:	0018      	movs	r0, r3
 8003b96:	0021      	movs	r1, r4
 8003b98:	f7ff f83e 	bl	8002c18 <__aeabi_d2f>
 8003b9c:	1c03      	adds	r3, r0, #0
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
	robot->left.encoder = 0;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	605a      	str	r2, [r3, #4]
	robot->right.encoder = 0;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	661a      	str	r2, [r3, #96]	; 0x60
	float phi = (dRight - dLeft) / WHEEL_SEP;
 8003bac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bb0:	f7fd f846 	bl	8000c40 <__aeabi_fsub>
 8003bb4:	1c03      	adds	r3, r0, #0
 8003bb6:	4952      	ldr	r1, [pc, #328]	; (8003d00 <update_pos+0x1ac>)
 8003bb8:	1c18      	adds	r0, r3, #0
 8003bba:	f7fc fdfd 	bl	80007b8 <__aeabi_fdiv>
 8003bbe:	1c03      	adds	r3, r0, #0
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
	float phi_2 = phi / 2;
 8003bc2:	2180      	movs	r1, #128	; 0x80
 8003bc4:	05c9      	lsls	r1, r1, #23
 8003bc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bc8:	f7fc fdf6 	bl	80007b8 <__aeabi_fdiv>
 8003bcc:	1c03      	adds	r3, r0, #0
 8003bce:	623b      	str	r3, [r7, #32]
	float dCenter = (dLeft + dRight) / 2;
 8003bd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bd4:	f7fc fc56 	bl	8000484 <__aeabi_fadd>
 8003bd8:	1c03      	adds	r3, r0, #0
 8003bda:	2180      	movs	r1, #128	; 0x80
 8003bdc:	05c9      	lsls	r1, r1, #23
 8003bde:	1c18      	adds	r0, r3, #0
 8003be0:	f7fc fdea 	bl	80007b8 <__aeabi_fdiv>
 8003be4:	1c03      	adds	r3, r0, #0
 8003be6:	61fb      	str	r3, [r7, #28]
	robot->x += dCenter * cos(robot->theta + phi_2);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	33c0      	adds	r3, #192	; 0xc0
 8003bec:	681c      	ldr	r4, [r3, #0]
 8003bee:	685d      	ldr	r5, [r3, #4]
 8003bf0:	69f8      	ldr	r0, [r7, #28]
 8003bf2:	f7fe ffbf 	bl	8002b74 <__aeabi_f2d>
 8003bf6:	60b8      	str	r0, [r7, #8]
 8003bf8:	60f9      	str	r1, [r7, #12]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	33d0      	adds	r3, #208	; 0xd0
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	603a      	str	r2, [r7, #0]
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	6a38      	ldr	r0, [r7, #32]
 8003c08:	f7fe ffb4 	bl	8002b74 <__aeabi_f2d>
 8003c0c:	0002      	movs	r2, r0
 8003c0e:	000b      	movs	r3, r1
 8003c10:	6838      	ldr	r0, [r7, #0]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	f7fd fa42 	bl	800109c <__aeabi_dadd>
 8003c18:	0002      	movs	r2, r0
 8003c1a:	000b      	movs	r3, r1
 8003c1c:	0010      	movs	r0, r2
 8003c1e:	0019      	movs	r1, r3
 8003c20:	f003 fea8 	bl	8007974 <cos>
 8003c24:	0002      	movs	r2, r0
 8003c26:	000b      	movs	r3, r1
 8003c28:	68b8      	ldr	r0, [r7, #8]
 8003c2a:	68f9      	ldr	r1, [r7, #12]
 8003c2c:	f7fe f95c 	bl	8001ee8 <__aeabi_dmul>
 8003c30:	0002      	movs	r2, r0
 8003c32:	000b      	movs	r3, r1
 8003c34:	0020      	movs	r0, r4
 8003c36:	0029      	movs	r1, r5
 8003c38:	f7fd fa30 	bl	800109c <__aeabi_dadd>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	000c      	movs	r4, r1
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	32c0      	adds	r2, #192	; 0xc0
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	6054      	str	r4, [r2, #4]
	robot->y += dCenter * sin(robot->theta + phi_2);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	33c8      	adds	r3, #200	; 0xc8
 8003c4c:	681c      	ldr	r4, [r3, #0]
 8003c4e:	685d      	ldr	r5, [r3, #4]
 8003c50:	69f8      	ldr	r0, [r7, #28]
 8003c52:	f7fe ff8f 	bl	8002b74 <__aeabi_f2d>
 8003c56:	60b8      	str	r0, [r7, #8]
 8003c58:	60f9      	str	r1, [r7, #12]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	33d0      	adds	r3, #208	; 0xd0
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	603a      	str	r2, [r7, #0]
 8003c64:	607b      	str	r3, [r7, #4]
 8003c66:	6a38      	ldr	r0, [r7, #32]
 8003c68:	f7fe ff84 	bl	8002b74 <__aeabi_f2d>
 8003c6c:	0002      	movs	r2, r0
 8003c6e:	000b      	movs	r3, r1
 8003c70:	6838      	ldr	r0, [r7, #0]
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	f7fd fa12 	bl	800109c <__aeabi_dadd>
 8003c78:	0002      	movs	r2, r0
 8003c7a:	000b      	movs	r3, r1
 8003c7c:	0010      	movs	r0, r2
 8003c7e:	0019      	movs	r1, r3
 8003c80:	f003 fefe 	bl	8007a80 <sin>
 8003c84:	0002      	movs	r2, r0
 8003c86:	000b      	movs	r3, r1
 8003c88:	68b8      	ldr	r0, [r7, #8]
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	f7fe f92c 	bl	8001ee8 <__aeabi_dmul>
 8003c90:	0002      	movs	r2, r0
 8003c92:	000b      	movs	r3, r1
 8003c94:	0020      	movs	r0, r4
 8003c96:	0029      	movs	r1, r5
 8003c98:	f7fd fa00 	bl	800109c <__aeabi_dadd>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	000c      	movs	r4, r1
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	32c8      	adds	r2, #200	; 0xc8
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	6054      	str	r4, [r2, #4]
	robot->theta += phi;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	33d0      	adds	r3, #208	; 0xd0
 8003cac:	681c      	ldr	r4, [r3, #0]
 8003cae:	685d      	ldr	r5, [r3, #4]
 8003cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cb2:	f7fe ff5f 	bl	8002b74 <__aeabi_f2d>
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	000b      	movs	r3, r1
 8003cba:	0020      	movs	r0, r4
 8003cbc:	0029      	movs	r1, r5
 8003cbe:	f7fd f9ed 	bl	800109c <__aeabi_dadd>
 8003cc2:	0003      	movs	r3, r0
 8003cc4:	000c      	movs	r4, r1
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	32d0      	adds	r2, #208	; 0xd0
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	6054      	str	r4, [r2, #4]
	robot->theta = fmod(robot->theta,(2*M_PI));
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	33d0      	adds	r3, #208	; 0xd0
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <update_pos+0x1b0>)
 8003cd8:	4c0b      	ldr	r4, [pc, #44]	; (8003d08 <update_pos+0x1b4>)
 8003cda:	001a      	movs	r2, r3
 8003cdc:	0023      	movs	r3, r4
 8003cde:	f003 ff15 	bl	8007b0c <fmod>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	000c      	movs	r4, r1
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	32d0      	adds	r2, #208	; 0xd0
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	6054      	str	r4, [r2, #4]
}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b00c      	add	sp, #48	; 0x30
 8003cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	9999999a 	.word	0x9999999a
 8003cfc:	3f699999 	.word	0x3f699999
 8003d00:	41300000 	.word	0x41300000
 8003d04:	54442d18 	.word	0x54442d18
 8003d08:	401921fb 	.word	0x401921fb

08003d0c <move_until>:

/**
 * @Brief move the robot forward until compare returns compare value
 * Returns 1 when compare == compare_value, 0 otherwise (call in a loop).
 */
int move_until(Robot* robot, int (*compare)(), int compare_value){
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
	if(compare() != compare_value){
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4798      	blx	r3
 8003d1c:	0002      	movs	r2, r0
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d015      	beq.n	8003d50 <move_until+0x44>
		robot->left.dir = FORWARD;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2201      	movs	r2, #1
 8003d28:	701a      	strb	r2, [r3, #0]
		robot->right.dir = FORWARD;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	225c      	movs	r2, #92	; 0x5c
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]
		pwm_gen(&robot->left, MAX_SPEED/2);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4a12      	ldr	r2, [pc, #72]	; (8003d80 <move_until+0x74>)
 8003d36:	0011      	movs	r1, r2
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f7ff fe0b 	bl	8003954 <pwm_gen>
		pwm_gen(&robot->right, MAX_SPEED/2);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	335c      	adds	r3, #92	; 0x5c
 8003d42:	4a0f      	ldr	r2, [pc, #60]	; (8003d80 <move_until+0x74>)
 8003d44:	0011      	movs	r1, r2
 8003d46:	0018      	movs	r0, r3
 8003d48:	f7ff fe04 	bl	8003954 <pwm_gen>
		return 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e012      	b.n	8003d76 <move_until+0x6a>
	} else {
		robot->left.dir = BRAKE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
		robot->right.dir = BRAKE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	225c      	movs	r2, #92	; 0x5c
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5499      	strb	r1, [r3, r2]
		pwm_gen(&robot->left, 0);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2100      	movs	r1, #0
 8003d62:	0018      	movs	r0, r3
 8003d64:	f7ff fdf6 	bl	8003954 <pwm_gen>
		pwm_gen(&robot->right, 0);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	335c      	adds	r3, #92	; 0x5c
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f7ff fdf0 	bl	8003954 <pwm_gen>
		return 1;
 8003d74:	2301      	movs	r3, #1
	}
}
 8003d76:	0018      	movs	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b004      	add	sp, #16
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	00007fff 	.word	0x00007fff

08003d84 <turn_until>:
/**
 * @Brief turn the robot until compare returns 0
 * compare < 0 turns counterclockwise, >0 turns clockwise
 * Returns 1 when compare == compare_value, 0 otherwise (call in a loop).
 */
int turn_until(Robot* robot, int (*compare)()){
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
	int comp = compare();
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	4798      	blx	r3
 8003d92:	0003      	movs	r3, r0
 8003d94:	60fb      	str	r3, [r7, #12]
	if(comp == 0){
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d108      	bne.n	8003dae <turn_until+0x2a>
		robot->left.dir = BRAKE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
		robot->right.dir = BRAKE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	225c      	movs	r2, #92	; 0x5c
 8003da6:	2100      	movs	r1, #0
 8003da8:	5499      	strb	r1, [r3, r2]
		return 1;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e035      	b.n	8003e1a <turn_until+0x96>
	} else if(robot->left.dir == robot->right.dir){
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	569a      	ldrsb	r2, [r3, r2]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	215c      	movs	r1, #92	; 0x5c
 8003db8:	565b      	ldrsb	r3, [r3, r1]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d12c      	bne.n	8003e18 <turn_until+0x94>
		if(comp > 0){
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	dd15      	ble.n	8003df0 <turn_until+0x6c>
			robot->left.dir = FORWARD;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	701a      	strb	r2, [r3, #0]
			robot->right.dir = REVERSE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	225c      	movs	r2, #92	; 0x5c
 8003dce:	21ff      	movs	r1, #255	; 0xff
 8003dd0:	5499      	strb	r1, [r3, r2]
			pwm_gen(&robot->left, MAX_SPEED/2);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a13      	ldr	r2, [pc, #76]	; (8003e24 <turn_until+0xa0>)
 8003dd6:	0011      	movs	r1, r2
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7ff fdbb 	bl	8003954 <pwm_gen>
			pwm_gen(&robot->right, MAX_SPEED/2);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	335c      	adds	r3, #92	; 0x5c
 8003de2:	4a10      	ldr	r2, [pc, #64]	; (8003e24 <turn_until+0xa0>)
 8003de4:	0011      	movs	r1, r2
 8003de6:	0018      	movs	r0, r3
 8003de8:	f7ff fdb4 	bl	8003954 <pwm_gen>
			return 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	e014      	b.n	8003e1a <turn_until+0x96>
		} else{
			robot->left.dir = REVERSE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	22ff      	movs	r2, #255	; 0xff
 8003df4:	701a      	strb	r2, [r3, #0]
			robot->right.dir = FORWARD;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	225c      	movs	r2, #92	; 0x5c
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	5499      	strb	r1, [r3, r2]
			pwm_gen(&robot->left, MAX_SPEED/2);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a08      	ldr	r2, [pc, #32]	; (8003e24 <turn_until+0xa0>)
 8003e02:	0011      	movs	r1, r2
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7ff fda5 	bl	8003954 <pwm_gen>
			pwm_gen(&robot->right, MAX_SPEED/2);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	335c      	adds	r3, #92	; 0x5c
 8003e0e:	4a05      	ldr	r2, [pc, #20]	; (8003e24 <turn_until+0xa0>)
 8003e10:	0011      	movs	r1, r2
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7ff fd9e 	bl	8003954 <pwm_gen>
		}
	}
	return 0;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b004      	add	sp, #16
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	00007fff 	.word	0x00007fff

08003e28 <stop>:

void stop(Robot* robot){
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	robot->left.dir = BRAKE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
	robot->right.dir = BRAKE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	225c      	movs	r2, #92	; 0x5c
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	5499      	strb	r1, [r3, r2]
	pwm_gen(&robot->left, 0);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2100      	movs	r1, #0
 8003e42:	0018      	movs	r0, r3
 8003e44:	f7ff fd86 	bl	8003954 <pwm_gen>
	pwm_gen(&robot->right, 0);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	335c      	adds	r3, #92	; 0x5c
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f7ff fd80 	bl	8003954 <pwm_gen>
}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b002      	add	sp, #8
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <DMAInit>:

/**
 * Light Sensors
 * Author: Andrew Hoover
 */
void DMAInit(uint32_t* buffer, uint32_t length){
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8003e66:	4b47      	ldr	r3, [pc, #284]	; (8003f84 <DMAInit+0x128>)
 8003e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e6a:	4b46      	ldr	r3, [pc, #280]	; (8003f84 <DMAInit+0x128>)
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
	DMA1_Channel1->CCR &= ~DMA_CCR_MEM2MEM;
 8003e72:	4b45      	ldr	r3, [pc, #276]	; (8003f88 <DMAInit+0x12c>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	4b44      	ldr	r3, [pc, #272]	; (8003f88 <DMAInit+0x12c>)
 8003e78:	4944      	ldr	r1, [pc, #272]	; (8003f8c <DMAInit+0x130>)
 8003e7a:	400a      	ands	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PL;
 8003e7e:	4b42      	ldr	r3, [pc, #264]	; (8003f88 <DMAInit+0x12c>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <DMAInit+0x12c>)
 8003e84:	4942      	ldr	r1, [pc, #264]	; (8003f90 <DMAInit+0x134>)
 8003e86:	400a      	ands	r2, r1
 8003e88:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_PL_1;
 8003e8a:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <DMAInit+0x12c>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4b3e      	ldr	r3, [pc, #248]	; (8003f88 <DMAInit+0x12c>)
 8003e90:	2180      	movs	r1, #128	; 0x80
 8003e92:	0189      	lsls	r1, r1, #6
 8003e94:	430a      	orrs	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PSIZE;
 8003e98:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <DMAInit+0x12c>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b3a      	ldr	r3, [pc, #232]	; (8003f88 <DMAInit+0x12c>)
 8003e9e:	493d      	ldr	r1, [pc, #244]	; (8003f94 <DMAInit+0x138>)
 8003ea0:	400a      	ands	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0; // 16bits
 8003ea4:	4b38      	ldr	r3, [pc, #224]	; (8003f88 <DMAInit+0x12c>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4b37      	ldr	r3, [pc, #220]	; (8003f88 <DMAInit+0x12c>)
 8003eaa:	2180      	movs	r1, #128	; 0x80
 8003eac:	0049      	lsls	r1, r1, #1
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_MSIZE;
 8003eb2:	4b35      	ldr	r3, [pc, #212]	; (8003f88 <DMAInit+0x12c>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	4b34      	ldr	r3, [pc, #208]	; (8003f88 <DMAInit+0x12c>)
 8003eb8:	4937      	ldr	r1, [pc, #220]	; (8003f98 <DMAInit+0x13c>)
 8003eba:	400a      	ands	r2, r1
 8003ebc:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MSIZE_0; // 16bits
 8003ebe:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <DMAInit+0x12c>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	4b31      	ldr	r3, [pc, #196]	; (8003f88 <DMAInit+0x12c>)
 8003ec4:	2180      	movs	r1, #128	; 0x80
 8003ec6:	00c9      	lsls	r1, r1, #3
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_PINC;
 8003ecc:	4b2e      	ldr	r3, [pc, #184]	; (8003f88 <DMAInit+0x12c>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b2d      	ldr	r3, [pc, #180]	; (8003f88 <DMAInit+0x12c>)
 8003ed2:	2140      	movs	r1, #64	; 0x40
 8003ed4:	438a      	bics	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 8003ed8:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <DMAInit+0x12c>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b2a      	ldr	r3, [pc, #168]	; (8003f88 <DMAInit+0x12c>)
 8003ede:	2180      	movs	r1, #128	; 0x80
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_CIRC;
 8003ee4:	4b28      	ldr	r3, [pc, #160]	; (8003f88 <DMAInit+0x12c>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4b27      	ldr	r3, [pc, #156]	; (8003f88 <DMAInit+0x12c>)
 8003eea:	2120      	movs	r1, #32
 8003eec:	438a      	bics	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8003ef0:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <DMAInit+0x12c>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <DMAInit+0x12c>)
 8003ef6:	2120      	movs	r1, #32
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CCR &= ~DMA_CCR_DIR;
 8003efc:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <DMAInit+0x12c>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <DMAInit+0x12c>)
 8003f02:	2110      	movs	r1, #16
 8003f04:	438a      	bics	r2, r1
 8003f06:	601a      	str	r2, [r3, #0]

	DMA1_Channel1->CNDTR = length;
 8003f08:	4b1f      	ldr	r3, [pc, #124]	; (8003f88 <DMAInit+0x12c>)
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	605a      	str	r2, [r3, #4]

	DMA1_Channel1->CPAR = (uint32_t) &(ADC1->DR);
 8003f0e:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <DMAInit+0x12c>)
 8003f10:	4a22      	ldr	r2, [pc, #136]	; (8003f9c <DMAInit+0x140>)
 8003f12:	609a      	str	r2, [r3, #8]

	DMA1_Channel1->CMAR = (uint32_t) buffer;
 8003f14:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <DMAInit+0x12c>)
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	60da      	str	r2, [r3, #12]

	DMA1_CSELR->CSELR &= ~DMA_CSELR_C1S;
 8003f1a:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <DMAInit+0x144>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <DMAInit+0x144>)
 8003f20:	210f      	movs	r1, #15
 8003f22:	438a      	bics	r2, r1
 8003f24:	601a      	str	r2, [r3, #0]
	DMA1_Channel1->CCR |= DMA_CCR_EN;
 8003f26:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <DMAInit+0x12c>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4b17      	ldr	r3, [pc, #92]	; (8003f88 <DMAInit+0x12c>)
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]

	ADC1->CFGR1 |= ADC_CFGR1_DMACFG;
 8003f32:	4b1c      	ldr	r3, [pc, #112]	; (8003fa4 <DMAInit+0x148>)
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <DMAInit+0x148>)
 8003f38:	2102      	movs	r1, #2
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	60da      	str	r2, [r3, #12]
	ADC1->CFGR1 |= ADC_CFGR1_DMAEN;
 8003f3e:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <DMAInit+0x148>)
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <DMAInit+0x148>)
 8003f44:	2101      	movs	r1, #1
 8003f46:	430a      	orrs	r2, r1
 8003f48:	60da      	str	r2, [r3, #12]
	ADC1->CFGR1 |= ADC_CFGR1_CONT;
 8003f4a:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <DMAInit+0x148>)
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <DMAInit+0x148>)
 8003f50:	2180      	movs	r1, #128	; 0x80
 8003f52:	0189      	lsls	r1, r1, #6
 8003f54:	430a      	orrs	r2, r1
 8003f56:	60da      	str	r2, [r3, #12]
	ADC1->IER |= ADC_IER_EOSIE;
 8003f58:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <DMAInit+0x148>)
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <DMAInit+0x148>)
 8003f5e:	2108      	movs	r1, #8
 8003f60:	430a      	orrs	r2, r1
 8003f62:	605a      	str	r2, [r3, #4]
	ADC1->CR |= ADC_CR_ADEN;
 8003f64:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <DMAInit+0x148>)
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <DMAInit+0x148>)
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]
	ADC1->CR |= ADC_CR_ADSTART;
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <DMAInit+0x148>)
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <DMAInit+0x148>)
 8003f76:	2104      	movs	r1, #4
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	609a      	str	r2, [r3, #8]
}
 8003f7c:	46c0      	nop			; (mov r8, r8)
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b002      	add	sp, #8
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40020008 	.word	0x40020008
 8003f8c:	ffffbfff 	.word	0xffffbfff
 8003f90:	ffffcfff 	.word	0xffffcfff
 8003f94:	fffffcff 	.word	0xfffffcff
 8003f98:	fffff3ff 	.word	0xfffff3ff
 8003f9c:	40012440 	.word	0x40012440
 8003fa0:	400200a8 	.word	0x400200a8
 8003fa4:	40012400 	.word	0x40012400

08003fa8 <check_light_variance>:

/**
 *  @brief returns True if 1 direction of light is 25% brighter than the other 3, otherwise returns 0
 */
int check_light_variance(void){
 8003fa8:	b5b0      	push	{r4, r5, r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af00      	add	r7, sp, #0
	extern uint16_t buffer[];
	int front = (int)buffer[0];
 8003fae:	4b38      	ldr	r3, [pc, #224]	; (8004090 <check_light_variance+0xe8>)
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
	int left = (int)buffer[1];
 8003fb4:	4b36      	ldr	r3, [pc, #216]	; (8004090 <check_light_variance+0xe8>)
 8003fb6:	885b      	ldrh	r3, [r3, #2]
 8003fb8:	623b      	str	r3, [r7, #32]
	int rear = (int)buffer[2];
 8003fba:	4b35      	ldr	r3, [pc, #212]	; (8004090 <check_light_variance+0xe8>)
 8003fbc:	889b      	ldrh	r3, [r3, #4]
 8003fbe:	61fb      	str	r3, [r7, #28]
	int right = (int)buffer[3];
 8003fc0:	4b33      	ldr	r3, [pc, #204]	; (8004090 <check_light_variance+0xe8>)
 8003fc2:	88db      	ldrh	r3, [r3, #6]
 8003fc4:	61bb      	str	r3, [r7, #24]

	int sum = front+left+rear+right;
 8003fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	18d2      	adds	r2, r2, r3
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	18d3      	adds	r3, r2, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	18d3      	adds	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]
	int avg =  (float)sum / 4;
 8003fd6:	6978      	ldr	r0, [r7, #20]
 8003fd8:	f7fd f816 	bl	8001008 <__aeabi_i2f>
 8003fdc:	1c03      	adds	r3, r0, #0
 8003fde:	2181      	movs	r1, #129	; 0x81
 8003fe0:	05c9      	lsls	r1, r1, #23
 8003fe2:	1c18      	adds	r0, r3, #0
 8003fe4:	f7fc fbe8 	bl	80007b8 <__aeabi_fdiv>
 8003fe8:	1c03      	adds	r3, r0, #0
 8003fea:	1c18      	adds	r0, r3, #0
 8003fec:	f7fc ffec 	bl	8000fc8 <__aeabi_f2iz>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	613b      	str	r3, [r7, #16]

	//4-way max
	int max = fmax(fmax(front, left), fmax(right, rear));
 8003ff4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ff6:	f7fe fd83 	bl	8002b00 <__aeabi_i2d>
 8003ffa:	0004      	movs	r4, r0
 8003ffc:	000d      	movs	r5, r1
 8003ffe:	6a38      	ldr	r0, [r7, #32]
 8004000:	f7fe fd7e 	bl	8002b00 <__aeabi_i2d>
 8004004:	0002      	movs	r2, r0
 8004006:	000b      	movs	r3, r1
 8004008:	0020      	movs	r0, r4
 800400a:	0029      	movs	r1, r5
 800400c:	f003 fcf4 	bl	80079f8 <fmax>
 8004010:	0004      	movs	r4, r0
 8004012:	000d      	movs	r5, r1
 8004014:	69b8      	ldr	r0, [r7, #24]
 8004016:	f7fe fd73 	bl	8002b00 <__aeabi_i2d>
 800401a:	6038      	str	r0, [r7, #0]
 800401c:	6079      	str	r1, [r7, #4]
 800401e:	69f8      	ldr	r0, [r7, #28]
 8004020:	f7fe fd6e 	bl	8002b00 <__aeabi_i2d>
 8004024:	0002      	movs	r2, r0
 8004026:	000b      	movs	r3, r1
 8004028:	6838      	ldr	r0, [r7, #0]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	f003 fce4 	bl	80079f8 <fmax>
 8004030:	0002      	movs	r2, r0
 8004032:	000b      	movs	r3, r1
 8004034:	0020      	movs	r0, r4
 8004036:	0029      	movs	r1, r5
 8004038:	f003 fcde 	bl	80079f8 <fmax>
 800403c:	0003      	movs	r3, r0
 800403e:	000c      	movs	r4, r1
 8004040:	0018      	movs	r0, r3
 8004042:	0021      	movs	r1, r4
 8004044:	f7fe fd26 	bl	8002a94 <__aeabi_d2iz>
 8004048:	0003      	movs	r3, r0
 800404a:	60fb      	str	r3, [r7, #12]


	float deviation = (float)(max - avg) / avg;
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	0018      	movs	r0, r3
 8004054:	f7fc ffd8 	bl	8001008 <__aeabi_i2f>
 8004058:	1c04      	adds	r4, r0, #0
 800405a:	6938      	ldr	r0, [r7, #16]
 800405c:	f7fc ffd4 	bl	8001008 <__aeabi_i2f>
 8004060:	1c03      	adds	r3, r0, #0
 8004062:	1c19      	adds	r1, r3, #0
 8004064:	1c20      	adds	r0, r4, #0
 8004066:	f7fc fba7 	bl	80007b8 <__aeabi_fdiv>
 800406a:	1c03      	adds	r3, r0, #0
 800406c:	60bb      	str	r3, [r7, #8]
	if(deviation < 0.1)
 800406e:	68b8      	ldr	r0, [r7, #8]
 8004070:	f7fe fd80 	bl	8002b74 <__aeabi_f2d>
 8004074:	4a07      	ldr	r2, [pc, #28]	; (8004094 <check_light_variance+0xec>)
 8004076:	4b08      	ldr	r3, [pc, #32]	; (8004098 <check_light_variance+0xf0>)
 8004078:	f7fc f9dc 	bl	8000434 <__aeabi_dcmplt>
 800407c:	1e03      	subs	r3, r0, #0
 800407e:	d001      	beq.n	8004084 <check_light_variance+0xdc>
		return 0;
 8004080:	2300      	movs	r3, #0
 8004082:	e000      	b.n	8004086 <check_light_variance+0xde>
	return 1;
 8004084:	2301      	movs	r3, #1
}
 8004086:	0018      	movs	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	b00a      	add	sp, #40	; 0x28
 800408c:	bdb0      	pop	{r4, r5, r7, pc}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	200001e8 	.word	0x200001e8
 8004094:	9999999a 	.word	0x9999999a
 8004098:	3fb99999 	.word	0x3fb99999

0800409c <check_light_direction>:

/**
 * @brief returns -1 if left is the brightest dir, 1 if right or rear is the brightest, 0 otherwise
 */
int check_light_direction(void){
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
	extern uint16_t buffer[];
	int max = -1;
 80040a2:	2301      	movs	r3, #1
 80040a4:	425b      	negs	r3, r3
 80040a6:	60fb      	str	r3, [r7, #12]
	int maxIndex = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60bb      	str	r3, [r7, #8]

	for(int i = 0; i <= 3; i++){
 80040ac:	2300      	movs	r3, #0
 80040ae:	607b      	str	r3, [r7, #4]
 80040b0:	e011      	b.n	80040d6 <check_light_direction+0x3a>
		if(buffer[i] > max){
 80040b2:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <check_light_direction+0x8c>)
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	0052      	lsls	r2, r2, #1
 80040b8:	5ad3      	ldrh	r3, [r2, r3]
 80040ba:	001a      	movs	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4293      	cmp	r3, r2
 80040c0:	da06      	bge.n	80040d0 <check_light_direction+0x34>
			max = buffer[i];
 80040c2:	4b19      	ldr	r3, [pc, #100]	; (8004128 <check_light_direction+0x8c>)
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	0052      	lsls	r2, r2, #1
 80040c8:	5ad3      	ldrh	r3, [r2, r3]
 80040ca:	60fb      	str	r3, [r7, #12]
			maxIndex = i;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i <= 3; i++){
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3301      	adds	r3, #1
 80040d4:	607b      	str	r3, [r7, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	ddea      	ble.n	80040b2 <check_light_direction+0x16>
		}
	}

	if(maxIndex == FRONT) return 0;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <check_light_direction+0x4a>
 80040e2:	2300      	movs	r3, #0
 80040e4:	e01b      	b.n	800411e <check_light_direction+0x82>
	// If the left and right are too similar, move forward a bit
	if(maxIndex != REAR && abs(buffer[LEFT] - buffer[RIGHT]) < 200) return 0;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d011      	beq.n	8004110 <check_light_direction+0x74>
 80040ec:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <check_light_direction+0x8c>)
 80040ee:	885b      	ldrh	r3, [r3, #2]
 80040f0:	001a      	movs	r2, r3
 80040f2:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <check_light_direction+0x8c>)
 80040f4:	88db      	ldrh	r3, [r3, #6]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	33c7      	adds	r3, #199	; 0xc7
 80040fa:	db09      	blt.n	8004110 <check_light_direction+0x74>
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <check_light_direction+0x8c>)
 80040fe:	885b      	ldrh	r3, [r3, #2]
 8004100:	001a      	movs	r2, r3
 8004102:	4b09      	ldr	r3, [pc, #36]	; (8004128 <check_light_direction+0x8c>)
 8004104:	88db      	ldrh	r3, [r3, #6]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2bc7      	cmp	r3, #199	; 0xc7
 800410a:	dc01      	bgt.n	8004110 <check_light_direction+0x74>
 800410c:	2300      	movs	r3, #0
 800410e:	e006      	b.n	800411e <check_light_direction+0x82>
	return maxIndex == LEFT ? -1 : 1;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d102      	bne.n	800411c <check_light_direction+0x80>
 8004116:	2301      	movs	r3, #1
 8004118:	425b      	negs	r3, r3
 800411a:	e000      	b.n	800411e <check_light_direction+0x82>
 800411c:	2301      	movs	r3, #1
}
 800411e:	0018      	movs	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	b004      	add	sp, #16
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	200001e8 	.word	0x200001e8

0800412c <TIM6_UltraSonic_Handler>:

/***
 * Ultrasonic Sensors
 * 	Author: Phill Spiritoso
 */
void TIM6_UltraSonic_Handler(void){
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
	if (TrackSet == 0){
 8004130:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <TIM6_UltraSonic_Handler+0xb4>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d136      	bne.n	80041a6 <TIM6_UltraSonic_Handler+0x7a>
		if (UltraTurn > 0){
 8004138:	4b2a      	ldr	r3, [pc, #168]	; (80041e4 <TIM6_UltraSonic_Handler+0xb8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	dd02      	ble.n	8004146 <TIM6_UltraSonic_Handler+0x1a>
			checkTurn();
 8004140:	f000 f85e 	bl	8004200 <checkTurn>
 8004144:	e026      	b.n	8004194 <TIM6_UltraSonic_Handler+0x68>
		}
		else if ((left == right) && (LCheck == RCheck)){
 8004146:	4b28      	ldr	r3, [pc, #160]	; (80041e8 <TIM6_UltraSonic_Handler+0xbc>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4b28      	ldr	r3, [pc, #160]	; (80041ec <TIM6_UltraSonic_Handler+0xc0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d108      	bne.n	8004164 <TIM6_UltraSonic_Handler+0x38>
 8004152:	4b27      	ldr	r3, [pc, #156]	; (80041f0 <TIM6_UltraSonic_Handler+0xc4>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <TIM6_UltraSonic_Handler+0xc8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d102      	bne.n	8004164 <TIM6_UltraSonic_Handler+0x38>
			checkStraight();
 800415e:	f000 f88d 	bl	800427c <checkStraight>
 8004162:	e017      	b.n	8004194 <TIM6_UltraSonic_Handler+0x68>
		}
		else if(left > 0){
 8004164:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <TIM6_UltraSonic_Handler+0xbc>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	dd02      	ble.n	8004172 <TIM6_UltraSonic_Handler+0x46>
			checkLeft();
 800416c:	f000 f8aa 	bl	80042c4 <checkLeft>
 8004170:	e010      	b.n	8004194 <TIM6_UltraSonic_Handler+0x68>
		}
		else if(right > 0){
 8004172:	4b1e      	ldr	r3, [pc, #120]	; (80041ec <TIM6_UltraSonic_Handler+0xc0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	dd02      	ble.n	8004180 <TIM6_UltraSonic_Handler+0x54>
			checkRight();
 800417a:	f000 f8d7 	bl	800432c <checkRight>
 800417e:	e009      	b.n	8004194 <TIM6_UltraSonic_Handler+0x68>
		}
		else if ((RCheck > 0) && (LCheck > 0)){
 8004180:	4b1c      	ldr	r3, [pc, #112]	; (80041f4 <TIM6_UltraSonic_Handler+0xc8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	dd05      	ble.n	8004194 <TIM6_UltraSonic_Handler+0x68>
 8004188:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <TIM6_UltraSonic_Handler+0xc4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	dd01      	ble.n	8004194 <TIM6_UltraSonic_Handler+0x68>
			determineDir();
 8004190:	f000 f8fe 	bl	8004390 <determineDir>
		}
		if (UltraTurn == 0) {
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <TIM6_UltraSonic_Handler+0xb8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d104      	bne.n	80041a6 <TIM6_UltraSonic_Handler+0x7a>
		Track++;
 800419c:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <TIM6_UltraSonic_Handler+0xcc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <TIM6_UltraSonic_Handler+0xcc>)
 80041a4:	601a      	str	r2, [r3, #0]
		}
	}
		if (UltraTurn == 0) {
 80041a6:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <TIM6_UltraSonic_Handler+0xb8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d112      	bne.n	80041d4 <TIM6_UltraSonic_Handler+0xa8>
			if (Track == 2){
 80041ae:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <TIM6_UltraSonic_Handler+0xcc>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d103      	bne.n	80041be <TIM6_UltraSonic_Handler+0x92>
				init_Left();
 80041b6:	f000 f917 	bl	80043e8 <init_Left>
				TrackLeft();
 80041ba:	f000 f95b 	bl	8004474 <TrackLeft>
			}
			if (Track == 3){
 80041be:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <TIM6_UltraSonic_Handler+0xcc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	d106      	bne.n	80041d4 <TIM6_UltraSonic_Handler+0xa8>
				init_Right();
 80041c6:	f000 f927 	bl	8004418 <init_Right>
				TrackRight();
 80041ca:	f000 f971 	bl	80044b0 <TrackRight>
				Track = 0;
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <TIM6_UltraSonic_Handler+0xcc>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
			}
	}
	count = 0;
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <TIM6_UltraSonic_Handler+0xd0>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]

}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	200000a4 	.word	0x200000a4
 80041e4:	2000008c 	.word	0x2000008c
 80041e8:	20000094 	.word	0x20000094
 80041ec:	20000098 	.word	0x20000098
 80041f0:	2000009c 	.word	0x2000009c
 80041f4:	200000a0 	.word	0x200000a0
 80041f8:	200000a8 	.word	0x200000a8
 80041fc:	20000090 	.word	0x20000090

08004200 <checkTurn>:
void checkTurn(void){
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
	if ((UltraTurn == UltraLeft) && (count > 50)){
 8004204:	4b17      	ldr	r3, [pc, #92]	; (8004264 <checkTurn+0x64>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d108      	bne.n	800421e <checkTurn+0x1e>
 800420c:	4b16      	ldr	r3, [pc, #88]	; (8004268 <checkTurn+0x68>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b32      	cmp	r3, #50	; 0x32
 8004212:	dd04      	ble.n	800421e <checkTurn+0x1e>
		printf("Keep turning left\r\n");
 8004214:	4b15      	ldr	r3, [pc, #84]	; (800426c <checkTurn+0x6c>)
 8004216:	0018      	movs	r0, r3
 8004218:	f002 ff64 	bl	80070e4 <puts>
	if ((UltraTurn == UltraLeft) && (count > 50)){
 800421c:	e01f      	b.n	800425e <checkTurn+0x5e>
	}
	else if ((UltraTurn == UltraRight) && (count > 50)){
 800421e:	4b11      	ldr	r3, [pc, #68]	; (8004264 <checkTurn+0x64>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d108      	bne.n	8004238 <checkTurn+0x38>
 8004226:	4b10      	ldr	r3, [pc, #64]	; (8004268 <checkTurn+0x68>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b32      	cmp	r3, #50	; 0x32
 800422c:	dd04      	ble.n	8004238 <checkTurn+0x38>
		printf("Keep turning right\r\n");
 800422e:	4b10      	ldr	r3, [pc, #64]	; (8004270 <checkTurn+0x70>)
 8004230:	0018      	movs	r0, r3
 8004232:	f002 ff57 	bl	80070e4 <puts>
	else if ((UltraTurn == UltraRight) && (count > 50)){
 8004236:	e012      	b.n	800425e <checkTurn+0x5e>
	}
	else {
		printf("Good to go Forward\r\n");
 8004238:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <checkTurn+0x74>)
 800423a:	0018      	movs	r0, r3
 800423c:	f002 ff52 	bl	80070e4 <puts>
		robot.obstacle[1] = 0;
 8004240:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <checkTurn+0x78>)
 8004242:	22da      	movs	r2, #218	; 0xda
 8004244:	2100      	movs	r1, #0
 8004246:	5499      	strb	r1, [r3, r2]
		robot.obstacle[2] = 0;
 8004248:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <checkTurn+0x78>)
 800424a:	22db      	movs	r2, #219	; 0xdb
 800424c:	2100      	movs	r1, #0
 800424e:	5499      	strb	r1, [r3, r2]
		robot.obstacle[0] = 0;
 8004250:	4b09      	ldr	r3, [pc, #36]	; (8004278 <checkTurn+0x78>)
 8004252:	22d9      	movs	r2, #217	; 0xd9
 8004254:	2100      	movs	r1, #0
 8004256:	5499      	strb	r1, [r3, r2]
		UltraTurn = 0;
 8004258:	4b02      	ldr	r3, [pc, #8]	; (8004264 <checkTurn+0x64>)
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
	}
}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	2000008c 	.word	0x2000008c
 8004268:	20000090 	.word	0x20000090
 800426c:	08008d80 	.word	0x08008d80
 8004270:	08008d94 	.word	0x08008d94
 8004274:	08008da8 	.word	0x08008da8
 8004278:	200001f8 	.word	0x200001f8

0800427c <checkStraight>:
void checkStraight(void){
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
	if (count > 50){
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <checkStraight+0x38>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b32      	cmp	r3, #50	; 0x32
 8004286:	dd0d      	ble.n	80042a4 <checkStraight+0x28>
		robot.obstacle[1] = 1;
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <checkStraight+0x3c>)
 800428a:	22da      	movs	r2, #218	; 0xda
 800428c:	2101      	movs	r1, #1
 800428e:	5499      	strb	r1, [r3, r2]
		printf("checkDirection\r\n");
 8004290:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <checkStraight+0x40>)
 8004292:	0018      	movs	r0, r3
 8004294:	f002 ff26 	bl	80070e4 <puts>
		left = 1;
 8004298:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <checkStraight+0x44>)
 800429a:	2201      	movs	r2, #1
 800429c:	601a      	str	r2, [r3, #0]
		init_Left();
 800429e:	f000 f8a3 	bl	80043e8 <init_Left>
	} else {
		robot.obstacle[1] = 0;
	}
}
 80042a2:	e003      	b.n	80042ac <checkStraight+0x30>
		robot.obstacle[1] = 0;
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <checkStraight+0x3c>)
 80042a6:	22da      	movs	r2, #218	; 0xda
 80042a8:	2100      	movs	r1, #0
 80042aa:	5499      	strb	r1, [r3, r2]
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	20000090 	.word	0x20000090
 80042b8:	200001f8 	.word	0x200001f8
 80042bc:	08008dbc 	.word	0x08008dbc
 80042c0:	20000094 	.word	0x20000094

080042c4 <checkLeft>:
void checkLeft(void){
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
	left++;
 80042c8:	4b13      	ldr	r3, [pc, #76]	; (8004318 <checkLeft+0x54>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	4b12      	ldr	r3, [pc, #72]	; (8004318 <checkLeft+0x54>)
 80042d0:	601a      	str	r2, [r3, #0]
	if (count > 50){
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <checkLeft+0x58>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b32      	cmp	r3, #50	; 0x32
 80042d8:	dd04      	ble.n	80042e4 <checkLeft+0x20>
		robot.obstacle[0] = 1;
 80042da:	4b11      	ldr	r3, [pc, #68]	; (8004320 <checkLeft+0x5c>)
 80042dc:	22d9      	movs	r2, #217	; 0xd9
 80042de:	2101      	movs	r1, #1
 80042e0:	5499      	strb	r1, [r3, r2]
 80042e2:	e003      	b.n	80042ec <checkLeft+0x28>
	} else robot.obstacle[0] = 0;
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <checkLeft+0x5c>)
 80042e6:	22d9      	movs	r2, #217	; 0xd9
 80042e8:	2100      	movs	r1, #0
 80042ea:	5499      	strb	r1, [r3, r2]
	if (left > 3){
 80042ec:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <checkLeft+0x54>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	dd07      	ble.n	8004304 <checkLeft+0x40>
		left = 0;
 80042f4:	4b08      	ldr	r3, [pc, #32]	; (8004318 <checkLeft+0x54>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
		right = 1;
 80042fa:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <checkLeft+0x60>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
		init_Right();
 8004300:	f000 f88a 	bl	8004418 <init_Right>
	}
	LCheck += count;
 8004304:	4b08      	ldr	r3, [pc, #32]	; (8004328 <checkLeft+0x64>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4b04      	ldr	r3, [pc, #16]	; (800431c <checkLeft+0x58>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	18d2      	adds	r2, r2, r3
 800430e:	4b06      	ldr	r3, [pc, #24]	; (8004328 <checkLeft+0x64>)
 8004310:	601a      	str	r2, [r3, #0]
}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	20000094 	.word	0x20000094
 800431c:	20000090 	.word	0x20000090
 8004320:	200001f8 	.word	0x200001f8
 8004324:	20000098 	.word	0x20000098
 8004328:	2000009c 	.word	0x2000009c

0800432c <checkRight>:
void checkRight(void){
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
	right++;
 8004330:	4b12      	ldr	r3, [pc, #72]	; (800437c <checkRight+0x50>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	4b11      	ldr	r3, [pc, #68]	; (800437c <checkRight+0x50>)
 8004338:	601a      	str	r2, [r3, #0]
	if (count > 50){
 800433a:	4b11      	ldr	r3, [pc, #68]	; (8004380 <checkRight+0x54>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b32      	cmp	r3, #50	; 0x32
 8004340:	dd04      	ble.n	800434c <checkRight+0x20>
		robot.obstacle[2] = 1;
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <checkRight+0x58>)
 8004344:	22db      	movs	r2, #219	; 0xdb
 8004346:	2101      	movs	r1, #1
 8004348:	5499      	strb	r1, [r3, r2]
 800434a:	e003      	b.n	8004354 <checkRight+0x28>
	} else robot.obstacle[2] = 0;
 800434c:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <checkRight+0x58>)
 800434e:	22db      	movs	r2, #219	; 0xdb
 8004350:	2100      	movs	r1, #0
 8004352:	5499      	strb	r1, [r3, r2]
	if (right > 3){
 8004354:	4b09      	ldr	r3, [pc, #36]	; (800437c <checkRight+0x50>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b03      	cmp	r3, #3
 800435a:	dd05      	ble.n	8004368 <checkRight+0x3c>
		left = 0;
 800435c:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <checkRight+0x5c>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
		right = 0;
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <checkRight+0x50>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
	}
	RCheck += count;
 8004368:	4b08      	ldr	r3, [pc, #32]	; (800438c <checkRight+0x60>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b04      	ldr	r3, [pc, #16]	; (8004380 <checkRight+0x54>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	18d2      	adds	r2, r2, r3
 8004372:	4b06      	ldr	r3, [pc, #24]	; (800438c <checkRight+0x60>)
 8004374:	601a      	str	r2, [r3, #0]
}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000098 	.word	0x20000098
 8004380:	20000090 	.word	0x20000090
 8004384:	200001f8 	.word	0x200001f8
 8004388:	20000094 	.word	0x20000094
 800438c:	200000a0 	.word	0x200000a0

08004390 <determineDir>:
void determineDir(void){
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
	if (LCheck < RCheck){
 8004394:	4b0f      	ldr	r3, [pc, #60]	; (80043d4 <determineDir+0x44>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <determineDir+0x48>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	da07      	bge.n	80043b0 <determineDir+0x20>
		printf("Turn Left\r\n");
 80043a0:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <determineDir+0x4c>)
 80043a2:	0018      	movs	r0, r3
 80043a4:	f002 fe9e 	bl	80070e4 <puts>
		UltraTurn = UltraLeft;
 80043a8:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <determineDir+0x50>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e006      	b.n	80043be <determineDir+0x2e>
	}
	else {
		printf("Turn Right\r\n");
 80043b0:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <determineDir+0x54>)
 80043b2:	0018      	movs	r0, r3
 80043b4:	f002 fe96 	bl	80070e4 <puts>
		UltraTurn = UltraRight;
 80043b8:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <determineDir+0x50>)
 80043ba:	2202      	movs	r2, #2
 80043bc:	601a      	str	r2, [r3, #0]
	}
	init_Straight();
 80043be:	f000 f841 	bl	8004444 <init_Straight>
	LCheck = 0;
 80043c2:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <determineDir+0x44>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
	RCheck = 0;
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <determineDir+0x48>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	2000009c 	.word	0x2000009c
 80043d8:	200000a0 	.word	0x200000a0
 80043dc:	08008dcc 	.word	0x08008dcc
 80043e0:	2000008c 	.word	0x2000008c
 80043e4:	08008dd8 	.word	0x08008dd8

080043e8 <init_Left>:
void init_Left(){
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
	GPIOA->ODR |= 1 << 4;
 80043ec:	23a0      	movs	r3, #160	; 0xa0
 80043ee:	05db      	lsls	r3, r3, #23
 80043f0:	695a      	ldr	r2, [r3, #20]
 80043f2:	23a0      	movs	r3, #160	; 0xa0
 80043f4:	05db      	lsls	r3, r3, #23
 80043f6:	2110      	movs	r1, #16
 80043f8:	430a      	orrs	r2, r1
 80043fa:	615a      	str	r2, [r3, #20]
	GPIOC->ODR &= ~(1 << 13);
 80043fc:	4b04      	ldr	r3, [pc, #16]	; (8004410 <init_Left+0x28>)
 80043fe:	695a      	ldr	r2, [r3, #20]
 8004400:	4b03      	ldr	r3, [pc, #12]	; (8004410 <init_Left+0x28>)
 8004402:	4904      	ldr	r1, [pc, #16]	; (8004414 <init_Left+0x2c>)
 8004404:	400a      	ands	r2, r1
 8004406:	615a      	str	r2, [r3, #20]
}
 8004408:	46c0      	nop			; (mov r8, r8)
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	50000800 	.word	0x50000800
 8004414:	ffffdfff 	.word	0xffffdfff

08004418 <init_Right>:
void init_Right() {
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~(1 << 4);
 800441c:	23a0      	movs	r3, #160	; 0xa0
 800441e:	05db      	lsls	r3, r3, #23
 8004420:	695a      	ldr	r2, [r3, #20]
 8004422:	23a0      	movs	r3, #160	; 0xa0
 8004424:	05db      	lsls	r3, r3, #23
 8004426:	2110      	movs	r1, #16
 8004428:	438a      	bics	r2, r1
 800442a:	615a      	str	r2, [r3, #20]
	GPIOC->ODR |= (1 << 13);
 800442c:	4b04      	ldr	r3, [pc, #16]	; (8004440 <init_Right+0x28>)
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	4b03      	ldr	r3, [pc, #12]	; (8004440 <init_Right+0x28>)
 8004432:	2180      	movs	r1, #128	; 0x80
 8004434:	0189      	lsls	r1, r1, #6
 8004436:	430a      	orrs	r2, r1
 8004438:	615a      	str	r2, [r3, #20]
}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	50000800 	.word	0x50000800

08004444 <init_Straight>:
void init_Straight() {
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~(1 << 4);
 8004448:	23a0      	movs	r3, #160	; 0xa0
 800444a:	05db      	lsls	r3, r3, #23
 800444c:	695a      	ldr	r2, [r3, #20]
 800444e:	23a0      	movs	r3, #160	; 0xa0
 8004450:	05db      	lsls	r3, r3, #23
 8004452:	2110      	movs	r1, #16
 8004454:	438a      	bics	r2, r1
 8004456:	615a      	str	r2, [r3, #20]
	GPIOC->ODR &= ~(1 << 13);
 8004458:	4b04      	ldr	r3, [pc, #16]	; (800446c <init_Straight+0x28>)
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	4b03      	ldr	r3, [pc, #12]	; (800446c <init_Straight+0x28>)
 800445e:	4904      	ldr	r1, [pc, #16]	; (8004470 <init_Straight+0x2c>)
 8004460:	400a      	ands	r2, r1
 8004462:	615a      	str	r2, [r3, #20]
}
 8004464:	46c0      	nop			; (mov r8, r8)
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	50000800 	.word	0x50000800
 8004470:	ffffdfff 	.word	0xffffdfff

08004474 <TrackLeft>:
void TrackLeft(){
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
	if (count > 50){
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <TrackLeft+0x30>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b32      	cmp	r3, #50	; 0x32
 800447e:	dd07      	ble.n	8004490 <TrackLeft+0x1c>
		robot.obstacle[0] = 1;
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <TrackLeft+0x34>)
 8004482:	22d9      	movs	r2, #217	; 0xd9
 8004484:	2101      	movs	r1, #1
 8004486:	5499      	strb	r1, [r3, r2]
		TrackSet=1;
 8004488:	4b08      	ldr	r3, [pc, #32]	; (80044ac <TrackLeft+0x38>)
 800448a:	2201      	movs	r2, #1
 800448c:	701a      	strb	r2, [r3, #0]
	}
	else{
		robot.obstacle[0] = 0;
		TrackSet = 0;
	}
}
 800448e:	e006      	b.n	800449e <TrackLeft+0x2a>
		robot.obstacle[0] = 0;
 8004490:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <TrackLeft+0x34>)
 8004492:	22d9      	movs	r2, #217	; 0xd9
 8004494:	2100      	movs	r1, #0
 8004496:	5499      	strb	r1, [r3, r2]
		TrackSet = 0;
 8004498:	4b04      	ldr	r3, [pc, #16]	; (80044ac <TrackLeft+0x38>)
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20000090 	.word	0x20000090
 80044a8:	200001f8 	.word	0x200001f8
 80044ac:	200000a4 	.word	0x200000a4

080044b0 <TrackRight>:
void TrackRight(){
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
	if (count > 50){
 80044b4:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <TrackRight+0x30>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b32      	cmp	r3, #50	; 0x32
 80044ba:	dd07      	ble.n	80044cc <TrackRight+0x1c>
		robot.obstacle[2] = 1;
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <TrackRight+0x34>)
 80044be:	22db      	movs	r2, #219	; 0xdb
 80044c0:	2101      	movs	r1, #1
 80044c2:	5499      	strb	r1, [r3, r2]
		TrackSet=1;
 80044c4:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <TrackRight+0x38>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	701a      	strb	r2, [r3, #0]
	}
	else {
		robot.obstacle[2] = 0;
		TrackSet = 0;
	}
}
 80044ca:	e006      	b.n	80044da <TrackRight+0x2a>
		robot.obstacle[2] = 0;
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <TrackRight+0x34>)
 80044ce:	22db      	movs	r2, #219	; 0xdb
 80044d0:	2100      	movs	r1, #0
 80044d2:	5499      	strb	r1, [r3, r2]
		TrackSet = 0;
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <TrackRight+0x38>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	701a      	strb	r2, [r3, #0]
}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000090 	.word	0x20000090
 80044e4:	200001f8 	.word	0x200001f8
 80044e8:	200000a4 	.word	0x200000a4

080044ec <TIM2_conf>:

void TIM2_conf(void){
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_IOPAEN;
 80044f0:	4b2b      	ldr	r3, [pc, #172]	; (80045a0 <TIM2_conf+0xb4>)
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	4b2a      	ldr	r3, [pc, #168]	; (80045a0 <TIM2_conf+0xb4>)
 80044f6:	2101      	movs	r1, #1
 80044f8:	430a      	orrs	r2, r1
 80044fa:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80044fc:	4b28      	ldr	r3, [pc, #160]	; (80045a0 <TIM2_conf+0xb4>)
 80044fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004500:	4b27      	ldr	r3, [pc, #156]	; (80045a0 <TIM2_conf+0xb4>)
 8004502:	2101      	movs	r1, #1
 8004504:	430a      	orrs	r2, r1
 8004506:	639a      	str	r2, [r3, #56]	; 0x38
	GPIOA->MODER |= 2;
 8004508:	23a0      	movs	r3, #160	; 0xa0
 800450a:	05db      	lsls	r3, r3, #23
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	23a0      	movs	r3, #160	; 0xa0
 8004510:	05db      	lsls	r3, r3, #23
 8004512:	2102      	movs	r1, #2
 8004514:	430a      	orrs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= 2;
 8004518:	23a0      	movs	r3, #160	; 0xa0
 800451a:	05db      	lsls	r3, r3, #23
 800451c:	6a1a      	ldr	r2, [r3, #32]
 800451e:	23a0      	movs	r3, #160	; 0xa0
 8004520:	05db      	lsls	r3, r3, #23
 8004522:	2102      	movs	r1, #2
 8004524:	430a      	orrs	r2, r1
 8004526:	621a      	str	r2, [r3, #32]
	GPIOA->OSPEEDR |= 2;
 8004528:	23a0      	movs	r3, #160	; 0xa0
 800452a:	05db      	lsls	r3, r3, #23
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	23a0      	movs	r3, #160	; 0xa0
 8004530:	05db      	lsls	r3, r3, #23
 8004532:	2102      	movs	r1, #2
 8004534:	430a      	orrs	r2, r1
 8004536:	609a      	str	r2, [r3, #8]
	TIM2->PSC = 20;
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	05db      	lsls	r3, r3, #23
 800453c:	2214      	movs	r2, #20
 800453e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 9;
 8004540:	2380      	movs	r3, #128	; 0x80
 8004542:	05db      	lsls	r3, r3, #23
 8004544:	2209      	movs	r2, #9
 8004546:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	05db      	lsls	r3, r3, #23
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	05db      	lsls	r3, r3, #23
 8004552:	2160      	movs	r1, #96	; 0x60
 8004554:	430a      	orrs	r2, r1
 8004556:	619a      	str	r2, [r3, #24]
	TIM2->CCR1 = 9;
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	05db      	lsls	r3, r3, #23
 800455c:	2209      	movs	r2, #9
 800455e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCER |= 1;
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	05db      	lsls	r3, r3, #23
 8004564:	6a1a      	ldr	r2, [r3, #32]
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	05db      	lsls	r3, r3, #23
 800456a:	2101      	movs	r1, #1
 800456c:	430a      	orrs	r2, r1
 800456e:	621a      	str	r2, [r3, #32]
	TIM2->CR1 |= 1;
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	05db      	lsls	r3, r3, #23
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	05db      	lsls	r3, r3, #23
 800457a:	2101      	movs	r1, #1
 800457c:	430a      	orrs	r2, r1
 800457e:	601a      	str	r2, [r3, #0]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004580:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <TIM2_conf+0xb4>)
 8004582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <TIM2_conf+0xb4>)
 8004586:	2101      	movs	r1, #1
 8004588:	430a      	orrs	r2, r1
 800458a:	639a      	str	r2, [r3, #56]	; 0x38
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <TIM2_conf+0xb4>)
 800458e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004590:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <TIM2_conf+0xb4>)
 8004592:	2110      	movs	r1, #16
 8004594:	430a      	orrs	r2, r1
 8004596:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004598:	46c0      	nop			; (mov r8, r8)
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	40021000 	.word	0x40021000

080045a4 <obstacle_right>:

int obstacle_right(){
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
		return robot.obstacle[2];
 80045a8:	4b02      	ldr	r3, [pc, #8]	; (80045b4 <obstacle_right+0x10>)
 80045aa:	22db      	movs	r2, #219	; 0xdb
 80045ac:	5c9b      	ldrb	r3, [r3, r2]
}
 80045ae:	0018      	movs	r0, r3
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	200001f8 	.word	0x200001f8

080045b8 <obstacle_left>:

int obstacle_left(){
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
		return robot.obstacle[0];
 80045bc:	4b02      	ldr	r3, [pc, #8]	; (80045c8 <obstacle_left+0x10>)
 80045be:	22d9      	movs	r2, #217	; 0xd9
 80045c0:	5c9b      	ldrb	r3, [r3, r2]
}
 80045c2:	0018      	movs	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	200001f8 	.word	0x200001f8

080045cc <ret_one>:

int ret_one(){
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
	return 1;
 80045d0:	2301      	movs	r3, #1
}
 80045d2:	0018      	movs	r0, r3
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045dc:	4b07      	ldr	r3, [pc, #28]	; (80045fc <HAL_MspInit+0x24>)
 80045de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e0:	4b06      	ldr	r3, [pc, #24]	; (80045fc <HAL_MspInit+0x24>)
 80045e2:	2101      	movs	r1, #1
 80045e4:	430a      	orrs	r2, r1
 80045e6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <HAL_MspInit+0x24>)
 80045ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ec:	4b03      	ldr	r3, [pc, #12]	; (80045fc <HAL_MspInit+0x24>)
 80045ee:	2180      	movs	r1, #128	; 0x80
 80045f0:	0549      	lsls	r1, r1, #21
 80045f2:	430a      	orrs	r2, r1
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40021000 	.word	0x40021000

08004600 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004608:	230c      	movs	r3, #12
 800460a:	18fb      	adds	r3, r7, r3
 800460c:	0018      	movs	r0, r3
 800460e:	2314      	movs	r3, #20
 8004610:	001a      	movs	r2, r3
 8004612:	2100      	movs	r1, #0
 8004614:	f002 fcfd 	bl	8007012 <memset>
  if(hadc->Instance==ADC1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a14      	ldr	r2, [pc, #80]	; (8004670 <HAL_ADC_MspInit+0x70>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d122      	bne.n	8004668 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <HAL_ADC_MspInit+0x74>)
 8004624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004626:	4b13      	ldr	r3, [pc, #76]	; (8004674 <HAL_ADC_MspInit+0x74>)
 8004628:	2180      	movs	r1, #128	; 0x80
 800462a:	0089      	lsls	r1, r1, #2
 800462c:	430a      	orrs	r2, r1
 800462e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004630:	4b10      	ldr	r3, [pc, #64]	; (8004674 <HAL_ADC_MspInit+0x74>)
 8004632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004634:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <HAL_ADC_MspInit+0x74>)
 8004636:	2104      	movs	r1, #4
 8004638:	430a      	orrs	r2, r1
 800463a:	62da      	str	r2, [r3, #44]	; 0x2c
 800463c:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <HAL_ADC_MspInit+0x74>)
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	2204      	movs	r2, #4
 8004642:	4013      	ands	r3, r2
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC_IN11
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14 
    */
    GPIO_InitStruct.Pin = LS_FR_Pin|LS_RI_Pin|LS_RE_Pin|LS_LE_Pin 
 8004648:	210c      	movs	r1, #12
 800464a:	187b      	adds	r3, r7, r1
 800464c:	221f      	movs	r2, #31
 800464e:	601a      	str	r2, [r3, #0]
                          |SOIL_MTR_VAL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004650:	187b      	adds	r3, r7, r1
 8004652:	2203      	movs	r2, #3
 8004654:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004656:	187b      	adds	r3, r7, r1
 8004658:	2200      	movs	r2, #0
 800465a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800465c:	187b      	adds	r3, r7, r1
 800465e:	4a06      	ldr	r2, [pc, #24]	; (8004678 <HAL_ADC_MspInit+0x78>)
 8004660:	0019      	movs	r1, r3
 8004662:	0010      	movs	r0, r2
 8004664:	f000 fef0 	bl	8005448 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b008      	add	sp, #32
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40012400 	.word	0x40012400
 8004674:	40021000 	.word	0x40021000
 8004678:	50000800 	.word	0x50000800

0800467c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	2380      	movs	r3, #128	; 0x80
 800468a:	05db      	lsls	r3, r3, #23
 800468c:	429a      	cmp	r2, r3
 800468e:	d105      	bne.n	800469c <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004690:	4b04      	ldr	r3, [pc, #16]	; (80046a4 <HAL_TIM_PWM_MspInit+0x28>)
 8004692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004694:	4b03      	ldr	r3, [pc, #12]	; (80046a4 <HAL_TIM_PWM_MspInit+0x28>)
 8004696:	2101      	movs	r1, #1
 8004698:	430a      	orrs	r2, r1
 800469a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800469c:	46c0      	nop			; (mov r8, r8)
 800469e:	46bd      	mov	sp, r7
 80046a0:	b002      	add	sp, #8
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000

080046a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a10      	ldr	r2, [pc, #64]	; (80046f8 <HAL_TIM_Base_MspInit+0x50>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d106      	bne.n	80046c8 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046ba:	4b10      	ldr	r3, [pc, #64]	; (80046fc <HAL_TIM_Base_MspInit+0x54>)
 80046bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046be:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <HAL_TIM_Base_MspInit+0x54>)
 80046c0:	2102      	movs	r1, #2
 80046c2:	430a      	orrs	r2, r1
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80046c6:	e012      	b.n	80046ee <HAL_TIM_Base_MspInit+0x46>
  else if(htim_base->Instance==TIM6)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a0c      	ldr	r2, [pc, #48]	; (8004700 <HAL_TIM_Base_MspInit+0x58>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d10d      	bne.n	80046ee <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80046d2:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <HAL_TIM_Base_MspInit+0x54>)
 80046d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <HAL_TIM_Base_MspInit+0x54>)
 80046d8:	2110      	movs	r1, #16
 80046da:	430a      	orrs	r2, r1
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80046de:	2200      	movs	r2, #0
 80046e0:	2100      	movs	r1, #0
 80046e2:	2011      	movs	r0, #17
 80046e4:	f000 fe7e 	bl	80053e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80046e8:	2011      	movs	r0, #17
 80046ea:	f000 fe90 	bl	800540e <HAL_NVIC_EnableIRQ>
}
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b002      	add	sp, #8
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	40000400 	.word	0x40000400
 80046fc:	40021000 	.word	0x40021000
 8004700:	40001000 	.word	0x40001000

08004704 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800470c:	230c      	movs	r3, #12
 800470e:	18fb      	adds	r3, r7, r3
 8004710:	0018      	movs	r0, r3
 8004712:	2314      	movs	r3, #20
 8004714:	001a      	movs	r2, r3
 8004716:	2100      	movs	r1, #0
 8004718:	f002 fc7b 	bl	8007012 <memset>
  if(htim_encoder->Instance==TIM22)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d12f      	bne.n	8004786 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM22_MspInit 0 */

  /* USER CODE END TIM22_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM22_CLK_ENABLE();
 8004726:	4b1b      	ldr	r3, [pc, #108]	; (8004794 <HAL_TIM_Encoder_MspInit+0x90>)
 8004728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800472a:	4b1a      	ldr	r3, [pc, #104]	; (8004794 <HAL_TIM_Encoder_MspInit+0x90>)
 800472c:	2120      	movs	r1, #32
 800472e:	430a      	orrs	r2, r1
 8004730:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004732:	4b18      	ldr	r3, [pc, #96]	; (8004794 <HAL_TIM_Encoder_MspInit+0x90>)
 8004734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004736:	4b17      	ldr	r3, [pc, #92]	; (8004794 <HAL_TIM_Encoder_MspInit+0x90>)
 8004738:	2104      	movs	r1, #4
 800473a:	430a      	orrs	r2, r1
 800473c:	62da      	str	r2, [r3, #44]	; 0x2c
 800473e:	4b15      	ldr	r3, [pc, #84]	; (8004794 <HAL_TIM_Encoder_MspInit+0x90>)
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	2204      	movs	r2, #4
 8004744:	4013      	ands	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	68bb      	ldr	r3, [r7, #8]
    /**TIM22 GPIO Configuration    
    PC6     ------> TIM22_CH1
    PC7     ------> TIM22_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800474a:	210c      	movs	r1, #12
 800474c:	187b      	adds	r3, r7, r1
 800474e:	22c0      	movs	r2, #192	; 0xc0
 8004750:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004752:	187b      	adds	r3, r7, r1
 8004754:	2202      	movs	r2, #2
 8004756:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004758:	187b      	adds	r3, r7, r1
 800475a:	2200      	movs	r2, #0
 800475c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800475e:	187b      	adds	r3, r7, r1
 8004760:	2200      	movs	r2, #0
 8004762:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM22;
 8004764:	187b      	adds	r3, r7, r1
 8004766:	2200      	movs	r2, #0
 8004768:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800476a:	187b      	adds	r3, r7, r1
 800476c:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <HAL_TIM_Encoder_MspInit+0x94>)
 800476e:	0019      	movs	r1, r3
 8004770:	0010      	movs	r0, r2
 8004772:	f000 fe69 	bl	8005448 <HAL_GPIO_Init>

    /* TIM22 interrupt Init */
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8004776:	2200      	movs	r2, #0
 8004778:	2100      	movs	r1, #0
 800477a:	2016      	movs	r0, #22
 800477c:	f000 fe32 	bl	80053e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8004780:	2016      	movs	r0, #22
 8004782:	f000 fe44 	bl	800540e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	46bd      	mov	sp, r7
 800478a:	b008      	add	sp, #32
 800478c:	bd80      	pop	{r7, pc}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	40011400 	.word	0x40011400
 8004794:	40021000 	.word	0x40021000
 8004798:	50000800 	.word	0x50000800

0800479c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b08b      	sub	sp, #44	; 0x2c
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a4:	2314      	movs	r3, #20
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	0018      	movs	r0, r3
 80047aa:	2314      	movs	r3, #20
 80047ac:	001a      	movs	r2, r3
 80047ae:	2100      	movs	r1, #0
 80047b0:	f002 fc2f 	bl	8007012 <memset>
  if(htim->Instance==TIM2)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	05db      	lsls	r3, r3, #23
 80047bc:	429a      	cmp	r2, r3
 80047be:	d123      	bne.n	8004808 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047c0:	4b38      	ldr	r3, [pc, #224]	; (80048a4 <HAL_TIM_MspPostInit+0x108>)
 80047c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c4:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <HAL_TIM_MspPostInit+0x108>)
 80047c6:	2101      	movs	r1, #1
 80047c8:	430a      	orrs	r2, r1
 80047ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80047cc:	4b35      	ldr	r3, [pc, #212]	; (80048a4 <HAL_TIM_MspPostInit+0x108>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	2201      	movs	r2, #1
 80047d2:	4013      	ands	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Ultrasonic_Trig_Pin;
 80047d8:	2114      	movs	r1, #20
 80047da:	187b      	adds	r3, r7, r1
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e0:	187b      	adds	r3, r7, r1
 80047e2:	2202      	movs	r2, #2
 80047e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e6:	187b      	adds	r3, r7, r1
 80047e8:	2200      	movs	r2, #0
 80047ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ec:	187b      	adds	r3, r7, r1
 80047ee:	2200      	movs	r2, #0
 80047f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80047f2:	187b      	adds	r3, r7, r1
 80047f4:	2202      	movs	r2, #2
 80047f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Ultrasonic_Trig_GPIO_Port, &GPIO_InitStruct);
 80047f8:	187a      	adds	r2, r7, r1
 80047fa:	23a0      	movs	r3, #160	; 0xa0
 80047fc:	05db      	lsls	r3, r3, #23
 80047fe:	0011      	movs	r1, r2
 8004800:	0018      	movs	r0, r3
 8004802:	f000 fe21 	bl	8005448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004806:	e049      	b.n	800489c <HAL_TIM_MspPostInit+0x100>
  else if(htim->Instance==TIM3)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a26      	ldr	r2, [pc, #152]	; (80048a8 <HAL_TIM_MspPostInit+0x10c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d144      	bne.n	800489c <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004812:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <HAL_TIM_MspPostInit+0x108>)
 8004814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004816:	4b23      	ldr	r3, [pc, #140]	; (80048a4 <HAL_TIM_MspPostInit+0x108>)
 8004818:	2101      	movs	r1, #1
 800481a:	430a      	orrs	r2, r1
 800481c:	62da      	str	r2, [r3, #44]	; 0x2c
 800481e:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <HAL_TIM_MspPostInit+0x108>)
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	2201      	movs	r2, #1
 8004824:	4013      	ands	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800482a:	4b1e      	ldr	r3, [pc, #120]	; (80048a4 <HAL_TIM_MspPostInit+0x108>)
 800482c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482e:	4b1d      	ldr	r3, [pc, #116]	; (80048a4 <HAL_TIM_MspPostInit+0x108>)
 8004830:	2102      	movs	r1, #2
 8004832:	430a      	orrs	r2, r1
 8004834:	62da      	str	r2, [r3, #44]	; 0x2c
 8004836:	4b1b      	ldr	r3, [pc, #108]	; (80048a4 <HAL_TIM_MspPostInit+0x108>)
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	2202      	movs	r2, #2
 800483c:	4013      	ands	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LM_PWM_1_Pin|LM_PWM_2_Pin;
 8004842:	2414      	movs	r4, #20
 8004844:	193b      	adds	r3, r7, r4
 8004846:	22c0      	movs	r2, #192	; 0xc0
 8004848:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484a:	193b      	adds	r3, r7, r4
 800484c:	2202      	movs	r2, #2
 800484e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004850:	193b      	adds	r3, r7, r4
 8004852:	2200      	movs	r2, #0
 8004854:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004856:	193b      	adds	r3, r7, r4
 8004858:	2200      	movs	r2, #0
 800485a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800485c:	193b      	adds	r3, r7, r4
 800485e:	2202      	movs	r2, #2
 8004860:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004862:	193a      	adds	r2, r7, r4
 8004864:	23a0      	movs	r3, #160	; 0xa0
 8004866:	05db      	lsls	r3, r3, #23
 8004868:	0011      	movs	r1, r2
 800486a:	0018      	movs	r0, r3
 800486c:	f000 fdec 	bl	8005448 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RM_PWM_1_Pin|RM_PWM_2_Pin;
 8004870:	0021      	movs	r1, r4
 8004872:	187b      	adds	r3, r7, r1
 8004874:	2203      	movs	r2, #3
 8004876:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004878:	187b      	adds	r3, r7, r1
 800487a:	2202      	movs	r2, #2
 800487c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487e:	187b      	adds	r3, r7, r1
 8004880:	2200      	movs	r2, #0
 8004882:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004884:	187b      	adds	r3, r7, r1
 8004886:	2200      	movs	r2, #0
 8004888:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800488a:	187b      	adds	r3, r7, r1
 800488c:	2202      	movs	r2, #2
 800488e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004890:	187b      	adds	r3, r7, r1
 8004892:	4a06      	ldr	r2, [pc, #24]	; (80048ac <HAL_TIM_MspPostInit+0x110>)
 8004894:	0019      	movs	r1, r3
 8004896:	0010      	movs	r0, r2
 8004898:	f000 fdd6 	bl	8005448 <HAL_GPIO_Init>
}
 800489c:	46c0      	nop			; (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	b00b      	add	sp, #44	; 0x2c
 80048a2:	bd90      	pop	{r4, r7, pc}
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40000400 	.word	0x40000400
 80048ac:	50000400 	.word	0x50000400

080048b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80048b4:	46c0      	nop			; (mov r8, r8)
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048be:	e7fe      	b.n	80048be <HardFault_Handler+0x4>

080048c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80048c4:	46c0      	nop			; (mov r8, r8)
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048d8:	f000 f9e0 	bl	8004c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048dc:	46c0      	nop			; (mov r8, r8)
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80048e6:	2002      	movs	r0, #2
 80048e8:	f000 ff66 	bl	80057b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80048ec:	46c0      	nop			; (mov r8, r8)
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(L_MTR_ENC_Pin)){
 80048f8:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <EXTI4_15_IRQHandler+0xe0>)
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	2380      	movs	r3, #128	; 0x80
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	4013      	ands	r3, r2
 8004902:	d012      	beq.n	800492a <EXTI4_15_IRQHandler+0x36>
		extern Robot robot;
		robot.left.encoder+= robot.left.dir;
 8004904:	4b34      	ldr	r3, [pc, #208]	; (80049d8 <EXTI4_15_IRQHandler+0xe4>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4a33      	ldr	r2, [pc, #204]	; (80049d8 <EXTI4_15_IRQHandler+0xe4>)
 800490a:	7812      	ldrb	r2, [r2, #0]
 800490c:	b252      	sxtb	r2, r2
 800490e:	189a      	adds	r2, r3, r2
 8004910:	4b31      	ldr	r3, [pc, #196]	; (80049d8 <EXTI4_15_IRQHandler+0xe4>)
 8004912:	605a      	str	r2, [r3, #4]
//		Menu_Main();
		if(abs(robot.left.encoder) > 50) update_pos(&robot);
 8004914:	4b30      	ldr	r3, [pc, #192]	; (80049d8 <EXTI4_15_IRQHandler+0xe4>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	17da      	asrs	r2, r3, #31
 800491a:	189b      	adds	r3, r3, r2
 800491c:	4053      	eors	r3, r2
 800491e:	2b32      	cmp	r3, #50	; 0x32
 8004920:	dd03      	ble.n	800492a <EXTI4_15_IRQHandler+0x36>
 8004922:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <EXTI4_15_IRQHandler+0xe4>)
 8004924:	0018      	movs	r0, r3
 8004926:	f7ff f915 	bl	8003b54 <update_pos>
	}
	if(__HAL_GPIO_EXTI_GET_FLAG(R_MTR_ENC_Pin)){
 800492a:	4b2a      	ldr	r3, [pc, #168]	; (80049d4 <EXTI4_15_IRQHandler+0xe0>)
 800492c:	695a      	ldr	r2, [r3, #20]
 800492e:	2380      	movs	r3, #128	; 0x80
 8004930:	015b      	lsls	r3, r3, #5
 8004932:	4013      	ands	r3, r2
 8004934:	d012      	beq.n	800495c <EXTI4_15_IRQHandler+0x68>
		extern Robot robot;
		robot.right.encoder+= robot.right.dir;
 8004936:	4b28      	ldr	r3, [pc, #160]	; (80049d8 <EXTI4_15_IRQHandler+0xe4>)
 8004938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493a:	4a27      	ldr	r2, [pc, #156]	; (80049d8 <EXTI4_15_IRQHandler+0xe4>)
 800493c:	215c      	movs	r1, #92	; 0x5c
 800493e:	5652      	ldrsb	r2, [r2, r1]
 8004940:	189a      	adds	r2, r3, r2
 8004942:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <EXTI4_15_IRQHandler+0xe4>)
 8004944:	661a      	str	r2, [r3, #96]	; 0x60
		if(abs(robot.right.encoder) > 50) update_pos(&robot);
 8004946:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <EXTI4_15_IRQHandler+0xe4>)
 8004948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494a:	17da      	asrs	r2, r3, #31
 800494c:	189b      	adds	r3, r3, r2
 800494e:	4053      	eors	r3, r2
 8004950:	2b32      	cmp	r3, #50	; 0x32
 8004952:	dd03      	ble.n	800495c <EXTI4_15_IRQHandler+0x68>
 8004954:	4b20      	ldr	r3, [pc, #128]	; (80049d8 <EXTI4_15_IRQHandler+0xe4>)
 8004956:	0018      	movs	r0, r3
 8004958:	f7ff f8fc 	bl	8003b54 <update_pos>
	}

	if(__HAL_GPIO_EXTI_GET_FLAG(CLIFF_Pin)){
 800495c:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <EXTI4_15_IRQHandler+0xe0>)
 800495e:	695a      	ldr	r2, [r3, #20]
 8004960:	2380      	movs	r3, #128	; 0x80
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4013      	ands	r3, r2
 8004966:	d00f      	beq.n	8004988 <EXTI4_15_IRQHandler+0x94>
		extern Robot robot;
		robot.cliff = !HAL_GPIO_ReadPin(CLIFF_GPIO_Port, CLIFF_Pin);
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	009a      	lsls	r2, r3, #2
 800496c:	23a0      	movs	r3, #160	; 0xa0
 800496e:	05db      	lsls	r3, r3, #23
 8004970:	0011      	movs	r1, r2
 8004972:	0018      	movs	r0, r3
 8004974:	f000 fee6 	bl	8005744 <HAL_GPIO_ReadPin>
 8004978:	0003      	movs	r3, r0
 800497a:	425a      	negs	r2, r3
 800497c:	4153      	adcs	r3, r2
 800497e:	b2db      	uxtb	r3, r3
 8004980:	0019      	movs	r1, r3
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <EXTI4_15_IRQHandler+0xe4>)
 8004984:	22b8      	movs	r2, #184	; 0xb8
 8004986:	5499      	strb	r1, [r3, r2]
	}
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15)){
 8004988:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <EXTI4_15_IRQHandler+0xe0>)
 800498a:	695a      	ldr	r2, [r3, #20]
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	4013      	ands	r3, r2
 8004992:	d004      	beq.n	800499e <EXTI4_15_IRQHandler+0xaa>
				extern count;
				count++;
 8004994:	4b11      	ldr	r3, [pc, #68]	; (80049dc <EXTI4_15_IRQHandler+0xe8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	4b10      	ldr	r3, [pc, #64]	; (80049dc <EXTI4_15_IRQHandler+0xe8>)
 800499c:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800499e:	2040      	movs	r0, #64	; 0x40
 80049a0:	f000 ff0a 	bl	80057b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	0018      	movs	r0, r3
 80049aa:	f000 ff05 	bl	80057b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	0018      	movs	r0, r3
 80049b4:	f000 ff00 	bl	80057b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	015b      	lsls	r3, r3, #5
 80049bc:	0018      	movs	r0, r3
 80049be:	f000 fefb 	bl	80057b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80049c2:	2380      	movs	r3, #128	; 0x80
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	0018      	movs	r0, r3
 80049c8:	f000 fef6 	bl	80057b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80049cc:	46c0      	nop			; (mov r8, r8)
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	40010400 	.word	0x40010400
 80049d8:	200001f8 	.word	0x200001f8
 80049dc:	20000090 	.word	0x20000090

080049e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	TIM6_UltraSonic_Handler();
 80049e4:	f7ff fba2 	bl	800412c <TIM6_UltraSonic_Handler>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80049e8:	4b03      	ldr	r3, [pc, #12]	; (80049f8 <TIM6_DAC_IRQHandler+0x18>)
 80049ea:	0018      	movs	r0, r3
 80049ec:	f001 fdb8 	bl	8006560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80049f0:	46c0      	nop			; (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	200002d8 	.word	0x200002d8

080049fc <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8004a00:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <TIM22_IRQHandler+0x14>)
 8004a02:	0018      	movs	r0, r3
 8004a04:	f001 fdac 	bl	8006560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8004a08:	46c0      	nop			; (mov r8, r8)
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	200001ac 	.word	0x200001ac

08004a14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e00a      	b.n	8004a3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004a26:	e000      	b.n	8004a2a <_read+0x16>
 8004a28:	bf00      	nop
 8004a2a:	0001      	movs	r1, r0
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	60ba      	str	r2, [r7, #8]
 8004a32:	b2ca      	uxtb	r2, r1
 8004a34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	dbf0      	blt.n	8004a26 <_read+0x12>
	}

return len;
 8004a44:	687b      	ldr	r3, [r7, #4]
}
 8004a46:	0018      	movs	r0, r3
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b006      	add	sp, #24
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b086      	sub	sp, #24
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	e009      	b.n	8004a74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	60ba      	str	r2, [r7, #8]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	0018      	movs	r0, r3
 8004a6a:	e000      	b.n	8004a6e <_write+0x20>
 8004a6c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	3301      	adds	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	dbf1      	blt.n	8004a60 <_write+0x12>
	}
	return len;
 8004a7c:	687b      	ldr	r3, [r7, #4]
}
 8004a7e:	0018      	movs	r0, r3
 8004a80:	46bd      	mov	sp, r7
 8004a82:	b006      	add	sp, #24
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <_close>:

int _close(int file)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
	return -1;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	425b      	negs	r3, r3
}
 8004a92:	0018      	movs	r0, r3
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b002      	add	sp, #8
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	2280      	movs	r2, #128	; 0x80
 8004aa8:	0192      	lsls	r2, r2, #6
 8004aaa:	605a      	str	r2, [r3, #4]
	return 0;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	0018      	movs	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	b002      	add	sp, #8
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <_isatty>:

int _isatty(int file)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
	return 1;
 8004abe:	2301      	movs	r3, #1
}
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b002      	add	sp, #8
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
	return 0;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	b004      	add	sp, #16
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004ae8:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <_sbrk+0x50>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d102      	bne.n	8004af6 <_sbrk+0x16>
		heap_end = &end;
 8004af0:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <_sbrk+0x50>)
 8004af2:	4a10      	ldr	r2, [pc, #64]	; (8004b34 <_sbrk+0x54>)
 8004af4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004af6:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <_sbrk+0x50>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004afc:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <_sbrk+0x50>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	18d3      	adds	r3, r2, r3
 8004b04:	466a      	mov	r2, sp
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d907      	bls.n	8004b1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004b0a:	f002 fa4f 	bl	8006fac <__errno>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	220c      	movs	r2, #12
 8004b12:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004b14:	2301      	movs	r3, #1
 8004b16:	425b      	negs	r3, r3
 8004b18:	e006      	b.n	8004b28 <_sbrk+0x48>
	}

	heap_end += incr;
 8004b1a:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <_sbrk+0x50>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	18d2      	adds	r2, r2, r3
 8004b22:	4b03      	ldr	r3, [pc, #12]	; (8004b30 <_sbrk+0x50>)
 8004b24:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8004b26:	68fb      	ldr	r3, [r7, #12]
}
 8004b28:	0018      	movs	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	b004      	add	sp, #16
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	200000ac 	.word	0x200000ac
 8004b34:	200003c0 	.word	0x200003c0

08004b38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004b3c:	4b17      	ldr	r3, [pc, #92]	; (8004b9c <SystemInit+0x64>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4b16      	ldr	r3, [pc, #88]	; (8004b9c <SystemInit+0x64>)
 8004b42:	2180      	movs	r1, #128	; 0x80
 8004b44:	0049      	lsls	r1, r1, #1
 8004b46:	430a      	orrs	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004b4a:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <SystemInit+0x64>)
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <SystemInit+0x64>)
 8004b50:	4913      	ldr	r1, [pc, #76]	; (8004ba0 <SystemInit+0x68>)
 8004b52:	400a      	ands	r2, r1
 8004b54:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004b56:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <SystemInit+0x64>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <SystemInit+0x64>)
 8004b5c:	4911      	ldr	r1, [pc, #68]	; (8004ba4 <SystemInit+0x6c>)
 8004b5e:	400a      	ands	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004b62:	4b0e      	ldr	r3, [pc, #56]	; (8004b9c <SystemInit+0x64>)
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	4b0d      	ldr	r3, [pc, #52]	; (8004b9c <SystemInit+0x64>)
 8004b68:	2101      	movs	r1, #1
 8004b6a:	438a      	bics	r2, r1
 8004b6c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004b6e:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <SystemInit+0x64>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <SystemInit+0x64>)
 8004b74:	490c      	ldr	r1, [pc, #48]	; (8004ba8 <SystemInit+0x70>)
 8004b76:	400a      	ands	r2, r1
 8004b78:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004b7a:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <SystemInit+0x64>)
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <SystemInit+0x64>)
 8004b80:	490a      	ldr	r1, [pc, #40]	; (8004bac <SystemInit+0x74>)
 8004b82:	400a      	ands	r2, r1
 8004b84:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <SystemInit+0x64>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b8c:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <SystemInit+0x78>)
 8004b8e:	2280      	movs	r2, #128	; 0x80
 8004b90:	0512      	lsls	r2, r2, #20
 8004b92:	609a      	str	r2, [r3, #8]
#endif
}
 8004b94:	46c0      	nop			; (mov r8, r8)
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	88ff400c 	.word	0x88ff400c
 8004ba4:	fef6fff6 	.word	0xfef6fff6
 8004ba8:	fffbffff 	.word	0xfffbffff
 8004bac:	ff02ffff 	.word	0xff02ffff
 8004bb0:	e000ed00 	.word	0xe000ed00

08004bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004bb4:	480d      	ldr	r0, [pc, #52]	; (8004bec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004bb6:	4685      	mov	sp, r0


/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004bb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004bba:	e003      	b.n	8004bc4 <LoopCopyDataInit>

08004bbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8004bbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004bc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004bc2:	3104      	adds	r1, #4

08004bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004bc4:	480b      	ldr	r0, [pc, #44]	; (8004bf4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8004bc6:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8004bc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004bca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004bcc:	d3f6      	bcc.n	8004bbc <CopyDataInit>
  ldr  r2, =_sbss
 8004bce:	4a0b      	ldr	r2, [pc, #44]	; (8004bfc <LoopForever+0x12>)
  b  LoopFillZerobss
 8004bd0:	e002      	b.n	8004bd8 <LoopFillZerobss>

08004bd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004bd2:	2300      	movs	r3, #0
  str  r3, [r2]
 8004bd4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bd6:	3204      	adds	r2, #4

08004bd8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004bd8:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <LoopForever+0x16>)
  cmp  r2, r3
 8004bda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004bdc:	d3f9      	bcc.n	8004bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004bde:	f7ff ffab 	bl	8004b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004be2:	f002 f9e9 	bl	8006fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004be6:	f7fe f8b9 	bl	8002d5c <main>

08004bea <LoopForever>:

LoopForever:
    b LoopForever
 8004bea:	e7fe      	b.n	8004bea <LoopForever>
   ldr   r0, =_estack
 8004bec:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8004bf0:	080091a8 	.word	0x080091a8
  ldr  r0, =_sdata
 8004bf4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004bf8:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8004bfc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8004c00:	200003c0 	.word	0x200003c0

08004c04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c04:	e7fe      	b.n	8004c04 <ADC1_COMP_IRQHandler>
	...

08004c08 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c0e:	1dfb      	adds	r3, r7, #7
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004c14:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <HAL_Init+0x3c>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <HAL_Init+0x3c>)
 8004c1a:	2140      	movs	r1, #64	; 0x40
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c20:	2000      	movs	r0, #0
 8004c22:	f000 f811 	bl	8004c48 <HAL_InitTick>
 8004c26:	1e03      	subs	r3, r0, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004c2a:	1dfb      	adds	r3, r7, #7
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	e001      	b.n	8004c36 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004c32:	f7ff fcd1 	bl	80045d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004c36:	1dfb      	adds	r3, r7, #7
 8004c38:	781b      	ldrb	r3, [r3, #0]
}
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b002      	add	sp, #8
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	40022000 	.word	0x40022000

08004c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004c50:	230f      	movs	r3, #15
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8004c58:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <HAL_InitTick+0x50>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	23fa      	movs	r3, #250	; 0xfa
 8004c5e:	0099      	lsls	r1, r3, #2
 8004c60:	0010      	movs	r0, r2
 8004c62:	f7fb fa5b 	bl	800011c <__udivsi3>
 8004c66:	0003      	movs	r3, r0
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f000 fbe0 	bl	800542e <HAL_SYSTICK_Config>
 8004c6e:	1e03      	subs	r3, r0, #0
 8004c70:	d004      	beq.n	8004c7c <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8004c72:	230f      	movs	r3, #15
 8004c74:	18fb      	adds	r3, r7, r3
 8004c76:	2201      	movs	r2, #1
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	e006      	b.n	8004c8a <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	2301      	movs	r3, #1
 8004c80:	425b      	negs	r3, r3
 8004c82:	2200      	movs	r2, #0
 8004c84:	0018      	movs	r0, r3
 8004c86:	f000 fbad 	bl	80053e4 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8004c8a:	230f      	movs	r3, #15
 8004c8c:	18fb      	adds	r3, r7, r3
 8004c8e:	781b      	ldrb	r3, [r3, #0]
}
 8004c90:	0018      	movs	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	b004      	add	sp, #16
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20000000 	.word	0x20000000

08004c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  uwTick++;
 8004ca0:	4b03      	ldr	r3, [pc, #12]	; (8004cb0 <HAL_IncTick+0x14>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	4b02      	ldr	r3, [pc, #8]	; (8004cb0 <HAL_IncTick+0x14>)
 8004ca8:	601a      	str	r2, [r3, #0]
}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	200003b8 	.word	0x200003b8

08004cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8004cb8:	4b02      	ldr	r3, [pc, #8]	; (8004cc4 <HAL_GetTick+0x10>)
 8004cba:	681b      	ldr	r3, [r3, #0]
}
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	200003b8 	.word	0x200003b8

08004cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cd0:	f7ff fff0 	bl	8004cb4 <HAL_GetTick>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	d002      	beq.n	8004ce8 <HAL_Delay+0x20>
  {
    wait++;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ce8:	46c0      	nop			; (mov r8, r8)
 8004cea:	f7ff ffe3 	bl	8004cb4 <HAL_GetTick>
 8004cee:	0002      	movs	r2, r0
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d8f7      	bhi.n	8004cea <HAL_Delay+0x22>
  {
  }
}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b004      	add	sp, #16
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e159      	b.n	8004fca <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10a      	bne.n	8004d34 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2250      	movs	r2, #80	; 0x50
 8004d28:	2100      	movs	r1, #0
 8004d2a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f7ff fc66 	bl	8004600 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d38:	2210      	movs	r2, #16
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b10      	cmp	r3, #16
 8004d3e:	d005      	beq.n	8004d4c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2204      	movs	r2, #4
 8004d48:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004d4a:	d00b      	beq.n	8004d64 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d50:	2210      	movs	r2, #16
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2250      	movs	r2, #80	; 0x50
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e132      	b.n	8004fca <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d68:	4a9a      	ldr	r2, [pc, #616]	; (8004fd4 <HAL_ADC_Init+0x2d0>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d108      	bne.n	8004d94 <HAL_ADC_Init+0x90>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_ADC_Init+0x90>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <HAL_ADC_Init+0x92>
 8004d94:	2300      	movs	r3, #0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d149      	bne.n	8004e2e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	23c0      	movs	r3, #192	; 0xc0
 8004da0:	061b      	lsls	r3, r3, #24
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d00b      	beq.n	8004dbe <HAL_ADC_Init+0xba>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	05db      	lsls	r3, r3, #23
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d005      	beq.n	8004dbe <HAL_ADC_Init+0xba>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	2380      	movs	r3, #128	; 0x80
 8004db8:	061b      	lsls	r3, r3, #24
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d111      	bne.n	8004de2 <HAL_ADC_Init+0xde>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	0092      	lsls	r2, r2, #2
 8004dca:	0892      	lsrs	r2, r2, #2
 8004dcc:	611a      	str	r2, [r3, #16]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6919      	ldr	r1, [r3, #16]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	611a      	str	r2, [r3, #16]
 8004de0:	e014      	b.n	8004e0c <HAL_ADC_Init+0x108>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	0092      	lsls	r2, r2, #2
 8004dee:	0892      	lsrs	r2, r2, #2
 8004df0:	611a      	str	r2, [r3, #16]
 8004df2:	4b79      	ldr	r3, [pc, #484]	; (8004fd8 <HAL_ADC_Init+0x2d4>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4b78      	ldr	r3, [pc, #480]	; (8004fd8 <HAL_ADC_Init+0x2d4>)
 8004df8:	4978      	ldr	r1, [pc, #480]	; (8004fdc <HAL_ADC_Init+0x2d8>)
 8004dfa:	400a      	ands	r2, r1
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	4b76      	ldr	r3, [pc, #472]	; (8004fd8 <HAL_ADC_Init+0x2d4>)
 8004e00:	6819      	ldr	r1, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	4b74      	ldr	r3, [pc, #464]	; (8004fd8 <HAL_ADC_Init+0x2d4>)
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2118      	movs	r1, #24
 8004e18:	438a      	bics	r2, r1
 8004e1a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68d9      	ldr	r1, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004e2e:	4b6a      	ldr	r3, [pc, #424]	; (8004fd8 <HAL_ADC_Init+0x2d4>)
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4b69      	ldr	r3, [pc, #420]	; (8004fd8 <HAL_ADC_Init+0x2d4>)
 8004e34:	496a      	ldr	r1, [pc, #424]	; (8004fe0 <HAL_ADC_Init+0x2dc>)
 8004e36:	400a      	ands	r2, r1
 8004e38:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8004e3a:	4b67      	ldr	r3, [pc, #412]	; (8004fd8 <HAL_ADC_Init+0x2d4>)
 8004e3c:	6819      	ldr	r1, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e42:	065a      	lsls	r2, r3, #25
 8004e44:	4b64      	ldr	r3, [pc, #400]	; (8004fd8 <HAL_ADC_Init+0x2d4>)
 8004e46:	430a      	orrs	r2, r1
 8004e48:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	055b      	lsls	r3, r3, #21
 8004e54:	4013      	ands	r3, r2
 8004e56:	d108      	bne.n	8004e6a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2180      	movs	r1, #128	; 0x80
 8004e64:	0549      	lsls	r1, r1, #21
 8004e66:	430a      	orrs	r2, r1
 8004e68:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	495b      	ldr	r1, [pc, #364]	; (8004fe4 <HAL_ADC_Init+0x2e0>)
 8004e76:	400a      	ands	r2, r1
 8004e78:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68d9      	ldr	r1, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d101      	bne.n	8004e90 <HAL_ADC_Init+0x18c>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	e000      	b.n	8004e92 <HAL_ADC_Init+0x18e>
 8004e90:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004e92:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2020      	movs	r0, #32
 8004e98:	5c1b      	ldrb	r3, [r3, r0]
 8004e9a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004e9c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	202c      	movs	r0, #44	; 0x2c
 8004ea2:	5c1b      	ldrb	r3, [r3, r0]
 8004ea4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004ea6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004eac:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004eb4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004ebc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eca:	23c2      	movs	r3, #194	; 0xc2
 8004ecc:	33ff      	adds	r3, #255	; 0xff
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d00b      	beq.n	8004eea <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68d9      	ldr	r1, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2221      	movs	r2, #33	; 0x21
 8004eee:	5c9b      	ldrb	r3, [r3, r2]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d11a      	bne.n	8004f2a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	5c9b      	ldrb	r3, [r3, r2]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2180      	movs	r1, #128	; 0x80
 8004f0a:	0249      	lsls	r1, r1, #9
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	60da      	str	r2, [r3, #12]
 8004f10:	e00b      	b.n	8004f2a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	2220      	movs	r2, #32
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f22:	2201      	movs	r2, #1
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d11f      	bne.n	8004f72 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	492a      	ldr	r1, [pc, #168]	; (8004fe8 <HAL_ADC_Init+0x2e4>)
 8004f3e:	400a      	ands	r2, r1
 8004f40:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6919      	ldr	r1, [r3, #16]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004f50:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8004f56:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	611a      	str	r2, [r3, #16]
 8004f70:	e00e      	b.n	8004f90 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d107      	bne.n	8004f90 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	438a      	bics	r2, r1
 8004f8e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695a      	ldr	r2, [r3, #20]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2107      	movs	r1, #7
 8004f9c:	438a      	bics	r2, r1
 8004f9e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6959      	ldr	r1, [r3, #20]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	4393      	bics	r3, r2
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	0018      	movs	r0, r3
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	b002      	add	sp, #8
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	46c0      	nop			; (mov r8, r8)
 8004fd4:	fffffefd 	.word	0xfffffefd
 8004fd8:	40012708 	.word	0x40012708
 8004fdc:	ffc3ffff 	.word	0xffc3ffff
 8004fe0:	fdffffff 	.word	0xfdffffff
 8004fe4:	fffe0219 	.word	0xfffe0219
 8004fe8:	fffffc03 	.word	0xfffffc03

08004fec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2250      	movs	r2, #80	; 0x50
 8004ffa:	5c9b      	ldrb	r3, [r3, r2]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x18>
 8005000:	2302      	movs	r3, #2
 8005002:	e085      	b.n	8005110 <HAL_ADC_ConfigChannel+0x124>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2250      	movs	r2, #80	; 0x50
 8005008:	2101      	movs	r1, #1
 800500a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2204      	movs	r2, #4
 8005014:	4013      	ands	r3, r2
 8005016:	d00b      	beq.n	8005030 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501c:	2220      	movs	r2, #32
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2250      	movs	r2, #80	; 0x50
 8005028:	2100      	movs	r1, #0
 800502a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e06f      	b.n	8005110 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	4a38      	ldr	r2, [pc, #224]	; (8005118 <HAL_ADC_ConfigChannel+0x12c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d035      	beq.n	80050a6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	035b      	lsls	r3, r3, #13
 8005046:	0b5a      	lsrs	r2, r3, #13
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	02db      	lsls	r3, r3, #11
 8005058:	4013      	ands	r3, r2
 800505a:	d009      	beq.n	8005070 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 800505c:	4b2f      	ldr	r3, [pc, #188]	; (800511c <HAL_ADC_ConfigChannel+0x130>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	4b2e      	ldr	r3, [pc, #184]	; (800511c <HAL_ADC_ConfigChannel+0x130>)
 8005062:	2180      	movs	r1, #128	; 0x80
 8005064:	0409      	lsls	r1, r1, #16
 8005066:	430a      	orrs	r2, r1
 8005068:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800506a:	200a      	movs	r0, #10
 800506c:	f000 f85e 	bl	800512c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	2380      	movs	r3, #128	; 0x80
 8005076:	029b      	lsls	r3, r3, #10
 8005078:	4013      	ands	r3, r2
 800507a:	d006      	beq.n	800508a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 800507c:	4b27      	ldr	r3, [pc, #156]	; (800511c <HAL_ADC_ConfigChannel+0x130>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	4b26      	ldr	r3, [pc, #152]	; (800511c <HAL_ADC_ConfigChannel+0x130>)
 8005082:	2180      	movs	r1, #128	; 0x80
 8005084:	03c9      	lsls	r1, r1, #15
 8005086:	430a      	orrs	r2, r1
 8005088:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	2380      	movs	r3, #128	; 0x80
 8005090:	025b      	lsls	r3, r3, #9
 8005092:	4013      	ands	r3, r2
 8005094:	d037      	beq.n	8005106 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8005096:	4b21      	ldr	r3, [pc, #132]	; (800511c <HAL_ADC_ConfigChannel+0x130>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4b20      	ldr	r3, [pc, #128]	; (800511c <HAL_ADC_ConfigChannel+0x130>)
 800509c:	2180      	movs	r1, #128	; 0x80
 800509e:	0449      	lsls	r1, r1, #17
 80050a0:	430a      	orrs	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	e02f      	b.n	8005106 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	035b      	lsls	r3, r3, #13
 80050b2:	0b5b      	lsrs	r3, r3, #13
 80050b4:	43d9      	mvns	r1, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	400a      	ands	r2, r1
 80050bc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	2380      	movs	r3, #128	; 0x80
 80050c4:	02db      	lsls	r3, r3, #11
 80050c6:	4013      	ands	r3, r2
 80050c8:	d005      	beq.n	80050d6 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80050ca:	4b14      	ldr	r3, [pc, #80]	; (800511c <HAL_ADC_ConfigChannel+0x130>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4b13      	ldr	r3, [pc, #76]	; (800511c <HAL_ADC_ConfigChannel+0x130>)
 80050d0:	4913      	ldr	r1, [pc, #76]	; (8005120 <HAL_ADC_ConfigChannel+0x134>)
 80050d2:	400a      	ands	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	2380      	movs	r3, #128	; 0x80
 80050dc:	029b      	lsls	r3, r3, #10
 80050de:	4013      	ands	r3, r2
 80050e0:	d005      	beq.n	80050ee <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80050e2:	4b0e      	ldr	r3, [pc, #56]	; (800511c <HAL_ADC_ConfigChannel+0x130>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4b0d      	ldr	r3, [pc, #52]	; (800511c <HAL_ADC_ConfigChannel+0x130>)
 80050e8:	490e      	ldr	r1, [pc, #56]	; (8005124 <HAL_ADC_ConfigChannel+0x138>)
 80050ea:	400a      	ands	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	2380      	movs	r3, #128	; 0x80
 80050f4:	025b      	lsls	r3, r3, #9
 80050f6:	4013      	ands	r3, r2
 80050f8:	d005      	beq.n	8005106 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80050fa:	4b08      	ldr	r3, [pc, #32]	; (800511c <HAL_ADC_ConfigChannel+0x130>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4b07      	ldr	r3, [pc, #28]	; (800511c <HAL_ADC_ConfigChannel+0x130>)
 8005100:	4909      	ldr	r1, [pc, #36]	; (8005128 <HAL_ADC_ConfigChannel+0x13c>)
 8005102:	400a      	ands	r2, r1
 8005104:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2250      	movs	r2, #80	; 0x50
 800510a:	2100      	movs	r1, #0
 800510c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	0018      	movs	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	b002      	add	sp, #8
 8005116:	bd80      	pop	{r7, pc}
 8005118:	00001001 	.word	0x00001001
 800511c:	40012708 	.word	0x40012708
 8005120:	ff7fffff 	.word	0xff7fffff
 8005124:	ffbfffff 	.word	0xffbfffff
 8005128:	feffffff 	.word	0xfeffffff

0800512c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <ADC_DelayMicroSecond+0x34>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	490a      	ldr	r1, [pc, #40]	; (8005164 <ADC_DelayMicroSecond+0x38>)
 800513a:	0018      	movs	r0, r3
 800513c:	f7fa ffee 	bl	800011c <__udivsi3>
 8005140:	0003      	movs	r3, r0
 8005142:	001a      	movs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4353      	muls	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800514a:	e002      	b.n	8005152 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3b01      	subs	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f9      	bne.n	800514c <ADC_DelayMicroSecond+0x20>
  } 
}
 8005158:	46c0      	nop			; (mov r8, r8)
 800515a:	46bd      	mov	sp, r7
 800515c:	b004      	add	sp, #16
 800515e:	bd80      	pop	{r7, pc}
 8005160:	20000000 	.word	0x20000000
 8005164:	000f4240 	.word	0x000f4240

08005168 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005172:	2317      	movs	r3, #23
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	2200      	movs	r2, #0
 8005178:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2250      	movs	r2, #80	; 0x50
 8005186:	5c9b      	ldrb	r3, [r3, r2]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_ADCEx_Calibration_Start+0x28>
 800518c:	2302      	movs	r3, #2
 800518e:	e07a      	b.n	8005286 <HAL_ADCEx_Calibration_Start+0x11e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2250      	movs	r2, #80	; 0x50
 8005194:	2101      	movs	r1, #1
 8005196:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2203      	movs	r2, #3
 80051a0:	4013      	ands	r3, r2
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d108      	bne.n	80051b8 <HAL_ADCEx_Calibration_Start+0x50>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2201      	movs	r2, #1
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_ADCEx_Calibration_Start+0x50>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <HAL_ADCEx_Calibration_Start+0x52>
 80051b8:	2300      	movs	r3, #0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d152      	bne.n	8005264 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c2:	4a33      	ldr	r2, [pc, #204]	; (8005290 <HAL_ADCEx_Calibration_Start+0x128>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	2202      	movs	r2, #2
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	2203      	movs	r2, #3
 80051d6:	4013      	ands	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2103      	movs	r1, #3
 80051e6:	438a      	bics	r2, r1
 80051e8:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2180      	movs	r1, #128	; 0x80
 80051f6:	0609      	lsls	r1, r1, #24
 80051f8:	430a      	orrs	r2, r1
 80051fa:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80051fc:	f7ff fd5a 	bl	8004cb4 <HAL_GetTick>
 8005200:	0003      	movs	r3, r0
 8005202:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005204:	e014      	b.n	8005230 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005206:	f7ff fd55 	bl	8004cb4 <HAL_GetTick>
 800520a:	0002      	movs	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b0a      	cmp	r3, #10
 8005212:	d90d      	bls.n	8005230 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005218:	2212      	movs	r2, #18
 800521a:	4393      	bics	r3, r2
 800521c:	2210      	movs	r2, #16
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2250      	movs	r2, #80	; 0x50
 8005228:	2100      	movs	r1, #0
 800522a:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e02a      	b.n	8005286 <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	0fdb      	lsrs	r3, r3, #31
 8005238:	07da      	lsls	r2, r3, #31
 800523a:	2380      	movs	r3, #128	; 0x80
 800523c:	061b      	lsls	r3, r3, #24
 800523e:	429a      	cmp	r2, r3
 8005240:	d0e1      	beq.n	8005206 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68d9      	ldr	r1, [r3, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	430a      	orrs	r2, r1
 8005250:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005256:	2203      	movs	r2, #3
 8005258:	4393      	bics	r3, r2
 800525a:	2201      	movs	r2, #1
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	655a      	str	r2, [r3, #84]	; 0x54
 8005262:	e009      	b.n	8005278 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005268:	2220      	movs	r2, #32
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8005270:	2317      	movs	r3, #23
 8005272:	18fb      	adds	r3, r7, r3
 8005274:	2201      	movs	r2, #1
 8005276:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2250      	movs	r2, #80	; 0x50
 800527c:	2100      	movs	r1, #0
 800527e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005280:	2317      	movs	r3, #23
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	781b      	ldrb	r3, [r3, #0]
}
 8005286:	0018      	movs	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	b006      	add	sp, #24
 800528c:	bd80      	pop	{r7, pc}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	fffffefd 	.word	0xfffffefd

08005294 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	0002      	movs	r2, r0
 800529c:	1dfb      	adds	r3, r7, #7
 800529e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80052a0:	1dfb      	adds	r3, r7, #7
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	001a      	movs	r2, r3
 80052a6:	231f      	movs	r3, #31
 80052a8:	401a      	ands	r2, r3
 80052aa:	4b04      	ldr	r3, [pc, #16]	; (80052bc <NVIC_EnableIRQ+0x28>)
 80052ac:	2101      	movs	r1, #1
 80052ae:	4091      	lsls	r1, r2
 80052b0:	000a      	movs	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]
}
 80052b4:	46c0      	nop			; (mov r8, r8)
 80052b6:	46bd      	mov	sp, r7
 80052b8:	b002      	add	sp, #8
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	e000e100 	.word	0xe000e100

080052c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052c0:	b590      	push	{r4, r7, lr}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	0002      	movs	r2, r0
 80052c8:	6039      	str	r1, [r7, #0]
 80052ca:	1dfb      	adds	r3, r7, #7
 80052cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80052ce:	1dfb      	adds	r3, r7, #7
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b7f      	cmp	r3, #127	; 0x7f
 80052d4:	d932      	bls.n	800533c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80052d6:	4a2f      	ldr	r2, [pc, #188]	; (8005394 <NVIC_SetPriority+0xd4>)
 80052d8:	1dfb      	adds	r3, r7, #7
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	0019      	movs	r1, r3
 80052de:	230f      	movs	r3, #15
 80052e0:	400b      	ands	r3, r1
 80052e2:	3b08      	subs	r3, #8
 80052e4:	089b      	lsrs	r3, r3, #2
 80052e6:	3306      	adds	r3, #6
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	18d3      	adds	r3, r2, r3
 80052ec:	3304      	adds	r3, #4
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	1dfa      	adds	r2, r7, #7
 80052f2:	7812      	ldrb	r2, [r2, #0]
 80052f4:	0011      	movs	r1, r2
 80052f6:	2203      	movs	r2, #3
 80052f8:	400a      	ands	r2, r1
 80052fa:	00d2      	lsls	r2, r2, #3
 80052fc:	21ff      	movs	r1, #255	; 0xff
 80052fe:	4091      	lsls	r1, r2
 8005300:	000a      	movs	r2, r1
 8005302:	43d2      	mvns	r2, r2
 8005304:	401a      	ands	r2, r3
 8005306:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	019b      	lsls	r3, r3, #6
 800530c:	22ff      	movs	r2, #255	; 0xff
 800530e:	401a      	ands	r2, r3
 8005310:	1dfb      	adds	r3, r7, #7
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	0018      	movs	r0, r3
 8005316:	2303      	movs	r3, #3
 8005318:	4003      	ands	r3, r0
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800531e:	481d      	ldr	r0, [pc, #116]	; (8005394 <NVIC_SetPriority+0xd4>)
 8005320:	1dfb      	adds	r3, r7, #7
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	001c      	movs	r4, r3
 8005326:	230f      	movs	r3, #15
 8005328:	4023      	ands	r3, r4
 800532a:	3b08      	subs	r3, #8
 800532c:	089b      	lsrs	r3, r3, #2
 800532e:	430a      	orrs	r2, r1
 8005330:	3306      	adds	r3, #6
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	18c3      	adds	r3, r0, r3
 8005336:	3304      	adds	r3, #4
 8005338:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800533a:	e027      	b.n	800538c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800533c:	4a16      	ldr	r2, [pc, #88]	; (8005398 <NVIC_SetPriority+0xd8>)
 800533e:	1dfb      	adds	r3, r7, #7
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	b25b      	sxtb	r3, r3
 8005344:	089b      	lsrs	r3, r3, #2
 8005346:	33c0      	adds	r3, #192	; 0xc0
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	589b      	ldr	r3, [r3, r2]
 800534c:	1dfa      	adds	r2, r7, #7
 800534e:	7812      	ldrb	r2, [r2, #0]
 8005350:	0011      	movs	r1, r2
 8005352:	2203      	movs	r2, #3
 8005354:	400a      	ands	r2, r1
 8005356:	00d2      	lsls	r2, r2, #3
 8005358:	21ff      	movs	r1, #255	; 0xff
 800535a:	4091      	lsls	r1, r2
 800535c:	000a      	movs	r2, r1
 800535e:	43d2      	mvns	r2, r2
 8005360:	401a      	ands	r2, r3
 8005362:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	019b      	lsls	r3, r3, #6
 8005368:	22ff      	movs	r2, #255	; 0xff
 800536a:	401a      	ands	r2, r3
 800536c:	1dfb      	adds	r3, r7, #7
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	0018      	movs	r0, r3
 8005372:	2303      	movs	r3, #3
 8005374:	4003      	ands	r3, r0
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800537a:	4807      	ldr	r0, [pc, #28]	; (8005398 <NVIC_SetPriority+0xd8>)
 800537c:	1dfb      	adds	r3, r7, #7
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	b25b      	sxtb	r3, r3
 8005382:	089b      	lsrs	r3, r3, #2
 8005384:	430a      	orrs	r2, r1
 8005386:	33c0      	adds	r3, #192	; 0xc0
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	501a      	str	r2, [r3, r0]
}
 800538c:	46c0      	nop			; (mov r8, r8)
 800538e:	46bd      	mov	sp, r7
 8005390:	b003      	add	sp, #12
 8005392:	bd90      	pop	{r4, r7, pc}
 8005394:	e000ed00 	.word	0xe000ed00
 8005398:	e000e100 	.word	0xe000e100

0800539c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	4a0c      	ldr	r2, [pc, #48]	; (80053dc <SysTick_Config+0x40>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053ae:	2301      	movs	r3, #1
 80053b0:	e010      	b.n	80053d4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053b2:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <SysTick_Config+0x44>)
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	3a01      	subs	r2, #1
 80053b8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053ba:	2301      	movs	r3, #1
 80053bc:	425b      	negs	r3, r3
 80053be:	2103      	movs	r1, #3
 80053c0:	0018      	movs	r0, r3
 80053c2:	f7ff ff7d 	bl	80052c0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <SysTick_Config+0x44>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053cc:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <SysTick_Config+0x44>)
 80053ce:	2207      	movs	r2, #7
 80053d0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	0018      	movs	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	b002      	add	sp, #8
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	00ffffff 	.word	0x00ffffff
 80053e0:	e000e010 	.word	0xe000e010

080053e4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	607a      	str	r2, [r7, #4]
 80053ee:	210f      	movs	r1, #15
 80053f0:	187b      	adds	r3, r7, r1
 80053f2:	1c02      	adds	r2, r0, #0
 80053f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	187b      	adds	r3, r7, r1
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	b25b      	sxtb	r3, r3
 80053fe:	0011      	movs	r1, r2
 8005400:	0018      	movs	r0, r3
 8005402:	f7ff ff5d 	bl	80052c0 <NVIC_SetPriority>
}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	46bd      	mov	sp, r7
 800540a:	b004      	add	sp, #16
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	0002      	movs	r2, r0
 8005416:	1dfb      	adds	r3, r7, #7
 8005418:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800541a:	1dfb      	adds	r3, r7, #7
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	b25b      	sxtb	r3, r3
 8005420:	0018      	movs	r0, r3
 8005422:	f7ff ff37 	bl	8005294 <NVIC_EnableIRQ>
}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	46bd      	mov	sp, r7
 800542a:	b002      	add	sp, #8
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	0018      	movs	r0, r3
 800543a:	f7ff ffaf 	bl	800539c <SysTick_Config>
 800543e:	0003      	movs	r3, r0
}
 8005440:	0018      	movs	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	b002      	add	sp, #8
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800545a:	2300      	movs	r3, #0
 800545c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800545e:	e155      	b.n	800570c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2101      	movs	r1, #1
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4091      	lsls	r1, r2
 800546a:	000a      	movs	r2, r1
 800546c:	4013      	ands	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d100      	bne.n	8005478 <HAL_GPIO_Init+0x30>
 8005476:	e146      	b.n	8005706 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d003      	beq.n	8005488 <HAL_GPIO_Init+0x40>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2b12      	cmp	r3, #18
 8005486:	d123      	bne.n	80054d0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	08da      	lsrs	r2, r3, #3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3208      	adds	r2, #8
 8005490:	0092      	lsls	r2, r2, #2
 8005492:	58d3      	ldr	r3, [r2, r3]
 8005494:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2207      	movs	r2, #7
 800549a:	4013      	ands	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	220f      	movs	r2, #15
 80054a0:	409a      	lsls	r2, r3
 80054a2:	0013      	movs	r3, r2
 80054a4:	43da      	mvns	r2, r3
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	4013      	ands	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2107      	movs	r1, #7
 80054b4:	400b      	ands	r3, r1
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	409a      	lsls	r2, r3
 80054ba:	0013      	movs	r3, r2
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	08da      	lsrs	r2, r3, #3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3208      	adds	r2, #8
 80054ca:	0092      	lsls	r2, r2, #2
 80054cc:	6939      	ldr	r1, [r7, #16]
 80054ce:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d00b      	beq.n	80054f0 <HAL_GPIO_Init+0xa8>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d007      	beq.n	80054f0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054e4:	2b11      	cmp	r3, #17
 80054e6:	d003      	beq.n	80054f0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b12      	cmp	r3, #18
 80054ee:	d130      	bne.n	8005552 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	2203      	movs	r2, #3
 80054fc:	409a      	lsls	r2, r3
 80054fe:	0013      	movs	r3, r2
 8005500:	43da      	mvns	r2, r3
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4013      	ands	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	409a      	lsls	r2, r3
 8005512:	0013      	movs	r3, r2
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005526:	2201      	movs	r2, #1
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	409a      	lsls	r2, r3
 800552c:	0013      	movs	r3, r2
 800552e:	43da      	mvns	r2, r3
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4013      	ands	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	091b      	lsrs	r3, r3, #4
 800553c:	2201      	movs	r2, #1
 800553e:	401a      	ands	r2, r3
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	409a      	lsls	r2, r3
 8005544:	0013      	movs	r3, r2
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	2203      	movs	r2, #3
 800555e:	409a      	lsls	r2, r3
 8005560:	0013      	movs	r3, r2
 8005562:	43da      	mvns	r2, r3
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	4013      	ands	r3, r2
 8005568:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2203      	movs	r2, #3
 8005570:	401a      	ands	r2, r3
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	409a      	lsls	r2, r3
 8005578:	0013      	movs	r3, r2
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	4313      	orrs	r3, r2
 800557e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	2203      	movs	r2, #3
 8005592:	409a      	lsls	r2, r3
 8005594:	0013      	movs	r3, r2
 8005596:	43da      	mvns	r2, r3
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	4013      	ands	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	409a      	lsls	r2, r3
 80055a8:	0013      	movs	r3, r2
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	2380      	movs	r3, #128	; 0x80
 80055bc:	055b      	lsls	r3, r3, #21
 80055be:	4013      	ands	r3, r2
 80055c0:	d100      	bne.n	80055c4 <HAL_GPIO_Init+0x17c>
 80055c2:	e0a0      	b.n	8005706 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055c4:	4b57      	ldr	r3, [pc, #348]	; (8005724 <HAL_GPIO_Init+0x2dc>)
 80055c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055c8:	4b56      	ldr	r3, [pc, #344]	; (8005724 <HAL_GPIO_Init+0x2dc>)
 80055ca:	2101      	movs	r1, #1
 80055cc:	430a      	orrs	r2, r1
 80055ce:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80055d0:	4a55      	ldr	r2, [pc, #340]	; (8005728 <HAL_GPIO_Init+0x2e0>)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	089b      	lsrs	r3, r3, #2
 80055d6:	3302      	adds	r3, #2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	589b      	ldr	r3, [r3, r2]
 80055dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2203      	movs	r2, #3
 80055e2:	4013      	ands	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	220f      	movs	r2, #15
 80055e8:	409a      	lsls	r2, r3
 80055ea:	0013      	movs	r3, r2
 80055ec:	43da      	mvns	r2, r3
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	4013      	ands	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	23a0      	movs	r3, #160	; 0xa0
 80055f8:	05db      	lsls	r3, r3, #23
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d01f      	beq.n	800563e <HAL_GPIO_Init+0x1f6>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a4a      	ldr	r2, [pc, #296]	; (800572c <HAL_GPIO_Init+0x2e4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d019      	beq.n	800563a <HAL_GPIO_Init+0x1f2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a49      	ldr	r2, [pc, #292]	; (8005730 <HAL_GPIO_Init+0x2e8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <HAL_GPIO_Init+0x1ee>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a48      	ldr	r2, [pc, #288]	; (8005734 <HAL_GPIO_Init+0x2ec>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00d      	beq.n	8005632 <HAL_GPIO_Init+0x1ea>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a47      	ldr	r2, [pc, #284]	; (8005738 <HAL_GPIO_Init+0x2f0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d007      	beq.n	800562e <HAL_GPIO_Init+0x1e6>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a46      	ldr	r2, [pc, #280]	; (800573c <HAL_GPIO_Init+0x2f4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d101      	bne.n	800562a <HAL_GPIO_Init+0x1e2>
 8005626:	2305      	movs	r3, #5
 8005628:	e00a      	b.n	8005640 <HAL_GPIO_Init+0x1f8>
 800562a:	2306      	movs	r3, #6
 800562c:	e008      	b.n	8005640 <HAL_GPIO_Init+0x1f8>
 800562e:	2304      	movs	r3, #4
 8005630:	e006      	b.n	8005640 <HAL_GPIO_Init+0x1f8>
 8005632:	2303      	movs	r3, #3
 8005634:	e004      	b.n	8005640 <HAL_GPIO_Init+0x1f8>
 8005636:	2302      	movs	r3, #2
 8005638:	e002      	b.n	8005640 <HAL_GPIO_Init+0x1f8>
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <HAL_GPIO_Init+0x1f8>
 800563e:	2300      	movs	r3, #0
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	2103      	movs	r1, #3
 8005644:	400a      	ands	r2, r1
 8005646:	0092      	lsls	r2, r2, #2
 8005648:	4093      	lsls	r3, r2
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005650:	4935      	ldr	r1, [pc, #212]	; (8005728 <HAL_GPIO_Init+0x2e0>)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	089b      	lsrs	r3, r3, #2
 8005656:	3302      	adds	r3, #2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800565e:	4b38      	ldr	r3, [pc, #224]	; (8005740 <HAL_GPIO_Init+0x2f8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	43da      	mvns	r2, r3
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	4013      	ands	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	2380      	movs	r3, #128	; 0x80
 8005674:	025b      	lsls	r3, r3, #9
 8005676:	4013      	ands	r3, r2
 8005678:	d003      	beq.n	8005682 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005682:	4b2f      	ldr	r3, [pc, #188]	; (8005740 <HAL_GPIO_Init+0x2f8>)
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005688:	4b2d      	ldr	r3, [pc, #180]	; (8005740 <HAL_GPIO_Init+0x2f8>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	43da      	mvns	r2, r3
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	4013      	ands	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	2380      	movs	r3, #128	; 0x80
 800569e:	029b      	lsls	r3, r3, #10
 80056a0:	4013      	ands	r3, r2
 80056a2:	d003      	beq.n	80056ac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80056ac:	4b24      	ldr	r3, [pc, #144]	; (8005740 <HAL_GPIO_Init+0x2f8>)
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056b2:	4b23      	ldr	r3, [pc, #140]	; (8005740 <HAL_GPIO_Init+0x2f8>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	43da      	mvns	r2, r3
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4013      	ands	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	2380      	movs	r3, #128	; 0x80
 80056c8:	035b      	lsls	r3, r3, #13
 80056ca:	4013      	ands	r3, r2
 80056cc:	d003      	beq.n	80056d6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80056d6:	4b1a      	ldr	r3, [pc, #104]	; (8005740 <HAL_GPIO_Init+0x2f8>)
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80056dc:	4b18      	ldr	r3, [pc, #96]	; (8005740 <HAL_GPIO_Init+0x2f8>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	43da      	mvns	r2, r3
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	4013      	ands	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	2380      	movs	r3, #128	; 0x80
 80056f2:	039b      	lsls	r3, r3, #14
 80056f4:	4013      	ands	r3, r2
 80056f6:	d003      	beq.n	8005700 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005700:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <HAL_GPIO_Init+0x2f8>)
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	3301      	adds	r3, #1
 800570a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	40da      	lsrs	r2, r3
 8005714:	1e13      	subs	r3, r2, #0
 8005716:	d000      	beq.n	800571a <HAL_GPIO_Init+0x2d2>
 8005718:	e6a2      	b.n	8005460 <HAL_GPIO_Init+0x18>
  }
}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	46bd      	mov	sp, r7
 800571e:	b006      	add	sp, #24
 8005720:	bd80      	pop	{r7, pc}
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	40021000 	.word	0x40021000
 8005728:	40010000 	.word	0x40010000
 800572c:	50000400 	.word	0x50000400
 8005730:	50000800 	.word	0x50000800
 8005734:	50000c00 	.word	0x50000c00
 8005738:	50001000 	.word	0x50001000
 800573c:	50001c00 	.word	0x50001c00
 8005740:	40010400 	.word	0x40010400

08005744 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	000a      	movs	r2, r1
 800574e:	1cbb      	adds	r3, r7, #2
 8005750:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	1cba      	adds	r2, r7, #2
 8005758:	8812      	ldrh	r2, [r2, #0]
 800575a:	4013      	ands	r3, r2
 800575c:	d004      	beq.n	8005768 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800575e:	230f      	movs	r3, #15
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	2201      	movs	r2, #1
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	e003      	b.n	8005770 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005768:	230f      	movs	r3, #15
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005770:	230f      	movs	r3, #15
 8005772:	18fb      	adds	r3, r7, r3
 8005774:	781b      	ldrb	r3, [r3, #0]
}
 8005776:	0018      	movs	r0, r3
 8005778:	46bd      	mov	sp, r7
 800577a:	b004      	add	sp, #16
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b082      	sub	sp, #8
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	0008      	movs	r0, r1
 8005788:	0011      	movs	r1, r2
 800578a:	1cbb      	adds	r3, r7, #2
 800578c:	1c02      	adds	r2, r0, #0
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	1c7b      	adds	r3, r7, #1
 8005792:	1c0a      	adds	r2, r1, #0
 8005794:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8005796:	1c7b      	adds	r3, r7, #1
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d004      	beq.n	80057a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800579e:	1cbb      	adds	r3, r7, #2
 80057a0:	881a      	ldrh	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80057a6:	e003      	b.n	80057b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80057a8:	1cbb      	adds	r3, r7, #2
 80057aa:	881a      	ldrh	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057b0:	46c0      	nop			; (mov r8, r8)
 80057b2:	46bd      	mov	sp, r7
 80057b4:	b002      	add	sp, #8
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	0002      	movs	r2, r0
 80057c0:	1dbb      	adds	r3, r7, #6
 80057c2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80057c4:	4b09      	ldr	r3, [pc, #36]	; (80057ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	1dba      	adds	r2, r7, #6
 80057ca:	8812      	ldrh	r2, [r2, #0]
 80057cc:	4013      	ands	r3, r2
 80057ce:	d008      	beq.n	80057e2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057d0:	4b06      	ldr	r3, [pc, #24]	; (80057ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80057d2:	1dba      	adds	r2, r7, #6
 80057d4:	8812      	ldrh	r2, [r2, #0]
 80057d6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057d8:	1dbb      	adds	r3, r7, #6
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	0018      	movs	r0, r3
 80057de:	f000 f807 	bl	80057f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	46bd      	mov	sp, r7
 80057e6:	b002      	add	sp, #8
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	40010400 	.word	0x40010400

080057f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	0002      	movs	r2, r0
 80057f8:	1dbb      	adds	r3, r7, #6
 80057fa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80057fc:	46c0      	nop			; (mov r8, r8)
 80057fe:	46bd      	mov	sp, r7
 8005800:	b002      	add	sp, #8
 8005802:	bd80      	pop	{r7, pc}

08005804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005804:	b5b0      	push	{r4, r5, r7, lr}
 8005806:	b08a      	sub	sp, #40	; 0x28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d102      	bne.n	8005818 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	f000 fbbc 	bl	8005f90 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005818:	4bc8      	ldr	r3, [pc, #800]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	220c      	movs	r2, #12
 800581e:	4013      	ands	r3, r2
 8005820:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005822:	4bc6      	ldr	r3, [pc, #792]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	2380      	movs	r3, #128	; 0x80
 8005828:	025b      	lsls	r3, r3, #9
 800582a:	4013      	ands	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2201      	movs	r2, #1
 8005834:	4013      	ands	r3, r2
 8005836:	d100      	bne.n	800583a <HAL_RCC_OscConfig+0x36>
 8005838:	e07e      	b.n	8005938 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	2b08      	cmp	r3, #8
 800583e:	d007      	beq.n	8005850 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	2b0c      	cmp	r3, #12
 8005844:	d112      	bne.n	800586c <HAL_RCC_OscConfig+0x68>
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	2380      	movs	r3, #128	; 0x80
 800584a:	025b      	lsls	r3, r3, #9
 800584c:	429a      	cmp	r2, r3
 800584e:	d10d      	bne.n	800586c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005850:	4bba      	ldr	r3, [pc, #744]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	2380      	movs	r3, #128	; 0x80
 8005856:	029b      	lsls	r3, r3, #10
 8005858:	4013      	ands	r3, r2
 800585a:	d100      	bne.n	800585e <HAL_RCC_OscConfig+0x5a>
 800585c:	e06b      	b.n	8005936 <HAL_RCC_OscConfig+0x132>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d167      	bne.n	8005936 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f000 fb92 	bl	8005f90 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	2380      	movs	r3, #128	; 0x80
 8005872:	025b      	lsls	r3, r3, #9
 8005874:	429a      	cmp	r2, r3
 8005876:	d107      	bne.n	8005888 <HAL_RCC_OscConfig+0x84>
 8005878:	4bb0      	ldr	r3, [pc, #704]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	4baf      	ldr	r3, [pc, #700]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 800587e:	2180      	movs	r1, #128	; 0x80
 8005880:	0249      	lsls	r1, r1, #9
 8005882:	430a      	orrs	r2, r1
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	e027      	b.n	80058d8 <HAL_RCC_OscConfig+0xd4>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	23a0      	movs	r3, #160	; 0xa0
 800588e:	02db      	lsls	r3, r3, #11
 8005890:	429a      	cmp	r2, r3
 8005892:	d10e      	bne.n	80058b2 <HAL_RCC_OscConfig+0xae>
 8005894:	4ba9      	ldr	r3, [pc, #676]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	4ba8      	ldr	r3, [pc, #672]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 800589a:	2180      	movs	r1, #128	; 0x80
 800589c:	02c9      	lsls	r1, r1, #11
 800589e:	430a      	orrs	r2, r1
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	4ba6      	ldr	r3, [pc, #664]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4ba5      	ldr	r3, [pc, #660]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 80058a8:	2180      	movs	r1, #128	; 0x80
 80058aa:	0249      	lsls	r1, r1, #9
 80058ac:	430a      	orrs	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	e012      	b.n	80058d8 <HAL_RCC_OscConfig+0xd4>
 80058b2:	4ba2      	ldr	r3, [pc, #648]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	4ba1      	ldr	r3, [pc, #644]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 80058b8:	49a1      	ldr	r1, [pc, #644]	; (8005b40 <HAL_RCC_OscConfig+0x33c>)
 80058ba:	400a      	ands	r2, r1
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	4b9f      	ldr	r3, [pc, #636]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	025b      	lsls	r3, r3, #9
 80058c6:	4013      	ands	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4b9b      	ldr	r3, [pc, #620]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	4b9a      	ldr	r3, [pc, #616]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 80058d2:	499c      	ldr	r1, [pc, #624]	; (8005b44 <HAL_RCC_OscConfig+0x340>)
 80058d4:	400a      	ands	r2, r1
 80058d6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d015      	beq.n	800590c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e0:	f7ff f9e8 	bl	8004cb4 <HAL_GetTick>
 80058e4:	0003      	movs	r3, r0
 80058e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058e8:	e009      	b.n	80058fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058ea:	f7ff f9e3 	bl	8004cb4 <HAL_GetTick>
 80058ee:	0002      	movs	r2, r0
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b64      	cmp	r3, #100	; 0x64
 80058f6:	d902      	bls.n	80058fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	f000 fb49 	bl	8005f90 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058fe:	4b8f      	ldr	r3, [pc, #572]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	2380      	movs	r3, #128	; 0x80
 8005904:	029b      	lsls	r3, r3, #10
 8005906:	4013      	ands	r3, r2
 8005908:	d0ef      	beq.n	80058ea <HAL_RCC_OscConfig+0xe6>
 800590a:	e015      	b.n	8005938 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800590c:	f7ff f9d2 	bl	8004cb4 <HAL_GetTick>
 8005910:	0003      	movs	r3, r0
 8005912:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005916:	f7ff f9cd 	bl	8004cb4 <HAL_GetTick>
 800591a:	0002      	movs	r2, r0
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b64      	cmp	r3, #100	; 0x64
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e333      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005928:	4b84      	ldr	r3, [pc, #528]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	2380      	movs	r3, #128	; 0x80
 800592e:	029b      	lsls	r3, r3, #10
 8005930:	4013      	ands	r3, r2
 8005932:	d1f0      	bne.n	8005916 <HAL_RCC_OscConfig+0x112>
 8005934:	e000      	b.n	8005938 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005936:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2202      	movs	r2, #2
 800593e:	4013      	ands	r3, r2
 8005940:	d100      	bne.n	8005944 <HAL_RCC_OscConfig+0x140>
 8005942:	e098      	b.n	8005a76 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	2220      	movs	r2, #32
 800594e:	4013      	ands	r3, r2
 8005950:	d009      	beq.n	8005966 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005952:	4b7a      	ldr	r3, [pc, #488]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	4b79      	ldr	r3, [pc, #484]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005958:	2120      	movs	r1, #32
 800595a:	430a      	orrs	r2, r1
 800595c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	2220      	movs	r2, #32
 8005962:	4393      	bics	r3, r2
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	2b04      	cmp	r3, #4
 800596a:	d005      	beq.n	8005978 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	2b0c      	cmp	r3, #12
 8005970:	d13d      	bne.n	80059ee <HAL_RCC_OscConfig+0x1ea>
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d13a      	bne.n	80059ee <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005978:	4b70      	ldr	r3, [pc, #448]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2204      	movs	r2, #4
 800597e:	4013      	ands	r3, r2
 8005980:	d004      	beq.n	800598c <HAL_RCC_OscConfig+0x188>
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e301      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800598c:	4b6b      	ldr	r3, [pc, #428]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	4a6d      	ldr	r2, [pc, #436]	; (8005b48 <HAL_RCC_OscConfig+0x344>)
 8005992:	4013      	ands	r3, r2
 8005994:	0019      	movs	r1, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	021a      	lsls	r2, r3, #8
 800599c:	4b67      	ldr	r3, [pc, #412]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 800599e:	430a      	orrs	r2, r1
 80059a0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80059a2:	4b66      	ldr	r3, [pc, #408]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2209      	movs	r2, #9
 80059a8:	4393      	bics	r3, r2
 80059aa:	0019      	movs	r1, r3
 80059ac:	4b63      	ldr	r3, [pc, #396]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 80059ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b0:	430a      	orrs	r2, r1
 80059b2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059b4:	f000 fc20 	bl	80061f8 <HAL_RCC_GetSysClockFreq>
 80059b8:	0001      	movs	r1, r0
 80059ba:	4b60      	ldr	r3, [pc, #384]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	091b      	lsrs	r3, r3, #4
 80059c0:	220f      	movs	r2, #15
 80059c2:	4013      	ands	r3, r2
 80059c4:	4a61      	ldr	r2, [pc, #388]	; (8005b4c <HAL_RCC_OscConfig+0x348>)
 80059c6:	5cd3      	ldrb	r3, [r2, r3]
 80059c8:	000a      	movs	r2, r1
 80059ca:	40da      	lsrs	r2, r3
 80059cc:	4b60      	ldr	r3, [pc, #384]	; (8005b50 <HAL_RCC_OscConfig+0x34c>)
 80059ce:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80059d0:	2513      	movs	r5, #19
 80059d2:	197c      	adds	r4, r7, r5
 80059d4:	2000      	movs	r0, #0
 80059d6:	f7ff f937 	bl	8004c48 <HAL_InitTick>
 80059da:	0003      	movs	r3, r0
 80059dc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80059de:	197b      	adds	r3, r7, r5
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d047      	beq.n	8005a76 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80059e6:	2313      	movs	r3, #19
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	e2d0      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d027      	beq.n	8005a44 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80059f4:	4b51      	ldr	r3, [pc, #324]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2209      	movs	r2, #9
 80059fa:	4393      	bics	r3, r2
 80059fc:	0019      	movs	r1, r3
 80059fe:	4b4f      	ldr	r3, [pc, #316]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a02:	430a      	orrs	r2, r1
 8005a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a06:	f7ff f955 	bl	8004cb4 <HAL_GetTick>
 8005a0a:	0003      	movs	r3, r0
 8005a0c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a10:	f7ff f950 	bl	8004cb4 <HAL_GetTick>
 8005a14:	0002      	movs	r2, r0
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e2b6      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a22:	4b46      	ldr	r3, [pc, #280]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2204      	movs	r2, #4
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d0f1      	beq.n	8005a10 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a2c:	4b43      	ldr	r3, [pc, #268]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	4a45      	ldr	r2, [pc, #276]	; (8005b48 <HAL_RCC_OscConfig+0x344>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	0019      	movs	r1, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	021a      	lsls	r2, r3, #8
 8005a3c:	4b3f      	ldr	r3, [pc, #252]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
 8005a42:	e018      	b.n	8005a76 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a44:	4b3d      	ldr	r3, [pc, #244]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	4b3c      	ldr	r3, [pc, #240]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	438a      	bics	r2, r1
 8005a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a50:	f7ff f930 	bl	8004cb4 <HAL_GetTick>
 8005a54:	0003      	movs	r3, r0
 8005a56:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a5a:	f7ff f92b 	bl	8004cb4 <HAL_GetTick>
 8005a5e:	0002      	movs	r2, r0
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e291      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a6c:	4b33      	ldr	r3, [pc, #204]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2204      	movs	r2, #4
 8005a72:	4013      	ands	r3, r2
 8005a74:	d1f1      	bne.n	8005a5a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2210      	movs	r2, #16
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	d100      	bne.n	8005a82 <HAL_RCC_OscConfig+0x27e>
 8005a80:	e09f      	b.n	8005bc2 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d13f      	bne.n	8005b08 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a88:	4b2c      	ldr	r3, [pc, #176]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	2380      	movs	r3, #128	; 0x80
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4013      	ands	r3, r2
 8005a92:	d005      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x29c>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e277      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005aa0:	4b26      	ldr	r3, [pc, #152]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4a2b      	ldr	r2, [pc, #172]	; (8005b54 <HAL_RCC_OscConfig+0x350>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aae:	4b23      	ldr	r3, [pc, #140]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ab4:	4b21      	ldr	r3, [pc, #132]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	0a19      	lsrs	r1, r3, #8
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	061a      	lsls	r2, r3, #24
 8005ac2:	4b1e      	ldr	r3, [pc, #120]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	0b5b      	lsrs	r3, r3, #13
 8005ace:	3301      	adds	r3, #1
 8005ad0:	2280      	movs	r2, #128	; 0x80
 8005ad2:	0212      	lsls	r2, r2, #8
 8005ad4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005ad6:	4b19      	ldr	r3, [pc, #100]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	091b      	lsrs	r3, r3, #4
 8005adc:	210f      	movs	r1, #15
 8005ade:	400b      	ands	r3, r1
 8005ae0:	491a      	ldr	r1, [pc, #104]	; (8005b4c <HAL_RCC_OscConfig+0x348>)
 8005ae2:	5ccb      	ldrb	r3, [r1, r3]
 8005ae4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005ae6:	4b1a      	ldr	r3, [pc, #104]	; (8005b50 <HAL_RCC_OscConfig+0x34c>)
 8005ae8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8005aea:	2513      	movs	r5, #19
 8005aec:	197c      	adds	r4, r7, r5
 8005aee:	2000      	movs	r0, #0
 8005af0:	f7ff f8aa 	bl	8004c48 <HAL_InitTick>
 8005af4:	0003      	movs	r3, r0
 8005af6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005af8:	197b      	adds	r3, r7, r5
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d060      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8005b00:	2313      	movs	r3, #19
 8005b02:	18fb      	adds	r3, r7, r3
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	e243      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d03e      	beq.n	8005b8e <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <HAL_RCC_OscConfig+0x338>)
 8005b16:	2180      	movs	r1, #128	; 0x80
 8005b18:	0049      	lsls	r1, r1, #1
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1e:	f7ff f8c9 	bl	8004cb4 <HAL_GetTick>
 8005b22:	0003      	movs	r3, r0
 8005b24:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005b26:	e017      	b.n	8005b58 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b28:	f7ff f8c4 	bl	8004cb4 <HAL_GetTick>
 8005b2c:	0002      	movs	r2, r0
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d910      	bls.n	8005b58 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e22a      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	fffeffff 	.word	0xfffeffff
 8005b44:	fffbffff 	.word	0xfffbffff
 8005b48:	ffffe0ff 	.word	0xffffe0ff
 8005b4c:	08008f24 	.word	0x08008f24
 8005b50:	20000000 	.word	0x20000000
 8005b54:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005b58:	4bc6      	ldr	r3, [pc, #792]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	2380      	movs	r3, #128	; 0x80
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4013      	ands	r3, r2
 8005b62:	d0e1      	beq.n	8005b28 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b64:	4bc3      	ldr	r3, [pc, #780]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	4ac3      	ldr	r2, [pc, #780]	; (8005e78 <HAL_RCC_OscConfig+0x674>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	0019      	movs	r1, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b72:	4bc0      	ldr	r3, [pc, #768]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005b74:	430a      	orrs	r2, r1
 8005b76:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b78:	4bbe      	ldr	r3, [pc, #760]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	0a19      	lsrs	r1, r3, #8
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	061a      	lsls	r2, r3, #24
 8005b86:	4bbb      	ldr	r3, [pc, #748]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	605a      	str	r2, [r3, #4]
 8005b8c:	e019      	b.n	8005bc2 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b8e:	4bb9      	ldr	r3, [pc, #740]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4bb8      	ldr	r3, [pc, #736]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005b94:	49b9      	ldr	r1, [pc, #740]	; (8005e7c <HAL_RCC_OscConfig+0x678>)
 8005b96:	400a      	ands	r2, r1
 8005b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9a:	f7ff f88b 	bl	8004cb4 <HAL_GetTick>
 8005b9e:	0003      	movs	r3, r0
 8005ba0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ba4:	f7ff f886 	bl	8004cb4 <HAL_GetTick>
 8005ba8:	0002      	movs	r2, r0
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e1ec      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005bb6:	4baf      	ldr	r3, [pc, #700]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	2380      	movs	r3, #128	; 0x80
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d1f0      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	4013      	ands	r3, r2
 8005bca:	d036      	beq.n	8005c3a <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d019      	beq.n	8005c08 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bd4:	4ba7      	ldr	r3, [pc, #668]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005bd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bd8:	4ba6      	ldr	r3, [pc, #664]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005bda:	2101      	movs	r1, #1
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005be0:	f7ff f868 	bl	8004cb4 <HAL_GetTick>
 8005be4:	0003      	movs	r3, r0
 8005be6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005be8:	e008      	b.n	8005bfc <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bea:	f7ff f863 	bl	8004cb4 <HAL_GetTick>
 8005bee:	0002      	movs	r2, r0
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e1c9      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bfc:	4b9d      	ldr	r3, [pc, #628]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c00:	2202      	movs	r2, #2
 8005c02:	4013      	ands	r3, r2
 8005c04:	d0f1      	beq.n	8005bea <HAL_RCC_OscConfig+0x3e6>
 8005c06:	e018      	b.n	8005c3a <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c08:	4b9a      	ldr	r3, [pc, #616]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005c0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c0c:	4b99      	ldr	r3, [pc, #612]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005c0e:	2101      	movs	r1, #1
 8005c10:	438a      	bics	r2, r1
 8005c12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c14:	f7ff f84e 	bl	8004cb4 <HAL_GetTick>
 8005c18:	0003      	movs	r3, r0
 8005c1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c1c:	e008      	b.n	8005c30 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c1e:	f7ff f849 	bl	8004cb4 <HAL_GetTick>
 8005c22:	0002      	movs	r2, r0
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e1af      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c30:	4b90      	ldr	r3, [pc, #576]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c34:	2202      	movs	r2, #2
 8005c36:	4013      	ands	r3, r2
 8005c38:	d1f1      	bne.n	8005c1e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2204      	movs	r2, #4
 8005c40:	4013      	ands	r3, r2
 8005c42:	d100      	bne.n	8005c46 <HAL_RCC_OscConfig+0x442>
 8005c44:	e0af      	b.n	8005da6 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c46:	2323      	movs	r3, #35	; 0x23
 8005c48:	18fb      	adds	r3, r7, r3
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c4e:	4b89      	ldr	r3, [pc, #548]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c52:	2380      	movs	r3, #128	; 0x80
 8005c54:	055b      	lsls	r3, r3, #21
 8005c56:	4013      	ands	r3, r2
 8005c58:	d10a      	bne.n	8005c70 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c5a:	4b86      	ldr	r3, [pc, #536]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c5e:	4b85      	ldr	r3, [pc, #532]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005c60:	2180      	movs	r1, #128	; 0x80
 8005c62:	0549      	lsls	r1, r1, #21
 8005c64:	430a      	orrs	r2, r1
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005c68:	2323      	movs	r3, #35	; 0x23
 8005c6a:	18fb      	adds	r3, r7, r3
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c70:	4b83      	ldr	r3, [pc, #524]	; (8005e80 <HAL_RCC_OscConfig+0x67c>)
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	2380      	movs	r3, #128	; 0x80
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	4013      	ands	r3, r2
 8005c7a:	d11a      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c7c:	4b80      	ldr	r3, [pc, #512]	; (8005e80 <HAL_RCC_OscConfig+0x67c>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	4b7f      	ldr	r3, [pc, #508]	; (8005e80 <HAL_RCC_OscConfig+0x67c>)
 8005c82:	2180      	movs	r1, #128	; 0x80
 8005c84:	0049      	lsls	r1, r1, #1
 8005c86:	430a      	orrs	r2, r1
 8005c88:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c8a:	f7ff f813 	bl	8004cb4 <HAL_GetTick>
 8005c8e:	0003      	movs	r3, r0
 8005c90:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c94:	f7ff f80e 	bl	8004cb4 <HAL_GetTick>
 8005c98:	0002      	movs	r2, r0
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b64      	cmp	r3, #100	; 0x64
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e174      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ca6:	4b76      	ldr	r3, [pc, #472]	; (8005e80 <HAL_RCC_OscConfig+0x67c>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	2380      	movs	r3, #128	; 0x80
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	4013      	ands	r3, r2
 8005cb0:	d0f0      	beq.n	8005c94 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	2380      	movs	r3, #128	; 0x80
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d107      	bne.n	8005cce <HAL_RCC_OscConfig+0x4ca>
 8005cbe:	4b6d      	ldr	r3, [pc, #436]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005cc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cc2:	4b6c      	ldr	r3, [pc, #432]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005cc4:	2180      	movs	r1, #128	; 0x80
 8005cc6:	0049      	lsls	r1, r1, #1
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	651a      	str	r2, [r3, #80]	; 0x50
 8005ccc:	e031      	b.n	8005d32 <HAL_RCC_OscConfig+0x52e>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10c      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x4ec>
 8005cd6:	4b67      	ldr	r3, [pc, #412]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005cd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cda:	4b66      	ldr	r3, [pc, #408]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005cdc:	4967      	ldr	r1, [pc, #412]	; (8005e7c <HAL_RCC_OscConfig+0x678>)
 8005cde:	400a      	ands	r2, r1
 8005ce0:	651a      	str	r2, [r3, #80]	; 0x50
 8005ce2:	4b64      	ldr	r3, [pc, #400]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005ce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ce6:	4b63      	ldr	r3, [pc, #396]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005ce8:	4966      	ldr	r1, [pc, #408]	; (8005e84 <HAL_RCC_OscConfig+0x680>)
 8005cea:	400a      	ands	r2, r1
 8005cec:	651a      	str	r2, [r3, #80]	; 0x50
 8005cee:	e020      	b.n	8005d32 <HAL_RCC_OscConfig+0x52e>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	23a0      	movs	r3, #160	; 0xa0
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d10e      	bne.n	8005d1a <HAL_RCC_OscConfig+0x516>
 8005cfc:	4b5d      	ldr	r3, [pc, #372]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005cfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d00:	4b5c      	ldr	r3, [pc, #368]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005d02:	2180      	movs	r1, #128	; 0x80
 8005d04:	00c9      	lsls	r1, r1, #3
 8005d06:	430a      	orrs	r2, r1
 8005d08:	651a      	str	r2, [r3, #80]	; 0x50
 8005d0a:	4b5a      	ldr	r3, [pc, #360]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d0e:	4b59      	ldr	r3, [pc, #356]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005d10:	2180      	movs	r1, #128	; 0x80
 8005d12:	0049      	lsls	r1, r1, #1
 8005d14:	430a      	orrs	r2, r1
 8005d16:	651a      	str	r2, [r3, #80]	; 0x50
 8005d18:	e00b      	b.n	8005d32 <HAL_RCC_OscConfig+0x52e>
 8005d1a:	4b56      	ldr	r3, [pc, #344]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005d1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d1e:	4b55      	ldr	r3, [pc, #340]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005d20:	4956      	ldr	r1, [pc, #344]	; (8005e7c <HAL_RCC_OscConfig+0x678>)
 8005d22:	400a      	ands	r2, r1
 8005d24:	651a      	str	r2, [r3, #80]	; 0x50
 8005d26:	4b53      	ldr	r3, [pc, #332]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005d28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d2a:	4b52      	ldr	r3, [pc, #328]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005d2c:	4955      	ldr	r1, [pc, #340]	; (8005e84 <HAL_RCC_OscConfig+0x680>)
 8005d2e:	400a      	ands	r2, r1
 8005d30:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d015      	beq.n	8005d66 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d3a:	f7fe ffbb 	bl	8004cb4 <HAL_GetTick>
 8005d3e:	0003      	movs	r3, r0
 8005d40:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d42:	e009      	b.n	8005d58 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d44:	f7fe ffb6 	bl	8004cb4 <HAL_GetTick>
 8005d48:	0002      	movs	r2, r0
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	4a4e      	ldr	r2, [pc, #312]	; (8005e88 <HAL_RCC_OscConfig+0x684>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e11b      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d58:	4b46      	ldr	r3, [pc, #280]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005d5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d5c:	2380      	movs	r3, #128	; 0x80
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4013      	ands	r3, r2
 8005d62:	d0ef      	beq.n	8005d44 <HAL_RCC_OscConfig+0x540>
 8005d64:	e014      	b.n	8005d90 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d66:	f7fe ffa5 	bl	8004cb4 <HAL_GetTick>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d6e:	e009      	b.n	8005d84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d70:	f7fe ffa0 	bl	8004cb4 <HAL_GetTick>
 8005d74:	0002      	movs	r2, r0
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	4a43      	ldr	r2, [pc, #268]	; (8005e88 <HAL_RCC_OscConfig+0x684>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e105      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d84:	4b3b      	ldr	r3, [pc, #236]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005d86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d88:	2380      	movs	r3, #128	; 0x80
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	d1ef      	bne.n	8005d70 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d90:	2323      	movs	r3, #35	; 0x23
 8005d92:	18fb      	adds	r3, r7, r3
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d105      	bne.n	8005da6 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d9a:	4b36      	ldr	r3, [pc, #216]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9e:	4b35      	ldr	r3, [pc, #212]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005da0:	493a      	ldr	r1, [pc, #232]	; (8005e8c <HAL_RCC_OscConfig+0x688>)
 8005da2:	400a      	ands	r2, r1
 8005da4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2220      	movs	r2, #32
 8005dac:	4013      	ands	r3, r2
 8005dae:	d049      	beq.n	8005e44 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d026      	beq.n	8005e06 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005db8:	4b2e      	ldr	r3, [pc, #184]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	4b2d      	ldr	r3, [pc, #180]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	609a      	str	r2, [r3, #8]
 8005dc4:	4b2b      	ldr	r3, [pc, #172]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dc8:	4b2a      	ldr	r3, [pc, #168]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005dca:	2101      	movs	r1, #1
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	635a      	str	r2, [r3, #52]	; 0x34
 8005dd0:	4b2f      	ldr	r3, [pc, #188]	; (8005e90 <HAL_RCC_OscConfig+0x68c>)
 8005dd2:	6a1a      	ldr	r2, [r3, #32]
 8005dd4:	4b2e      	ldr	r3, [pc, #184]	; (8005e90 <HAL_RCC_OscConfig+0x68c>)
 8005dd6:	2180      	movs	r1, #128	; 0x80
 8005dd8:	0189      	lsls	r1, r1, #6
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dde:	f7fe ff69 	bl	8004cb4 <HAL_GetTick>
 8005de2:	0003      	movs	r3, r0
 8005de4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005de8:	f7fe ff64 	bl	8004cb4 <HAL_GetTick>
 8005dec:	0002      	movs	r2, r0
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e0ca      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005dfa:	4b1e      	ldr	r3, [pc, #120]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	4013      	ands	r3, r2
 8005e02:	d0f1      	beq.n	8005de8 <HAL_RCC_OscConfig+0x5e4>
 8005e04:	e01e      	b.n	8005e44 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005e06:	4b1b      	ldr	r3, [pc, #108]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	4b1a      	ldr	r3, [pc, #104]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	438a      	bics	r2, r1
 8005e10:	609a      	str	r2, [r3, #8]
 8005e12:	4b1f      	ldr	r3, [pc, #124]	; (8005e90 <HAL_RCC_OscConfig+0x68c>)
 8005e14:	6a1a      	ldr	r2, [r3, #32]
 8005e16:	4b1e      	ldr	r3, [pc, #120]	; (8005e90 <HAL_RCC_OscConfig+0x68c>)
 8005e18:	491e      	ldr	r1, [pc, #120]	; (8005e94 <HAL_RCC_OscConfig+0x690>)
 8005e1a:	400a      	ands	r2, r1
 8005e1c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e1e:	f7fe ff49 	bl	8004cb4 <HAL_GetTick>
 8005e22:	0003      	movs	r3, r0
 8005e24:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e28:	f7fe ff44 	bl	8004cb4 <HAL_GetTick>
 8005e2c:	0002      	movs	r2, r0
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e0aa      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e3a:	4b0e      	ldr	r3, [pc, #56]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	4013      	ands	r3, r2
 8005e42:	d1f1      	bne.n	8005e28 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d100      	bne.n	8005e4e <HAL_RCC_OscConfig+0x64a>
 8005e4c:	e09f      	b.n	8005f8e <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	2b0c      	cmp	r3, #12
 8005e52:	d100      	bne.n	8005e56 <HAL_RCC_OscConfig+0x652>
 8005e54:	e078      	b.n	8005f48 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d159      	bne.n	8005f12 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e5e:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <HAL_RCC_OscConfig+0x670>)
 8005e64:	490c      	ldr	r1, [pc, #48]	; (8005e98 <HAL_RCC_OscConfig+0x694>)
 8005e66:	400a      	ands	r2, r1
 8005e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6a:	f7fe ff23 	bl	8004cb4 <HAL_GetTick>
 8005e6e:	0003      	movs	r3, r0
 8005e70:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005e72:	e01c      	b.n	8005eae <HAL_RCC_OscConfig+0x6aa>
 8005e74:	40021000 	.word	0x40021000
 8005e78:	ffff1fff 	.word	0xffff1fff
 8005e7c:	fffffeff 	.word	0xfffffeff
 8005e80:	40007000 	.word	0x40007000
 8005e84:	fffffbff 	.word	0xfffffbff
 8005e88:	00001388 	.word	0x00001388
 8005e8c:	efffffff 	.word	0xefffffff
 8005e90:	40010000 	.word	0x40010000
 8005e94:	ffffdfff 	.word	0xffffdfff
 8005e98:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e9c:	f7fe ff0a 	bl	8004cb4 <HAL_GetTick>
 8005ea0:	0002      	movs	r2, r0
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e070      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005eae:	4b3a      	ldr	r3, [pc, #232]	; (8005f98 <HAL_RCC_OscConfig+0x794>)
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	2380      	movs	r3, #128	; 0x80
 8005eb4:	049b      	lsls	r3, r3, #18
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	d1f0      	bne.n	8005e9c <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005eba:	4b37      	ldr	r3, [pc, #220]	; (8005f98 <HAL_RCC_OscConfig+0x794>)
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	4a37      	ldr	r2, [pc, #220]	; (8005f9c <HAL_RCC_OscConfig+0x798>)
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	0019      	movs	r1, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	4b30      	ldr	r3, [pc, #192]	; (8005f98 <HAL_RCC_OscConfig+0x794>)
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eda:	4b2f      	ldr	r3, [pc, #188]	; (8005f98 <HAL_RCC_OscConfig+0x794>)
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	4b2e      	ldr	r3, [pc, #184]	; (8005f98 <HAL_RCC_OscConfig+0x794>)
 8005ee0:	2180      	movs	r1, #128	; 0x80
 8005ee2:	0449      	lsls	r1, r1, #17
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee8:	f7fe fee4 	bl	8004cb4 <HAL_GetTick>
 8005eec:	0003      	movs	r3, r0
 8005eee:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005ef0:	e008      	b.n	8005f04 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ef2:	f7fe fedf 	bl	8004cb4 <HAL_GetTick>
 8005ef6:	0002      	movs	r2, r0
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e045      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005f04:	4b24      	ldr	r3, [pc, #144]	; (8005f98 <HAL_RCC_OscConfig+0x794>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	2380      	movs	r3, #128	; 0x80
 8005f0a:	049b      	lsls	r3, r3, #18
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d0f0      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x6ee>
 8005f10:	e03d      	b.n	8005f8e <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f12:	4b21      	ldr	r3, [pc, #132]	; (8005f98 <HAL_RCC_OscConfig+0x794>)
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	4b20      	ldr	r3, [pc, #128]	; (8005f98 <HAL_RCC_OscConfig+0x794>)
 8005f18:	4921      	ldr	r1, [pc, #132]	; (8005fa0 <HAL_RCC_OscConfig+0x79c>)
 8005f1a:	400a      	ands	r2, r1
 8005f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f1e:	f7fe fec9 	bl	8004cb4 <HAL_GetTick>
 8005f22:	0003      	movs	r3, r0
 8005f24:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005f26:	e008      	b.n	8005f3a <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f28:	f7fe fec4 	bl	8004cb4 <HAL_GetTick>
 8005f2c:	0002      	movs	r2, r0
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e02a      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005f3a:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <HAL_RCC_OscConfig+0x794>)
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	2380      	movs	r3, #128	; 0x80
 8005f40:	049b      	lsls	r3, r3, #18
 8005f42:	4013      	ands	r3, r2
 8005f44:	d1f0      	bne.n	8005f28 <HAL_RCC_OscConfig+0x724>
 8005f46:	e022      	b.n	8005f8e <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e01d      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f54:	4b10      	ldr	r3, [pc, #64]	; (8005f98 <HAL_RCC_OscConfig+0x794>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	2380      	movs	r3, #128	; 0x80
 8005f5e:	025b      	lsls	r3, r3, #9
 8005f60:	401a      	ands	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d10f      	bne.n	8005f8a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	23f0      	movs	r3, #240	; 0xf0
 8005f6e:	039b      	lsls	r3, r3, #14
 8005f70:	401a      	ands	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d107      	bne.n	8005f8a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	23c0      	movs	r3, #192	; 0xc0
 8005f7e:	041b      	lsls	r3, r3, #16
 8005f80:	401a      	ands	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d001      	beq.n	8005f8e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e000      	b.n	8005f90 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	0018      	movs	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b00a      	add	sp, #40	; 0x28
 8005f96:	bdb0      	pop	{r4, r5, r7, pc}
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	ff02ffff 	.word	0xff02ffff
 8005fa0:	feffffff 	.word	0xfeffffff

08005fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fa4:	b5b0      	push	{r4, r5, r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e10d      	b.n	80061d4 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb8:	4b88      	ldr	r3, [pc, #544]	; (80061dc <HAL_RCC_ClockConfig+0x238>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d911      	bls.n	8005fea <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc6:	4b85      	ldr	r3, [pc, #532]	; (80061dc <HAL_RCC_ClockConfig+0x238>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	4393      	bics	r3, r2
 8005fce:	0019      	movs	r1, r3
 8005fd0:	4b82      	ldr	r3, [pc, #520]	; (80061dc <HAL_RCC_ClockConfig+0x238>)
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd8:	4b80      	ldr	r3, [pc, #512]	; (80061dc <HAL_RCC_ClockConfig+0x238>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	4013      	ands	r3, r2
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d001      	beq.n	8005fea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e0f4      	b.n	80061d4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	d009      	beq.n	8006008 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ff4:	4b7a      	ldr	r3, [pc, #488]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	22f0      	movs	r2, #240	; 0xf0
 8005ffa:	4393      	bics	r3, r2
 8005ffc:	0019      	movs	r1, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	4b77      	ldr	r3, [pc, #476]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 8006004:	430a      	orrs	r2, r1
 8006006:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2201      	movs	r2, #1
 800600e:	4013      	ands	r3, r2
 8006010:	d100      	bne.n	8006014 <HAL_RCC_ClockConfig+0x70>
 8006012:	e089      	b.n	8006128 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	2b02      	cmp	r3, #2
 800601a:	d107      	bne.n	800602c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800601c:	4b70      	ldr	r3, [pc, #448]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	2380      	movs	r3, #128	; 0x80
 8006022:	029b      	lsls	r3, r3, #10
 8006024:	4013      	ands	r3, r2
 8006026:	d120      	bne.n	800606a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e0d3      	b.n	80061d4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	2b03      	cmp	r3, #3
 8006032:	d107      	bne.n	8006044 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006034:	4b6a      	ldr	r3, [pc, #424]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	2380      	movs	r3, #128	; 0x80
 800603a:	049b      	lsls	r3, r3, #18
 800603c:	4013      	ands	r3, r2
 800603e:	d114      	bne.n	800606a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e0c7      	b.n	80061d4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d106      	bne.n	800605a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800604c:	4b64      	ldr	r3, [pc, #400]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2204      	movs	r2, #4
 8006052:	4013      	ands	r3, r2
 8006054:	d109      	bne.n	800606a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e0bc      	b.n	80061d4 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800605a:	4b61      	ldr	r3, [pc, #388]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	2380      	movs	r3, #128	; 0x80
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4013      	ands	r3, r2
 8006064:	d101      	bne.n	800606a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e0b4      	b.n	80061d4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800606a:	4b5d      	ldr	r3, [pc, #372]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	2203      	movs	r2, #3
 8006070:	4393      	bics	r3, r2
 8006072:	0019      	movs	r1, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	4b59      	ldr	r3, [pc, #356]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 800607a:	430a      	orrs	r2, r1
 800607c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800607e:	f7fe fe19 	bl	8004cb4 <HAL_GetTick>
 8006082:	0003      	movs	r3, r0
 8006084:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2b02      	cmp	r3, #2
 800608c:	d111      	bne.n	80060b2 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800608e:	e009      	b.n	80060a4 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006090:	f7fe fe10 	bl	8004cb4 <HAL_GetTick>
 8006094:	0002      	movs	r2, r0
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	4a52      	ldr	r2, [pc, #328]	; (80061e4 <HAL_RCC_ClockConfig+0x240>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e097      	b.n	80061d4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80060a4:	4b4e      	ldr	r3, [pc, #312]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	220c      	movs	r2, #12
 80060aa:	4013      	ands	r3, r2
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d1ef      	bne.n	8006090 <HAL_RCC_ClockConfig+0xec>
 80060b0:	e03a      	b.n	8006128 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d111      	bne.n	80060de <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060ba:	e009      	b.n	80060d0 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060bc:	f7fe fdfa 	bl	8004cb4 <HAL_GetTick>
 80060c0:	0002      	movs	r2, r0
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	4a47      	ldr	r2, [pc, #284]	; (80061e4 <HAL_RCC_ClockConfig+0x240>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e081      	b.n	80061d4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060d0:	4b43      	ldr	r3, [pc, #268]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	220c      	movs	r2, #12
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b0c      	cmp	r3, #12
 80060da:	d1ef      	bne.n	80060bc <HAL_RCC_ClockConfig+0x118>
 80060dc:	e024      	b.n	8006128 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d11b      	bne.n	800611e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80060e6:	e009      	b.n	80060fc <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060e8:	f7fe fde4 	bl	8004cb4 <HAL_GetTick>
 80060ec:	0002      	movs	r2, r0
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	4a3c      	ldr	r2, [pc, #240]	; (80061e4 <HAL_RCC_ClockConfig+0x240>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d901      	bls.n	80060fc <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e06b      	b.n	80061d4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80060fc:	4b38      	ldr	r3, [pc, #224]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	220c      	movs	r2, #12
 8006102:	4013      	ands	r3, r2
 8006104:	2b04      	cmp	r3, #4
 8006106:	d1ef      	bne.n	80060e8 <HAL_RCC_ClockConfig+0x144>
 8006108:	e00e      	b.n	8006128 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800610a:	f7fe fdd3 	bl	8004cb4 <HAL_GetTick>
 800610e:	0002      	movs	r2, r0
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	4a33      	ldr	r2, [pc, #204]	; (80061e4 <HAL_RCC_ClockConfig+0x240>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d901      	bls.n	800611e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e05a      	b.n	80061d4 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800611e:	4b30      	ldr	r3, [pc, #192]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	220c      	movs	r2, #12
 8006124:	4013      	ands	r3, r2
 8006126:	d1f0      	bne.n	800610a <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006128:	4b2c      	ldr	r3, [pc, #176]	; (80061dc <HAL_RCC_ClockConfig+0x238>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2201      	movs	r2, #1
 800612e:	4013      	ands	r3, r2
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d211      	bcs.n	800615a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006136:	4b29      	ldr	r3, [pc, #164]	; (80061dc <HAL_RCC_ClockConfig+0x238>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2201      	movs	r2, #1
 800613c:	4393      	bics	r3, r2
 800613e:	0019      	movs	r1, r3
 8006140:	4b26      	ldr	r3, [pc, #152]	; (80061dc <HAL_RCC_ClockConfig+0x238>)
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006148:	4b24      	ldr	r3, [pc, #144]	; (80061dc <HAL_RCC_ClockConfig+0x238>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2201      	movs	r2, #1
 800614e:	4013      	ands	r3, r2
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d001      	beq.n	800615a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e03c      	b.n	80061d4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2204      	movs	r2, #4
 8006160:	4013      	ands	r3, r2
 8006162:	d009      	beq.n	8006178 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006164:	4b1e      	ldr	r3, [pc, #120]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	4a1f      	ldr	r2, [pc, #124]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 800616a:	4013      	ands	r3, r2
 800616c:	0019      	movs	r1, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	4b1b      	ldr	r3, [pc, #108]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 8006174:	430a      	orrs	r2, r1
 8006176:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2208      	movs	r2, #8
 800617e:	4013      	ands	r3, r2
 8006180:	d00a      	beq.n	8006198 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006182:	4b17      	ldr	r3, [pc, #92]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	4a19      	ldr	r2, [pc, #100]	; (80061ec <HAL_RCC_ClockConfig+0x248>)
 8006188:	4013      	ands	r3, r2
 800618a:	0019      	movs	r1, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	00da      	lsls	r2, r3, #3
 8006192:	4b13      	ldr	r3, [pc, #76]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 8006194:	430a      	orrs	r2, r1
 8006196:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006198:	f000 f82e 	bl	80061f8 <HAL_RCC_GetSysClockFreq>
 800619c:	0001      	movs	r1, r0
 800619e:	4b10      	ldr	r3, [pc, #64]	; (80061e0 <HAL_RCC_ClockConfig+0x23c>)
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	091b      	lsrs	r3, r3, #4
 80061a4:	220f      	movs	r2, #15
 80061a6:	4013      	ands	r3, r2
 80061a8:	4a11      	ldr	r2, [pc, #68]	; (80061f0 <HAL_RCC_ClockConfig+0x24c>)
 80061aa:	5cd3      	ldrb	r3, [r2, r3]
 80061ac:	000a      	movs	r2, r1
 80061ae:	40da      	lsrs	r2, r3
 80061b0:	4b10      	ldr	r3, [pc, #64]	; (80061f4 <HAL_RCC_ClockConfig+0x250>)
 80061b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80061b4:	250b      	movs	r5, #11
 80061b6:	197c      	adds	r4, r7, r5
 80061b8:	2000      	movs	r0, #0
 80061ba:	f7fe fd45 	bl	8004c48 <HAL_InitTick>
 80061be:	0003      	movs	r3, r0
 80061c0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80061c2:	197b      	adds	r3, r7, r5
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80061ca:	230b      	movs	r3, #11
 80061cc:	18fb      	adds	r3, r7, r3
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	e000      	b.n	80061d4 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	0018      	movs	r0, r3
 80061d6:	46bd      	mov	sp, r7
 80061d8:	b004      	add	sp, #16
 80061da:	bdb0      	pop	{r4, r5, r7, pc}
 80061dc:	40022000 	.word	0x40022000
 80061e0:	40021000 	.word	0x40021000
 80061e4:	00001388 	.word	0x00001388
 80061e8:	fffff8ff 	.word	0xfffff8ff
 80061ec:	ffffc7ff 	.word	0xffffc7ff
 80061f0:	08008f24 	.word	0x08008f24
 80061f4:	20000000 	.word	0x20000000

080061f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80061fe:	4b3b      	ldr	r3, [pc, #236]	; (80062ec <HAL_RCC_GetSysClockFreq+0xf4>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	220c      	movs	r2, #12
 8006208:	4013      	ands	r3, r2
 800620a:	2b08      	cmp	r3, #8
 800620c:	d00e      	beq.n	800622c <HAL_RCC_GetSysClockFreq+0x34>
 800620e:	2b0c      	cmp	r3, #12
 8006210:	d00f      	beq.n	8006232 <HAL_RCC_GetSysClockFreq+0x3a>
 8006212:	2b04      	cmp	r3, #4
 8006214:	d157      	bne.n	80062c6 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006216:	4b35      	ldr	r3, [pc, #212]	; (80062ec <HAL_RCC_GetSysClockFreq+0xf4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2210      	movs	r2, #16
 800621c:	4013      	ands	r3, r2
 800621e:	d002      	beq.n	8006226 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006220:	4b33      	ldr	r3, [pc, #204]	; (80062f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006222:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006224:	e05d      	b.n	80062e2 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8006226:	4b33      	ldr	r3, [pc, #204]	; (80062f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006228:	613b      	str	r3, [r7, #16]
      break;
 800622a:	e05a      	b.n	80062e2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800622c:	4b32      	ldr	r3, [pc, #200]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x100>)
 800622e:	613b      	str	r3, [r7, #16]
      break;
 8006230:	e057      	b.n	80062e2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	0c9b      	lsrs	r3, r3, #18
 8006236:	220f      	movs	r2, #15
 8006238:	4013      	ands	r3, r2
 800623a:	4a30      	ldr	r2, [pc, #192]	; (80062fc <HAL_RCC_GetSysClockFreq+0x104>)
 800623c:	5cd3      	ldrb	r3, [r2, r3]
 800623e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	0d9b      	lsrs	r3, r3, #22
 8006244:	2203      	movs	r2, #3
 8006246:	4013      	ands	r3, r2
 8006248:	3301      	adds	r3, #1
 800624a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800624c:	4b27      	ldr	r3, [pc, #156]	; (80062ec <HAL_RCC_GetSysClockFreq+0xf4>)
 800624e:	68da      	ldr	r2, [r3, #12]
 8006250:	2380      	movs	r3, #128	; 0x80
 8006252:	025b      	lsls	r3, r3, #9
 8006254:	4013      	ands	r3, r2
 8006256:	d00f      	beq.n	8006278 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8006258:	68b9      	ldr	r1, [r7, #8]
 800625a:	000a      	movs	r2, r1
 800625c:	0152      	lsls	r2, r2, #5
 800625e:	1a52      	subs	r2, r2, r1
 8006260:	0193      	lsls	r3, r2, #6
 8006262:	1a9b      	subs	r3, r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	185b      	adds	r3, r3, r1
 8006268:	025b      	lsls	r3, r3, #9
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	0018      	movs	r0, r3
 800626e:	f7f9 ff55 	bl	800011c <__udivsi3>
 8006272:	0003      	movs	r3, r0
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	e023      	b.n	80062c0 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006278:	4b1c      	ldr	r3, [pc, #112]	; (80062ec <HAL_RCC_GetSysClockFreq+0xf4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2210      	movs	r2, #16
 800627e:	4013      	ands	r3, r2
 8006280:	d00f      	beq.n	80062a2 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	000a      	movs	r2, r1
 8006286:	0152      	lsls	r2, r2, #5
 8006288:	1a52      	subs	r2, r2, r1
 800628a:	0193      	lsls	r3, r2, #6
 800628c:	1a9b      	subs	r3, r3, r2
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	185b      	adds	r3, r3, r1
 8006292:	021b      	lsls	r3, r3, #8
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	0018      	movs	r0, r3
 8006298:	f7f9 ff40 	bl	800011c <__udivsi3>
 800629c:	0003      	movs	r3, r0
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	e00e      	b.n	80062c0 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	000a      	movs	r2, r1
 80062a6:	0152      	lsls	r2, r2, #5
 80062a8:	1a52      	subs	r2, r2, r1
 80062aa:	0193      	lsls	r3, r2, #6
 80062ac:	1a9b      	subs	r3, r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	185b      	adds	r3, r3, r1
 80062b2:	029b      	lsls	r3, r3, #10
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	0018      	movs	r0, r3
 80062b8:	f7f9 ff30 	bl	800011c <__udivsi3>
 80062bc:	0003      	movs	r3, r0
 80062be:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	613b      	str	r3, [r7, #16]
      break;
 80062c4:	e00d      	b.n	80062e2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80062c6:	4b09      	ldr	r3, [pc, #36]	; (80062ec <HAL_RCC_GetSysClockFreq+0xf4>)
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	0b5b      	lsrs	r3, r3, #13
 80062cc:	2207      	movs	r2, #7
 80062ce:	4013      	ands	r3, r2
 80062d0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	3301      	adds	r3, #1
 80062d6:	2280      	movs	r2, #128	; 0x80
 80062d8:	0212      	lsls	r2, r2, #8
 80062da:	409a      	lsls	r2, r3
 80062dc:	0013      	movs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
      break;
 80062e0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80062e2:	693b      	ldr	r3, [r7, #16]
}
 80062e4:	0018      	movs	r0, r3
 80062e6:	46bd      	mov	sp, r7
 80062e8:	b006      	add	sp, #24
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40021000 	.word	0x40021000
 80062f0:	003d0900 	.word	0x003d0900
 80062f4:	00f42400 	.word	0x00f42400
 80062f8:	007a1200 	.word	0x007a1200
 80062fc:	08008f34 	.word	0x08008f34

08006300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e01e      	b.n	8006350 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2239      	movs	r2, #57	; 0x39
 8006316:	5c9b      	ldrb	r3, [r3, r2]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d107      	bne.n	800632e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2238      	movs	r2, #56	; 0x38
 8006322:	2100      	movs	r1, #0
 8006324:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	0018      	movs	r0, r3
 800632a:	f7fe f9bd 	bl	80046a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2239      	movs	r2, #57	; 0x39
 8006332:	2102      	movs	r1, #2
 8006334:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3304      	adds	r3, #4
 800633e:	0019      	movs	r1, r3
 8006340:	0010      	movs	r0, r2
 8006342:	f000 fb93 	bl	8006a6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2239      	movs	r2, #57	; 0x39
 800634a:	2101      	movs	r1, #1
 800634c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	0018      	movs	r0, r3
 8006352:	46bd      	mov	sp, r7
 8006354:	b002      	add	sp, #8
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2101      	movs	r1, #1
 800636c:	430a      	orrs	r2, r1
 800636e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	2207      	movs	r2, #7
 8006378:	4013      	ands	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b06      	cmp	r3, #6
 8006380:	d007      	beq.n	8006392 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2101      	movs	r1, #1
 800638e:	430a      	orrs	r2, r1
 8006390:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	0018      	movs	r0, r3
 8006396:	46bd      	mov	sp, r7
 8006398:	b004      	add	sp, #16
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e01e      	b.n	80063ec <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2239      	movs	r2, #57	; 0x39
 80063b2:	5c9b      	ldrb	r3, [r3, r2]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d107      	bne.n	80063ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2238      	movs	r2, #56	; 0x38
 80063be:	2100      	movs	r1, #0
 80063c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	0018      	movs	r0, r3
 80063c6:	f7fe f959 	bl	800467c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2239      	movs	r2, #57	; 0x39
 80063ce:	2102      	movs	r1, #2
 80063d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3304      	adds	r3, #4
 80063da:	0019      	movs	r1, r3
 80063dc:	0010      	movs	r0, r2
 80063de:	f000 fb45 	bl	8006a6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2239      	movs	r2, #57	; 0x39
 80063e6:	2101      	movs	r1, #1
 80063e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	0018      	movs	r0, r3
 80063ee:	46bd      	mov	sp, r7
 80063f0:	b002      	add	sp, #8
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	2201      	movs	r2, #1
 8006406:	0018      	movs	r0, r3
 8006408:	f000 fd2c 	bl	8006e64 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2207      	movs	r2, #7
 8006414:	4013      	ands	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b06      	cmp	r3, #6
 800641c:	d007      	beq.n	800642e <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2101      	movs	r1, #1
 800642a:	430a      	orrs	r2, r1
 800642c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	0018      	movs	r0, r3
 8006432:	46bd      	mov	sp, r7
 8006434:	b004      	add	sp, #16
 8006436:	bd80      	pop	{r7, pc}

08006438 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e07c      	b.n	8006546 <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2239      	movs	r2, #57	; 0x39
 8006450:	5c9b      	ldrb	r3, [r3, r2]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d107      	bne.n	8006468 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2238      	movs	r2, #56	; 0x38
 800645c:	2100      	movs	r1, #0
 800645e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	0018      	movs	r0, r3
 8006464:	f7fe f94e 	bl	8004704 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2239      	movs	r2, #57	; 0x39
 800646c:	2102      	movs	r1, #2
 800646e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4935      	ldr	r1, [pc, #212]	; (8006550 <HAL_TIM_Encoder_Init+0x118>)
 800647c:	400a      	ands	r2, r1
 800647e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3304      	adds	r3, #4
 8006488:	0019      	movs	r1, r3
 800648a:	0010      	movs	r0, r2
 800648c:	f000 faee 	bl	8006a6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	4a27      	ldr	r2, [pc, #156]	; (8006554 <HAL_TIM_Encoder_Init+0x11c>)
 80064b6:	4013      	ands	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	021b      	lsls	r3, r3, #8
 80064c4:	4313      	orrs	r3, r2
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	4a22      	ldr	r2, [pc, #136]	; (8006558 <HAL_TIM_Encoder_Init+0x120>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4a21      	ldr	r2, [pc, #132]	; (800655c <HAL_TIM_Encoder_Init+0x124>)
 80064d8:	4013      	ands	r3, r2
 80064da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	021b      	lsls	r3, r3, #8
 80064e6:	4313      	orrs	r3, r2
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	011a      	lsls	r2, r3, #4
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	031b      	lsls	r3, r3, #12
 80064fa:	4313      	orrs	r3, r2
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	4313      	orrs	r3, r2
 8006500:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2222      	movs	r2, #34	; 0x22
 8006506:	4393      	bics	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2288      	movs	r2, #136	; 0x88
 800650e:	4393      	bics	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	011b      	lsls	r3, r3, #4
 800651c:	4313      	orrs	r3, r2
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4313      	orrs	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2239      	movs	r2, #57	; 0x39
 8006540:	2101      	movs	r1, #1
 8006542:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	0018      	movs	r0, r3
 8006548:	46bd      	mov	sp, r7
 800654a:	b006      	add	sp, #24
 800654c:	bd80      	pop	{r7, pc}
 800654e:	46c0      	nop			; (mov r8, r8)
 8006550:	ffffbff8 	.word	0xffffbff8
 8006554:	fffffcfc 	.word	0xfffffcfc
 8006558:	fffff3f3 	.word	0xfffff3f3
 800655c:	ffff0f0f 	.word	0xffff0f0f

08006560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2202      	movs	r2, #2
 8006570:	4013      	ands	r3, r2
 8006572:	2b02      	cmp	r3, #2
 8006574:	d124      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	2202      	movs	r2, #2
 800657e:	4013      	ands	r3, r2
 8006580:	2b02      	cmp	r3, #2
 8006582:	d11d      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2203      	movs	r2, #3
 800658a:	4252      	negs	r2, r2
 800658c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	2203      	movs	r2, #3
 800659c:	4013      	ands	r3, r2
 800659e:	d004      	beq.n	80065aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	0018      	movs	r0, r3
 80065a4:	f000 fa4a 	bl	8006a3c <HAL_TIM_IC_CaptureCallback>
 80065a8:	e007      	b.n	80065ba <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	0018      	movs	r0, r3
 80065ae:	f000 fa3d 	bl	8006a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	0018      	movs	r0, r3
 80065b6:	f000 fa49 	bl	8006a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	2204      	movs	r2, #4
 80065c8:	4013      	ands	r3, r2
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d125      	bne.n	800661a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	2204      	movs	r2, #4
 80065d6:	4013      	ands	r3, r2
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d11e      	bne.n	800661a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2205      	movs	r2, #5
 80065e2:	4252      	negs	r2, r2
 80065e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2202      	movs	r2, #2
 80065ea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	23c0      	movs	r3, #192	; 0xc0
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4013      	ands	r3, r2
 80065f8:	d004      	beq.n	8006604 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	0018      	movs	r0, r3
 80065fe:	f000 fa1d 	bl	8006a3c <HAL_TIM_IC_CaptureCallback>
 8006602:	e007      	b.n	8006614 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	0018      	movs	r0, r3
 8006608:	f000 fa10 	bl	8006a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	0018      	movs	r0, r3
 8006610:	f000 fa1c 	bl	8006a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	2208      	movs	r2, #8
 8006622:	4013      	ands	r3, r2
 8006624:	2b08      	cmp	r3, #8
 8006626:	d124      	bne.n	8006672 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	2208      	movs	r2, #8
 8006630:	4013      	ands	r3, r2
 8006632:	2b08      	cmp	r3, #8
 8006634:	d11d      	bne.n	8006672 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2209      	movs	r2, #9
 800663c:	4252      	negs	r2, r2
 800663e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2204      	movs	r2, #4
 8006644:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	2203      	movs	r2, #3
 800664e:	4013      	ands	r3, r2
 8006650:	d004      	beq.n	800665c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	0018      	movs	r0, r3
 8006656:	f000 f9f1 	bl	8006a3c <HAL_TIM_IC_CaptureCallback>
 800665a:	e007      	b.n	800666c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	0018      	movs	r0, r3
 8006660:	f000 f9e4 	bl	8006a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	0018      	movs	r0, r3
 8006668:	f000 f9f0 	bl	8006a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2210      	movs	r2, #16
 800667a:	4013      	ands	r3, r2
 800667c:	2b10      	cmp	r3, #16
 800667e:	d125      	bne.n	80066cc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	2210      	movs	r2, #16
 8006688:	4013      	ands	r3, r2
 800668a:	2b10      	cmp	r3, #16
 800668c:	d11e      	bne.n	80066cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2211      	movs	r2, #17
 8006694:	4252      	negs	r2, r2
 8006696:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2208      	movs	r2, #8
 800669c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	23c0      	movs	r3, #192	; 0xc0
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4013      	ands	r3, r2
 80066aa:	d004      	beq.n	80066b6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	0018      	movs	r0, r3
 80066b0:	f000 f9c4 	bl	8006a3c <HAL_TIM_IC_CaptureCallback>
 80066b4:	e007      	b.n	80066c6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	0018      	movs	r0, r3
 80066ba:	f000 f9b7 	bl	8006a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	0018      	movs	r0, r3
 80066c2:	f000 f9c3 	bl	8006a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2201      	movs	r2, #1
 80066d4:	4013      	ands	r3, r2
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d10f      	bne.n	80066fa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	2201      	movs	r2, #1
 80066e2:	4013      	ands	r3, r2
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d108      	bne.n	80066fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2202      	movs	r2, #2
 80066ee:	4252      	negs	r2, r2
 80066f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	0018      	movs	r0, r3
 80066f6:	f000 f991 	bl	8006a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	2240      	movs	r2, #64	; 0x40
 8006702:	4013      	ands	r3, r2
 8006704:	2b40      	cmp	r3, #64	; 0x40
 8006706:	d10f      	bne.n	8006728 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	2240      	movs	r2, #64	; 0x40
 8006710:	4013      	ands	r3, r2
 8006712:	2b40      	cmp	r3, #64	; 0x40
 8006714:	d108      	bne.n	8006728 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2241      	movs	r2, #65	; 0x41
 800671c:	4252      	negs	r2, r2
 800671e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	0018      	movs	r0, r3
 8006724:	f000 f99a 	bl	8006a5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006728:	46c0      	nop			; (mov r8, r8)
 800672a:	46bd      	mov	sp, r7
 800672c:	b002      	add	sp, #8
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2238      	movs	r2, #56	; 0x38
 8006740:	5c9b      	ldrb	r3, [r3, r2]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006746:	2302      	movs	r3, #2
 8006748:	e0a4      	b.n	8006894 <HAL_TIM_PWM_ConfigChannel+0x164>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2238      	movs	r2, #56	; 0x38
 800674e:	2101      	movs	r1, #1
 8006750:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2239      	movs	r2, #57	; 0x39
 8006756:	2102      	movs	r1, #2
 8006758:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b04      	cmp	r3, #4
 800675e:	d029      	beq.n	80067b4 <HAL_TIM_PWM_ConfigChannel+0x84>
 8006760:	d802      	bhi.n	8006768 <HAL_TIM_PWM_ConfigChannel+0x38>
 8006762:	2b00      	cmp	r3, #0
 8006764:	d005      	beq.n	8006772 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8006766:	e08c      	b.n	8006882 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8006768:	2b08      	cmp	r3, #8
 800676a:	d046      	beq.n	80067fa <HAL_TIM_PWM_ConfigChannel+0xca>
 800676c:	2b0c      	cmp	r3, #12
 800676e:	d065      	beq.n	800683c <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8006770:	e087      	b.n	8006882 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	0011      	movs	r1, r2
 800677a:	0018      	movs	r0, r3
 800677c:	f000 f9d4 	bl	8006b28 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2108      	movs	r1, #8
 800678c:	430a      	orrs	r2, r1
 800678e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2104      	movs	r1, #4
 800679c:	438a      	bics	r2, r1
 800679e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6999      	ldr	r1, [r3, #24]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	619a      	str	r2, [r3, #24]
      break;
 80067b2:	e066      	b.n	8006882 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	0011      	movs	r1, r2
 80067bc:	0018      	movs	r0, r3
 80067be:	f000 f9ef 	bl	8006ba0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	699a      	ldr	r2, [r3, #24]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2180      	movs	r1, #128	; 0x80
 80067ce:	0109      	lsls	r1, r1, #4
 80067d0:	430a      	orrs	r2, r1
 80067d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	492f      	ldr	r1, [pc, #188]	; (800689c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80067e0:	400a      	ands	r2, r1
 80067e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6999      	ldr	r1, [r3, #24]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	021a      	lsls	r2, r3, #8
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	619a      	str	r2, [r3, #24]
      break;
 80067f8:	e043      	b.n	8006882 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	0011      	movs	r1, r2
 8006802:	0018      	movs	r0, r3
 8006804:	f000 fa0e 	bl	8006c24 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	69da      	ldr	r2, [r3, #28]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2108      	movs	r1, #8
 8006814:	430a      	orrs	r2, r1
 8006816:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69da      	ldr	r2, [r3, #28]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2104      	movs	r1, #4
 8006824:	438a      	bics	r2, r1
 8006826:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69d9      	ldr	r1, [r3, #28]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	61da      	str	r2, [r3, #28]
      break;
 800683a:	e022      	b.n	8006882 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	0011      	movs	r1, r2
 8006844:	0018      	movs	r0, r3
 8006846:	f000 fa2d 	bl	8006ca4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69da      	ldr	r2, [r3, #28]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2180      	movs	r1, #128	; 0x80
 8006856:	0109      	lsls	r1, r1, #4
 8006858:	430a      	orrs	r2, r1
 800685a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69da      	ldr	r2, [r3, #28]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	490d      	ldr	r1, [pc, #52]	; (800689c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8006868:	400a      	ands	r2, r1
 800686a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	69d9      	ldr	r1, [r3, #28]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	021a      	lsls	r2, r3, #8
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	61da      	str	r2, [r3, #28]
      break;
 8006880:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2239      	movs	r2, #57	; 0x39
 8006886:	2101      	movs	r1, #1
 8006888:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2238      	movs	r2, #56	; 0x38
 800688e:	2100      	movs	r1, #0
 8006890:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	0018      	movs	r0, r3
 8006896:	46bd      	mov	sp, r7
 8006898:	b004      	add	sp, #16
 800689a:	bd80      	pop	{r7, pc}
 800689c:	fffffbff 	.word	0xfffffbff

080068a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2238      	movs	r2, #56	; 0x38
 80068ae:	5c9b      	ldrb	r3, [r3, r2]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d101      	bne.n	80068b8 <HAL_TIM_ConfigClockSource+0x18>
 80068b4:	2302      	movs	r3, #2
 80068b6:	e0ab      	b.n	8006a10 <HAL_TIM_ConfigClockSource+0x170>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2238      	movs	r2, #56	; 0x38
 80068bc:	2101      	movs	r1, #1
 80068be:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2239      	movs	r2, #57	; 0x39
 80068c4:	2102      	movs	r1, #2
 80068c6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2277      	movs	r2, #119	; 0x77
 80068d4:	4393      	bics	r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4a4f      	ldr	r2, [pc, #316]	; (8006a18 <HAL_TIM_ConfigClockSource+0x178>)
 80068dc:	4013      	ands	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b40      	cmp	r3, #64	; 0x40
 80068ee:	d100      	bne.n	80068f2 <HAL_TIM_ConfigClockSource+0x52>
 80068f0:	e06b      	b.n	80069ca <HAL_TIM_ConfigClockSource+0x12a>
 80068f2:	d80e      	bhi.n	8006912 <HAL_TIM_ConfigClockSource+0x72>
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d100      	bne.n	80068fa <HAL_TIM_ConfigClockSource+0x5a>
 80068f8:	e077      	b.n	80069ea <HAL_TIM_ConfigClockSource+0x14a>
 80068fa:	d803      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x64>
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d100      	bne.n	8006902 <HAL_TIM_ConfigClockSource+0x62>
 8006900:	e073      	b.n	80069ea <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006902:	e07c      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8006904:	2b20      	cmp	r3, #32
 8006906:	d100      	bne.n	800690a <HAL_TIM_ConfigClockSource+0x6a>
 8006908:	e06f      	b.n	80069ea <HAL_TIM_ConfigClockSource+0x14a>
 800690a:	2b30      	cmp	r3, #48	; 0x30
 800690c:	d100      	bne.n	8006910 <HAL_TIM_ConfigClockSource+0x70>
 800690e:	e06c      	b.n	80069ea <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8006910:	e075      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8006912:	2b70      	cmp	r3, #112	; 0x70
 8006914:	d00e      	beq.n	8006934 <HAL_TIM_ConfigClockSource+0x94>
 8006916:	d804      	bhi.n	8006922 <HAL_TIM_ConfigClockSource+0x82>
 8006918:	2b50      	cmp	r3, #80	; 0x50
 800691a:	d036      	beq.n	800698a <HAL_TIM_ConfigClockSource+0xea>
 800691c:	2b60      	cmp	r3, #96	; 0x60
 800691e:	d044      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8006920:	e06d      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8006922:	2280      	movs	r2, #128	; 0x80
 8006924:	0152      	lsls	r2, r2, #5
 8006926:	4293      	cmp	r3, r2
 8006928:	d068      	beq.n	80069fc <HAL_TIM_ConfigClockSource+0x15c>
 800692a:	2280      	movs	r2, #128	; 0x80
 800692c:	0192      	lsls	r2, r2, #6
 800692e:	4293      	cmp	r3, r2
 8006930:	d017      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8006932:	e064      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6818      	ldr	r0, [r3, #0]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	6899      	ldr	r1, [r3, #8]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f000 fa6e 	bl	8006e24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2277      	movs	r2, #119	; 0x77
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	609a      	str	r2, [r3, #8]
      break;
 8006960:	e04d      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	6899      	ldr	r1, [r3, #8]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f000 fa57 	bl	8006e24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2180      	movs	r1, #128	; 0x80
 8006982:	01c9      	lsls	r1, r1, #7
 8006984:	430a      	orrs	r2, r1
 8006986:	609a      	str	r2, [r3, #8]
      break;
 8006988:	e039      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6818      	ldr	r0, [r3, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	6859      	ldr	r1, [r3, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	001a      	movs	r2, r3
 8006998:	f000 f9ca 	bl	8006d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2150      	movs	r1, #80	; 0x50
 80069a2:	0018      	movs	r0, r3
 80069a4:	f000 fa24 	bl	8006df0 <TIM_ITRx_SetConfig>
      break;
 80069a8:	e029      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6818      	ldr	r0, [r3, #0]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	6859      	ldr	r1, [r3, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	001a      	movs	r2, r3
 80069b8:	f000 f9e8 	bl	8006d8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2160      	movs	r1, #96	; 0x60
 80069c2:	0018      	movs	r0, r3
 80069c4:	f000 fa14 	bl	8006df0 <TIM_ITRx_SetConfig>
      break;
 80069c8:	e019      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6818      	ldr	r0, [r3, #0]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	6859      	ldr	r1, [r3, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	001a      	movs	r2, r3
 80069d8:	f000 f9aa 	bl	8006d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2140      	movs	r1, #64	; 0x40
 80069e2:	0018      	movs	r0, r3
 80069e4:	f000 fa04 	bl	8006df0 <TIM_ITRx_SetConfig>
      break;
 80069e8:	e009      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	0019      	movs	r1, r3
 80069f4:	0010      	movs	r0, r2
 80069f6:	f000 f9fb 	bl	8006df0 <TIM_ITRx_SetConfig>
      break;
 80069fa:	e000      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80069fc:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2239      	movs	r2, #57	; 0x39
 8006a02:	2101      	movs	r1, #1
 8006a04:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2238      	movs	r2, #56	; 0x38
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	0018      	movs	r0, r3
 8006a12:	46bd      	mov	sp, r7
 8006a14:	b004      	add	sp, #16
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	ffff00ff 	.word	0xffff00ff

08006a1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a24:	46c0      	nop			; (mov r8, r8)
 8006a26:	46bd      	mov	sp, r7
 8006a28:	b002      	add	sp, #8
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a34:	46c0      	nop			; (mov r8, r8)
 8006a36:	46bd      	mov	sp, r7
 8006a38:	b002      	add	sp, #8
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a44:	46c0      	nop			; (mov r8, r8)
 8006a46:	46bd      	mov	sp, r7
 8006a48:	b002      	add	sp, #8
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a54:	46c0      	nop			; (mov r8, r8)
 8006a56:	46bd      	mov	sp, r7
 8006a58:	b002      	add	sp, #8
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a64:	46c0      	nop			; (mov r8, r8)
 8006a66:	46bd      	mov	sp, r7
 8006a68:	b002      	add	sp, #8
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	2380      	movs	r3, #128	; 0x80
 8006a80:	05db      	lsls	r3, r3, #23
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d00b      	beq.n	8006a9e <TIM_Base_SetConfig+0x32>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a23      	ldr	r2, [pc, #140]	; (8006b18 <TIM_Base_SetConfig+0xac>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d007      	beq.n	8006a9e <TIM_Base_SetConfig+0x32>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a22      	ldr	r2, [pc, #136]	; (8006b1c <TIM_Base_SetConfig+0xb0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d003      	beq.n	8006a9e <TIM_Base_SetConfig+0x32>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a21      	ldr	r2, [pc, #132]	; (8006b20 <TIM_Base_SetConfig+0xb4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d108      	bne.n	8006ab0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2270      	movs	r2, #112	; 0x70
 8006aa2:	4393      	bics	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	2380      	movs	r3, #128	; 0x80
 8006ab4:	05db      	lsls	r3, r3, #23
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d00b      	beq.n	8006ad2 <TIM_Base_SetConfig+0x66>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a16      	ldr	r2, [pc, #88]	; (8006b18 <TIM_Base_SetConfig+0xac>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d007      	beq.n	8006ad2 <TIM_Base_SetConfig+0x66>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a15      	ldr	r2, [pc, #84]	; (8006b1c <TIM_Base_SetConfig+0xb0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d003      	beq.n	8006ad2 <TIM_Base_SetConfig+0x66>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a14      	ldr	r2, [pc, #80]	; (8006b20 <TIM_Base_SetConfig+0xb4>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d108      	bne.n	8006ae4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4a13      	ldr	r2, [pc, #76]	; (8006b24 <TIM_Base_SetConfig+0xb8>)
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2280      	movs	r2, #128	; 0x80
 8006ae8:	4393      	bics	r3, r2
 8006aea:	001a      	movs	r2, r3
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	615a      	str	r2, [r3, #20]
}
 8006b10:	46c0      	nop			; (mov r8, r8)
 8006b12:	46bd      	mov	sp, r7
 8006b14:	b004      	add	sp, #16
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40010800 	.word	0x40010800
 8006b20:	40011400 	.word	0x40011400
 8006b24:	fffffcff 	.word	0xfffffcff

08006b28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	2201      	movs	r2, #1
 8006b38:	4393      	bics	r3, r2
 8006b3a:	001a      	movs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2270      	movs	r2, #112	; 0x70
 8006b56:	4393      	bics	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	4393      	bics	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	4393      	bics	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	621a      	str	r2, [r3, #32]
}
 8006b98:	46c0      	nop			; (mov r8, r8)
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	b006      	add	sp, #24
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	2210      	movs	r2, #16
 8006bb0:	4393      	bics	r3, r2
 8006bb2:	001a      	movs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4a13      	ldr	r2, [pc, #76]	; (8006c1c <TIM_OC2_SetConfig+0x7c>)
 8006bce:	4013      	ands	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	4a12      	ldr	r2, [pc, #72]	; (8006c20 <TIM_OC2_SetConfig+0x80>)
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	021b      	lsls	r3, r3, #8
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2220      	movs	r2, #32
 8006bea:	4393      	bics	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	621a      	str	r2, [r3, #32]
}
 8006c14:	46c0      	nop			; (mov r8, r8)
 8006c16:	46bd      	mov	sp, r7
 8006c18:	b006      	add	sp, #24
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	ffff8fff 	.word	0xffff8fff
 8006c20:	fffffcff 	.word	0xfffffcff

08006c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	4a1a      	ldr	r2, [pc, #104]	; (8006c9c <TIM_OC3_SetConfig+0x78>)
 8006c34:	401a      	ands	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2270      	movs	r2, #112	; 0x70
 8006c50:	4393      	bics	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2203      	movs	r2, #3
 8006c58:	4393      	bics	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	4a0d      	ldr	r2, [pc, #52]	; (8006ca0 <TIM_OC3_SetConfig+0x7c>)
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	021b      	lsls	r3, r3, #8
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	621a      	str	r2, [r3, #32]
}
 8006c94:	46c0      	nop			; (mov r8, r8)
 8006c96:	46bd      	mov	sp, r7
 8006c98:	b006      	add	sp, #24
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	fffffeff 	.word	0xfffffeff
 8006ca0:	fffffdff 	.word	0xfffffdff

08006ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	4a1b      	ldr	r2, [pc, #108]	; (8006d20 <TIM_OC4_SetConfig+0x7c>)
 8006cb4:	401a      	ands	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4a15      	ldr	r2, [pc, #84]	; (8006d24 <TIM_OC4_SetConfig+0x80>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4a14      	ldr	r2, [pc, #80]	; (8006d28 <TIM_OC4_SetConfig+0x84>)
 8006cd8:	4013      	ands	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	4a10      	ldr	r2, [pc, #64]	; (8006d2c <TIM_OC4_SetConfig+0x88>)
 8006cec:	4013      	ands	r3, r2
 8006cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	031b      	lsls	r3, r3, #12
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	621a      	str	r2, [r3, #32]
}
 8006d16:	46c0      	nop			; (mov r8, r8)
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	b006      	add	sp, #24
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	ffffefff 	.word	0xffffefff
 8006d24:	ffff8fff 	.word	0xffff8fff
 8006d28:	fffffcff 	.word	0xfffffcff
 8006d2c:	ffffdfff 	.word	0xffffdfff

08006d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	2201      	movs	r2, #1
 8006d48:	4393      	bics	r3, r2
 8006d4a:	001a      	movs	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	22f0      	movs	r2, #240	; 0xf0
 8006d5a:	4393      	bics	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	220a      	movs	r2, #10
 8006d6c:	4393      	bics	r3, r2
 8006d6e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	621a      	str	r2, [r3, #32]
}
 8006d84:	46c0      	nop			; (mov r8, r8)
 8006d86:	46bd      	mov	sp, r7
 8006d88:	b006      	add	sp, #24
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	2210      	movs	r2, #16
 8006d9e:	4393      	bics	r3, r2
 8006da0:	001a      	movs	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	4a0d      	ldr	r2, [pc, #52]	; (8006dec <TIM_TI2_ConfigInputStage+0x60>)
 8006db6:	4013      	ands	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	031b      	lsls	r3, r3, #12
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	22a0      	movs	r2, #160	; 0xa0
 8006dc8:	4393      	bics	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	621a      	str	r2, [r3, #32]
}
 8006de2:	46c0      	nop			; (mov r8, r8)
 8006de4:	46bd      	mov	sp, r7
 8006de6:	b006      	add	sp, #24
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	46c0      	nop			; (mov r8, r8)
 8006dec:	ffff0fff 	.word	0xffff0fff

08006df0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2270      	movs	r2, #112	; 0x70
 8006e04:	4393      	bics	r3, r2
 8006e06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	2207      	movs	r2, #7
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	609a      	str	r2, [r3, #8]
}
 8006e1a:	46c0      	nop			; (mov r8, r8)
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b004      	add	sp, #16
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <TIM_ETR_SetConfig+0x3c>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	021a      	lsls	r2, r3, #8
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	431a      	orrs	r2, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	609a      	str	r2, [r3, #8]
}
 8006e58:	46c0      	nop			; (mov r8, r8)
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	b006      	add	sp, #24
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	ffff00ff 	.word	0xffff00ff

08006e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	221f      	movs	r2, #31
 8006e74:	4013      	ands	r3, r2
 8006e76:	2201      	movs	r2, #1
 8006e78:	409a      	lsls	r2, r3
 8006e7a:	0013      	movs	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	43d2      	mvns	r2, r2
 8006e86:	401a      	ands	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a1a      	ldr	r2, [r3, #32]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	211f      	movs	r1, #31
 8006e94:	400b      	ands	r3, r1
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	4099      	lsls	r1, r3
 8006e9a:	000b      	movs	r3, r1
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	621a      	str	r2, [r3, #32]
}
 8006ea2:	46c0      	nop			; (mov r8, r8)
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	b006      	add	sp, #24
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2238      	movs	r2, #56	; 0x38
 8006eb8:	5c9b      	ldrb	r3, [r3, r2]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d101      	bne.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	e032      	b.n	8006f28 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2238      	movs	r2, #56	; 0x38
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2239      	movs	r2, #57	; 0x39
 8006ece:	2102      	movs	r1, #2
 8006ed0:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2270      	movs	r2, #112	; 0x70
 8006ee6:	4393      	bics	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2280      	movs	r2, #128	; 0x80
 8006ef8:	4393      	bics	r3, r2
 8006efa:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2239      	movs	r2, #57	; 0x39
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2238      	movs	r2, #56	; 0x38
 8006f22:	2100      	movs	r1, #0
 8006f24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	0018      	movs	r0, r3
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	b004      	add	sp, #16
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2238      	movs	r2, #56	; 0x38
 8006f3e:	5c9b      	ldrb	r3, [r3, r2]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_TIMEx_RemapConfig+0x18>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e00c      	b.n	8006f62 <HAL_TIMEx_RemapConfig+0x32>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2238      	movs	r2, #56	; 0x38
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2238      	movs	r2, #56	; 0x38
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	0018      	movs	r0, r3
 8006f64:	46bd      	mov	sp, r7
 8006f66:	b002      	add	sp, #8
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <arm_pid_init_f32>:
 8006f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f6c:	b081      	sub	sp, #4
 8006f6e:	460d      	mov	r5, r1
 8006f70:	4604      	mov	r4, r0
 8006f72:	6a06      	ldr	r6, [r0, #32]
 8006f74:	6086      	str	r6, [r0, #8]
 8006f76:	2003      	movs	r0, #3
 8006f78:	0781      	lsls	r1, r0, #30
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	f7f9 fd2e 	bl	80009dc <__aeabi_fmul>
 8006f80:	69a7      	ldr	r7, [r4, #24]
 8006f82:	4639      	mov	r1, r7
 8006f84:	f7f9 fe5c 	bl	8000c40 <__aeabi_fsub>
 8006f88:	6060      	str	r0, [r4, #4]
 8006f8a:	69e1      	ldr	r1, [r4, #28]
 8006f8c:	4638      	mov	r0, r7
 8006f8e:	f7f9 fa79 	bl	8000484 <__aeabi_fadd>
 8006f92:	4631      	mov	r1, r6
 8006f94:	f7f9 fa76 	bl	8000484 <__aeabi_fadd>
 8006f98:	6020      	str	r0, [r4, #0]
 8006f9a:	2d00      	cmp	r5, #0
 8006f9c:	d003      	beq.n	8006fa6 <arm_pid_init_f32+0x3c>
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	60e0      	str	r0, [r4, #12]
 8006fa2:	6120      	str	r0, [r4, #16]
 8006fa4:	6160      	str	r0, [r4, #20]
 8006fa6:	b001      	add	sp, #4
 8006fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006fac <__errno>:
 8006fac:	4b01      	ldr	r3, [pc, #4]	; (8006fb4 <__errno+0x8>)
 8006fae:	6818      	ldr	r0, [r3, #0]
 8006fb0:	4770      	bx	lr
 8006fb2:	46c0      	nop			; (mov r8, r8)
 8006fb4:	20000004 	.word	0x20000004

08006fb8 <__libc_init_array>:
 8006fb8:	b570      	push	{r4, r5, r6, lr}
 8006fba:	2600      	movs	r6, #0
 8006fbc:	4d0c      	ldr	r5, [pc, #48]	; (8006ff0 <__libc_init_array+0x38>)
 8006fbe:	4c0d      	ldr	r4, [pc, #52]	; (8006ff4 <__libc_init_array+0x3c>)
 8006fc0:	1b64      	subs	r4, r4, r5
 8006fc2:	10a4      	asrs	r4, r4, #2
 8006fc4:	42a6      	cmp	r6, r4
 8006fc6:	d109      	bne.n	8006fdc <__libc_init_array+0x24>
 8006fc8:	2600      	movs	r6, #0
 8006fca:	f001 fecb 	bl	8008d64 <_init>
 8006fce:	4d0a      	ldr	r5, [pc, #40]	; (8006ff8 <__libc_init_array+0x40>)
 8006fd0:	4c0a      	ldr	r4, [pc, #40]	; (8006ffc <__libc_init_array+0x44>)
 8006fd2:	1b64      	subs	r4, r4, r5
 8006fd4:	10a4      	asrs	r4, r4, #2
 8006fd6:	42a6      	cmp	r6, r4
 8006fd8:	d105      	bne.n	8006fe6 <__libc_init_array+0x2e>
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
 8006fdc:	00b3      	lsls	r3, r6, #2
 8006fde:	58eb      	ldr	r3, [r5, r3]
 8006fe0:	4798      	blx	r3
 8006fe2:	3601      	adds	r6, #1
 8006fe4:	e7ee      	b.n	8006fc4 <__libc_init_array+0xc>
 8006fe6:	00b3      	lsls	r3, r6, #2
 8006fe8:	58eb      	ldr	r3, [r5, r3]
 8006fea:	4798      	blx	r3
 8006fec:	3601      	adds	r6, #1
 8006fee:	e7f2      	b.n	8006fd6 <__libc_init_array+0x1e>
 8006ff0:	080091a0 	.word	0x080091a0
 8006ff4:	080091a0 	.word	0x080091a0
 8006ff8:	080091a0 	.word	0x080091a0
 8006ffc:	080091a4 	.word	0x080091a4

08007000 <memcpy>:
 8007000:	2300      	movs	r3, #0
 8007002:	b510      	push	{r4, lr}
 8007004:	429a      	cmp	r2, r3
 8007006:	d100      	bne.n	800700a <memcpy+0xa>
 8007008:	bd10      	pop	{r4, pc}
 800700a:	5ccc      	ldrb	r4, [r1, r3]
 800700c:	54c4      	strb	r4, [r0, r3]
 800700e:	3301      	adds	r3, #1
 8007010:	e7f8      	b.n	8007004 <memcpy+0x4>

08007012 <memset>:
 8007012:	0003      	movs	r3, r0
 8007014:	1812      	adds	r2, r2, r0
 8007016:	4293      	cmp	r3, r2
 8007018:	d100      	bne.n	800701c <memset+0xa>
 800701a:	4770      	bx	lr
 800701c:	7019      	strb	r1, [r3, #0]
 800701e:	3301      	adds	r3, #1
 8007020:	e7f9      	b.n	8007016 <memset+0x4>
	...

08007024 <_puts_r>:
 8007024:	b570      	push	{r4, r5, r6, lr}
 8007026:	0005      	movs	r5, r0
 8007028:	000e      	movs	r6, r1
 800702a:	2800      	cmp	r0, #0
 800702c:	d004      	beq.n	8007038 <_puts_r+0x14>
 800702e:	6983      	ldr	r3, [r0, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <_puts_r+0x14>
 8007034:	f000 fa24 	bl	8007480 <__sinit>
 8007038:	69ab      	ldr	r3, [r5, #24]
 800703a:	68ac      	ldr	r4, [r5, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d102      	bne.n	8007046 <_puts_r+0x22>
 8007040:	0028      	movs	r0, r5
 8007042:	f000 fa1d 	bl	8007480 <__sinit>
 8007046:	4b24      	ldr	r3, [pc, #144]	; (80070d8 <_puts_r+0xb4>)
 8007048:	429c      	cmp	r4, r3
 800704a:	d10f      	bne.n	800706c <_puts_r+0x48>
 800704c:	686c      	ldr	r4, [r5, #4]
 800704e:	89a3      	ldrh	r3, [r4, #12]
 8007050:	071b      	lsls	r3, r3, #28
 8007052:	d502      	bpl.n	800705a <_puts_r+0x36>
 8007054:	6923      	ldr	r3, [r4, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d11f      	bne.n	800709a <_puts_r+0x76>
 800705a:	0021      	movs	r1, r4
 800705c:	0028      	movs	r0, r5
 800705e:	f000 f8a1 	bl	80071a4 <__swsetup_r>
 8007062:	2800      	cmp	r0, #0
 8007064:	d019      	beq.n	800709a <_puts_r+0x76>
 8007066:	2001      	movs	r0, #1
 8007068:	4240      	negs	r0, r0
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <_puts_r+0xb8>)
 800706e:	429c      	cmp	r4, r3
 8007070:	d101      	bne.n	8007076 <_puts_r+0x52>
 8007072:	68ac      	ldr	r4, [r5, #8]
 8007074:	e7eb      	b.n	800704e <_puts_r+0x2a>
 8007076:	4b1a      	ldr	r3, [pc, #104]	; (80070e0 <_puts_r+0xbc>)
 8007078:	429c      	cmp	r4, r3
 800707a:	d1e8      	bne.n	800704e <_puts_r+0x2a>
 800707c:	68ec      	ldr	r4, [r5, #12]
 800707e:	e7e6      	b.n	800704e <_puts_r+0x2a>
 8007080:	3601      	adds	r6, #1
 8007082:	60a3      	str	r3, [r4, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	da04      	bge.n	8007092 <_puts_r+0x6e>
 8007088:	69a2      	ldr	r2, [r4, #24]
 800708a:	429a      	cmp	r2, r3
 800708c:	dc16      	bgt.n	80070bc <_puts_r+0x98>
 800708e:	290a      	cmp	r1, #10
 8007090:	d014      	beq.n	80070bc <_puts_r+0x98>
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	6022      	str	r2, [r4, #0]
 8007098:	7019      	strb	r1, [r3, #0]
 800709a:	68a3      	ldr	r3, [r4, #8]
 800709c:	7831      	ldrb	r1, [r6, #0]
 800709e:	3b01      	subs	r3, #1
 80070a0:	2900      	cmp	r1, #0
 80070a2:	d1ed      	bne.n	8007080 <_puts_r+0x5c>
 80070a4:	60a3      	str	r3, [r4, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	da0f      	bge.n	80070ca <_puts_r+0xa6>
 80070aa:	0022      	movs	r2, r4
 80070ac:	310a      	adds	r1, #10
 80070ae:	0028      	movs	r0, r5
 80070b0:	f000 f822 	bl	80070f8 <__swbuf_r>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d0d6      	beq.n	8007066 <_puts_r+0x42>
 80070b8:	200a      	movs	r0, #10
 80070ba:	e7d6      	b.n	800706a <_puts_r+0x46>
 80070bc:	0022      	movs	r2, r4
 80070be:	0028      	movs	r0, r5
 80070c0:	f000 f81a 	bl	80070f8 <__swbuf_r>
 80070c4:	1c43      	adds	r3, r0, #1
 80070c6:	d1e8      	bne.n	800709a <_puts_r+0x76>
 80070c8:	e7cd      	b.n	8007066 <_puts_r+0x42>
 80070ca:	200a      	movs	r0, #10
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	1c5a      	adds	r2, r3, #1
 80070d0:	6022      	str	r2, [r4, #0]
 80070d2:	7018      	strb	r0, [r3, #0]
 80070d4:	e7c9      	b.n	800706a <_puts_r+0x46>
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	08008f64 	.word	0x08008f64
 80070dc:	08008f84 	.word	0x08008f84
 80070e0:	08008f44 	.word	0x08008f44

080070e4 <puts>:
 80070e4:	b510      	push	{r4, lr}
 80070e6:	4b03      	ldr	r3, [pc, #12]	; (80070f4 <puts+0x10>)
 80070e8:	0001      	movs	r1, r0
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	f7ff ff9a 	bl	8007024 <_puts_r>
 80070f0:	bd10      	pop	{r4, pc}
 80070f2:	46c0      	nop			; (mov r8, r8)
 80070f4:	20000004 	.word	0x20000004

080070f8 <__swbuf_r>:
 80070f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fa:	0005      	movs	r5, r0
 80070fc:	000e      	movs	r6, r1
 80070fe:	0014      	movs	r4, r2
 8007100:	2800      	cmp	r0, #0
 8007102:	d004      	beq.n	800710e <__swbuf_r+0x16>
 8007104:	6983      	ldr	r3, [r0, #24]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <__swbuf_r+0x16>
 800710a:	f000 f9b9 	bl	8007480 <__sinit>
 800710e:	4b22      	ldr	r3, [pc, #136]	; (8007198 <__swbuf_r+0xa0>)
 8007110:	429c      	cmp	r4, r3
 8007112:	d12d      	bne.n	8007170 <__swbuf_r+0x78>
 8007114:	686c      	ldr	r4, [r5, #4]
 8007116:	69a3      	ldr	r3, [r4, #24]
 8007118:	60a3      	str	r3, [r4, #8]
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	071b      	lsls	r3, r3, #28
 800711e:	d531      	bpl.n	8007184 <__swbuf_r+0x8c>
 8007120:	6923      	ldr	r3, [r4, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d02e      	beq.n	8007184 <__swbuf_r+0x8c>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	6922      	ldr	r2, [r4, #16]
 800712a:	b2f7      	uxtb	r7, r6
 800712c:	1a98      	subs	r0, r3, r2
 800712e:	6963      	ldr	r3, [r4, #20]
 8007130:	b2f6      	uxtb	r6, r6
 8007132:	4283      	cmp	r3, r0
 8007134:	dc05      	bgt.n	8007142 <__swbuf_r+0x4a>
 8007136:	0021      	movs	r1, r4
 8007138:	0028      	movs	r0, r5
 800713a:	f000 f933 	bl	80073a4 <_fflush_r>
 800713e:	2800      	cmp	r0, #0
 8007140:	d126      	bne.n	8007190 <__swbuf_r+0x98>
 8007142:	68a3      	ldr	r3, [r4, #8]
 8007144:	3001      	adds	r0, #1
 8007146:	3b01      	subs	r3, #1
 8007148:	60a3      	str	r3, [r4, #8]
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	6022      	str	r2, [r4, #0]
 8007150:	701f      	strb	r7, [r3, #0]
 8007152:	6963      	ldr	r3, [r4, #20]
 8007154:	4283      	cmp	r3, r0
 8007156:	d004      	beq.n	8007162 <__swbuf_r+0x6a>
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	07db      	lsls	r3, r3, #31
 800715c:	d51a      	bpl.n	8007194 <__swbuf_r+0x9c>
 800715e:	2e0a      	cmp	r6, #10
 8007160:	d118      	bne.n	8007194 <__swbuf_r+0x9c>
 8007162:	0021      	movs	r1, r4
 8007164:	0028      	movs	r0, r5
 8007166:	f000 f91d 	bl	80073a4 <_fflush_r>
 800716a:	2800      	cmp	r0, #0
 800716c:	d012      	beq.n	8007194 <__swbuf_r+0x9c>
 800716e:	e00f      	b.n	8007190 <__swbuf_r+0x98>
 8007170:	4b0a      	ldr	r3, [pc, #40]	; (800719c <__swbuf_r+0xa4>)
 8007172:	429c      	cmp	r4, r3
 8007174:	d101      	bne.n	800717a <__swbuf_r+0x82>
 8007176:	68ac      	ldr	r4, [r5, #8]
 8007178:	e7cd      	b.n	8007116 <__swbuf_r+0x1e>
 800717a:	4b09      	ldr	r3, [pc, #36]	; (80071a0 <__swbuf_r+0xa8>)
 800717c:	429c      	cmp	r4, r3
 800717e:	d1ca      	bne.n	8007116 <__swbuf_r+0x1e>
 8007180:	68ec      	ldr	r4, [r5, #12]
 8007182:	e7c8      	b.n	8007116 <__swbuf_r+0x1e>
 8007184:	0021      	movs	r1, r4
 8007186:	0028      	movs	r0, r5
 8007188:	f000 f80c 	bl	80071a4 <__swsetup_r>
 800718c:	2800      	cmp	r0, #0
 800718e:	d0ca      	beq.n	8007126 <__swbuf_r+0x2e>
 8007190:	2601      	movs	r6, #1
 8007192:	4276      	negs	r6, r6
 8007194:	0030      	movs	r0, r6
 8007196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007198:	08008f64 	.word	0x08008f64
 800719c:	08008f84 	.word	0x08008f84
 80071a0:	08008f44 	.word	0x08008f44

080071a4 <__swsetup_r>:
 80071a4:	4b36      	ldr	r3, [pc, #216]	; (8007280 <__swsetup_r+0xdc>)
 80071a6:	b570      	push	{r4, r5, r6, lr}
 80071a8:	681d      	ldr	r5, [r3, #0]
 80071aa:	0006      	movs	r6, r0
 80071ac:	000c      	movs	r4, r1
 80071ae:	2d00      	cmp	r5, #0
 80071b0:	d005      	beq.n	80071be <__swsetup_r+0x1a>
 80071b2:	69ab      	ldr	r3, [r5, #24]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <__swsetup_r+0x1a>
 80071b8:	0028      	movs	r0, r5
 80071ba:	f000 f961 	bl	8007480 <__sinit>
 80071be:	4b31      	ldr	r3, [pc, #196]	; (8007284 <__swsetup_r+0xe0>)
 80071c0:	429c      	cmp	r4, r3
 80071c2:	d10f      	bne.n	80071e4 <__swsetup_r+0x40>
 80071c4:	686c      	ldr	r4, [r5, #4]
 80071c6:	230c      	movs	r3, #12
 80071c8:	5ee2      	ldrsh	r2, [r4, r3]
 80071ca:	b293      	uxth	r3, r2
 80071cc:	0719      	lsls	r1, r3, #28
 80071ce:	d42d      	bmi.n	800722c <__swsetup_r+0x88>
 80071d0:	06d9      	lsls	r1, r3, #27
 80071d2:	d411      	bmi.n	80071f8 <__swsetup_r+0x54>
 80071d4:	2309      	movs	r3, #9
 80071d6:	2001      	movs	r0, #1
 80071d8:	6033      	str	r3, [r6, #0]
 80071da:	3337      	adds	r3, #55	; 0x37
 80071dc:	4313      	orrs	r3, r2
 80071de:	81a3      	strh	r3, [r4, #12]
 80071e0:	4240      	negs	r0, r0
 80071e2:	bd70      	pop	{r4, r5, r6, pc}
 80071e4:	4b28      	ldr	r3, [pc, #160]	; (8007288 <__swsetup_r+0xe4>)
 80071e6:	429c      	cmp	r4, r3
 80071e8:	d101      	bne.n	80071ee <__swsetup_r+0x4a>
 80071ea:	68ac      	ldr	r4, [r5, #8]
 80071ec:	e7eb      	b.n	80071c6 <__swsetup_r+0x22>
 80071ee:	4b27      	ldr	r3, [pc, #156]	; (800728c <__swsetup_r+0xe8>)
 80071f0:	429c      	cmp	r4, r3
 80071f2:	d1e8      	bne.n	80071c6 <__swsetup_r+0x22>
 80071f4:	68ec      	ldr	r4, [r5, #12]
 80071f6:	e7e6      	b.n	80071c6 <__swsetup_r+0x22>
 80071f8:	075b      	lsls	r3, r3, #29
 80071fa:	d513      	bpl.n	8007224 <__swsetup_r+0x80>
 80071fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071fe:	2900      	cmp	r1, #0
 8007200:	d008      	beq.n	8007214 <__swsetup_r+0x70>
 8007202:	0023      	movs	r3, r4
 8007204:	3344      	adds	r3, #68	; 0x44
 8007206:	4299      	cmp	r1, r3
 8007208:	d002      	beq.n	8007210 <__swsetup_r+0x6c>
 800720a:	0030      	movs	r0, r6
 800720c:	f000 fa38 	bl	8007680 <_free_r>
 8007210:	2300      	movs	r3, #0
 8007212:	6363      	str	r3, [r4, #52]	; 0x34
 8007214:	2224      	movs	r2, #36	; 0x24
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	4393      	bics	r3, r2
 800721a:	81a3      	strh	r3, [r4, #12]
 800721c:	2300      	movs	r3, #0
 800721e:	6063      	str	r3, [r4, #4]
 8007220:	6923      	ldr	r3, [r4, #16]
 8007222:	6023      	str	r3, [r4, #0]
 8007224:	2308      	movs	r3, #8
 8007226:	89a2      	ldrh	r2, [r4, #12]
 8007228:	4313      	orrs	r3, r2
 800722a:	81a3      	strh	r3, [r4, #12]
 800722c:	6923      	ldr	r3, [r4, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10b      	bne.n	800724a <__swsetup_r+0xa6>
 8007232:	21a0      	movs	r1, #160	; 0xa0
 8007234:	2280      	movs	r2, #128	; 0x80
 8007236:	89a3      	ldrh	r3, [r4, #12]
 8007238:	0089      	lsls	r1, r1, #2
 800723a:	0092      	lsls	r2, r2, #2
 800723c:	400b      	ands	r3, r1
 800723e:	4293      	cmp	r3, r2
 8007240:	d003      	beq.n	800724a <__swsetup_r+0xa6>
 8007242:	0021      	movs	r1, r4
 8007244:	0030      	movs	r0, r6
 8007246:	f000 f9d7 	bl	80075f8 <__smakebuf_r>
 800724a:	2301      	movs	r3, #1
 800724c:	89a2      	ldrh	r2, [r4, #12]
 800724e:	4013      	ands	r3, r2
 8007250:	d011      	beq.n	8007276 <__swsetup_r+0xd2>
 8007252:	2300      	movs	r3, #0
 8007254:	60a3      	str	r3, [r4, #8]
 8007256:	6963      	ldr	r3, [r4, #20]
 8007258:	425b      	negs	r3, r3
 800725a:	61a3      	str	r3, [r4, #24]
 800725c:	2000      	movs	r0, #0
 800725e:	6923      	ldr	r3, [r4, #16]
 8007260:	4283      	cmp	r3, r0
 8007262:	d1be      	bne.n	80071e2 <__swsetup_r+0x3e>
 8007264:	230c      	movs	r3, #12
 8007266:	5ee2      	ldrsh	r2, [r4, r3]
 8007268:	0613      	lsls	r3, r2, #24
 800726a:	d5ba      	bpl.n	80071e2 <__swsetup_r+0x3e>
 800726c:	2340      	movs	r3, #64	; 0x40
 800726e:	4313      	orrs	r3, r2
 8007270:	81a3      	strh	r3, [r4, #12]
 8007272:	3801      	subs	r0, #1
 8007274:	e7b5      	b.n	80071e2 <__swsetup_r+0x3e>
 8007276:	0792      	lsls	r2, r2, #30
 8007278:	d400      	bmi.n	800727c <__swsetup_r+0xd8>
 800727a:	6963      	ldr	r3, [r4, #20]
 800727c:	60a3      	str	r3, [r4, #8]
 800727e:	e7ed      	b.n	800725c <__swsetup_r+0xb8>
 8007280:	20000004 	.word	0x20000004
 8007284:	08008f64 	.word	0x08008f64
 8007288:	08008f84 	.word	0x08008f84
 800728c:	08008f44 	.word	0x08008f44

08007290 <__sflush_r>:
 8007290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007292:	898a      	ldrh	r2, [r1, #12]
 8007294:	0005      	movs	r5, r0
 8007296:	000c      	movs	r4, r1
 8007298:	0713      	lsls	r3, r2, #28
 800729a:	d460      	bmi.n	800735e <__sflush_r+0xce>
 800729c:	684b      	ldr	r3, [r1, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	dc04      	bgt.n	80072ac <__sflush_r+0x1c>
 80072a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	dc01      	bgt.n	80072ac <__sflush_r+0x1c>
 80072a8:	2000      	movs	r0, #0
 80072aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80072ac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80072ae:	2f00      	cmp	r7, #0
 80072b0:	d0fa      	beq.n	80072a8 <__sflush_r+0x18>
 80072b2:	2300      	movs	r3, #0
 80072b4:	682e      	ldr	r6, [r5, #0]
 80072b6:	602b      	str	r3, [r5, #0]
 80072b8:	2380      	movs	r3, #128	; 0x80
 80072ba:	015b      	lsls	r3, r3, #5
 80072bc:	6a21      	ldr	r1, [r4, #32]
 80072be:	401a      	ands	r2, r3
 80072c0:	d034      	beq.n	800732c <__sflush_r+0x9c>
 80072c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	075b      	lsls	r3, r3, #29
 80072c8:	d506      	bpl.n	80072d8 <__sflush_r+0x48>
 80072ca:	6863      	ldr	r3, [r4, #4]
 80072cc:	1ac0      	subs	r0, r0, r3
 80072ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d001      	beq.n	80072d8 <__sflush_r+0x48>
 80072d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072d6:	1ac0      	subs	r0, r0, r3
 80072d8:	0002      	movs	r2, r0
 80072da:	6a21      	ldr	r1, [r4, #32]
 80072dc:	2300      	movs	r3, #0
 80072de:	0028      	movs	r0, r5
 80072e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80072e2:	47b8      	blx	r7
 80072e4:	89a1      	ldrh	r1, [r4, #12]
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d106      	bne.n	80072f8 <__sflush_r+0x68>
 80072ea:	682b      	ldr	r3, [r5, #0]
 80072ec:	2b1d      	cmp	r3, #29
 80072ee:	d830      	bhi.n	8007352 <__sflush_r+0xc2>
 80072f0:	4a2b      	ldr	r2, [pc, #172]	; (80073a0 <__sflush_r+0x110>)
 80072f2:	40da      	lsrs	r2, r3
 80072f4:	07d3      	lsls	r3, r2, #31
 80072f6:	d52c      	bpl.n	8007352 <__sflush_r+0xc2>
 80072f8:	2300      	movs	r3, #0
 80072fa:	6063      	str	r3, [r4, #4]
 80072fc:	6923      	ldr	r3, [r4, #16]
 80072fe:	6023      	str	r3, [r4, #0]
 8007300:	04cb      	lsls	r3, r1, #19
 8007302:	d505      	bpl.n	8007310 <__sflush_r+0x80>
 8007304:	1c43      	adds	r3, r0, #1
 8007306:	d102      	bne.n	800730e <__sflush_r+0x7e>
 8007308:	682b      	ldr	r3, [r5, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d100      	bne.n	8007310 <__sflush_r+0x80>
 800730e:	6560      	str	r0, [r4, #84]	; 0x54
 8007310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007312:	602e      	str	r6, [r5, #0]
 8007314:	2900      	cmp	r1, #0
 8007316:	d0c7      	beq.n	80072a8 <__sflush_r+0x18>
 8007318:	0023      	movs	r3, r4
 800731a:	3344      	adds	r3, #68	; 0x44
 800731c:	4299      	cmp	r1, r3
 800731e:	d002      	beq.n	8007326 <__sflush_r+0x96>
 8007320:	0028      	movs	r0, r5
 8007322:	f000 f9ad 	bl	8007680 <_free_r>
 8007326:	2000      	movs	r0, #0
 8007328:	6360      	str	r0, [r4, #52]	; 0x34
 800732a:	e7be      	b.n	80072aa <__sflush_r+0x1a>
 800732c:	2301      	movs	r3, #1
 800732e:	0028      	movs	r0, r5
 8007330:	47b8      	blx	r7
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	d1c6      	bne.n	80072c4 <__sflush_r+0x34>
 8007336:	682b      	ldr	r3, [r5, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0c3      	beq.n	80072c4 <__sflush_r+0x34>
 800733c:	2b1d      	cmp	r3, #29
 800733e:	d001      	beq.n	8007344 <__sflush_r+0xb4>
 8007340:	2b16      	cmp	r3, #22
 8007342:	d101      	bne.n	8007348 <__sflush_r+0xb8>
 8007344:	602e      	str	r6, [r5, #0]
 8007346:	e7af      	b.n	80072a8 <__sflush_r+0x18>
 8007348:	2340      	movs	r3, #64	; 0x40
 800734a:	89a2      	ldrh	r2, [r4, #12]
 800734c:	4313      	orrs	r3, r2
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	e7ab      	b.n	80072aa <__sflush_r+0x1a>
 8007352:	2340      	movs	r3, #64	; 0x40
 8007354:	430b      	orrs	r3, r1
 8007356:	2001      	movs	r0, #1
 8007358:	81a3      	strh	r3, [r4, #12]
 800735a:	4240      	negs	r0, r0
 800735c:	e7a5      	b.n	80072aa <__sflush_r+0x1a>
 800735e:	690f      	ldr	r7, [r1, #16]
 8007360:	2f00      	cmp	r7, #0
 8007362:	d0a1      	beq.n	80072a8 <__sflush_r+0x18>
 8007364:	680b      	ldr	r3, [r1, #0]
 8007366:	600f      	str	r7, [r1, #0]
 8007368:	1bdb      	subs	r3, r3, r7
 800736a:	9301      	str	r3, [sp, #4]
 800736c:	2300      	movs	r3, #0
 800736e:	0792      	lsls	r2, r2, #30
 8007370:	d100      	bne.n	8007374 <__sflush_r+0xe4>
 8007372:	694b      	ldr	r3, [r1, #20]
 8007374:	60a3      	str	r3, [r4, #8]
 8007376:	9b01      	ldr	r3, [sp, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	dc00      	bgt.n	800737e <__sflush_r+0xee>
 800737c:	e794      	b.n	80072a8 <__sflush_r+0x18>
 800737e:	9b01      	ldr	r3, [sp, #4]
 8007380:	003a      	movs	r2, r7
 8007382:	6a21      	ldr	r1, [r4, #32]
 8007384:	0028      	movs	r0, r5
 8007386:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007388:	47b0      	blx	r6
 800738a:	2800      	cmp	r0, #0
 800738c:	dc03      	bgt.n	8007396 <__sflush_r+0x106>
 800738e:	2340      	movs	r3, #64	; 0x40
 8007390:	89a2      	ldrh	r2, [r4, #12]
 8007392:	4313      	orrs	r3, r2
 8007394:	e7df      	b.n	8007356 <__sflush_r+0xc6>
 8007396:	9b01      	ldr	r3, [sp, #4]
 8007398:	183f      	adds	r7, r7, r0
 800739a:	1a1b      	subs	r3, r3, r0
 800739c:	9301      	str	r3, [sp, #4]
 800739e:	e7ea      	b.n	8007376 <__sflush_r+0xe6>
 80073a0:	20400001 	.word	0x20400001

080073a4 <_fflush_r>:
 80073a4:	690b      	ldr	r3, [r1, #16]
 80073a6:	b570      	push	{r4, r5, r6, lr}
 80073a8:	0005      	movs	r5, r0
 80073aa:	000c      	movs	r4, r1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <_fflush_r+0x10>
 80073b0:	2000      	movs	r0, #0
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d004      	beq.n	80073c2 <_fflush_r+0x1e>
 80073b8:	6983      	ldr	r3, [r0, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <_fflush_r+0x1e>
 80073be:	f000 f85f 	bl	8007480 <__sinit>
 80073c2:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <_fflush_r+0x4c>)
 80073c4:	429c      	cmp	r4, r3
 80073c6:	d109      	bne.n	80073dc <_fflush_r+0x38>
 80073c8:	686c      	ldr	r4, [r5, #4]
 80073ca:	220c      	movs	r2, #12
 80073cc:	5ea3      	ldrsh	r3, [r4, r2]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0ee      	beq.n	80073b0 <_fflush_r+0xc>
 80073d2:	0021      	movs	r1, r4
 80073d4:	0028      	movs	r0, r5
 80073d6:	f7ff ff5b 	bl	8007290 <__sflush_r>
 80073da:	e7ea      	b.n	80073b2 <_fflush_r+0xe>
 80073dc:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <_fflush_r+0x50>)
 80073de:	429c      	cmp	r4, r3
 80073e0:	d101      	bne.n	80073e6 <_fflush_r+0x42>
 80073e2:	68ac      	ldr	r4, [r5, #8]
 80073e4:	e7f1      	b.n	80073ca <_fflush_r+0x26>
 80073e6:	4b04      	ldr	r3, [pc, #16]	; (80073f8 <_fflush_r+0x54>)
 80073e8:	429c      	cmp	r4, r3
 80073ea:	d1ee      	bne.n	80073ca <_fflush_r+0x26>
 80073ec:	68ec      	ldr	r4, [r5, #12]
 80073ee:	e7ec      	b.n	80073ca <_fflush_r+0x26>
 80073f0:	08008f64 	.word	0x08008f64
 80073f4:	08008f84 	.word	0x08008f84
 80073f8:	08008f44 	.word	0x08008f44

080073fc <std>:
 80073fc:	2300      	movs	r3, #0
 80073fe:	b510      	push	{r4, lr}
 8007400:	0004      	movs	r4, r0
 8007402:	6003      	str	r3, [r0, #0]
 8007404:	6043      	str	r3, [r0, #4]
 8007406:	6083      	str	r3, [r0, #8]
 8007408:	8181      	strh	r1, [r0, #12]
 800740a:	6643      	str	r3, [r0, #100]	; 0x64
 800740c:	81c2      	strh	r2, [r0, #14]
 800740e:	6103      	str	r3, [r0, #16]
 8007410:	6143      	str	r3, [r0, #20]
 8007412:	6183      	str	r3, [r0, #24]
 8007414:	0019      	movs	r1, r3
 8007416:	2208      	movs	r2, #8
 8007418:	305c      	adds	r0, #92	; 0x5c
 800741a:	f7ff fdfa 	bl	8007012 <memset>
 800741e:	4b05      	ldr	r3, [pc, #20]	; (8007434 <std+0x38>)
 8007420:	6224      	str	r4, [r4, #32]
 8007422:	6263      	str	r3, [r4, #36]	; 0x24
 8007424:	4b04      	ldr	r3, [pc, #16]	; (8007438 <std+0x3c>)
 8007426:	62a3      	str	r3, [r4, #40]	; 0x28
 8007428:	4b04      	ldr	r3, [pc, #16]	; (800743c <std+0x40>)
 800742a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800742c:	4b04      	ldr	r3, [pc, #16]	; (8007440 <std+0x44>)
 800742e:	6323      	str	r3, [r4, #48]	; 0x30
 8007430:	bd10      	pop	{r4, pc}
 8007432:	46c0      	nop			; (mov r8, r8)
 8007434:	080077f5 	.word	0x080077f5
 8007438:	0800781d 	.word	0x0800781d
 800743c:	08007855 	.word	0x08007855
 8007440:	08007881 	.word	0x08007881

08007444 <_cleanup_r>:
 8007444:	b510      	push	{r4, lr}
 8007446:	4902      	ldr	r1, [pc, #8]	; (8007450 <_cleanup_r+0xc>)
 8007448:	f000 f88c 	bl	8007564 <_fwalk_reent>
 800744c:	bd10      	pop	{r4, pc}
 800744e:	46c0      	nop			; (mov r8, r8)
 8007450:	080073a5 	.word	0x080073a5

08007454 <__sfmoreglue>:
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	2568      	movs	r5, #104	; 0x68
 8007458:	1e4a      	subs	r2, r1, #1
 800745a:	4355      	muls	r5, r2
 800745c:	000e      	movs	r6, r1
 800745e:	0029      	movs	r1, r5
 8007460:	3174      	adds	r1, #116	; 0x74
 8007462:	f000 f957 	bl	8007714 <_malloc_r>
 8007466:	1e04      	subs	r4, r0, #0
 8007468:	d008      	beq.n	800747c <__sfmoreglue+0x28>
 800746a:	2100      	movs	r1, #0
 800746c:	002a      	movs	r2, r5
 800746e:	6001      	str	r1, [r0, #0]
 8007470:	6046      	str	r6, [r0, #4]
 8007472:	300c      	adds	r0, #12
 8007474:	60a0      	str	r0, [r4, #8]
 8007476:	3268      	adds	r2, #104	; 0x68
 8007478:	f7ff fdcb 	bl	8007012 <memset>
 800747c:	0020      	movs	r0, r4
 800747e:	bd70      	pop	{r4, r5, r6, pc}

08007480 <__sinit>:
 8007480:	6983      	ldr	r3, [r0, #24]
 8007482:	b513      	push	{r0, r1, r4, lr}
 8007484:	0004      	movs	r4, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d128      	bne.n	80074dc <__sinit+0x5c>
 800748a:	6483      	str	r3, [r0, #72]	; 0x48
 800748c:	64c3      	str	r3, [r0, #76]	; 0x4c
 800748e:	6503      	str	r3, [r0, #80]	; 0x50
 8007490:	4b13      	ldr	r3, [pc, #76]	; (80074e0 <__sinit+0x60>)
 8007492:	4a14      	ldr	r2, [pc, #80]	; (80074e4 <__sinit+0x64>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6282      	str	r2, [r0, #40]	; 0x28
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	4298      	cmp	r0, r3
 800749c:	d101      	bne.n	80074a2 <__sinit+0x22>
 800749e:	2301      	movs	r3, #1
 80074a0:	6183      	str	r3, [r0, #24]
 80074a2:	0020      	movs	r0, r4
 80074a4:	f000 f820 	bl	80074e8 <__sfp>
 80074a8:	6060      	str	r0, [r4, #4]
 80074aa:	0020      	movs	r0, r4
 80074ac:	f000 f81c 	bl	80074e8 <__sfp>
 80074b0:	60a0      	str	r0, [r4, #8]
 80074b2:	0020      	movs	r0, r4
 80074b4:	f000 f818 	bl	80074e8 <__sfp>
 80074b8:	2200      	movs	r2, #0
 80074ba:	60e0      	str	r0, [r4, #12]
 80074bc:	2104      	movs	r1, #4
 80074be:	6860      	ldr	r0, [r4, #4]
 80074c0:	f7ff ff9c 	bl	80073fc <std>
 80074c4:	2201      	movs	r2, #1
 80074c6:	2109      	movs	r1, #9
 80074c8:	68a0      	ldr	r0, [r4, #8]
 80074ca:	f7ff ff97 	bl	80073fc <std>
 80074ce:	2202      	movs	r2, #2
 80074d0:	2112      	movs	r1, #18
 80074d2:	68e0      	ldr	r0, [r4, #12]
 80074d4:	f7ff ff92 	bl	80073fc <std>
 80074d8:	2301      	movs	r3, #1
 80074da:	61a3      	str	r3, [r4, #24]
 80074dc:	bd13      	pop	{r0, r1, r4, pc}
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	08008f40 	.word	0x08008f40
 80074e4:	08007445 	.word	0x08007445

080074e8 <__sfp>:
 80074e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ea:	4b1c      	ldr	r3, [pc, #112]	; (800755c <__sfp+0x74>)
 80074ec:	0007      	movs	r7, r0
 80074ee:	681e      	ldr	r6, [r3, #0]
 80074f0:	69b3      	ldr	r3, [r6, #24]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d102      	bne.n	80074fc <__sfp+0x14>
 80074f6:	0030      	movs	r0, r6
 80074f8:	f7ff ffc2 	bl	8007480 <__sinit>
 80074fc:	3648      	adds	r6, #72	; 0x48
 80074fe:	68b4      	ldr	r4, [r6, #8]
 8007500:	6873      	ldr	r3, [r6, #4]
 8007502:	3b01      	subs	r3, #1
 8007504:	d504      	bpl.n	8007510 <__sfp+0x28>
 8007506:	6833      	ldr	r3, [r6, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d007      	beq.n	800751c <__sfp+0x34>
 800750c:	6836      	ldr	r6, [r6, #0]
 800750e:	e7f6      	b.n	80074fe <__sfp+0x16>
 8007510:	220c      	movs	r2, #12
 8007512:	5ea5      	ldrsh	r5, [r4, r2]
 8007514:	2d00      	cmp	r5, #0
 8007516:	d00d      	beq.n	8007534 <__sfp+0x4c>
 8007518:	3468      	adds	r4, #104	; 0x68
 800751a:	e7f2      	b.n	8007502 <__sfp+0x1a>
 800751c:	2104      	movs	r1, #4
 800751e:	0038      	movs	r0, r7
 8007520:	f7ff ff98 	bl	8007454 <__sfmoreglue>
 8007524:	6030      	str	r0, [r6, #0]
 8007526:	2800      	cmp	r0, #0
 8007528:	d1f0      	bne.n	800750c <__sfp+0x24>
 800752a:	230c      	movs	r3, #12
 800752c:	0004      	movs	r4, r0
 800752e:	603b      	str	r3, [r7, #0]
 8007530:	0020      	movs	r0, r4
 8007532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007534:	0020      	movs	r0, r4
 8007536:	4b0a      	ldr	r3, [pc, #40]	; (8007560 <__sfp+0x78>)
 8007538:	6665      	str	r5, [r4, #100]	; 0x64
 800753a:	6025      	str	r5, [r4, #0]
 800753c:	6065      	str	r5, [r4, #4]
 800753e:	60a5      	str	r5, [r4, #8]
 8007540:	60e3      	str	r3, [r4, #12]
 8007542:	6125      	str	r5, [r4, #16]
 8007544:	6165      	str	r5, [r4, #20]
 8007546:	61a5      	str	r5, [r4, #24]
 8007548:	2208      	movs	r2, #8
 800754a:	0029      	movs	r1, r5
 800754c:	305c      	adds	r0, #92	; 0x5c
 800754e:	f7ff fd60 	bl	8007012 <memset>
 8007552:	6365      	str	r5, [r4, #52]	; 0x34
 8007554:	63a5      	str	r5, [r4, #56]	; 0x38
 8007556:	64a5      	str	r5, [r4, #72]	; 0x48
 8007558:	64e5      	str	r5, [r4, #76]	; 0x4c
 800755a:	e7e9      	b.n	8007530 <__sfp+0x48>
 800755c:	08008f40 	.word	0x08008f40
 8007560:	ffff0001 	.word	0xffff0001

08007564 <_fwalk_reent>:
 8007564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007566:	0004      	movs	r4, r0
 8007568:	0007      	movs	r7, r0
 800756a:	2600      	movs	r6, #0
 800756c:	9101      	str	r1, [sp, #4]
 800756e:	3448      	adds	r4, #72	; 0x48
 8007570:	2c00      	cmp	r4, #0
 8007572:	d101      	bne.n	8007578 <_fwalk_reent+0x14>
 8007574:	0030      	movs	r0, r6
 8007576:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007578:	6863      	ldr	r3, [r4, #4]
 800757a:	68a5      	ldr	r5, [r4, #8]
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	9b00      	ldr	r3, [sp, #0]
 8007580:	3b01      	subs	r3, #1
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	d501      	bpl.n	800758a <_fwalk_reent+0x26>
 8007586:	6824      	ldr	r4, [r4, #0]
 8007588:	e7f2      	b.n	8007570 <_fwalk_reent+0xc>
 800758a:	89ab      	ldrh	r3, [r5, #12]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d908      	bls.n	80075a2 <_fwalk_reent+0x3e>
 8007590:	220e      	movs	r2, #14
 8007592:	5eab      	ldrsh	r3, [r5, r2]
 8007594:	3301      	adds	r3, #1
 8007596:	d004      	beq.n	80075a2 <_fwalk_reent+0x3e>
 8007598:	0029      	movs	r1, r5
 800759a:	0038      	movs	r0, r7
 800759c:	9b01      	ldr	r3, [sp, #4]
 800759e:	4798      	blx	r3
 80075a0:	4306      	orrs	r6, r0
 80075a2:	3568      	adds	r5, #104	; 0x68
 80075a4:	e7eb      	b.n	800757e <_fwalk_reent+0x1a>
	...

080075a8 <__swhatbuf_r>:
 80075a8:	b570      	push	{r4, r5, r6, lr}
 80075aa:	000e      	movs	r6, r1
 80075ac:	001d      	movs	r5, r3
 80075ae:	230e      	movs	r3, #14
 80075b0:	5ec9      	ldrsh	r1, [r1, r3]
 80075b2:	b096      	sub	sp, #88	; 0x58
 80075b4:	0014      	movs	r4, r2
 80075b6:	2900      	cmp	r1, #0
 80075b8:	da07      	bge.n	80075ca <__swhatbuf_r+0x22>
 80075ba:	2300      	movs	r3, #0
 80075bc:	602b      	str	r3, [r5, #0]
 80075be:	89b3      	ldrh	r3, [r6, #12]
 80075c0:	061b      	lsls	r3, r3, #24
 80075c2:	d411      	bmi.n	80075e8 <__swhatbuf_r+0x40>
 80075c4:	2380      	movs	r3, #128	; 0x80
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	e00f      	b.n	80075ea <__swhatbuf_r+0x42>
 80075ca:	466a      	mov	r2, sp
 80075cc:	f000 f984 	bl	80078d8 <_fstat_r>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	dbf2      	blt.n	80075ba <__swhatbuf_r+0x12>
 80075d4:	22f0      	movs	r2, #240	; 0xf0
 80075d6:	9b01      	ldr	r3, [sp, #4]
 80075d8:	0212      	lsls	r2, r2, #8
 80075da:	4013      	ands	r3, r2
 80075dc:	4a05      	ldr	r2, [pc, #20]	; (80075f4 <__swhatbuf_r+0x4c>)
 80075de:	189b      	adds	r3, r3, r2
 80075e0:	425a      	negs	r2, r3
 80075e2:	4153      	adcs	r3, r2
 80075e4:	602b      	str	r3, [r5, #0]
 80075e6:	e7ed      	b.n	80075c4 <__swhatbuf_r+0x1c>
 80075e8:	2340      	movs	r3, #64	; 0x40
 80075ea:	2000      	movs	r0, #0
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	b016      	add	sp, #88	; 0x58
 80075f0:	bd70      	pop	{r4, r5, r6, pc}
 80075f2:	46c0      	nop			; (mov r8, r8)
 80075f4:	ffffe000 	.word	0xffffe000

080075f8 <__smakebuf_r>:
 80075f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075fa:	2602      	movs	r6, #2
 80075fc:	898b      	ldrh	r3, [r1, #12]
 80075fe:	0005      	movs	r5, r0
 8007600:	000c      	movs	r4, r1
 8007602:	4233      	tst	r3, r6
 8007604:	d006      	beq.n	8007614 <__smakebuf_r+0x1c>
 8007606:	0023      	movs	r3, r4
 8007608:	3347      	adds	r3, #71	; 0x47
 800760a:	6023      	str	r3, [r4, #0]
 800760c:	6123      	str	r3, [r4, #16]
 800760e:	2301      	movs	r3, #1
 8007610:	6163      	str	r3, [r4, #20]
 8007612:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007614:	ab01      	add	r3, sp, #4
 8007616:	466a      	mov	r2, sp
 8007618:	f7ff ffc6 	bl	80075a8 <__swhatbuf_r>
 800761c:	9900      	ldr	r1, [sp, #0]
 800761e:	0007      	movs	r7, r0
 8007620:	0028      	movs	r0, r5
 8007622:	f000 f877 	bl	8007714 <_malloc_r>
 8007626:	2800      	cmp	r0, #0
 8007628:	d108      	bne.n	800763c <__smakebuf_r+0x44>
 800762a:	220c      	movs	r2, #12
 800762c:	5ea3      	ldrsh	r3, [r4, r2]
 800762e:	059a      	lsls	r2, r3, #22
 8007630:	d4ef      	bmi.n	8007612 <__smakebuf_r+0x1a>
 8007632:	2203      	movs	r2, #3
 8007634:	4393      	bics	r3, r2
 8007636:	431e      	orrs	r6, r3
 8007638:	81a6      	strh	r6, [r4, #12]
 800763a:	e7e4      	b.n	8007606 <__smakebuf_r+0xe>
 800763c:	4b0f      	ldr	r3, [pc, #60]	; (800767c <__smakebuf_r+0x84>)
 800763e:	62ab      	str	r3, [r5, #40]	; 0x28
 8007640:	2380      	movs	r3, #128	; 0x80
 8007642:	89a2      	ldrh	r2, [r4, #12]
 8007644:	6020      	str	r0, [r4, #0]
 8007646:	4313      	orrs	r3, r2
 8007648:	81a3      	strh	r3, [r4, #12]
 800764a:	9b00      	ldr	r3, [sp, #0]
 800764c:	6120      	str	r0, [r4, #16]
 800764e:	6163      	str	r3, [r4, #20]
 8007650:	9b01      	ldr	r3, [sp, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00d      	beq.n	8007672 <__smakebuf_r+0x7a>
 8007656:	230e      	movs	r3, #14
 8007658:	5ee1      	ldrsh	r1, [r4, r3]
 800765a:	0028      	movs	r0, r5
 800765c:	f000 f94e 	bl	80078fc <_isatty_r>
 8007660:	2800      	cmp	r0, #0
 8007662:	d006      	beq.n	8007672 <__smakebuf_r+0x7a>
 8007664:	2203      	movs	r2, #3
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	4393      	bics	r3, r2
 800766a:	001a      	movs	r2, r3
 800766c:	2301      	movs	r3, #1
 800766e:	4313      	orrs	r3, r2
 8007670:	81a3      	strh	r3, [r4, #12]
 8007672:	89a0      	ldrh	r0, [r4, #12]
 8007674:	4338      	orrs	r0, r7
 8007676:	81a0      	strh	r0, [r4, #12]
 8007678:	e7cb      	b.n	8007612 <__smakebuf_r+0x1a>
 800767a:	46c0      	nop			; (mov r8, r8)
 800767c:	08007445 	.word	0x08007445

08007680 <_free_r>:
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	0005      	movs	r5, r0
 8007684:	2900      	cmp	r1, #0
 8007686:	d010      	beq.n	80076aa <_free_r+0x2a>
 8007688:	1f0c      	subs	r4, r1, #4
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	da00      	bge.n	8007692 <_free_r+0x12>
 8007690:	18e4      	adds	r4, r4, r3
 8007692:	0028      	movs	r0, r5
 8007694:	f000 f958 	bl	8007948 <__malloc_lock>
 8007698:	4a1d      	ldr	r2, [pc, #116]	; (8007710 <_free_r+0x90>)
 800769a:	6813      	ldr	r3, [r2, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d105      	bne.n	80076ac <_free_r+0x2c>
 80076a0:	6063      	str	r3, [r4, #4]
 80076a2:	6014      	str	r4, [r2, #0]
 80076a4:	0028      	movs	r0, r5
 80076a6:	f000 f950 	bl	800794a <__malloc_unlock>
 80076aa:	bd70      	pop	{r4, r5, r6, pc}
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	d909      	bls.n	80076c4 <_free_r+0x44>
 80076b0:	6821      	ldr	r1, [r4, #0]
 80076b2:	1860      	adds	r0, r4, r1
 80076b4:	4283      	cmp	r3, r0
 80076b6:	d1f3      	bne.n	80076a0 <_free_r+0x20>
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	1841      	adds	r1, r0, r1
 80076be:	6021      	str	r1, [r4, #0]
 80076c0:	e7ee      	b.n	80076a0 <_free_r+0x20>
 80076c2:	0013      	movs	r3, r2
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	2a00      	cmp	r2, #0
 80076c8:	d001      	beq.n	80076ce <_free_r+0x4e>
 80076ca:	42a2      	cmp	r2, r4
 80076cc:	d9f9      	bls.n	80076c2 <_free_r+0x42>
 80076ce:	6819      	ldr	r1, [r3, #0]
 80076d0:	1858      	adds	r0, r3, r1
 80076d2:	42a0      	cmp	r0, r4
 80076d4:	d10b      	bne.n	80076ee <_free_r+0x6e>
 80076d6:	6820      	ldr	r0, [r4, #0]
 80076d8:	1809      	adds	r1, r1, r0
 80076da:	1858      	adds	r0, r3, r1
 80076dc:	6019      	str	r1, [r3, #0]
 80076de:	4282      	cmp	r2, r0
 80076e0:	d1e0      	bne.n	80076a4 <_free_r+0x24>
 80076e2:	6810      	ldr	r0, [r2, #0]
 80076e4:	6852      	ldr	r2, [r2, #4]
 80076e6:	1841      	adds	r1, r0, r1
 80076e8:	6019      	str	r1, [r3, #0]
 80076ea:	605a      	str	r2, [r3, #4]
 80076ec:	e7da      	b.n	80076a4 <_free_r+0x24>
 80076ee:	42a0      	cmp	r0, r4
 80076f0:	d902      	bls.n	80076f8 <_free_r+0x78>
 80076f2:	230c      	movs	r3, #12
 80076f4:	602b      	str	r3, [r5, #0]
 80076f6:	e7d5      	b.n	80076a4 <_free_r+0x24>
 80076f8:	6821      	ldr	r1, [r4, #0]
 80076fa:	1860      	adds	r0, r4, r1
 80076fc:	4282      	cmp	r2, r0
 80076fe:	d103      	bne.n	8007708 <_free_r+0x88>
 8007700:	6810      	ldr	r0, [r2, #0]
 8007702:	6852      	ldr	r2, [r2, #4]
 8007704:	1841      	adds	r1, r0, r1
 8007706:	6021      	str	r1, [r4, #0]
 8007708:	6062      	str	r2, [r4, #4]
 800770a:	605c      	str	r4, [r3, #4]
 800770c:	e7ca      	b.n	80076a4 <_free_r+0x24>
 800770e:	46c0      	nop			; (mov r8, r8)
 8007710:	200000b0 	.word	0x200000b0

08007714 <_malloc_r>:
 8007714:	2303      	movs	r3, #3
 8007716:	b570      	push	{r4, r5, r6, lr}
 8007718:	1ccd      	adds	r5, r1, #3
 800771a:	439d      	bics	r5, r3
 800771c:	3508      	adds	r5, #8
 800771e:	0006      	movs	r6, r0
 8007720:	2d0c      	cmp	r5, #12
 8007722:	d21e      	bcs.n	8007762 <_malloc_r+0x4e>
 8007724:	250c      	movs	r5, #12
 8007726:	42a9      	cmp	r1, r5
 8007728:	d81d      	bhi.n	8007766 <_malloc_r+0x52>
 800772a:	0030      	movs	r0, r6
 800772c:	f000 f90c 	bl	8007948 <__malloc_lock>
 8007730:	4a25      	ldr	r2, [pc, #148]	; (80077c8 <_malloc_r+0xb4>)
 8007732:	6814      	ldr	r4, [r2, #0]
 8007734:	0021      	movs	r1, r4
 8007736:	2900      	cmp	r1, #0
 8007738:	d119      	bne.n	800776e <_malloc_r+0x5a>
 800773a:	4c24      	ldr	r4, [pc, #144]	; (80077cc <_malloc_r+0xb8>)
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d103      	bne.n	800774a <_malloc_r+0x36>
 8007742:	0030      	movs	r0, r6
 8007744:	f000 f844 	bl	80077d0 <_sbrk_r>
 8007748:	6020      	str	r0, [r4, #0]
 800774a:	0029      	movs	r1, r5
 800774c:	0030      	movs	r0, r6
 800774e:	f000 f83f 	bl	80077d0 <_sbrk_r>
 8007752:	1c43      	adds	r3, r0, #1
 8007754:	d12b      	bne.n	80077ae <_malloc_r+0x9a>
 8007756:	230c      	movs	r3, #12
 8007758:	0030      	movs	r0, r6
 800775a:	6033      	str	r3, [r6, #0]
 800775c:	f000 f8f5 	bl	800794a <__malloc_unlock>
 8007760:	e003      	b.n	800776a <_malloc_r+0x56>
 8007762:	2d00      	cmp	r5, #0
 8007764:	dadf      	bge.n	8007726 <_malloc_r+0x12>
 8007766:	230c      	movs	r3, #12
 8007768:	6033      	str	r3, [r6, #0]
 800776a:	2000      	movs	r0, #0
 800776c:	bd70      	pop	{r4, r5, r6, pc}
 800776e:	680b      	ldr	r3, [r1, #0]
 8007770:	1b5b      	subs	r3, r3, r5
 8007772:	d419      	bmi.n	80077a8 <_malloc_r+0x94>
 8007774:	2b0b      	cmp	r3, #11
 8007776:	d903      	bls.n	8007780 <_malloc_r+0x6c>
 8007778:	600b      	str	r3, [r1, #0]
 800777a:	18cc      	adds	r4, r1, r3
 800777c:	6025      	str	r5, [r4, #0]
 800777e:	e003      	b.n	8007788 <_malloc_r+0x74>
 8007780:	684b      	ldr	r3, [r1, #4]
 8007782:	428c      	cmp	r4, r1
 8007784:	d10d      	bne.n	80077a2 <_malloc_r+0x8e>
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	0030      	movs	r0, r6
 800778a:	f000 f8de 	bl	800794a <__malloc_unlock>
 800778e:	0020      	movs	r0, r4
 8007790:	2207      	movs	r2, #7
 8007792:	300b      	adds	r0, #11
 8007794:	1d23      	adds	r3, r4, #4
 8007796:	4390      	bics	r0, r2
 8007798:	1ac3      	subs	r3, r0, r3
 800779a:	d0e7      	beq.n	800776c <_malloc_r+0x58>
 800779c:	425a      	negs	r2, r3
 800779e:	50e2      	str	r2, [r4, r3]
 80077a0:	e7e4      	b.n	800776c <_malloc_r+0x58>
 80077a2:	6063      	str	r3, [r4, #4]
 80077a4:	000c      	movs	r4, r1
 80077a6:	e7ef      	b.n	8007788 <_malloc_r+0x74>
 80077a8:	000c      	movs	r4, r1
 80077aa:	6849      	ldr	r1, [r1, #4]
 80077ac:	e7c3      	b.n	8007736 <_malloc_r+0x22>
 80077ae:	2303      	movs	r3, #3
 80077b0:	1cc4      	adds	r4, r0, #3
 80077b2:	439c      	bics	r4, r3
 80077b4:	42a0      	cmp	r0, r4
 80077b6:	d0e1      	beq.n	800777c <_malloc_r+0x68>
 80077b8:	1a21      	subs	r1, r4, r0
 80077ba:	0030      	movs	r0, r6
 80077bc:	f000 f808 	bl	80077d0 <_sbrk_r>
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	d1db      	bne.n	800777c <_malloc_r+0x68>
 80077c4:	e7c7      	b.n	8007756 <_malloc_r+0x42>
 80077c6:	46c0      	nop			; (mov r8, r8)
 80077c8:	200000b0 	.word	0x200000b0
 80077cc:	200000b4 	.word	0x200000b4

080077d0 <_sbrk_r>:
 80077d0:	2300      	movs	r3, #0
 80077d2:	b570      	push	{r4, r5, r6, lr}
 80077d4:	4c06      	ldr	r4, [pc, #24]	; (80077f0 <_sbrk_r+0x20>)
 80077d6:	0005      	movs	r5, r0
 80077d8:	0008      	movs	r0, r1
 80077da:	6023      	str	r3, [r4, #0]
 80077dc:	f7fd f980 	bl	8004ae0 <_sbrk>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	d103      	bne.n	80077ec <_sbrk_r+0x1c>
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d000      	beq.n	80077ec <_sbrk_r+0x1c>
 80077ea:	602b      	str	r3, [r5, #0]
 80077ec:	bd70      	pop	{r4, r5, r6, pc}
 80077ee:	46c0      	nop			; (mov r8, r8)
 80077f0:	200003bc 	.word	0x200003bc

080077f4 <__sread>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	000c      	movs	r4, r1
 80077f8:	250e      	movs	r5, #14
 80077fa:	5f49      	ldrsh	r1, [r1, r5]
 80077fc:	f000 f8a6 	bl	800794c <_read_r>
 8007800:	2800      	cmp	r0, #0
 8007802:	db03      	blt.n	800780c <__sread+0x18>
 8007804:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007806:	181b      	adds	r3, r3, r0
 8007808:	6563      	str	r3, [r4, #84]	; 0x54
 800780a:	bd70      	pop	{r4, r5, r6, pc}
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	4a02      	ldr	r2, [pc, #8]	; (8007818 <__sread+0x24>)
 8007810:	4013      	ands	r3, r2
 8007812:	81a3      	strh	r3, [r4, #12]
 8007814:	e7f9      	b.n	800780a <__sread+0x16>
 8007816:	46c0      	nop			; (mov r8, r8)
 8007818:	ffffefff 	.word	0xffffefff

0800781c <__swrite>:
 800781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781e:	001f      	movs	r7, r3
 8007820:	898b      	ldrh	r3, [r1, #12]
 8007822:	0005      	movs	r5, r0
 8007824:	000c      	movs	r4, r1
 8007826:	0016      	movs	r6, r2
 8007828:	05db      	lsls	r3, r3, #23
 800782a:	d505      	bpl.n	8007838 <__swrite+0x1c>
 800782c:	230e      	movs	r3, #14
 800782e:	5ec9      	ldrsh	r1, [r1, r3]
 8007830:	2200      	movs	r2, #0
 8007832:	2302      	movs	r3, #2
 8007834:	f000 f874 	bl	8007920 <_lseek_r>
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	4a05      	ldr	r2, [pc, #20]	; (8007850 <__swrite+0x34>)
 800783c:	0028      	movs	r0, r5
 800783e:	4013      	ands	r3, r2
 8007840:	81a3      	strh	r3, [r4, #12]
 8007842:	0032      	movs	r2, r6
 8007844:	230e      	movs	r3, #14
 8007846:	5ee1      	ldrsh	r1, [r4, r3]
 8007848:	003b      	movs	r3, r7
 800784a:	f000 f81f 	bl	800788c <_write_r>
 800784e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007850:	ffffefff 	.word	0xffffefff

08007854 <__sseek>:
 8007854:	b570      	push	{r4, r5, r6, lr}
 8007856:	000c      	movs	r4, r1
 8007858:	250e      	movs	r5, #14
 800785a:	5f49      	ldrsh	r1, [r1, r5]
 800785c:	f000 f860 	bl	8007920 <_lseek_r>
 8007860:	89a3      	ldrh	r3, [r4, #12]
 8007862:	1c42      	adds	r2, r0, #1
 8007864:	d103      	bne.n	800786e <__sseek+0x1a>
 8007866:	4a05      	ldr	r2, [pc, #20]	; (800787c <__sseek+0x28>)
 8007868:	4013      	ands	r3, r2
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	bd70      	pop	{r4, r5, r6, pc}
 800786e:	2280      	movs	r2, #128	; 0x80
 8007870:	0152      	lsls	r2, r2, #5
 8007872:	4313      	orrs	r3, r2
 8007874:	81a3      	strh	r3, [r4, #12]
 8007876:	6560      	str	r0, [r4, #84]	; 0x54
 8007878:	e7f8      	b.n	800786c <__sseek+0x18>
 800787a:	46c0      	nop			; (mov r8, r8)
 800787c:	ffffefff 	.word	0xffffefff

08007880 <__sclose>:
 8007880:	b510      	push	{r4, lr}
 8007882:	230e      	movs	r3, #14
 8007884:	5ec9      	ldrsh	r1, [r1, r3]
 8007886:	f000 f815 	bl	80078b4 <_close_r>
 800788a:	bd10      	pop	{r4, pc}

0800788c <_write_r>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	0005      	movs	r5, r0
 8007890:	0008      	movs	r0, r1
 8007892:	0011      	movs	r1, r2
 8007894:	2200      	movs	r2, #0
 8007896:	4c06      	ldr	r4, [pc, #24]	; (80078b0 <_write_r+0x24>)
 8007898:	6022      	str	r2, [r4, #0]
 800789a:	001a      	movs	r2, r3
 800789c:	f7fd f8d7 	bl	8004a4e <_write>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	d103      	bne.n	80078ac <_write_r+0x20>
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d000      	beq.n	80078ac <_write_r+0x20>
 80078aa:	602b      	str	r3, [r5, #0]
 80078ac:	bd70      	pop	{r4, r5, r6, pc}
 80078ae:	46c0      	nop			; (mov r8, r8)
 80078b0:	200003bc 	.word	0x200003bc

080078b4 <_close_r>:
 80078b4:	2300      	movs	r3, #0
 80078b6:	b570      	push	{r4, r5, r6, lr}
 80078b8:	4c06      	ldr	r4, [pc, #24]	; (80078d4 <_close_r+0x20>)
 80078ba:	0005      	movs	r5, r0
 80078bc:	0008      	movs	r0, r1
 80078be:	6023      	str	r3, [r4, #0]
 80078c0:	f7fd f8e1 	bl	8004a86 <_close>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d103      	bne.n	80078d0 <_close_r+0x1c>
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d000      	beq.n	80078d0 <_close_r+0x1c>
 80078ce:	602b      	str	r3, [r5, #0]
 80078d0:	bd70      	pop	{r4, r5, r6, pc}
 80078d2:	46c0      	nop			; (mov r8, r8)
 80078d4:	200003bc 	.word	0x200003bc

080078d8 <_fstat_r>:
 80078d8:	2300      	movs	r3, #0
 80078da:	b570      	push	{r4, r5, r6, lr}
 80078dc:	4c06      	ldr	r4, [pc, #24]	; (80078f8 <_fstat_r+0x20>)
 80078de:	0005      	movs	r5, r0
 80078e0:	0008      	movs	r0, r1
 80078e2:	0011      	movs	r1, r2
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	f7fd f8d8 	bl	8004a9a <_fstat>
 80078ea:	1c43      	adds	r3, r0, #1
 80078ec:	d103      	bne.n	80078f6 <_fstat_r+0x1e>
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d000      	beq.n	80078f6 <_fstat_r+0x1e>
 80078f4:	602b      	str	r3, [r5, #0]
 80078f6:	bd70      	pop	{r4, r5, r6, pc}
 80078f8:	200003bc 	.word	0x200003bc

080078fc <_isatty_r>:
 80078fc:	2300      	movs	r3, #0
 80078fe:	b570      	push	{r4, r5, r6, lr}
 8007900:	4c06      	ldr	r4, [pc, #24]	; (800791c <_isatty_r+0x20>)
 8007902:	0005      	movs	r5, r0
 8007904:	0008      	movs	r0, r1
 8007906:	6023      	str	r3, [r4, #0]
 8007908:	f7fd f8d5 	bl	8004ab6 <_isatty>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d103      	bne.n	8007918 <_isatty_r+0x1c>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d000      	beq.n	8007918 <_isatty_r+0x1c>
 8007916:	602b      	str	r3, [r5, #0]
 8007918:	bd70      	pop	{r4, r5, r6, pc}
 800791a:	46c0      	nop			; (mov r8, r8)
 800791c:	200003bc 	.word	0x200003bc

08007920 <_lseek_r>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	0005      	movs	r5, r0
 8007924:	0008      	movs	r0, r1
 8007926:	0011      	movs	r1, r2
 8007928:	2200      	movs	r2, #0
 800792a:	4c06      	ldr	r4, [pc, #24]	; (8007944 <_lseek_r+0x24>)
 800792c:	6022      	str	r2, [r4, #0]
 800792e:	001a      	movs	r2, r3
 8007930:	f7fd f8ca 	bl	8004ac8 <_lseek>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d103      	bne.n	8007940 <_lseek_r+0x20>
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d000      	beq.n	8007940 <_lseek_r+0x20>
 800793e:	602b      	str	r3, [r5, #0]
 8007940:	bd70      	pop	{r4, r5, r6, pc}
 8007942:	46c0      	nop			; (mov r8, r8)
 8007944:	200003bc 	.word	0x200003bc

08007948 <__malloc_lock>:
 8007948:	4770      	bx	lr

0800794a <__malloc_unlock>:
 800794a:	4770      	bx	lr

0800794c <_read_r>:
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	0005      	movs	r5, r0
 8007950:	0008      	movs	r0, r1
 8007952:	0011      	movs	r1, r2
 8007954:	2200      	movs	r2, #0
 8007956:	4c06      	ldr	r4, [pc, #24]	; (8007970 <_read_r+0x24>)
 8007958:	6022      	str	r2, [r4, #0]
 800795a:	001a      	movs	r2, r3
 800795c:	f7fd f85a 	bl	8004a14 <_read>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d103      	bne.n	800796c <_read_r+0x20>
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d000      	beq.n	800796c <_read_r+0x20>
 800796a:	602b      	str	r3, [r5, #0]
 800796c:	bd70      	pop	{r4, r5, r6, pc}
 800796e:	46c0      	nop			; (mov r8, r8)
 8007970:	200003bc 	.word	0x200003bc

08007974 <cos>:
 8007974:	b530      	push	{r4, r5, lr}
 8007976:	4a1e      	ldr	r2, [pc, #120]	; (80079f0 <cos+0x7c>)
 8007978:	004b      	lsls	r3, r1, #1
 800797a:	b087      	sub	sp, #28
 800797c:	085b      	lsrs	r3, r3, #1
 800797e:	4293      	cmp	r3, r2
 8007980:	dc04      	bgt.n	800798c <cos+0x18>
 8007982:	2200      	movs	r2, #0
 8007984:	2300      	movs	r3, #0
 8007986:	f000 fc23 	bl	80081d0 <__kernel_cos>
 800798a:	e006      	b.n	800799a <cos+0x26>
 800798c:	4a19      	ldr	r2, [pc, #100]	; (80079f4 <cos+0x80>)
 800798e:	4293      	cmp	r3, r2
 8007990:	dd05      	ble.n	800799e <cos+0x2a>
 8007992:	0002      	movs	r2, r0
 8007994:	000b      	movs	r3, r1
 8007996:	f7fa fd19 	bl	80023cc <__aeabi_dsub>
 800799a:	b007      	add	sp, #28
 800799c:	bd30      	pop	{r4, r5, pc}
 800799e:	aa02      	add	r2, sp, #8
 80079a0:	f000 fa2e 	bl	8007e00 <__ieee754_rem_pio2>
 80079a4:	9c04      	ldr	r4, [sp, #16]
 80079a6:	9d05      	ldr	r5, [sp, #20]
 80079a8:	2303      	movs	r3, #3
 80079aa:	4003      	ands	r3, r0
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d008      	beq.n	80079c2 <cos+0x4e>
 80079b0:	9802      	ldr	r0, [sp, #8]
 80079b2:	9903      	ldr	r1, [sp, #12]
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d00f      	beq.n	80079d8 <cos+0x64>
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d112      	bne.n	80079e2 <cos+0x6e>
 80079bc:	0022      	movs	r2, r4
 80079be:	002b      	movs	r3, r5
 80079c0:	e7e1      	b.n	8007986 <cos+0x12>
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	0022      	movs	r2, r4
 80079c6:	9802      	ldr	r0, [sp, #8]
 80079c8:	9903      	ldr	r1, [sp, #12]
 80079ca:	002b      	movs	r3, r5
 80079cc:	f001 f828 	bl	8008a20 <__kernel_sin>
 80079d0:	2380      	movs	r3, #128	; 0x80
 80079d2:	061b      	lsls	r3, r3, #24
 80079d4:	18c9      	adds	r1, r1, r3
 80079d6:	e7e0      	b.n	800799a <cos+0x26>
 80079d8:	0022      	movs	r2, r4
 80079da:	002b      	movs	r3, r5
 80079dc:	f000 fbf8 	bl	80081d0 <__kernel_cos>
 80079e0:	e7f6      	b.n	80079d0 <cos+0x5c>
 80079e2:	2301      	movs	r3, #1
 80079e4:	0022      	movs	r2, r4
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	002b      	movs	r3, r5
 80079ea:	f001 f819 	bl	8008a20 <__kernel_sin>
 80079ee:	e7d4      	b.n	800799a <cos+0x26>
 80079f0:	3fe921fb 	.word	0x3fe921fb
 80079f4:	7fefffff 	.word	0x7fefffff

080079f8 <fmax>:
 80079f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fa:	0004      	movs	r4, r0
 80079fc:	000d      	movs	r5, r1
 80079fe:	0016      	movs	r6, r2
 8007a00:	001f      	movs	r7, r3
 8007a02:	f000 f815 	bl	8007a30 <__fpclassifyd>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d00d      	beq.n	8007a26 <fmax+0x2e>
 8007a0a:	0030      	movs	r0, r6
 8007a0c:	0039      	movs	r1, r7
 8007a0e:	f000 f80f 	bl	8007a30 <__fpclassifyd>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d009      	beq.n	8007a2a <fmax+0x32>
 8007a16:	0032      	movs	r2, r6
 8007a18:	003b      	movs	r3, r7
 8007a1a:	0020      	movs	r0, r4
 8007a1c:	0029      	movs	r1, r5
 8007a1e:	f7f8 fd1d 	bl	800045c <__aeabi_dcmpgt>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	d101      	bne.n	8007a2a <fmax+0x32>
 8007a26:	0034      	movs	r4, r6
 8007a28:	003d      	movs	r5, r7
 8007a2a:	0029      	movs	r1, r5
 8007a2c:	0020      	movs	r0, r4
 8007a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a30 <__fpclassifyd>:
 8007a30:	b530      	push	{r4, r5, lr}
 8007a32:	0005      	movs	r5, r0
 8007a34:	2302      	movs	r3, #2
 8007a36:	430d      	orrs	r5, r1
 8007a38:	d018      	beq.n	8007a6c <__fpclassifyd+0x3c>
 8007a3a:	2380      	movs	r3, #128	; 0x80
 8007a3c:	061b      	lsls	r3, r3, #24
 8007a3e:	4299      	cmp	r1, r3
 8007a40:	d102      	bne.n	8007a48 <__fpclassifyd+0x18>
 8007a42:	2302      	movs	r3, #2
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d011      	beq.n	8007a6c <__fpclassifyd+0x3c>
 8007a48:	4b09      	ldr	r3, [pc, #36]	; (8007a70 <__fpclassifyd+0x40>)
 8007a4a:	0049      	lsls	r1, r1, #1
 8007a4c:	0849      	lsrs	r1, r1, #1
 8007a4e:	4a09      	ldr	r2, [pc, #36]	; (8007a74 <__fpclassifyd+0x44>)
 8007a50:	18cc      	adds	r4, r1, r3
 8007a52:	2304      	movs	r3, #4
 8007a54:	4294      	cmp	r4, r2
 8007a56:	d909      	bls.n	8007a6c <__fpclassifyd+0x3c>
 8007a58:	4a07      	ldr	r2, [pc, #28]	; (8007a78 <__fpclassifyd+0x48>)
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	4291      	cmp	r1, r2
 8007a5e:	d905      	bls.n	8007a6c <__fpclassifyd+0x3c>
 8007a60:	4a06      	ldr	r2, [pc, #24]	; (8007a7c <__fpclassifyd+0x4c>)
 8007a62:	2300      	movs	r3, #0
 8007a64:	4291      	cmp	r1, r2
 8007a66:	d101      	bne.n	8007a6c <__fpclassifyd+0x3c>
 8007a68:	4243      	negs	r3, r0
 8007a6a:	4143      	adcs	r3, r0
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	bd30      	pop	{r4, r5, pc}
 8007a70:	fff00000 	.word	0xfff00000
 8007a74:	7fdfffff 	.word	0x7fdfffff
 8007a78:	000fffff 	.word	0x000fffff
 8007a7c:	7ff00000 	.word	0x7ff00000

08007a80 <sin>:
 8007a80:	b530      	push	{r4, r5, lr}
 8007a82:	4a20      	ldr	r2, [pc, #128]	; (8007b04 <sin+0x84>)
 8007a84:	004b      	lsls	r3, r1, #1
 8007a86:	b087      	sub	sp, #28
 8007a88:	085b      	lsrs	r3, r3, #1
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	dc06      	bgt.n	8007a9c <sin+0x1c>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2200      	movs	r2, #0
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	2300      	movs	r3, #0
 8007a96:	f000 ffc3 	bl	8008a20 <__kernel_sin>
 8007a9a:	e006      	b.n	8007aaa <sin+0x2a>
 8007a9c:	4a1a      	ldr	r2, [pc, #104]	; (8007b08 <sin+0x88>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	dd05      	ble.n	8007aae <sin+0x2e>
 8007aa2:	0002      	movs	r2, r0
 8007aa4:	000b      	movs	r3, r1
 8007aa6:	f7fa fc91 	bl	80023cc <__aeabi_dsub>
 8007aaa:	b007      	add	sp, #28
 8007aac:	bd30      	pop	{r4, r5, pc}
 8007aae:	aa02      	add	r2, sp, #8
 8007ab0:	f000 f9a6 	bl	8007e00 <__ieee754_rem_pio2>
 8007ab4:	9c04      	ldr	r4, [sp, #16]
 8007ab6:	9d05      	ldr	r5, [sp, #20]
 8007ab8:	2303      	movs	r3, #3
 8007aba:	4003      	ands	r3, r0
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d00a      	beq.n	8007ad6 <sin+0x56>
 8007ac0:	9802      	ldr	r0, [sp, #8]
 8007ac2:	9903      	ldr	r1, [sp, #12]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d00d      	beq.n	8007ae4 <sin+0x64>
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d115      	bne.n	8007af8 <sin+0x78>
 8007acc:	3301      	adds	r3, #1
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	0022      	movs	r2, r4
 8007ad2:	002b      	movs	r3, r5
 8007ad4:	e7df      	b.n	8007a96 <sin+0x16>
 8007ad6:	0022      	movs	r2, r4
 8007ad8:	9802      	ldr	r0, [sp, #8]
 8007ada:	9903      	ldr	r1, [sp, #12]
 8007adc:	002b      	movs	r3, r5
 8007ade:	f000 fb77 	bl	80081d0 <__kernel_cos>
 8007ae2:	e7e2      	b.n	8007aaa <sin+0x2a>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	0022      	movs	r2, r4
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	002b      	movs	r3, r5
 8007aec:	f000 ff98 	bl	8008a20 <__kernel_sin>
 8007af0:	2380      	movs	r3, #128	; 0x80
 8007af2:	061b      	lsls	r3, r3, #24
 8007af4:	18c9      	adds	r1, r1, r3
 8007af6:	e7d8      	b.n	8007aaa <sin+0x2a>
 8007af8:	0022      	movs	r2, r4
 8007afa:	002b      	movs	r3, r5
 8007afc:	f000 fb68 	bl	80081d0 <__kernel_cos>
 8007b00:	e7f6      	b.n	8007af0 <sin+0x70>
 8007b02:	46c0      	nop			; (mov r8, r8)
 8007b04:	3fe921fb 	.word	0x3fe921fb
 8007b08:	7fefffff 	.word	0x7fefffff

08007b0c <fmod>:
 8007b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b0e:	b08f      	sub	sp, #60	; 0x3c
 8007b10:	001d      	movs	r5, r3
 8007b12:	0006      	movs	r6, r0
 8007b14:	000f      	movs	r7, r1
 8007b16:	0014      	movs	r4, r2
 8007b18:	f000 f85a 	bl	8007bd0 <__ieee754_fmod>
 8007b1c:	4b2a      	ldr	r3, [pc, #168]	; (8007bc8 <fmod+0xbc>)
 8007b1e:	9000      	str	r0, [sp, #0]
 8007b20:	9101      	str	r1, [sp, #4]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	b25b      	sxtb	r3, r3
 8007b26:	9302      	str	r3, [sp, #8]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	d039      	beq.n	8007ba0 <fmod+0x94>
 8007b2c:	0022      	movs	r2, r4
 8007b2e:	002b      	movs	r3, r5
 8007b30:	0020      	movs	r0, r4
 8007b32:	0029      	movs	r1, r5
 8007b34:	f7fa ff92 	bl	8002a5c <__aeabi_dcmpun>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d131      	bne.n	8007ba0 <fmod+0x94>
 8007b3c:	0032      	movs	r2, r6
 8007b3e:	003b      	movs	r3, r7
 8007b40:	0030      	movs	r0, r6
 8007b42:	0039      	movs	r1, r7
 8007b44:	f7fa ff8a 	bl	8002a5c <__aeabi_dcmpun>
 8007b48:	9003      	str	r0, [sp, #12]
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d128      	bne.n	8007ba0 <fmod+0x94>
 8007b4e:	2200      	movs	r2, #0
 8007b50:	2300      	movs	r3, #0
 8007b52:	0020      	movs	r0, r4
 8007b54:	0029      	movs	r1, r5
 8007b56:	f7f8 fc67 	bl	8000428 <__aeabi_dcmpeq>
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	d020      	beq.n	8007ba0 <fmod+0x94>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	9304      	str	r3, [sp, #16]
 8007b62:	4b1a      	ldr	r3, [pc, #104]	; (8007bcc <fmod+0xc0>)
 8007b64:	9606      	str	r6, [sp, #24]
 8007b66:	9707      	str	r7, [sp, #28]
 8007b68:	9305      	str	r3, [sp, #20]
 8007b6a:	9b03      	ldr	r3, [sp, #12]
 8007b6c:	9408      	str	r4, [sp, #32]
 8007b6e:	9509      	str	r5, [sp, #36]	; 0x24
 8007b70:	930c      	str	r3, [sp, #48]	; 0x30
 8007b72:	9b02      	ldr	r3, [sp, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d117      	bne.n	8007ba8 <fmod+0x9c>
 8007b78:	960a      	str	r6, [sp, #40]	; 0x28
 8007b7a:	970b      	str	r7, [sp, #44]	; 0x2c
 8007b7c:	a804      	add	r0, sp, #16
 8007b7e:	f001 f883 	bl	8008c88 <matherr>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d01b      	beq.n	8007bbe <fmod+0xb2>
 8007b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b88:	9302      	str	r3, [sp, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d004      	beq.n	8007b98 <fmod+0x8c>
 8007b8e:	f7ff fa0d 	bl	8006fac <__errno>
 8007b92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b94:	9302      	str	r3, [sp, #8]
 8007b96:	6003      	str	r3, [r0, #0]
 8007b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b9a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	9401      	str	r4, [sp, #4]
 8007ba0:	9800      	ldr	r0, [sp, #0]
 8007ba2:	9901      	ldr	r1, [sp, #4]
 8007ba4:	b00f      	add	sp, #60	; 0x3c
 8007ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ba8:	2300      	movs	r3, #0
 8007baa:	2200      	movs	r2, #0
 8007bac:	0019      	movs	r1, r3
 8007bae:	0010      	movs	r0, r2
 8007bb0:	f7f9 fd90 	bl	80016d4 <__aeabi_ddiv>
 8007bb4:	9b02      	ldr	r3, [sp, #8]
 8007bb6:	900a      	str	r0, [sp, #40]	; 0x28
 8007bb8:	910b      	str	r1, [sp, #44]	; 0x2c
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d1de      	bne.n	8007b7c <fmod+0x70>
 8007bbe:	f7ff f9f5 	bl	8006fac <__errno>
 8007bc2:	2321      	movs	r3, #33	; 0x21
 8007bc4:	6003      	str	r3, [r0, #0]
 8007bc6:	e7de      	b.n	8007b86 <fmod+0x7a>
 8007bc8:	20000068 	.word	0x20000068
 8007bcc:	08008fa4 	.word	0x08008fa4

08007bd0 <__ieee754_fmod>:
 8007bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bd2:	b087      	sub	sp, #28
 8007bd4:	9304      	str	r3, [sp, #16]
 8007bd6:	005b      	lsls	r3, r3, #1
 8007bd8:	085b      	lsrs	r3, r3, #1
 8007bda:	001c      	movs	r4, r3
 8007bdc:	9001      	str	r0, [sp, #4]
 8007bde:	0016      	movs	r6, r2
 8007be0:	9203      	str	r2, [sp, #12]
 8007be2:	4314      	orrs	r4, r2
 8007be4:	d00c      	beq.n	8007c00 <__ieee754_fmod+0x30>
 8007be6:	4d7b      	ldr	r5, [pc, #492]	; (8007dd4 <__ieee754_fmod+0x204>)
 8007be8:	004c      	lsls	r4, r1, #1
 8007bea:	9105      	str	r1, [sp, #20]
 8007bec:	0864      	lsrs	r4, r4, #1
 8007bee:	42ac      	cmp	r4, r5
 8007bf0:	dc06      	bgt.n	8007c00 <__ieee754_fmod+0x30>
 8007bf2:	4255      	negs	r5, r2
 8007bf4:	4315      	orrs	r5, r2
 8007bf6:	4f78      	ldr	r7, [pc, #480]	; (8007dd8 <__ieee754_fmod+0x208>)
 8007bf8:	0fed      	lsrs	r5, r5, #31
 8007bfa:	431d      	orrs	r5, r3
 8007bfc:	42bd      	cmp	r5, r7
 8007bfe:	d90b      	bls.n	8007c18 <__ieee754_fmod+0x48>
 8007c00:	9d04      	ldr	r5, [sp, #16]
 8007c02:	9c01      	ldr	r4, [sp, #4]
 8007c04:	002b      	movs	r3, r5
 8007c06:	0020      	movs	r0, r4
 8007c08:	f7fa f96e 	bl	8001ee8 <__aeabi_dmul>
 8007c0c:	0002      	movs	r2, r0
 8007c0e:	000b      	movs	r3, r1
 8007c10:	f7f9 fd60 	bl	80016d4 <__aeabi_ddiv>
 8007c14:	9001      	str	r0, [sp, #4]
 8007c16:	e013      	b.n	8007c40 <__ieee754_fmod+0x70>
 8007c18:	9801      	ldr	r0, [sp, #4]
 8007c1a:	0fcd      	lsrs	r5, r1, #31
 8007c1c:	4684      	mov	ip, r0
 8007c1e:	0007      	movs	r7, r0
 8007c20:	07e8      	lsls	r0, r5, #31
 8007c22:	9002      	str	r0, [sp, #8]
 8007c24:	429c      	cmp	r4, r3
 8007c26:	dc0f      	bgt.n	8007c48 <__ieee754_fmod+0x78>
 8007c28:	db0a      	blt.n	8007c40 <__ieee754_fmod+0x70>
 8007c2a:	4594      	cmp	ip, r2
 8007c2c:	d308      	bcc.n	8007c40 <__ieee754_fmod+0x70>
 8007c2e:	d10b      	bne.n	8007c48 <__ieee754_fmod+0x78>
 8007c30:	0003      	movs	r3, r0
 8007c32:	0fdb      	lsrs	r3, r3, #31
 8007c34:	4a69      	ldr	r2, [pc, #420]	; (8007ddc <__ieee754_fmod+0x20c>)
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	18d2      	adds	r2, r2, r3
 8007c3a:	6813      	ldr	r3, [r2, #0]
 8007c3c:	6851      	ldr	r1, [r2, #4]
 8007c3e:	9301      	str	r3, [sp, #4]
 8007c40:	9a01      	ldr	r2, [sp, #4]
 8007c42:	0010      	movs	r0, r2
 8007c44:	b007      	add	sp, #28
 8007c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c48:	4965      	ldr	r1, [pc, #404]	; (8007de0 <__ieee754_fmod+0x210>)
 8007c4a:	428c      	cmp	r4, r1
 8007c4c:	dc4b      	bgt.n	8007ce6 <__ieee754_fmod+0x116>
 8007c4e:	2c00      	cmp	r4, #0
 8007c50:	d142      	bne.n	8007cd8 <__ieee754_fmod+0x108>
 8007c52:	4661      	mov	r1, ip
 8007c54:	4863      	ldr	r0, [pc, #396]	; (8007de4 <__ieee754_fmod+0x214>)
 8007c56:	2900      	cmp	r1, #0
 8007c58:	dc3b      	bgt.n	8007cd2 <__ieee754_fmod+0x102>
 8007c5a:	4961      	ldr	r1, [pc, #388]	; (8007de0 <__ieee754_fmod+0x210>)
 8007c5c:	428b      	cmp	r3, r1
 8007c5e:	dc50      	bgt.n	8007d02 <__ieee754_fmod+0x132>
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d147      	bne.n	8007cf4 <__ieee754_fmod+0x124>
 8007c64:	495f      	ldr	r1, [pc, #380]	; (8007de4 <__ieee754_fmod+0x214>)
 8007c66:	2e00      	cmp	r6, #0
 8007c68:	dc41      	bgt.n	8007cee <__ieee754_fmod+0x11e>
 8007c6a:	4d5f      	ldr	r5, [pc, #380]	; (8007de8 <__ieee754_fmod+0x218>)
 8007c6c:	42a8      	cmp	r0, r5
 8007c6e:	db4c      	blt.n	8007d0a <__ieee754_fmod+0x13a>
 8007c70:	9c05      	ldr	r4, [sp, #20]
 8007c72:	0325      	lsls	r5, r4, #12
 8007c74:	2480      	movs	r4, #128	; 0x80
 8007c76:	0b2d      	lsrs	r5, r5, #12
 8007c78:	0364      	lsls	r4, r4, #13
 8007c7a:	4325      	orrs	r5, r4
 8007c7c:	4c5a      	ldr	r4, [pc, #360]	; (8007de8 <__ieee754_fmod+0x218>)
 8007c7e:	42a1      	cmp	r1, r4
 8007c80:	db58      	blt.n	8007d34 <__ieee754_fmod+0x164>
 8007c82:	2280      	movs	r2, #128	; 0x80
 8007c84:	9b04      	ldr	r3, [sp, #16]
 8007c86:	0352      	lsls	r2, r2, #13
 8007c88:	031b      	lsls	r3, r3, #12
 8007c8a:	0b1b      	lsrs	r3, r3, #12
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	1a40      	subs	r0, r0, r1
 8007c90:	9c03      	ldr	r4, [sp, #12]
 8007c92:	1aea      	subs	r2, r5, r3
 8007c94:	1b3c      	subs	r4, r7, r4
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d164      	bne.n	8007d64 <__ieee754_fmod+0x194>
 8007c9a:	9b03      	ldr	r3, [sp, #12]
 8007c9c:	429f      	cmp	r7, r3
 8007c9e:	419b      	sbcs	r3, r3
 8007ca0:	425b      	negs	r3, r3
 8007ca2:	1ad2      	subs	r2, r2, r3
 8007ca4:	d501      	bpl.n	8007caa <__ieee754_fmod+0xda>
 8007ca6:	003c      	movs	r4, r7
 8007ca8:	002a      	movs	r2, r5
 8007caa:	0013      	movs	r3, r2
 8007cac:	4323      	orrs	r3, r4
 8007cae:	d068      	beq.n	8007d82 <__ieee754_fmod+0x1b2>
 8007cb0:	4b4b      	ldr	r3, [pc, #300]	; (8007de0 <__ieee754_fmod+0x210>)
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	dd6c      	ble.n	8007d90 <__ieee754_fmod+0x1c0>
 8007cb6:	4b4c      	ldr	r3, [pc, #304]	; (8007de8 <__ieee754_fmod+0x218>)
 8007cb8:	4299      	cmp	r1, r3
 8007cba:	db6f      	blt.n	8007d9c <__ieee754_fmod+0x1cc>
 8007cbc:	4b4b      	ldr	r3, [pc, #300]	; (8007dec <__ieee754_fmod+0x21c>)
 8007cbe:	18cb      	adds	r3, r1, r3
 8007cc0:	494b      	ldr	r1, [pc, #300]	; (8007df0 <__ieee754_fmod+0x220>)
 8007cc2:	051b      	lsls	r3, r3, #20
 8007cc4:	1852      	adds	r2, r2, r1
 8007cc6:	9902      	ldr	r1, [sp, #8]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	0019      	movs	r1, r3
 8007cce:	0020      	movs	r0, r4
 8007cd0:	e7a0      	b.n	8007c14 <__ieee754_fmod+0x44>
 8007cd2:	3801      	subs	r0, #1
 8007cd4:	0049      	lsls	r1, r1, #1
 8007cd6:	e7be      	b.n	8007c56 <__ieee754_fmod+0x86>
 8007cd8:	4843      	ldr	r0, [pc, #268]	; (8007de8 <__ieee754_fmod+0x218>)
 8007cda:	02e1      	lsls	r1, r4, #11
 8007cdc:	3801      	subs	r0, #1
 8007cde:	0049      	lsls	r1, r1, #1
 8007ce0:	2900      	cmp	r1, #0
 8007ce2:	dcfb      	bgt.n	8007cdc <__ieee754_fmod+0x10c>
 8007ce4:	e7b9      	b.n	8007c5a <__ieee754_fmod+0x8a>
 8007ce6:	4943      	ldr	r1, [pc, #268]	; (8007df4 <__ieee754_fmod+0x224>)
 8007ce8:	1520      	asrs	r0, r4, #20
 8007cea:	1840      	adds	r0, r0, r1
 8007cec:	e7b5      	b.n	8007c5a <__ieee754_fmod+0x8a>
 8007cee:	3901      	subs	r1, #1
 8007cf0:	0076      	lsls	r6, r6, #1
 8007cf2:	e7b8      	b.n	8007c66 <__ieee754_fmod+0x96>
 8007cf4:	493c      	ldr	r1, [pc, #240]	; (8007de8 <__ieee754_fmod+0x218>)
 8007cf6:	02dd      	lsls	r5, r3, #11
 8007cf8:	3901      	subs	r1, #1
 8007cfa:	006d      	lsls	r5, r5, #1
 8007cfc:	2d00      	cmp	r5, #0
 8007cfe:	dcfb      	bgt.n	8007cf8 <__ieee754_fmod+0x128>
 8007d00:	e7b3      	b.n	8007c6a <__ieee754_fmod+0x9a>
 8007d02:	4d3c      	ldr	r5, [pc, #240]	; (8007df4 <__ieee754_fmod+0x224>)
 8007d04:	1519      	asrs	r1, r3, #20
 8007d06:	1949      	adds	r1, r1, r5
 8007d08:	e7af      	b.n	8007c6a <__ieee754_fmod+0x9a>
 8007d0a:	4d37      	ldr	r5, [pc, #220]	; (8007de8 <__ieee754_fmod+0x218>)
 8007d0c:	1a2f      	subs	r7, r5, r0
 8007d0e:	2f1f      	cmp	r7, #31
 8007d10:	dc0a      	bgt.n	8007d28 <__ieee754_fmod+0x158>
 8007d12:	4666      	mov	r6, ip
 8007d14:	4d38      	ldr	r5, [pc, #224]	; (8007df8 <__ieee754_fmod+0x228>)
 8007d16:	40bc      	lsls	r4, r7
 8007d18:	1945      	adds	r5, r0, r5
 8007d1a:	40ee      	lsrs	r6, r5
 8007d1c:	0035      	movs	r5, r6
 8007d1e:	4325      	orrs	r5, r4
 8007d20:	4664      	mov	r4, ip
 8007d22:	40bc      	lsls	r4, r7
 8007d24:	0027      	movs	r7, r4
 8007d26:	e7a9      	b.n	8007c7c <__ieee754_fmod+0xac>
 8007d28:	4665      	mov	r5, ip
 8007d2a:	4c34      	ldr	r4, [pc, #208]	; (8007dfc <__ieee754_fmod+0x22c>)
 8007d2c:	2700      	movs	r7, #0
 8007d2e:	1a24      	subs	r4, r4, r0
 8007d30:	40a5      	lsls	r5, r4
 8007d32:	e7a3      	b.n	8007c7c <__ieee754_fmod+0xac>
 8007d34:	4c2c      	ldr	r4, [pc, #176]	; (8007de8 <__ieee754_fmod+0x218>)
 8007d36:	1a64      	subs	r4, r4, r1
 8007d38:	9401      	str	r4, [sp, #4]
 8007d3a:	2c1f      	cmp	r4, #31
 8007d3c:	dc0c      	bgt.n	8007d58 <__ieee754_fmod+0x188>
 8007d3e:	4e2e      	ldr	r6, [pc, #184]	; (8007df8 <__ieee754_fmod+0x228>)
 8007d40:	46b4      	mov	ip, r6
 8007d42:	448c      	add	ip, r1
 8007d44:	0016      	movs	r6, r2
 8007d46:	4664      	mov	r4, ip
 8007d48:	40e6      	lsrs	r6, r4
 8007d4a:	9c01      	ldr	r4, [sp, #4]
 8007d4c:	40a3      	lsls	r3, r4
 8007d4e:	9c01      	ldr	r4, [sp, #4]
 8007d50:	4333      	orrs	r3, r6
 8007d52:	40a2      	lsls	r2, r4
 8007d54:	9203      	str	r2, [sp, #12]
 8007d56:	e79a      	b.n	8007c8e <__ieee754_fmod+0xbe>
 8007d58:	4b28      	ldr	r3, [pc, #160]	; (8007dfc <__ieee754_fmod+0x22c>)
 8007d5a:	1a5b      	subs	r3, r3, r1
 8007d5c:	409a      	lsls	r2, r3
 8007d5e:	0013      	movs	r3, r2
 8007d60:	2200      	movs	r2, #0
 8007d62:	e7f7      	b.n	8007d54 <__ieee754_fmod+0x184>
 8007d64:	9e03      	ldr	r6, [sp, #12]
 8007d66:	42b7      	cmp	r7, r6
 8007d68:	41b6      	sbcs	r6, r6
 8007d6a:	4276      	negs	r6, r6
 8007d6c:	1b92      	subs	r2, r2, r6
 8007d6e:	d505      	bpl.n	8007d7c <__ieee754_fmod+0x1ac>
 8007d70:	0ffc      	lsrs	r4, r7, #31
 8007d72:	006d      	lsls	r5, r5, #1
 8007d74:	192d      	adds	r5, r5, r4
 8007d76:	007f      	lsls	r7, r7, #1
 8007d78:	3801      	subs	r0, #1
 8007d7a:	e789      	b.n	8007c90 <__ieee754_fmod+0xc0>
 8007d7c:	0015      	movs	r5, r2
 8007d7e:	4325      	orrs	r5, r4
 8007d80:	d101      	bne.n	8007d86 <__ieee754_fmod+0x1b6>
 8007d82:	9b02      	ldr	r3, [sp, #8]
 8007d84:	e755      	b.n	8007c32 <__ieee754_fmod+0x62>
 8007d86:	0052      	lsls	r2, r2, #1
 8007d88:	0fe5      	lsrs	r5, r4, #31
 8007d8a:	1955      	adds	r5, r2, r5
 8007d8c:	0067      	lsls	r7, r4, #1
 8007d8e:	e7f3      	b.n	8007d78 <__ieee754_fmod+0x1a8>
 8007d90:	0fe3      	lsrs	r3, r4, #31
 8007d92:	0052      	lsls	r2, r2, #1
 8007d94:	18d2      	adds	r2, r2, r3
 8007d96:	0064      	lsls	r4, r4, #1
 8007d98:	3901      	subs	r1, #1
 8007d9a:	e789      	b.n	8007cb0 <__ieee754_fmod+0xe0>
 8007d9c:	4b12      	ldr	r3, [pc, #72]	; (8007de8 <__ieee754_fmod+0x218>)
 8007d9e:	1a5e      	subs	r6, r3, r1
 8007da0:	2e14      	cmp	r6, #20
 8007da2:	dc09      	bgt.n	8007db8 <__ieee754_fmod+0x1e8>
 8007da4:	0023      	movs	r3, r4
 8007da6:	0014      	movs	r4, r2
 8007da8:	4813      	ldr	r0, [pc, #76]	; (8007df8 <__ieee754_fmod+0x228>)
 8007daa:	40f3      	lsrs	r3, r6
 8007dac:	1809      	adds	r1, r1, r0
 8007dae:	408c      	lsls	r4, r1
 8007db0:	4132      	asrs	r2, r6
 8007db2:	431c      	orrs	r4, r3
 8007db4:	9b02      	ldr	r3, [sp, #8]
 8007db6:	e788      	b.n	8007cca <__ieee754_fmod+0xfa>
 8007db8:	2e1f      	cmp	r6, #31
 8007dba:	dc06      	bgt.n	8007dca <__ieee754_fmod+0x1fa>
 8007dbc:	4b0e      	ldr	r3, [pc, #56]	; (8007df8 <__ieee754_fmod+0x228>)
 8007dbe:	40f4      	lsrs	r4, r6
 8007dc0:	18c9      	adds	r1, r1, r3
 8007dc2:	408a      	lsls	r2, r1
 8007dc4:	4314      	orrs	r4, r2
 8007dc6:	9a02      	ldr	r2, [sp, #8]
 8007dc8:	e7f4      	b.n	8007db4 <__ieee754_fmod+0x1e4>
 8007dca:	4b0c      	ldr	r3, [pc, #48]	; (8007dfc <__ieee754_fmod+0x22c>)
 8007dcc:	1a59      	subs	r1, r3, r1
 8007dce:	410a      	asrs	r2, r1
 8007dd0:	0014      	movs	r4, r2
 8007dd2:	e7f8      	b.n	8007dc6 <__ieee754_fmod+0x1f6>
 8007dd4:	7fefffff 	.word	0x7fefffff
 8007dd8:	7ff00000 	.word	0x7ff00000
 8007ddc:	08008fb0 	.word	0x08008fb0
 8007de0:	000fffff 	.word	0x000fffff
 8007de4:	fffffbed 	.word	0xfffffbed
 8007de8:	fffffc02 	.word	0xfffffc02
 8007dec:	000003ff 	.word	0x000003ff
 8007df0:	fff00000 	.word	0xfff00000
 8007df4:	fffffc01 	.word	0xfffffc01
 8007df8:	0000041e 	.word	0x0000041e
 8007dfc:	fffffbe2 	.word	0xfffffbe2

08007e00 <__ieee754_rem_pio2>:
 8007e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e02:	004b      	lsls	r3, r1, #1
 8007e04:	b091      	sub	sp, #68	; 0x44
 8007e06:	085b      	lsrs	r3, r3, #1
 8007e08:	9302      	str	r3, [sp, #8]
 8007e0a:	0017      	movs	r7, r2
 8007e0c:	4bb3      	ldr	r3, [pc, #716]	; (80080dc <__ieee754_rem_pio2+0x2dc>)
 8007e0e:	9a02      	ldr	r2, [sp, #8]
 8007e10:	0004      	movs	r4, r0
 8007e12:	9109      	str	r1, [sp, #36]	; 0x24
 8007e14:	429a      	cmp	r2, r3
 8007e16:	dc09      	bgt.n	8007e2c <__ieee754_rem_pio2+0x2c>
 8007e18:	0002      	movs	r2, r0
 8007e1a:	000b      	movs	r3, r1
 8007e1c:	603a      	str	r2, [r7, #0]
 8007e1e:	607b      	str	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	2300      	movs	r3, #0
 8007e24:	60ba      	str	r2, [r7, #8]
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	2600      	movs	r6, #0
 8007e2a:	e024      	b.n	8007e76 <__ieee754_rem_pio2+0x76>
 8007e2c:	4bac      	ldr	r3, [pc, #688]	; (80080e0 <__ieee754_rem_pio2+0x2e0>)
 8007e2e:	9a02      	ldr	r2, [sp, #8]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	dd00      	ble.n	8007e36 <__ieee754_rem_pio2+0x36>
 8007e34:	e06d      	b.n	8007f12 <__ieee754_rem_pio2+0x112>
 8007e36:	4aab      	ldr	r2, [pc, #684]	; (80080e4 <__ieee754_rem_pio2+0x2e4>)
 8007e38:	2900      	cmp	r1, #0
 8007e3a:	dd35      	ble.n	8007ea8 <__ieee754_rem_pio2+0xa8>
 8007e3c:	4baa      	ldr	r3, [pc, #680]	; (80080e8 <__ieee754_rem_pio2+0x2e8>)
 8007e3e:	f7fa fac5 	bl	80023cc <__aeabi_dsub>
 8007e42:	9b02      	ldr	r3, [sp, #8]
 8007e44:	0004      	movs	r4, r0
 8007e46:	001a      	movs	r2, r3
 8007e48:	4ba7      	ldr	r3, [pc, #668]	; (80080e8 <__ieee754_rem_pio2+0x2e8>)
 8007e4a:	000d      	movs	r5, r1
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d015      	beq.n	8007e7c <__ieee754_rem_pio2+0x7c>
 8007e50:	4aa6      	ldr	r2, [pc, #664]	; (80080ec <__ieee754_rem_pio2+0x2ec>)
 8007e52:	4ba7      	ldr	r3, [pc, #668]	; (80080f0 <__ieee754_rem_pio2+0x2f0>)
 8007e54:	f7fa faba 	bl	80023cc <__aeabi_dsub>
 8007e58:	0002      	movs	r2, r0
 8007e5a:	000b      	movs	r3, r1
 8007e5c:	0020      	movs	r0, r4
 8007e5e:	603a      	str	r2, [r7, #0]
 8007e60:	607b      	str	r3, [r7, #4]
 8007e62:	0029      	movs	r1, r5
 8007e64:	f7fa fab2 	bl	80023cc <__aeabi_dsub>
 8007e68:	4aa0      	ldr	r2, [pc, #640]	; (80080ec <__ieee754_rem_pio2+0x2ec>)
 8007e6a:	4ba1      	ldr	r3, [pc, #644]	; (80080f0 <__ieee754_rem_pio2+0x2f0>)
 8007e6c:	f7fa faae 	bl	80023cc <__aeabi_dsub>
 8007e70:	2601      	movs	r6, #1
 8007e72:	60b8      	str	r0, [r7, #8]
 8007e74:	60f9      	str	r1, [r7, #12]
 8007e76:	0030      	movs	r0, r6
 8007e78:	b011      	add	sp, #68	; 0x44
 8007e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e7c:	22d3      	movs	r2, #211	; 0xd3
 8007e7e:	4b9c      	ldr	r3, [pc, #624]	; (80080f0 <__ieee754_rem_pio2+0x2f0>)
 8007e80:	0552      	lsls	r2, r2, #21
 8007e82:	f7fa faa3 	bl	80023cc <__aeabi_dsub>
 8007e86:	4a9b      	ldr	r2, [pc, #620]	; (80080f4 <__ieee754_rem_pio2+0x2f4>)
 8007e88:	4b9b      	ldr	r3, [pc, #620]	; (80080f8 <__ieee754_rem_pio2+0x2f8>)
 8007e8a:	0004      	movs	r4, r0
 8007e8c:	000d      	movs	r5, r1
 8007e8e:	f7fa fa9d 	bl	80023cc <__aeabi_dsub>
 8007e92:	0002      	movs	r2, r0
 8007e94:	000b      	movs	r3, r1
 8007e96:	0020      	movs	r0, r4
 8007e98:	603a      	str	r2, [r7, #0]
 8007e9a:	607b      	str	r3, [r7, #4]
 8007e9c:	0029      	movs	r1, r5
 8007e9e:	f7fa fa95 	bl	80023cc <__aeabi_dsub>
 8007ea2:	4a94      	ldr	r2, [pc, #592]	; (80080f4 <__ieee754_rem_pio2+0x2f4>)
 8007ea4:	4b94      	ldr	r3, [pc, #592]	; (80080f8 <__ieee754_rem_pio2+0x2f8>)
 8007ea6:	e7e1      	b.n	8007e6c <__ieee754_rem_pio2+0x6c>
 8007ea8:	4b8f      	ldr	r3, [pc, #572]	; (80080e8 <__ieee754_rem_pio2+0x2e8>)
 8007eaa:	f7f9 f8f7 	bl	800109c <__aeabi_dadd>
 8007eae:	9b02      	ldr	r3, [sp, #8]
 8007eb0:	0004      	movs	r4, r0
 8007eb2:	001a      	movs	r2, r3
 8007eb4:	4b8c      	ldr	r3, [pc, #560]	; (80080e8 <__ieee754_rem_pio2+0x2e8>)
 8007eb6:	000d      	movs	r5, r1
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d014      	beq.n	8007ee6 <__ieee754_rem_pio2+0xe6>
 8007ebc:	4a8b      	ldr	r2, [pc, #556]	; (80080ec <__ieee754_rem_pio2+0x2ec>)
 8007ebe:	4b8c      	ldr	r3, [pc, #560]	; (80080f0 <__ieee754_rem_pio2+0x2f0>)
 8007ec0:	f7f9 f8ec 	bl	800109c <__aeabi_dadd>
 8007ec4:	0002      	movs	r2, r0
 8007ec6:	000b      	movs	r3, r1
 8007ec8:	0020      	movs	r0, r4
 8007eca:	603a      	str	r2, [r7, #0]
 8007ecc:	607b      	str	r3, [r7, #4]
 8007ece:	0029      	movs	r1, r5
 8007ed0:	f7fa fa7c 	bl	80023cc <__aeabi_dsub>
 8007ed4:	4a85      	ldr	r2, [pc, #532]	; (80080ec <__ieee754_rem_pio2+0x2ec>)
 8007ed6:	4b86      	ldr	r3, [pc, #536]	; (80080f0 <__ieee754_rem_pio2+0x2f0>)
 8007ed8:	f7f9 f8e0 	bl	800109c <__aeabi_dadd>
 8007edc:	2601      	movs	r6, #1
 8007ede:	60b8      	str	r0, [r7, #8]
 8007ee0:	60f9      	str	r1, [r7, #12]
 8007ee2:	4276      	negs	r6, r6
 8007ee4:	e7c7      	b.n	8007e76 <__ieee754_rem_pio2+0x76>
 8007ee6:	22d3      	movs	r2, #211	; 0xd3
 8007ee8:	4b81      	ldr	r3, [pc, #516]	; (80080f0 <__ieee754_rem_pio2+0x2f0>)
 8007eea:	0552      	lsls	r2, r2, #21
 8007eec:	f7f9 f8d6 	bl	800109c <__aeabi_dadd>
 8007ef0:	4a80      	ldr	r2, [pc, #512]	; (80080f4 <__ieee754_rem_pio2+0x2f4>)
 8007ef2:	4b81      	ldr	r3, [pc, #516]	; (80080f8 <__ieee754_rem_pio2+0x2f8>)
 8007ef4:	0004      	movs	r4, r0
 8007ef6:	000d      	movs	r5, r1
 8007ef8:	f7f9 f8d0 	bl	800109c <__aeabi_dadd>
 8007efc:	0002      	movs	r2, r0
 8007efe:	000b      	movs	r3, r1
 8007f00:	0020      	movs	r0, r4
 8007f02:	603a      	str	r2, [r7, #0]
 8007f04:	607b      	str	r3, [r7, #4]
 8007f06:	0029      	movs	r1, r5
 8007f08:	f7fa fa60 	bl	80023cc <__aeabi_dsub>
 8007f0c:	4a79      	ldr	r2, [pc, #484]	; (80080f4 <__ieee754_rem_pio2+0x2f4>)
 8007f0e:	4b7a      	ldr	r3, [pc, #488]	; (80080f8 <__ieee754_rem_pio2+0x2f8>)
 8007f10:	e7e2      	b.n	8007ed8 <__ieee754_rem_pio2+0xd8>
 8007f12:	4b7a      	ldr	r3, [pc, #488]	; (80080fc <__ieee754_rem_pio2+0x2fc>)
 8007f14:	9a02      	ldr	r2, [sp, #8]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	dd00      	ble.n	8007f1c <__ieee754_rem_pio2+0x11c>
 8007f1a:	e0d1      	b.n	80080c0 <__ieee754_rem_pio2+0x2c0>
 8007f1c:	f000 fe2e 	bl	8008b7c <fabs>
 8007f20:	4a77      	ldr	r2, [pc, #476]	; (8008100 <__ieee754_rem_pio2+0x300>)
 8007f22:	4b78      	ldr	r3, [pc, #480]	; (8008104 <__ieee754_rem_pio2+0x304>)
 8007f24:	0004      	movs	r4, r0
 8007f26:	000d      	movs	r5, r1
 8007f28:	f7f9 ffde 	bl	8001ee8 <__aeabi_dmul>
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	4b76      	ldr	r3, [pc, #472]	; (8008108 <__ieee754_rem_pio2+0x308>)
 8007f30:	f7f9 f8b4 	bl	800109c <__aeabi_dadd>
 8007f34:	f7fa fdae 	bl	8002a94 <__aeabi_d2iz>
 8007f38:	0006      	movs	r6, r0
 8007f3a:	f7fa fde1 	bl	8002b00 <__aeabi_i2d>
 8007f3e:	4a69      	ldr	r2, [pc, #420]	; (80080e4 <__ieee754_rem_pio2+0x2e4>)
 8007f40:	4b69      	ldr	r3, [pc, #420]	; (80080e8 <__ieee754_rem_pio2+0x2e8>)
 8007f42:	9006      	str	r0, [sp, #24]
 8007f44:	9107      	str	r1, [sp, #28]
 8007f46:	f7f9 ffcf 	bl	8001ee8 <__aeabi_dmul>
 8007f4a:	0002      	movs	r2, r0
 8007f4c:	000b      	movs	r3, r1
 8007f4e:	0020      	movs	r0, r4
 8007f50:	0029      	movs	r1, r5
 8007f52:	f7fa fa3b 	bl	80023cc <__aeabi_dsub>
 8007f56:	4a65      	ldr	r2, [pc, #404]	; (80080ec <__ieee754_rem_pio2+0x2ec>)
 8007f58:	9004      	str	r0, [sp, #16]
 8007f5a:	9105      	str	r1, [sp, #20]
 8007f5c:	9806      	ldr	r0, [sp, #24]
 8007f5e:	9907      	ldr	r1, [sp, #28]
 8007f60:	4b63      	ldr	r3, [pc, #396]	; (80080f0 <__ieee754_rem_pio2+0x2f0>)
 8007f62:	f7f9 ffc1 	bl	8001ee8 <__aeabi_dmul>
 8007f66:	0004      	movs	r4, r0
 8007f68:	000d      	movs	r5, r1
 8007f6a:	2e1f      	cmp	r6, #31
 8007f6c:	dc0f      	bgt.n	8007f8e <__ieee754_rem_pio2+0x18e>
 8007f6e:	4a67      	ldr	r2, [pc, #412]	; (800810c <__ieee754_rem_pio2+0x30c>)
 8007f70:	1e73      	subs	r3, r6, #1
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	589b      	ldr	r3, [r3, r2]
 8007f76:	9a02      	ldr	r2, [sp, #8]
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d008      	beq.n	8007f8e <__ieee754_rem_pio2+0x18e>
 8007f7c:	9804      	ldr	r0, [sp, #16]
 8007f7e:	9905      	ldr	r1, [sp, #20]
 8007f80:	0022      	movs	r2, r4
 8007f82:	002b      	movs	r3, r5
 8007f84:	f7fa fa22 	bl	80023cc <__aeabi_dsub>
 8007f88:	6038      	str	r0, [r7, #0]
 8007f8a:	6079      	str	r1, [r7, #4]
 8007f8c:	e012      	b.n	8007fb4 <__ieee754_rem_pio2+0x1b4>
 8007f8e:	0022      	movs	r2, r4
 8007f90:	9804      	ldr	r0, [sp, #16]
 8007f92:	9905      	ldr	r1, [sp, #20]
 8007f94:	002b      	movs	r3, r5
 8007f96:	f7fa fa19 	bl	80023cc <__aeabi_dsub>
 8007f9a:	9b02      	ldr	r3, [sp, #8]
 8007f9c:	151b      	asrs	r3, r3, #20
 8007f9e:	9308      	str	r3, [sp, #32]
 8007fa0:	9a08      	ldr	r2, [sp, #32]
 8007fa2:	004b      	lsls	r3, r1, #1
 8007fa4:	0d5b      	lsrs	r3, r3, #21
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	2b10      	cmp	r3, #16
 8007faa:	dc21      	bgt.n	8007ff0 <__ieee754_rem_pio2+0x1f0>
 8007fac:	0002      	movs	r2, r0
 8007fae:	000b      	movs	r3, r1
 8007fb0:	603a      	str	r2, [r7, #0]
 8007fb2:	607b      	str	r3, [r7, #4]
 8007fb4:	9804      	ldr	r0, [sp, #16]
 8007fb6:	9905      	ldr	r1, [sp, #20]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	683a      	ldr	r2, [r7, #0]
 8007fbc:	9302      	str	r3, [sp, #8]
 8007fbe:	9b02      	ldr	r3, [sp, #8]
 8007fc0:	f7fa fa04 	bl	80023cc <__aeabi_dsub>
 8007fc4:	0022      	movs	r2, r4
 8007fc6:	002b      	movs	r3, r5
 8007fc8:	f7fa fa00 	bl	80023cc <__aeabi_dsub>
 8007fcc:	000b      	movs	r3, r1
 8007fce:	0002      	movs	r2, r0
 8007fd0:	60ba      	str	r2, [r7, #8]
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	db00      	blt.n	8007fdc <__ieee754_rem_pio2+0x1dc>
 8007fda:	e74c      	b.n	8007e76 <__ieee754_rem_pio2+0x76>
 8007fdc:	2280      	movs	r2, #128	; 0x80
 8007fde:	0612      	lsls	r2, r2, #24
 8007fe0:	4694      	mov	ip, r2
 8007fe2:	9b02      	ldr	r3, [sp, #8]
 8007fe4:	1889      	adds	r1, r1, r2
 8007fe6:	4463      	add	r3, ip
 8007fe8:	607b      	str	r3, [r7, #4]
 8007fea:	60b8      	str	r0, [r7, #8]
 8007fec:	60f9      	str	r1, [r7, #12]
 8007fee:	e778      	b.n	8007ee2 <__ieee754_rem_pio2+0xe2>
 8007ff0:	22d3      	movs	r2, #211	; 0xd3
 8007ff2:	9806      	ldr	r0, [sp, #24]
 8007ff4:	9907      	ldr	r1, [sp, #28]
 8007ff6:	0552      	lsls	r2, r2, #21
 8007ff8:	4b3d      	ldr	r3, [pc, #244]	; (80080f0 <__ieee754_rem_pio2+0x2f0>)
 8007ffa:	f7f9 ff75 	bl	8001ee8 <__aeabi_dmul>
 8007ffe:	0004      	movs	r4, r0
 8008000:	000d      	movs	r5, r1
 8008002:	0002      	movs	r2, r0
 8008004:	000b      	movs	r3, r1
 8008006:	9804      	ldr	r0, [sp, #16]
 8008008:	9905      	ldr	r1, [sp, #20]
 800800a:	f7fa f9df 	bl	80023cc <__aeabi_dsub>
 800800e:	0002      	movs	r2, r0
 8008010:	000b      	movs	r3, r1
 8008012:	9002      	str	r0, [sp, #8]
 8008014:	9103      	str	r1, [sp, #12]
 8008016:	9804      	ldr	r0, [sp, #16]
 8008018:	9905      	ldr	r1, [sp, #20]
 800801a:	f7fa f9d7 	bl	80023cc <__aeabi_dsub>
 800801e:	0022      	movs	r2, r4
 8008020:	002b      	movs	r3, r5
 8008022:	f7fa f9d3 	bl	80023cc <__aeabi_dsub>
 8008026:	0004      	movs	r4, r0
 8008028:	000d      	movs	r5, r1
 800802a:	9806      	ldr	r0, [sp, #24]
 800802c:	9907      	ldr	r1, [sp, #28]
 800802e:	4a31      	ldr	r2, [pc, #196]	; (80080f4 <__ieee754_rem_pio2+0x2f4>)
 8008030:	4b31      	ldr	r3, [pc, #196]	; (80080f8 <__ieee754_rem_pio2+0x2f8>)
 8008032:	f7f9 ff59 	bl	8001ee8 <__aeabi_dmul>
 8008036:	0022      	movs	r2, r4
 8008038:	002b      	movs	r3, r5
 800803a:	f7fa f9c7 	bl	80023cc <__aeabi_dsub>
 800803e:	0002      	movs	r2, r0
 8008040:	000b      	movs	r3, r1
 8008042:	0004      	movs	r4, r0
 8008044:	000d      	movs	r5, r1
 8008046:	9802      	ldr	r0, [sp, #8]
 8008048:	9903      	ldr	r1, [sp, #12]
 800804a:	f7fa f9bf 	bl	80023cc <__aeabi_dsub>
 800804e:	9a08      	ldr	r2, [sp, #32]
 8008050:	004b      	lsls	r3, r1, #1
 8008052:	0d5b      	lsrs	r3, r3, #21
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	2b31      	cmp	r3, #49	; 0x31
 8008058:	dc08      	bgt.n	800806c <__ieee754_rem_pio2+0x26c>
 800805a:	0002      	movs	r2, r0
 800805c:	000b      	movs	r3, r1
 800805e:	603a      	str	r2, [r7, #0]
 8008060:	607b      	str	r3, [r7, #4]
 8008062:	9a02      	ldr	r2, [sp, #8]
 8008064:	9b03      	ldr	r3, [sp, #12]
 8008066:	9204      	str	r2, [sp, #16]
 8008068:	9305      	str	r3, [sp, #20]
 800806a:	e7a3      	b.n	8007fb4 <__ieee754_rem_pio2+0x1b4>
 800806c:	22b8      	movs	r2, #184	; 0xb8
 800806e:	9806      	ldr	r0, [sp, #24]
 8008070:	9907      	ldr	r1, [sp, #28]
 8008072:	0592      	lsls	r2, r2, #22
 8008074:	4b20      	ldr	r3, [pc, #128]	; (80080f8 <__ieee754_rem_pio2+0x2f8>)
 8008076:	f7f9 ff37 	bl	8001ee8 <__aeabi_dmul>
 800807a:	0004      	movs	r4, r0
 800807c:	000d      	movs	r5, r1
 800807e:	0002      	movs	r2, r0
 8008080:	000b      	movs	r3, r1
 8008082:	9802      	ldr	r0, [sp, #8]
 8008084:	9903      	ldr	r1, [sp, #12]
 8008086:	f7fa f9a1 	bl	80023cc <__aeabi_dsub>
 800808a:	0002      	movs	r2, r0
 800808c:	000b      	movs	r3, r1
 800808e:	9004      	str	r0, [sp, #16]
 8008090:	9105      	str	r1, [sp, #20]
 8008092:	9802      	ldr	r0, [sp, #8]
 8008094:	9903      	ldr	r1, [sp, #12]
 8008096:	f7fa f999 	bl	80023cc <__aeabi_dsub>
 800809a:	0022      	movs	r2, r4
 800809c:	002b      	movs	r3, r5
 800809e:	f7fa f995 	bl	80023cc <__aeabi_dsub>
 80080a2:	0004      	movs	r4, r0
 80080a4:	000d      	movs	r5, r1
 80080a6:	9806      	ldr	r0, [sp, #24]
 80080a8:	9907      	ldr	r1, [sp, #28]
 80080aa:	4a19      	ldr	r2, [pc, #100]	; (8008110 <__ieee754_rem_pio2+0x310>)
 80080ac:	4b19      	ldr	r3, [pc, #100]	; (8008114 <__ieee754_rem_pio2+0x314>)
 80080ae:	f7f9 ff1b 	bl	8001ee8 <__aeabi_dmul>
 80080b2:	0022      	movs	r2, r4
 80080b4:	002b      	movs	r3, r5
 80080b6:	f7fa f989 	bl	80023cc <__aeabi_dsub>
 80080ba:	0004      	movs	r4, r0
 80080bc:	000d      	movs	r5, r1
 80080be:	e75d      	b.n	8007f7c <__ieee754_rem_pio2+0x17c>
 80080c0:	4b15      	ldr	r3, [pc, #84]	; (8008118 <__ieee754_rem_pio2+0x318>)
 80080c2:	9a02      	ldr	r2, [sp, #8]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	dd29      	ble.n	800811c <__ieee754_rem_pio2+0x31c>
 80080c8:	0002      	movs	r2, r0
 80080ca:	000b      	movs	r3, r1
 80080cc:	f7fa f97e 	bl	80023cc <__aeabi_dsub>
 80080d0:	60b8      	str	r0, [r7, #8]
 80080d2:	60f9      	str	r1, [r7, #12]
 80080d4:	6038      	str	r0, [r7, #0]
 80080d6:	6079      	str	r1, [r7, #4]
 80080d8:	e6a6      	b.n	8007e28 <__ieee754_rem_pio2+0x28>
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	3fe921fb 	.word	0x3fe921fb
 80080e0:	4002d97b 	.word	0x4002d97b
 80080e4:	54400000 	.word	0x54400000
 80080e8:	3ff921fb 	.word	0x3ff921fb
 80080ec:	1a626331 	.word	0x1a626331
 80080f0:	3dd0b461 	.word	0x3dd0b461
 80080f4:	2e037073 	.word	0x2e037073
 80080f8:	3ba3198a 	.word	0x3ba3198a
 80080fc:	413921fb 	.word	0x413921fb
 8008100:	6dc9c883 	.word	0x6dc9c883
 8008104:	3fe45f30 	.word	0x3fe45f30
 8008108:	3fe00000 	.word	0x3fe00000
 800810c:	08008fc0 	.word	0x08008fc0
 8008110:	252049c1 	.word	0x252049c1
 8008114:	397b839a 	.word	0x397b839a
 8008118:	7fefffff 	.word	0x7fefffff
 800811c:	9b02      	ldr	r3, [sp, #8]
 800811e:	4a29      	ldr	r2, [pc, #164]	; (80081c4 <__ieee754_rem_pio2+0x3c4>)
 8008120:	151b      	asrs	r3, r3, #20
 8008122:	189b      	adds	r3, r3, r2
 8008124:	9a02      	ldr	r2, [sp, #8]
 8008126:	9304      	str	r3, [sp, #16]
 8008128:	051b      	lsls	r3, r3, #20
 800812a:	1ad5      	subs	r5, r2, r3
 800812c:	0029      	movs	r1, r5
 800812e:	f7fa fcb1 	bl	8002a94 <__aeabi_d2iz>
 8008132:	f7fa fce5 	bl	8002b00 <__aeabi_i2d>
 8008136:	0002      	movs	r2, r0
 8008138:	000b      	movs	r3, r1
 800813a:	0020      	movs	r0, r4
 800813c:	0029      	movs	r1, r5
 800813e:	920a      	str	r2, [sp, #40]	; 0x28
 8008140:	930b      	str	r3, [sp, #44]	; 0x2c
 8008142:	f7fa f943 	bl	80023cc <__aeabi_dsub>
 8008146:	2200      	movs	r2, #0
 8008148:	4b1f      	ldr	r3, [pc, #124]	; (80081c8 <__ieee754_rem_pio2+0x3c8>)
 800814a:	f7f9 fecd 	bl	8001ee8 <__aeabi_dmul>
 800814e:	0004      	movs	r4, r0
 8008150:	000d      	movs	r5, r1
 8008152:	f7fa fc9f 	bl	8002a94 <__aeabi_d2iz>
 8008156:	f7fa fcd3 	bl	8002b00 <__aeabi_i2d>
 800815a:	0002      	movs	r2, r0
 800815c:	000b      	movs	r3, r1
 800815e:	ae0a      	add	r6, sp, #40	; 0x28
 8008160:	60b2      	str	r2, [r6, #8]
 8008162:	60f3      	str	r3, [r6, #12]
 8008164:	0020      	movs	r0, r4
 8008166:	0029      	movs	r1, r5
 8008168:	f7fa f930 	bl	80023cc <__aeabi_dsub>
 800816c:	2200      	movs	r2, #0
 800816e:	4b16      	ldr	r3, [pc, #88]	; (80081c8 <__ieee754_rem_pio2+0x3c8>)
 8008170:	f7f9 feba 	bl	8001ee8 <__aeabi_dmul>
 8008174:	2403      	movs	r4, #3
 8008176:	6130      	str	r0, [r6, #16]
 8008178:	6171      	str	r1, [r6, #20]
 800817a:	1e65      	subs	r5, r4, #1
 800817c:	00eb      	lsls	r3, r5, #3
 800817e:	18f3      	adds	r3, r6, r3
 8008180:	6818      	ldr	r0, [r3, #0]
 8008182:	6859      	ldr	r1, [r3, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	2300      	movs	r3, #0
 8008188:	f7f8 f94e 	bl	8000428 <__aeabi_dcmpeq>
 800818c:	2800      	cmp	r0, #0
 800818e:	d117      	bne.n	80081c0 <__ieee754_rem_pio2+0x3c0>
 8008190:	4b0e      	ldr	r3, [pc, #56]	; (80081cc <__ieee754_rem_pio2+0x3cc>)
 8008192:	0030      	movs	r0, r6
 8008194:	9301      	str	r3, [sp, #4]
 8008196:	2302      	movs	r3, #2
 8008198:	9a04      	ldr	r2, [sp, #16]
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	0039      	movs	r1, r7
 800819e:	0023      	movs	r3, r4
 80081a0:	f000 f8d6 	bl	8008350 <__kernel_rem_pio2>
 80081a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a6:	0006      	movs	r6, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	db00      	blt.n	80081ae <__ieee754_rem_pio2+0x3ae>
 80081ac:	e663      	b.n	8007e76 <__ieee754_rem_pio2+0x76>
 80081ae:	2280      	movs	r2, #128	; 0x80
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	0612      	lsls	r2, r2, #24
 80081b4:	189b      	adds	r3, r3, r2
 80081b6:	607b      	str	r3, [r7, #4]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	189b      	adds	r3, r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
 80081be:	e690      	b.n	8007ee2 <__ieee754_rem_pio2+0xe2>
 80081c0:	002c      	movs	r4, r5
 80081c2:	e7da      	b.n	800817a <__ieee754_rem_pio2+0x37a>
 80081c4:	fffffbea 	.word	0xfffffbea
 80081c8:	41700000 	.word	0x41700000
 80081cc:	08009040 	.word	0x08009040

080081d0 <__kernel_cos>:
 80081d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081d2:	b087      	sub	sp, #28
 80081d4:	9204      	str	r2, [sp, #16]
 80081d6:	9305      	str	r3, [sp, #20]
 80081d8:	004b      	lsls	r3, r1, #1
 80081da:	085b      	lsrs	r3, r3, #1
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	9a00      	ldr	r2, [sp, #0]
 80081e0:	4b48      	ldr	r3, [pc, #288]	; (8008304 <__kernel_cos+0x134>)
 80081e2:	0005      	movs	r5, r0
 80081e4:	000c      	movs	r4, r1
 80081e6:	429a      	cmp	r2, r3
 80081e8:	dc04      	bgt.n	80081f4 <__kernel_cos+0x24>
 80081ea:	f7fa fc53 	bl	8002a94 <__aeabi_d2iz>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d100      	bne.n	80081f4 <__kernel_cos+0x24>
 80081f2:	e084      	b.n	80082fe <__kernel_cos+0x12e>
 80081f4:	002a      	movs	r2, r5
 80081f6:	0023      	movs	r3, r4
 80081f8:	0028      	movs	r0, r5
 80081fa:	0021      	movs	r1, r4
 80081fc:	f7f9 fe74 	bl	8001ee8 <__aeabi_dmul>
 8008200:	2200      	movs	r2, #0
 8008202:	4b41      	ldr	r3, [pc, #260]	; (8008308 <__kernel_cos+0x138>)
 8008204:	0006      	movs	r6, r0
 8008206:	000f      	movs	r7, r1
 8008208:	f7f9 fe6e 	bl	8001ee8 <__aeabi_dmul>
 800820c:	4a3f      	ldr	r2, [pc, #252]	; (800830c <__kernel_cos+0x13c>)
 800820e:	9002      	str	r0, [sp, #8]
 8008210:	9103      	str	r1, [sp, #12]
 8008212:	4b3f      	ldr	r3, [pc, #252]	; (8008310 <__kernel_cos+0x140>)
 8008214:	0030      	movs	r0, r6
 8008216:	0039      	movs	r1, r7
 8008218:	f7f9 fe66 	bl	8001ee8 <__aeabi_dmul>
 800821c:	4a3d      	ldr	r2, [pc, #244]	; (8008314 <__kernel_cos+0x144>)
 800821e:	4b3e      	ldr	r3, [pc, #248]	; (8008318 <__kernel_cos+0x148>)
 8008220:	f7f8 ff3c 	bl	800109c <__aeabi_dadd>
 8008224:	0032      	movs	r2, r6
 8008226:	003b      	movs	r3, r7
 8008228:	f7f9 fe5e 	bl	8001ee8 <__aeabi_dmul>
 800822c:	4a3b      	ldr	r2, [pc, #236]	; (800831c <__kernel_cos+0x14c>)
 800822e:	4b3c      	ldr	r3, [pc, #240]	; (8008320 <__kernel_cos+0x150>)
 8008230:	f7fa f8cc 	bl	80023cc <__aeabi_dsub>
 8008234:	0032      	movs	r2, r6
 8008236:	003b      	movs	r3, r7
 8008238:	f7f9 fe56 	bl	8001ee8 <__aeabi_dmul>
 800823c:	4a39      	ldr	r2, [pc, #228]	; (8008324 <__kernel_cos+0x154>)
 800823e:	4b3a      	ldr	r3, [pc, #232]	; (8008328 <__kernel_cos+0x158>)
 8008240:	f7f8 ff2c 	bl	800109c <__aeabi_dadd>
 8008244:	0032      	movs	r2, r6
 8008246:	003b      	movs	r3, r7
 8008248:	f7f9 fe4e 	bl	8001ee8 <__aeabi_dmul>
 800824c:	4a37      	ldr	r2, [pc, #220]	; (800832c <__kernel_cos+0x15c>)
 800824e:	4b38      	ldr	r3, [pc, #224]	; (8008330 <__kernel_cos+0x160>)
 8008250:	f7fa f8bc 	bl	80023cc <__aeabi_dsub>
 8008254:	0032      	movs	r2, r6
 8008256:	003b      	movs	r3, r7
 8008258:	f7f9 fe46 	bl	8001ee8 <__aeabi_dmul>
 800825c:	4a35      	ldr	r2, [pc, #212]	; (8008334 <__kernel_cos+0x164>)
 800825e:	4b36      	ldr	r3, [pc, #216]	; (8008338 <__kernel_cos+0x168>)
 8008260:	f7f8 ff1c 	bl	800109c <__aeabi_dadd>
 8008264:	0032      	movs	r2, r6
 8008266:	003b      	movs	r3, r7
 8008268:	f7f9 fe3e 	bl	8001ee8 <__aeabi_dmul>
 800826c:	0032      	movs	r2, r6
 800826e:	003b      	movs	r3, r7
 8008270:	f7f9 fe3a 	bl	8001ee8 <__aeabi_dmul>
 8008274:	9a04      	ldr	r2, [sp, #16]
 8008276:	9b05      	ldr	r3, [sp, #20]
 8008278:	0006      	movs	r6, r0
 800827a:	000f      	movs	r7, r1
 800827c:	0028      	movs	r0, r5
 800827e:	0021      	movs	r1, r4
 8008280:	f7f9 fe32 	bl	8001ee8 <__aeabi_dmul>
 8008284:	0002      	movs	r2, r0
 8008286:	000b      	movs	r3, r1
 8008288:	0030      	movs	r0, r6
 800828a:	0039      	movs	r1, r7
 800828c:	f7fa f89e 	bl	80023cc <__aeabi_dsub>
 8008290:	4b2a      	ldr	r3, [pc, #168]	; (800833c <__kernel_cos+0x16c>)
 8008292:	9a00      	ldr	r2, [sp, #0]
 8008294:	0004      	movs	r4, r0
 8008296:	000d      	movs	r5, r1
 8008298:	429a      	cmp	r2, r3
 800829a:	dc0d      	bgt.n	80082b8 <__kernel_cos+0xe8>
 800829c:	0002      	movs	r2, r0
 800829e:	000b      	movs	r3, r1
 80082a0:	9802      	ldr	r0, [sp, #8]
 80082a2:	9903      	ldr	r1, [sp, #12]
 80082a4:	f7fa f892 	bl	80023cc <__aeabi_dsub>
 80082a8:	0002      	movs	r2, r0
 80082aa:	2000      	movs	r0, #0
 80082ac:	000b      	movs	r3, r1
 80082ae:	4924      	ldr	r1, [pc, #144]	; (8008340 <__kernel_cos+0x170>)
 80082b0:	f7fa f88c 	bl	80023cc <__aeabi_dsub>
 80082b4:	b007      	add	sp, #28
 80082b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082b8:	4b22      	ldr	r3, [pc, #136]	; (8008344 <__kernel_cos+0x174>)
 80082ba:	9a00      	ldr	r2, [sp, #0]
 80082bc:	2600      	movs	r6, #0
 80082be:	429a      	cmp	r2, r3
 80082c0:	dc1b      	bgt.n	80082fa <__kernel_cos+0x12a>
 80082c2:	0013      	movs	r3, r2
 80082c4:	4a20      	ldr	r2, [pc, #128]	; (8008348 <__kernel_cos+0x178>)
 80082c6:	4694      	mov	ip, r2
 80082c8:	4463      	add	r3, ip
 80082ca:	001f      	movs	r7, r3
 80082cc:	0032      	movs	r2, r6
 80082ce:	003b      	movs	r3, r7
 80082d0:	2000      	movs	r0, #0
 80082d2:	491b      	ldr	r1, [pc, #108]	; (8008340 <__kernel_cos+0x170>)
 80082d4:	f7fa f87a 	bl	80023cc <__aeabi_dsub>
 80082d8:	0032      	movs	r2, r6
 80082da:	9000      	str	r0, [sp, #0]
 80082dc:	9101      	str	r1, [sp, #4]
 80082de:	9802      	ldr	r0, [sp, #8]
 80082e0:	9903      	ldr	r1, [sp, #12]
 80082e2:	003b      	movs	r3, r7
 80082e4:	f7fa f872 	bl	80023cc <__aeabi_dsub>
 80082e8:	0022      	movs	r2, r4
 80082ea:	002b      	movs	r3, r5
 80082ec:	f7fa f86e 	bl	80023cc <__aeabi_dsub>
 80082f0:	0002      	movs	r2, r0
 80082f2:	000b      	movs	r3, r1
 80082f4:	9800      	ldr	r0, [sp, #0]
 80082f6:	9901      	ldr	r1, [sp, #4]
 80082f8:	e7da      	b.n	80082b0 <__kernel_cos+0xe0>
 80082fa:	4f14      	ldr	r7, [pc, #80]	; (800834c <__kernel_cos+0x17c>)
 80082fc:	e7e6      	b.n	80082cc <__kernel_cos+0xfc>
 80082fe:	2000      	movs	r0, #0
 8008300:	490f      	ldr	r1, [pc, #60]	; (8008340 <__kernel_cos+0x170>)
 8008302:	e7d7      	b.n	80082b4 <__kernel_cos+0xe4>
 8008304:	3e3fffff 	.word	0x3e3fffff
 8008308:	3fe00000 	.word	0x3fe00000
 800830c:	be8838d4 	.word	0xbe8838d4
 8008310:	bda8fae9 	.word	0xbda8fae9
 8008314:	bdb4b1c4 	.word	0xbdb4b1c4
 8008318:	3e21ee9e 	.word	0x3e21ee9e
 800831c:	809c52ad 	.word	0x809c52ad
 8008320:	3e927e4f 	.word	0x3e927e4f
 8008324:	19cb1590 	.word	0x19cb1590
 8008328:	3efa01a0 	.word	0x3efa01a0
 800832c:	16c15177 	.word	0x16c15177
 8008330:	3f56c16c 	.word	0x3f56c16c
 8008334:	5555554c 	.word	0x5555554c
 8008338:	3fa55555 	.word	0x3fa55555
 800833c:	3fd33332 	.word	0x3fd33332
 8008340:	3ff00000 	.word	0x3ff00000
 8008344:	3fe90000 	.word	0x3fe90000
 8008348:	ffe00000 	.word	0xffe00000
 800834c:	3fd20000 	.word	0x3fd20000

08008350 <__kernel_rem_pio2>:
 8008350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008352:	0015      	movs	r5, r2
 8008354:	4cdc      	ldr	r4, [pc, #880]	; (80086c8 <__kernel_rem_pio2+0x378>)
 8008356:	44a5      	add	sp, r4
 8008358:	930b      	str	r3, [sp, #44]	; 0x2c
 800835a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800835c:	900d      	str	r0, [sp, #52]	; 0x34
 800835e:	009a      	lsls	r2, r3, #2
 8008360:	4bda      	ldr	r3, [pc, #872]	; (80086cc <__kernel_rem_pio2+0x37c>)
 8008362:	9103      	str	r1, [sp, #12]
 8008364:	58d3      	ldr	r3, [r2, r3]
 8008366:	1ee8      	subs	r0, r5, #3
 8008368:	9306      	str	r3, [sp, #24]
 800836a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800836c:	2118      	movs	r1, #24
 800836e:	3b01      	subs	r3, #1
 8008370:	9308      	str	r3, [sp, #32]
 8008372:	f7f7 ff5d 	bl	8000230 <__divsi3>
 8008376:	43c3      	mvns	r3, r0
 8008378:	0004      	movs	r4, r0
 800837a:	17db      	asrs	r3, r3, #31
 800837c:	401c      	ands	r4, r3
 800837e:	2318      	movs	r3, #24
 8008380:	1c62      	adds	r2, r4, #1
 8008382:	425b      	negs	r3, r3
 8008384:	4353      	muls	r3, r2
 8008386:	9a08      	ldr	r2, [sp, #32]
 8008388:	195b      	adds	r3, r3, r5
 800838a:	4694      	mov	ip, r2
 800838c:	2500      	movs	r5, #0
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	9b06      	ldr	r3, [sp, #24]
 8008392:	1aa7      	subs	r7, r4, r2
 8008394:	4463      	add	r3, ip
 8008396:	9304      	str	r3, [sp, #16]
 8008398:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800839a:	00be      	lsls	r6, r7, #2
 800839c:	199e      	adds	r6, r3, r6
 800839e:	9b04      	ldr	r3, [sp, #16]
 80083a0:	429d      	cmp	r5, r3
 80083a2:	dc00      	bgt.n	80083a6 <__kernel_rem_pio2+0x56>
 80083a4:	e094      	b.n	80084d0 <__kernel_rem_pio2+0x180>
 80083a6:	2600      	movs	r6, #0
 80083a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083aa:	00dd      	lsls	r5, r3, #3
 80083ac:	ab28      	add	r3, sp, #160	; 0xa0
 80083ae:	195d      	adds	r5, r3, r5
 80083b0:	9b06      	ldr	r3, [sp, #24]
 80083b2:	429e      	cmp	r6, r3
 80083b4:	dc00      	bgt.n	80083b8 <__kernel_rem_pio2+0x68>
 80083b6:	e0bc      	b.n	8008532 <__kernel_rem_pio2+0x1e2>
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	aa14      	add	r2, sp, #80	; 0x50
 80083bc:	189b      	adds	r3, r3, r2
 80083be:	9312      	str	r3, [sp, #72]	; 0x48
 80083c0:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80083c2:	00a4      	lsls	r4, r4, #2
 80083c4:	191b      	adds	r3, r3, r4
 80083c6:	9f06      	ldr	r7, [sp, #24]
 80083c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80083ca:	003c      	movs	r4, r7
 80083cc:	aa78      	add	r2, sp, #480	; 0x1e0
 80083ce:	00fb      	lsls	r3, r7, #3
 80083d0:	18d3      	adds	r3, r2, r3
 80083d2:	681d      	ldr	r5, [r3, #0]
 80083d4:	685e      	ldr	r6, [r3, #4]
 80083d6:	a914      	add	r1, sp, #80	; 0x50
 80083d8:	00bb      	lsls	r3, r7, #2
 80083da:	185b      	adds	r3, r3, r1
 80083dc:	930a      	str	r3, [sp, #40]	; 0x28
 80083de:	920e      	str	r2, [sp, #56]	; 0x38
 80083e0:	2c00      	cmp	r4, #0
 80083e2:	dd00      	ble.n	80083e6 <__kernel_rem_pio2+0x96>
 80083e4:	e0ab      	b.n	800853e <__kernel_rem_pio2+0x1ee>
 80083e6:	9a00      	ldr	r2, [sp, #0]
 80083e8:	0028      	movs	r0, r5
 80083ea:	0031      	movs	r1, r6
 80083ec:	f000 fc4e 	bl	8008c8c <scalbn>
 80083f0:	23ff      	movs	r3, #255	; 0xff
 80083f2:	2200      	movs	r2, #0
 80083f4:	059b      	lsls	r3, r3, #22
 80083f6:	0004      	movs	r4, r0
 80083f8:	000d      	movs	r5, r1
 80083fa:	f7f9 fd75 	bl	8001ee8 <__aeabi_dmul>
 80083fe:	f000 fbc1 	bl	8008b84 <floor>
 8008402:	2200      	movs	r2, #0
 8008404:	4bb2      	ldr	r3, [pc, #712]	; (80086d0 <__kernel_rem_pio2+0x380>)
 8008406:	f7f9 fd6f 	bl	8001ee8 <__aeabi_dmul>
 800840a:	0002      	movs	r2, r0
 800840c:	000b      	movs	r3, r1
 800840e:	0020      	movs	r0, r4
 8008410:	0029      	movs	r1, r5
 8008412:	f7f9 ffdb 	bl	80023cc <__aeabi_dsub>
 8008416:	000d      	movs	r5, r1
 8008418:	0004      	movs	r4, r0
 800841a:	f7fa fb3b 	bl	8002a94 <__aeabi_d2iz>
 800841e:	900a      	str	r0, [sp, #40]	; 0x28
 8008420:	f7fa fb6e 	bl	8002b00 <__aeabi_i2d>
 8008424:	000b      	movs	r3, r1
 8008426:	0002      	movs	r2, r0
 8008428:	0029      	movs	r1, r5
 800842a:	0020      	movs	r0, r4
 800842c:	f7f9 ffce 	bl	80023cc <__aeabi_dsub>
 8008430:	9b00      	ldr	r3, [sp, #0]
 8008432:	0005      	movs	r5, r0
 8008434:	000e      	movs	r6, r1
 8008436:	2b00      	cmp	r3, #0
 8008438:	dc00      	bgt.n	800843c <__kernel_rem_pio2+0xec>
 800843a:	e0ab      	b.n	8008594 <__kernel_rem_pio2+0x244>
 800843c:	2118      	movs	r1, #24
 800843e:	1e7b      	subs	r3, r7, #1
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	aa14      	add	r2, sp, #80	; 0x50
 8008444:	589a      	ldr	r2, [r3, r2]
 8008446:	9800      	ldr	r0, [sp, #0]
 8008448:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800844a:	1a09      	subs	r1, r1, r0
 800844c:	0010      	movs	r0, r2
 800844e:	4108      	asrs	r0, r1
 8008450:	1824      	adds	r4, r4, r0
 8008452:	4088      	lsls	r0, r1
 8008454:	1a10      	subs	r0, r2, r0
 8008456:	aa14      	add	r2, sp, #80	; 0x50
 8008458:	5098      	str	r0, [r3, r2]
 800845a:	2317      	movs	r3, #23
 800845c:	9a00      	ldr	r2, [sp, #0]
 800845e:	940a      	str	r4, [sp, #40]	; 0x28
 8008460:	1a9b      	subs	r3, r3, r2
 8008462:	4118      	asrs	r0, r3
 8008464:	9004      	str	r0, [sp, #16]
 8008466:	9b04      	ldr	r3, [sp, #16]
 8008468:	2b00      	cmp	r3, #0
 800846a:	dc00      	bgt.n	800846e <__kernel_rem_pio2+0x11e>
 800846c:	e0a3      	b.n	80085b6 <__kernel_rem_pio2+0x266>
 800846e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008470:	2200      	movs	r2, #0
 8008472:	3301      	adds	r3, #1
 8008474:	930a      	str	r3, [sp, #40]	; 0x28
 8008476:	2380      	movs	r3, #128	; 0x80
 8008478:	045b      	lsls	r3, r3, #17
 800847a:	0014      	movs	r4, r2
 800847c:	469c      	mov	ip, r3
 800847e:	4297      	cmp	r7, r2
 8008480:	dd00      	ble.n	8008484 <__kernel_rem_pio2+0x134>
 8008482:	e0d6      	b.n	8008632 <__kernel_rem_pio2+0x2e2>
 8008484:	9b00      	ldr	r3, [sp, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	dd05      	ble.n	8008496 <__kernel_rem_pio2+0x146>
 800848a:	2b01      	cmp	r3, #1
 800848c:	d100      	bne.n	8008490 <__kernel_rem_pio2+0x140>
 800848e:	e0e5      	b.n	800865c <__kernel_rem_pio2+0x30c>
 8008490:	2b02      	cmp	r3, #2
 8008492:	d100      	bne.n	8008496 <__kernel_rem_pio2+0x146>
 8008494:	e0ec      	b.n	8008670 <__kernel_rem_pio2+0x320>
 8008496:	9b04      	ldr	r3, [sp, #16]
 8008498:	2b02      	cmp	r3, #2
 800849a:	d000      	beq.n	800849e <__kernel_rem_pio2+0x14e>
 800849c:	e08b      	b.n	80085b6 <__kernel_rem_pio2+0x266>
 800849e:	002a      	movs	r2, r5
 80084a0:	0033      	movs	r3, r6
 80084a2:	2000      	movs	r0, #0
 80084a4:	498b      	ldr	r1, [pc, #556]	; (80086d4 <__kernel_rem_pio2+0x384>)
 80084a6:	f7f9 ff91 	bl	80023cc <__aeabi_dsub>
 80084aa:	0005      	movs	r5, r0
 80084ac:	000e      	movs	r6, r1
 80084ae:	2c00      	cmp	r4, #0
 80084b0:	d100      	bne.n	80084b4 <__kernel_rem_pio2+0x164>
 80084b2:	e080      	b.n	80085b6 <__kernel_rem_pio2+0x266>
 80084b4:	9a00      	ldr	r2, [sp, #0]
 80084b6:	2000      	movs	r0, #0
 80084b8:	4986      	ldr	r1, [pc, #536]	; (80086d4 <__kernel_rem_pio2+0x384>)
 80084ba:	f000 fbe7 	bl	8008c8c <scalbn>
 80084be:	0002      	movs	r2, r0
 80084c0:	000b      	movs	r3, r1
 80084c2:	0028      	movs	r0, r5
 80084c4:	0031      	movs	r1, r6
 80084c6:	f7f9 ff81 	bl	80023cc <__aeabi_dsub>
 80084ca:	0005      	movs	r5, r0
 80084cc:	000e      	movs	r6, r1
 80084ce:	e072      	b.n	80085b6 <__kernel_rem_pio2+0x266>
 80084d0:	42ef      	cmn	r7, r5
 80084d2:	d40a      	bmi.n	80084ea <__kernel_rem_pio2+0x19a>
 80084d4:	00ab      	lsls	r3, r5, #2
 80084d6:	58f0      	ldr	r0, [r6, r3]
 80084d8:	f7fa fb12 	bl	8002b00 <__aeabi_i2d>
 80084dc:	00eb      	lsls	r3, r5, #3
 80084de:	aa28      	add	r2, sp, #160	; 0xa0
 80084e0:	18d3      	adds	r3, r2, r3
 80084e2:	6018      	str	r0, [r3, #0]
 80084e4:	6059      	str	r1, [r3, #4]
 80084e6:	3501      	adds	r5, #1
 80084e8:	e759      	b.n	800839e <__kernel_rem_pio2+0x4e>
 80084ea:	2000      	movs	r0, #0
 80084ec:	2100      	movs	r1, #0
 80084ee:	e7f5      	b.n	80084dc <__kernel_rem_pio2+0x18c>
 80084f0:	00fb      	lsls	r3, r7, #3
 80084f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084f4:	1ae9      	subs	r1, r5, r3
 80084f6:	3908      	subs	r1, #8
 80084f8:	18d3      	adds	r3, r2, r3
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	6808      	ldr	r0, [r1, #0]
 8008500:	6849      	ldr	r1, [r1, #4]
 8008502:	f7f9 fcf1 	bl	8001ee8 <__aeabi_dmul>
 8008506:	0002      	movs	r2, r0
 8008508:	000b      	movs	r3, r1
 800850a:	9804      	ldr	r0, [sp, #16]
 800850c:	9905      	ldr	r1, [sp, #20]
 800850e:	f7f8 fdc5 	bl	800109c <__aeabi_dadd>
 8008512:	9004      	str	r0, [sp, #16]
 8008514:	9105      	str	r1, [sp, #20]
 8008516:	3701      	adds	r7, #1
 8008518:	9b08      	ldr	r3, [sp, #32]
 800851a:	429f      	cmp	r7, r3
 800851c:	dde8      	ble.n	80084f0 <__kernel_rem_pio2+0x1a0>
 800851e:	00f3      	lsls	r3, r6, #3
 8008520:	aa78      	add	r2, sp, #480	; 0x1e0
 8008522:	18d3      	adds	r3, r2, r3
 8008524:	3601      	adds	r6, #1
 8008526:	9904      	ldr	r1, [sp, #16]
 8008528:	9a05      	ldr	r2, [sp, #20]
 800852a:	3508      	adds	r5, #8
 800852c:	6019      	str	r1, [r3, #0]
 800852e:	605a      	str	r2, [r3, #4]
 8008530:	e73e      	b.n	80083b0 <__kernel_rem_pio2+0x60>
 8008532:	2200      	movs	r2, #0
 8008534:	2300      	movs	r3, #0
 8008536:	2700      	movs	r7, #0
 8008538:	9204      	str	r2, [sp, #16]
 800853a:	9305      	str	r3, [sp, #20]
 800853c:	e7ec      	b.n	8008518 <__kernel_rem_pio2+0x1c8>
 800853e:	2200      	movs	r2, #0
 8008540:	4b65      	ldr	r3, [pc, #404]	; (80086d8 <__kernel_rem_pio2+0x388>)
 8008542:	0028      	movs	r0, r5
 8008544:	0031      	movs	r1, r6
 8008546:	f7f9 fccf 	bl	8001ee8 <__aeabi_dmul>
 800854a:	f7fa faa3 	bl	8002a94 <__aeabi_d2iz>
 800854e:	f7fa fad7 	bl	8002b00 <__aeabi_i2d>
 8008552:	00a3      	lsls	r3, r4, #2
 8008554:	425b      	negs	r3, r3
 8008556:	930c      	str	r3, [sp, #48]	; 0x30
 8008558:	2200      	movs	r2, #0
 800855a:	4b60      	ldr	r3, [pc, #384]	; (80086dc <__kernel_rem_pio2+0x38c>)
 800855c:	9004      	str	r0, [sp, #16]
 800855e:	9105      	str	r1, [sp, #20]
 8008560:	f7f9 fcc2 	bl	8001ee8 <__aeabi_dmul>
 8008564:	0002      	movs	r2, r0
 8008566:	000b      	movs	r3, r1
 8008568:	0028      	movs	r0, r5
 800856a:	0031      	movs	r1, r6
 800856c:	f7f9 ff2e 	bl	80023cc <__aeabi_dsub>
 8008570:	f7fa fa90 	bl	8002a94 <__aeabi_d2iz>
 8008574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008578:	3c01      	subs	r4, #1
 800857a:	5098      	str	r0, [r3, r2]
 800857c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800857e:	00e3      	lsls	r3, r4, #3
 8008580:	18d3      	adds	r3, r2, r3
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	9804      	ldr	r0, [sp, #16]
 8008588:	9905      	ldr	r1, [sp, #20]
 800858a:	f7f8 fd87 	bl	800109c <__aeabi_dadd>
 800858e:	0005      	movs	r5, r0
 8008590:	000e      	movs	r6, r1
 8008592:	e725      	b.n	80083e0 <__kernel_rem_pio2+0x90>
 8008594:	9b00      	ldr	r3, [sp, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <__kernel_rem_pio2+0x258>
 800859a:	1e7b      	subs	r3, r7, #1
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	aa14      	add	r2, sp, #80	; 0x50
 80085a0:	5898      	ldr	r0, [r3, r2]
 80085a2:	15c3      	asrs	r3, r0, #23
 80085a4:	9304      	str	r3, [sp, #16]
 80085a6:	e75e      	b.n	8008466 <__kernel_rem_pio2+0x116>
 80085a8:	2200      	movs	r2, #0
 80085aa:	4b4d      	ldr	r3, [pc, #308]	; (80086e0 <__kernel_rem_pio2+0x390>)
 80085ac:	f7f7 ff60 	bl	8000470 <__aeabi_dcmpge>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d13b      	bne.n	800862c <__kernel_rem_pio2+0x2dc>
 80085b4:	9004      	str	r0, [sp, #16]
 80085b6:	2200      	movs	r2, #0
 80085b8:	2300      	movs	r3, #0
 80085ba:	0028      	movs	r0, r5
 80085bc:	0031      	movs	r1, r6
 80085be:	f7f7 ff33 	bl	8000428 <__aeabi_dcmpeq>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	d100      	bne.n	80085c8 <__kernel_rem_pio2+0x278>
 80085c6:	e0c9      	b.n	800875c <__kernel_rem_pio2+0x40c>
 80085c8:	003b      	movs	r3, r7
 80085ca:	2200      	movs	r2, #0
 80085cc:	1e79      	subs	r1, r7, #1
 80085ce:	9806      	ldr	r0, [sp, #24]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	4298      	cmp	r0, r3
 80085d4:	dd54      	ble.n	8008680 <__kernel_rem_pio2+0x330>
 80085d6:	2a00      	cmp	r2, #0
 80085d8:	d074      	beq.n	80086c4 <__kernel_rem_pio2+0x374>
 80085da:	000f      	movs	r7, r1
 80085dc:	9b00      	ldr	r3, [sp, #0]
 80085de:	3b18      	subs	r3, #24
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	00bb      	lsls	r3, r7, #2
 80085e4:	aa14      	add	r2, sp, #80	; 0x50
 80085e6:	589b      	ldr	r3, [r3, r2]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d100      	bne.n	80085ee <__kernel_rem_pio2+0x29e>
 80085ec:	e0b1      	b.n	8008752 <__kernel_rem_pio2+0x402>
 80085ee:	9a00      	ldr	r2, [sp, #0]
 80085f0:	2000      	movs	r0, #0
 80085f2:	4938      	ldr	r1, [pc, #224]	; (80086d4 <__kernel_rem_pio2+0x384>)
 80085f4:	f000 fb4a 	bl	8008c8c <scalbn>
 80085f8:	003c      	movs	r4, r7
 80085fa:	0005      	movs	r5, r0
 80085fc:	000e      	movs	r6, r1
 80085fe:	2c00      	cmp	r4, #0
 8008600:	db00      	blt.n	8008604 <__kernel_rem_pio2+0x2b4>
 8008602:	e0e3      	b.n	80087cc <__kernel_rem_pio2+0x47c>
 8008604:	2500      	movs	r5, #0
 8008606:	00fb      	lsls	r3, r7, #3
 8008608:	9308      	str	r3, [sp, #32]
 800860a:	00fa      	lsls	r2, r7, #3
 800860c:	ab78      	add	r3, sp, #480	; 0x1e0
 800860e:	189c      	adds	r4, r3, r2
 8008610:	1b7b      	subs	r3, r7, r5
 8008612:	d400      	bmi.n	8008616 <__kernel_rem_pio2+0x2c6>
 8008614:	e116      	b.n	8008844 <__kernel_rem_pio2+0x4f4>
 8008616:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008618:	2b03      	cmp	r3, #3
 800861a:	d900      	bls.n	800861e <__kernel_rem_pio2+0x2ce>
 800861c:	e15d      	b.n	80088da <__kernel_rem_pio2+0x58a>
 800861e:	0018      	movs	r0, r3
 8008620:	f7f7 fd72 	bl	8000108 <__gnu_thumb1_case_uhi>
 8008624:	01940163 	.word	0x01940163
 8008628:	01160194 	.word	0x01160194
 800862c:	2302      	movs	r3, #2
 800862e:	9304      	str	r3, [sp, #16]
 8008630:	e71d      	b.n	800846e <__kernel_rem_pio2+0x11e>
 8008632:	0091      	lsls	r1, r2, #2
 8008634:	ab14      	add	r3, sp, #80	; 0x50
 8008636:	58cb      	ldr	r3, [r1, r3]
 8008638:	2c00      	cmp	r4, #0
 800863a:	d109      	bne.n	8008650 <__kernel_rem_pio2+0x300>
 800863c:	2b00      	cmp	r3, #0
 800863e:	d004      	beq.n	800864a <__kernel_rem_pio2+0x2fa>
 8008640:	4664      	mov	r4, ip
 8008642:	1ae3      	subs	r3, r4, r3
 8008644:	ac14      	add	r4, sp, #80	; 0x50
 8008646:	510b      	str	r3, [r1, r4]
 8008648:	2301      	movs	r3, #1
 800864a:	3201      	adds	r2, #1
 800864c:	001c      	movs	r4, r3
 800864e:	e716      	b.n	800847e <__kernel_rem_pio2+0x12e>
 8008650:	4824      	ldr	r0, [pc, #144]	; (80086e4 <__kernel_rem_pio2+0x394>)
 8008652:	1ac3      	subs	r3, r0, r3
 8008654:	a814      	add	r0, sp, #80	; 0x50
 8008656:	500b      	str	r3, [r1, r0]
 8008658:	0023      	movs	r3, r4
 800865a:	e7f6      	b.n	800864a <__kernel_rem_pio2+0x2fa>
 800865c:	1e7b      	subs	r3, r7, #1
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	aa14      	add	r2, sp, #80	; 0x50
 8008662:	589a      	ldr	r2, [r3, r2]
 8008664:	920c      	str	r2, [sp, #48]	; 0x30
 8008666:	0252      	lsls	r2, r2, #9
 8008668:	0a52      	lsrs	r2, r2, #9
 800866a:	a914      	add	r1, sp, #80	; 0x50
 800866c:	505a      	str	r2, [r3, r1]
 800866e:	e712      	b.n	8008496 <__kernel_rem_pio2+0x146>
 8008670:	1e7b      	subs	r3, r7, #1
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	aa14      	add	r2, sp, #80	; 0x50
 8008676:	589a      	ldr	r2, [r3, r2]
 8008678:	920c      	str	r2, [sp, #48]	; 0x30
 800867a:	0292      	lsls	r2, r2, #10
 800867c:	0a92      	lsrs	r2, r2, #10
 800867e:	e7f4      	b.n	800866a <__kernel_rem_pio2+0x31a>
 8008680:	0098      	lsls	r0, r3, #2
 8008682:	ac14      	add	r4, sp, #80	; 0x50
 8008684:	5900      	ldr	r0, [r0, r4]
 8008686:	4302      	orrs	r2, r0
 8008688:	e7a1      	b.n	80085ce <__kernel_rem_pio2+0x27e>
 800868a:	3301      	adds	r3, #1
 800868c:	009a      	lsls	r2, r3, #2
 800868e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008690:	4252      	negs	r2, r2
 8008692:	588a      	ldr	r2, [r1, r2]
 8008694:	2a00      	cmp	r2, #0
 8008696:	d0f8      	beq.n	800868a <__kernel_rem_pio2+0x33a>
 8008698:	2400      	movs	r4, #0
 800869a:	1c7a      	adds	r2, r7, #1
 800869c:	9204      	str	r2, [sp, #16]
 800869e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086a0:	18fb      	adds	r3, r7, r3
 80086a2:	18ba      	adds	r2, r7, r2
 80086a4:	00d2      	lsls	r2, r2, #3
 80086a6:	920c      	str	r2, [sp, #48]	; 0x30
 80086a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80086aa:	00fa      	lsls	r2, r7, #3
 80086ac:	920e      	str	r2, [sp, #56]	; 0x38
 80086ae:	aa28      	add	r2, sp, #160	; 0xa0
 80086b0:	1851      	adds	r1, r2, r1
 80086b2:	9110      	str	r1, [sp, #64]	; 0x40
 80086b4:	930a      	str	r3, [sp, #40]	; 0x28
 80086b6:	9213      	str	r2, [sp, #76]	; 0x4c
 80086b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ba:	9a04      	ldr	r2, [sp, #16]
 80086bc:	4293      	cmp	r3, r2
 80086be:	da13      	bge.n	80086e8 <__kernel_rem_pio2+0x398>
 80086c0:	001f      	movs	r7, r3
 80086c2:	e682      	b.n	80083ca <__kernel_rem_pio2+0x7a>
 80086c4:	2301      	movs	r3, #1
 80086c6:	e7e1      	b.n	800868c <__kernel_rem_pio2+0x33c>
 80086c8:	fffffd7c 	.word	0xfffffd7c
 80086cc:	08009188 	.word	0x08009188
 80086d0:	40200000 	.word	0x40200000
 80086d4:	3ff00000 	.word	0x3ff00000
 80086d8:	3e700000 	.word	0x3e700000
 80086dc:	41700000 	.word	0x41700000
 80086e0:	3fe00000 	.word	0x3fe00000
 80086e4:	00ffffff 	.word	0x00ffffff
 80086e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086ec:	18e5      	adds	r5, r4, r3
 80086ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086f0:	2600      	movs	r6, #0
 80086f2:	195d      	adds	r5, r3, r5
 80086f4:	9b04      	ldr	r3, [sp, #16]
 80086f6:	2700      	movs	r7, #0
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	58d0      	ldr	r0, [r2, r3]
 80086fc:	f7fa fa00 	bl	8002b00 <__aeabi_i2d>
 8008700:	6028      	str	r0, [r5, #0]
 8008702:	6069      	str	r1, [r5, #4]
 8008704:	2500      	movs	r5, #0
 8008706:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008708:	18e3      	adds	r3, r4, r3
 800870a:	9311      	str	r3, [sp, #68]	; 0x44
 800870c:	9b08      	ldr	r3, [sp, #32]
 800870e:	429d      	cmp	r5, r3
 8008710:	dd0a      	ble.n	8008728 <__kernel_rem_pio2+0x3d8>
 8008712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008714:	aa78      	add	r2, sp, #480	; 0x1e0
 8008716:	18e3      	adds	r3, r4, r3
 8008718:	18d3      	adds	r3, r2, r3
 800871a:	609e      	str	r6, [r3, #8]
 800871c:	60df      	str	r7, [r3, #12]
 800871e:	9b04      	ldr	r3, [sp, #16]
 8008720:	3408      	adds	r4, #8
 8008722:	3301      	adds	r3, #1
 8008724:	9304      	str	r3, [sp, #16]
 8008726:	e7c7      	b.n	80086b8 <__kernel_rem_pio2+0x368>
 8008728:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800872a:	00eb      	lsls	r3, r5, #3
 800872c:	18d1      	adds	r1, r2, r3
 800872e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008730:	6808      	ldr	r0, [r1, #0]
 8008732:	6849      	ldr	r1, [r1, #4]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f7f9 fbd5 	bl	8001ee8 <__aeabi_dmul>
 800873e:	0002      	movs	r2, r0
 8008740:	000b      	movs	r3, r1
 8008742:	0030      	movs	r0, r6
 8008744:	0039      	movs	r1, r7
 8008746:	f7f8 fca9 	bl	800109c <__aeabi_dadd>
 800874a:	3501      	adds	r5, #1
 800874c:	0006      	movs	r6, r0
 800874e:	000f      	movs	r7, r1
 8008750:	e7dc      	b.n	800870c <__kernel_rem_pio2+0x3bc>
 8008752:	9b00      	ldr	r3, [sp, #0]
 8008754:	3f01      	subs	r7, #1
 8008756:	3b18      	subs	r3, #24
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	e742      	b.n	80085e2 <__kernel_rem_pio2+0x292>
 800875c:	9b00      	ldr	r3, [sp, #0]
 800875e:	0028      	movs	r0, r5
 8008760:	425a      	negs	r2, r3
 8008762:	0031      	movs	r1, r6
 8008764:	f000 fa92 	bl	8008c8c <scalbn>
 8008768:	2200      	movs	r2, #0
 800876a:	4baa      	ldr	r3, [pc, #680]	; (8008a14 <__kernel_rem_pio2+0x6c4>)
 800876c:	0004      	movs	r4, r0
 800876e:	000d      	movs	r5, r1
 8008770:	f7f7 fe7e 	bl	8000470 <__aeabi_dcmpge>
 8008774:	2800      	cmp	r0, #0
 8008776:	d021      	beq.n	80087bc <__kernel_rem_pio2+0x46c>
 8008778:	2200      	movs	r2, #0
 800877a:	4ba7      	ldr	r3, [pc, #668]	; (8008a18 <__kernel_rem_pio2+0x6c8>)
 800877c:	0020      	movs	r0, r4
 800877e:	0029      	movs	r1, r5
 8008780:	f7f9 fbb2 	bl	8001ee8 <__aeabi_dmul>
 8008784:	f7fa f986 	bl	8002a94 <__aeabi_d2iz>
 8008788:	0006      	movs	r6, r0
 800878a:	f7fa f9b9 	bl	8002b00 <__aeabi_i2d>
 800878e:	2200      	movs	r2, #0
 8008790:	4ba0      	ldr	r3, [pc, #640]	; (8008a14 <__kernel_rem_pio2+0x6c4>)
 8008792:	f7f9 fba9 	bl	8001ee8 <__aeabi_dmul>
 8008796:	0002      	movs	r2, r0
 8008798:	000b      	movs	r3, r1
 800879a:	0020      	movs	r0, r4
 800879c:	0029      	movs	r1, r5
 800879e:	f7f9 fe15 	bl	80023cc <__aeabi_dsub>
 80087a2:	f7fa f977 	bl	8002a94 <__aeabi_d2iz>
 80087a6:	00ba      	lsls	r2, r7, #2
 80087a8:	ab14      	add	r3, sp, #80	; 0x50
 80087aa:	50d0      	str	r0, [r2, r3]
 80087ac:	9b00      	ldr	r3, [sp, #0]
 80087ae:	3701      	adds	r7, #1
 80087b0:	3318      	adds	r3, #24
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	aa14      	add	r2, sp, #80	; 0x50
 80087b6:	00bb      	lsls	r3, r7, #2
 80087b8:	509e      	str	r6, [r3, r2]
 80087ba:	e718      	b.n	80085ee <__kernel_rem_pio2+0x29e>
 80087bc:	0020      	movs	r0, r4
 80087be:	0029      	movs	r1, r5
 80087c0:	f7fa f968 	bl	8002a94 <__aeabi_d2iz>
 80087c4:	00be      	lsls	r6, r7, #2
 80087c6:	ab14      	add	r3, sp, #80	; 0x50
 80087c8:	50f0      	str	r0, [r6, r3]
 80087ca:	e710      	b.n	80085ee <__kernel_rem_pio2+0x29e>
 80087cc:	00e3      	lsls	r3, r4, #3
 80087ce:	aa78      	add	r2, sp, #480	; 0x1e0
 80087d0:	18d3      	adds	r3, r2, r3
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	aa14      	add	r2, sp, #80	; 0x50
 80087d6:	00a3      	lsls	r3, r4, #2
 80087d8:	5898      	ldr	r0, [r3, r2]
 80087da:	f7fa f991 	bl	8002b00 <__aeabi_i2d>
 80087de:	002a      	movs	r2, r5
 80087e0:	0033      	movs	r3, r6
 80087e2:	f7f9 fb81 	bl	8001ee8 <__aeabi_dmul>
 80087e6:	9b00      	ldr	r3, [sp, #0]
 80087e8:	2200      	movs	r2, #0
 80087ea:	6018      	str	r0, [r3, #0]
 80087ec:	6059      	str	r1, [r3, #4]
 80087ee:	0028      	movs	r0, r5
 80087f0:	0031      	movs	r1, r6
 80087f2:	4b89      	ldr	r3, [pc, #548]	; (8008a18 <__kernel_rem_pio2+0x6c8>)
 80087f4:	f7f9 fb78 	bl	8001ee8 <__aeabi_dmul>
 80087f8:	3c01      	subs	r4, #1
 80087fa:	0005      	movs	r5, r0
 80087fc:	000e      	movs	r6, r1
 80087fe:	e6fe      	b.n	80085fe <__kernel_rem_pio2+0x2ae>
 8008800:	4a86      	ldr	r2, [pc, #536]	; (8008a1c <__kernel_rem_pio2+0x6cc>)
 8008802:	00f3      	lsls	r3, r6, #3
 8008804:	18d1      	adds	r1, r2, r3
 8008806:	18e3      	adds	r3, r4, r3
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	6808      	ldr	r0, [r1, #0]
 800880e:	6849      	ldr	r1, [r1, #4]
 8008810:	f7f9 fb6a 	bl	8001ee8 <__aeabi_dmul>
 8008814:	0002      	movs	r2, r0
 8008816:	000b      	movs	r3, r1
 8008818:	9800      	ldr	r0, [sp, #0]
 800881a:	9901      	ldr	r1, [sp, #4]
 800881c:	f7f8 fc3e 	bl	800109c <__aeabi_dadd>
 8008820:	9000      	str	r0, [sp, #0]
 8008822:	9101      	str	r1, [sp, #4]
 8008824:	3601      	adds	r6, #1
 8008826:	9b06      	ldr	r3, [sp, #24]
 8008828:	429e      	cmp	r6, r3
 800882a:	dc01      	bgt.n	8008830 <__kernel_rem_pio2+0x4e0>
 800882c:	42b5      	cmp	r5, r6
 800882e:	dae7      	bge.n	8008800 <__kernel_rem_pio2+0x4b0>
 8008830:	00eb      	lsls	r3, r5, #3
 8008832:	aa50      	add	r2, sp, #320	; 0x140
 8008834:	18d3      	adds	r3, r2, r3
 8008836:	3501      	adds	r5, #1
 8008838:	9900      	ldr	r1, [sp, #0]
 800883a:	9a01      	ldr	r2, [sp, #4]
 800883c:	3c08      	subs	r4, #8
 800883e:	6019      	str	r1, [r3, #0]
 8008840:	605a      	str	r2, [r3, #4]
 8008842:	e6e5      	b.n	8008610 <__kernel_rem_pio2+0x2c0>
 8008844:	2200      	movs	r2, #0
 8008846:	2300      	movs	r3, #0
 8008848:	2600      	movs	r6, #0
 800884a:	9200      	str	r2, [sp, #0]
 800884c:	9301      	str	r3, [sp, #4]
 800884e:	e7ea      	b.n	8008826 <__kernel_rem_pio2+0x4d6>
 8008850:	aa50      	add	r2, sp, #320	; 0x140
 8008852:	4694      	mov	ip, r2
 8008854:	9b08      	ldr	r3, [sp, #32]
 8008856:	003e      	movs	r6, r7
 8008858:	4463      	add	r3, ip
 800885a:	001c      	movs	r4, r3
 800885c:	001d      	movs	r5, r3
 800885e:	3d08      	subs	r5, #8
 8008860:	2e00      	cmp	r6, #0
 8008862:	dd00      	ble.n	8008866 <__kernel_rem_pio2+0x516>
 8008864:	e07f      	b.n	8008966 <__kernel_rem_pio2+0x616>
 8008866:	9700      	str	r7, [sp, #0]
 8008868:	9b00      	ldr	r3, [sp, #0]
 800886a:	3c08      	subs	r4, #8
 800886c:	2b01      	cmp	r3, #1
 800886e:	dd00      	ble.n	8008872 <__kernel_rem_pio2+0x522>
 8008870:	e099      	b.n	80089a6 <__kernel_rem_pio2+0x656>
 8008872:	2000      	movs	r0, #0
 8008874:	0001      	movs	r1, r0
 8008876:	2f01      	cmp	r7, #1
 8008878:	dd00      	ble.n	800887c <__kernel_rem_pio2+0x52c>
 800887a:	e0b4      	b.n	80089e6 <__kernel_rem_pio2+0x696>
 800887c:	9b04      	ldr	r3, [sp, #16]
 800887e:	9f50      	ldr	r7, [sp, #320]	; 0x140
 8008880:	9e51      	ldr	r6, [sp, #324]	; 0x144
 8008882:	9d52      	ldr	r5, [sp, #328]	; 0x148
 8008884:	9c53      	ldr	r4, [sp, #332]	; 0x14c
 8008886:	2b00      	cmp	r3, #0
 8008888:	d000      	beq.n	800888c <__kernel_rem_pio2+0x53c>
 800888a:	e0b5      	b.n	80089f8 <__kernel_rem_pio2+0x6a8>
 800888c:	0033      	movs	r3, r6
 800888e:	003a      	movs	r2, r7
 8008890:	9e03      	ldr	r6, [sp, #12]
 8008892:	6032      	str	r2, [r6, #0]
 8008894:	6073      	str	r3, [r6, #4]
 8008896:	002a      	movs	r2, r5
 8008898:	0023      	movs	r3, r4
 800889a:	60b2      	str	r2, [r6, #8]
 800889c:	60f3      	str	r3, [r6, #12]
 800889e:	0002      	movs	r2, r0
 80088a0:	000b      	movs	r3, r1
 80088a2:	6132      	str	r2, [r6, #16]
 80088a4:	6173      	str	r3, [r6, #20]
 80088a6:	e018      	b.n	80088da <__kernel_rem_pio2+0x58a>
 80088a8:	00fb      	lsls	r3, r7, #3
 80088aa:	aa50      	add	r2, sp, #320	; 0x140
 80088ac:	18d3      	adds	r3, r2, r3
 80088ae:	0028      	movs	r0, r5
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	0021      	movs	r1, r4
 80088b6:	f7f8 fbf1 	bl	800109c <__aeabi_dadd>
 80088ba:	0005      	movs	r5, r0
 80088bc:	000c      	movs	r4, r1
 80088be:	3f01      	subs	r7, #1
 80088c0:	2f00      	cmp	r7, #0
 80088c2:	daf1      	bge.n	80088a8 <__kernel_rem_pio2+0x558>
 80088c4:	9b04      	ldr	r3, [sp, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <__kernel_rem_pio2+0x580>
 80088ca:	2380      	movs	r3, #128	; 0x80
 80088cc:	061b      	lsls	r3, r3, #24
 80088ce:	18e4      	adds	r4, r4, r3
 80088d0:	002a      	movs	r2, r5
 80088d2:	0023      	movs	r3, r4
 80088d4:	9903      	ldr	r1, [sp, #12]
 80088d6:	600a      	str	r2, [r1, #0]
 80088d8:	604b      	str	r3, [r1, #4]
 80088da:	2007      	movs	r0, #7
 80088dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088de:	4003      	ands	r3, r0
 80088e0:	0018      	movs	r0, r3
 80088e2:	23a1      	movs	r3, #161	; 0xa1
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	449d      	add	sp, r3
 80088e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ea:	2500      	movs	r5, #0
 80088ec:	002c      	movs	r4, r5
 80088ee:	e7e7      	b.n	80088c0 <__kernel_rem_pio2+0x570>
 80088f0:	00e3      	lsls	r3, r4, #3
 80088f2:	aa50      	add	r2, sp, #320	; 0x140
 80088f4:	18d3      	adds	r3, r2, r3
 80088f6:	0030      	movs	r0, r6
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	0029      	movs	r1, r5
 80088fe:	f7f8 fbcd 	bl	800109c <__aeabi_dadd>
 8008902:	0006      	movs	r6, r0
 8008904:	000d      	movs	r5, r1
 8008906:	3c01      	subs	r4, #1
 8008908:	2c00      	cmp	r4, #0
 800890a:	daf1      	bge.n	80088f0 <__kernel_rem_pio2+0x5a0>
 800890c:	9b04      	ldr	r3, [sp, #16]
 800890e:	0029      	movs	r1, r5
 8008910:	2b00      	cmp	r3, #0
 8008912:	d002      	beq.n	800891a <__kernel_rem_pio2+0x5ca>
 8008914:	2380      	movs	r3, #128	; 0x80
 8008916:	061b      	lsls	r3, r3, #24
 8008918:	18e9      	adds	r1, r5, r3
 800891a:	000b      	movs	r3, r1
 800891c:	0032      	movs	r2, r6
 800891e:	9903      	ldr	r1, [sp, #12]
 8008920:	2401      	movs	r4, #1
 8008922:	600a      	str	r2, [r1, #0]
 8008924:	604b      	str	r3, [r1, #4]
 8008926:	9850      	ldr	r0, [sp, #320]	; 0x140
 8008928:	9951      	ldr	r1, [sp, #324]	; 0x144
 800892a:	002b      	movs	r3, r5
 800892c:	f7f9 fd4e 	bl	80023cc <__aeabi_dsub>
 8008930:	42a7      	cmp	r7, r4
 8008932:	da0f      	bge.n	8008954 <__kernel_rem_pio2+0x604>
 8008934:	9b04      	ldr	r3, [sp, #16]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d002      	beq.n	8008940 <__kernel_rem_pio2+0x5f0>
 800893a:	2380      	movs	r3, #128	; 0x80
 800893c:	061b      	lsls	r3, r3, #24
 800893e:	18c9      	adds	r1, r1, r3
 8008940:	000b      	movs	r3, r1
 8008942:	0002      	movs	r2, r0
 8008944:	9903      	ldr	r1, [sp, #12]
 8008946:	608a      	str	r2, [r1, #8]
 8008948:	60cb      	str	r3, [r1, #12]
 800894a:	e7c6      	b.n	80088da <__kernel_rem_pio2+0x58a>
 800894c:	2600      	movs	r6, #0
 800894e:	003c      	movs	r4, r7
 8008950:	0035      	movs	r5, r6
 8008952:	e7d9      	b.n	8008908 <__kernel_rem_pio2+0x5b8>
 8008954:	00e3      	lsls	r3, r4, #3
 8008956:	aa50      	add	r2, sp, #320	; 0x140
 8008958:	18d3      	adds	r3, r2, r3
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f7f8 fb9d 	bl	800109c <__aeabi_dadd>
 8008962:	3401      	adds	r4, #1
 8008964:	e7e4      	b.n	8008930 <__kernel_rem_pio2+0x5e0>
 8008966:	682a      	ldr	r2, [r5, #0]
 8008968:	686b      	ldr	r3, [r5, #4]
 800896a:	9200      	str	r2, [sp, #0]
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	9800      	ldr	r0, [sp, #0]
 8008970:	9901      	ldr	r1, [sp, #4]
 8008972:	68aa      	ldr	r2, [r5, #8]
 8008974:	68eb      	ldr	r3, [r5, #12]
 8008976:	9206      	str	r2, [sp, #24]
 8008978:	9307      	str	r3, [sp, #28]
 800897a:	f7f8 fb8f 	bl	800109c <__aeabi_dadd>
 800897e:	0002      	movs	r2, r0
 8008980:	000b      	movs	r3, r1
 8008982:	9008      	str	r0, [sp, #32]
 8008984:	9109      	str	r1, [sp, #36]	; 0x24
 8008986:	9800      	ldr	r0, [sp, #0]
 8008988:	9901      	ldr	r1, [sp, #4]
 800898a:	f7f9 fd1f 	bl	80023cc <__aeabi_dsub>
 800898e:	9a06      	ldr	r2, [sp, #24]
 8008990:	9b07      	ldr	r3, [sp, #28]
 8008992:	f7f8 fb83 	bl	800109c <__aeabi_dadd>
 8008996:	9a08      	ldr	r2, [sp, #32]
 8008998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800899a:	3e01      	subs	r6, #1
 800899c:	60a8      	str	r0, [r5, #8]
 800899e:	60e9      	str	r1, [r5, #12]
 80089a0:	602a      	str	r2, [r5, #0]
 80089a2:	606b      	str	r3, [r5, #4]
 80089a4:	e75b      	b.n	800885e <__kernel_rem_pio2+0x50e>
 80089a6:	9b00      	ldr	r3, [sp, #0]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	6822      	ldr	r2, [r4, #0]
 80089ae:	6863      	ldr	r3, [r4, #4]
 80089b0:	9206      	str	r2, [sp, #24]
 80089b2:	9307      	str	r3, [sp, #28]
 80089b4:	9806      	ldr	r0, [sp, #24]
 80089b6:	9907      	ldr	r1, [sp, #28]
 80089b8:	68a2      	ldr	r2, [r4, #8]
 80089ba:	68e3      	ldr	r3, [r4, #12]
 80089bc:	9208      	str	r2, [sp, #32]
 80089be:	9309      	str	r3, [sp, #36]	; 0x24
 80089c0:	f7f8 fb6c 	bl	800109c <__aeabi_dadd>
 80089c4:	0002      	movs	r2, r0
 80089c6:	000b      	movs	r3, r1
 80089c8:	0005      	movs	r5, r0
 80089ca:	000e      	movs	r6, r1
 80089cc:	9806      	ldr	r0, [sp, #24]
 80089ce:	9907      	ldr	r1, [sp, #28]
 80089d0:	f7f9 fcfc 	bl	80023cc <__aeabi_dsub>
 80089d4:	9a08      	ldr	r2, [sp, #32]
 80089d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d8:	f7f8 fb60 	bl	800109c <__aeabi_dadd>
 80089dc:	6025      	str	r5, [r4, #0]
 80089de:	6066      	str	r6, [r4, #4]
 80089e0:	60a0      	str	r0, [r4, #8]
 80089e2:	60e1      	str	r1, [r4, #12]
 80089e4:	e740      	b.n	8008868 <__kernel_rem_pio2+0x518>
 80089e6:	00fb      	lsls	r3, r7, #3
 80089e8:	aa50      	add	r2, sp, #320	; 0x140
 80089ea:	18d3      	adds	r3, r2, r3
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f7f8 fb54 	bl	800109c <__aeabi_dadd>
 80089f4:	3f01      	subs	r7, #1
 80089f6:	e73e      	b.n	8008876 <__kernel_rem_pio2+0x526>
 80089f8:	9b03      	ldr	r3, [sp, #12]
 80089fa:	9a03      	ldr	r2, [sp, #12]
 80089fc:	601f      	str	r7, [r3, #0]
 80089fe:	2380      	movs	r3, #128	; 0x80
 8008a00:	061b      	lsls	r3, r3, #24
 8008a02:	18f6      	adds	r6, r6, r3
 8008a04:	18e4      	adds	r4, r4, r3
 8008a06:	18c9      	adds	r1, r1, r3
 8008a08:	6056      	str	r6, [r2, #4]
 8008a0a:	6095      	str	r5, [r2, #8]
 8008a0c:	60d4      	str	r4, [r2, #12]
 8008a0e:	6110      	str	r0, [r2, #16]
 8008a10:	6151      	str	r1, [r2, #20]
 8008a12:	e762      	b.n	80088da <__kernel_rem_pio2+0x58a>
 8008a14:	41700000 	.word	0x41700000
 8008a18:	3e700000 	.word	0x3e700000
 8008a1c:	08009148 	.word	0x08009148

08008a20 <__kernel_sin>:
 8008a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a22:	b089      	sub	sp, #36	; 0x24
 8008a24:	9202      	str	r2, [sp, #8]
 8008a26:	9303      	str	r3, [sp, #12]
 8008a28:	4a46      	ldr	r2, [pc, #280]	; (8008b44 <__kernel_sin+0x124>)
 8008a2a:	004b      	lsls	r3, r1, #1
 8008a2c:	0005      	movs	r5, r0
 8008a2e:	000c      	movs	r4, r1
 8008a30:	085b      	lsrs	r3, r3, #1
 8008a32:	4293      	cmp	r3, r2
 8008a34:	dc03      	bgt.n	8008a3e <__kernel_sin+0x1e>
 8008a36:	f7fa f82d 	bl	8002a94 <__aeabi_d2iz>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d04c      	beq.n	8008ad8 <__kernel_sin+0xb8>
 8008a3e:	002a      	movs	r2, r5
 8008a40:	0023      	movs	r3, r4
 8008a42:	0028      	movs	r0, r5
 8008a44:	0021      	movs	r1, r4
 8008a46:	f7f9 fa4f 	bl	8001ee8 <__aeabi_dmul>
 8008a4a:	0006      	movs	r6, r0
 8008a4c:	000f      	movs	r7, r1
 8008a4e:	0002      	movs	r2, r0
 8008a50:	000b      	movs	r3, r1
 8008a52:	0028      	movs	r0, r5
 8008a54:	0021      	movs	r1, r4
 8008a56:	f7f9 fa47 	bl	8001ee8 <__aeabi_dmul>
 8008a5a:	4a3b      	ldr	r2, [pc, #236]	; (8008b48 <__kernel_sin+0x128>)
 8008a5c:	9000      	str	r0, [sp, #0]
 8008a5e:	9101      	str	r1, [sp, #4]
 8008a60:	4b3a      	ldr	r3, [pc, #232]	; (8008b4c <__kernel_sin+0x12c>)
 8008a62:	0030      	movs	r0, r6
 8008a64:	0039      	movs	r1, r7
 8008a66:	f7f9 fa3f 	bl	8001ee8 <__aeabi_dmul>
 8008a6a:	4a39      	ldr	r2, [pc, #228]	; (8008b50 <__kernel_sin+0x130>)
 8008a6c:	4b39      	ldr	r3, [pc, #228]	; (8008b54 <__kernel_sin+0x134>)
 8008a6e:	f7f9 fcad 	bl	80023cc <__aeabi_dsub>
 8008a72:	0032      	movs	r2, r6
 8008a74:	003b      	movs	r3, r7
 8008a76:	f7f9 fa37 	bl	8001ee8 <__aeabi_dmul>
 8008a7a:	4a37      	ldr	r2, [pc, #220]	; (8008b58 <__kernel_sin+0x138>)
 8008a7c:	4b37      	ldr	r3, [pc, #220]	; (8008b5c <__kernel_sin+0x13c>)
 8008a7e:	f7f8 fb0d 	bl	800109c <__aeabi_dadd>
 8008a82:	0032      	movs	r2, r6
 8008a84:	003b      	movs	r3, r7
 8008a86:	f7f9 fa2f 	bl	8001ee8 <__aeabi_dmul>
 8008a8a:	4a35      	ldr	r2, [pc, #212]	; (8008b60 <__kernel_sin+0x140>)
 8008a8c:	4b35      	ldr	r3, [pc, #212]	; (8008b64 <__kernel_sin+0x144>)
 8008a8e:	f7f9 fc9d 	bl	80023cc <__aeabi_dsub>
 8008a92:	0032      	movs	r2, r6
 8008a94:	003b      	movs	r3, r7
 8008a96:	f7f9 fa27 	bl	8001ee8 <__aeabi_dmul>
 8008a9a:	4b33      	ldr	r3, [pc, #204]	; (8008b68 <__kernel_sin+0x148>)
 8008a9c:	4a33      	ldr	r2, [pc, #204]	; (8008b6c <__kernel_sin+0x14c>)
 8008a9e:	f7f8 fafd 	bl	800109c <__aeabi_dadd>
 8008aa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aa4:	9004      	str	r0, [sp, #16]
 8008aa6:	9105      	str	r1, [sp, #20]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d119      	bne.n	8008ae0 <__kernel_sin+0xc0>
 8008aac:	0002      	movs	r2, r0
 8008aae:	000b      	movs	r3, r1
 8008ab0:	0030      	movs	r0, r6
 8008ab2:	0039      	movs	r1, r7
 8008ab4:	f7f9 fa18 	bl	8001ee8 <__aeabi_dmul>
 8008ab8:	4a2d      	ldr	r2, [pc, #180]	; (8008b70 <__kernel_sin+0x150>)
 8008aba:	4b2e      	ldr	r3, [pc, #184]	; (8008b74 <__kernel_sin+0x154>)
 8008abc:	f7f9 fc86 	bl	80023cc <__aeabi_dsub>
 8008ac0:	9a00      	ldr	r2, [sp, #0]
 8008ac2:	9b01      	ldr	r3, [sp, #4]
 8008ac4:	f7f9 fa10 	bl	8001ee8 <__aeabi_dmul>
 8008ac8:	0002      	movs	r2, r0
 8008aca:	000b      	movs	r3, r1
 8008acc:	0028      	movs	r0, r5
 8008ace:	0021      	movs	r1, r4
 8008ad0:	f7f8 fae4 	bl	800109c <__aeabi_dadd>
 8008ad4:	0005      	movs	r5, r0
 8008ad6:	000c      	movs	r4, r1
 8008ad8:	0028      	movs	r0, r5
 8008ada:	0021      	movs	r1, r4
 8008adc:	b009      	add	sp, #36	; 0x24
 8008ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	9802      	ldr	r0, [sp, #8]
 8008ae4:	9903      	ldr	r1, [sp, #12]
 8008ae6:	4b24      	ldr	r3, [pc, #144]	; (8008b78 <__kernel_sin+0x158>)
 8008ae8:	f7f9 f9fe 	bl	8001ee8 <__aeabi_dmul>
 8008aec:	9a04      	ldr	r2, [sp, #16]
 8008aee:	9b05      	ldr	r3, [sp, #20]
 8008af0:	9006      	str	r0, [sp, #24]
 8008af2:	9107      	str	r1, [sp, #28]
 8008af4:	9800      	ldr	r0, [sp, #0]
 8008af6:	9901      	ldr	r1, [sp, #4]
 8008af8:	f7f9 f9f6 	bl	8001ee8 <__aeabi_dmul>
 8008afc:	0002      	movs	r2, r0
 8008afe:	000b      	movs	r3, r1
 8008b00:	9806      	ldr	r0, [sp, #24]
 8008b02:	9907      	ldr	r1, [sp, #28]
 8008b04:	f7f9 fc62 	bl	80023cc <__aeabi_dsub>
 8008b08:	0032      	movs	r2, r6
 8008b0a:	003b      	movs	r3, r7
 8008b0c:	f7f9 f9ec 	bl	8001ee8 <__aeabi_dmul>
 8008b10:	9a02      	ldr	r2, [sp, #8]
 8008b12:	9b03      	ldr	r3, [sp, #12]
 8008b14:	f7f9 fc5a 	bl	80023cc <__aeabi_dsub>
 8008b18:	4a15      	ldr	r2, [pc, #84]	; (8008b70 <__kernel_sin+0x150>)
 8008b1a:	0006      	movs	r6, r0
 8008b1c:	000f      	movs	r7, r1
 8008b1e:	9800      	ldr	r0, [sp, #0]
 8008b20:	9901      	ldr	r1, [sp, #4]
 8008b22:	4b14      	ldr	r3, [pc, #80]	; (8008b74 <__kernel_sin+0x154>)
 8008b24:	f7f9 f9e0 	bl	8001ee8 <__aeabi_dmul>
 8008b28:	0002      	movs	r2, r0
 8008b2a:	000b      	movs	r3, r1
 8008b2c:	0030      	movs	r0, r6
 8008b2e:	0039      	movs	r1, r7
 8008b30:	f7f8 fab4 	bl	800109c <__aeabi_dadd>
 8008b34:	0002      	movs	r2, r0
 8008b36:	000b      	movs	r3, r1
 8008b38:	0028      	movs	r0, r5
 8008b3a:	0021      	movs	r1, r4
 8008b3c:	f7f9 fc46 	bl	80023cc <__aeabi_dsub>
 8008b40:	e7c8      	b.n	8008ad4 <__kernel_sin+0xb4>
 8008b42:	46c0      	nop			; (mov r8, r8)
 8008b44:	3e3fffff 	.word	0x3e3fffff
 8008b48:	5acfd57c 	.word	0x5acfd57c
 8008b4c:	3de5d93a 	.word	0x3de5d93a
 8008b50:	8a2b9ceb 	.word	0x8a2b9ceb
 8008b54:	3e5ae5e6 	.word	0x3e5ae5e6
 8008b58:	57b1fe7d 	.word	0x57b1fe7d
 8008b5c:	3ec71de3 	.word	0x3ec71de3
 8008b60:	19c161d5 	.word	0x19c161d5
 8008b64:	3f2a01a0 	.word	0x3f2a01a0
 8008b68:	3f811111 	.word	0x3f811111
 8008b6c:	1110f8a6 	.word	0x1110f8a6
 8008b70:	55555549 	.word	0x55555549
 8008b74:	3fc55555 	.word	0x3fc55555
 8008b78:	3fe00000 	.word	0x3fe00000

08008b7c <fabs>:
 8008b7c:	0049      	lsls	r1, r1, #1
 8008b7e:	084b      	lsrs	r3, r1, #1
 8008b80:	0019      	movs	r1, r3
 8008b82:	4770      	bx	lr

08008b84 <floor>:
 8008b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b86:	004b      	lsls	r3, r1, #1
 8008b88:	4a39      	ldr	r2, [pc, #228]	; (8008c70 <floor+0xec>)
 8008b8a:	0d5b      	lsrs	r3, r3, #21
 8008b8c:	b085      	sub	sp, #20
 8008b8e:	189e      	adds	r6, r3, r2
 8008b90:	000c      	movs	r4, r1
 8008b92:	0005      	movs	r5, r0
 8008b94:	9003      	str	r0, [sp, #12]
 8008b96:	2e13      	cmp	r6, #19
 8008b98:	dc34      	bgt.n	8008c04 <floor+0x80>
 8008b9a:	2e00      	cmp	r6, #0
 8008b9c:	da15      	bge.n	8008bca <floor+0x46>
 8008b9e:	4a35      	ldr	r2, [pc, #212]	; (8008c74 <floor+0xf0>)
 8008ba0:	4b35      	ldr	r3, [pc, #212]	; (8008c78 <floor+0xf4>)
 8008ba2:	f7f8 fa7b 	bl	800109c <__aeabi_dadd>
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f7f7 fc57 	bl	800045c <__aeabi_dcmpgt>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d008      	beq.n	8008bc4 <floor+0x40>
 8008bb2:	2c00      	cmp	r4, #0
 8008bb4:	da59      	bge.n	8008c6a <floor+0xe6>
 8008bb6:	0063      	lsls	r3, r4, #1
 8008bb8:	085b      	lsrs	r3, r3, #1
 8008bba:	432b      	orrs	r3, r5
 8008bbc:	2500      	movs	r5, #0
 8008bbe:	42ab      	cmp	r3, r5
 8008bc0:	d000      	beq.n	8008bc4 <floor+0x40>
 8008bc2:	4c2e      	ldr	r4, [pc, #184]	; (8008c7c <floor+0xf8>)
 8008bc4:	0028      	movs	r0, r5
 8008bc6:	0021      	movs	r1, r4
 8008bc8:	e026      	b.n	8008c18 <floor+0x94>
 8008bca:	4f2d      	ldr	r7, [pc, #180]	; (8008c80 <floor+0xfc>)
 8008bcc:	4137      	asrs	r7, r6
 8008bce:	003b      	movs	r3, r7
 8008bd0:	400b      	ands	r3, r1
 8008bd2:	4303      	orrs	r3, r0
 8008bd4:	d020      	beq.n	8008c18 <floor+0x94>
 8008bd6:	9000      	str	r0, [sp, #0]
 8008bd8:	9101      	str	r1, [sp, #4]
 8008bda:	4a26      	ldr	r2, [pc, #152]	; (8008c74 <floor+0xf0>)
 8008bdc:	4b26      	ldr	r3, [pc, #152]	; (8008c78 <floor+0xf4>)
 8008bde:	9800      	ldr	r0, [sp, #0]
 8008be0:	9901      	ldr	r1, [sp, #4]
 8008be2:	f7f8 fa5b 	bl	800109c <__aeabi_dadd>
 8008be6:	2200      	movs	r2, #0
 8008be8:	2300      	movs	r3, #0
 8008bea:	f7f7 fc37 	bl	800045c <__aeabi_dcmpgt>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d0e8      	beq.n	8008bc4 <floor+0x40>
 8008bf2:	2c00      	cmp	r4, #0
 8008bf4:	da03      	bge.n	8008bfe <floor+0x7a>
 8008bf6:	2380      	movs	r3, #128	; 0x80
 8008bf8:	035b      	lsls	r3, r3, #13
 8008bfa:	4133      	asrs	r3, r6
 8008bfc:	18e4      	adds	r4, r4, r3
 8008bfe:	43bc      	bics	r4, r7
 8008c00:	2500      	movs	r5, #0
 8008c02:	e7df      	b.n	8008bc4 <floor+0x40>
 8008c04:	2e33      	cmp	r6, #51	; 0x33
 8008c06:	dd09      	ble.n	8008c1c <floor+0x98>
 8008c08:	2380      	movs	r3, #128	; 0x80
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	429e      	cmp	r6, r3
 8008c0e:	d103      	bne.n	8008c18 <floor+0x94>
 8008c10:	0002      	movs	r2, r0
 8008c12:	000b      	movs	r3, r1
 8008c14:	f7f8 fa42 	bl	800109c <__aeabi_dadd>
 8008c18:	b005      	add	sp, #20
 8008c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c1c:	2701      	movs	r7, #1
 8008c1e:	4a19      	ldr	r2, [pc, #100]	; (8008c84 <floor+0x100>)
 8008c20:	427f      	negs	r7, r7
 8008c22:	189b      	adds	r3, r3, r2
 8008c24:	40df      	lsrs	r7, r3
 8008c26:	4238      	tst	r0, r7
 8008c28:	d0f6      	beq.n	8008c18 <floor+0x94>
 8008c2a:	9000      	str	r0, [sp, #0]
 8008c2c:	9101      	str	r1, [sp, #4]
 8008c2e:	4a11      	ldr	r2, [pc, #68]	; (8008c74 <floor+0xf0>)
 8008c30:	4b11      	ldr	r3, [pc, #68]	; (8008c78 <floor+0xf4>)
 8008c32:	9800      	ldr	r0, [sp, #0]
 8008c34:	9901      	ldr	r1, [sp, #4]
 8008c36:	f7f8 fa31 	bl	800109c <__aeabi_dadd>
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f7f7 fc0d 	bl	800045c <__aeabi_dcmpgt>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d0be      	beq.n	8008bc4 <floor+0x40>
 8008c46:	2c00      	cmp	r4, #0
 8008c48:	da02      	bge.n	8008c50 <floor+0xcc>
 8008c4a:	2e14      	cmp	r6, #20
 8008c4c:	d102      	bne.n	8008c54 <floor+0xd0>
 8008c4e:	3401      	adds	r4, #1
 8008c50:	43bd      	bics	r5, r7
 8008c52:	e7b7      	b.n	8008bc4 <floor+0x40>
 8008c54:	2334      	movs	r3, #52	; 0x34
 8008c56:	1b9e      	subs	r6, r3, r6
 8008c58:	3b33      	subs	r3, #51	; 0x33
 8008c5a:	40b3      	lsls	r3, r6
 8008c5c:	18ed      	adds	r5, r5, r3
 8008c5e:	9b03      	ldr	r3, [sp, #12]
 8008c60:	429d      	cmp	r5, r3
 8008c62:	419b      	sbcs	r3, r3
 8008c64:	425b      	negs	r3, r3
 8008c66:	18e4      	adds	r4, r4, r3
 8008c68:	e7f2      	b.n	8008c50 <floor+0xcc>
 8008c6a:	2500      	movs	r5, #0
 8008c6c:	002c      	movs	r4, r5
 8008c6e:	e7a9      	b.n	8008bc4 <floor+0x40>
 8008c70:	fffffc01 	.word	0xfffffc01
 8008c74:	8800759c 	.word	0x8800759c
 8008c78:	7e37e43c 	.word	0x7e37e43c
 8008c7c:	bff00000 	.word	0xbff00000
 8008c80:	000fffff 	.word	0x000fffff
 8008c84:	fffffbed 	.word	0xfffffbed

08008c88 <matherr>:
 8008c88:	2000      	movs	r0, #0
 8008c8a:	4770      	bx	lr

08008c8c <scalbn>:
 8008c8c:	004b      	lsls	r3, r1, #1
 8008c8e:	b570      	push	{r4, r5, r6, lr}
 8008c90:	0d5b      	lsrs	r3, r3, #21
 8008c92:	0014      	movs	r4, r2
 8008c94:	000a      	movs	r2, r1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10d      	bne.n	8008cb6 <scalbn+0x2a>
 8008c9a:	004b      	lsls	r3, r1, #1
 8008c9c:	085b      	lsrs	r3, r3, #1
 8008c9e:	4303      	orrs	r3, r0
 8008ca0:	d010      	beq.n	8008cc4 <scalbn+0x38>
 8008ca2:	4b21      	ldr	r3, [pc, #132]	; (8008d28 <scalbn+0x9c>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f7f9 f91f 	bl	8001ee8 <__aeabi_dmul>
 8008caa:	4b20      	ldr	r3, [pc, #128]	; (8008d2c <scalbn+0xa0>)
 8008cac:	429c      	cmp	r4, r3
 8008cae:	da0a      	bge.n	8008cc6 <scalbn+0x3a>
 8008cb0:	4a1f      	ldr	r2, [pc, #124]	; (8008d30 <scalbn+0xa4>)
 8008cb2:	4b20      	ldr	r3, [pc, #128]	; (8008d34 <scalbn+0xa8>)
 8008cb4:	e017      	b.n	8008ce6 <scalbn+0x5a>
 8008cb6:	4d20      	ldr	r5, [pc, #128]	; (8008d38 <scalbn+0xac>)
 8008cb8:	42ab      	cmp	r3, r5
 8008cba:	d108      	bne.n	8008cce <scalbn+0x42>
 8008cbc:	0002      	movs	r2, r0
 8008cbe:	000b      	movs	r3, r1
 8008cc0:	f7f8 f9ec 	bl	800109c <__aeabi_dadd>
 8008cc4:	bd70      	pop	{r4, r5, r6, pc}
 8008cc6:	000a      	movs	r2, r1
 8008cc8:	004b      	lsls	r3, r1, #1
 8008cca:	0d5b      	lsrs	r3, r3, #21
 8008ccc:	3b36      	subs	r3, #54	; 0x36
 8008cce:	4d1b      	ldr	r5, [pc, #108]	; (8008d3c <scalbn+0xb0>)
 8008cd0:	18e3      	adds	r3, r4, r3
 8008cd2:	42ab      	cmp	r3, r5
 8008cd4:	dd0a      	ble.n	8008cec <scalbn+0x60>
 8008cd6:	0002      	movs	r2, r0
 8008cd8:	000b      	movs	r3, r1
 8008cda:	4819      	ldr	r0, [pc, #100]	; (8008d40 <scalbn+0xb4>)
 8008cdc:	4919      	ldr	r1, [pc, #100]	; (8008d44 <scalbn+0xb8>)
 8008cde:	f000 f839 	bl	8008d54 <copysign>
 8008ce2:	4a17      	ldr	r2, [pc, #92]	; (8008d40 <scalbn+0xb4>)
 8008ce4:	4b17      	ldr	r3, [pc, #92]	; (8008d44 <scalbn+0xb8>)
 8008ce6:	f7f9 f8ff 	bl	8001ee8 <__aeabi_dmul>
 8008cea:	e7eb      	b.n	8008cc4 <scalbn+0x38>
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dd05      	ble.n	8008cfc <scalbn+0x70>
 8008cf0:	4c15      	ldr	r4, [pc, #84]	; (8008d48 <scalbn+0xbc>)
 8008cf2:	051b      	lsls	r3, r3, #20
 8008cf4:	4022      	ands	r2, r4
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	0011      	movs	r1, r2
 8008cfa:	e7e3      	b.n	8008cc4 <scalbn+0x38>
 8008cfc:	001d      	movs	r5, r3
 8008cfe:	3535      	adds	r5, #53	; 0x35
 8008d00:	da09      	bge.n	8008d16 <scalbn+0x8a>
 8008d02:	4b12      	ldr	r3, [pc, #72]	; (8008d4c <scalbn+0xc0>)
 8008d04:	0002      	movs	r2, r0
 8008d06:	429c      	cmp	r4, r3
 8008d08:	dce6      	bgt.n	8008cd8 <scalbn+0x4c>
 8008d0a:	000b      	movs	r3, r1
 8008d0c:	4808      	ldr	r0, [pc, #32]	; (8008d30 <scalbn+0xa4>)
 8008d0e:	4909      	ldr	r1, [pc, #36]	; (8008d34 <scalbn+0xa8>)
 8008d10:	f000 f820 	bl	8008d54 <copysign>
 8008d14:	e7cc      	b.n	8008cb0 <scalbn+0x24>
 8008d16:	4c0c      	ldr	r4, [pc, #48]	; (8008d48 <scalbn+0xbc>)
 8008d18:	3336      	adds	r3, #54	; 0x36
 8008d1a:	4022      	ands	r2, r4
 8008d1c:	051b      	lsls	r3, r3, #20
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	0019      	movs	r1, r3
 8008d22:	2200      	movs	r2, #0
 8008d24:	4b0a      	ldr	r3, [pc, #40]	; (8008d50 <scalbn+0xc4>)
 8008d26:	e7de      	b.n	8008ce6 <scalbn+0x5a>
 8008d28:	43500000 	.word	0x43500000
 8008d2c:	ffff3cb0 	.word	0xffff3cb0
 8008d30:	c2f8f359 	.word	0xc2f8f359
 8008d34:	01a56e1f 	.word	0x01a56e1f
 8008d38:	000007ff 	.word	0x000007ff
 8008d3c:	000007fe 	.word	0x000007fe
 8008d40:	8800759c 	.word	0x8800759c
 8008d44:	7e37e43c 	.word	0x7e37e43c
 8008d48:	800fffff 	.word	0x800fffff
 8008d4c:	0000c350 	.word	0x0000c350
 8008d50:	3c900000 	.word	0x3c900000

08008d54 <copysign>:
 8008d54:	b530      	push	{r4, r5, lr}
 8008d56:	004a      	lsls	r2, r1, #1
 8008d58:	0fdb      	lsrs	r3, r3, #31
 8008d5a:	07db      	lsls	r3, r3, #31
 8008d5c:	0852      	lsrs	r2, r2, #1
 8008d5e:	431a      	orrs	r2, r3
 8008d60:	0011      	movs	r1, r2
 8008d62:	bd30      	pop	{r4, r5, pc}

08008d64 <_init>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	46c0      	nop			; (mov r8, r8)
 8008d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6a:	bc08      	pop	{r3}
 8008d6c:	469e      	mov	lr, r3
 8008d6e:	4770      	bx	lr

08008d70 <_fini>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	46c0      	nop			; (mov r8, r8)
 8008d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d76:	bc08      	pop	{r3}
 8008d78:	469e      	mov	lr, r3
 8008d7a:	4770      	bx	lr
