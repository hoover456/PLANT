
UltraSonicOutput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08004864  08004864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b0  080049b0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080049b0  080049b0  000149b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049b8  080049b8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080049c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000068  08004a28  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08004a28  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b37e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b79  00000000  00000000  0002b40e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  0002cf88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a78  00000000  00000000  0002dae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015527  00000000  00000000  0002e560  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a6d  00000000  00000000  00043a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000831c3  00000000  00000000  0004c4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cf6b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e00  00000000  00000000  000cf734  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800484c 	.word	0x0800484c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800484c 	.word	0x0800484c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <HAL_Init+0x3c>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_Init+0x3c>)
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	430a      	orrs	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000450:	2000      	movs	r0, #0
 8000452:	f000 f811 	bl	8000478 <HAL_InitTick>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d003      	beq.n	8000462 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e001      	b.n	8000466 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000462:	f003 fa27 	bl	80038b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	781b      	ldrb	r3, [r3, #0]
}
 800046a:	0018      	movs	r0, r3
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40022000 	.word	0x40022000

08000478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000480:	230f      	movs	r3, #15
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_InitTick+0x50>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	23fa      	movs	r3, #250	; 0xfa
 800048e:	0099      	lsls	r1, r3, #2
 8000490:	0010      	movs	r0, r2
 8000492:	f7ff fe39 	bl	8000108 <__udivsi3>
 8000496:	0003      	movs	r3, r0
 8000498:	0018      	movs	r0, r3
 800049a:	f000 f918 	bl	80006ce <HAL_SYSTICK_Config>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d004      	beq.n	80004ac <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80004a2:	230f      	movs	r3, #15
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
 80004aa:	e006      	b.n	80004ba <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	425b      	negs	r3, r3
 80004b2:	2200      	movs	r2, #0
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 f8e5 	bl	8000684 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80004ba:	230f      	movs	r3, #15
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	781b      	ldrb	r3, [r3, #0]
}
 80004c0:	0018      	movs	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000000 	.word	0x20000000

080004cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  uwTick++;
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <HAL_IncTick+0x14>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <HAL_IncTick+0x14>)
 80004d8:	601a      	str	r2, [r3, #0]
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	200000a4 	.word	0x200000a4

080004e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  return uwTick;
 80004e8:	4b02      	ldr	r3, [pc, #8]	; (80004f4 <HAL_GetTick+0x10>)
 80004ea:	681b      	ldr	r3, [r3, #0]
}
 80004ec:	0018      	movs	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	200000a4 	.word	0x200000a4

080004f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000500:	f7ff fff0 	bl	80004e4 <HAL_GetTick>
 8000504:	0003      	movs	r3, r0
 8000506:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3301      	adds	r3, #1
 8000510:	d002      	beq.n	8000518 <HAL_Delay+0x20>
  {
    wait++;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	f7ff ffe3 	bl	80004e4 <HAL_GetTick>
 800051e:	0002      	movs	r2, r0
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	429a      	cmp	r2, r3
 8000528:	d8f7      	bhi.n	800051a <HAL_Delay+0x22>
  {
  }
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b004      	add	sp, #16
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	1dfb      	adds	r3, r7, #7
 800053e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	231f      	movs	r3, #31
 8000548:	401a      	ands	r2, r3
 800054a:	4b04      	ldr	r3, [pc, #16]	; (800055c <NVIC_EnableIRQ+0x28>)
 800054c:	2101      	movs	r1, #1
 800054e:	4091      	lsls	r1, r2
 8000550:	000a      	movs	r2, r1
 8000552:	601a      	str	r2, [r3, #0]
}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b002      	add	sp, #8
 800055a:	bd80      	pop	{r7, pc}
 800055c:	e000e100 	.word	0xe000e100

08000560 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	0002      	movs	r2, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b7f      	cmp	r3, #127	; 0x7f
 8000574:	d932      	bls.n	80005dc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000576:	4a2f      	ldr	r2, [pc, #188]	; (8000634 <NVIC_SetPriority+0xd4>)
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	0019      	movs	r1, r3
 800057e:	230f      	movs	r3, #15
 8000580:	400b      	ands	r3, r1
 8000582:	3b08      	subs	r3, #8
 8000584:	089b      	lsrs	r3, r3, #2
 8000586:	3306      	adds	r3, #6
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	18d3      	adds	r3, r2, r3
 800058c:	3304      	adds	r3, #4
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	1dfa      	adds	r2, r7, #7
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	0011      	movs	r1, r2
 8000596:	2203      	movs	r2, #3
 8000598:	400a      	ands	r2, r1
 800059a:	00d2      	lsls	r2, r2, #3
 800059c:	21ff      	movs	r1, #255	; 0xff
 800059e:	4091      	lsls	r1, r2
 80005a0:	000a      	movs	r2, r1
 80005a2:	43d2      	mvns	r2, r2
 80005a4:	401a      	ands	r2, r3
 80005a6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	019b      	lsls	r3, r3, #6
 80005ac:	22ff      	movs	r2, #255	; 0xff
 80005ae:	401a      	ands	r2, r3
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	0018      	movs	r0, r3
 80005b6:	2303      	movs	r3, #3
 80005b8:	4003      	ands	r3, r0
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005be:	481d      	ldr	r0, [pc, #116]	; (8000634 <NVIC_SetPriority+0xd4>)
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	001c      	movs	r4, r3
 80005c6:	230f      	movs	r3, #15
 80005c8:	4023      	ands	r3, r4
 80005ca:	3b08      	subs	r3, #8
 80005cc:	089b      	lsrs	r3, r3, #2
 80005ce:	430a      	orrs	r2, r1
 80005d0:	3306      	adds	r3, #6
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	18c3      	adds	r3, r0, r3
 80005d6:	3304      	adds	r3, #4
 80005d8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80005da:	e027      	b.n	800062c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005dc:	4a16      	ldr	r2, [pc, #88]	; (8000638 <NVIC_SetPriority+0xd8>)
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	089b      	lsrs	r3, r3, #2
 80005e6:	33c0      	adds	r3, #192	; 0xc0
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	589b      	ldr	r3, [r3, r2]
 80005ec:	1dfa      	adds	r2, r7, #7
 80005ee:	7812      	ldrb	r2, [r2, #0]
 80005f0:	0011      	movs	r1, r2
 80005f2:	2203      	movs	r2, #3
 80005f4:	400a      	ands	r2, r1
 80005f6:	00d2      	lsls	r2, r2, #3
 80005f8:	21ff      	movs	r1, #255	; 0xff
 80005fa:	4091      	lsls	r1, r2
 80005fc:	000a      	movs	r2, r1
 80005fe:	43d2      	mvns	r2, r2
 8000600:	401a      	ands	r2, r3
 8000602:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	019b      	lsls	r3, r3, #6
 8000608:	22ff      	movs	r2, #255	; 0xff
 800060a:	401a      	ands	r2, r3
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	0018      	movs	r0, r3
 8000612:	2303      	movs	r3, #3
 8000614:	4003      	ands	r3, r0
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <NVIC_SetPriority+0xd8>)
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b25b      	sxtb	r3, r3
 8000622:	089b      	lsrs	r3, r3, #2
 8000624:	430a      	orrs	r2, r1
 8000626:	33c0      	adds	r3, #192	; 0xc0
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	501a      	str	r2, [r3, r0]
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b003      	add	sp, #12
 8000632:	bd90      	pop	{r4, r7, pc}
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	e000e100 	.word	0xe000e100

0800063c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3b01      	subs	r3, #1
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <SysTick_Config+0x40>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d901      	bls.n	8000652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800064e:	2301      	movs	r3, #1
 8000650:	e010      	b.n	8000674 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <SysTick_Config+0x44>)
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	3a01      	subs	r2, #1
 8000658:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800065a:	2301      	movs	r3, #1
 800065c:	425b      	negs	r3, r3
 800065e:	2103      	movs	r1, #3
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff ff7d 	bl	8000560 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <SysTick_Config+0x44>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <SysTick_Config+0x44>)
 800066e:	2207      	movs	r2, #7
 8000670:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000672:	2300      	movs	r3, #0
}
 8000674:	0018      	movs	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	b002      	add	sp, #8
 800067a:	bd80      	pop	{r7, pc}
 800067c:	00ffffff 	.word	0x00ffffff
 8000680:	e000e010 	.word	0xe000e010

08000684 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
 800068e:	210f      	movs	r1, #15
 8000690:	187b      	adds	r3, r7, r1
 8000692:	1c02      	adds	r2, r0, #0
 8000694:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	187b      	adds	r3, r7, r1
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b25b      	sxtb	r3, r3
 800069e:	0011      	movs	r1, r2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f7ff ff5d 	bl	8000560 <NVIC_SetPriority>
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b004      	add	sp, #16
 80006ac:	bd80      	pop	{r7, pc}

080006ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	0002      	movs	r2, r0
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b25b      	sxtb	r3, r3
 80006c0:	0018      	movs	r0, r3
 80006c2:	f7ff ff37 	bl	8000534 <NVIC_EnableIRQ>
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b002      	add	sp, #8
 80006cc:	bd80      	pop	{r7, pc}

080006ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff ffaf 	bl	800063c <SysTick_Config>
 80006de:	0003      	movs	r3, r0
}
 80006e0:	0018      	movs	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b002      	add	sp, #8
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80006fe:	e155      	b.n	80009ac <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2101      	movs	r1, #1
 8000706:	697a      	ldr	r2, [r7, #20]
 8000708:	4091      	lsls	r1, r2
 800070a:	000a      	movs	r2, r1
 800070c:	4013      	ands	r3, r2
 800070e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d100      	bne.n	8000718 <HAL_GPIO_Init+0x30>
 8000716:	e146      	b.n	80009a6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	2b02      	cmp	r3, #2
 800071e:	d003      	beq.n	8000728 <HAL_GPIO_Init+0x40>
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	2b12      	cmp	r3, #18
 8000726:	d123      	bne.n	8000770 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	08da      	lsrs	r2, r3, #3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3208      	adds	r2, #8
 8000730:	0092      	lsls	r2, r2, #2
 8000732:	58d3      	ldr	r3, [r2, r3]
 8000734:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	2207      	movs	r2, #7
 800073a:	4013      	ands	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	220f      	movs	r2, #15
 8000740:	409a      	lsls	r2, r3
 8000742:	0013      	movs	r3, r2
 8000744:	43da      	mvns	r2, r3
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	4013      	ands	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	691a      	ldr	r2, [r3, #16]
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	2107      	movs	r1, #7
 8000754:	400b      	ands	r3, r1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	409a      	lsls	r2, r3
 800075a:	0013      	movs	r3, r2
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	4313      	orrs	r3, r2
 8000760:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	08da      	lsrs	r2, r3, #3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3208      	adds	r2, #8
 800076a:	0092      	lsls	r2, r2, #2
 800076c:	6939      	ldr	r1, [r7, #16]
 800076e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d00b      	beq.n	8000790 <HAL_GPIO_Init+0xa8>
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2b02      	cmp	r3, #2
 800077e:	d007      	beq.n	8000790 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000784:	2b11      	cmp	r3, #17
 8000786:	d003      	beq.n	8000790 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	2b12      	cmp	r3, #18
 800078e:	d130      	bne.n	80007f2 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	2203      	movs	r2, #3
 800079c:	409a      	lsls	r2, r3
 800079e:	0013      	movs	r3, r2
 80007a0:	43da      	mvns	r2, r3
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	4013      	ands	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	68da      	ldr	r2, [r3, #12]
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	409a      	lsls	r2, r3
 80007b2:	0013      	movs	r3, r2
 80007b4:	693a      	ldr	r2, [r7, #16]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	693a      	ldr	r2, [r7, #16]
 80007be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007c6:	2201      	movs	r2, #1
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	409a      	lsls	r2, r3
 80007cc:	0013      	movs	r3, r2
 80007ce:	43da      	mvns	r2, r3
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	4013      	ands	r3, r2
 80007d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	091b      	lsrs	r3, r3, #4
 80007dc:	2201      	movs	r2, #1
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
 80007e4:	0013      	movs	r3, r2
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	2203      	movs	r2, #3
 80007fe:	409a      	lsls	r2, r3
 8000800:	0013      	movs	r3, r2
 8000802:	43da      	mvns	r2, r3
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	4013      	ands	r3, r2
 8000808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2203      	movs	r2, #3
 8000810:	401a      	ands	r2, r3
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	409a      	lsls	r2, r3
 8000818:	0013      	movs	r3, r2
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	4313      	orrs	r3, r2
 800081e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	2203      	movs	r2, #3
 8000832:	409a      	lsls	r2, r3
 8000834:	0013      	movs	r3, r2
 8000836:	43da      	mvns	r2, r3
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	4013      	ands	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	689a      	ldr	r2, [r3, #8]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	4313      	orrs	r3, r2
 800084e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	055b      	lsls	r3, r3, #21
 800085e:	4013      	ands	r3, r2
 8000860:	d100      	bne.n	8000864 <HAL_GPIO_Init+0x17c>
 8000862:	e0a0      	b.n	80009a6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000864:	4b57      	ldr	r3, [pc, #348]	; (80009c4 <HAL_GPIO_Init+0x2dc>)
 8000866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000868:	4b56      	ldr	r3, [pc, #344]	; (80009c4 <HAL_GPIO_Init+0x2dc>)
 800086a:	2101      	movs	r1, #1
 800086c:	430a      	orrs	r2, r1
 800086e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000870:	4a55      	ldr	r2, [pc, #340]	; (80009c8 <HAL_GPIO_Init+0x2e0>)
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	089b      	lsrs	r3, r3, #2
 8000876:	3302      	adds	r3, #2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	589b      	ldr	r3, [r3, r2]
 800087c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	2203      	movs	r2, #3
 8000882:	4013      	ands	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	220f      	movs	r2, #15
 8000888:	409a      	lsls	r2, r3
 800088a:	0013      	movs	r3, r2
 800088c:	43da      	mvns	r2, r3
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	4013      	ands	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	23a0      	movs	r3, #160	; 0xa0
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	429a      	cmp	r2, r3
 800089c:	d01f      	beq.n	80008de <HAL_GPIO_Init+0x1f6>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a4a      	ldr	r2, [pc, #296]	; (80009cc <HAL_GPIO_Init+0x2e4>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d019      	beq.n	80008da <HAL_GPIO_Init+0x1f2>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a49      	ldr	r2, [pc, #292]	; (80009d0 <HAL_GPIO_Init+0x2e8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d013      	beq.n	80008d6 <HAL_GPIO_Init+0x1ee>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a48      	ldr	r2, [pc, #288]	; (80009d4 <HAL_GPIO_Init+0x2ec>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d00d      	beq.n	80008d2 <HAL_GPIO_Init+0x1ea>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a47      	ldr	r2, [pc, #284]	; (80009d8 <HAL_GPIO_Init+0x2f0>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d007      	beq.n	80008ce <HAL_GPIO_Init+0x1e6>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a46      	ldr	r2, [pc, #280]	; (80009dc <HAL_GPIO_Init+0x2f4>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d101      	bne.n	80008ca <HAL_GPIO_Init+0x1e2>
 80008c6:	2305      	movs	r3, #5
 80008c8:	e00a      	b.n	80008e0 <HAL_GPIO_Init+0x1f8>
 80008ca:	2306      	movs	r3, #6
 80008cc:	e008      	b.n	80008e0 <HAL_GPIO_Init+0x1f8>
 80008ce:	2304      	movs	r3, #4
 80008d0:	e006      	b.n	80008e0 <HAL_GPIO_Init+0x1f8>
 80008d2:	2303      	movs	r3, #3
 80008d4:	e004      	b.n	80008e0 <HAL_GPIO_Init+0x1f8>
 80008d6:	2302      	movs	r3, #2
 80008d8:	e002      	b.n	80008e0 <HAL_GPIO_Init+0x1f8>
 80008da:	2301      	movs	r3, #1
 80008dc:	e000      	b.n	80008e0 <HAL_GPIO_Init+0x1f8>
 80008de:	2300      	movs	r3, #0
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	2103      	movs	r1, #3
 80008e4:	400a      	ands	r2, r1
 80008e6:	0092      	lsls	r2, r2, #2
 80008e8:	4093      	lsls	r3, r2
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008f0:	4935      	ldr	r1, [pc, #212]	; (80009c8 <HAL_GPIO_Init+0x2e0>)
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	089b      	lsrs	r3, r3, #2
 80008f6:	3302      	adds	r3, #2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <HAL_GPIO_Init+0x2f8>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	43da      	mvns	r2, r3
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	4013      	ands	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685a      	ldr	r2, [r3, #4]
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	025b      	lsls	r3, r3, #9
 8000916:	4013      	ands	r3, r2
 8000918:	d003      	beq.n	8000922 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4313      	orrs	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <HAL_GPIO_Init+0x2f8>)
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000928:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <HAL_GPIO_Init+0x2f8>)
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	43da      	mvns	r2, r3
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	4013      	ands	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	029b      	lsls	r3, r3, #10
 8000940:	4013      	ands	r3, r2
 8000942:	d003      	beq.n	800094c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	4313      	orrs	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <HAL_GPIO_Init+0x2f8>)
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <HAL_GPIO_Init+0x2f8>)
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	43da      	mvns	r2, r3
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	4013      	ands	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685a      	ldr	r2, [r3, #4]
 8000966:	2380      	movs	r3, #128	; 0x80
 8000968:	035b      	lsls	r3, r3, #13
 800096a:	4013      	ands	r3, r2
 800096c:	d003      	beq.n	8000976 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <HAL_GPIO_Init+0x2f8>)
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <HAL_GPIO_Init+0x2f8>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	43da      	mvns	r2, r3
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	4013      	ands	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	039b      	lsls	r3, r3, #14
 8000994:	4013      	ands	r3, r2
 8000996:	d003      	beq.n	80009a0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_GPIO_Init+0x2f8>)
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	3301      	adds	r3, #1
 80009aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	40da      	lsrs	r2, r3
 80009b4:	1e13      	subs	r3, r2, #0
 80009b6:	d000      	beq.n	80009ba <HAL_GPIO_Init+0x2d2>
 80009b8:	e6a2      	b.n	8000700 <HAL_GPIO_Init+0x18>
  }
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b006      	add	sp, #24
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40010000 	.word	0x40010000
 80009cc:	50000400 	.word	0x50000400
 80009d0:	50000800 	.word	0x50000800
 80009d4:	50000c00 	.word	0x50000c00
 80009d8:	50001000 	.word	0x50001000
 80009dc:	50001c00 	.word	0x50001c00
 80009e0:	40010400 	.word	0x40010400

080009e4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	0008      	movs	r0, r1
 80009ee:	0011      	movs	r1, r2
 80009f0:	1cbb      	adds	r3, r7, #2
 80009f2:	1c02      	adds	r2, r0, #0
 80009f4:	801a      	strh	r2, [r3, #0]
 80009f6:	1c7b      	adds	r3, r7, #1
 80009f8:	1c0a      	adds	r2, r1, #0
 80009fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80009fc:	1c7b      	adds	r3, r7, #1
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d004      	beq.n	8000a0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a04:	1cbb      	adds	r3, r7, #2
 8000a06:	881a      	ldrh	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000a0c:	e003      	b.n	8000a16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000a0e:	1cbb      	adds	r3, r7, #2
 8000a10:	881a      	ldrh	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b002      	add	sp, #8
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	0002      	movs	r2, r0
 8000a28:	1dbb      	adds	r3, r7, #6
 8000a2a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	1dba      	adds	r2, r7, #6
 8000a32:	8812      	ldrh	r2, [r2, #0]
 8000a34:	4013      	ands	r3, r2
 8000a36:	d008      	beq.n	8000a4a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000a3a:	1dba      	adds	r2, r7, #6
 8000a3c:	8812      	ldrh	r2, [r2, #0]
 8000a3e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a40:	1dbb      	adds	r3, r7, #6
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	0018      	movs	r0, r3
 8000a46:	f000 f807 	bl	8000a58 <HAL_GPIO_EXTI_Callback>
  }
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	40010400 	.word	0x40010400

08000a58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	0002      	movs	r2, r0
 8000a60:	1dbb      	adds	r3, r7, #6
 8000a62:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a6c:	b5b0      	push	{r4, r5, r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	f000 fbbc 	bl	80011f8 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a80:	4bc8      	ldr	r3, [pc, #800]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	220c      	movs	r2, #12
 8000a86:	4013      	ands	r3, r2
 8000a88:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a8a:	4bc6      	ldr	r3, [pc, #792]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000a8c:	68da      	ldr	r2, [r3, #12]
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	025b      	lsls	r3, r3, #9
 8000a92:	4013      	ands	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	d100      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x36>
 8000aa0:	e07e      	b.n	8000ba0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	2b08      	cmp	r3, #8
 8000aa6:	d007      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	2b0c      	cmp	r3, #12
 8000aac:	d112      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x68>
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	025b      	lsls	r3, r3, #9
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d10d      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ab8:	4bba      	ldr	r3, [pc, #744]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	029b      	lsls	r3, r3, #10
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	d100      	bne.n	8000ac6 <HAL_RCC_OscConfig+0x5a>
 8000ac4:	e06b      	b.n	8000b9e <HAL_RCC_OscConfig+0x132>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d167      	bne.n	8000b9e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f000 fb92 	bl	80011f8 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685a      	ldr	r2, [r3, #4]
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	025b      	lsls	r3, r3, #9
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d107      	bne.n	8000af0 <HAL_RCC_OscConfig+0x84>
 8000ae0:	4bb0      	ldr	r3, [pc, #704]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4baf      	ldr	r3, [pc, #700]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	0249      	lsls	r1, r1, #9
 8000aea:	430a      	orrs	r2, r1
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	e027      	b.n	8000b40 <HAL_RCC_OscConfig+0xd4>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	23a0      	movs	r3, #160	; 0xa0
 8000af6:	02db      	lsls	r3, r3, #11
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d10e      	bne.n	8000b1a <HAL_RCC_OscConfig+0xae>
 8000afc:	4ba9      	ldr	r3, [pc, #676]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4ba8      	ldr	r3, [pc, #672]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	02c9      	lsls	r1, r1, #11
 8000b06:	430a      	orrs	r2, r1
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	4ba6      	ldr	r3, [pc, #664]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	4ba5      	ldr	r3, [pc, #660]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	0249      	lsls	r1, r1, #9
 8000b14:	430a      	orrs	r2, r1
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	e012      	b.n	8000b40 <HAL_RCC_OscConfig+0xd4>
 8000b1a:	4ba2      	ldr	r3, [pc, #648]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4ba1      	ldr	r3, [pc, #644]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000b20:	49a1      	ldr	r1, [pc, #644]	; (8000da8 <HAL_RCC_OscConfig+0x33c>)
 8000b22:	400a      	ands	r2, r1
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	4b9f      	ldr	r3, [pc, #636]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	025b      	lsls	r3, r3, #9
 8000b2e:	4013      	ands	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4b9b      	ldr	r3, [pc, #620]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b9a      	ldr	r3, [pc, #616]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000b3a:	499c      	ldr	r1, [pc, #624]	; (8000dac <HAL_RCC_OscConfig+0x340>)
 8000b3c:	400a      	ands	r2, r1
 8000b3e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d015      	beq.n	8000b74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b48:	f7ff fccc 	bl	80004e4 <HAL_GetTick>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000b50:	e009      	b.n	8000b66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b52:	f7ff fcc7 	bl	80004e4 <HAL_GetTick>
 8000b56:	0002      	movs	r2, r0
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	2b64      	cmp	r3, #100	; 0x64
 8000b5e:	d902      	bls.n	8000b66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b60:	2303      	movs	r3, #3
 8000b62:	f000 fb49 	bl	80011f8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000b66:	4b8f      	ldr	r3, [pc, #572]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	029b      	lsls	r3, r3, #10
 8000b6e:	4013      	ands	r3, r2
 8000b70:	d0ef      	beq.n	8000b52 <HAL_RCC_OscConfig+0xe6>
 8000b72:	e015      	b.n	8000ba0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b74:	f7ff fcb6 	bl	80004e4 <HAL_GetTick>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b7c:	e008      	b.n	8000b90 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b7e:	f7ff fcb1 	bl	80004e4 <HAL_GetTick>
 8000b82:	0002      	movs	r2, r0
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	2b64      	cmp	r3, #100	; 0x64
 8000b8a:	d901      	bls.n	8000b90 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	e333      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b90:	4b84      	ldr	r3, [pc, #528]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	029b      	lsls	r3, r3, #10
 8000b98:	4013      	ands	r3, r2
 8000b9a:	d1f0      	bne.n	8000b7e <HAL_RCC_OscConfig+0x112>
 8000b9c:	e000      	b.n	8000ba0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	d100      	bne.n	8000bac <HAL_RCC_OscConfig+0x140>
 8000baa:	e098      	b.n	8000cde <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	2220      	movs	r2, #32
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	d009      	beq.n	8000bce <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000bba:	4b7a      	ldr	r3, [pc, #488]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4b79      	ldr	r3, [pc, #484]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000bc0:	2120      	movs	r1, #32
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc8:	2220      	movs	r2, #32
 8000bca:	4393      	bics	r3, r2
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d005      	beq.n	8000be0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	2b0c      	cmp	r3, #12
 8000bd8:	d13d      	bne.n	8000c56 <HAL_RCC_OscConfig+0x1ea>
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d13a      	bne.n	8000c56 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000be0:	4b70      	ldr	r3, [pc, #448]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2204      	movs	r2, #4
 8000be6:	4013      	ands	r3, r2
 8000be8:	d004      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x188>
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e301      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bf4:	4b6b      	ldr	r3, [pc, #428]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	4a6d      	ldr	r2, [pc, #436]	; (8000db0 <HAL_RCC_OscConfig+0x344>)
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	021a      	lsls	r2, r3, #8
 8000c04:	4b67      	ldr	r3, [pc, #412]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000c06:	430a      	orrs	r2, r1
 8000c08:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000c0a:	4b66      	ldr	r3, [pc, #408]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2209      	movs	r2, #9
 8000c10:	4393      	bics	r3, r2
 8000c12:	0019      	movs	r1, r3
 8000c14:	4b63      	ldr	r3, [pc, #396]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c1c:	f000 fc20 	bl	8001460 <HAL_RCC_GetSysClockFreq>
 8000c20:	0001      	movs	r1, r0
 8000c22:	4b60      	ldr	r3, [pc, #384]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	091b      	lsrs	r3, r3, #4
 8000c28:	220f      	movs	r2, #15
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	4a61      	ldr	r2, [pc, #388]	; (8000db4 <HAL_RCC_OscConfig+0x348>)
 8000c2e:	5cd3      	ldrb	r3, [r2, r3]
 8000c30:	000a      	movs	r2, r1
 8000c32:	40da      	lsrs	r2, r3
 8000c34:	4b60      	ldr	r3, [pc, #384]	; (8000db8 <HAL_RCC_OscConfig+0x34c>)
 8000c36:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000c38:	2513      	movs	r5, #19
 8000c3a:	197c      	adds	r4, r7, r5
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fc1b 	bl	8000478 <HAL_InitTick>
 8000c42:	0003      	movs	r3, r0
 8000c44:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000c46:	197b      	adds	r3, r7, r5
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d047      	beq.n	8000cde <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8000c4e:	2313      	movs	r3, #19
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	e2d0      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d027      	beq.n	8000cac <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000c5c:	4b51      	ldr	r3, [pc, #324]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2209      	movs	r2, #9
 8000c62:	4393      	bics	r3, r2
 8000c64:	0019      	movs	r1, r3
 8000c66:	4b4f      	ldr	r3, [pc, #316]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6e:	f7ff fc39 	bl	80004e4 <HAL_GetTick>
 8000c72:	0003      	movs	r3, r0
 8000c74:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c76:	e008      	b.n	8000c8a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c78:	f7ff fc34 	bl	80004e4 <HAL_GetTick>
 8000c7c:	0002      	movs	r2, r0
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d901      	bls.n	8000c8a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e2b6      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c8a:	4b46      	ldr	r3, [pc, #280]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2204      	movs	r2, #4
 8000c90:	4013      	ands	r3, r2
 8000c92:	d0f1      	beq.n	8000c78 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c94:	4b43      	ldr	r3, [pc, #268]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	4a45      	ldr	r2, [pc, #276]	; (8000db0 <HAL_RCC_OscConfig+0x344>)
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	021a      	lsls	r2, r3, #8
 8000ca4:	4b3f      	ldr	r3, [pc, #252]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	e018      	b.n	8000cde <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cac:	4b3d      	ldr	r3, [pc, #244]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	438a      	bics	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fc14 	bl	80004e4 <HAL_GetTick>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000cc0:	e008      	b.n	8000cd4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc2:	f7ff fc0f 	bl	80004e4 <HAL_GetTick>
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d901      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	e291      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000cd4:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2204      	movs	r2, #4
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d1f1      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2210      	movs	r2, #16
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d100      	bne.n	8000cea <HAL_RCC_OscConfig+0x27e>
 8000ce8:	e09f      	b.n	8000e2a <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d13f      	bne.n	8000d70 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	d005      	beq.n	8000d08 <HAL_RCC_OscConfig+0x29c>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d101      	bne.n	8000d08 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e277      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d08:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	4a2b      	ldr	r2, [pc, #172]	; (8000dbc <HAL_RCC_OscConfig+0x350>)
 8000d0e:	4013      	ands	r3, r2
 8000d10:	0019      	movs	r1, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d16:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	0a19      	lsrs	r1, r3, #8
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a1b      	ldr	r3, [r3, #32]
 8000d28:	061a      	lsls	r2, r3, #24
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d34:	0b5b      	lsrs	r3, r3, #13
 8000d36:	3301      	adds	r3, #1
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	0212      	lsls	r2, r2, #8
 8000d3c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	091b      	lsrs	r3, r3, #4
 8000d44:	210f      	movs	r1, #15
 8000d46:	400b      	ands	r3, r1
 8000d48:	491a      	ldr	r1, [pc, #104]	; (8000db4 <HAL_RCC_OscConfig+0x348>)
 8000d4a:	5ccb      	ldrb	r3, [r1, r3]
 8000d4c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <HAL_RCC_OscConfig+0x34c>)
 8000d50:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000d52:	2513      	movs	r5, #19
 8000d54:	197c      	adds	r4, r7, r5
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fb8e 	bl	8000478 <HAL_InitTick>
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000d60:	197b      	adds	r3, r7, r5
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d060      	beq.n	8000e2a <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8000d68:	2313      	movs	r3, #19
 8000d6a:	18fb      	adds	r3, r7, r3
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	e243      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d03e      	beq.n	8000df6 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_RCC_OscConfig+0x338>)
 8000d7e:	2180      	movs	r1, #128	; 0x80
 8000d80:	0049      	lsls	r1, r1, #1
 8000d82:	430a      	orrs	r2, r1
 8000d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d86:	f7ff fbad 	bl	80004e4 <HAL_GetTick>
 8000d8a:	0003      	movs	r3, r0
 8000d8c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000d8e:	e017      	b.n	8000dc0 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d90:	f7ff fba8 	bl	80004e4 <HAL_GetTick>
 8000d94:	0002      	movs	r2, r0
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d910      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e22a      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	40021000 	.word	0x40021000
 8000da8:	fffeffff 	.word	0xfffeffff
 8000dac:	fffbffff 	.word	0xfffbffff
 8000db0:	ffffe0ff 	.word	0xffffe0ff
 8000db4:	08004928 	.word	0x08004928
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000dc0:	4bc6      	ldr	r3, [pc, #792]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4013      	ands	r3, r2
 8000dca:	d0e1      	beq.n	8000d90 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dcc:	4bc3      	ldr	r3, [pc, #780]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	4ac3      	ldr	r2, [pc, #780]	; (80010e0 <HAL_RCC_OscConfig+0x674>)
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dda:	4bc0      	ldr	r3, [pc, #768]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000de0:	4bbe      	ldr	r3, [pc, #760]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	0a19      	lsrs	r1, r3, #8
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	061a      	lsls	r2, r3, #24
 8000dee:	4bbb      	ldr	r3, [pc, #748]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000df0:	430a      	orrs	r2, r1
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	e019      	b.n	8000e2a <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000df6:	4bb9      	ldr	r3, [pc, #740]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4bb8      	ldr	r3, [pc, #736]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000dfc:	49b9      	ldr	r1, [pc, #740]	; (80010e4 <HAL_RCC_OscConfig+0x678>)
 8000dfe:	400a      	ands	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e02:	f7ff fb6f 	bl	80004e4 <HAL_GetTick>
 8000e06:	0003      	movs	r3, r0
 8000e08:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e0a:	e008      	b.n	8000e1e <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e0c:	f7ff fb6a 	bl	80004e4 <HAL_GetTick>
 8000e10:	0002      	movs	r2, r0
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d901      	bls.n	8000e1e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e1ec      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e1e:	4baf      	ldr	r3, [pc, #700]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4013      	ands	r3, r2
 8000e28:	d1f0      	bne.n	8000e0c <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2208      	movs	r2, #8
 8000e30:	4013      	ands	r3, r2
 8000e32:	d036      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d019      	beq.n	8000e70 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e3c:	4ba7      	ldr	r3, [pc, #668]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000e3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e40:	4ba6      	ldr	r3, [pc, #664]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000e42:	2101      	movs	r1, #1
 8000e44:	430a      	orrs	r2, r1
 8000e46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e48:	f7ff fb4c 	bl	80004e4 <HAL_GetTick>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e50:	e008      	b.n	8000e64 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e52:	f7ff fb47 	bl	80004e4 <HAL_GetTick>
 8000e56:	0002      	movs	r2, r0
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e1c9      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e64:	4b9d      	ldr	r3, [pc, #628]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e68:	2202      	movs	r2, #2
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d0f1      	beq.n	8000e52 <HAL_RCC_OscConfig+0x3e6>
 8000e6e:	e018      	b.n	8000ea2 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e70:	4b9a      	ldr	r3, [pc, #616]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000e72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e74:	4b99      	ldr	r3, [pc, #612]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	438a      	bics	r2, r1
 8000e7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fb32 	bl	80004e4 <HAL_GetTick>
 8000e80:	0003      	movs	r3, r0
 8000e82:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000e84:	e008      	b.n	8000e98 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e86:	f7ff fb2d 	bl	80004e4 <HAL_GetTick>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e1af      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000e98:	4b90      	ldr	r3, [pc, #576]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d1f1      	bne.n	8000e86 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d100      	bne.n	8000eae <HAL_RCC_OscConfig+0x442>
 8000eac:	e0af      	b.n	800100e <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eae:	2323      	movs	r3, #35	; 0x23
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb6:	4b89      	ldr	r3, [pc, #548]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	055b      	lsls	r3, r3, #21
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d10a      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	4b86      	ldr	r3, [pc, #536]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ec6:	4b85      	ldr	r3, [pc, #532]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000ec8:	2180      	movs	r1, #128	; 0x80
 8000eca:	0549      	lsls	r1, r1, #21
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8000ed0:	2323      	movs	r3, #35	; 0x23
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed8:	4b83      	ldr	r3, [pc, #524]	; (80010e8 <HAL_RCC_OscConfig+0x67c>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	d11a      	bne.n	8000f1a <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ee4:	4b80      	ldr	r3, [pc, #512]	; (80010e8 <HAL_RCC_OscConfig+0x67c>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b7f      	ldr	r3, [pc, #508]	; (80010e8 <HAL_RCC_OscConfig+0x67c>)
 8000eea:	2180      	movs	r1, #128	; 0x80
 8000eec:	0049      	lsls	r1, r1, #1
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ef2:	f7ff faf7 	bl	80004e4 <HAL_GetTick>
 8000ef6:	0003      	movs	r3, r0
 8000ef8:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000efc:	f7ff faf2 	bl	80004e4 <HAL_GetTick>
 8000f00:	0002      	movs	r2, r0
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b64      	cmp	r3, #100	; 0x64
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e174      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0e:	4b76      	ldr	r3, [pc, #472]	; (80010e8 <HAL_RCC_OscConfig+0x67c>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4013      	ands	r3, r2
 8000f18:	d0f0      	beq.n	8000efc <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d107      	bne.n	8000f36 <HAL_RCC_OscConfig+0x4ca>
 8000f26:	4b6d      	ldr	r3, [pc, #436]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000f28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f2a:	4b6c      	ldr	r3, [pc, #432]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	0049      	lsls	r1, r1, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	651a      	str	r2, [r3, #80]	; 0x50
 8000f34:	e031      	b.n	8000f9a <HAL_RCC_OscConfig+0x52e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10c      	bne.n	8000f58 <HAL_RCC_OscConfig+0x4ec>
 8000f3e:	4b67      	ldr	r3, [pc, #412]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f42:	4b66      	ldr	r3, [pc, #408]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000f44:	4967      	ldr	r1, [pc, #412]	; (80010e4 <HAL_RCC_OscConfig+0x678>)
 8000f46:	400a      	ands	r2, r1
 8000f48:	651a      	str	r2, [r3, #80]	; 0x50
 8000f4a:	4b64      	ldr	r3, [pc, #400]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000f4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f4e:	4b63      	ldr	r3, [pc, #396]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000f50:	4966      	ldr	r1, [pc, #408]	; (80010ec <HAL_RCC_OscConfig+0x680>)
 8000f52:	400a      	ands	r2, r1
 8000f54:	651a      	str	r2, [r3, #80]	; 0x50
 8000f56:	e020      	b.n	8000f9a <HAL_RCC_OscConfig+0x52e>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	23a0      	movs	r3, #160	; 0xa0
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d10e      	bne.n	8000f82 <HAL_RCC_OscConfig+0x516>
 8000f64:	4b5d      	ldr	r3, [pc, #372]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000f66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f68:	4b5c      	ldr	r3, [pc, #368]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000f6a:	2180      	movs	r1, #128	; 0x80
 8000f6c:	00c9      	lsls	r1, r1, #3
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	651a      	str	r2, [r3, #80]	; 0x50
 8000f72:	4b5a      	ldr	r3, [pc, #360]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000f74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f76:	4b59      	ldr	r3, [pc, #356]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	0049      	lsls	r1, r1, #1
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	651a      	str	r2, [r3, #80]	; 0x50
 8000f80:	e00b      	b.n	8000f9a <HAL_RCC_OscConfig+0x52e>
 8000f82:	4b56      	ldr	r3, [pc, #344]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000f84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f86:	4b55      	ldr	r3, [pc, #340]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000f88:	4956      	ldr	r1, [pc, #344]	; (80010e4 <HAL_RCC_OscConfig+0x678>)
 8000f8a:	400a      	ands	r2, r1
 8000f8c:	651a      	str	r2, [r3, #80]	; 0x50
 8000f8e:	4b53      	ldr	r3, [pc, #332]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000f90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f92:	4b52      	ldr	r3, [pc, #328]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000f94:	4955      	ldr	r1, [pc, #340]	; (80010ec <HAL_RCC_OscConfig+0x680>)
 8000f96:	400a      	ands	r2, r1
 8000f98:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d015      	beq.n	8000fce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa2:	f7ff fa9f 	bl	80004e4 <HAL_GetTick>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000faa:	e009      	b.n	8000fc0 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fac:	f7ff fa9a 	bl	80004e4 <HAL_GetTick>
 8000fb0:	0002      	movs	r2, r0
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	4a4e      	ldr	r2, [pc, #312]	; (80010f0 <HAL_RCC_OscConfig+0x684>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e11b      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fc0:	4b46      	ldr	r3, [pc, #280]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000fc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d0ef      	beq.n	8000fac <HAL_RCC_OscConfig+0x540>
 8000fcc:	e014      	b.n	8000ff8 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fce:	f7ff fa89 	bl	80004e4 <HAL_GetTick>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000fd6:	e009      	b.n	8000fec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fa84 	bl	80004e4 <HAL_GetTick>
 8000fdc:	0002      	movs	r2, r0
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	4a43      	ldr	r2, [pc, #268]	; (80010f0 <HAL_RCC_OscConfig+0x684>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e105      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000fec:	4b3b      	ldr	r3, [pc, #236]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8000fee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d1ef      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ff8:	2323      	movs	r3, #35	; 0x23
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d105      	bne.n	800100e <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001002:	4b36      	ldr	r3, [pc, #216]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8001004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001006:	4b35      	ldr	r3, [pc, #212]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8001008:	493a      	ldr	r1, [pc, #232]	; (80010f4 <HAL_RCC_OscConfig+0x688>)
 800100a:	400a      	ands	r2, r1
 800100c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2220      	movs	r2, #32
 8001014:	4013      	ands	r3, r2
 8001016:	d049      	beq.n	80010ac <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d026      	beq.n	800106e <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001020:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8001026:	2101      	movs	r1, #1
 8001028:	430a      	orrs	r2, r1
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 800102e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8001032:	2101      	movs	r1, #1
 8001034:	430a      	orrs	r2, r1
 8001036:	635a      	str	r2, [r3, #52]	; 0x34
 8001038:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <HAL_RCC_OscConfig+0x68c>)
 800103a:	6a1a      	ldr	r2, [r3, #32]
 800103c:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <HAL_RCC_OscConfig+0x68c>)
 800103e:	2180      	movs	r1, #128	; 0x80
 8001040:	0189      	lsls	r1, r1, #6
 8001042:	430a      	orrs	r2, r1
 8001044:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001046:	f7ff fa4d 	bl	80004e4 <HAL_GetTick>
 800104a:	0003      	movs	r3, r0
 800104c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001050:	f7ff fa48 	bl	80004e4 <HAL_GetTick>
 8001054:	0002      	movs	r2, r0
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e0ca      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2202      	movs	r2, #2
 8001068:	4013      	ands	r3, r2
 800106a:	d0f1      	beq.n	8001050 <HAL_RCC_OscConfig+0x5e4>
 800106c:	e01e      	b.n	80010ac <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 8001074:	2101      	movs	r1, #1
 8001076:	438a      	bics	r2, r1
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <HAL_RCC_OscConfig+0x68c>)
 800107c:	6a1a      	ldr	r2, [r3, #32]
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <HAL_RCC_OscConfig+0x68c>)
 8001080:	491e      	ldr	r1, [pc, #120]	; (80010fc <HAL_RCC_OscConfig+0x690>)
 8001082:	400a      	ands	r2, r1
 8001084:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001086:	f7ff fa2d 	bl	80004e4 <HAL_GetTick>
 800108a:	0003      	movs	r3, r0
 800108c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001090:	f7ff fa28 	bl	80004e4 <HAL_GetTick>
 8001094:	0002      	movs	r2, r0
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e0aa      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	2202      	movs	r2, #2
 80010a8:	4013      	ands	r3, r2
 80010aa:	d1f1      	bne.n	8001090 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d100      	bne.n	80010b6 <HAL_RCC_OscConfig+0x64a>
 80010b4:	e09f      	b.n	80011f6 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	2b0c      	cmp	r3, #12
 80010ba:	d100      	bne.n	80010be <HAL_RCC_OscConfig+0x652>
 80010bc:	e078      	b.n	80011b0 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d159      	bne.n	800117a <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <HAL_RCC_OscConfig+0x670>)
 80010cc:	490c      	ldr	r1, [pc, #48]	; (8001100 <HAL_RCC_OscConfig+0x694>)
 80010ce:	400a      	ands	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d2:	f7ff fa07 	bl	80004e4 <HAL_GetTick>
 80010d6:	0003      	movs	r3, r0
 80010d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80010da:	e01c      	b.n	8001116 <HAL_RCC_OscConfig+0x6aa>
 80010dc:	40021000 	.word	0x40021000
 80010e0:	ffff1fff 	.word	0xffff1fff
 80010e4:	fffffeff 	.word	0xfffffeff
 80010e8:	40007000 	.word	0x40007000
 80010ec:	fffffbff 	.word	0xfffffbff
 80010f0:	00001388 	.word	0x00001388
 80010f4:	efffffff 	.word	0xefffffff
 80010f8:	40010000 	.word	0x40010000
 80010fc:	ffffdfff 	.word	0xffffdfff
 8001100:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001104:	f7ff f9ee 	bl	80004e4 <HAL_GetTick>
 8001108:	0002      	movs	r2, r0
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e070      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001116:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <HAL_RCC_OscConfig+0x794>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	049b      	lsls	r3, r3, #18
 800111e:	4013      	ands	r3, r2
 8001120:	d1f0      	bne.n	8001104 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001122:	4b37      	ldr	r3, [pc, #220]	; (8001200 <HAL_RCC_OscConfig+0x794>)
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	4a37      	ldr	r2, [pc, #220]	; (8001204 <HAL_RCC_OscConfig+0x798>)
 8001128:	4013      	ands	r3, r2
 800112a:	0019      	movs	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113a:	431a      	orrs	r2, r3
 800113c:	4b30      	ldr	r3, [pc, #192]	; (8001200 <HAL_RCC_OscConfig+0x794>)
 800113e:	430a      	orrs	r2, r1
 8001140:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001142:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <HAL_RCC_OscConfig+0x794>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <HAL_RCC_OscConfig+0x794>)
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	0449      	lsls	r1, r1, #17
 800114c:	430a      	orrs	r2, r1
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff f9c8 	bl	80004e4 <HAL_GetTick>
 8001154:	0003      	movs	r3, r0
 8001156:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800115a:	f7ff f9c3 	bl	80004e4 <HAL_GetTick>
 800115e:	0002      	movs	r2, r0
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e045      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800116c:	4b24      	ldr	r3, [pc, #144]	; (8001200 <HAL_RCC_OscConfig+0x794>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	049b      	lsls	r3, r3, #18
 8001174:	4013      	ands	r3, r2
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x6ee>
 8001178:	e03d      	b.n	80011f6 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <HAL_RCC_OscConfig+0x794>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_RCC_OscConfig+0x794>)
 8001180:	4921      	ldr	r1, [pc, #132]	; (8001208 <HAL_RCC_OscConfig+0x79c>)
 8001182:	400a      	ands	r2, r1
 8001184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001186:	f7ff f9ad 	bl	80004e4 <HAL_GetTick>
 800118a:	0003      	movs	r3, r0
 800118c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001190:	f7ff f9a8 	bl	80004e4 <HAL_GetTick>
 8001194:	0002      	movs	r2, r0
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e02a      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_RCC_OscConfig+0x794>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	049b      	lsls	r3, r3, #18
 80011aa:	4013      	ands	r3, r2
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0x724>
 80011ae:	e022      	b.n	80011f6 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d101      	bne.n	80011bc <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e01d      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <HAL_RCC_OscConfig+0x794>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	025b      	lsls	r3, r3, #9
 80011c8:	401a      	ands	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d10f      	bne.n	80011f2 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	23f0      	movs	r3, #240	; 0xf0
 80011d6:	039b      	lsls	r3, r3, #14
 80011d8:	401a      	ands	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011de:	429a      	cmp	r2, r3
 80011e0:	d107      	bne.n	80011f2 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	23c0      	movs	r3, #192	; 0xc0
 80011e6:	041b      	lsls	r3, r3, #16
 80011e8:	401a      	ands	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d001      	beq.n	80011f6 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b00a      	add	sp, #40	; 0x28
 80011fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001200:	40021000 	.word	0x40021000
 8001204:	ff02ffff 	.word	0xff02ffff
 8001208:	feffffff 	.word	0xfeffffff

0800120c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800120c:	b5b0      	push	{r4, r5, r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e10d      	b.n	800143c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001220:	4b88      	ldr	r3, [pc, #544]	; (8001444 <HAL_RCC_ClockConfig+0x238>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2201      	movs	r2, #1
 8001226:	4013      	ands	r3, r2
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d911      	bls.n	8001252 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122e:	4b85      	ldr	r3, [pc, #532]	; (8001444 <HAL_RCC_ClockConfig+0x238>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2201      	movs	r2, #1
 8001234:	4393      	bics	r3, r2
 8001236:	0019      	movs	r1, r3
 8001238:	4b82      	ldr	r3, [pc, #520]	; (8001444 <HAL_RCC_ClockConfig+0x238>)
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001240:	4b80      	ldr	r3, [pc, #512]	; (8001444 <HAL_RCC_ClockConfig+0x238>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2201      	movs	r2, #1
 8001246:	4013      	ands	r3, r2
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d001      	beq.n	8001252 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e0f4      	b.n	800143c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2202      	movs	r2, #2
 8001258:	4013      	ands	r3, r2
 800125a:	d009      	beq.n	8001270 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800125c:	4b7a      	ldr	r3, [pc, #488]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	22f0      	movs	r2, #240	; 0xf0
 8001262:	4393      	bics	r3, r2
 8001264:	0019      	movs	r1, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	4b77      	ldr	r3, [pc, #476]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 800126c:	430a      	orrs	r2, r1
 800126e:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2201      	movs	r2, #1
 8001276:	4013      	ands	r3, r2
 8001278:	d100      	bne.n	800127c <HAL_RCC_ClockConfig+0x70>
 800127a:	e089      	b.n	8001390 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d107      	bne.n	8001294 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001284:	4b70      	ldr	r3, [pc, #448]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	029b      	lsls	r3, r3, #10
 800128c:	4013      	ands	r3, r2
 800128e:	d120      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0d3      	b.n	800143c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b03      	cmp	r3, #3
 800129a:	d107      	bne.n	80012ac <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800129c:	4b6a      	ldr	r3, [pc, #424]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	049b      	lsls	r3, r3, #18
 80012a4:	4013      	ands	r3, r2
 80012a6:	d114      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0c7      	b.n	800143c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d106      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012b4:	4b64      	ldr	r3, [pc, #400]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2204      	movs	r2, #4
 80012ba:	4013      	ands	r3, r2
 80012bc:	d109      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e0bc      	b.n	800143c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012c2:	4b61      	ldr	r3, [pc, #388]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4013      	ands	r3, r2
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e0b4      	b.n	800143c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012d2:	4b5d      	ldr	r3, [pc, #372]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2203      	movs	r2, #3
 80012d8:	4393      	bics	r3, r2
 80012da:	0019      	movs	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	4b59      	ldr	r3, [pc, #356]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 80012e2:	430a      	orrs	r2, r1
 80012e4:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012e6:	f7ff f8fd 	bl	80004e4 <HAL_GetTick>
 80012ea:	0003      	movs	r3, r0
 80012ec:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d111      	bne.n	800131a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f6:	e009      	b.n	800130c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f8:	f7ff f8f4 	bl	80004e4 <HAL_GetTick>
 80012fc:	0002      	movs	r2, r0
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_RCC_ClockConfig+0x240>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d901      	bls.n	800130c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e097      	b.n	800143c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800130c:	4b4e      	ldr	r3, [pc, #312]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	220c      	movs	r2, #12
 8001312:	4013      	ands	r3, r2
 8001314:	2b08      	cmp	r3, #8
 8001316:	d1ef      	bne.n	80012f8 <HAL_RCC_ClockConfig+0xec>
 8001318:	e03a      	b.n	8001390 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d111      	bne.n	8001346 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001322:	e009      	b.n	8001338 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001324:	f7ff f8de 	bl	80004e4 <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	4a47      	ldr	r2, [pc, #284]	; (800144c <HAL_RCC_ClockConfig+0x240>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e081      	b.n	800143c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001338:	4b43      	ldr	r3, [pc, #268]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	220c      	movs	r2, #12
 800133e:	4013      	ands	r3, r2
 8001340:	2b0c      	cmp	r3, #12
 8001342:	d1ef      	bne.n	8001324 <HAL_RCC_ClockConfig+0x118>
 8001344:	e024      	b.n	8001390 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d11b      	bne.n	8001386 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800134e:	e009      	b.n	8001364 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001350:	f7ff f8c8 	bl	80004e4 <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	4a3c      	ldr	r2, [pc, #240]	; (800144c <HAL_RCC_ClockConfig+0x240>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e06b      	b.n	800143c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001364:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	220c      	movs	r2, #12
 800136a:	4013      	ands	r3, r2
 800136c:	2b04      	cmp	r3, #4
 800136e:	d1ef      	bne.n	8001350 <HAL_RCC_ClockConfig+0x144>
 8001370:	e00e      	b.n	8001390 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001372:	f7ff f8b7 	bl	80004e4 <HAL_GetTick>
 8001376:	0002      	movs	r2, r0
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	4a33      	ldr	r2, [pc, #204]	; (800144c <HAL_RCC_ClockConfig+0x240>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e05a      	b.n	800143c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001386:	4b30      	ldr	r3, [pc, #192]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	220c      	movs	r2, #12
 800138c:	4013      	ands	r3, r2
 800138e:	d1f0      	bne.n	8001372 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001390:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <HAL_RCC_ClockConfig+0x238>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2201      	movs	r2, #1
 8001396:	4013      	ands	r3, r2
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d211      	bcs.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139e:	4b29      	ldr	r3, [pc, #164]	; (8001444 <HAL_RCC_ClockConfig+0x238>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2201      	movs	r2, #1
 80013a4:	4393      	bics	r3, r2
 80013a6:	0019      	movs	r1, r3
 80013a8:	4b26      	ldr	r3, [pc, #152]	; (8001444 <HAL_RCC_ClockConfig+0x238>)
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <HAL_RCC_ClockConfig+0x238>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4013      	ands	r3, r2
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d001      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e03c      	b.n	800143c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2204      	movs	r2, #4
 80013c8:	4013      	ands	r3, r2
 80013ca:	d009      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <HAL_RCC_ClockConfig+0x244>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	0019      	movs	r1, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 80013dc:	430a      	orrs	r2, r1
 80013de:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2208      	movs	r2, #8
 80013e6:	4013      	ands	r3, r2
 80013e8:	d00a      	beq.n	8001400 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	4a19      	ldr	r2, [pc, #100]	; (8001454 <HAL_RCC_ClockConfig+0x248>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	0019      	movs	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	00da      	lsls	r2, r3, #3
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 80013fc:	430a      	orrs	r2, r1
 80013fe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001400:	f000 f82e 	bl	8001460 <HAL_RCC_GetSysClockFreq>
 8001404:	0001      	movs	r1, r0
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_RCC_ClockConfig+0x23c>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	091b      	lsrs	r3, r3, #4
 800140c:	220f      	movs	r2, #15
 800140e:	4013      	ands	r3, r2
 8001410:	4a11      	ldr	r2, [pc, #68]	; (8001458 <HAL_RCC_ClockConfig+0x24c>)
 8001412:	5cd3      	ldrb	r3, [r2, r3]
 8001414:	000a      	movs	r2, r1
 8001416:	40da      	lsrs	r2, r3
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_RCC_ClockConfig+0x250>)
 800141a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800141c:	250b      	movs	r5, #11
 800141e:	197c      	adds	r4, r7, r5
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff f829 	bl	8000478 <HAL_InitTick>
 8001426:	0003      	movs	r3, r0
 8001428:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800142a:	197b      	adds	r3, r7, r5
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001432:	230b      	movs	r3, #11
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	e000      	b.n	800143c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	0018      	movs	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	b004      	add	sp, #16
 8001442:	bdb0      	pop	{r4, r5, r7, pc}
 8001444:	40022000 	.word	0x40022000
 8001448:	40021000 	.word	0x40021000
 800144c:	00001388 	.word	0x00001388
 8001450:	fffff8ff 	.word	0xfffff8ff
 8001454:	ffffc7ff 	.word	0xffffc7ff
 8001458:	08004928 	.word	0x08004928
 800145c:	20000000 	.word	0x20000000

08001460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001466:	4b3b      	ldr	r3, [pc, #236]	; (8001554 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	220c      	movs	r2, #12
 8001470:	4013      	ands	r3, r2
 8001472:	2b08      	cmp	r3, #8
 8001474:	d00e      	beq.n	8001494 <HAL_RCC_GetSysClockFreq+0x34>
 8001476:	2b0c      	cmp	r3, #12
 8001478:	d00f      	beq.n	800149a <HAL_RCC_GetSysClockFreq+0x3a>
 800147a:	2b04      	cmp	r3, #4
 800147c:	d157      	bne.n	800152e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800147e:	4b35      	ldr	r3, [pc, #212]	; (8001554 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2210      	movs	r2, #16
 8001484:	4013      	ands	r3, r2
 8001486:	d002      	beq.n	800148e <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001488:	4b33      	ldr	r3, [pc, #204]	; (8001558 <HAL_RCC_GetSysClockFreq+0xf8>)
 800148a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800148c:	e05d      	b.n	800154a <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800148e:	4b33      	ldr	r3, [pc, #204]	; (800155c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001490:	613b      	str	r3, [r7, #16]
      break;
 8001492:	e05a      	b.n	800154a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <HAL_RCC_GetSysClockFreq+0x100>)
 8001496:	613b      	str	r3, [r7, #16]
      break;
 8001498:	e057      	b.n	800154a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	0c9b      	lsrs	r3, r3, #18
 800149e:	220f      	movs	r2, #15
 80014a0:	4013      	ands	r3, r2
 80014a2:	4a30      	ldr	r2, [pc, #192]	; (8001564 <HAL_RCC_GetSysClockFreq+0x104>)
 80014a4:	5cd3      	ldrb	r3, [r2, r3]
 80014a6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	0d9b      	lsrs	r3, r3, #22
 80014ac:	2203      	movs	r2, #3
 80014ae:	4013      	ands	r3, r2
 80014b0:	3301      	adds	r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_RCC_GetSysClockFreq+0xf4>)
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	025b      	lsls	r3, r3, #9
 80014bc:	4013      	ands	r3, r2
 80014be:	d00f      	beq.n	80014e0 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	000a      	movs	r2, r1
 80014c4:	0152      	lsls	r2, r2, #5
 80014c6:	1a52      	subs	r2, r2, r1
 80014c8:	0193      	lsls	r3, r2, #6
 80014ca:	1a9b      	subs	r3, r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	185b      	adds	r3, r3, r1
 80014d0:	025b      	lsls	r3, r3, #9
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7fe fe17 	bl	8000108 <__udivsi3>
 80014da:	0003      	movs	r3, r0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	e023      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_RCC_GetSysClockFreq+0xf4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2210      	movs	r2, #16
 80014e6:	4013      	ands	r3, r2
 80014e8:	d00f      	beq.n	800150a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80014ea:	68b9      	ldr	r1, [r7, #8]
 80014ec:	000a      	movs	r2, r1
 80014ee:	0152      	lsls	r2, r2, #5
 80014f0:	1a52      	subs	r2, r2, r1
 80014f2:	0193      	lsls	r3, r2, #6
 80014f4:	1a9b      	subs	r3, r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	185b      	adds	r3, r3, r1
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	0018      	movs	r0, r3
 8001500:	f7fe fe02 	bl	8000108 <__udivsi3>
 8001504:	0003      	movs	r3, r0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e00e      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800150a:	68b9      	ldr	r1, [r7, #8]
 800150c:	000a      	movs	r2, r1
 800150e:	0152      	lsls	r2, r2, #5
 8001510:	1a52      	subs	r2, r2, r1
 8001512:	0193      	lsls	r3, r2, #6
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	185b      	adds	r3, r3, r1
 800151a:	029b      	lsls	r3, r3, #10
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	0018      	movs	r0, r3
 8001520:	f7fe fdf2 	bl	8000108 <__udivsi3>
 8001524:	0003      	movs	r3, r0
 8001526:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	613b      	str	r3, [r7, #16]
      break;
 800152c:	e00d      	b.n	800154a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	0b5b      	lsrs	r3, r3, #13
 8001534:	2207      	movs	r2, #7
 8001536:	4013      	ands	r3, r2
 8001538:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	0212      	lsls	r2, r2, #8
 8001542:	409a      	lsls	r2, r3
 8001544:	0013      	movs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
      break;
 8001548:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800154a:	693b      	ldr	r3, [r7, #16]
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b006      	add	sp, #24
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000
 8001558:	003d0900 	.word	0x003d0900
 800155c:	00f42400 	.word	0x00f42400
 8001560:	007a1200 	.word	0x007a1200
 8001564:	08004940 	.word	0x08004940

08001568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800156c:	4b02      	ldr	r3, [pc, #8]	; (8001578 <HAL_RCC_GetHCLKFreq+0x10>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	20000000 	.word	0x20000000

0800157c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001580:	f7ff fff2 	bl	8001568 <HAL_RCC_GetHCLKFreq>
 8001584:	0001      	movs	r1, r0
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	0a1b      	lsrs	r3, r3, #8
 800158c:	2207      	movs	r2, #7
 800158e:	4013      	ands	r3, r2
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001592:	5cd3      	ldrb	r3, [r2, r3]
 8001594:	40d9      	lsrs	r1, r3
 8001596:	000b      	movs	r3, r1
}
 8001598:	0018      	movs	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	40021000 	.word	0x40021000
 80015a4:	08004938 	.word	0x08004938

080015a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015ac:	f7ff ffdc 	bl	8001568 <HAL_RCC_GetHCLKFreq>
 80015b0:	0001      	movs	r1, r0
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	0adb      	lsrs	r3, r3, #11
 80015b8:	2207      	movs	r2, #7
 80015ba:	4013      	ands	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80015be:	5cd3      	ldrb	r3, [r2, r3]
 80015c0:	40d9      	lsrs	r1, r3
 80015c2:	000b      	movs	r3, r1
}
 80015c4:	0018      	movs	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	40021000 	.word	0x40021000
 80015d0:	08004938 	.word	0x08004938

080015d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2220      	movs	r2, #32
 80015e2:	4013      	ands	r3, r2
 80015e4:	d106      	bne.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	4013      	ands	r3, r2
 80015f0:	d100      	bne.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80015f2:	e0dd      	b.n	80017b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80015f4:	2317      	movs	r3, #23
 80015f6:	18fb      	adds	r3, r7, r3
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fc:	4ba4      	ldr	r3, [pc, #656]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80015fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	055b      	lsls	r3, r3, #21
 8001604:	4013      	ands	r3, r2
 8001606:	d10a      	bne.n	800161e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001608:	4ba1      	ldr	r3, [pc, #644]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800160a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800160c:	4ba0      	ldr	r3, [pc, #640]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	0549      	lsls	r1, r1, #21
 8001612:	430a      	orrs	r2, r1
 8001614:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001616:	2317      	movs	r3, #23
 8001618:	18fb      	adds	r3, r7, r3
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161e:	4b9d      	ldr	r3, [pc, #628]	; (8001894 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4013      	ands	r3, r2
 8001628:	d11a      	bne.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162a:	4b9a      	ldr	r3, [pc, #616]	; (8001894 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4b99      	ldr	r3, [pc, #612]	; (8001894 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	0049      	lsls	r1, r1, #1
 8001634:	430a      	orrs	r2, r1
 8001636:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001638:	f7fe ff54 	bl	80004e4 <HAL_GetTick>
 800163c:	0003      	movs	r3, r0
 800163e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	e008      	b.n	8001654 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001642:	f7fe ff4f 	bl	80004e4 <HAL_GetTick>
 8001646:	0002      	movs	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b64      	cmp	r3, #100	; 0x64
 800164e:	d901      	bls.n	8001654 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e118      	b.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	4b8f      	ldr	r3, [pc, #572]	; (8001894 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4013      	ands	r3, r2
 800165e:	d0f0      	beq.n	8001642 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001660:	4b8b      	ldr	r3, [pc, #556]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	23c0      	movs	r3, #192	; 0xc0
 8001666:	039b      	lsls	r3, r3, #14
 8001668:	4013      	ands	r3, r2
 800166a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	23c0      	movs	r3, #192	; 0xc0
 8001672:	039b      	lsls	r3, r3, #14
 8001674:	4013      	ands	r3, r2
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d107      	bne.n	800168c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	23c0      	movs	r3, #192	; 0xc0
 8001682:	039b      	lsls	r3, r3, #14
 8001684:	4013      	ands	r3, r2
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	429a      	cmp	r2, r3
 800168a:	d013      	beq.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	23c0      	movs	r3, #192	; 0xc0
 8001692:	029b      	lsls	r3, r3, #10
 8001694:	401a      	ands	r2, r3
 8001696:	23c0      	movs	r3, #192	; 0xc0
 8001698:	029b      	lsls	r3, r3, #10
 800169a:	429a      	cmp	r2, r3
 800169c:	d10a      	bne.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800169e:	4b7c      	ldr	r3, [pc, #496]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	029b      	lsls	r3, r3, #10
 80016a6:	401a      	ands	r2, r3
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	029b      	lsls	r3, r3, #10
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d101      	bne.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0e8      	b.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80016b4:	4b76      	ldr	r3, [pc, #472]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80016b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016b8:	23c0      	movs	r3, #192	; 0xc0
 80016ba:	029b      	lsls	r3, r3, #10
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d049      	beq.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	23c0      	movs	r3, #192	; 0xc0
 80016cc:	029b      	lsls	r3, r3, #10
 80016ce:	4013      	ands	r3, r2
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d004      	beq.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2220      	movs	r2, #32
 80016dc:	4013      	ands	r3, r2
 80016de:	d10d      	bne.n	80016fc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	23c0      	movs	r3, #192	; 0xc0
 80016e6:	029b      	lsls	r3, r3, #10
 80016e8:	4013      	ands	r3, r2
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d034      	beq.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	4013      	ands	r3, r2
 80016fa:	d02e      	beq.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80016fc:	4b64      	ldr	r3, [pc, #400]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80016fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001700:	4a65      	ldr	r2, [pc, #404]	; (8001898 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001702:	4013      	ands	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001706:	4b62      	ldr	r3, [pc, #392]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001708:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800170a:	4b61      	ldr	r3, [pc, #388]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800170c:	2180      	movs	r1, #128	; 0x80
 800170e:	0309      	lsls	r1, r1, #12
 8001710:	430a      	orrs	r2, r1
 8001712:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001714:	4b5e      	ldr	r3, [pc, #376]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001718:	4b5d      	ldr	r3, [pc, #372]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800171a:	4960      	ldr	r1, [pc, #384]	; (800189c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800171c:	400a      	ands	r2, r1
 800171e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001720:	4b5b      	ldr	r3, [pc, #364]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4013      	ands	r3, r2
 800172e:	d014      	beq.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7fe fed8 	bl	80004e4 <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001738:	e009      	b.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7fe fed3 	bl	80004e4 <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	4a56      	ldr	r2, [pc, #344]	; (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e09b      	b.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800174e:	4b50      	ldr	r3, [pc, #320]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001750:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4013      	ands	r3, r2
 8001758:	d0ef      	beq.n	800173a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	23c0      	movs	r3, #192	; 0xc0
 8001760:	029b      	lsls	r3, r3, #10
 8001762:	401a      	ands	r2, r3
 8001764:	23c0      	movs	r3, #192	; 0xc0
 8001766:	029b      	lsls	r3, r3, #10
 8001768:	429a      	cmp	r2, r3
 800176a:	d10c      	bne.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800176c:	4b48      	ldr	r3, [pc, #288]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a4c      	ldr	r2, [pc, #304]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001772:	4013      	ands	r3, r2
 8001774:	0019      	movs	r1, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	23c0      	movs	r3, #192	; 0xc0
 800177c:	039b      	lsls	r3, r3, #14
 800177e:	401a      	ands	r2, r3
 8001780:	4b43      	ldr	r3, [pc, #268]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001782:	430a      	orrs	r2, r1
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	4b42      	ldr	r3, [pc, #264]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001788:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	23c0      	movs	r3, #192	; 0xc0
 8001790:	029b      	lsls	r3, r3, #10
 8001792:	401a      	ands	r2, r3
 8001794:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001796:	430a      	orrs	r2, r1
 8001798:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800179a:	2317      	movs	r3, #23
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d105      	bne.n	80017b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a4:	4b3a      	ldr	r3, [pc, #232]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017a8:	4b39      	ldr	r3, [pc, #228]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017aa:	493f      	ldr	r1, [pc, #252]	; (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80017ac:	400a      	ands	r2, r1
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	4013      	ands	r3, r2
 80017b8:	d009      	beq.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017ba:	4b35      	ldr	r3, [pc, #212]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	2203      	movs	r2, #3
 80017c0:	4393      	bics	r3, r2
 80017c2:	0019      	movs	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	4b31      	ldr	r3, [pc, #196]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017ca:	430a      	orrs	r2, r1
 80017cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2202      	movs	r2, #2
 80017d4:	4013      	ands	r3, r2
 80017d6:	d009      	beq.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80017d8:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017dc:	220c      	movs	r2, #12
 80017de:	4393      	bics	r3, r2
 80017e0:	0019      	movs	r1, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017e8:	430a      	orrs	r2, r1
 80017ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2204      	movs	r2, #4
 80017f2:	4013      	ands	r3, r2
 80017f4:	d009      	beq.n	800180a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	4a2c      	ldr	r2, [pc, #176]	; (80018ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695a      	ldr	r2, [r3, #20]
 8001804:	4b22      	ldr	r3, [pc, #136]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001806:	430a      	orrs	r2, r1
 8001808:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2208      	movs	r2, #8
 8001810:	4013      	ands	r3, r2
 8001812:	d009      	beq.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001818:	4a25      	ldr	r2, [pc, #148]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800181a:	4013      	ands	r3, r2
 800181c:	0019      	movs	r1, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699a      	ldr	r2, [r3, #24]
 8001822:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001824:	430a      	orrs	r2, r1
 8001826:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4013      	ands	r3, r2
 8001832:	d009      	beq.n	8001848 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001834:	4b16      	ldr	r3, [pc, #88]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001838:	4a17      	ldr	r2, [pc, #92]	; (8001898 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800183a:	4013      	ands	r3, r2
 800183c:	0019      	movs	r1, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69da      	ldr	r2, [r3, #28]
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001844:	430a      	orrs	r2, r1
 8001846:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2240      	movs	r2, #64	; 0x40
 800184e:	4013      	ands	r3, r2
 8001850:	d009      	beq.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001858:	4013      	ands	r3, r2
 800185a:	0019      	movs	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001862:	430a      	orrs	r2, r1
 8001864:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	4013      	ands	r3, r2
 800186e:	d009      	beq.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001874:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001876:	4013      	ands	r3, r2
 8001878:	0019      	movs	r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1a      	ldr	r2, [r3, #32]
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001880:	430a      	orrs	r2, r1
 8001882:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	0018      	movs	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	b006      	add	sp, #24
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	40021000 	.word	0x40021000
 8001894:	40007000 	.word	0x40007000
 8001898:	fffcffff 	.word	0xfffcffff
 800189c:	fff7ffff 	.word	0xfff7ffff
 80018a0:	00001388 	.word	0x00001388
 80018a4:	ffcfffff 	.word	0xffcfffff
 80018a8:	efffffff 	.word	0xefffffff
 80018ac:	fffff3ff 	.word	0xfffff3ff
 80018b0:	ffffcfff 	.word	0xffffcfff
 80018b4:	fbffffff 	.word	0xfbffffff
 80018b8:	fff3ffff 	.word	0xfff3ffff

080018bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e01e      	b.n	800190c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2239      	movs	r2, #57	; 0x39
 80018d2:	5c9b      	ldrb	r3, [r3, r2]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d107      	bne.n	80018ea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2238      	movs	r2, #56	; 0x38
 80018de:	2100      	movs	r1, #0
 80018e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f001 fff9 	bl	80038dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2239      	movs	r2, #57	; 0x39
 80018ee:	2102      	movs	r1, #2
 80018f0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3304      	adds	r3, #4
 80018fa:	0019      	movs	r1, r3
 80018fc:	0010      	movs	r0, r2
 80018fe:	f000 fbf7 	bl	80020f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2239      	movs	r2, #57	; 0x39
 8001906:	2101      	movs	r1, #1
 8001908:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b002      	add	sp, #8
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2101      	movs	r1, #1
 8001928:	430a      	orrs	r2, r1
 800192a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2207      	movs	r2, #7
 8001934:	4013      	ands	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b06      	cmp	r3, #6
 800193c:	d007      	beq.n	800194e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2101      	movs	r1, #1
 800194a:	430a      	orrs	r2, r1
 800194c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b004      	add	sp, #16
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e01e      	b.n	80019a8 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2239      	movs	r2, #57	; 0x39
 800196e:	5c9b      	ldrb	r3, [r3, r2]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d107      	bne.n	8001986 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2238      	movs	r2, #56	; 0x38
 800197a:	2100      	movs	r1, #0
 800197c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	0018      	movs	r0, r3
 8001982:	f000 f815 	bl	80019b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2239      	movs	r2, #57	; 0x39
 800198a:	2102      	movs	r1, #2
 800198c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3304      	adds	r3, #4
 8001996:	0019      	movs	r1, r3
 8001998:	0010      	movs	r0, r2
 800199a:	f000 fba9 	bl	80020f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2239      	movs	r2, #57	; 0x39
 80019a2:	2101      	movs	r1, #1
 80019a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b002      	add	sp, #8
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e07c      	b.n	8001ace <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2239      	movs	r2, #57	; 0x39
 80019d8:	5c9b      	ldrb	r3, [r3, r2]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d107      	bne.n	80019f0 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2238      	movs	r2, #56	; 0x38
 80019e4:	2100      	movs	r1, #0
 80019e6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	0018      	movs	r0, r3
 80019ec:	f001 ffa2 	bl	8003934 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2239      	movs	r2, #57	; 0x39
 80019f4:	2102      	movs	r1, #2
 80019f6:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4935      	ldr	r1, [pc, #212]	; (8001ad8 <HAL_TIM_Encoder_Init+0x118>)
 8001a04:	400a      	ands	r2, r1
 8001a06:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	0019      	movs	r1, r3
 8001a12:	0010      	movs	r0, r2
 8001a14:	f000 fb6c 	bl	80020f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4a27      	ldr	r2, [pc, #156]	; (8001adc <HAL_TIM_Encoder_Init+0x11c>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4a22      	ldr	r2, [pc, #136]	; (8001ae0 <HAL_TIM_Encoder_Init+0x120>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <HAL_TIM_Encoder_Init+0x124>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	011a      	lsls	r2, r3, #4
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	031b      	lsls	r3, r3, #12
 8001a82:	4313      	orrs	r3, r2
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2222      	movs	r2, #34	; 0x22
 8001a8e:	4393      	bics	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2288      	movs	r2, #136	; 0x88
 8001a96:	4393      	bics	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2239      	movs	r2, #57	; 0x39
 8001ac8:	2101      	movs	r1, #1
 8001aca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	0018      	movs	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b006      	add	sp, #24
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	ffffbff8 	.word	0xffffbff8
 8001adc:	fffffcfc 	.word	0xfffffcfc
 8001ae0:	fffff3f3 	.word	0xfffff3f3
 8001ae4:	ffff0f0f 	.word	0xffff0f0f

08001ae8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <HAL_TIM_Encoder_Start+0x16>
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d008      	beq.n	8001b0e <HAL_TIM_Encoder_Start+0x26>
 8001afc:	e00f      	b.n	8001b1e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2201      	movs	r2, #1
 8001b04:	2100      	movs	r1, #0
 8001b06:	0018      	movs	r0, r3
 8001b08:	f000 fd72 	bl	80025f0 <TIM_CCxChannelCmd>
      break;
 8001b0c:	e016      	b.n	8001b3c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2201      	movs	r2, #1
 8001b14:	2104      	movs	r1, #4
 8001b16:	0018      	movs	r0, r3
 8001b18:	f000 fd6a 	bl	80025f0 <TIM_CCxChannelCmd>
      break;
 8001b1c:	e00e      	b.n	8001b3c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2201      	movs	r2, #1
 8001b24:	2100      	movs	r1, #0
 8001b26:	0018      	movs	r0, r3
 8001b28:	f000 fd62 	bl	80025f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2201      	movs	r2, #1
 8001b32:	2104      	movs	r1, #4
 8001b34:	0018      	movs	r0, r3
 8001b36:	f000 fd5b 	bl	80025f0 <TIM_CCxChannelCmd>
      break;
 8001b3a:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2101      	movs	r1, #1
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b002      	add	sp, #8
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	2202      	movs	r2, #2
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d124      	bne.n	8001bb6 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2202      	movs	r2, #2
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d11d      	bne.n	8001bb6 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	4252      	negs	r2, r2
 8001b82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2203      	movs	r2, #3
 8001b92:	4013      	ands	r3, r2
 8001b94:	d004      	beq.n	8001ba0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f000 fa91 	bl	80020c0 <HAL_TIM_IC_CaptureCallback>
 8001b9e:	e007      	b.n	8001bb0 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f000 fa84 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 fa90 	bl	80020d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d125      	bne.n	8001c10 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2204      	movs	r2, #4
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d11e      	bne.n	8001c10 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2205      	movs	r2, #5
 8001bd8:	4252      	negs	r2, r2
 8001bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699a      	ldr	r2, [r3, #24]
 8001be8:	23c0      	movs	r3, #192	; 0xc0
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4013      	ands	r3, r2
 8001bee:	d004      	beq.n	8001bfa <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 fa64 	bl	80020c0 <HAL_TIM_IC_CaptureCallback>
 8001bf8:	e007      	b.n	8001c0a <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f000 fa57 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	0018      	movs	r0, r3
 8001c06:	f000 fa63 	bl	80020d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2208      	movs	r2, #8
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d124      	bne.n	8001c68 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2208      	movs	r2, #8
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d11d      	bne.n	8001c68 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2209      	movs	r2, #9
 8001c32:	4252      	negs	r2, r2
 8001c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	2203      	movs	r2, #3
 8001c44:	4013      	ands	r3, r2
 8001c46:	d004      	beq.n	8001c52 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f000 fa38 	bl	80020c0 <HAL_TIM_IC_CaptureCallback>
 8001c50:	e007      	b.n	8001c62 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f000 fa2b 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f000 fa37 	bl	80020d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2210      	movs	r2, #16
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b10      	cmp	r3, #16
 8001c74:	d125      	bne.n	8001cc2 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2210      	movs	r2, #16
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b10      	cmp	r3, #16
 8001c82:	d11e      	bne.n	8001cc2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2211      	movs	r2, #17
 8001c8a:	4252      	negs	r2, r2
 8001c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2208      	movs	r2, #8
 8001c92:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	23c0      	movs	r3, #192	; 0xc0
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d004      	beq.n	8001cac <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f000 fa0b 	bl	80020c0 <HAL_TIM_IC_CaptureCallback>
 8001caa:	e007      	b.n	8001cbc <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f000 f9fe 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f000 fa0a 	bl	80020d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d10f      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d108      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	4252      	negs	r2, r2
 8001ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	0018      	movs	r0, r3
 8001cec:	f000 f9d8 	bl	80020a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	2240      	movs	r2, #64	; 0x40
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b40      	cmp	r3, #64	; 0x40
 8001cfc:	d10f      	bne.n	8001d1e <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2240      	movs	r2, #64	; 0x40
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b40      	cmp	r3, #64	; 0x40
 8001d0a:	d108      	bne.n	8001d1e <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2241      	movs	r2, #65	; 0x41
 8001d12:	4252      	negs	r2, r2
 8001d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 f9e1 	bl	80020e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b002      	add	sp, #8
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2238      	movs	r2, #56	; 0x38
 8001d38:	5c9b      	ldrb	r3, [r3, r2]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e0a4      	b.n	8001e8c <HAL_TIM_PWM_ConfigChannel+0x164>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2238      	movs	r2, #56	; 0x38
 8001d46:	2101      	movs	r1, #1
 8001d48:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2239      	movs	r2, #57	; 0x39
 8001d4e:	2102      	movs	r1, #2
 8001d50:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d029      	beq.n	8001dac <HAL_TIM_PWM_ConfigChannel+0x84>
 8001d58:	d802      	bhi.n	8001d60 <HAL_TIM_PWM_ConfigChannel+0x38>
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d005      	beq.n	8001d6a <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8001d5e:	e08c      	b.n	8001e7a <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d046      	beq.n	8001df2 <HAL_TIM_PWM_ConfigChannel+0xca>
 8001d64:	2b0c      	cmp	r3, #12
 8001d66:	d065      	beq.n	8001e34 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8001d68:	e087      	b.n	8001e7a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	0011      	movs	r1, r2
 8001d72:	0018      	movs	r0, r3
 8001d74:	f000 fa1a 	bl	80021ac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2108      	movs	r1, #8
 8001d84:	430a      	orrs	r2, r1
 8001d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2104      	movs	r1, #4
 8001d94:	438a      	bics	r2, r1
 8001d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6999      	ldr	r1, [r3, #24]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	619a      	str	r2, [r3, #24]
      break;
 8001daa:	e066      	b.n	8001e7a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	0011      	movs	r1, r2
 8001db4:	0018      	movs	r0, r3
 8001db6:	f000 fa35 	bl	8002224 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699a      	ldr	r2, [r3, #24]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2180      	movs	r1, #128	; 0x80
 8001dc6:	0109      	lsls	r1, r1, #4
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	492f      	ldr	r1, [pc, #188]	; (8001e94 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001dd8:	400a      	ands	r2, r1
 8001dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6999      	ldr	r1, [r3, #24]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	021a      	lsls	r2, r3, #8
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	619a      	str	r2, [r3, #24]
      break;
 8001df0:	e043      	b.n	8001e7a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	0011      	movs	r1, r2
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 fa54 	bl	80022a8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	69da      	ldr	r2, [r3, #28]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2108      	movs	r1, #8
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	438a      	bics	r2, r1
 8001e1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	69d9      	ldr	r1, [r3, #28]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	61da      	str	r2, [r3, #28]
      break;
 8001e32:	e022      	b.n	8001e7a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	0011      	movs	r1, r2
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f000 fa73 	bl	8002328 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	69da      	ldr	r2, [r3, #28]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	0109      	lsls	r1, r1, #4
 8001e50:	430a      	orrs	r2, r1
 8001e52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	490d      	ldr	r1, [pc, #52]	; (8001e94 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001e60:	400a      	ands	r2, r1
 8001e62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69d9      	ldr	r1, [r3, #28]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	021a      	lsls	r2, r3, #8
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	61da      	str	r2, [r3, #28]
      break;
 8001e78:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2239      	movs	r2, #57	; 0x39
 8001e7e:	2101      	movs	r1, #1
 8001e80:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2238      	movs	r2, #56	; 0x38
 8001e86:	2100      	movs	r1, #0
 8001e88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b004      	add	sp, #16
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	fffffbff 	.word	0xfffffbff

08001e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2238      	movs	r2, #56	; 0x38
 8001ea6:	5c9b      	ldrb	r3, [r3, r2]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_TIM_ConfigClockSource+0x18>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e0ab      	b.n	8002008 <HAL_TIM_ConfigClockSource+0x170>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2238      	movs	r2, #56	; 0x38
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2239      	movs	r2, #57	; 0x39
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2277      	movs	r2, #119	; 0x77
 8001ecc:	4393      	bics	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4a4f      	ldr	r2, [pc, #316]	; (8002010 <HAL_TIM_ConfigClockSource+0x178>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b40      	cmp	r3, #64	; 0x40
 8001ee6:	d100      	bne.n	8001eea <HAL_TIM_ConfigClockSource+0x52>
 8001ee8:	e06b      	b.n	8001fc2 <HAL_TIM_ConfigClockSource+0x12a>
 8001eea:	d80e      	bhi.n	8001f0a <HAL_TIM_ConfigClockSource+0x72>
 8001eec:	2b10      	cmp	r3, #16
 8001eee:	d100      	bne.n	8001ef2 <HAL_TIM_ConfigClockSource+0x5a>
 8001ef0:	e077      	b.n	8001fe2 <HAL_TIM_ConfigClockSource+0x14a>
 8001ef2:	d803      	bhi.n	8001efc <HAL_TIM_ConfigClockSource+0x64>
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d100      	bne.n	8001efa <HAL_TIM_ConfigClockSource+0x62>
 8001ef8:	e073      	b.n	8001fe2 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001efa:	e07c      	b.n	8001ff6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	d100      	bne.n	8001f02 <HAL_TIM_ConfigClockSource+0x6a>
 8001f00:	e06f      	b.n	8001fe2 <HAL_TIM_ConfigClockSource+0x14a>
 8001f02:	2b30      	cmp	r3, #48	; 0x30
 8001f04:	d100      	bne.n	8001f08 <HAL_TIM_ConfigClockSource+0x70>
 8001f06:	e06c      	b.n	8001fe2 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8001f08:	e075      	b.n	8001ff6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001f0a:	2b70      	cmp	r3, #112	; 0x70
 8001f0c:	d00e      	beq.n	8001f2c <HAL_TIM_ConfigClockSource+0x94>
 8001f0e:	d804      	bhi.n	8001f1a <HAL_TIM_ConfigClockSource+0x82>
 8001f10:	2b50      	cmp	r3, #80	; 0x50
 8001f12:	d036      	beq.n	8001f82 <HAL_TIM_ConfigClockSource+0xea>
 8001f14:	2b60      	cmp	r3, #96	; 0x60
 8001f16:	d044      	beq.n	8001fa2 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8001f18:	e06d      	b.n	8001ff6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001f1a:	2280      	movs	r2, #128	; 0x80
 8001f1c:	0152      	lsls	r2, r2, #5
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d068      	beq.n	8001ff4 <HAL_TIM_ConfigClockSource+0x15c>
 8001f22:	2280      	movs	r2, #128	; 0x80
 8001f24:	0192      	lsls	r2, r2, #6
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d017      	beq.n	8001f5a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8001f2a:	e064      	b.n	8001ff6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6899      	ldr	r1, [r3, #8]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f000 fb38 	bl	80025b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2277      	movs	r2, #119	; 0x77
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	609a      	str	r2, [r3, #8]
      break;
 8001f58:	e04d      	b.n	8001ff6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6899      	ldr	r1, [r3, #8]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f000 fb21 	bl	80025b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	01c9      	lsls	r1, r1, #7
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	609a      	str	r2, [r3, #8]
      break;
 8001f80:	e039      	b.n	8001ff6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	6859      	ldr	r1, [r3, #4]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	001a      	movs	r2, r3
 8001f90:	f000 fa94 	bl	80024bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2150      	movs	r1, #80	; 0x50
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f000 faee 	bl	800257c <TIM_ITRx_SetConfig>
      break;
 8001fa0:	e029      	b.n	8001ff6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6859      	ldr	r1, [r3, #4]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	001a      	movs	r2, r3
 8001fb0:	f000 fab2 	bl	8002518 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2160      	movs	r1, #96	; 0x60
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f000 fade 	bl	800257c <TIM_ITRx_SetConfig>
      break;
 8001fc0:	e019      	b.n	8001ff6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	6859      	ldr	r1, [r3, #4]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	001a      	movs	r2, r3
 8001fd0:	f000 fa74 	bl	80024bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2140      	movs	r1, #64	; 0x40
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f000 face 	bl	800257c <TIM_ITRx_SetConfig>
      break;
 8001fe0:	e009      	b.n	8001ff6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	0019      	movs	r1, r3
 8001fec:	0010      	movs	r0, r2
 8001fee:	f000 fac5 	bl	800257c <TIM_ITRx_SetConfig>
      break;
 8001ff2:	e000      	b.n	8001ff6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8001ff4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2239      	movs	r2, #57	; 0x39
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2238      	movs	r2, #56	; 0x38
 8002002:	2100      	movs	r1, #0
 8002004:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	0018      	movs	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	b004      	add	sp, #16
 800200e:	bd80      	pop	{r7, pc}
 8002010:	ffff00ff 	.word	0xffff00ff

08002014 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2238      	movs	r2, #56	; 0x38
 8002022:	5c9b      	ldrb	r3, [r3, r2]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_TIM_SlaveConfigSynchro+0x18>
 8002028:	2302      	movs	r3, #2
 800202a:	e032      	b.n	8002092 <HAL_TIM_SlaveConfigSynchro+0x7e>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2238      	movs	r2, #56	; 0x38
 8002030:	2101      	movs	r1, #1
 8002032:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2239      	movs	r2, #57	; 0x39
 8002038:	2102      	movs	r1, #2
 800203a:	5499      	strb	r1, [r3, r2]

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0011      	movs	r1, r2
 8002042:	0018      	movs	r0, r3
 8002044:	f000 f9b6 	bl	80023b4 <TIM_SlaveTimer_SetConfig>
 8002048:	1e03      	subs	r3, r0, #0
 800204a:	d009      	beq.n	8002060 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
      htim->State = HAL_TIM_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2239      	movs	r2, #57	; 0x39
 8002050:	2101      	movs	r1, #1
 8002052:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2238      	movs	r2, #56	; 0x38
 8002058:	2100      	movs	r1, #0
 800205a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e018      	b.n	8002092 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2140      	movs	r1, #64	; 0x40
 800206c:	438a      	bics	r2, r1
 800206e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4908      	ldr	r1, [pc, #32]	; (800209c <HAL_TIM_SlaveConfigSynchro+0x88>)
 800207c:	400a      	ands	r2, r1
 800207e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2239      	movs	r2, #57	; 0x39
 8002084:	2101      	movs	r1, #1
 8002086:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2238      	movs	r2, #56	; 0x38
 800208c:	2100      	movs	r1, #0
 800208e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	0018      	movs	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	ffffbfff 	.word	0xffffbfff

080020a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80020a8:	46c0      	nop			; (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b002      	add	sp, #8
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020b8:	46c0      	nop			; (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b002      	add	sp, #8
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020c8:	46c0      	nop			; (mov r8, r8)
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b002      	add	sp, #8
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b002      	add	sp, #8
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020e8:	46c0      	nop			; (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b002      	add	sp, #8
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	05db      	lsls	r3, r3, #23
 8002106:	429a      	cmp	r2, r3
 8002108:	d00b      	beq.n	8002122 <TIM_Base_SetConfig+0x32>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a23      	ldr	r2, [pc, #140]	; (800219c <TIM_Base_SetConfig+0xac>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d007      	beq.n	8002122 <TIM_Base_SetConfig+0x32>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a22      	ldr	r2, [pc, #136]	; (80021a0 <TIM_Base_SetConfig+0xb0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d003      	beq.n	8002122 <TIM_Base_SetConfig+0x32>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <TIM_Base_SetConfig+0xb4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d108      	bne.n	8002134 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2270      	movs	r2, #112	; 0x70
 8002126:	4393      	bics	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	05db      	lsls	r3, r3, #23
 800213a:	429a      	cmp	r2, r3
 800213c:	d00b      	beq.n	8002156 <TIM_Base_SetConfig+0x66>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a16      	ldr	r2, [pc, #88]	; (800219c <TIM_Base_SetConfig+0xac>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d007      	beq.n	8002156 <TIM_Base_SetConfig+0x66>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a15      	ldr	r2, [pc, #84]	; (80021a0 <TIM_Base_SetConfig+0xb0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d003      	beq.n	8002156 <TIM_Base_SetConfig+0x66>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a14      	ldr	r2, [pc, #80]	; (80021a4 <TIM_Base_SetConfig+0xb4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d108      	bne.n	8002168 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <TIM_Base_SetConfig+0xb8>)
 800215a:	4013      	ands	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4313      	orrs	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2280      	movs	r2, #128	; 0x80
 800216c:	4393      	bics	r3, r2
 800216e:	001a      	movs	r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	615a      	str	r2, [r3, #20]
}
 8002194:	46c0      	nop			; (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	b004      	add	sp, #16
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40000400 	.word	0x40000400
 80021a0:	40010800 	.word	0x40010800
 80021a4:	40011400 	.word	0x40011400
 80021a8:	fffffcff 	.word	0xfffffcff

080021ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	2201      	movs	r2, #1
 80021bc:	4393      	bics	r3, r2
 80021be:	001a      	movs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2270      	movs	r2, #112	; 0x70
 80021da:	4393      	bics	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2203      	movs	r2, #3
 80021e2:	4393      	bics	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2202      	movs	r2, #2
 80021f4:	4393      	bics	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	621a      	str	r2, [r3, #32]
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	b006      	add	sp, #24
 8002222:	bd80      	pop	{r7, pc}

08002224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	2210      	movs	r2, #16
 8002234:	4393      	bics	r3, r2
 8002236:	001a      	movs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <TIM_OC2_SetConfig+0x7c>)
 8002252:	4013      	ands	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <TIM_OC2_SetConfig+0x80>)
 800225a:	4013      	ands	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2220      	movs	r2, #32
 800226e:	4393      	bics	r3, r2
 8002270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	621a      	str	r2, [r3, #32]
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b006      	add	sp, #24
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	ffff8fff 	.word	0xffff8fff
 80022a4:	fffffcff 	.word	0xfffffcff

080022a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <TIM_OC3_SetConfig+0x78>)
 80022b8:	401a      	ands	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2270      	movs	r2, #112	; 0x70
 80022d4:	4393      	bics	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2203      	movs	r2, #3
 80022dc:	4393      	bics	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <TIM_OC3_SetConfig+0x7c>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	621a      	str	r2, [r3, #32]
}
 8002318:	46c0      	nop			; (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b006      	add	sp, #24
 800231e:	bd80      	pop	{r7, pc}
 8002320:	fffffeff 	.word	0xfffffeff
 8002324:	fffffdff 	.word	0xfffffdff

08002328 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <TIM_OC4_SetConfig+0x7c>)
 8002338:	401a      	ands	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <TIM_OC4_SetConfig+0x80>)
 8002354:	4013      	ands	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4a14      	ldr	r2, [pc, #80]	; (80023ac <TIM_OC4_SetConfig+0x84>)
 800235c:	4013      	ands	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <TIM_OC4_SetConfig+0x88>)
 8002370:	4013      	ands	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	031b      	lsls	r3, r3, #12
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4313      	orrs	r3, r2
 800237e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	621a      	str	r2, [r3, #32]
}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	b006      	add	sp, #24
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	ffffefff 	.word	0xffffefff
 80023a8:	ffff8fff 	.word	0xffff8fff
 80023ac:	fffffcff 	.word	0xfffffcff
 80023b0:	ffffdfff 	.word	0xffffdfff

080023b4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2270      	movs	r2, #112	; 0x70
 80023ca:	4393      	bics	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2207      	movs	r2, #7
 80023dc:	4393      	bics	r3, r2
 80023de:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b30      	cmp	r3, #48	; 0x30
 80023f8:	d05a      	beq.n	80024b0 <TIM_SlaveTimer_SetConfig+0xfc>
 80023fa:	d806      	bhi.n	800240a <TIM_SlaveTimer_SetConfig+0x56>
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d057      	beq.n	80024b0 <TIM_SlaveTimer_SetConfig+0xfc>
 8002400:	2b20      	cmp	r3, #32
 8002402:	d055      	beq.n	80024b0 <TIM_SlaveTimer_SetConfig+0xfc>
 8002404:	2b00      	cmp	r3, #0
 8002406:	d053      	beq.n	80024b0 <TIM_SlaveTimer_SetConfig+0xfc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8002408:	e053      	b.n	80024b2 <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 800240a:	2b50      	cmp	r3, #80	; 0x50
 800240c:	d03c      	beq.n	8002488 <TIM_SlaveTimer_SetConfig+0xd4>
 800240e:	d802      	bhi.n	8002416 <TIM_SlaveTimer_SetConfig+0x62>
 8002410:	2b40      	cmp	r3, #64	; 0x40
 8002412:	d010      	beq.n	8002436 <TIM_SlaveTimer_SetConfig+0x82>
      break;
 8002414:	e04d      	b.n	80024b2 <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8002416:	2b60      	cmp	r3, #96	; 0x60
 8002418:	d040      	beq.n	800249c <TIM_SlaveTimer_SetConfig+0xe8>
 800241a:	2b70      	cmp	r3, #112	; 0x70
 800241c:	d000      	beq.n	8002420 <TIM_SlaveTimer_SetConfig+0x6c>
      break;
 800241e:	e048      	b.n	80024b2 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68d9      	ldr	r1, [r3, #12]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f000 f8be 	bl	80025b0 <TIM_ETR_SetConfig>
      break;
 8002434:	e03d      	b.n	80024b2 <TIM_SlaveTimer_SetConfig+0xfe>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b05      	cmp	r3, #5
 800243c:	d101      	bne.n	8002442 <TIM_SlaveTimer_SetConfig+0x8e>
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e038      	b.n	80024b4 <TIM_SlaveTimer_SetConfig+0x100>
      tmpccer = htim->Instance->CCER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6a1a      	ldr	r2, [r3, #32]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2101      	movs	r1, #1
 8002456:	438a      	bics	r2, r1
 8002458:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	22f0      	movs	r2, #240	; 0xf0
 8002466:	4393      	bics	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	621a      	str	r2, [r3, #32]
      break;
 8002486:	e014      	b.n	80024b2 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	6899      	ldr	r1, [r3, #8]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	001a      	movs	r2, r3
 8002496:	f000 f811 	bl	80024bc <TIM_TI1_ConfigInputStage>
      break;
 800249a:	e00a      	b.n	80024b2 <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6899      	ldr	r1, [r3, #8]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	001a      	movs	r2, r3
 80024aa:	f000 f835 	bl	8002518 <TIM_TI2_ConfigInputStage>
      break;
 80024ae:	e000      	b.n	80024b2 <TIM_SlaveTimer_SetConfig+0xfe>
      break;
 80024b0:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	0018      	movs	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b006      	add	sp, #24
 80024ba:	bd80      	pop	{r7, pc}

080024bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	2201      	movs	r2, #1
 80024d4:	4393      	bics	r3, r2
 80024d6:	001a      	movs	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	22f0      	movs	r2, #240	; 0xf0
 80024e6:	4393      	bics	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	220a      	movs	r2, #10
 80024f8:	4393      	bics	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	621a      	str	r2, [r3, #32]
}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b006      	add	sp, #24
 8002516:	bd80      	pop	{r7, pc}

08002518 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	2210      	movs	r2, #16
 800252a:	4393      	bics	r3, r2
 800252c:	001a      	movs	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <TIM_TI2_ConfigInputStage+0x60>)
 8002542:	4013      	ands	r3, r2
 8002544:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	031b      	lsls	r3, r3, #12
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4313      	orrs	r3, r2
 800254e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	22a0      	movs	r2, #160	; 0xa0
 8002554:	4393      	bics	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	621a      	str	r2, [r3, #32]
}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b006      	add	sp, #24
 8002574:	bd80      	pop	{r7, pc}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	ffff0fff 	.word	0xffff0fff

0800257c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2270      	movs	r2, #112	; 0x70
 8002590:	4393      	bics	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	2207      	movs	r2, #7
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	609a      	str	r2, [r3, #8]
}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b004      	add	sp, #16
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	4a09      	ldr	r2, [pc, #36]	; (80025ec <TIM_ETR_SetConfig+0x3c>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	021a      	lsls	r2, r3, #8
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	609a      	str	r2, [r3, #8]
}
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b006      	add	sp, #24
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	ffff00ff 	.word	0xffff00ff

080025f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	221f      	movs	r2, #31
 8002600:	4013      	ands	r3, r2
 8002602:	2201      	movs	r2, #1
 8002604:	409a      	lsls	r2, r3
 8002606:	0013      	movs	r3, r2
 8002608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	43d2      	mvns	r2, r2
 8002612:	401a      	ands	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a1a      	ldr	r2, [r3, #32]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	211f      	movs	r1, #31
 8002620:	400b      	ands	r3, r1
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4099      	lsls	r1, r3
 8002626:	000b      	movs	r3, r1
 8002628:	431a      	orrs	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	621a      	str	r2, [r3, #32]
}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	b006      	add	sp, #24
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2238      	movs	r2, #56	; 0x38
 8002644:	5c9b      	ldrb	r3, [r3, r2]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800264a:	2302      	movs	r3, #2
 800264c:	e032      	b.n	80026b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2238      	movs	r2, #56	; 0x38
 8002652:	2101      	movs	r1, #1
 8002654:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2239      	movs	r2, #57	; 0x39
 800265a:	2102      	movs	r1, #2
 800265c:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2270      	movs	r2, #112	; 0x70
 8002672:	4393      	bics	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2280      	movs	r2, #128	; 0x80
 8002684:	4393      	bics	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	4313      	orrs	r3, r2
 8002690:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2239      	movs	r2, #57	; 0x39
 80026a6:	2101      	movs	r1, #1
 80026a8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2238      	movs	r2, #56	; 0x38
 80026ae:	2100      	movs	r1, #0
 80026b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	0018      	movs	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b004      	add	sp, #16
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2238      	movs	r2, #56	; 0x38
 80026ca:	5c9b      	ldrb	r3, [r3, r2]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_TIMEx_RemapConfig+0x18>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e00c      	b.n	80026ee <HAL_TIMEx_RemapConfig+0x32>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2238      	movs	r2, #56	; 0x38
 80026d8:	2101      	movs	r1, #1
 80026da:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2238      	movs	r2, #56	; 0x38
 80026e8:	2100      	movs	r1, #0
 80026ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b002      	add	sp, #8
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e044      	b.n	8002794 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270e:	2b00      	cmp	r3, #0
 8002710:	d107      	bne.n	8002722 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2270      	movs	r2, #112	; 0x70
 8002716:	2100      	movs	r1, #0
 8002718:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0018      	movs	r0, r3
 800271e:	f001 f987 	bl	8003a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2224      	movs	r2, #36	; 0x24
 8002726:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2101      	movs	r1, #1
 8002734:	438a      	bics	r2, r1
 8002736:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	0018      	movs	r0, r3
 800273c:	f000 f8d8 	bl	80028f0 <UART_SetConfig>
 8002740:	0003      	movs	r3, r0
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e024      	b.n	8002794 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	0018      	movs	r0, r3
 8002756:	f000 fbff 	bl	8002f58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	490d      	ldr	r1, [pc, #52]	; (800279c <HAL_UART_Init+0xa4>)
 8002766:	400a      	ands	r2, r1
 8002768:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	212a      	movs	r1, #42	; 0x2a
 8002776:	438a      	bics	r2, r1
 8002778:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	430a      	orrs	r2, r1
 8002788:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	0018      	movs	r0, r3
 800278e:	f000 fc97 	bl	80030c0 <UART_CheckIdleState>
 8002792:	0003      	movs	r3, r0
}
 8002794:	0018      	movs	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	b002      	add	sp, #8
 800279a:	bd80      	pop	{r7, pc}
 800279c:	ffffb7ff 	.word	0xffffb7ff

080027a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	1dbb      	adds	r3, r7, #6
 80027ae:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d000      	beq.n	80027ba <HAL_UART_Transmit+0x1a>
 80027b8:	e094      	b.n	80028e4 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_UART_Transmit+0x28>
 80027c0:	1dbb      	adds	r3, r7, #6
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e08c      	b.n	80028e6 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	015b      	lsls	r3, r3, #5
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d109      	bne.n	80027ec <HAL_UART_Transmit+0x4c>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2201      	movs	r2, #1
 80027e4:	4013      	ands	r3, r2
 80027e6:	d001      	beq.n	80027ec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e07c      	b.n	80028e6 <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2270      	movs	r2, #112	; 0x70
 80027f0:	5c9b      	ldrb	r3, [r3, r2]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_UART_Transmit+0x5a>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e075      	b.n	80028e6 <HAL_UART_Transmit+0x146>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2270      	movs	r2, #112	; 0x70
 80027fe:	2101      	movs	r1, #1
 8002800:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2221      	movs	r2, #33	; 0x21
 800280c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800280e:	f7fd fe69 	bl	80004e4 <HAL_GetTick>
 8002812:	0003      	movs	r3, r0
 8002814:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1dba      	adds	r2, r7, #6
 800281a:	2150      	movs	r1, #80	; 0x50
 800281c:	8812      	ldrh	r2, [r2, #0]
 800281e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1dba      	adds	r2, r7, #6
 8002824:	2152      	movs	r1, #82	; 0x52
 8002826:	8812      	ldrh	r2, [r2, #0]
 8002828:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	015b      	lsls	r3, r3, #5
 8002832:	429a      	cmp	r2, r3
 8002834:	d108      	bne.n	8002848 <HAL_UART_Transmit+0xa8>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d104      	bne.n	8002848 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	e003      	b.n	8002850 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800284c:	2300      	movs	r3, #0
 800284e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002850:	e02c      	b.n	80028ac <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	0013      	movs	r3, r2
 800285c:	2200      	movs	r2, #0
 800285e:	2180      	movs	r1, #128	; 0x80
 8002860:	f000 fc74 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 8002864:	1e03      	subs	r3, r0, #0
 8002866:	d001      	beq.n	800286c <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e03c      	b.n	80028e6 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10b      	bne.n	800288a <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	001a      	movs	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	05d2      	lsls	r2, r2, #23
 800287e:	0dd2      	lsrs	r2, r2, #23
 8002880:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	3302      	adds	r3, #2
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	e007      	b.n	800289a <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	781a      	ldrb	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	3301      	adds	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2252      	movs	r2, #82	; 0x52
 800289e:	5a9b      	ldrh	r3, [r3, r2]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b299      	uxth	r1, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2252      	movs	r2, #82	; 0x52
 80028aa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2252      	movs	r2, #82	; 0x52
 80028b0:	5a9b      	ldrh	r3, [r3, r2]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1cc      	bne.n	8002852 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	0013      	movs	r3, r2
 80028c2:	2200      	movs	r2, #0
 80028c4:	2140      	movs	r1, #64	; 0x40
 80028c6:	f000 fc41 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 80028ca:	1e03      	subs	r3, r0, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e009      	b.n	80028e6 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2270      	movs	r2, #112	; 0x70
 80028dc:	2100      	movs	r1, #0
 80028de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e000      	b.n	80028e6 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 80028e4:	2302      	movs	r3, #2
  }
}
 80028e6:	0018      	movs	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b008      	add	sp, #32
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028f0:	b5b0      	push	{r4, r5, r7, lr}
 80028f2:	b08e      	sub	sp, #56	; 0x38
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80028f8:	231b      	movs	r3, #27
 80028fa:	2218      	movs	r2, #24
 80028fc:	4694      	mov	ip, r2
 80028fe:	44bc      	add	ip, r7
 8002900:	4463      	add	r3, ip
 8002902:	2210      	movs	r2, #16
 8002904:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8002906:	2300      	movs	r3, #0
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800290a:	2313      	movs	r3, #19
 800290c:	2218      	movs	r2, #24
 800290e:	4694      	mov	ip, r2
 8002910:	44bc      	add	ip, r7
 8002912:	4463      	add	r3, ip
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002918:	2300      	movs	r3, #0
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	431a      	orrs	r2, r3
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	431a      	orrs	r2, r3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	4313      	orrs	r3, r2
 8002932:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4aca      	ldr	r2, [pc, #808]	; (8002c64 <UART_SetConfig+0x374>)
 800293c:	4013      	ands	r3, r2
 800293e:	0019      	movs	r1, r3
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002946:	430a      	orrs	r2, r1
 8002948:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4ac5      	ldr	r2, [pc, #788]	; (8002c68 <UART_SetConfig+0x378>)
 8002952:	4013      	ands	r3, r2
 8002954:	0019      	movs	r1, r3
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4abf      	ldr	r2, [pc, #764]	; (8002c6c <UART_SetConfig+0x37c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002978:	4313      	orrs	r3, r2
 800297a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	4abb      	ldr	r2, [pc, #748]	; (8002c70 <UART_SetConfig+0x380>)
 8002984:	4013      	ands	r3, r2
 8002986:	0019      	movs	r1, r3
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800298e:	430a      	orrs	r2, r1
 8002990:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4ab7      	ldr	r2, [pc, #732]	; (8002c74 <UART_SetConfig+0x384>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d134      	bne.n	8002a06 <UART_SetConfig+0x116>
 800299c:	4bb6      	ldr	r3, [pc, #728]	; (8002c78 <UART_SetConfig+0x388>)
 800299e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a0:	2203      	movs	r2, #3
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d015      	beq.n	80029d4 <UART_SetConfig+0xe4>
 80029a8:	d304      	bcc.n	80029b4 <UART_SetConfig+0xc4>
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d00a      	beq.n	80029c4 <UART_SetConfig+0xd4>
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d018      	beq.n	80029e4 <UART_SetConfig+0xf4>
 80029b2:	e01f      	b.n	80029f4 <UART_SetConfig+0x104>
 80029b4:	231b      	movs	r3, #27
 80029b6:	2218      	movs	r2, #24
 80029b8:	4694      	mov	ip, r2
 80029ba:	44bc      	add	ip, r7
 80029bc:	4463      	add	r3, ip
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e0c5      	b.n	8002b50 <UART_SetConfig+0x260>
 80029c4:	231b      	movs	r3, #27
 80029c6:	2218      	movs	r2, #24
 80029c8:	4694      	mov	ip, r2
 80029ca:	44bc      	add	ip, r7
 80029cc:	4463      	add	r3, ip
 80029ce:	2202      	movs	r2, #2
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e0bd      	b.n	8002b50 <UART_SetConfig+0x260>
 80029d4:	231b      	movs	r3, #27
 80029d6:	2218      	movs	r2, #24
 80029d8:	4694      	mov	ip, r2
 80029da:	44bc      	add	ip, r7
 80029dc:	4463      	add	r3, ip
 80029de:	2204      	movs	r2, #4
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	e0b5      	b.n	8002b50 <UART_SetConfig+0x260>
 80029e4:	231b      	movs	r3, #27
 80029e6:	2218      	movs	r2, #24
 80029e8:	4694      	mov	ip, r2
 80029ea:	44bc      	add	ip, r7
 80029ec:	4463      	add	r3, ip
 80029ee:	2208      	movs	r2, #8
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	e0ad      	b.n	8002b50 <UART_SetConfig+0x260>
 80029f4:	231b      	movs	r3, #27
 80029f6:	2218      	movs	r2, #24
 80029f8:	4694      	mov	ip, r2
 80029fa:	44bc      	add	ip, r7
 80029fc:	4463      	add	r3, ip
 80029fe:	2210      	movs	r2, #16
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	e0a4      	b.n	8002b50 <UART_SetConfig+0x260>
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a9c      	ldr	r2, [pc, #624]	; (8002c7c <UART_SetConfig+0x38c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d137      	bne.n	8002a80 <UART_SetConfig+0x190>
 8002a10:	4b99      	ldr	r3, [pc, #612]	; (8002c78 <UART_SetConfig+0x388>)
 8002a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a14:	220c      	movs	r2, #12
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d018      	beq.n	8002a4e <UART_SetConfig+0x15e>
 8002a1c:	d802      	bhi.n	8002a24 <UART_SetConfig+0x134>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <UART_SetConfig+0x13e>
 8002a22:	e024      	b.n	8002a6e <UART_SetConfig+0x17e>
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d00a      	beq.n	8002a3e <UART_SetConfig+0x14e>
 8002a28:	2b0c      	cmp	r3, #12
 8002a2a:	d018      	beq.n	8002a5e <UART_SetConfig+0x16e>
 8002a2c:	e01f      	b.n	8002a6e <UART_SetConfig+0x17e>
 8002a2e:	231b      	movs	r3, #27
 8002a30:	2218      	movs	r2, #24
 8002a32:	4694      	mov	ip, r2
 8002a34:	44bc      	add	ip, r7
 8002a36:	4463      	add	r3, ip
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e088      	b.n	8002b50 <UART_SetConfig+0x260>
 8002a3e:	231b      	movs	r3, #27
 8002a40:	2218      	movs	r2, #24
 8002a42:	4694      	mov	ip, r2
 8002a44:	44bc      	add	ip, r7
 8002a46:	4463      	add	r3, ip
 8002a48:	2202      	movs	r2, #2
 8002a4a:	701a      	strb	r2, [r3, #0]
 8002a4c:	e080      	b.n	8002b50 <UART_SetConfig+0x260>
 8002a4e:	231b      	movs	r3, #27
 8002a50:	2218      	movs	r2, #24
 8002a52:	4694      	mov	ip, r2
 8002a54:	44bc      	add	ip, r7
 8002a56:	4463      	add	r3, ip
 8002a58:	2204      	movs	r2, #4
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	e078      	b.n	8002b50 <UART_SetConfig+0x260>
 8002a5e:	231b      	movs	r3, #27
 8002a60:	2218      	movs	r2, #24
 8002a62:	4694      	mov	ip, r2
 8002a64:	44bc      	add	ip, r7
 8002a66:	4463      	add	r3, ip
 8002a68:	2208      	movs	r2, #8
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	e070      	b.n	8002b50 <UART_SetConfig+0x260>
 8002a6e:	231b      	movs	r3, #27
 8002a70:	2218      	movs	r2, #24
 8002a72:	4694      	mov	ip, r2
 8002a74:	44bc      	add	ip, r7
 8002a76:	4463      	add	r3, ip
 8002a78:	2210      	movs	r2, #16
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	e067      	b.n	8002b50 <UART_SetConfig+0x260>
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a7e      	ldr	r2, [pc, #504]	; (8002c80 <UART_SetConfig+0x390>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d107      	bne.n	8002a9a <UART_SetConfig+0x1aa>
 8002a8a:	231b      	movs	r3, #27
 8002a8c:	2218      	movs	r2, #24
 8002a8e:	4694      	mov	ip, r2
 8002a90:	44bc      	add	ip, r7
 8002a92:	4463      	add	r3, ip
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	e05a      	b.n	8002b50 <UART_SetConfig+0x260>
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a79      	ldr	r2, [pc, #484]	; (8002c84 <UART_SetConfig+0x394>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d107      	bne.n	8002ab4 <UART_SetConfig+0x1c4>
 8002aa4:	231b      	movs	r3, #27
 8002aa6:	2218      	movs	r2, #24
 8002aa8:	4694      	mov	ip, r2
 8002aaa:	44bc      	add	ip, r7
 8002aac:	4463      	add	r3, ip
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e04d      	b.n	8002b50 <UART_SetConfig+0x260>
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a6c      	ldr	r2, [pc, #432]	; (8002c6c <UART_SetConfig+0x37c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d141      	bne.n	8002b42 <UART_SetConfig+0x252>
 8002abe:	4b6e      	ldr	r3, [pc, #440]	; (8002c78 <UART_SetConfig+0x388>)
 8002ac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ac2:	23c0      	movs	r3, #192	; 0xc0
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2280      	movs	r2, #128	; 0x80
 8002aca:	00d2      	lsls	r2, r2, #3
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d01f      	beq.n	8002b10 <UART_SetConfig+0x220>
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	00d2      	lsls	r2, r2, #3
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d802      	bhi.n	8002ade <UART_SetConfig+0x1ee>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d009      	beq.n	8002af0 <UART_SetConfig+0x200>
 8002adc:	e028      	b.n	8002b30 <UART_SetConfig+0x240>
 8002ade:	2280      	movs	r2, #128	; 0x80
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00c      	beq.n	8002b00 <UART_SetConfig+0x210>
 8002ae6:	22c0      	movs	r2, #192	; 0xc0
 8002ae8:	0112      	lsls	r2, r2, #4
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d018      	beq.n	8002b20 <UART_SetConfig+0x230>
 8002aee:	e01f      	b.n	8002b30 <UART_SetConfig+0x240>
 8002af0:	231b      	movs	r3, #27
 8002af2:	2218      	movs	r2, #24
 8002af4:	4694      	mov	ip, r2
 8002af6:	44bc      	add	ip, r7
 8002af8:	4463      	add	r3, ip
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e027      	b.n	8002b50 <UART_SetConfig+0x260>
 8002b00:	231b      	movs	r3, #27
 8002b02:	2218      	movs	r2, #24
 8002b04:	4694      	mov	ip, r2
 8002b06:	44bc      	add	ip, r7
 8002b08:	4463      	add	r3, ip
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	e01f      	b.n	8002b50 <UART_SetConfig+0x260>
 8002b10:	231b      	movs	r3, #27
 8002b12:	2218      	movs	r2, #24
 8002b14:	4694      	mov	ip, r2
 8002b16:	44bc      	add	ip, r7
 8002b18:	4463      	add	r3, ip
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e017      	b.n	8002b50 <UART_SetConfig+0x260>
 8002b20:	231b      	movs	r3, #27
 8002b22:	2218      	movs	r2, #24
 8002b24:	4694      	mov	ip, r2
 8002b26:	44bc      	add	ip, r7
 8002b28:	4463      	add	r3, ip
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	e00f      	b.n	8002b50 <UART_SetConfig+0x260>
 8002b30:	231b      	movs	r3, #27
 8002b32:	2218      	movs	r2, #24
 8002b34:	4694      	mov	ip, r2
 8002b36:	44bc      	add	ip, r7
 8002b38:	4463      	add	r3, ip
 8002b3a:	2210      	movs	r2, #16
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	e006      	b.n	8002b50 <UART_SetConfig+0x260>
 8002b42:	231b      	movs	r3, #27
 8002b44:	2218      	movs	r2, #24
 8002b46:	4694      	mov	ip, r2
 8002b48:	44bc      	add	ip, r7
 8002b4a:	4463      	add	r3, ip
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a45      	ldr	r2, [pc, #276]	; (8002c6c <UART_SetConfig+0x37c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d000      	beq.n	8002b5c <UART_SetConfig+0x26c>
 8002b5a:	e09d      	b.n	8002c98 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b5c:	231b      	movs	r3, #27
 8002b5e:	2218      	movs	r2, #24
 8002b60:	4694      	mov	ip, r2
 8002b62:	44bc      	add	ip, r7
 8002b64:	4463      	add	r3, ip
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d00d      	beq.n	8002b88 <UART_SetConfig+0x298>
 8002b6c:	dc02      	bgt.n	8002b74 <UART_SetConfig+0x284>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <UART_SetConfig+0x28e>
 8002b72:	e01d      	b.n	8002bb0 <UART_SetConfig+0x2c0>
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d012      	beq.n	8002b9e <UART_SetConfig+0x2ae>
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d015      	beq.n	8002ba8 <UART_SetConfig+0x2b8>
 8002b7c:	e018      	b.n	8002bb0 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002b7e:	f7fe fcfd 	bl	800157c <HAL_RCC_GetPCLK1Freq>
 8002b82:	0003      	movs	r3, r0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002b86:	e01b      	b.n	8002bc0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b88:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <UART_SetConfig+0x388>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d002      	beq.n	8002b98 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <UART_SetConfig+0x398>)
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8002b96:	e013      	b.n	8002bc0 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002b98:	4b3c      	ldr	r3, [pc, #240]	; (8002c8c <UART_SetConfig+0x39c>)
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002b9c:	e010      	b.n	8002bc0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002b9e:	f7fe fc5f 	bl	8001460 <HAL_RCC_GetSysClockFreq>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ba6:	e00b      	b.n	8002bc0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	021b      	lsls	r3, r3, #8
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002bae:	e007      	b.n	8002bc0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002bb0:	2313      	movs	r3, #19
 8002bb2:	2218      	movs	r2, #24
 8002bb4:	4694      	mov	ip, r2
 8002bb6:	44bc      	add	ip, r7
 8002bb8:	4463      	add	r3, ip
 8002bba:	2201      	movs	r2, #1
 8002bbc:	701a      	strb	r2, [r3, #0]
        break;
 8002bbe:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d100      	bne.n	8002bc8 <UART_SetConfig+0x2d8>
 8002bc6:	e1a6      	b.n	8002f16 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	0013      	movs	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	189b      	adds	r3, r3, r2
 8002bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d305      	bcc.n	8002be4 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d907      	bls.n	8002bf4 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8002be4:	2313      	movs	r3, #19
 8002be6:	2218      	movs	r2, #24
 8002be8:	4694      	mov	ip, r2
 8002bea:	44bc      	add	ip, r7
 8002bec:	4463      	add	r3, ip
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	e190      	b.n	8002f16 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	6939      	ldr	r1, [r7, #16]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	000b      	movs	r3, r1
 8002c02:	0e1b      	lsrs	r3, r3, #24
 8002c04:	0010      	movs	r0, r2
 8002c06:	0205      	lsls	r5, r0, #8
 8002c08:	431d      	orrs	r5, r3
 8002c0a:	000b      	movs	r3, r1
 8002c0c:	021c      	lsls	r4, r3, #8
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	085b      	lsrs	r3, r3, #1
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68b8      	ldr	r0, [r7, #8]
 8002c1c:	68f9      	ldr	r1, [r7, #12]
 8002c1e:	1900      	adds	r0, r0, r4
 8002c20:	4169      	adcs	r1, r5
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f7fd faf6 	bl	8000220 <__aeabi_uldivmod>
 8002c34:	0003      	movs	r3, r0
 8002c36:	000c      	movs	r4, r1
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	4a14      	ldr	r2, [pc, #80]	; (8002c90 <UART_SetConfig+0x3a0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d908      	bls.n	8002c54 <UART_SetConfig+0x364>
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	4a13      	ldr	r2, [pc, #76]	; (8002c94 <UART_SetConfig+0x3a4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d804      	bhi.n	8002c54 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	e160      	b.n	8002f16 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8002c54:	2313      	movs	r3, #19
 8002c56:	2218      	movs	r2, #24
 8002c58:	4694      	mov	ip, r2
 8002c5a:	44bc      	add	ip, r7
 8002c5c:	4463      	add	r3, ip
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]
 8002c62:	e158      	b.n	8002f16 <UART_SetConfig+0x626>
 8002c64:	efff69f3 	.word	0xefff69f3
 8002c68:	ffffcfff 	.word	0xffffcfff
 8002c6c:	40004800 	.word	0x40004800
 8002c70:	fffff4ff 	.word	0xfffff4ff
 8002c74:	40013800 	.word	0x40013800
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40004400 	.word	0x40004400
 8002c80:	40004c00 	.word	0x40004c00
 8002c84:	40005000 	.word	0x40005000
 8002c88:	003d0900 	.word	0x003d0900
 8002c8c:	00f42400 	.word	0x00f42400
 8002c90:	000002ff 	.word	0x000002ff
 8002c94:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d000      	beq.n	8002ca6 <UART_SetConfig+0x3b6>
 8002ca4:	e0a9      	b.n	8002dfa <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8002ca6:	231b      	movs	r3, #27
 8002ca8:	2218      	movs	r2, #24
 8002caa:	4694      	mov	ip, r2
 8002cac:	44bc      	add	ip, r7
 8002cae:	4463      	add	r3, ip
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d86d      	bhi.n	8002d92 <UART_SetConfig+0x4a2>
 8002cb6:	009a      	lsls	r2, r3, #2
 8002cb8:	4b9f      	ldr	r3, [pc, #636]	; (8002f38 <UART_SetConfig+0x648>)
 8002cba:	18d3      	adds	r3, r2, r3
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002cc0:	f7fe fc5c 	bl	800157c <HAL_RCC_GetPCLK1Freq>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	005a      	lsls	r2, r3, #1
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	18d2      	adds	r2, r2, r3
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	0010      	movs	r0, r2
 8002cd8:	f7fd fa16 	bl	8000108 <__udivsi3>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ce2:	e05e      	b.n	8002da2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002ce4:	f7fe fc60 	bl	80015a8 <HAL_RCC_GetPCLK2Freq>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	005a      	lsls	r2, r3, #1
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	18d2      	adds	r2, r2, r3
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	0010      	movs	r0, r2
 8002cfc:	f7fd fa04 	bl	8000108 <__udivsi3>
 8002d00:	0003      	movs	r3, r0
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d06:	e04c      	b.n	8002da2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d08:	4b8c      	ldr	r3, [pc, #560]	; (8002f3c <UART_SetConfig+0x64c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d00e      	beq.n	8002d30 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	4a89      	ldr	r2, [pc, #548]	; (8002f40 <UART_SetConfig+0x650>)
 8002d1a:	189a      	adds	r2, r3, r2
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	0019      	movs	r1, r3
 8002d22:	0010      	movs	r0, r2
 8002d24:	f7fd f9f0 	bl	8000108 <__udivsi3>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002d2e:	e038      	b.n	8002da2 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	085b      	lsrs	r3, r3, #1
 8002d36:	4a83      	ldr	r2, [pc, #524]	; (8002f44 <UART_SetConfig+0x654>)
 8002d38:	189a      	adds	r2, r3, r2
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	0019      	movs	r1, r3
 8002d40:	0010      	movs	r0, r2
 8002d42:	f7fd f9e1 	bl	8000108 <__udivsi3>
 8002d46:	0003      	movs	r3, r0
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d4c:	e029      	b.n	8002da2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d4e:	f7fe fb87 	bl	8001460 <HAL_RCC_GetSysClockFreq>
 8002d52:	0003      	movs	r3, r0
 8002d54:	005a      	lsls	r2, r3, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	18d2      	adds	r2, r2, r3
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	0019      	movs	r1, r3
 8002d64:	0010      	movs	r0, r2
 8002d66:	f7fd f9cf 	bl	8000108 <__udivsi3>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d70:	e017      	b.n	8002da2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	2280      	movs	r2, #128	; 0x80
 8002d7a:	0252      	lsls	r2, r2, #9
 8002d7c:	189a      	adds	r2, r3, r2
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	0019      	movs	r1, r3
 8002d84:	0010      	movs	r0, r2
 8002d86:	f7fd f9bf 	bl	8000108 <__udivsi3>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d90:	e007      	b.n	8002da2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002d92:	2313      	movs	r3, #19
 8002d94:	2218      	movs	r2, #24
 8002d96:	4694      	mov	ip, r2
 8002d98:	44bc      	add	ip, r7
 8002d9a:	4463      	add	r3, ip
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
        break;
 8002da0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	2b0f      	cmp	r3, #15
 8002da6:	d920      	bls.n	8002dea <UART_SetConfig+0x4fa>
 8002da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002daa:	4a67      	ldr	r2, [pc, #412]	; (8002f48 <UART_SetConfig+0x658>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d81c      	bhi.n	8002dea <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	200a      	movs	r0, #10
 8002db6:	2418      	movs	r4, #24
 8002db8:	193b      	adds	r3, r7, r4
 8002dba:	181b      	adds	r3, r3, r0
 8002dbc:	210f      	movs	r1, #15
 8002dbe:	438a      	bics	r2, r1
 8002dc0:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2207      	movs	r2, #7
 8002dca:	4013      	ands	r3, r2
 8002dcc:	b299      	uxth	r1, r3
 8002dce:	193b      	adds	r3, r7, r4
 8002dd0:	181b      	adds	r3, r3, r0
 8002dd2:	193a      	adds	r2, r7, r4
 8002dd4:	1812      	adds	r2, r2, r0
 8002dd6:	8812      	ldrh	r2, [r2, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	193a      	adds	r2, r7, r4
 8002de2:	1812      	adds	r2, r2, r0
 8002de4:	8812      	ldrh	r2, [r2, #0]
 8002de6:	60da      	str	r2, [r3, #12]
 8002de8:	e095      	b.n	8002f16 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8002dea:	2313      	movs	r3, #19
 8002dec:	2218      	movs	r2, #24
 8002dee:	4694      	mov	ip, r2
 8002df0:	44bc      	add	ip, r7
 8002df2:	4463      	add	r3, ip
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
 8002df8:	e08d      	b.n	8002f16 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8002dfa:	231b      	movs	r3, #27
 8002dfc:	2218      	movs	r2, #24
 8002dfe:	4694      	mov	ip, r2
 8002e00:	44bc      	add	ip, r7
 8002e02:	4463      	add	r3, ip
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d86a      	bhi.n	8002ee0 <UART_SetConfig+0x5f0>
 8002e0a:	009a      	lsls	r2, r3, #2
 8002e0c:	4b4f      	ldr	r3, [pc, #316]	; (8002f4c <UART_SetConfig+0x65c>)
 8002e0e:	18d3      	adds	r3, r2, r3
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e14:	f7fe fbb2 	bl	800157c <HAL_RCC_GetPCLK1Freq>
 8002e18:	0002      	movs	r2, r0
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	18d2      	adds	r2, r2, r3
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	0019      	movs	r1, r3
 8002e28:	0010      	movs	r0, r2
 8002e2a:	f7fd f96d 	bl	8000108 <__udivsi3>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e34:	e05c      	b.n	8002ef0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002e36:	f7fe fbb7 	bl	80015a8 <HAL_RCC_GetPCLK2Freq>
 8002e3a:	0002      	movs	r2, r0
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	18d2      	adds	r2, r2, r3
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	0019      	movs	r1, r3
 8002e4a:	0010      	movs	r0, r2
 8002e4c:	f7fd f95c 	bl	8000108 <__udivsi3>
 8002e50:	0003      	movs	r3, r0
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e56:	e04b      	b.n	8002ef0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e58:	4b38      	ldr	r3, [pc, #224]	; (8002f3c <UART_SetConfig+0x64c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2210      	movs	r2, #16
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d00e      	beq.n	8002e80 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	085b      	lsrs	r3, r3, #1
 8002e68:	4a39      	ldr	r2, [pc, #228]	; (8002f50 <UART_SetConfig+0x660>)
 8002e6a:	189a      	adds	r2, r3, r2
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	0019      	movs	r1, r3
 8002e72:	0010      	movs	r0, r2
 8002e74:	f7fd f948 	bl	8000108 <__udivsi3>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002e7e:	e037      	b.n	8002ef0 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	085b      	lsrs	r3, r3, #1
 8002e86:	4a33      	ldr	r2, [pc, #204]	; (8002f54 <UART_SetConfig+0x664>)
 8002e88:	189a      	adds	r2, r3, r2
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	0019      	movs	r1, r3
 8002e90:	0010      	movs	r0, r2
 8002e92:	f7fd f939 	bl	8000108 <__udivsi3>
 8002e96:	0003      	movs	r3, r0
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e9c:	e028      	b.n	8002ef0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e9e:	f7fe fadf 	bl	8001460 <HAL_RCC_GetSysClockFreq>
 8002ea2:	0002      	movs	r2, r0
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	085b      	lsrs	r3, r3, #1
 8002eaa:	18d2      	adds	r2, r2, r3
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	0010      	movs	r0, r2
 8002eb4:	f7fd f928 	bl	8000108 <__udivsi3>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ebe:	e017      	b.n	8002ef0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	2280      	movs	r2, #128	; 0x80
 8002ec8:	0212      	lsls	r2, r2, #8
 8002eca:	189a      	adds	r2, r3, r2
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	0010      	movs	r0, r2
 8002ed4:	f7fd f918 	bl	8000108 <__udivsi3>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ede:	e007      	b.n	8002ef0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002ee0:	2313      	movs	r3, #19
 8002ee2:	2218      	movs	r2, #24
 8002ee4:	4694      	mov	ip, r2
 8002ee6:	44bc      	add	ip, r7
 8002ee8:	4463      	add	r3, ip
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
        break;
 8002eee:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	2b0f      	cmp	r3, #15
 8002ef4:	d908      	bls.n	8002f08 <UART_SetConfig+0x618>
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	4a13      	ldr	r2, [pc, #76]	; (8002f48 <UART_SetConfig+0x658>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d804      	bhi.n	8002f08 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	e006      	b.n	8002f16 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8002f08:	2313      	movs	r3, #19
 8002f0a:	2218      	movs	r2, #24
 8002f0c:	4694      	mov	ip, r2
 8002f0e:	44bc      	add	ip, r7
 8002f10:	4463      	add	r3, ip
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002f22:	2313      	movs	r3, #19
 8002f24:	2218      	movs	r2, #24
 8002f26:	4694      	mov	ip, r2
 8002f28:	44bc      	add	ip, r7
 8002f2a:	4463      	add	r3, ip
 8002f2c:	781b      	ldrb	r3, [r3, #0]
}
 8002f2e:	0018      	movs	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b00e      	add	sp, #56	; 0x38
 8002f34:	bdb0      	pop	{r4, r5, r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	080048e0 	.word	0x080048e0
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	007a1200 	.word	0x007a1200
 8002f44:	01e84800 	.word	0x01e84800
 8002f48:	0000ffff 	.word	0x0000ffff
 8002f4c:	08004904 	.word	0x08004904
 8002f50:	003d0900 	.word	0x003d0900
 8002f54:	00f42400 	.word	0x00f42400

08002f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	2201      	movs	r2, #1
 8002f66:	4013      	ands	r3, r2
 8002f68:	d00b      	beq.n	8002f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a4a      	ldr	r2, [pc, #296]	; (800309c <UART_AdvFeatureConfig+0x144>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	2202      	movs	r2, #2
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d00b      	beq.n	8002fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4a43      	ldr	r2, [pc, #268]	; (80030a0 <UART_AdvFeatureConfig+0x148>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	0019      	movs	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	2204      	movs	r2, #4
 8002faa:	4013      	ands	r3, r2
 8002fac:	d00b      	beq.n	8002fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4a3b      	ldr	r2, [pc, #236]	; (80030a4 <UART_AdvFeatureConfig+0x14c>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	0019      	movs	r1, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	2208      	movs	r2, #8
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d00b      	beq.n	8002fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4a34      	ldr	r2, [pc, #208]	; (80030a8 <UART_AdvFeatureConfig+0x150>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	0019      	movs	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	2210      	movs	r2, #16
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d00b      	beq.n	800300a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4a2c      	ldr	r2, [pc, #176]	; (80030ac <UART_AdvFeatureConfig+0x154>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	2220      	movs	r2, #32
 8003010:	4013      	ands	r3, r2
 8003012:	d00b      	beq.n	800302c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4a25      	ldr	r2, [pc, #148]	; (80030b0 <UART_AdvFeatureConfig+0x158>)
 800301c:	4013      	ands	r3, r2
 800301e:	0019      	movs	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	2240      	movs	r2, #64	; 0x40
 8003032:	4013      	ands	r3, r2
 8003034:	d01d      	beq.n	8003072 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4a1d      	ldr	r2, [pc, #116]	; (80030b4 <UART_AdvFeatureConfig+0x15c>)
 800303e:	4013      	ands	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	035b      	lsls	r3, r3, #13
 8003056:	429a      	cmp	r2, r3
 8003058:	d10b      	bne.n	8003072 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4a15      	ldr	r2, [pc, #84]	; (80030b8 <UART_AdvFeatureConfig+0x160>)
 8003062:	4013      	ands	r3, r2
 8003064:	0019      	movs	r1, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	2280      	movs	r2, #128	; 0x80
 8003078:	4013      	ands	r3, r2
 800307a:	d00b      	beq.n	8003094 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4a0e      	ldr	r2, [pc, #56]	; (80030bc <UART_AdvFeatureConfig+0x164>)
 8003084:	4013      	ands	r3, r2
 8003086:	0019      	movs	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
  }
}
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	46bd      	mov	sp, r7
 8003098:	b002      	add	sp, #8
 800309a:	bd80      	pop	{r7, pc}
 800309c:	fffdffff 	.word	0xfffdffff
 80030a0:	fffeffff 	.word	0xfffeffff
 80030a4:	fffbffff 	.word	0xfffbffff
 80030a8:	ffff7fff 	.word	0xffff7fff
 80030ac:	ffffefff 	.word	0xffffefff
 80030b0:	ffffdfff 	.word	0xffffdfff
 80030b4:	ffefffff 	.word	0xffefffff
 80030b8:	ff9fffff 	.word	0xff9fffff
 80030bc:	fff7ffff 	.word	0xfff7ffff

080030c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80030ce:	f7fd fa09 	bl	80004e4 <HAL_GetTick>
 80030d2:	0003      	movs	r3, r0
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2208      	movs	r2, #8
 80030de:	4013      	ands	r3, r2
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d10d      	bne.n	8003100 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	0399      	lsls	r1, r3, #14
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	4b16      	ldr	r3, [pc, #88]	; (8003148 <UART_CheckIdleState+0x88>)
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	0013      	movs	r3, r2
 80030f2:	2200      	movs	r2, #0
 80030f4:	f000 f82a 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 80030f8:	1e03      	subs	r3, r0, #0
 80030fa:	d001      	beq.n	8003100 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e01f      	b.n	8003140 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2204      	movs	r2, #4
 8003108:	4013      	ands	r3, r2
 800310a:	2b04      	cmp	r3, #4
 800310c:	d10d      	bne.n	800312a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	03d9      	lsls	r1, r3, #15
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <UART_CheckIdleState+0x88>)
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	0013      	movs	r3, r2
 800311c:	2200      	movs	r2, #0
 800311e:	f000 f815 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 8003122:	1e03      	subs	r3, r0, #0
 8003124:	d001      	beq.n	800312a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e00a      	b.n	8003140 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2270      	movs	r2, #112	; 0x70
 800313a:	2100      	movs	r1, #0
 800313c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	0018      	movs	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	b004      	add	sp, #16
 8003146:	bd80      	pop	{r7, pc}
 8003148:	01ffffff 	.word	0x01ffffff

0800314c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	1dfb      	adds	r3, r7, #7
 800315a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315c:	e029      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	3301      	adds	r3, #1
 8003162:	d026      	beq.n	80031b2 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003164:	f7fd f9be 	bl	80004e4 <HAL_GetTick>
 8003168:	0002      	movs	r2, r0
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	429a      	cmp	r2, r3
 8003172:	d302      	bcc.n	800317a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d11b      	bne.n	80031b2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4915      	ldr	r1, [pc, #84]	; (80031dc <UART_WaitOnFlagUntilTimeout+0x90>)
 8003186:	400a      	ands	r2, r1
 8003188:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2101      	movs	r1, #1
 8003196:	438a      	bics	r2, r1
 8003198:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2270      	movs	r2, #112	; 0x70
 80031aa:	2100      	movs	r1, #0
 80031ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e00f      	b.n	80031d2 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	4013      	ands	r3, r2
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	425a      	negs	r2, r3
 80031c2:	4153      	adcs	r3, r2
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	001a      	movs	r2, r3
 80031c8:	1dfb      	adds	r3, r7, #7
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d0c6      	beq.n	800315e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b004      	add	sp, #16
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	fffffe5f 	.word	0xfffffe5f

080031e0 <CheckLeft>:

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void CheckLeft(){
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
	GPIOA->ODR |= GPIO_PIN_4;
 80031e4:	23a0      	movs	r3, #160	; 0xa0
 80031e6:	05db      	lsls	r3, r3, #23
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	23a0      	movs	r3, #160	; 0xa0
 80031ec:	05db      	lsls	r3, r3, #23
 80031ee:	2110      	movs	r1, #16
 80031f0:	430a      	orrs	r2, r1
 80031f2:	615a      	str	r2, [r3, #20]
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <CheckRight>:
void CheckRight(){
 80031fa:	b580      	push	{r7, lr}
 80031fc:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~GPIO_PIN_4;
 80031fe:	23a0      	movs	r3, #160	; 0xa0
 8003200:	05db      	lsls	r3, r3, #23
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	23a0      	movs	r3, #160	; 0xa0
 8003206:	05db      	lsls	r3, r3, #23
 8003208:	2110      	movs	r1, #16
 800320a:	438a      	bics	r2, r1
 800320c:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= GPIO_PIN_8;
 800320e:	23a0      	movs	r3, #160	; 0xa0
 8003210:	05db      	lsls	r3, r3, #23
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	23a0      	movs	r3, #160	; 0xa0
 8003216:	05db      	lsls	r3, r3, #23
 8003218:	2180      	movs	r1, #128	; 0x80
 800321a:	0049      	lsls	r1, r1, #1
 800321c:	430a      	orrs	r2, r1
 800321e:	615a      	str	r2, [r3, #20]
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <CheckStraight>:
void CheckStraight(){
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~GPIO_PIN_8;
 800322c:	23a0      	movs	r3, #160	; 0xa0
 800322e:	05db      	lsls	r3, r3, #23
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	23a0      	movs	r3, #160	; 0xa0
 8003234:	05db      	lsls	r3, r3, #23
 8003236:	4903      	ldr	r1, [pc, #12]	; (8003244 <CheckStraight+0x1c>)
 8003238:	400a      	ands	r2, r1
 800323a:	615a      	str	r2, [r3, #20]
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	fffffeff 	.word	0xfffffeff

08003248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800324e:	f7fd f8f3 	bl	8000438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003252:	f000 f8a1 	bl	8003398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003256:	f000 fa83 	bl	8003760 <MX_GPIO_Init>
  MX_TIM2_Init();
 800325a:	f000 f909 	bl	8003470 <MX_TIM2_Init>
  MX_TIM6_Init();
 800325e:	f000 fa13 	bl	8003688 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8003262:	f000 fa4d 	bl	8003700 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8003266:	f000 f9a3 	bl	80035b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	RCC->IOPENR |= RCC_IOPENR_IOPAEN;
 800326a:	4b43      	ldr	r3, [pc, #268]	; (8003378 <main+0x130>)
 800326c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326e:	4b42      	ldr	r3, [pc, #264]	; (8003378 <main+0x130>)
 8003270:	2101      	movs	r1, #1
 8003272:	430a      	orrs	r2, r1
 8003274:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8003276:	4b40      	ldr	r3, [pc, #256]	; (8003378 <main+0x130>)
 8003278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800327a:	4b3f      	ldr	r3, [pc, #252]	; (8003378 <main+0x130>)
 800327c:	2101      	movs	r1, #1
 800327e:	430a      	orrs	r2, r1
 8003280:	639a      	str	r2, [r3, #56]	; 0x38
	GPIOA->MODER |= 2;
 8003282:	23a0      	movs	r3, #160	; 0xa0
 8003284:	05db      	lsls	r3, r3, #23
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	23a0      	movs	r3, #160	; 0xa0
 800328a:	05db      	lsls	r3, r3, #23
 800328c:	2102      	movs	r1, #2
 800328e:	430a      	orrs	r2, r1
 8003290:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= 2;
 8003292:	23a0      	movs	r3, #160	; 0xa0
 8003294:	05db      	lsls	r3, r3, #23
 8003296:	6a1a      	ldr	r2, [r3, #32]
 8003298:	23a0      	movs	r3, #160	; 0xa0
 800329a:	05db      	lsls	r3, r3, #23
 800329c:	2102      	movs	r1, #2
 800329e:	430a      	orrs	r2, r1
 80032a0:	621a      	str	r2, [r3, #32]
	GPIOA->OSPEEDR |= 2;
 80032a2:	23a0      	movs	r3, #160	; 0xa0
 80032a4:	05db      	lsls	r3, r3, #23
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	23a0      	movs	r3, #160	; 0xa0
 80032aa:	05db      	lsls	r3, r3, #23
 80032ac:	2102      	movs	r1, #2
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]
	TIM2->PSC = 20;
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	05db      	lsls	r3, r3, #23
 80032b6:	2214      	movs	r2, #20
 80032b8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 9;
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	05db      	lsls	r3, r3, #23
 80032be:	2209      	movs	r2, #9
 80032c0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	05db      	lsls	r3, r3, #23
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	05db      	lsls	r3, r3, #23
 80032cc:	2160      	movs	r1, #96	; 0x60
 80032ce:	430a      	orrs	r2, r1
 80032d0:	619a      	str	r2, [r3, #24]
	TIM2->CCR1 = 9;
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	05db      	lsls	r3, r3, #23
 80032d6:	2209      	movs	r2, #9
 80032d8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCER |= 1;
 80032da:	2380      	movs	r3, #128	; 0x80
 80032dc:	05db      	lsls	r3, r3, #23
 80032de:	6a1a      	ldr	r2, [r3, #32]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	05db      	lsls	r3, r3, #23
 80032e4:	2101      	movs	r1, #1
 80032e6:	430a      	orrs	r2, r1
 80032e8:	621a      	str	r2, [r3, #32]
	TIM2->CR1 |= 1;
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	05db      	lsls	r3, r3, #23
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	05db      	lsls	r3, r3, #23
 80032f4:	2101      	movs	r1, #1
 80032f6:	430a      	orrs	r2, r1
 80032f8:	601a      	str	r2, [r3, #0]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80032fa:	4b1f      	ldr	r3, [pc, #124]	; (8003378 <main+0x130>)
 80032fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fe:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <main+0x130>)
 8003300:	2101      	movs	r1, #1
 8003302:	430a      	orrs	r2, r1
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8003306:	4b1c      	ldr	r3, [pc, #112]	; (8003378 <main+0x130>)
 8003308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800330a:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <main+0x130>)
 800330c:	2110      	movs	r1, #16
 800330e:	430a      	orrs	r2, r1
 8003310:	639a      	str	r2, [r3, #56]	; 0x38
	TIM6->CR1 |= 1;
 8003312:	4b1a      	ldr	r3, [pc, #104]	; (800337c <main+0x134>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b19      	ldr	r3, [pc, #100]	; (800337c <main+0x134>)
 8003318:	2101      	movs	r1, #1
 800331a:	430a      	orrs	r2, r1
 800331c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 800331e:	4b18      	ldr	r3, [pc, #96]	; (8003380 <main+0x138>)
 8003320:	0018      	movs	r0, r3
 8003322:	f7fe faf7 	bl	8001914 <HAL_TIM_Base_Start_IT>
	printf("Hello...\r\n");
 8003326:	4b17      	ldr	r3, [pc, #92]	; (8003384 <main+0x13c>)
 8003328:	0018      	movs	r0, r3
 800332a:	f000 fe47 	bl	8003fbc <puts>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800332e:	4b16      	ldr	r3, [pc, #88]	; (8003388 <main+0x140>)
 8003330:	213c      	movs	r1, #60	; 0x3c
 8003332:	0018      	movs	r0, r3
 8003334:	f7fe fbd8 	bl	8001ae8 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	int i = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	603b      	str	r3, [r7, #0]
	int hold = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	607b      	str	r3, [r7, #4]


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  i = TIM3->CNT;
 8003340:	4b12      	ldr	r3, [pc, #72]	; (800338c <main+0x144>)
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	603b      	str	r3, [r7, #0]
	  HAL_Delay(200);
 8003346:	20c8      	movs	r0, #200	; 0xc8
 8003348:	f7fd f8d6 	bl	80004f8 <HAL_Delay>
	  if (hold > i){
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	dd06      	ble.n	8003362 <main+0x11a>
		  printf("turn right\r\n");
 8003354:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <main+0x148>)
 8003356:	0018      	movs	r0, r3
 8003358:	f000 fe30 	bl	8003fbc <puts>
		  hold = i;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	607b      	str	r3, [r7, #4]
 8003360:	e7ee      	b.n	8003340 <main+0xf8>
	  }
	  else if (hold < i) {
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	daea      	bge.n	8003340 <main+0xf8>
		  printf("turn left\r\n");
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <main+0x14c>)
 800336c:	0018      	movs	r0, r3
 800336e:	f000 fe25 	bl	8003fbc <puts>
		  hold = i;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	607b      	str	r3, [r7, #4]
	  i = TIM3->CNT;
 8003376:	e7e3      	b.n	8003340 <main+0xf8>
 8003378:	40021000 	.word	0x40021000
 800337c:	40001000 	.word	0x40001000
 8003380:	200000e4 	.word	0x200000e4
 8003384:	08004864 	.word	0x08004864
 8003388:	200000a8 	.word	0x200000a8
 800338c:	40000400 	.word	0x40000400
 8003390:	08004870 	.word	0x08004870
 8003394:	0800487c 	.word	0x0800487c

08003398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b09f      	sub	sp, #124	; 0x7c
 800339c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800339e:	2440      	movs	r4, #64	; 0x40
 80033a0:	193b      	adds	r3, r7, r4
 80033a2:	0018      	movs	r0, r3
 80033a4:	2338      	movs	r3, #56	; 0x38
 80033a6:	001a      	movs	r2, r3
 80033a8:	2100      	movs	r1, #0
 80033aa:	f000 fd9f 	bl	8003eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033ae:	232c      	movs	r3, #44	; 0x2c
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	0018      	movs	r0, r3
 80033b4:	2314      	movs	r3, #20
 80033b6:	001a      	movs	r2, r3
 80033b8:	2100      	movs	r1, #0
 80033ba:	f000 fd97 	bl	8003eec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033be:	1d3b      	adds	r3, r7, #4
 80033c0:	0018      	movs	r0, r3
 80033c2:	2328      	movs	r3, #40	; 0x28
 80033c4:	001a      	movs	r2, r3
 80033c6:	2100      	movs	r1, #0
 80033c8:	f000 fd90 	bl	8003eec <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033cc:	4b26      	ldr	r3, [pc, #152]	; (8003468 <SystemClock_Config+0xd0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a26      	ldr	r2, [pc, #152]	; (800346c <SystemClock_Config+0xd4>)
 80033d2:	401a      	ands	r2, r3
 80033d4:	4b24      	ldr	r3, [pc, #144]	; (8003468 <SystemClock_Config+0xd0>)
 80033d6:	2180      	movs	r1, #128	; 0x80
 80033d8:	0109      	lsls	r1, r1, #4
 80033da:	430a      	orrs	r2, r1
 80033dc:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80033de:	0021      	movs	r1, r4
 80033e0:	187b      	adds	r3, r7, r1
 80033e2:	2210      	movs	r2, #16
 80033e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80033e6:	187b      	adds	r3, r7, r1
 80033e8:	2201      	movs	r2, #1
 80033ea:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80033ec:	187b      	adds	r3, r7, r1
 80033ee:	2200      	movs	r2, #0
 80033f0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80033f2:	187b      	adds	r3, r7, r1
 80033f4:	22a0      	movs	r2, #160	; 0xa0
 80033f6:	0212      	lsls	r2, r2, #8
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80033fa:	187b      	adds	r3, r7, r1
 80033fc:	2200      	movs	r2, #0
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003400:	187b      	adds	r3, r7, r1
 8003402:	0018      	movs	r0, r3
 8003404:	f7fd fb32 	bl	8000a6c <HAL_RCC_OscConfig>
 8003408:	1e03      	subs	r3, r0, #0
 800340a:	d001      	beq.n	8003410 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800340c:	f000 fa4c 	bl	80038a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003410:	212c      	movs	r1, #44	; 0x2c
 8003412:	187b      	adds	r3, r7, r1
 8003414:	220f      	movs	r2, #15
 8003416:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003418:	187b      	adds	r3, r7, r1
 800341a:	2200      	movs	r2, #0
 800341c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800341e:	187b      	adds	r3, r7, r1
 8003420:	2200      	movs	r2, #0
 8003422:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003424:	187b      	adds	r3, r7, r1
 8003426:	2200      	movs	r2, #0
 8003428:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800342a:	187b      	adds	r3, r7, r1
 800342c:	2200      	movs	r2, #0
 800342e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003430:	187b      	adds	r3, r7, r1
 8003432:	2100      	movs	r1, #0
 8003434:	0018      	movs	r0, r3
 8003436:	f7fd fee9 	bl	800120c <HAL_RCC_ClockConfig>
 800343a:	1e03      	subs	r3, r0, #0
 800343c:	d001      	beq.n	8003442 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800343e:	f000 fa33 	bl	80038a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003442:	1d3b      	adds	r3, r7, #4
 8003444:	2202      	movs	r2, #2
 8003446:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003448:	1d3b      	adds	r3, r7, #4
 800344a:	2200      	movs	r2, #0
 800344c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800344e:	1d3b      	adds	r3, r7, #4
 8003450:	0018      	movs	r0, r3
 8003452:	f7fe f8bf 	bl	80015d4 <HAL_RCCEx_PeriphCLKConfig>
 8003456:	1e03      	subs	r3, r0, #0
 8003458:	d001      	beq.n	800345e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800345a:	f000 fa25 	bl	80038a8 <Error_Handler>
  }
}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	b01f      	add	sp, #124	; 0x7c
 8003464:	bd90      	pop	{r4, r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	40007000 	.word	0x40007000
 800346c:	ffffe7ff 	.word	0xffffe7ff

08003470 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b090      	sub	sp, #64	; 0x40
 8003474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003476:	2330      	movs	r3, #48	; 0x30
 8003478:	18fb      	adds	r3, r7, r3
 800347a:	0018      	movs	r0, r3
 800347c:	2310      	movs	r3, #16
 800347e:	001a      	movs	r2, r3
 8003480:	2100      	movs	r1, #0
 8003482:	f000 fd33 	bl	8003eec <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003486:	231c      	movs	r3, #28
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	0018      	movs	r0, r3
 800348c:	2314      	movs	r3, #20
 800348e:	001a      	movs	r2, r3
 8003490:	2100      	movs	r1, #0
 8003492:	f000 fd2b 	bl	8003eec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003496:	2314      	movs	r3, #20
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	0018      	movs	r0, r3
 800349c:	2308      	movs	r3, #8
 800349e:	001a      	movs	r2, r3
 80034a0:	2100      	movs	r1, #0
 80034a2:	f000 fd23 	bl	8003eec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034a6:	1d3b      	adds	r3, r7, #4
 80034a8:	0018      	movs	r0, r3
 80034aa:	2310      	movs	r3, #16
 80034ac:	001a      	movs	r2, r3
 80034ae:	2100      	movs	r1, #0
 80034b0:	f000 fd1c 	bl	8003eec <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034b4:	4b3d      	ldr	r3, [pc, #244]	; (80035ac <MX_TIM2_Init+0x13c>)
 80034b6:	2280      	movs	r2, #128	; 0x80
 80034b8:	05d2      	lsls	r2, r2, #23
 80034ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 80034bc:	4b3b      	ldr	r3, [pc, #236]	; (80035ac <MX_TIM2_Init+0x13c>)
 80034be:	2214      	movs	r2, #20
 80034c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c2:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <MX_TIM2_Init+0x13c>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80034c8:	4b38      	ldr	r3, [pc, #224]	; (80035ac <MX_TIM2_Init+0x13c>)
 80034ca:	2209      	movs	r2, #9
 80034cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ce:	4b37      	ldr	r3, [pc, #220]	; (80035ac <MX_TIM2_Init+0x13c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034d4:	4b35      	ldr	r3, [pc, #212]	; (80035ac <MX_TIM2_Init+0x13c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034da:	4b34      	ldr	r3, [pc, #208]	; (80035ac <MX_TIM2_Init+0x13c>)
 80034dc:	0018      	movs	r0, r3
 80034de:	f7fe f9ed 	bl	80018bc <HAL_TIM_Base_Init>
 80034e2:	1e03      	subs	r3, r0, #0
 80034e4:	d001      	beq.n	80034ea <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80034e6:	f000 f9df 	bl	80038a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034ea:	2130      	movs	r1, #48	; 0x30
 80034ec:	187b      	adds	r3, r7, r1
 80034ee:	2280      	movs	r2, #128	; 0x80
 80034f0:	0152      	lsls	r2, r2, #5
 80034f2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034f4:	187a      	adds	r2, r7, r1
 80034f6:	4b2d      	ldr	r3, [pc, #180]	; (80035ac <MX_TIM2_Init+0x13c>)
 80034f8:	0011      	movs	r1, r2
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7fe fccc 	bl	8001e98 <HAL_TIM_ConfigClockSource>
 8003500:	1e03      	subs	r3, r0, #0
 8003502:	d001      	beq.n	8003508 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003504:	f000 f9d0 	bl	80038a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003508:	4b28      	ldr	r3, [pc, #160]	; (80035ac <MX_TIM2_Init+0x13c>)
 800350a:	0018      	movs	r0, r3
 800350c:	f7fe fa24 	bl	8001958 <HAL_TIM_PWM_Init>
 8003510:	1e03      	subs	r3, r0, #0
 8003512:	d001      	beq.n	8003518 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8003514:	f000 f9c8 	bl	80038a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8003518:	211c      	movs	r1, #28
 800351a:	187b      	adds	r3, r7, r1
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003520:	187b      	adds	r3, r7, r1
 8003522:	2200      	movs	r2, #0
 8003524:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003526:	187a      	adds	r2, r7, r1
 8003528:	4b20      	ldr	r3, [pc, #128]	; (80035ac <MX_TIM2_Init+0x13c>)
 800352a:	0011      	movs	r1, r2
 800352c:	0018      	movs	r0, r3
 800352e:	f7fe fd71 	bl	8002014 <HAL_TIM_SlaveConfigSynchro>
 8003532:	1e03      	subs	r3, r0, #0
 8003534:	d001      	beq.n	800353a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8003536:	f000 f9b7 	bl	80038a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800353a:	2114      	movs	r1, #20
 800353c:	187b      	adds	r3, r7, r1
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003542:	187b      	adds	r3, r7, r1
 8003544:	2200      	movs	r2, #0
 8003546:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003548:	187a      	adds	r2, r7, r1
 800354a:	4b18      	ldr	r3, [pc, #96]	; (80035ac <MX_TIM2_Init+0x13c>)
 800354c:	0011      	movs	r1, r2
 800354e:	0018      	movs	r0, r3
 8003550:	f7ff f871 	bl	8002636 <HAL_TIMEx_MasterConfigSynchronization>
 8003554:	1e03      	subs	r3, r0, #0
 8003556:	d001      	beq.n	800355c <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8003558:	f000 f9a6 	bl	80038a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	2260      	movs	r2, #96	; 0x60
 8003560:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 9;
 8003562:	1d3b      	adds	r3, r7, #4
 8003564:	2209      	movs	r2, #9
 8003566:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800356e:	1d3b      	adds	r3, r7, #4
 8003570:	2200      	movs	r2, #0
 8003572:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003574:	1d39      	adds	r1, r7, #4
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <MX_TIM2_Init+0x13c>)
 8003578:	2200      	movs	r2, #0
 800357a:	0018      	movs	r0, r3
 800357c:	f7fe fbd4 	bl	8001d28 <HAL_TIM_PWM_ConfigChannel>
 8003580:	1e03      	subs	r3, r0, #0
 8003582:	d001      	beq.n	8003588 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8003584:	f000 f990 	bl	80038a8 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM3_TI1_GPIO) != HAL_OK)
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <MX_TIM2_Init+0x13c>)
 800358a:	2104      	movs	r1, #4
 800358c:	0018      	movs	r0, r3
 800358e:	f7ff f895 	bl	80026bc <HAL_TIMEx_RemapConfig>
 8003592:	1e03      	subs	r3, r0, #0
 8003594:	d001      	beq.n	800359a <MX_TIM2_Init+0x12a>
  {
    Error_Handler();
 8003596:	f000 f987 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800359a:	4b04      	ldr	r3, [pc, #16]	; (80035ac <MX_TIM2_Init+0x13c>)
 800359c:	0018      	movs	r0, r3
 800359e:	f000 fa0b 	bl	80039b8 <HAL_TIM_MspPostInit>

}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b010      	add	sp, #64	; 0x40
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	20000120 	.word	0x20000120

080035b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b08d      	sub	sp, #52	; 0x34
 80035b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80035b6:	240c      	movs	r4, #12
 80035b8:	193b      	adds	r3, r7, r4
 80035ba:	0018      	movs	r0, r3
 80035bc:	2324      	movs	r3, #36	; 0x24
 80035be:	001a      	movs	r2, r3
 80035c0:	2100      	movs	r1, #0
 80035c2:	f000 fc93 	bl	8003eec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035c6:	1d3b      	adds	r3, r7, #4
 80035c8:	0018      	movs	r0, r3
 80035ca:	2308      	movs	r3, #8
 80035cc:	001a      	movs	r2, r3
 80035ce:	2100      	movs	r1, #0
 80035d0:	f000 fc8c 	bl	8003eec <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035d4:	4b2a      	ldr	r3, [pc, #168]	; (8003680 <MX_TIM3_Init+0xd0>)
 80035d6:	4a2b      	ldr	r2, [pc, #172]	; (8003684 <MX_TIM3_Init+0xd4>)
 80035d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80035da:	4b29      	ldr	r3, [pc, #164]	; (8003680 <MX_TIM3_Init+0xd0>)
 80035dc:	2200      	movs	r2, #0
 80035de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035e0:	4b27      	ldr	r3, [pc, #156]	; (8003680 <MX_TIM3_Init+0xd0>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80035e6:	4b26      	ldr	r3, [pc, #152]	; (8003680 <MX_TIM3_Init+0xd0>)
 80035e8:	22fa      	movs	r2, #250	; 0xfa
 80035ea:	0092      	lsls	r2, r2, #2
 80035ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ee:	4b24      	ldr	r3, [pc, #144]	; (8003680 <MX_TIM3_Init+0xd0>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035f4:	4b22      	ldr	r3, [pc, #136]	; (8003680 <MX_TIM3_Init+0xd0>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80035fa:	0021      	movs	r1, r4
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	2203      	movs	r2, #3
 8003600:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003602:	187b      	adds	r3, r7, r1
 8003604:	2202      	movs	r2, #2
 8003606:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003608:	187b      	adds	r3, r7, r1
 800360a:	2201      	movs	r2, #1
 800360c:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800360e:	187b      	adds	r3, r7, r1
 8003610:	2200      	movs	r2, #0
 8003612:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 3;
 8003614:	187b      	adds	r3, r7, r1
 8003616:	2203      	movs	r2, #3
 8003618:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800361a:	187b      	adds	r3, r7, r1
 800361c:	2202      	movs	r2, #2
 800361e:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003620:	187b      	adds	r3, r7, r1
 8003622:	2201      	movs	r2, #1
 8003624:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003626:	187b      	adds	r3, r7, r1
 8003628:	2200      	movs	r2, #0
 800362a:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 3;
 800362c:	187b      	adds	r3, r7, r1
 800362e:	2203      	movs	r2, #3
 8003630:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003632:	187a      	adds	r2, r7, r1
 8003634:	4b12      	ldr	r3, [pc, #72]	; (8003680 <MX_TIM3_Init+0xd0>)
 8003636:	0011      	movs	r1, r2
 8003638:	0018      	movs	r0, r3
 800363a:	f7fe f9c1 	bl	80019c0 <HAL_TIM_Encoder_Init>
 800363e:	1e03      	subs	r3, r0, #0
 8003640:	d001      	beq.n	8003646 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003642:	f000 f931 	bl	80038a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003646:	1d3b      	adds	r3, r7, #4
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	2200      	movs	r2, #0
 8003650:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003652:	1d3a      	adds	r2, r7, #4
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <MX_TIM3_Init+0xd0>)
 8003656:	0011      	movs	r1, r2
 8003658:	0018      	movs	r0, r3
 800365a:	f7fe ffec 	bl	8002636 <HAL_TIMEx_MasterConfigSynchronization>
 800365e:	1e03      	subs	r3, r0, #0
 8003660:	d001      	beq.n	8003666 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8003662:	f000 f921 	bl	80038a8 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <MX_TIM3_Init+0xd0>)
 8003668:	2104      	movs	r1, #4
 800366a:	0018      	movs	r0, r3
 800366c:	f7ff f826 	bl	80026bc <HAL_TIMEx_RemapConfig>
 8003670:	1e03      	subs	r3, r0, #0
 8003672:	d001      	beq.n	8003678 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8003674:	f000 f918 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b00d      	add	sp, #52	; 0x34
 800367e:	bd90      	pop	{r4, r7, pc}
 8003680:	200000a8 	.word	0x200000a8
 8003684:	40000400 	.word	0x40000400

08003688 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800368e:	003b      	movs	r3, r7
 8003690:	0018      	movs	r0, r3
 8003692:	2308      	movs	r3, #8
 8003694:	001a      	movs	r2, r3
 8003696:	2100      	movs	r1, #0
 8003698:	f000 fc28 	bl	8003eec <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800369c:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <MX_TIM6_Init+0x6c>)
 800369e:	4a16      	ldr	r2, [pc, #88]	; (80036f8 <MX_TIM6_Init+0x70>)
 80036a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2099;
 80036a2:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <MX_TIM6_Init+0x6c>)
 80036a4:	4a15      	ldr	r2, [pc, #84]	; (80036fc <MX_TIM6_Init+0x74>)
 80036a6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a8:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <MX_TIM6_Init+0x6c>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <MX_TIM6_Init+0x6c>)
 80036b0:	22f4      	movs	r2, #244	; 0xf4
 80036b2:	32ff      	adds	r2, #255	; 0xff
 80036b4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036b6:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <MX_TIM6_Init+0x6c>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80036bc:	4b0d      	ldr	r3, [pc, #52]	; (80036f4 <MX_TIM6_Init+0x6c>)
 80036be:	0018      	movs	r0, r3
 80036c0:	f7fe f8fc 	bl	80018bc <HAL_TIM_Base_Init>
 80036c4:	1e03      	subs	r3, r0, #0
 80036c6:	d001      	beq.n	80036cc <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 80036c8:	f000 f8ee 	bl	80038a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036cc:	003b      	movs	r3, r7
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d2:	003b      	movs	r3, r7
 80036d4:	2200      	movs	r2, #0
 80036d6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80036d8:	003a      	movs	r2, r7
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <MX_TIM6_Init+0x6c>)
 80036dc:	0011      	movs	r1, r2
 80036de:	0018      	movs	r0, r3
 80036e0:	f7fe ffa9 	bl	8002636 <HAL_TIMEx_MasterConfigSynchronization>
 80036e4:	1e03      	subs	r3, r0, #0
 80036e6:	d001      	beq.n	80036ec <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 80036e8:	f000 f8de 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	200000e4 	.word	0x200000e4
 80036f8:	40001000 	.word	0x40001000
 80036fc:	00000833 	.word	0x00000833

08003700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003704:	4b14      	ldr	r3, [pc, #80]	; (8003758 <MX_USART2_UART_Init+0x58>)
 8003706:	4a15      	ldr	r2, [pc, #84]	; (800375c <MX_USART2_UART_Init+0x5c>)
 8003708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800370a:	4b13      	ldr	r3, [pc, #76]	; (8003758 <MX_USART2_UART_Init+0x58>)
 800370c:	22e1      	movs	r2, #225	; 0xe1
 800370e:	0252      	lsls	r2, r2, #9
 8003710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003712:	4b11      	ldr	r3, [pc, #68]	; (8003758 <MX_USART2_UART_Init+0x58>)
 8003714:	2200      	movs	r2, #0
 8003716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003718:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <MX_USART2_UART_Init+0x58>)
 800371a:	2200      	movs	r2, #0
 800371c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800371e:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <MX_USART2_UART_Init+0x58>)
 8003720:	2200      	movs	r2, #0
 8003722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <MX_USART2_UART_Init+0x58>)
 8003726:	220c      	movs	r2, #12
 8003728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <MX_USART2_UART_Init+0x58>)
 800372c:	2200      	movs	r2, #0
 800372e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <MX_USART2_UART_Init+0x58>)
 8003732:	2200      	movs	r2, #0
 8003734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003736:	4b08      	ldr	r3, [pc, #32]	; (8003758 <MX_USART2_UART_Init+0x58>)
 8003738:	2200      	movs	r2, #0
 800373a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <MX_USART2_UART_Init+0x58>)
 800373e:	2200      	movs	r2, #0
 8003740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <MX_USART2_UART_Init+0x58>)
 8003744:	0018      	movs	r0, r3
 8003746:	f7fe ffd7 	bl	80026f8 <HAL_UART_Init>
 800374a:	1e03      	subs	r3, r0, #0
 800374c:	d001      	beq.n	8003752 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800374e:	f000 f8ab 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	2000015c 	.word	0x2000015c
 800375c:	40004400 	.word	0x40004400

08003760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003760:	b590      	push	{r4, r7, lr}
 8003762:	b089      	sub	sp, #36	; 0x24
 8003764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003766:	240c      	movs	r4, #12
 8003768:	193b      	adds	r3, r7, r4
 800376a:	0018      	movs	r0, r3
 800376c:	2314      	movs	r3, #20
 800376e:	001a      	movs	r2, r3
 8003770:	2100      	movs	r1, #0
 8003772:	f000 fbbb 	bl	8003eec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003776:	4b3e      	ldr	r3, [pc, #248]	; (8003870 <MX_GPIO_Init+0x110>)
 8003778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377a:	4b3d      	ldr	r3, [pc, #244]	; (8003870 <MX_GPIO_Init+0x110>)
 800377c:	2101      	movs	r1, #1
 800377e:	430a      	orrs	r2, r1
 8003780:	62da      	str	r2, [r3, #44]	; 0x2c
 8003782:	4b3b      	ldr	r3, [pc, #236]	; (8003870 <MX_GPIO_Init+0x110>)
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	2201      	movs	r2, #1
 8003788:	4013      	ands	r3, r2
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800378e:	4b38      	ldr	r3, [pc, #224]	; (8003870 <MX_GPIO_Init+0x110>)
 8003790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003792:	4b37      	ldr	r3, [pc, #220]	; (8003870 <MX_GPIO_Init+0x110>)
 8003794:	2104      	movs	r1, #4
 8003796:	430a      	orrs	r2, r1
 8003798:	62da      	str	r2, [r3, #44]	; 0x2c
 800379a:	4b35      	ldr	r3, [pc, #212]	; (8003870 <MX_GPIO_Init+0x110>)
 800379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379e:	2204      	movs	r2, #4
 80037a0:	4013      	ands	r3, r2
 80037a2:	607b      	str	r3, [r7, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 80037a6:	2398      	movs	r3, #152	; 0x98
 80037a8:	0059      	lsls	r1, r3, #1
 80037aa:	23a0      	movs	r3, #160	; 0xa0
 80037ac:	05db      	lsls	r3, r3, #23
 80037ae:	2200      	movs	r2, #0
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7fd f917 	bl	80009e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80037b6:	193b      	adds	r3, r7, r4
 80037b8:	2202      	movs	r2, #2
 80037ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037bc:	193b      	adds	r3, r7, r4
 80037be:	4a2d      	ldr	r2, [pc, #180]	; (8003874 <MX_GPIO_Init+0x114>)
 80037c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c2:	193b      	adds	r3, r7, r4
 80037c4:	2200      	movs	r2, #0
 80037c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c8:	193a      	adds	r2, r7, r4
 80037ca:	23a0      	movs	r3, #160	; 0xa0
 80037cc:	05db      	lsls	r3, r3, #23
 80037ce:	0011      	movs	r1, r2
 80037d0:	0018      	movs	r0, r3
 80037d2:	f7fc ff89 	bl	80006e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 80037d6:	0021      	movs	r1, r4
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	2288      	movs	r2, #136	; 0x88
 80037dc:	0052      	lsls	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037e0:	187b      	adds	r3, r7, r1
 80037e2:	2201      	movs	r2, #1
 80037e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	187b      	adds	r3, r7, r1
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037ec:	187b      	adds	r3, r7, r1
 80037ee:	2202      	movs	r2, #2
 80037f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f2:	000c      	movs	r4, r1
 80037f4:	187a      	adds	r2, r7, r1
 80037f6:	23a0      	movs	r3, #160	; 0xa0
 80037f8:	05db      	lsls	r3, r3, #23
 80037fa:	0011      	movs	r1, r2
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7fc ff73 	bl	80006e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003802:	193b      	adds	r3, r7, r4
 8003804:	2220      	movs	r2, #32
 8003806:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003808:	193b      	adds	r3, r7, r4
 800380a:	2201      	movs	r2, #1
 800380c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380e:	193b      	adds	r3, r7, r4
 8003810:	2200      	movs	r2, #0
 8003812:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003814:	193b      	adds	r3, r7, r4
 8003816:	2200      	movs	r2, #0
 8003818:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381a:	193a      	adds	r2, r7, r4
 800381c:	23a0      	movs	r3, #160	; 0xa0
 800381e:	05db      	lsls	r3, r3, #23
 8003820:	0011      	movs	r1, r2
 8003822:	0018      	movs	r0, r3
 8003824:	f7fc ff60 	bl	80006e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003828:	193b      	adds	r3, r7, r4
 800382a:	2280      	movs	r2, #128	; 0x80
 800382c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800382e:	193b      	adds	r3, r7, r4
 8003830:	4a11      	ldr	r2, [pc, #68]	; (8003878 <MX_GPIO_Init+0x118>)
 8003832:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	193b      	adds	r3, r7, r4
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800383a:	193b      	adds	r3, r7, r4
 800383c:	4a0f      	ldr	r2, [pc, #60]	; (800387c <MX_GPIO_Init+0x11c>)
 800383e:	0019      	movs	r1, r3
 8003840:	0010      	movs	r0, r2
 8003842:	f7fc ff51 	bl	80006e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003846:	2200      	movs	r2, #0
 8003848:	2100      	movs	r1, #0
 800384a:	2005      	movs	r0, #5
 800384c:	f7fc ff1a 	bl	8000684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003850:	2005      	movs	r0, #5
 8003852:	f7fc ff2c 	bl	80006ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003856:	2200      	movs	r2, #0
 8003858:	2100      	movs	r1, #0
 800385a:	2007      	movs	r0, #7
 800385c:	f7fc ff12 	bl	8000684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003860:	2007      	movs	r0, #7
 8003862:	f7fc ff24 	bl	80006ae <HAL_NVIC_EnableIRQ>

}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	46bd      	mov	sp, r7
 800386a:	b009      	add	sp, #36	; 0x24
 800386c:	bd90      	pop	{r4, r7, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	40021000 	.word	0x40021000
 8003874:	10110000 	.word	0x10110000
 8003878:	10210000 	.word	0x10210000
 800387c:	50000800 	.word	0x50000800

08003880 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <__io_putchar+0x20>)
 800388a:	1d39      	adds	r1, r7, #4
 800388c:	4805      	ldr	r0, [pc, #20]	; (80038a4 <__io_putchar+0x24>)
 800388e:	2201      	movs	r2, #1
 8003890:	f7fe ff86 	bl	80027a0 <HAL_UART_Transmit>

return ch;
 8003894:	687b      	ldr	r3, [r7, #4]
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b002      	add	sp, #8
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	0000ffff 	.word	0x0000ffff
 80038a4:	2000015c 	.word	0x2000015c

080038a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80038ac:	46c0      	nop			; (mov r8, r8)
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b8:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <HAL_MspInit+0x24>)
 80038ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_MspInit+0x24>)
 80038be:	2101      	movs	r1, #1
 80038c0:	430a      	orrs	r2, r1
 80038c2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <HAL_MspInit+0x24>)
 80038c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c8:	4b03      	ldr	r3, [pc, #12]	; (80038d8 <HAL_MspInit+0x24>)
 80038ca:	2180      	movs	r1, #128	; 0x80
 80038cc:	0549      	lsls	r1, r1, #21
 80038ce:	430a      	orrs	r2, r1
 80038d0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000

080038dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	05db      	lsls	r3, r3, #23
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d106      	bne.n	80038fe <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038f0:	4b0e      	ldr	r3, [pc, #56]	; (800392c <HAL_TIM_Base_MspInit+0x50>)
 80038f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f4:	4b0d      	ldr	r3, [pc, #52]	; (800392c <HAL_TIM_Base_MspInit+0x50>)
 80038f6:	2101      	movs	r1, #1
 80038f8:	430a      	orrs	r2, r1
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80038fc:	e012      	b.n	8003924 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM6)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a0b      	ldr	r2, [pc, #44]	; (8003930 <HAL_TIM_Base_MspInit+0x54>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d10d      	bne.n	8003924 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <HAL_TIM_Base_MspInit+0x50>)
 800390a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800390c:	4b07      	ldr	r3, [pc, #28]	; (800392c <HAL_TIM_Base_MspInit+0x50>)
 800390e:	2110      	movs	r1, #16
 8003910:	430a      	orrs	r2, r1
 8003912:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003914:	2200      	movs	r2, #0
 8003916:	2100      	movs	r1, #0
 8003918:	2011      	movs	r0, #17
 800391a:	f7fc feb3 	bl	8000684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800391e:	2011      	movs	r0, #17
 8003920:	f7fc fec5 	bl	80006ae <HAL_NVIC_EnableIRQ>
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40021000 	.word	0x40021000
 8003930:	40001000 	.word	0x40001000

08003934 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393c:	230c      	movs	r3, #12
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	0018      	movs	r0, r3
 8003942:	2314      	movs	r3, #20
 8003944:	001a      	movs	r2, r3
 8003946:	2100      	movs	r1, #0
 8003948:	f000 fad0 	bl	8003eec <memset>
  if(htim_encoder->Instance==TIM3)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d128      	bne.n	80039a8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003956:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <HAL_TIM_Encoder_MspInit+0x80>)
 8003958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800395a:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <HAL_TIM_Encoder_MspInit+0x80>)
 800395c:	2102      	movs	r1, #2
 800395e:	430a      	orrs	r2, r1
 8003960:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003962:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <HAL_TIM_Encoder_MspInit+0x80>)
 8003964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003966:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <HAL_TIM_Encoder_MspInit+0x80>)
 8003968:	2101      	movs	r1, #1
 800396a:	430a      	orrs	r2, r1
 800396c:	62da      	str	r2, [r3, #44]	; 0x2c
 800396e:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_TIM_Encoder_MspInit+0x80>)
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	2201      	movs	r2, #1
 8003974:	4013      	ands	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800397a:	210c      	movs	r1, #12
 800397c:	187b      	adds	r3, r7, r1
 800397e:	22c0      	movs	r2, #192	; 0xc0
 8003980:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003982:	187b      	adds	r3, r7, r1
 8003984:	2202      	movs	r2, #2
 8003986:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003988:	187b      	adds	r3, r7, r1
 800398a:	2202      	movs	r2, #2
 800398c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398e:	187b      	adds	r3, r7, r1
 8003990:	2203      	movs	r2, #3
 8003992:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003994:	187b      	adds	r3, r7, r1
 8003996:	2202      	movs	r2, #2
 8003998:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399a:	187a      	adds	r2, r7, r1
 800399c:	23a0      	movs	r3, #160	; 0xa0
 800399e:	05db      	lsls	r3, r3, #23
 80039a0:	0011      	movs	r1, r2
 80039a2:	0018      	movs	r0, r3
 80039a4:	f7fc fea0 	bl	80006e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80039a8:	46c0      	nop			; (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b008      	add	sp, #32
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40021000 	.word	0x40021000

080039b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c0:	230c      	movs	r3, #12
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	0018      	movs	r0, r3
 80039c6:	2314      	movs	r3, #20
 80039c8:	001a      	movs	r2, r3
 80039ca:	2100      	movs	r1, #0
 80039cc:	f000 fa8e 	bl	8003eec <memset>
  if(htim->Instance==TIM2)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	2380      	movs	r3, #128	; 0x80
 80039d6:	05db      	lsls	r3, r3, #23
 80039d8:	429a      	cmp	r2, r3
 80039da:	d122      	bne.n	8003a22 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039dc:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <HAL_TIM_MspPostInit+0x74>)
 80039de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e0:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <HAL_TIM_MspPostInit+0x74>)
 80039e2:	2101      	movs	r1, #1
 80039e4:	430a      	orrs	r2, r1
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80039e8:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <HAL_TIM_MspPostInit+0x74>)
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	2201      	movs	r2, #1
 80039ee:	4013      	ands	r3, r2
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80039f4:	210c      	movs	r1, #12
 80039f6:	187b      	adds	r3, r7, r1
 80039f8:	2201      	movs	r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fc:	187b      	adds	r3, r7, r1
 80039fe:	2202      	movs	r2, #2
 8003a00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a02:	187b      	adds	r3, r7, r1
 8003a04:	2200      	movs	r2, #0
 8003a06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a08:	187b      	adds	r3, r7, r1
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003a0e:	187b      	adds	r3, r7, r1
 8003a10:	2202      	movs	r2, #2
 8003a12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a14:	187a      	adds	r2, r7, r1
 8003a16:	23a0      	movs	r3, #160	; 0xa0
 8003a18:	05db      	lsls	r3, r3, #23
 8003a1a:	0011      	movs	r1, r2
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f7fc fe63 	bl	80006e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	46bd      	mov	sp, r7
 8003a26:	b008      	add	sp, #32
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	40021000 	.word	0x40021000

08003a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a38:	230c      	movs	r3, #12
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	2314      	movs	r3, #20
 8003a40:	001a      	movs	r2, r3
 8003a42:	2100      	movs	r1, #0
 8003a44:	f000 fa52 	bl	8003eec <memset>
  if(huart->Instance==USART2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <HAL_UART_MspInit+0x80>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d129      	bne.n	8003aa6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a52:	4b18      	ldr	r3, [pc, #96]	; (8003ab4 <HAL_UART_MspInit+0x84>)
 8003a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a56:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <HAL_UART_MspInit+0x84>)
 8003a58:	2180      	movs	r1, #128	; 0x80
 8003a5a:	0289      	lsls	r1, r1, #10
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a60:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <HAL_UART_MspInit+0x84>)
 8003a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a64:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <HAL_UART_MspInit+0x84>)
 8003a66:	2101      	movs	r1, #1
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a6c:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <HAL_UART_MspInit+0x84>)
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	2201      	movs	r2, #1
 8003a72:	4013      	ands	r3, r2
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a78:	210c      	movs	r1, #12
 8003a7a:	187b      	adds	r3, r7, r1
 8003a7c:	220c      	movs	r2, #12
 8003a7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a80:	187b      	adds	r3, r7, r1
 8003a82:	2202      	movs	r2, #2
 8003a84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	187b      	adds	r3, r7, r1
 8003a88:	2200      	movs	r2, #0
 8003a8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a8c:	187b      	adds	r3, r7, r1
 8003a8e:	2203      	movs	r2, #3
 8003a90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003a92:	187b      	adds	r3, r7, r1
 8003a94:	2204      	movs	r2, #4
 8003a96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a98:	187a      	adds	r2, r7, r1
 8003a9a:	23a0      	movs	r3, #160	; 0xa0
 8003a9c:	05db      	lsls	r3, r3, #23
 8003a9e:	0011      	movs	r1, r2
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f7fc fe21 	bl	80006e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b008      	add	sp, #32
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	40004400 	.word	0x40004400
 8003ab4:	40021000 	.word	0x40021000

08003ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003abc:	46c0      	nop			; (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ac6:	e7fe      	b.n	8003ac6 <HardFault_Handler+0x4>

08003ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ae0:	f7fc fcf4 	bl	80004cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ae4:	46c0      	nop			; (mov r8, r8)
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_1)){
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <EXTI0_1_IRQHandler+0x30>)
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	2202      	movs	r2, #2
 8003af6:	4013      	ands	r3, r2
 8003af8:	d009      	beq.n	8003b0e <EXTI0_1_IRQHandler+0x22>
		if (((GPIOA->IDR) > 1) & 1){
 8003afa:	23a0      	movs	r3, #160	; 0xa0
 8003afc:	05db      	lsls	r3, r3, #23
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d904      	bls.n	8003b0e <EXTI0_1_IRQHandler+0x22>
			count++;
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <EXTI0_1_IRQHandler+0x34>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <EXTI0_1_IRQHandler+0x34>)
 8003b0c:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003b0e:	2002      	movs	r0, #2
 8003b10:	f7fc ff86 	bl	8000a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003b14:	46c0      	nop			; (mov r8, r8)
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	40010400 	.word	0x40010400
 8003b20:	20000084 	.word	0x20000084

08003b24 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7)){
 8003b28:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <EXTI4_15_IRQHandler+0x24>)
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d003      	beq.n	8003b3a <EXTI4_15_IRQHandler+0x16>
		printf("Button Push\r\n");
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <EXTI4_15_IRQHandler+0x28>)
 8003b34:	0018      	movs	r0, r3
 8003b36:	f000 fa41 	bl	8003fbc <puts>
	}
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003b3a:	2080      	movs	r0, #128	; 0x80
 8003b3c:	f7fc ff70 	bl	8000a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	40010400 	.word	0x40010400
 8003b4c:	08004888 	.word	0x08004888

08003b50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if ((left == right) && (LCheck == RCheck)){
 8003b54:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <TIM6_DAC_IRQHandler+0x124>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b47      	ldr	r3, [pc, #284]	; (8003c78 <TIM6_DAC_IRQHandler+0x128>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d115      	bne.n	8003b8c <TIM6_DAC_IRQHandler+0x3c>
 8003b60:	4b46      	ldr	r3, [pc, #280]	; (8003c7c <TIM6_DAC_IRQHandler+0x12c>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4b46      	ldr	r3, [pc, #280]	; (8003c80 <TIM6_DAC_IRQHandler+0x130>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d10f      	bne.n	8003b8c <TIM6_DAC_IRQHandler+0x3c>
		if (count > 750){
 8003b6c:	4b45      	ldr	r3, [pc, #276]	; (8003c84 <TIM6_DAC_IRQHandler+0x134>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a45      	ldr	r2, [pc, #276]	; (8003c88 <TIM6_DAC_IRQHandler+0x138>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	dc00      	bgt.n	8003b78 <TIM6_DAC_IRQHandler+0x28>
 8003b76:	e072      	b.n	8003c5e <TIM6_DAC_IRQHandler+0x10e>
				printf("checkDirection\r\n");
 8003b78:	4b44      	ldr	r3, [pc, #272]	; (8003c8c <TIM6_DAC_IRQHandler+0x13c>)
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f000 fa1e 	bl	8003fbc <puts>
				left = 1;
 8003b80:	4b3c      	ldr	r3, [pc, #240]	; (8003c74 <TIM6_DAC_IRQHandler+0x124>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
				CheckLeft();
 8003b86:	f7ff fb2b 	bl	80031e0 <CheckLeft>
		if (count > 750){
 8003b8a:	e068      	b.n	8003c5e <TIM6_DAC_IRQHandler+0x10e>
			}

	}
	else if(left > 0){
 8003b8c:	4b39      	ldr	r3, [pc, #228]	; (8003c74 <TIM6_DAC_IRQHandler+0x124>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	dd21      	ble.n	8003bd8 <TIM6_DAC_IRQHandler+0x88>
		if (count > 750){
 8003b94:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <TIM6_DAC_IRQHandler+0x134>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a3b      	ldr	r2, [pc, #236]	; (8003c88 <TIM6_DAC_IRQHandler+0x138>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	dd14      	ble.n	8003bc8 <TIM6_DAC_IRQHandler+0x78>
			printf("Left Not good\r\n");
 8003b9e:	4b3c      	ldr	r3, [pc, #240]	; (8003c90 <TIM6_DAC_IRQHandler+0x140>)
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f000 fa0b 	bl	8003fbc <puts>
			left++;
 8003ba6:	4b33      	ldr	r3, [pc, #204]	; (8003c74 <TIM6_DAC_IRQHandler+0x124>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	4b31      	ldr	r3, [pc, #196]	; (8003c74 <TIM6_DAC_IRQHandler+0x124>)
 8003bae:	601a      	str	r2, [r3, #0]
			if (left > 3){
 8003bb0:	4b30      	ldr	r3, [pc, #192]	; (8003c74 <TIM6_DAC_IRQHandler+0x124>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	dd07      	ble.n	8003bc8 <TIM6_DAC_IRQHandler+0x78>
				left = 0;
 8003bb8:	4b2e      	ldr	r3, [pc, #184]	; (8003c74 <TIM6_DAC_IRQHandler+0x124>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
				right = 1;
 8003bbe:	4b2e      	ldr	r3, [pc, #184]	; (8003c78 <TIM6_DAC_IRQHandler+0x128>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
				CheckRight();
 8003bc4:	f7ff fb19 	bl	80031fa <CheckRight>
			}
		}

		LCheck += count;
 8003bc8:	4b2c      	ldr	r3, [pc, #176]	; (8003c7c <TIM6_DAC_IRQHandler+0x12c>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4b2d      	ldr	r3, [pc, #180]	; (8003c84 <TIM6_DAC_IRQHandler+0x134>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	18d2      	adds	r2, r2, r3
 8003bd2:	4b2a      	ldr	r3, [pc, #168]	; (8003c7c <TIM6_DAC_IRQHandler+0x12c>)
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e042      	b.n	8003c5e <TIM6_DAC_IRQHandler+0x10e>
	}
	else if(right > 0){
 8003bd8:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <TIM6_DAC_IRQHandler+0x128>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	dd1f      	ble.n	8003c20 <TIM6_DAC_IRQHandler+0xd0>
			if (count > 750){
 8003be0:	4b28      	ldr	r3, [pc, #160]	; (8003c84 <TIM6_DAC_IRQHandler+0x134>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a28      	ldr	r2, [pc, #160]	; (8003c88 <TIM6_DAC_IRQHandler+0x138>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	dd12      	ble.n	8003c10 <TIM6_DAC_IRQHandler+0xc0>
				printf("Right Not Good\r\n");
 8003bea:	4b2a      	ldr	r3, [pc, #168]	; (8003c94 <TIM6_DAC_IRQHandler+0x144>)
 8003bec:	0018      	movs	r0, r3
 8003bee:	f000 f9e5 	bl	8003fbc <puts>
				right++;
 8003bf2:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <TIM6_DAC_IRQHandler+0x128>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <TIM6_DAC_IRQHandler+0x128>)
 8003bfa:	601a      	str	r2, [r3, #0]
				if (right > 3){
 8003bfc:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <TIM6_DAC_IRQHandler+0x128>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	dd05      	ble.n	8003c10 <TIM6_DAC_IRQHandler+0xc0>
					left = 0;
 8003c04:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <TIM6_DAC_IRQHandler+0x124>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
					right = 0;
 8003c0a:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <TIM6_DAC_IRQHandler+0x128>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
				}
			}
		RCheck += count;
 8003c10:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <TIM6_DAC_IRQHandler+0x130>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <TIM6_DAC_IRQHandler+0x134>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	18d2      	adds	r2, r2, r3
 8003c1a:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <TIM6_DAC_IRQHandler+0x130>)
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e01e      	b.n	8003c5e <TIM6_DAC_IRQHandler+0x10e>
	}
	else if ((RCheck > 0) && (LCheck > 0)){
 8003c20:	4b17      	ldr	r3, [pc, #92]	; (8003c80 <TIM6_DAC_IRQHandler+0x130>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	dd1a      	ble.n	8003c5e <TIM6_DAC_IRQHandler+0x10e>
 8003c28:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <TIM6_DAC_IRQHandler+0x12c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	dd16      	ble.n	8003c5e <TIM6_DAC_IRQHandler+0x10e>
		if (LCheck < RCheck){
 8003c30:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <TIM6_DAC_IRQHandler+0x12c>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <TIM6_DAC_IRQHandler+0x130>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	da04      	bge.n	8003c46 <TIM6_DAC_IRQHandler+0xf6>
			printf("Turn Left\r\n");
 8003c3c:	4b16      	ldr	r3, [pc, #88]	; (8003c98 <TIM6_DAC_IRQHandler+0x148>)
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f000 f9bc 	bl	8003fbc <puts>
 8003c44:	e003      	b.n	8003c4e <TIM6_DAC_IRQHandler+0xfe>
		}
		else {
			printf("Turn Right\r\n");
 8003c46:	4b15      	ldr	r3, [pc, #84]	; (8003c9c <TIM6_DAC_IRQHandler+0x14c>)
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f000 f9b7 	bl	8003fbc <puts>
		}
		CheckStraight();
 8003c4e:	f7ff faeb 	bl	8003228 <CheckStraight>
		LCheck = 0;
 8003c52:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <TIM6_DAC_IRQHandler+0x12c>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
		RCheck = 0;
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <TIM6_DAC_IRQHandler+0x130>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
	}
	count = 0;
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <TIM6_DAC_IRQHandler+0x134>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <TIM6_DAC_IRQHandler+0x150>)
 8003c66:	0018      	movs	r0, r3
 8003c68:	f7fd ff75 	bl	8001b56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	20000088 	.word	0x20000088
 8003c78:	2000008c 	.word	0x2000008c
 8003c7c:	20000090 	.word	0x20000090
 8003c80:	20000094 	.word	0x20000094
 8003c84:	20000084 	.word	0x20000084
 8003c88:	000002ee 	.word	0x000002ee
 8003c8c:	08004898 	.word	0x08004898
 8003c90:	080048a8 	.word	0x080048a8
 8003c94:	080048b8 	.word	0x080048b8
 8003c98:	080048c8 	.word	0x080048c8
 8003c9c:	080048d4 	.word	0x080048d4
 8003ca0:	200000e4 	.word	0x200000e4

08003ca4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	e00a      	b.n	8003ccc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003cb6:	e000      	b.n	8003cba <_read+0x16>
 8003cb8:	bf00      	nop
 8003cba:	0001      	movs	r1, r0
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	60ba      	str	r2, [r7, #8]
 8003cc2:	b2ca      	uxtb	r2, r1
 8003cc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	dbf0      	blt.n	8003cb6 <_read+0x12>
	}

return len;
 8003cd4:	687b      	ldr	r3, [r7, #4]
}
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b006      	add	sp, #24
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	e009      	b.n	8003d04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	60ba      	str	r2, [r7, #8]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f7ff fdc1 	bl	8003880 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	3301      	adds	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	dbf1      	blt.n	8003cf0 <_write+0x12>
	}
	return len;
 8003d0c:	687b      	ldr	r3, [r7, #4]
}
 8003d0e:	0018      	movs	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b006      	add	sp, #24
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <_close>:

int _close(int file)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
	return -1;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	425b      	negs	r3, r3
}
 8003d22:	0018      	movs	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b002      	add	sp, #8
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2280      	movs	r2, #128	; 0x80
 8003d38:	0192      	lsls	r2, r2, #6
 8003d3a:	605a      	str	r2, [r3, #4]
	return 0;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b002      	add	sp, #8
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <_isatty>:

int _isatty(int file)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
	return 1;
 8003d4e:	2301      	movs	r3, #1
}
 8003d50:	0018      	movs	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b002      	add	sp, #8
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
	return 0;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	0018      	movs	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b004      	add	sp, #16
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <_sbrk+0x50>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <_sbrk+0x16>
		heap_end = &end;
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <_sbrk+0x50>)
 8003d82:	4a10      	ldr	r2, [pc, #64]	; (8003dc4 <_sbrk+0x54>)
 8003d84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d86:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <_sbrk+0x50>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <_sbrk+0x50>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	18d3      	adds	r3, r2, r3
 8003d94:	466a      	mov	r2, sp
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d907      	bls.n	8003daa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d9a:	f000 f87d 	bl	8003e98 <__errno>
 8003d9e:	0003      	movs	r3, r0
 8003da0:	220c      	movs	r2, #12
 8003da2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003da4:	2301      	movs	r3, #1
 8003da6:	425b      	negs	r3, r3
 8003da8:	e006      	b.n	8003db8 <_sbrk+0x48>
	}

	heap_end += incr;
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <_sbrk+0x50>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	18d2      	adds	r2, r2, r3
 8003db2:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <_sbrk+0x50>)
 8003db4:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8003db6:	68fb      	ldr	r3, [r7, #12]
}
 8003db8:	0018      	movs	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b004      	add	sp, #16
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20000098 	.word	0x20000098
 8003dc4:	200001e0 	.word	0x200001e0

08003dc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003dcc:	4b17      	ldr	r3, [pc, #92]	; (8003e2c <SystemInit+0x64>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <SystemInit+0x64>)
 8003dd2:	2180      	movs	r1, #128	; 0x80
 8003dd4:	0049      	lsls	r1, r1, #1
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003dda:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <SystemInit+0x64>)
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <SystemInit+0x64>)
 8003de0:	4913      	ldr	r1, [pc, #76]	; (8003e30 <SystemInit+0x68>)
 8003de2:	400a      	ands	r2, r1
 8003de4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003de6:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <SystemInit+0x64>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <SystemInit+0x64>)
 8003dec:	4911      	ldr	r1, [pc, #68]	; (8003e34 <SystemInit+0x6c>)
 8003dee:	400a      	ands	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003df2:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <SystemInit+0x64>)
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <SystemInit+0x64>)
 8003df8:	2101      	movs	r1, #1
 8003dfa:	438a      	bics	r2, r1
 8003dfc:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <SystemInit+0x64>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <SystemInit+0x64>)
 8003e04:	490c      	ldr	r1, [pc, #48]	; (8003e38 <SystemInit+0x70>)
 8003e06:	400a      	ands	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003e0a:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <SystemInit+0x64>)
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <SystemInit+0x64>)
 8003e10:	490a      	ldr	r1, [pc, #40]	; (8003e3c <SystemInit+0x74>)
 8003e12:	400a      	ands	r2, r1
 8003e14:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003e16:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <SystemInit+0x64>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e1c:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <SystemInit+0x78>)
 8003e1e:	2280      	movs	r2, #128	; 0x80
 8003e20:	0512      	lsls	r2, r2, #20
 8003e22:	609a      	str	r2, [r3, #8]
#endif
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	88ff400c 	.word	0x88ff400c
 8003e34:	fef6fff6 	.word	0xfef6fff6
 8003e38:	fffbffff 	.word	0xfffbffff
 8003e3c:	ff02ffff 	.word	0xff02ffff
 8003e40:	e000ed00 	.word	0xe000ed00

08003e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003e44:	480d      	ldr	r0, [pc, #52]	; (8003e7c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003e46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003e48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e4a:	e003      	b.n	8003e54 <LoopCopyDataInit>

08003e4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e4c:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003e4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e52:	3104      	adds	r1, #4

08003e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e54:	480b      	ldr	r0, [pc, #44]	; (8003e84 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003e56:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003e58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003e5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e5c:	d3f6      	bcc.n	8003e4c <CopyDataInit>
  ldr  r2, =_sbss
 8003e5e:	4a0b      	ldr	r2, [pc, #44]	; (8003e8c <LoopForever+0x12>)
  b  LoopFillZerobss
 8003e60:	e002      	b.n	8003e68 <LoopFillZerobss>

08003e62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003e62:	2300      	movs	r3, #0
  str  r3, [r2]
 8003e64:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e66:	3204      	adds	r2, #4

08003e68 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <LoopForever+0x16>)
  cmp  r2, r3
 8003e6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e6c:	d3f9      	bcc.n	8003e62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003e6e:	f7ff ffab 	bl	8003dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e72:	f000 f817 	bl	8003ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e76:	f7ff f9e7 	bl	8003248 <main>

08003e7a <LoopForever>:

LoopForever:
    b LoopForever
 8003e7a:	e7fe      	b.n	8003e7a <LoopForever>
   ldr   r0, =_estack
 8003e7c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8003e80:	080049c0 	.word	0x080049c0
  ldr  r0, =_sdata
 8003e84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e88:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8003e8c:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8003e90:	200001e0 	.word	0x200001e0

08003e94 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e94:	e7fe      	b.n	8003e94 <ADC1_COMP_IRQHandler>
	...

08003e98 <__errno>:
 8003e98:	4b01      	ldr	r3, [pc, #4]	; (8003ea0 <__errno+0x8>)
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	4770      	bx	lr
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	20000004 	.word	0x20000004

08003ea4 <__libc_init_array>:
 8003ea4:	b570      	push	{r4, r5, r6, lr}
 8003ea6:	2600      	movs	r6, #0
 8003ea8:	4d0c      	ldr	r5, [pc, #48]	; (8003edc <__libc_init_array+0x38>)
 8003eaa:	4c0d      	ldr	r4, [pc, #52]	; (8003ee0 <__libc_init_array+0x3c>)
 8003eac:	1b64      	subs	r4, r4, r5
 8003eae:	10a4      	asrs	r4, r4, #2
 8003eb0:	42a6      	cmp	r6, r4
 8003eb2:	d109      	bne.n	8003ec8 <__libc_init_array+0x24>
 8003eb4:	2600      	movs	r6, #0
 8003eb6:	f000 fcc9 	bl	800484c <_init>
 8003eba:	4d0a      	ldr	r5, [pc, #40]	; (8003ee4 <__libc_init_array+0x40>)
 8003ebc:	4c0a      	ldr	r4, [pc, #40]	; (8003ee8 <__libc_init_array+0x44>)
 8003ebe:	1b64      	subs	r4, r4, r5
 8003ec0:	10a4      	asrs	r4, r4, #2
 8003ec2:	42a6      	cmp	r6, r4
 8003ec4:	d105      	bne.n	8003ed2 <__libc_init_array+0x2e>
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
 8003ec8:	00b3      	lsls	r3, r6, #2
 8003eca:	58eb      	ldr	r3, [r5, r3]
 8003ecc:	4798      	blx	r3
 8003ece:	3601      	adds	r6, #1
 8003ed0:	e7ee      	b.n	8003eb0 <__libc_init_array+0xc>
 8003ed2:	00b3      	lsls	r3, r6, #2
 8003ed4:	58eb      	ldr	r3, [r5, r3]
 8003ed6:	4798      	blx	r3
 8003ed8:	3601      	adds	r6, #1
 8003eda:	e7f2      	b.n	8003ec2 <__libc_init_array+0x1e>
 8003edc:	080049b8 	.word	0x080049b8
 8003ee0:	080049b8 	.word	0x080049b8
 8003ee4:	080049b8 	.word	0x080049b8
 8003ee8:	080049bc 	.word	0x080049bc

08003eec <memset>:
 8003eec:	0003      	movs	r3, r0
 8003eee:	1812      	adds	r2, r2, r0
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d100      	bne.n	8003ef6 <memset+0xa>
 8003ef4:	4770      	bx	lr
 8003ef6:	7019      	strb	r1, [r3, #0]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	e7f9      	b.n	8003ef0 <memset+0x4>

08003efc <_puts_r>:
 8003efc:	b570      	push	{r4, r5, r6, lr}
 8003efe:	0005      	movs	r5, r0
 8003f00:	000e      	movs	r6, r1
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d004      	beq.n	8003f10 <_puts_r+0x14>
 8003f06:	6983      	ldr	r3, [r0, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <_puts_r+0x14>
 8003f0c:	f000 fa24 	bl	8004358 <__sinit>
 8003f10:	69ab      	ldr	r3, [r5, #24]
 8003f12:	68ac      	ldr	r4, [r5, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d102      	bne.n	8003f1e <_puts_r+0x22>
 8003f18:	0028      	movs	r0, r5
 8003f1a:	f000 fa1d 	bl	8004358 <__sinit>
 8003f1e:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <_puts_r+0xb4>)
 8003f20:	429c      	cmp	r4, r3
 8003f22:	d10f      	bne.n	8003f44 <_puts_r+0x48>
 8003f24:	686c      	ldr	r4, [r5, #4]
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	071b      	lsls	r3, r3, #28
 8003f2a:	d502      	bpl.n	8003f32 <_puts_r+0x36>
 8003f2c:	6923      	ldr	r3, [r4, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d11f      	bne.n	8003f72 <_puts_r+0x76>
 8003f32:	0021      	movs	r1, r4
 8003f34:	0028      	movs	r0, r5
 8003f36:	f000 f8a1 	bl	800407c <__swsetup_r>
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	d019      	beq.n	8003f72 <_puts_r+0x76>
 8003f3e:	2001      	movs	r0, #1
 8003f40:	4240      	negs	r0, r0
 8003f42:	bd70      	pop	{r4, r5, r6, pc}
 8003f44:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <_puts_r+0xb8>)
 8003f46:	429c      	cmp	r4, r3
 8003f48:	d101      	bne.n	8003f4e <_puts_r+0x52>
 8003f4a:	68ac      	ldr	r4, [r5, #8]
 8003f4c:	e7eb      	b.n	8003f26 <_puts_r+0x2a>
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <_puts_r+0xbc>)
 8003f50:	429c      	cmp	r4, r3
 8003f52:	d1e8      	bne.n	8003f26 <_puts_r+0x2a>
 8003f54:	68ec      	ldr	r4, [r5, #12]
 8003f56:	e7e6      	b.n	8003f26 <_puts_r+0x2a>
 8003f58:	3601      	adds	r6, #1
 8003f5a:	60a3      	str	r3, [r4, #8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	da04      	bge.n	8003f6a <_puts_r+0x6e>
 8003f60:	69a2      	ldr	r2, [r4, #24]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	dc16      	bgt.n	8003f94 <_puts_r+0x98>
 8003f66:	290a      	cmp	r1, #10
 8003f68:	d014      	beq.n	8003f94 <_puts_r+0x98>
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	6022      	str	r2, [r4, #0]
 8003f70:	7019      	strb	r1, [r3, #0]
 8003f72:	68a3      	ldr	r3, [r4, #8]
 8003f74:	7831      	ldrb	r1, [r6, #0]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	2900      	cmp	r1, #0
 8003f7a:	d1ed      	bne.n	8003f58 <_puts_r+0x5c>
 8003f7c:	60a3      	str	r3, [r4, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	da0f      	bge.n	8003fa2 <_puts_r+0xa6>
 8003f82:	0022      	movs	r2, r4
 8003f84:	310a      	adds	r1, #10
 8003f86:	0028      	movs	r0, r5
 8003f88:	f000 f822 	bl	8003fd0 <__swbuf_r>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d0d6      	beq.n	8003f3e <_puts_r+0x42>
 8003f90:	200a      	movs	r0, #10
 8003f92:	e7d6      	b.n	8003f42 <_puts_r+0x46>
 8003f94:	0022      	movs	r2, r4
 8003f96:	0028      	movs	r0, r5
 8003f98:	f000 f81a 	bl	8003fd0 <__swbuf_r>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	d1e8      	bne.n	8003f72 <_puts_r+0x76>
 8003fa0:	e7cd      	b.n	8003f3e <_puts_r+0x42>
 8003fa2:	200a      	movs	r0, #10
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	6022      	str	r2, [r4, #0]
 8003faa:	7018      	strb	r0, [r3, #0]
 8003fac:	e7c9      	b.n	8003f42 <_puts_r+0x46>
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	08004970 	.word	0x08004970
 8003fb4:	08004990 	.word	0x08004990
 8003fb8:	08004950 	.word	0x08004950

08003fbc <puts>:
 8003fbc:	b510      	push	{r4, lr}
 8003fbe:	4b03      	ldr	r3, [pc, #12]	; (8003fcc <puts+0x10>)
 8003fc0:	0001      	movs	r1, r0
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	f7ff ff9a 	bl	8003efc <_puts_r>
 8003fc8:	bd10      	pop	{r4, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	20000004 	.word	0x20000004

08003fd0 <__swbuf_r>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	0005      	movs	r5, r0
 8003fd4:	000e      	movs	r6, r1
 8003fd6:	0014      	movs	r4, r2
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d004      	beq.n	8003fe6 <__swbuf_r+0x16>
 8003fdc:	6983      	ldr	r3, [r0, #24]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <__swbuf_r+0x16>
 8003fe2:	f000 f9b9 	bl	8004358 <__sinit>
 8003fe6:	4b22      	ldr	r3, [pc, #136]	; (8004070 <__swbuf_r+0xa0>)
 8003fe8:	429c      	cmp	r4, r3
 8003fea:	d12d      	bne.n	8004048 <__swbuf_r+0x78>
 8003fec:	686c      	ldr	r4, [r5, #4]
 8003fee:	69a3      	ldr	r3, [r4, #24]
 8003ff0:	60a3      	str	r3, [r4, #8]
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	071b      	lsls	r3, r3, #28
 8003ff6:	d531      	bpl.n	800405c <__swbuf_r+0x8c>
 8003ff8:	6923      	ldr	r3, [r4, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d02e      	beq.n	800405c <__swbuf_r+0x8c>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	6922      	ldr	r2, [r4, #16]
 8004002:	b2f7      	uxtb	r7, r6
 8004004:	1a98      	subs	r0, r3, r2
 8004006:	6963      	ldr	r3, [r4, #20]
 8004008:	b2f6      	uxtb	r6, r6
 800400a:	4283      	cmp	r3, r0
 800400c:	dc05      	bgt.n	800401a <__swbuf_r+0x4a>
 800400e:	0021      	movs	r1, r4
 8004010:	0028      	movs	r0, r5
 8004012:	f000 f933 	bl	800427c <_fflush_r>
 8004016:	2800      	cmp	r0, #0
 8004018:	d126      	bne.n	8004068 <__swbuf_r+0x98>
 800401a:	68a3      	ldr	r3, [r4, #8]
 800401c:	3001      	adds	r0, #1
 800401e:	3b01      	subs	r3, #1
 8004020:	60a3      	str	r3, [r4, #8]
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	6022      	str	r2, [r4, #0]
 8004028:	701f      	strb	r7, [r3, #0]
 800402a:	6963      	ldr	r3, [r4, #20]
 800402c:	4283      	cmp	r3, r0
 800402e:	d004      	beq.n	800403a <__swbuf_r+0x6a>
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	07db      	lsls	r3, r3, #31
 8004034:	d51a      	bpl.n	800406c <__swbuf_r+0x9c>
 8004036:	2e0a      	cmp	r6, #10
 8004038:	d118      	bne.n	800406c <__swbuf_r+0x9c>
 800403a:	0021      	movs	r1, r4
 800403c:	0028      	movs	r0, r5
 800403e:	f000 f91d 	bl	800427c <_fflush_r>
 8004042:	2800      	cmp	r0, #0
 8004044:	d012      	beq.n	800406c <__swbuf_r+0x9c>
 8004046:	e00f      	b.n	8004068 <__swbuf_r+0x98>
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <__swbuf_r+0xa4>)
 800404a:	429c      	cmp	r4, r3
 800404c:	d101      	bne.n	8004052 <__swbuf_r+0x82>
 800404e:	68ac      	ldr	r4, [r5, #8]
 8004050:	e7cd      	b.n	8003fee <__swbuf_r+0x1e>
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <__swbuf_r+0xa8>)
 8004054:	429c      	cmp	r4, r3
 8004056:	d1ca      	bne.n	8003fee <__swbuf_r+0x1e>
 8004058:	68ec      	ldr	r4, [r5, #12]
 800405a:	e7c8      	b.n	8003fee <__swbuf_r+0x1e>
 800405c:	0021      	movs	r1, r4
 800405e:	0028      	movs	r0, r5
 8004060:	f000 f80c 	bl	800407c <__swsetup_r>
 8004064:	2800      	cmp	r0, #0
 8004066:	d0ca      	beq.n	8003ffe <__swbuf_r+0x2e>
 8004068:	2601      	movs	r6, #1
 800406a:	4276      	negs	r6, r6
 800406c:	0030      	movs	r0, r6
 800406e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004070:	08004970 	.word	0x08004970
 8004074:	08004990 	.word	0x08004990
 8004078:	08004950 	.word	0x08004950

0800407c <__swsetup_r>:
 800407c:	4b36      	ldr	r3, [pc, #216]	; (8004158 <__swsetup_r+0xdc>)
 800407e:	b570      	push	{r4, r5, r6, lr}
 8004080:	681d      	ldr	r5, [r3, #0]
 8004082:	0006      	movs	r6, r0
 8004084:	000c      	movs	r4, r1
 8004086:	2d00      	cmp	r5, #0
 8004088:	d005      	beq.n	8004096 <__swsetup_r+0x1a>
 800408a:	69ab      	ldr	r3, [r5, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d102      	bne.n	8004096 <__swsetup_r+0x1a>
 8004090:	0028      	movs	r0, r5
 8004092:	f000 f961 	bl	8004358 <__sinit>
 8004096:	4b31      	ldr	r3, [pc, #196]	; (800415c <__swsetup_r+0xe0>)
 8004098:	429c      	cmp	r4, r3
 800409a:	d10f      	bne.n	80040bc <__swsetup_r+0x40>
 800409c:	686c      	ldr	r4, [r5, #4]
 800409e:	230c      	movs	r3, #12
 80040a0:	5ee2      	ldrsh	r2, [r4, r3]
 80040a2:	b293      	uxth	r3, r2
 80040a4:	0719      	lsls	r1, r3, #28
 80040a6:	d42d      	bmi.n	8004104 <__swsetup_r+0x88>
 80040a8:	06d9      	lsls	r1, r3, #27
 80040aa:	d411      	bmi.n	80040d0 <__swsetup_r+0x54>
 80040ac:	2309      	movs	r3, #9
 80040ae:	2001      	movs	r0, #1
 80040b0:	6033      	str	r3, [r6, #0]
 80040b2:	3337      	adds	r3, #55	; 0x37
 80040b4:	4313      	orrs	r3, r2
 80040b6:	81a3      	strh	r3, [r4, #12]
 80040b8:	4240      	negs	r0, r0
 80040ba:	bd70      	pop	{r4, r5, r6, pc}
 80040bc:	4b28      	ldr	r3, [pc, #160]	; (8004160 <__swsetup_r+0xe4>)
 80040be:	429c      	cmp	r4, r3
 80040c0:	d101      	bne.n	80040c6 <__swsetup_r+0x4a>
 80040c2:	68ac      	ldr	r4, [r5, #8]
 80040c4:	e7eb      	b.n	800409e <__swsetup_r+0x22>
 80040c6:	4b27      	ldr	r3, [pc, #156]	; (8004164 <__swsetup_r+0xe8>)
 80040c8:	429c      	cmp	r4, r3
 80040ca:	d1e8      	bne.n	800409e <__swsetup_r+0x22>
 80040cc:	68ec      	ldr	r4, [r5, #12]
 80040ce:	e7e6      	b.n	800409e <__swsetup_r+0x22>
 80040d0:	075b      	lsls	r3, r3, #29
 80040d2:	d513      	bpl.n	80040fc <__swsetup_r+0x80>
 80040d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040d6:	2900      	cmp	r1, #0
 80040d8:	d008      	beq.n	80040ec <__swsetup_r+0x70>
 80040da:	0023      	movs	r3, r4
 80040dc:	3344      	adds	r3, #68	; 0x44
 80040de:	4299      	cmp	r1, r3
 80040e0:	d002      	beq.n	80040e8 <__swsetup_r+0x6c>
 80040e2:	0030      	movs	r0, r6
 80040e4:	f000 fa38 	bl	8004558 <_free_r>
 80040e8:	2300      	movs	r3, #0
 80040ea:	6363      	str	r3, [r4, #52]	; 0x34
 80040ec:	2224      	movs	r2, #36	; 0x24
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	4393      	bics	r3, r2
 80040f2:	81a3      	strh	r3, [r4, #12]
 80040f4:	2300      	movs	r3, #0
 80040f6:	6063      	str	r3, [r4, #4]
 80040f8:	6923      	ldr	r3, [r4, #16]
 80040fa:	6023      	str	r3, [r4, #0]
 80040fc:	2308      	movs	r3, #8
 80040fe:	89a2      	ldrh	r2, [r4, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	6923      	ldr	r3, [r4, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10b      	bne.n	8004122 <__swsetup_r+0xa6>
 800410a:	21a0      	movs	r1, #160	; 0xa0
 800410c:	2280      	movs	r2, #128	; 0x80
 800410e:	89a3      	ldrh	r3, [r4, #12]
 8004110:	0089      	lsls	r1, r1, #2
 8004112:	0092      	lsls	r2, r2, #2
 8004114:	400b      	ands	r3, r1
 8004116:	4293      	cmp	r3, r2
 8004118:	d003      	beq.n	8004122 <__swsetup_r+0xa6>
 800411a:	0021      	movs	r1, r4
 800411c:	0030      	movs	r0, r6
 800411e:	f000 f9d7 	bl	80044d0 <__smakebuf_r>
 8004122:	2301      	movs	r3, #1
 8004124:	89a2      	ldrh	r2, [r4, #12]
 8004126:	4013      	ands	r3, r2
 8004128:	d011      	beq.n	800414e <__swsetup_r+0xd2>
 800412a:	2300      	movs	r3, #0
 800412c:	60a3      	str	r3, [r4, #8]
 800412e:	6963      	ldr	r3, [r4, #20]
 8004130:	425b      	negs	r3, r3
 8004132:	61a3      	str	r3, [r4, #24]
 8004134:	2000      	movs	r0, #0
 8004136:	6923      	ldr	r3, [r4, #16]
 8004138:	4283      	cmp	r3, r0
 800413a:	d1be      	bne.n	80040ba <__swsetup_r+0x3e>
 800413c:	230c      	movs	r3, #12
 800413e:	5ee2      	ldrsh	r2, [r4, r3]
 8004140:	0613      	lsls	r3, r2, #24
 8004142:	d5ba      	bpl.n	80040ba <__swsetup_r+0x3e>
 8004144:	2340      	movs	r3, #64	; 0x40
 8004146:	4313      	orrs	r3, r2
 8004148:	81a3      	strh	r3, [r4, #12]
 800414a:	3801      	subs	r0, #1
 800414c:	e7b5      	b.n	80040ba <__swsetup_r+0x3e>
 800414e:	0792      	lsls	r2, r2, #30
 8004150:	d400      	bmi.n	8004154 <__swsetup_r+0xd8>
 8004152:	6963      	ldr	r3, [r4, #20]
 8004154:	60a3      	str	r3, [r4, #8]
 8004156:	e7ed      	b.n	8004134 <__swsetup_r+0xb8>
 8004158:	20000004 	.word	0x20000004
 800415c:	08004970 	.word	0x08004970
 8004160:	08004990 	.word	0x08004990
 8004164:	08004950 	.word	0x08004950

08004168 <__sflush_r>:
 8004168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800416a:	898a      	ldrh	r2, [r1, #12]
 800416c:	0005      	movs	r5, r0
 800416e:	000c      	movs	r4, r1
 8004170:	0713      	lsls	r3, r2, #28
 8004172:	d460      	bmi.n	8004236 <__sflush_r+0xce>
 8004174:	684b      	ldr	r3, [r1, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	dc04      	bgt.n	8004184 <__sflush_r+0x1c>
 800417a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800417c:	2b00      	cmp	r3, #0
 800417e:	dc01      	bgt.n	8004184 <__sflush_r+0x1c>
 8004180:	2000      	movs	r0, #0
 8004182:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004184:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004186:	2f00      	cmp	r7, #0
 8004188:	d0fa      	beq.n	8004180 <__sflush_r+0x18>
 800418a:	2300      	movs	r3, #0
 800418c:	682e      	ldr	r6, [r5, #0]
 800418e:	602b      	str	r3, [r5, #0]
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	015b      	lsls	r3, r3, #5
 8004194:	6a21      	ldr	r1, [r4, #32]
 8004196:	401a      	ands	r2, r3
 8004198:	d034      	beq.n	8004204 <__sflush_r+0x9c>
 800419a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	075b      	lsls	r3, r3, #29
 80041a0:	d506      	bpl.n	80041b0 <__sflush_r+0x48>
 80041a2:	6863      	ldr	r3, [r4, #4]
 80041a4:	1ac0      	subs	r0, r0, r3
 80041a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <__sflush_r+0x48>
 80041ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041ae:	1ac0      	subs	r0, r0, r3
 80041b0:	0002      	movs	r2, r0
 80041b2:	6a21      	ldr	r1, [r4, #32]
 80041b4:	2300      	movs	r3, #0
 80041b6:	0028      	movs	r0, r5
 80041b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80041ba:	47b8      	blx	r7
 80041bc:	89a1      	ldrh	r1, [r4, #12]
 80041be:	1c43      	adds	r3, r0, #1
 80041c0:	d106      	bne.n	80041d0 <__sflush_r+0x68>
 80041c2:	682b      	ldr	r3, [r5, #0]
 80041c4:	2b1d      	cmp	r3, #29
 80041c6:	d830      	bhi.n	800422a <__sflush_r+0xc2>
 80041c8:	4a2b      	ldr	r2, [pc, #172]	; (8004278 <__sflush_r+0x110>)
 80041ca:	40da      	lsrs	r2, r3
 80041cc:	07d3      	lsls	r3, r2, #31
 80041ce:	d52c      	bpl.n	800422a <__sflush_r+0xc2>
 80041d0:	2300      	movs	r3, #0
 80041d2:	6063      	str	r3, [r4, #4]
 80041d4:	6923      	ldr	r3, [r4, #16]
 80041d6:	6023      	str	r3, [r4, #0]
 80041d8:	04cb      	lsls	r3, r1, #19
 80041da:	d505      	bpl.n	80041e8 <__sflush_r+0x80>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <__sflush_r+0x7e>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d100      	bne.n	80041e8 <__sflush_r+0x80>
 80041e6:	6560      	str	r0, [r4, #84]	; 0x54
 80041e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041ea:	602e      	str	r6, [r5, #0]
 80041ec:	2900      	cmp	r1, #0
 80041ee:	d0c7      	beq.n	8004180 <__sflush_r+0x18>
 80041f0:	0023      	movs	r3, r4
 80041f2:	3344      	adds	r3, #68	; 0x44
 80041f4:	4299      	cmp	r1, r3
 80041f6:	d002      	beq.n	80041fe <__sflush_r+0x96>
 80041f8:	0028      	movs	r0, r5
 80041fa:	f000 f9ad 	bl	8004558 <_free_r>
 80041fe:	2000      	movs	r0, #0
 8004200:	6360      	str	r0, [r4, #52]	; 0x34
 8004202:	e7be      	b.n	8004182 <__sflush_r+0x1a>
 8004204:	2301      	movs	r3, #1
 8004206:	0028      	movs	r0, r5
 8004208:	47b8      	blx	r7
 800420a:	1c43      	adds	r3, r0, #1
 800420c:	d1c6      	bne.n	800419c <__sflush_r+0x34>
 800420e:	682b      	ldr	r3, [r5, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0c3      	beq.n	800419c <__sflush_r+0x34>
 8004214:	2b1d      	cmp	r3, #29
 8004216:	d001      	beq.n	800421c <__sflush_r+0xb4>
 8004218:	2b16      	cmp	r3, #22
 800421a:	d101      	bne.n	8004220 <__sflush_r+0xb8>
 800421c:	602e      	str	r6, [r5, #0]
 800421e:	e7af      	b.n	8004180 <__sflush_r+0x18>
 8004220:	2340      	movs	r3, #64	; 0x40
 8004222:	89a2      	ldrh	r2, [r4, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	81a3      	strh	r3, [r4, #12]
 8004228:	e7ab      	b.n	8004182 <__sflush_r+0x1a>
 800422a:	2340      	movs	r3, #64	; 0x40
 800422c:	430b      	orrs	r3, r1
 800422e:	2001      	movs	r0, #1
 8004230:	81a3      	strh	r3, [r4, #12]
 8004232:	4240      	negs	r0, r0
 8004234:	e7a5      	b.n	8004182 <__sflush_r+0x1a>
 8004236:	690f      	ldr	r7, [r1, #16]
 8004238:	2f00      	cmp	r7, #0
 800423a:	d0a1      	beq.n	8004180 <__sflush_r+0x18>
 800423c:	680b      	ldr	r3, [r1, #0]
 800423e:	600f      	str	r7, [r1, #0]
 8004240:	1bdb      	subs	r3, r3, r7
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	2300      	movs	r3, #0
 8004246:	0792      	lsls	r2, r2, #30
 8004248:	d100      	bne.n	800424c <__sflush_r+0xe4>
 800424a:	694b      	ldr	r3, [r1, #20]
 800424c:	60a3      	str	r3, [r4, #8]
 800424e:	9b01      	ldr	r3, [sp, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	dc00      	bgt.n	8004256 <__sflush_r+0xee>
 8004254:	e794      	b.n	8004180 <__sflush_r+0x18>
 8004256:	9b01      	ldr	r3, [sp, #4]
 8004258:	003a      	movs	r2, r7
 800425a:	6a21      	ldr	r1, [r4, #32]
 800425c:	0028      	movs	r0, r5
 800425e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004260:	47b0      	blx	r6
 8004262:	2800      	cmp	r0, #0
 8004264:	dc03      	bgt.n	800426e <__sflush_r+0x106>
 8004266:	2340      	movs	r3, #64	; 0x40
 8004268:	89a2      	ldrh	r2, [r4, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	e7df      	b.n	800422e <__sflush_r+0xc6>
 800426e:	9b01      	ldr	r3, [sp, #4]
 8004270:	183f      	adds	r7, r7, r0
 8004272:	1a1b      	subs	r3, r3, r0
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	e7ea      	b.n	800424e <__sflush_r+0xe6>
 8004278:	20400001 	.word	0x20400001

0800427c <_fflush_r>:
 800427c:	690b      	ldr	r3, [r1, #16]
 800427e:	b570      	push	{r4, r5, r6, lr}
 8004280:	0005      	movs	r5, r0
 8004282:	000c      	movs	r4, r1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <_fflush_r+0x10>
 8004288:	2000      	movs	r0, #0
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	2800      	cmp	r0, #0
 800428e:	d004      	beq.n	800429a <_fflush_r+0x1e>
 8004290:	6983      	ldr	r3, [r0, #24]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <_fflush_r+0x1e>
 8004296:	f000 f85f 	bl	8004358 <__sinit>
 800429a:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <_fflush_r+0x4c>)
 800429c:	429c      	cmp	r4, r3
 800429e:	d109      	bne.n	80042b4 <_fflush_r+0x38>
 80042a0:	686c      	ldr	r4, [r5, #4]
 80042a2:	220c      	movs	r2, #12
 80042a4:	5ea3      	ldrsh	r3, [r4, r2]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0ee      	beq.n	8004288 <_fflush_r+0xc>
 80042aa:	0021      	movs	r1, r4
 80042ac:	0028      	movs	r0, r5
 80042ae:	f7ff ff5b 	bl	8004168 <__sflush_r>
 80042b2:	e7ea      	b.n	800428a <_fflush_r+0xe>
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <_fflush_r+0x50>)
 80042b6:	429c      	cmp	r4, r3
 80042b8:	d101      	bne.n	80042be <_fflush_r+0x42>
 80042ba:	68ac      	ldr	r4, [r5, #8]
 80042bc:	e7f1      	b.n	80042a2 <_fflush_r+0x26>
 80042be:	4b04      	ldr	r3, [pc, #16]	; (80042d0 <_fflush_r+0x54>)
 80042c0:	429c      	cmp	r4, r3
 80042c2:	d1ee      	bne.n	80042a2 <_fflush_r+0x26>
 80042c4:	68ec      	ldr	r4, [r5, #12]
 80042c6:	e7ec      	b.n	80042a2 <_fflush_r+0x26>
 80042c8:	08004970 	.word	0x08004970
 80042cc:	08004990 	.word	0x08004990
 80042d0:	08004950 	.word	0x08004950

080042d4 <std>:
 80042d4:	2300      	movs	r3, #0
 80042d6:	b510      	push	{r4, lr}
 80042d8:	0004      	movs	r4, r0
 80042da:	6003      	str	r3, [r0, #0]
 80042dc:	6043      	str	r3, [r0, #4]
 80042de:	6083      	str	r3, [r0, #8]
 80042e0:	8181      	strh	r1, [r0, #12]
 80042e2:	6643      	str	r3, [r0, #100]	; 0x64
 80042e4:	81c2      	strh	r2, [r0, #14]
 80042e6:	6103      	str	r3, [r0, #16]
 80042e8:	6143      	str	r3, [r0, #20]
 80042ea:	6183      	str	r3, [r0, #24]
 80042ec:	0019      	movs	r1, r3
 80042ee:	2208      	movs	r2, #8
 80042f0:	305c      	adds	r0, #92	; 0x5c
 80042f2:	f7ff fdfb 	bl	8003eec <memset>
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <std+0x38>)
 80042f8:	6224      	str	r4, [r4, #32]
 80042fa:	6263      	str	r3, [r4, #36]	; 0x24
 80042fc:	4b04      	ldr	r3, [pc, #16]	; (8004310 <std+0x3c>)
 80042fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8004300:	4b04      	ldr	r3, [pc, #16]	; (8004314 <std+0x40>)
 8004302:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004304:	4b04      	ldr	r3, [pc, #16]	; (8004318 <std+0x44>)
 8004306:	6323      	str	r3, [r4, #48]	; 0x30
 8004308:	bd10      	pop	{r4, pc}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	080046cd 	.word	0x080046cd
 8004310:	080046f5 	.word	0x080046f5
 8004314:	0800472d 	.word	0x0800472d
 8004318:	08004759 	.word	0x08004759

0800431c <_cleanup_r>:
 800431c:	b510      	push	{r4, lr}
 800431e:	4902      	ldr	r1, [pc, #8]	; (8004328 <_cleanup_r+0xc>)
 8004320:	f000 f88c 	bl	800443c <_fwalk_reent>
 8004324:	bd10      	pop	{r4, pc}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	0800427d 	.word	0x0800427d

0800432c <__sfmoreglue>:
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	2568      	movs	r5, #104	; 0x68
 8004330:	1e4a      	subs	r2, r1, #1
 8004332:	4355      	muls	r5, r2
 8004334:	000e      	movs	r6, r1
 8004336:	0029      	movs	r1, r5
 8004338:	3174      	adds	r1, #116	; 0x74
 800433a:	f000 f957 	bl	80045ec <_malloc_r>
 800433e:	1e04      	subs	r4, r0, #0
 8004340:	d008      	beq.n	8004354 <__sfmoreglue+0x28>
 8004342:	2100      	movs	r1, #0
 8004344:	002a      	movs	r2, r5
 8004346:	6001      	str	r1, [r0, #0]
 8004348:	6046      	str	r6, [r0, #4]
 800434a:	300c      	adds	r0, #12
 800434c:	60a0      	str	r0, [r4, #8]
 800434e:	3268      	adds	r2, #104	; 0x68
 8004350:	f7ff fdcc 	bl	8003eec <memset>
 8004354:	0020      	movs	r0, r4
 8004356:	bd70      	pop	{r4, r5, r6, pc}

08004358 <__sinit>:
 8004358:	6983      	ldr	r3, [r0, #24]
 800435a:	b513      	push	{r0, r1, r4, lr}
 800435c:	0004      	movs	r4, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d128      	bne.n	80043b4 <__sinit+0x5c>
 8004362:	6483      	str	r3, [r0, #72]	; 0x48
 8004364:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004366:	6503      	str	r3, [r0, #80]	; 0x50
 8004368:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <__sinit+0x60>)
 800436a:	4a14      	ldr	r2, [pc, #80]	; (80043bc <__sinit+0x64>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6282      	str	r2, [r0, #40]	; 0x28
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	4298      	cmp	r0, r3
 8004374:	d101      	bne.n	800437a <__sinit+0x22>
 8004376:	2301      	movs	r3, #1
 8004378:	6183      	str	r3, [r0, #24]
 800437a:	0020      	movs	r0, r4
 800437c:	f000 f820 	bl	80043c0 <__sfp>
 8004380:	6060      	str	r0, [r4, #4]
 8004382:	0020      	movs	r0, r4
 8004384:	f000 f81c 	bl	80043c0 <__sfp>
 8004388:	60a0      	str	r0, [r4, #8]
 800438a:	0020      	movs	r0, r4
 800438c:	f000 f818 	bl	80043c0 <__sfp>
 8004390:	2200      	movs	r2, #0
 8004392:	60e0      	str	r0, [r4, #12]
 8004394:	2104      	movs	r1, #4
 8004396:	6860      	ldr	r0, [r4, #4]
 8004398:	f7ff ff9c 	bl	80042d4 <std>
 800439c:	2201      	movs	r2, #1
 800439e:	2109      	movs	r1, #9
 80043a0:	68a0      	ldr	r0, [r4, #8]
 80043a2:	f7ff ff97 	bl	80042d4 <std>
 80043a6:	2202      	movs	r2, #2
 80043a8:	2112      	movs	r1, #18
 80043aa:	68e0      	ldr	r0, [r4, #12]
 80043ac:	f7ff ff92 	bl	80042d4 <std>
 80043b0:	2301      	movs	r3, #1
 80043b2:	61a3      	str	r3, [r4, #24]
 80043b4:	bd13      	pop	{r0, r1, r4, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	0800494c 	.word	0x0800494c
 80043bc:	0800431d 	.word	0x0800431d

080043c0 <__sfp>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <__sfp+0x74>)
 80043c4:	0007      	movs	r7, r0
 80043c6:	681e      	ldr	r6, [r3, #0]
 80043c8:	69b3      	ldr	r3, [r6, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <__sfp+0x14>
 80043ce:	0030      	movs	r0, r6
 80043d0:	f7ff ffc2 	bl	8004358 <__sinit>
 80043d4:	3648      	adds	r6, #72	; 0x48
 80043d6:	68b4      	ldr	r4, [r6, #8]
 80043d8:	6873      	ldr	r3, [r6, #4]
 80043da:	3b01      	subs	r3, #1
 80043dc:	d504      	bpl.n	80043e8 <__sfp+0x28>
 80043de:	6833      	ldr	r3, [r6, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <__sfp+0x34>
 80043e4:	6836      	ldr	r6, [r6, #0]
 80043e6:	e7f6      	b.n	80043d6 <__sfp+0x16>
 80043e8:	220c      	movs	r2, #12
 80043ea:	5ea5      	ldrsh	r5, [r4, r2]
 80043ec:	2d00      	cmp	r5, #0
 80043ee:	d00d      	beq.n	800440c <__sfp+0x4c>
 80043f0:	3468      	adds	r4, #104	; 0x68
 80043f2:	e7f2      	b.n	80043da <__sfp+0x1a>
 80043f4:	2104      	movs	r1, #4
 80043f6:	0038      	movs	r0, r7
 80043f8:	f7ff ff98 	bl	800432c <__sfmoreglue>
 80043fc:	6030      	str	r0, [r6, #0]
 80043fe:	2800      	cmp	r0, #0
 8004400:	d1f0      	bne.n	80043e4 <__sfp+0x24>
 8004402:	230c      	movs	r3, #12
 8004404:	0004      	movs	r4, r0
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	0020      	movs	r0, r4
 800440a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800440c:	0020      	movs	r0, r4
 800440e:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <__sfp+0x78>)
 8004410:	6665      	str	r5, [r4, #100]	; 0x64
 8004412:	6025      	str	r5, [r4, #0]
 8004414:	6065      	str	r5, [r4, #4]
 8004416:	60a5      	str	r5, [r4, #8]
 8004418:	60e3      	str	r3, [r4, #12]
 800441a:	6125      	str	r5, [r4, #16]
 800441c:	6165      	str	r5, [r4, #20]
 800441e:	61a5      	str	r5, [r4, #24]
 8004420:	2208      	movs	r2, #8
 8004422:	0029      	movs	r1, r5
 8004424:	305c      	adds	r0, #92	; 0x5c
 8004426:	f7ff fd61 	bl	8003eec <memset>
 800442a:	6365      	str	r5, [r4, #52]	; 0x34
 800442c:	63a5      	str	r5, [r4, #56]	; 0x38
 800442e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004430:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004432:	e7e9      	b.n	8004408 <__sfp+0x48>
 8004434:	0800494c 	.word	0x0800494c
 8004438:	ffff0001 	.word	0xffff0001

0800443c <_fwalk_reent>:
 800443c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800443e:	0004      	movs	r4, r0
 8004440:	0007      	movs	r7, r0
 8004442:	2600      	movs	r6, #0
 8004444:	9101      	str	r1, [sp, #4]
 8004446:	3448      	adds	r4, #72	; 0x48
 8004448:	2c00      	cmp	r4, #0
 800444a:	d101      	bne.n	8004450 <_fwalk_reent+0x14>
 800444c:	0030      	movs	r0, r6
 800444e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004450:	6863      	ldr	r3, [r4, #4]
 8004452:	68a5      	ldr	r5, [r4, #8]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	9b00      	ldr	r3, [sp, #0]
 8004458:	3b01      	subs	r3, #1
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	d501      	bpl.n	8004462 <_fwalk_reent+0x26>
 800445e:	6824      	ldr	r4, [r4, #0]
 8004460:	e7f2      	b.n	8004448 <_fwalk_reent+0xc>
 8004462:	89ab      	ldrh	r3, [r5, #12]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d908      	bls.n	800447a <_fwalk_reent+0x3e>
 8004468:	220e      	movs	r2, #14
 800446a:	5eab      	ldrsh	r3, [r5, r2]
 800446c:	3301      	adds	r3, #1
 800446e:	d004      	beq.n	800447a <_fwalk_reent+0x3e>
 8004470:	0029      	movs	r1, r5
 8004472:	0038      	movs	r0, r7
 8004474:	9b01      	ldr	r3, [sp, #4]
 8004476:	4798      	blx	r3
 8004478:	4306      	orrs	r6, r0
 800447a:	3568      	adds	r5, #104	; 0x68
 800447c:	e7eb      	b.n	8004456 <_fwalk_reent+0x1a>
	...

08004480 <__swhatbuf_r>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	000e      	movs	r6, r1
 8004484:	001d      	movs	r5, r3
 8004486:	230e      	movs	r3, #14
 8004488:	5ec9      	ldrsh	r1, [r1, r3]
 800448a:	b096      	sub	sp, #88	; 0x58
 800448c:	0014      	movs	r4, r2
 800448e:	2900      	cmp	r1, #0
 8004490:	da07      	bge.n	80044a2 <__swhatbuf_r+0x22>
 8004492:	2300      	movs	r3, #0
 8004494:	602b      	str	r3, [r5, #0]
 8004496:	89b3      	ldrh	r3, [r6, #12]
 8004498:	061b      	lsls	r3, r3, #24
 800449a:	d411      	bmi.n	80044c0 <__swhatbuf_r+0x40>
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	e00f      	b.n	80044c2 <__swhatbuf_r+0x42>
 80044a2:	466a      	mov	r2, sp
 80044a4:	f000 f984 	bl	80047b0 <_fstat_r>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	dbf2      	blt.n	8004492 <__swhatbuf_r+0x12>
 80044ac:	22f0      	movs	r2, #240	; 0xf0
 80044ae:	9b01      	ldr	r3, [sp, #4]
 80044b0:	0212      	lsls	r2, r2, #8
 80044b2:	4013      	ands	r3, r2
 80044b4:	4a05      	ldr	r2, [pc, #20]	; (80044cc <__swhatbuf_r+0x4c>)
 80044b6:	189b      	adds	r3, r3, r2
 80044b8:	425a      	negs	r2, r3
 80044ba:	4153      	adcs	r3, r2
 80044bc:	602b      	str	r3, [r5, #0]
 80044be:	e7ed      	b.n	800449c <__swhatbuf_r+0x1c>
 80044c0:	2340      	movs	r3, #64	; 0x40
 80044c2:	2000      	movs	r0, #0
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	b016      	add	sp, #88	; 0x58
 80044c8:	bd70      	pop	{r4, r5, r6, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	ffffe000 	.word	0xffffe000

080044d0 <__smakebuf_r>:
 80044d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044d2:	2602      	movs	r6, #2
 80044d4:	898b      	ldrh	r3, [r1, #12]
 80044d6:	0005      	movs	r5, r0
 80044d8:	000c      	movs	r4, r1
 80044da:	4233      	tst	r3, r6
 80044dc:	d006      	beq.n	80044ec <__smakebuf_r+0x1c>
 80044de:	0023      	movs	r3, r4
 80044e0:	3347      	adds	r3, #71	; 0x47
 80044e2:	6023      	str	r3, [r4, #0]
 80044e4:	6123      	str	r3, [r4, #16]
 80044e6:	2301      	movs	r3, #1
 80044e8:	6163      	str	r3, [r4, #20]
 80044ea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80044ec:	ab01      	add	r3, sp, #4
 80044ee:	466a      	mov	r2, sp
 80044f0:	f7ff ffc6 	bl	8004480 <__swhatbuf_r>
 80044f4:	9900      	ldr	r1, [sp, #0]
 80044f6:	0007      	movs	r7, r0
 80044f8:	0028      	movs	r0, r5
 80044fa:	f000 f877 	bl	80045ec <_malloc_r>
 80044fe:	2800      	cmp	r0, #0
 8004500:	d108      	bne.n	8004514 <__smakebuf_r+0x44>
 8004502:	220c      	movs	r2, #12
 8004504:	5ea3      	ldrsh	r3, [r4, r2]
 8004506:	059a      	lsls	r2, r3, #22
 8004508:	d4ef      	bmi.n	80044ea <__smakebuf_r+0x1a>
 800450a:	2203      	movs	r2, #3
 800450c:	4393      	bics	r3, r2
 800450e:	431e      	orrs	r6, r3
 8004510:	81a6      	strh	r6, [r4, #12]
 8004512:	e7e4      	b.n	80044de <__smakebuf_r+0xe>
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <__smakebuf_r+0x84>)
 8004516:	62ab      	str	r3, [r5, #40]	; 0x28
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	89a2      	ldrh	r2, [r4, #12]
 800451c:	6020      	str	r0, [r4, #0]
 800451e:	4313      	orrs	r3, r2
 8004520:	81a3      	strh	r3, [r4, #12]
 8004522:	9b00      	ldr	r3, [sp, #0]
 8004524:	6120      	str	r0, [r4, #16]
 8004526:	6163      	str	r3, [r4, #20]
 8004528:	9b01      	ldr	r3, [sp, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <__smakebuf_r+0x7a>
 800452e:	230e      	movs	r3, #14
 8004530:	5ee1      	ldrsh	r1, [r4, r3]
 8004532:	0028      	movs	r0, r5
 8004534:	f000 f94e 	bl	80047d4 <_isatty_r>
 8004538:	2800      	cmp	r0, #0
 800453a:	d006      	beq.n	800454a <__smakebuf_r+0x7a>
 800453c:	2203      	movs	r2, #3
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	4393      	bics	r3, r2
 8004542:	001a      	movs	r2, r3
 8004544:	2301      	movs	r3, #1
 8004546:	4313      	orrs	r3, r2
 8004548:	81a3      	strh	r3, [r4, #12]
 800454a:	89a0      	ldrh	r0, [r4, #12]
 800454c:	4338      	orrs	r0, r7
 800454e:	81a0      	strh	r0, [r4, #12]
 8004550:	e7cb      	b.n	80044ea <__smakebuf_r+0x1a>
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	0800431d 	.word	0x0800431d

08004558 <_free_r>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	0005      	movs	r5, r0
 800455c:	2900      	cmp	r1, #0
 800455e:	d010      	beq.n	8004582 <_free_r+0x2a>
 8004560:	1f0c      	subs	r4, r1, #4
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	da00      	bge.n	800456a <_free_r+0x12>
 8004568:	18e4      	adds	r4, r4, r3
 800456a:	0028      	movs	r0, r5
 800456c:	f000 f958 	bl	8004820 <__malloc_lock>
 8004570:	4a1d      	ldr	r2, [pc, #116]	; (80045e8 <_free_r+0x90>)
 8004572:	6813      	ldr	r3, [r2, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d105      	bne.n	8004584 <_free_r+0x2c>
 8004578:	6063      	str	r3, [r4, #4]
 800457a:	6014      	str	r4, [r2, #0]
 800457c:	0028      	movs	r0, r5
 800457e:	f000 f950 	bl	8004822 <__malloc_unlock>
 8004582:	bd70      	pop	{r4, r5, r6, pc}
 8004584:	42a3      	cmp	r3, r4
 8004586:	d909      	bls.n	800459c <_free_r+0x44>
 8004588:	6821      	ldr	r1, [r4, #0]
 800458a:	1860      	adds	r0, r4, r1
 800458c:	4283      	cmp	r3, r0
 800458e:	d1f3      	bne.n	8004578 <_free_r+0x20>
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	1841      	adds	r1, r0, r1
 8004596:	6021      	str	r1, [r4, #0]
 8004598:	e7ee      	b.n	8004578 <_free_r+0x20>
 800459a:	0013      	movs	r3, r2
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	2a00      	cmp	r2, #0
 80045a0:	d001      	beq.n	80045a6 <_free_r+0x4e>
 80045a2:	42a2      	cmp	r2, r4
 80045a4:	d9f9      	bls.n	800459a <_free_r+0x42>
 80045a6:	6819      	ldr	r1, [r3, #0]
 80045a8:	1858      	adds	r0, r3, r1
 80045aa:	42a0      	cmp	r0, r4
 80045ac:	d10b      	bne.n	80045c6 <_free_r+0x6e>
 80045ae:	6820      	ldr	r0, [r4, #0]
 80045b0:	1809      	adds	r1, r1, r0
 80045b2:	1858      	adds	r0, r3, r1
 80045b4:	6019      	str	r1, [r3, #0]
 80045b6:	4282      	cmp	r2, r0
 80045b8:	d1e0      	bne.n	800457c <_free_r+0x24>
 80045ba:	6810      	ldr	r0, [r2, #0]
 80045bc:	6852      	ldr	r2, [r2, #4]
 80045be:	1841      	adds	r1, r0, r1
 80045c0:	6019      	str	r1, [r3, #0]
 80045c2:	605a      	str	r2, [r3, #4]
 80045c4:	e7da      	b.n	800457c <_free_r+0x24>
 80045c6:	42a0      	cmp	r0, r4
 80045c8:	d902      	bls.n	80045d0 <_free_r+0x78>
 80045ca:	230c      	movs	r3, #12
 80045cc:	602b      	str	r3, [r5, #0]
 80045ce:	e7d5      	b.n	800457c <_free_r+0x24>
 80045d0:	6821      	ldr	r1, [r4, #0]
 80045d2:	1860      	adds	r0, r4, r1
 80045d4:	4282      	cmp	r2, r0
 80045d6:	d103      	bne.n	80045e0 <_free_r+0x88>
 80045d8:	6810      	ldr	r0, [r2, #0]
 80045da:	6852      	ldr	r2, [r2, #4]
 80045dc:	1841      	adds	r1, r0, r1
 80045de:	6021      	str	r1, [r4, #0]
 80045e0:	6062      	str	r2, [r4, #4]
 80045e2:	605c      	str	r4, [r3, #4]
 80045e4:	e7ca      	b.n	800457c <_free_r+0x24>
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	2000009c 	.word	0x2000009c

080045ec <_malloc_r>:
 80045ec:	2303      	movs	r3, #3
 80045ee:	b570      	push	{r4, r5, r6, lr}
 80045f0:	1ccd      	adds	r5, r1, #3
 80045f2:	439d      	bics	r5, r3
 80045f4:	3508      	adds	r5, #8
 80045f6:	0006      	movs	r6, r0
 80045f8:	2d0c      	cmp	r5, #12
 80045fa:	d21e      	bcs.n	800463a <_malloc_r+0x4e>
 80045fc:	250c      	movs	r5, #12
 80045fe:	42a9      	cmp	r1, r5
 8004600:	d81d      	bhi.n	800463e <_malloc_r+0x52>
 8004602:	0030      	movs	r0, r6
 8004604:	f000 f90c 	bl	8004820 <__malloc_lock>
 8004608:	4a25      	ldr	r2, [pc, #148]	; (80046a0 <_malloc_r+0xb4>)
 800460a:	6814      	ldr	r4, [r2, #0]
 800460c:	0021      	movs	r1, r4
 800460e:	2900      	cmp	r1, #0
 8004610:	d119      	bne.n	8004646 <_malloc_r+0x5a>
 8004612:	4c24      	ldr	r4, [pc, #144]	; (80046a4 <_malloc_r+0xb8>)
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <_malloc_r+0x36>
 800461a:	0030      	movs	r0, r6
 800461c:	f000 f844 	bl	80046a8 <_sbrk_r>
 8004620:	6020      	str	r0, [r4, #0]
 8004622:	0029      	movs	r1, r5
 8004624:	0030      	movs	r0, r6
 8004626:	f000 f83f 	bl	80046a8 <_sbrk_r>
 800462a:	1c43      	adds	r3, r0, #1
 800462c:	d12b      	bne.n	8004686 <_malloc_r+0x9a>
 800462e:	230c      	movs	r3, #12
 8004630:	0030      	movs	r0, r6
 8004632:	6033      	str	r3, [r6, #0]
 8004634:	f000 f8f5 	bl	8004822 <__malloc_unlock>
 8004638:	e003      	b.n	8004642 <_malloc_r+0x56>
 800463a:	2d00      	cmp	r5, #0
 800463c:	dadf      	bge.n	80045fe <_malloc_r+0x12>
 800463e:	230c      	movs	r3, #12
 8004640:	6033      	str	r3, [r6, #0]
 8004642:	2000      	movs	r0, #0
 8004644:	bd70      	pop	{r4, r5, r6, pc}
 8004646:	680b      	ldr	r3, [r1, #0]
 8004648:	1b5b      	subs	r3, r3, r5
 800464a:	d419      	bmi.n	8004680 <_malloc_r+0x94>
 800464c:	2b0b      	cmp	r3, #11
 800464e:	d903      	bls.n	8004658 <_malloc_r+0x6c>
 8004650:	600b      	str	r3, [r1, #0]
 8004652:	18cc      	adds	r4, r1, r3
 8004654:	6025      	str	r5, [r4, #0]
 8004656:	e003      	b.n	8004660 <_malloc_r+0x74>
 8004658:	684b      	ldr	r3, [r1, #4]
 800465a:	428c      	cmp	r4, r1
 800465c:	d10d      	bne.n	800467a <_malloc_r+0x8e>
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	0030      	movs	r0, r6
 8004662:	f000 f8de 	bl	8004822 <__malloc_unlock>
 8004666:	0020      	movs	r0, r4
 8004668:	2207      	movs	r2, #7
 800466a:	300b      	adds	r0, #11
 800466c:	1d23      	adds	r3, r4, #4
 800466e:	4390      	bics	r0, r2
 8004670:	1ac3      	subs	r3, r0, r3
 8004672:	d0e7      	beq.n	8004644 <_malloc_r+0x58>
 8004674:	425a      	negs	r2, r3
 8004676:	50e2      	str	r2, [r4, r3]
 8004678:	e7e4      	b.n	8004644 <_malloc_r+0x58>
 800467a:	6063      	str	r3, [r4, #4]
 800467c:	000c      	movs	r4, r1
 800467e:	e7ef      	b.n	8004660 <_malloc_r+0x74>
 8004680:	000c      	movs	r4, r1
 8004682:	6849      	ldr	r1, [r1, #4]
 8004684:	e7c3      	b.n	800460e <_malloc_r+0x22>
 8004686:	2303      	movs	r3, #3
 8004688:	1cc4      	adds	r4, r0, #3
 800468a:	439c      	bics	r4, r3
 800468c:	42a0      	cmp	r0, r4
 800468e:	d0e1      	beq.n	8004654 <_malloc_r+0x68>
 8004690:	1a21      	subs	r1, r4, r0
 8004692:	0030      	movs	r0, r6
 8004694:	f000 f808 	bl	80046a8 <_sbrk_r>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	d1db      	bne.n	8004654 <_malloc_r+0x68>
 800469c:	e7c7      	b.n	800462e <_malloc_r+0x42>
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	2000009c 	.word	0x2000009c
 80046a4:	200000a0 	.word	0x200000a0

080046a8 <_sbrk_r>:
 80046a8:	2300      	movs	r3, #0
 80046aa:	b570      	push	{r4, r5, r6, lr}
 80046ac:	4c06      	ldr	r4, [pc, #24]	; (80046c8 <_sbrk_r+0x20>)
 80046ae:	0005      	movs	r5, r0
 80046b0:	0008      	movs	r0, r1
 80046b2:	6023      	str	r3, [r4, #0]
 80046b4:	f7ff fb5c 	bl	8003d70 <_sbrk>
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	d103      	bne.n	80046c4 <_sbrk_r+0x1c>
 80046bc:	6823      	ldr	r3, [r4, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d000      	beq.n	80046c4 <_sbrk_r+0x1c>
 80046c2:	602b      	str	r3, [r5, #0]
 80046c4:	bd70      	pop	{r4, r5, r6, pc}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	200001dc 	.word	0x200001dc

080046cc <__sread>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	000c      	movs	r4, r1
 80046d0:	250e      	movs	r5, #14
 80046d2:	5f49      	ldrsh	r1, [r1, r5]
 80046d4:	f000 f8a6 	bl	8004824 <_read_r>
 80046d8:	2800      	cmp	r0, #0
 80046da:	db03      	blt.n	80046e4 <__sread+0x18>
 80046dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046de:	181b      	adds	r3, r3, r0
 80046e0:	6563      	str	r3, [r4, #84]	; 0x54
 80046e2:	bd70      	pop	{r4, r5, r6, pc}
 80046e4:	89a3      	ldrh	r3, [r4, #12]
 80046e6:	4a02      	ldr	r2, [pc, #8]	; (80046f0 <__sread+0x24>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	81a3      	strh	r3, [r4, #12]
 80046ec:	e7f9      	b.n	80046e2 <__sread+0x16>
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	ffffefff 	.word	0xffffefff

080046f4 <__swrite>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	001f      	movs	r7, r3
 80046f8:	898b      	ldrh	r3, [r1, #12]
 80046fa:	0005      	movs	r5, r0
 80046fc:	000c      	movs	r4, r1
 80046fe:	0016      	movs	r6, r2
 8004700:	05db      	lsls	r3, r3, #23
 8004702:	d505      	bpl.n	8004710 <__swrite+0x1c>
 8004704:	230e      	movs	r3, #14
 8004706:	5ec9      	ldrsh	r1, [r1, r3]
 8004708:	2200      	movs	r2, #0
 800470a:	2302      	movs	r3, #2
 800470c:	f000 f874 	bl	80047f8 <_lseek_r>
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	4a05      	ldr	r2, [pc, #20]	; (8004728 <__swrite+0x34>)
 8004714:	0028      	movs	r0, r5
 8004716:	4013      	ands	r3, r2
 8004718:	81a3      	strh	r3, [r4, #12]
 800471a:	0032      	movs	r2, r6
 800471c:	230e      	movs	r3, #14
 800471e:	5ee1      	ldrsh	r1, [r4, r3]
 8004720:	003b      	movs	r3, r7
 8004722:	f000 f81f 	bl	8004764 <_write_r>
 8004726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004728:	ffffefff 	.word	0xffffefff

0800472c <__sseek>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	000c      	movs	r4, r1
 8004730:	250e      	movs	r5, #14
 8004732:	5f49      	ldrsh	r1, [r1, r5]
 8004734:	f000 f860 	bl	80047f8 <_lseek_r>
 8004738:	89a3      	ldrh	r3, [r4, #12]
 800473a:	1c42      	adds	r2, r0, #1
 800473c:	d103      	bne.n	8004746 <__sseek+0x1a>
 800473e:	4a05      	ldr	r2, [pc, #20]	; (8004754 <__sseek+0x28>)
 8004740:	4013      	ands	r3, r2
 8004742:	81a3      	strh	r3, [r4, #12]
 8004744:	bd70      	pop	{r4, r5, r6, pc}
 8004746:	2280      	movs	r2, #128	; 0x80
 8004748:	0152      	lsls	r2, r2, #5
 800474a:	4313      	orrs	r3, r2
 800474c:	81a3      	strh	r3, [r4, #12]
 800474e:	6560      	str	r0, [r4, #84]	; 0x54
 8004750:	e7f8      	b.n	8004744 <__sseek+0x18>
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	ffffefff 	.word	0xffffefff

08004758 <__sclose>:
 8004758:	b510      	push	{r4, lr}
 800475a:	230e      	movs	r3, #14
 800475c:	5ec9      	ldrsh	r1, [r1, r3]
 800475e:	f000 f815 	bl	800478c <_close_r>
 8004762:	bd10      	pop	{r4, pc}

08004764 <_write_r>:
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	0005      	movs	r5, r0
 8004768:	0008      	movs	r0, r1
 800476a:	0011      	movs	r1, r2
 800476c:	2200      	movs	r2, #0
 800476e:	4c06      	ldr	r4, [pc, #24]	; (8004788 <_write_r+0x24>)
 8004770:	6022      	str	r2, [r4, #0]
 8004772:	001a      	movs	r2, r3
 8004774:	f7ff fab3 	bl	8003cde <_write>
 8004778:	1c43      	adds	r3, r0, #1
 800477a:	d103      	bne.n	8004784 <_write_r+0x20>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d000      	beq.n	8004784 <_write_r+0x20>
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	bd70      	pop	{r4, r5, r6, pc}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	200001dc 	.word	0x200001dc

0800478c <_close_r>:
 800478c:	2300      	movs	r3, #0
 800478e:	b570      	push	{r4, r5, r6, lr}
 8004790:	4c06      	ldr	r4, [pc, #24]	; (80047ac <_close_r+0x20>)
 8004792:	0005      	movs	r5, r0
 8004794:	0008      	movs	r0, r1
 8004796:	6023      	str	r3, [r4, #0]
 8004798:	f7ff fabd 	bl	8003d16 <_close>
 800479c:	1c43      	adds	r3, r0, #1
 800479e:	d103      	bne.n	80047a8 <_close_r+0x1c>
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d000      	beq.n	80047a8 <_close_r+0x1c>
 80047a6:	602b      	str	r3, [r5, #0]
 80047a8:	bd70      	pop	{r4, r5, r6, pc}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	200001dc 	.word	0x200001dc

080047b0 <_fstat_r>:
 80047b0:	2300      	movs	r3, #0
 80047b2:	b570      	push	{r4, r5, r6, lr}
 80047b4:	4c06      	ldr	r4, [pc, #24]	; (80047d0 <_fstat_r+0x20>)
 80047b6:	0005      	movs	r5, r0
 80047b8:	0008      	movs	r0, r1
 80047ba:	0011      	movs	r1, r2
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	f7ff fab4 	bl	8003d2a <_fstat>
 80047c2:	1c43      	adds	r3, r0, #1
 80047c4:	d103      	bne.n	80047ce <_fstat_r+0x1e>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d000      	beq.n	80047ce <_fstat_r+0x1e>
 80047cc:	602b      	str	r3, [r5, #0]
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	200001dc 	.word	0x200001dc

080047d4 <_isatty_r>:
 80047d4:	2300      	movs	r3, #0
 80047d6:	b570      	push	{r4, r5, r6, lr}
 80047d8:	4c06      	ldr	r4, [pc, #24]	; (80047f4 <_isatty_r+0x20>)
 80047da:	0005      	movs	r5, r0
 80047dc:	0008      	movs	r0, r1
 80047de:	6023      	str	r3, [r4, #0]
 80047e0:	f7ff fab1 	bl	8003d46 <_isatty>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d103      	bne.n	80047f0 <_isatty_r+0x1c>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d000      	beq.n	80047f0 <_isatty_r+0x1c>
 80047ee:	602b      	str	r3, [r5, #0]
 80047f0:	bd70      	pop	{r4, r5, r6, pc}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	200001dc 	.word	0x200001dc

080047f8 <_lseek_r>:
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	0005      	movs	r5, r0
 80047fc:	0008      	movs	r0, r1
 80047fe:	0011      	movs	r1, r2
 8004800:	2200      	movs	r2, #0
 8004802:	4c06      	ldr	r4, [pc, #24]	; (800481c <_lseek_r+0x24>)
 8004804:	6022      	str	r2, [r4, #0]
 8004806:	001a      	movs	r2, r3
 8004808:	f7ff faa6 	bl	8003d58 <_lseek>
 800480c:	1c43      	adds	r3, r0, #1
 800480e:	d103      	bne.n	8004818 <_lseek_r+0x20>
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d000      	beq.n	8004818 <_lseek_r+0x20>
 8004816:	602b      	str	r3, [r5, #0]
 8004818:	bd70      	pop	{r4, r5, r6, pc}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	200001dc 	.word	0x200001dc

08004820 <__malloc_lock>:
 8004820:	4770      	bx	lr

08004822 <__malloc_unlock>:
 8004822:	4770      	bx	lr

08004824 <_read_r>:
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	0005      	movs	r5, r0
 8004828:	0008      	movs	r0, r1
 800482a:	0011      	movs	r1, r2
 800482c:	2200      	movs	r2, #0
 800482e:	4c06      	ldr	r4, [pc, #24]	; (8004848 <_read_r+0x24>)
 8004830:	6022      	str	r2, [r4, #0]
 8004832:	001a      	movs	r2, r3
 8004834:	f7ff fa36 	bl	8003ca4 <_read>
 8004838:	1c43      	adds	r3, r0, #1
 800483a:	d103      	bne.n	8004844 <_read_r+0x20>
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d000      	beq.n	8004844 <_read_r+0x20>
 8004842:	602b      	str	r3, [r5, #0]
 8004844:	bd70      	pop	{r4, r5, r6, pc}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	200001dc 	.word	0x200001dc

0800484c <_init>:
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004852:	bc08      	pop	{r3}
 8004854:	469e      	mov	lr, r3
 8004856:	4770      	bx	lr

08004858 <_fini>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr
